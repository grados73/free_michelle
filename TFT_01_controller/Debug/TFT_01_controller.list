
TFT_01_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006300  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012998  080064a0  080064a0  000164a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018e38  08018e38  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  08018e38  08018e38  00028e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018e40  08018e40  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018e40  08018e40  00028e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018e44  08018e44  00028e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08018e48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000070  08018eb8  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08018eb8  00030380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013edb  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ca  00000000  00000000  00043f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00047248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000050db  00000000  00000000  00047ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014bd0  00000000  00000000  0004cfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a6bc  00000000  00000000  00061b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000ec257  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b60  00000000  00000000  000ec2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c74  00000000  00000000  000ece10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006488 	.word	0x08006488

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006488 	.word	0x08006488

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	; 0x30
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
 80005b4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	1acb      	subs	r3, r1, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	bfb8      	it	lt
 80005ce:	425b      	neglt	r3, r3
 80005d0:	429a      	cmp	r2, r3
 80005d2:	bfcc      	ite	gt
 80005d4:	2301      	movgt	r3, #1
 80005d6:	2300      	movle	r3, #0
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80005dc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00b      	beq.n	80005fc <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ee:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	623b      	str	r3, [r7, #32]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dd0b      	ble.n	800061c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	61fb      	str	r3, [r7, #28]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	b29a      	uxth	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	b29b      	uxth	r3, r3
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	bfb8      	it	lt
 8000634:	425b      	neglt	r3, r3
 8000636:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000638:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800063c:	0fda      	lsrs	r2, r3, #31
 800063e:	4413      	add	r3, r2
 8000640:	105b      	asrs	r3, r3, #1
 8000642:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	429a      	cmp	r2, r3
 800064a:	da02      	bge.n	8000652 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800064c:	2301      	movs	r3, #1
 800064e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000650:	e02e      	b.n	80006b0 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8000652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000656:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000658:	e02a      	b.n	80006b0 <GFX_WriteLine+0x108>
	        if (steep) {
 800065a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800065e:	2b00      	cmp	r3, #0
 8000660:	d008      	beq.n	8000674 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	b21b      	sxth	r3, r3
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	b211      	sxth	r1, r2
 800066a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fe67 	bl	8001340 <ILI9341_WritePixel>
 8000672:	e007      	b.n	8000684 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	b21b      	sxth	r3, r3
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	b211      	sxth	r1, r2
 800067c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fe5e 	bl	8001340 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8000684:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000686:	8abb      	ldrh	r3, [r7, #20]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	b29b      	uxth	r3, r3
 800068c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800068e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000692:	2b00      	cmp	r3, #0
 8000694:	da09      	bge.n	80006aa <GFX_WriteLine+0x102>
	            y_start += ystep;
 8000696:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	4413      	add	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80006a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80006a2:	8afb      	ldrh	r3, [r7, #22]
 80006a4:	4413      	add	r3, r2
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3301      	adds	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	ddd0      	ble.n	800065a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3730      	adds	r7, #48	; 0x30
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b086      	sub	sp, #24
 80006c6:	af02      	add	r7, sp, #8
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	887b      	ldrh	r3, [r7, #2]
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4613      	mov	r3, r2
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	68b9      	ldr	r1, [r7, #8]
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f7ff ff60 	bl	80005a8 <GFX_WriteLine>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	1e5a      	subs	r2, r3, #1
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	68b9      	ldr	r1, [r7, #8]
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f7ff ff4a 	bl	80005a8 <GFX_WriteLine>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	4611      	mov	r1, r2
 8000728:	461a      	mov	r2, r3
 800072a:	460b      	mov	r3, r1
 800072c:	80fb      	strh	r3, [r7, #6]
 800072e:	4613      	mov	r3, r2
 8000730:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e008      	b.n	800074a <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000738:	88ba      	ldrh	r2, [r7, #4]
 800073a:	8c3b      	ldrh	r3, [r7, #32]
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	6978      	ldr	r0, [r7, #20]
 8000740:	f7ff ffbf 	bl	80006c2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	88fa      	ldrh	r2, [r7, #6]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4413      	add	r3, r2
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	429a      	cmp	r2, r3
 8000754:	dbf0      	blt.n	8000738 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	4611      	mov	r1, r2
 800076c:	461a      	mov	r2, r3
 800076e:	460b      	mov	r3, r1
 8000770:	80fb      	strh	r3, [r7, #6]
 8000772:	4613      	mov	r3, r2
 8000774:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	f1c3 0301 	rsb	r3, r3, #1
 800077c:	b29b      	uxth	r3, r3
 800077e:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	461a      	mov	r2, r3
 8000788:	03d2      	lsls	r2, r2, #15
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	b29b      	uxth	r3, r3
 8000790:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800079a:	e0b5      	b.n	8000908 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 800079c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db0e      	blt.n	80007c2 <GFX_DrawCircleHelper+0x62>
            y--;
 80007a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	3b01      	subs	r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80007b0:	8b7b      	ldrh	r3, [r7, #26]
 80007b2:	3302      	adds	r3, #2
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80007b8:	8bfa      	ldrh	r2, [r7, #30]
 80007ba:	8b7b      	ldrh	r3, [r7, #26]
 80007bc:	4413      	add	r3, r2
 80007be:	b29b      	uxth	r3, r3
 80007c0:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80007c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	3301      	adds	r3, #1
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80007ce:	8bbb      	ldrh	r3, [r7, #28]
 80007d0:	3302      	adds	r3, #2
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80007d6:	8bfa      	ldrh	r2, [r7, #30]
 80007d8:	8bbb      	ldrh	r3, [r7, #28]
 80007da:	4413      	add	r3, r2
 80007dc:	b29b      	uxth	r3, r3
 80007de:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80007e0:	797b      	ldrb	r3, [r7, #5]
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d01f      	beq.n	800082a <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	8b3b      	ldrh	r3, [r7, #24]
 80007f0:	4413      	add	r3, r2
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b218      	sxth	r0, r3
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	8afb      	ldrh	r3, [r7, #22]
 80007fc:	4413      	add	r3, r2
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b21b      	sxth	r3, r3
 8000802:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000804:	4619      	mov	r1, r3
 8000806:	f000 fd9b 	bl	8001340 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	b29a      	uxth	r2, r3
 800080e:	8afb      	ldrh	r3, [r7, #22]
 8000810:	4413      	add	r3, r2
 8000812:	b29b      	uxth	r3, r3
 8000814:	b218      	sxth	r0, r3
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	b29a      	uxth	r2, r3
 800081a:	8b3b      	ldrh	r3, [r7, #24]
 800081c:	4413      	add	r3, r2
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
 8000822:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000824:	4619      	mov	r1, r3
 8000826:	f000 fd8b 	bl	8001340 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 800082a:	797b      	ldrb	r3, [r7, #5]
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d01f      	beq.n	8000874 <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	b29a      	uxth	r2, r3
 8000838:	8b3b      	ldrh	r3, [r7, #24]
 800083a:	4413      	add	r3, r2
 800083c:	b29b      	uxth	r3, r3
 800083e:	b218      	sxth	r0, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	b29a      	uxth	r2, r3
 8000844:	8afb      	ldrh	r3, [r7, #22]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	b21b      	sxth	r3, r3
 800084c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800084e:	4619      	mov	r1, r3
 8000850:	f000 fd76 	bl	8001340 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	b29a      	uxth	r2, r3
 8000858:	8afb      	ldrh	r3, [r7, #22]
 800085a:	4413      	add	r3, r2
 800085c:	b29b      	uxth	r3, r3
 800085e:	b218      	sxth	r0, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	b29a      	uxth	r2, r3
 8000864:	8b3b      	ldrh	r3, [r7, #24]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	b29b      	uxth	r3, r3
 800086a:	b21b      	sxth	r3, r3
 800086c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800086e:	4619      	mov	r1, r3
 8000870:	f000 fd66 	bl	8001340 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 8000874:	797b      	ldrb	r3, [r7, #5]
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	2b00      	cmp	r3, #0
 800087c:	d01f      	beq.n	80008be <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	b29a      	uxth	r2, r3
 8000882:	8afb      	ldrh	r3, [r7, #22]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	b29b      	uxth	r3, r3
 8000888:	b218      	sxth	r0, r3
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	b29a      	uxth	r2, r3
 800088e:	8b3b      	ldrh	r3, [r7, #24]
 8000890:	4413      	add	r3, r2
 8000892:	b29b      	uxth	r3, r3
 8000894:	b21b      	sxth	r3, r3
 8000896:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000898:	4619      	mov	r1, r3
 800089a:	f000 fd51 	bl	8001340 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	8b3b      	ldrh	r3, [r7, #24]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b218      	sxth	r0, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	8afb      	ldrh	r3, [r7, #22]
 80008b0:	4413      	add	r3, r2
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80008b8:	4619      	mov	r1, r3
 80008ba:	f000 fd41 	bl	8001340 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d01f      	beq.n	8000908 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	8afb      	ldrh	r3, [r7, #22]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b218      	sxth	r0, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	8b3b      	ldrh	r3, [r7, #24]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b21b      	sxth	r3, r3
 80008e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80008e2:	4619      	mov	r1, r3
 80008e4:	f000 fd2c 	bl	8001340 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	8b3b      	ldrh	r3, [r7, #24]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b218      	sxth	r0, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	8afb      	ldrh	r3, [r7, #22]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b21b      	sxth	r3, r3
 8000900:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000902:	4619      	mov	r1, r3
 8000904:	f000 fd1c 	bl	8001340 <ILI9341_WritePixel>
    while (x<y) {
 8000908:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800090c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000910:	429a      	cmp	r2, r3
 8000912:	f6ff af43 	blt.w	800079c <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	4611      	mov	r1, r2
 800092c:	461a      	mov	r2, r3
 800092e:	460b      	mov	r3, r1
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	4613      	mov	r3, r2
 8000934:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	f1c3 0301 	rsb	r3, r3, #1
 800093c:	b29b      	uxth	r3, r3
 800093e:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	461a      	mov	r2, r3
 8000948:	03d2      	lsls	r2, r2, #15
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	b29b      	uxth	r3, r3
 8000950:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800095a:	e073      	b.n	8000a44 <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 800095c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0e      	blt.n	8000982 <GFX_DrawFillCircleHelper+0x62>
            y--;
 8000964:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000968:	b29b      	uxth	r3, r3
 800096a:	3b01      	subs	r3, #1
 800096c:	b29b      	uxth	r3, r3
 800096e:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000970:	8b7b      	ldrh	r3, [r7, #26]
 8000972:	3302      	adds	r3, #2
 8000974:	b29b      	uxth	r3, r3
 8000976:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8000978:	8bfa      	ldrh	r2, [r7, #30]
 800097a:	8b7b      	ldrh	r3, [r7, #26]
 800097c:	4413      	add	r3, r2
 800097e:	b29b      	uxth	r3, r3
 8000980:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000982:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000986:	b29b      	uxth	r3, r3
 8000988:	3301      	adds	r3, #1
 800098a:	b29b      	uxth	r3, r3
 800098c:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 800098e:	8bbb      	ldrh	r3, [r7, #28]
 8000990:	3302      	adds	r3, #2
 8000992:	b29b      	uxth	r3, r3
 8000994:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8000996:	8bfa      	ldrh	r2, [r7, #30]
 8000998:	8bbb      	ldrh	r3, [r7, #28]
 800099a:	4413      	add	r3, r2
 800099c:	b29b      	uxth	r3, r3
 800099e:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 80009a0:	797b      	ldrb	r3, [r7, #5]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d023      	beq.n	80009f2 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80009aa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	18d0      	adds	r0, r2, r3
 80009b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	1ad1      	subs	r1, r2, r3
 80009ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80009c6:	441a      	add	r2, r3
 80009c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009ca:	f7ff fe7a 	bl	80006c2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80009ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	18d0      	adds	r0, r2, r3
 80009d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	1ad1      	subs	r1, r2, r3
 80009de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80009ea:	441a      	add	r2, r3
 80009ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009ee:	f7ff fe68 	bl	80006c2 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80009f2:	797b      	ldrb	r3, [r7, #5]
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d023      	beq.n	8000a44 <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80009fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	1ad0      	subs	r0, r2, r3
 8000a04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	1ad1      	subs	r1, r2, r3
 8000a0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000a18:	441a      	add	r2, r3
 8000a1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a1c:	f7ff fe51 	bl	80006c2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8000a20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	1ad0      	subs	r0, r2, r3
 8000a28:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	1ad1      	subs	r1, r2, r3
 8000a30:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000a3c:	441a      	add	r2, r3
 8000a3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a40:	f7ff fe3f 	bl	80006c2 <GFX_DrawFastVLine>
    while (x<y) {
 8000a44:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000a48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	db85      	blt.n	800095c <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	3720      	adds	r7, #32
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	4611      	mov	r1, r2
 8000a66:	461a      	mov	r2, r3
 8000a68:	460b      	mov	r3, r1
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000a70:	8b3a      	ldrh	r2, [r7, #24]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	18d0      	adds	r0, r2, r3
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	8b3b      	ldrh	r3, [r7, #24]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	1ad2      	subs	r2, r2, r3
 8000a7e:	8bbb      	ldrh	r3, [r7, #28]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	f7ff fe35 	bl	80006f0 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000a86:	8b3a      	ldrh	r2, [r7, #24]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	18d0      	adds	r0, r2, r3
 8000a8c:	88ba      	ldrh	r2, [r7, #4]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	4413      	add	r3, r2
 8000a92:	1e59      	subs	r1, r3, #1
 8000a94:	88fa      	ldrh	r2, [r7, #6]
 8000a96:	8b3b      	ldrh	r3, [r7, #24]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	1ad2      	subs	r2, r2, r3
 8000a9c:	8bbb      	ldrh	r3, [r7, #28]
 8000a9e:	f7ff fe27 	bl	80006f0 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000aa2:	8b3a      	ldrh	r2, [r7, #24]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	18d1      	adds	r1, r2, r3
 8000aa8:	88ba      	ldrh	r2, [r7, #4]
 8000aaa:	8b3b      	ldrh	r3, [r7, #24]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	1ad2      	subs	r2, r2, r3
 8000ab0:	8bbb      	ldrh	r3, [r7, #28]
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fe05 	bl	80006c2 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000ab8:	88fa      	ldrh	r2, [r7, #6]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4413      	add	r3, r2
 8000abe:	1e58      	subs	r0, r3, #1
 8000ac0:	8b3a      	ldrh	r2, [r7, #24]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	18d1      	adds	r1, r2, r3
 8000ac6:	88ba      	ldrh	r2, [r7, #4]
 8000ac8:	8b3b      	ldrh	r3, [r7, #24]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	1ad2      	subs	r2, r2, r3
 8000ace:	8bbb      	ldrh	r3, [r7, #28]
 8000ad0:	f7ff fdf7 	bl	80006c2 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 8000ad4:	8b3a      	ldrh	r2, [r7, #24]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	18d0      	adds	r0, r2, r3
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	18d1      	adds	r1, r2, r3
 8000ae0:	8b3a      	ldrh	r2, [r7, #24]
 8000ae2:	8bbb      	ldrh	r3, [r7, #28]
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	f7ff fe3a 	bl	8000760 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	441a      	add	r2, r3
 8000af2:	8b3b      	ldrh	r3, [r7, #24]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	1e58      	subs	r0, r3, #1
 8000af8:	8b3a      	ldrh	r2, [r7, #24]
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	18d1      	adds	r1, r2, r3
 8000afe:	8b3a      	ldrh	r2, [r7, #24]
 8000b00:	8bbb      	ldrh	r3, [r7, #28]
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2302      	movs	r3, #2
 8000b06:	f7ff fe2b 	bl	8000760 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000b0a:	88fa      	ldrh	r2, [r7, #6]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	441a      	add	r2, r3
 8000b10:	8b3b      	ldrh	r3, [r7, #24]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	1e58      	subs	r0, r3, #1
 8000b16:	88ba      	ldrh	r2, [r7, #4]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	441a      	add	r2, r3
 8000b1c:	8b3b      	ldrh	r3, [r7, #24]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	1e59      	subs	r1, r3, #1
 8000b22:	8b3a      	ldrh	r2, [r7, #24]
 8000b24:	8bbb      	ldrh	r3, [r7, #28]
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2304      	movs	r3, #4
 8000b2a:	f7ff fe19 	bl	8000760 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000b2e:	8b3a      	ldrh	r2, [r7, #24]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	18d0      	adds	r0, r2, r3
 8000b34:	88ba      	ldrh	r2, [r7, #4]
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	441a      	add	r2, r3
 8000b3a:	8b3b      	ldrh	r3, [r7, #24]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	1e59      	subs	r1, r3, #1
 8000b40:	8b3a      	ldrh	r2, [r7, #24]
 8000b42:	8bbb      	ldrh	r3, [r7, #28]
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2308      	movs	r3, #8
 8000b48:	f7ff fe0a 	bl	8000760 <GFX_DrawCircleHelper>
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	461a      	mov	r2, r3
 8000b62:	460b      	mov	r3, r1
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	4613      	mov	r3, r2
 8000b68:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8000b6a:	8c3a      	ldrh	r2, [r7, #32]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	18d0      	adds	r0, r2, r3
 8000b70:	8c3b      	ldrh	r3, [r7, #32]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	88fa      	ldrh	r2, [r7, #6]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	88b9      	ldrh	r1, [r7, #4]
 8000b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	460b      	mov	r3, r1
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	f7ff fdc9 	bl	800071c <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8000b8a:	88fa      	ldrh	r2, [r7, #6]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	441a      	add	r2, r3
 8000b90:	8c3b      	ldrh	r3, [r7, #32]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	1e58      	subs	r0, r3, #1
 8000b96:	8c3a      	ldrh	r2, [r7, #32]
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	18d1      	adds	r1, r2, r3
 8000b9c:	8c3b      	ldrh	r3, [r7, #32]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	88ba      	ldrh	r2, [r7, #4]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	8c3c      	ldrh	r4, [r7, #32]
 8000bb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4622      	mov	r2, r4
 8000bba:	f7ff feb1 	bl	8000920 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8000bbe:	8c3a      	ldrh	r2, [r7, #32]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	18d0      	adds	r0, r2, r3
 8000bc4:	8c3a      	ldrh	r2, [r7, #32]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	18d1      	adds	r1, r2, r3
 8000bca:	8c3b      	ldrh	r3, [r7, #32]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	88ba      	ldrh	r2, [r7, #4]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	8c3c      	ldrh	r4, [r7, #32]
 8000bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000be0:	9201      	str	r2, [sp, #4]
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2302      	movs	r3, #2
 8000be6:	4622      	mov	r2, r4
 8000be8:	f7ff fe9a 	bl	8000920 <GFX_DrawFillCircleHelper>
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <EF_SetFont+0x1c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000098 	.word	0x20000098

08000c14 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <EF_GetFontHeight+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	20000098 	.word	0x20000098

08000c2c <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <EF_GetFontStartChar+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	785b      	ldrb	r3, [r3, #1]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	20000098 	.word	0x20000098

08000c44 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <EF_GetFontEndChar+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	789b      	ldrb	r3, [r3, #2]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	20000098 	.word	0x20000098

08000c5c <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <EF_GetFontSpaceWidth+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	78db      	ldrb	r3, [r3, #3]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	20000098 	.word	0x20000098

08000c74 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2bc5      	cmp	r3, #197	; 0xc5
 8000c88:	d052      	beq.n	8000d30 <EF_DecodePolish+0xbc>
 8000c8a:	2bc5      	cmp	r3, #197	; 0xc5
 8000c8c:	f300 80e7 	bgt.w	8000e5e <EF_DecodePolish+0x1ea>
 8000c90:	2bc3      	cmp	r3, #195	; 0xc3
 8000c92:	d002      	beq.n	8000c9a <EF_DecodePolish+0x26>
 8000c94:	2bc4      	cmp	r3, #196	; 0xc4
 8000c96:	d00a      	beq.n	8000cae <EF_DecodePolish+0x3a>
 8000c98:	e0e1      	b.n	8000e5e <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	2b93      	cmp	r3, #147	; 0x93
 8000c9e:	d002      	beq.n	8000ca6 <EF_DecodePolish+0x32>
 8000ca0:	2bb3      	cmp	r3, #179	; 0xb3
 8000ca2:	d002      	beq.n	8000caa <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8000ca4:	e0db      	b.n	8000e5e <EF_DecodePolish+0x1ea>
			return 0x84;
 8000ca6:	2384      	movs	r3, #132	; 0x84
 8000ca8:	e0da      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8000caa:	238d      	movs	r3, #141	; 0x8d
 8000cac:	e0d8      	b.n	8000e60 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	3b84      	subs	r3, #132	; 0x84
 8000cb2:	2b15      	cmp	r3, #21
 8000cb4:	f200 80d0 	bhi.w	8000e58 <EF_DecodePolish+0x1e4>
 8000cb8:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <EF_DecodePolish+0x4c>)
 8000cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbe:	bf00      	nop
 8000cc0:	08000d19 	.word	0x08000d19
 8000cc4:	08000d25 	.word	0x08000d25
 8000cc8:	08000d21 	.word	0x08000d21
 8000ccc:	08000d2d 	.word	0x08000d2d
 8000cd0:	08000e59 	.word	0x08000e59
 8000cd4:	08000e59 	.word	0x08000e59
 8000cd8:	08000e59 	.word	0x08000e59
 8000cdc:	08000e59 	.word	0x08000e59
 8000ce0:	08000e59 	.word	0x08000e59
 8000ce4:	08000e59 	.word	0x08000e59
 8000ce8:	08000e59 	.word	0x08000e59
 8000cec:	08000e59 	.word	0x08000e59
 8000cf0:	08000e59 	.word	0x08000e59
 8000cf4:	08000e59 	.word	0x08000e59
 8000cf8:	08000e59 	.word	0x08000e59
 8000cfc:	08000e59 	.word	0x08000e59
 8000d00:	08000e59 	.word	0x08000e59
 8000d04:	08000e59 	.word	0x08000e59
 8000d08:	08000e59 	.word	0x08000e59
 8000d0c:	08000e59 	.word	0x08000e59
 8000d10:	08000d1d 	.word	0x08000d1d
 8000d14:	08000d29 	.word	0x08000d29
		{
		case 0x84: // Ą
			return 0x7F;
 8000d18:	237f      	movs	r3, #127	; 0x7f
 8000d1a:	e0a1      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8000d1c:	2381      	movs	r3, #129	; 0x81
 8000d1e:	e09f      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	e09d      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8000d24:	2388      	movs	r3, #136	; 0x88
 8000d26:	e09b      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8000d28:	238a      	movs	r3, #138	; 0x8a
 8000d2a:	e099      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8000d2c:	2389      	movs	r3, #137	; 0x89
 8000d2e:	e097      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	3b81      	subs	r3, #129	; 0x81
 8000d34:	2b3b      	cmp	r3, #59	; 0x3b
 8000d36:	f200 8091 	bhi.w	8000e5c <EF_DecodePolish+0x1e8>
 8000d3a:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <EF_DecodePolish+0xcc>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000e31 	.word	0x08000e31
 8000d44:	08000e45 	.word	0x08000e45
 8000d48:	08000e35 	.word	0x08000e35
 8000d4c:	08000e49 	.word	0x08000e49
 8000d50:	08000e5d 	.word	0x08000e5d
 8000d54:	08000e5d 	.word	0x08000e5d
 8000d58:	08000e5d 	.word	0x08000e5d
 8000d5c:	08000e5d 	.word	0x08000e5d
 8000d60:	08000e5d 	.word	0x08000e5d
 8000d64:	08000e5d 	.word	0x08000e5d
 8000d68:	08000e5d 	.word	0x08000e5d
 8000d6c:	08000e5d 	.word	0x08000e5d
 8000d70:	08000e5d 	.word	0x08000e5d
 8000d74:	08000e5d 	.word	0x08000e5d
 8000d78:	08000e5d 	.word	0x08000e5d
 8000d7c:	08000e5d 	.word	0x08000e5d
 8000d80:	08000e5d 	.word	0x08000e5d
 8000d84:	08000e5d 	.word	0x08000e5d
 8000d88:	08000e5d 	.word	0x08000e5d
 8000d8c:	08000e5d 	.word	0x08000e5d
 8000d90:	08000e5d 	.word	0x08000e5d
 8000d94:	08000e5d 	.word	0x08000e5d
 8000d98:	08000e5d 	.word	0x08000e5d
 8000d9c:	08000e5d 	.word	0x08000e5d
 8000da0:	08000e5d 	.word	0x08000e5d
 8000da4:	08000e39 	.word	0x08000e39
 8000da8:	08000e4d 	.word	0x08000e4d
 8000dac:	08000e5d 	.word	0x08000e5d
 8000db0:	08000e5d 	.word	0x08000e5d
 8000db4:	08000e5d 	.word	0x08000e5d
 8000db8:	08000e5d 	.word	0x08000e5d
 8000dbc:	08000e5d 	.word	0x08000e5d
 8000dc0:	08000e5d 	.word	0x08000e5d
 8000dc4:	08000e5d 	.word	0x08000e5d
 8000dc8:	08000e5d 	.word	0x08000e5d
 8000dcc:	08000e5d 	.word	0x08000e5d
 8000dd0:	08000e5d 	.word	0x08000e5d
 8000dd4:	08000e5d 	.word	0x08000e5d
 8000dd8:	08000e5d 	.word	0x08000e5d
 8000ddc:	08000e5d 	.word	0x08000e5d
 8000de0:	08000e5d 	.word	0x08000e5d
 8000de4:	08000e5d 	.word	0x08000e5d
 8000de8:	08000e5d 	.word	0x08000e5d
 8000dec:	08000e5d 	.word	0x08000e5d
 8000df0:	08000e5d 	.word	0x08000e5d
 8000df4:	08000e5d 	.word	0x08000e5d
 8000df8:	08000e5d 	.word	0x08000e5d
 8000dfc:	08000e5d 	.word	0x08000e5d
 8000e00:	08000e5d 	.word	0x08000e5d
 8000e04:	08000e5d 	.word	0x08000e5d
 8000e08:	08000e5d 	.word	0x08000e5d
 8000e0c:	08000e5d 	.word	0x08000e5d
 8000e10:	08000e5d 	.word	0x08000e5d
 8000e14:	08000e5d 	.word	0x08000e5d
 8000e18:	08000e5d 	.word	0x08000e5d
 8000e1c:	08000e5d 	.word	0x08000e5d
 8000e20:	08000e3d 	.word	0x08000e3d
 8000e24:	08000e51 	.word	0x08000e51
 8000e28:	08000e41 	.word	0x08000e41
 8000e2c:	08000e55 	.word	0x08000e55
		{
		case 0x81: // Ł
			return 0x82;
 8000e30:	2382      	movs	r3, #130	; 0x82
 8000e32:	e015      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8000e34:	2383      	movs	r3, #131	; 0x83
 8000e36:	e013      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8000e38:	2385      	movs	r3, #133	; 0x85
 8000e3a:	e011      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8000e3c:	2386      	movs	r3, #134	; 0x86
 8000e3e:	e00f      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8000e40:	2387      	movs	r3, #135	; 0x87
 8000e42:	e00d      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8000e44:	238b      	movs	r3, #139	; 0x8b
 8000e46:	e00b      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8000e48:	238c      	movs	r3, #140	; 0x8c
 8000e4a:	e009      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8000e4c:	238e      	movs	r3, #142	; 0x8e
 8000e4e:	e007      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8000e50:	238f      	movs	r3, #143	; 0x8f
 8000e52:	e005      	b.n	8000e60 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8000e54:	2390      	movs	r3, #144	; 0x90
 8000e56:	e003      	b.n	8000e60 <EF_DecodePolish+0x1ec>
		break;
 8000e58:	bf00      	nop
 8000e5a:	e000      	b.n	8000e5e <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8000e5c:	bf00      	nop
	}

	return 0;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af02      	add	r7, sp, #8
 8000e72:	4604      	mov	r4, r0
 8000e74:	4608      	mov	r0, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4623      	mov	r3, r4
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80bb      	strh	r3, [r7, #4]
 8000e82:	460b      	mov	r3, r1
 8000e84:	807b      	strh	r3, [r7, #2]
 8000e86:	4613      	mov	r3, r2
 8000e88:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8000e8a:	f7ff fecf 	bl	8000c2c <EF_GetFontStartChar>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	1a9b      	subs	r3, r3, r2
 8000e96:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b20      	cmp	r3, #32
 8000e9c:	d120      	bne.n	8000ee0 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8000e9e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d114      	bne.n	8000ed0 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8000ea6:	88bc      	ldrh	r4, [r7, #4]
 8000ea8:	887d      	ldrh	r5, [r7, #2]
 8000eaa:	f7ff fed7 	bl	8000c5c <EF_GetFontSpaceWidth>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	0052      	lsls	r2, r2, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	4b5a      	ldr	r3, [pc, #360]	; (8001024 <EF_PutChar+0x1b8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b299      	uxth	r1, r3
 8000ec2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4629      	mov	r1, r5
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff fc26 	bl	800071c <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8000ed0:	f7ff fec4 	bl	8000c5c <EF_GetFontSpaceWidth>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	0052      	lsls	r2, r2, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	e09c      	b.n	800101a <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8000ee0:	f7ff fea4 	bl	8000c2c <EF_GetFontStartChar>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d201      	bcs.n	8000ef2 <EF_PutChar+0x86>
	{
		return 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e093      	b.n	800101a <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8000ef2:	f7ff fea7 	bl	8000c44 <EF_GetFontEndChar>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	7c7b      	ldrb	r3, [r7, #17]
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d901      	bls.n	8000f04 <EF_PutChar+0x98>
	{
		return 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e08a      	b.n	800101a <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8000f04:	4b47      	ldr	r3, [pc, #284]	; (8001024 <EF_PutChar+0x1b8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	7c7b      	ldrb	r3, [r7, #17]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8000f12:	4b44      	ldr	r3, [pc, #272]	; (8001024 <EF_PutChar+0x1b8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4a42      	ldr	r2, [pc, #264]	; (8001024 <EF_PutChar+0x1b8>)
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	6851      	ldr	r1, [r2, #4]
 8000f1e:	7c7a      	ldrb	r2, [r7, #17]
 8000f20:	0092      	lsls	r2, r2, #2
 8000f22:	440a      	add	r2, r1
 8000f24:	8852      	ldrh	r2, [r2, #2]
 8000f26:	4413      	add	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	83fb      	strh	r3, [r7, #30]
 8000f2e:	e066      	b.n	8000ffe <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	777b      	strb	r3, [r7, #29]
 8000f3a:	e053      	b.n	8000fe4 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8000f42:	7efb      	ldrb	r3, [r7, #27]
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	d905      	bls.n	8000f54 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8000f48:	2308      	movs	r3, #8
 8000f4a:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8000f4c:	7efb      	ldrb	r3, [r7, #27]
 8000f4e:	3b08      	subs	r3, #8
 8000f50:	76fb      	strb	r3, [r7, #27]
 8000f52:	e001      	b.n	8000f58 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8000f54:	7efb      	ldrb	r3, [r7, #27]
 8000f56:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	74bb      	strb	r3, [r7, #18]
 8000f5c:	e038      	b.n	8000fd0 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8000f5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	da15      	bge.n	8000f92 <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8000f66:	7f7b      	ldrb	r3, [r7, #29]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	7cbb      	ldrb	r3, [r7, #18]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	4413      	add	r3, r2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	b218      	sxth	r0, r3
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	8bfb      	ldrh	r3, [r7, #30]
 8000f82:	4413      	add	r3, r2
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	883a      	ldrh	r2, [r7, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f000 f9d8 	bl	8001340 <ILI9341_WritePixel>
 8000f90:	e018      	b.n	8000fc4 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8000f92:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d114      	bne.n	8000fc4 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8000f9a:	7f7b      	ldrb	r3, [r7, #29]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	88bb      	ldrh	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	7cbb      	ldrb	r3, [r7, #18]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	b218      	sxth	r0, r3
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	8bfb      	ldrh	r3, [r7, #30]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f000 f9be 	bl	8001340 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8000fc4:	7cbb      	ldrb	r3, [r7, #18]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	74bb      	strb	r3, [r7, #18]
 8000fca:	7cfb      	ldrb	r3, [r7, #19]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	74fb      	strb	r3, [r7, #19]
 8000fd0:	7cba      	ldrb	r2, [r7, #18]
 8000fd2:	7f3b      	ldrb	r3, [r7, #28]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3c2      	bcc.n	8000f5e <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8000fde:	7f7b      	ldrb	r3, [r7, #29]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	777b      	strb	r3, [r7, #29]
 8000fe4:	7f7a      	ldrb	r2, [r7, #29]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da00      	bge.n	8000ff2 <EF_PutChar+0x186>
 8000ff0:	3307      	adds	r3, #7
 8000ff2:	10db      	asrs	r3, r3, #3
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dda1      	ble.n	8000f3c <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8000ff8:	8bfb      	ldrh	r3, [r7, #30]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	83fb      	strh	r3, [r7, #30]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <EF_PutChar+0x1b8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	8bfa      	ldrh	r2, [r7, #30]
 8001008:	429a      	cmp	r2, r3
 800100a:	d391      	bcc.n	8000f30 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <EF_PutChar+0x1b8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	7c7b      	ldrb	r3, [r7, #17]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3720      	adds	r7, #32
 800101e:	46bd      	mov	sp, r7
 8001020:	bdb0      	pop	{r4, r5, r7, pc}
 8001022:	bf00      	nop
 8001024:	20000098 	.word	0x20000098

08001028 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af02      	add	r7, sp, #8
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	4608      	mov	r0, r1
 8001032:	4611      	mov	r1, r2
 8001034:	461a      	mov	r2, r3
 8001036:	4603      	mov	r3, r0
 8001038:	817b      	strh	r3, [r7, #10]
 800103a:	460b      	mov	r3, r1
 800103c:	813b      	strh	r3, [r7, #8]
 800103e:	4613      	mov	r3, r2
 8001040:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f7ff f8d6 	bl	80001f4 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 800104c:	2300      	movs	r3, #0
 800104e:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001050:	2300      	movs	r3, #0
 8001052:	75fb      	strb	r3, [r7, #23]
 8001054:	e05a      	b.n	800110c <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2bc5      	cmp	r3, #197	; 0xc5
 8001060:	d817      	bhi.n	8001092 <EF_PutString+0x6a>
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2bc2      	cmp	r3, #194	; 0xc2
 800106c:	d911      	bls.n	8001092 <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	7818      	ldrb	r0, [r3, #0]
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	3301      	adds	r3, #1
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fdf7 	bl	8000c74 <EF_DecodePolish>
 8001086:	4603      	mov	r3, r0
 8001088:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	3301      	adds	r3, #1
 800108e:	75fb      	strb	r3, [r7, #23]
 8001090:	e004      	b.n	800109c <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 800109c:	897a      	ldrh	r2, [r7, #10]
 800109e:	8abb      	ldrh	r3, [r7, #20]
 80010a0:	4413      	add	r3, r2
 80010a2:	b299      	uxth	r1, r3
 80010a4:	88fc      	ldrh	r4, [r7, #6]
 80010a6:	893a      	ldrh	r2, [r7, #8]
 80010a8:	7cf8      	ldrb	r0, [r7, #19]
 80010aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4623      	mov	r3, r4
 80010b6:	f7ff fed9 	bl	8000e6c <EF_PutChar>
 80010ba:	4603      	mov	r3, r0
 80010bc:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 80010be:	7c7b      	ldrb	r3, [r7, #17]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	8abb      	ldrh	r3, [r7, #20]
 80010c4:	4413      	add	r3, r2
 80010c6:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 80010c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d113      	bne.n	80010f8 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 80010d0:	897a      	ldrh	r2, [r7, #10]
 80010d2:	8abb      	ldrh	r3, [r7, #20]
 80010d4:	18d4      	adds	r4, r2, r3
 80010d6:	893d      	ldrh	r5, [r7, #8]
 80010d8:	f7ff fdc0 	bl	8000c5c <EF_GetFontSpaceWidth>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29e      	uxth	r6, r3
 80010e0:	f7ff fd98 	bl	8000c14 <EF_GetFontHeight>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4613      	mov	r3, r2
 80010ee:	4632      	mov	r2, r6
 80010f0:	4629      	mov	r1, r5
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff fb12 	bl	800071c <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 80010f8:	f7ff fdb0 	bl	8000c5c <EF_GetFontSpaceWidth>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	8abb      	ldrh	r3, [r7, #20]
 8001102:	4413      	add	r3, r2
 8001104:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	3301      	adds	r3, #1
 800110a:	75fb      	strb	r3, [r7, #23]
 800110c:	7dfa      	ldrb	r2, [r7, #23]
 800110e:	7cbb      	ldrb	r3, [r7, #18]
 8001110:	429a      	cmp	r2, r3
 8001112:	d3a0      	bcc.n	8001056 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001114:	8abb      	ldrh	r3, [r7, #20]
 8001116:	b2dc      	uxtb	r4, r3
 8001118:	f7ff fda0 	bl	8000c5c <EF_GetFontSpaceWidth>
 800111c:	4603      	mov	r3, r0
 800111e:	1ae3      	subs	r3, r4, r3
 8001120:	b2db      	uxtb	r3, r3
}
 8001122:	4618      	mov	r0, r3
 8001124:	371c      	adds	r7, #28
 8001126:	46bd      	mov	sp, r7
 8001128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800112a <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f001 fa0e 	bl	8002554 <HAL_Delay>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 800114a:	e014      	b.n	8001176 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <ILI9341_SendToTFT+0x5c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b02      	cmp	r3, #2
 800115a:	d10c      	bne.n	8001176 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <ILI9341_SendToTFT+0x5c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	330c      	adds	r3, #12
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	3b01      	subs	r3, #1
 8001174:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1e7      	bne.n	800114c <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 800117c:	bf00      	nop
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <ILI9341_SendToTFT+0x5c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118a:	2b80      	cmp	r3, #128	; 0x80
 800118c:	d0f7      	beq.n	800117e <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	2000009c 	.word	0x2000009c

080011a0 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <ILI9341_SendComand+0x40>)
 80011b2:	f002 f88b 	bl	80032cc <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <ILI9341_SendComand+0x40>)
 80011be:	f002 f885 	bl	80032cc <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	2101      	movs	r1, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ffba 	bl	8001140 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <ILI9341_SendComand+0x40>)
 80011d4:	f002 f87a 	bl	80032cc <HAL_GPIO_WritePin>
#endif
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40020400 	.word	0x40020400

080011e4 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f8:	4811      	ldr	r0, [pc, #68]	; (8001240 <ILI9341_SendCommandAndData+0x5c>)
 80011fa:	f002 f867 	bl	80032cc <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001204:	480e      	ldr	r0, [pc, #56]	; (8001240 <ILI9341_SendCommandAndData+0x5c>)
 8001206:	f002 f861 	bl	80032cc <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 800120a:	f107 030f 	add.w	r3, r7, #15
 800120e:	2101      	movs	r1, #1
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff95 	bl	8001140 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121c:	4808      	ldr	r0, [pc, #32]	; (8001240 <ILI9341_SendCommandAndData+0x5c>)
 800121e:	f002 f855 	bl	80032cc <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	68b8      	ldr	r0, [r7, #8]
 8001226:	f7ff ff8b 	bl	8001140 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <ILI9341_SendCommandAndData+0x5c>)
 8001232:	f002 f84b 	bl	80032cc <HAL_GPIO_WritePin>
#endif

}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020400 	.word	0x40020400

08001244 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d820      	bhi.n	8001296 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d816      	bhi.n	8001288 <ILI9341_SetRotation+0x44>
 800125a:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <ILI9341_SetRotation+0x1c>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001271 	.word	0x08001271
 8001264:	08001277 	.word	0x08001277
 8001268:	0800127d 	.word	0x0800127d
 800126c:	08001283 	.word	0x08001283
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001270:	2348      	movs	r3, #72	; 0x48
 8001272:	71fb      	strb	r3, [r7, #7]
		break;
 8001274:	e008      	b.n	8001288 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001276:	2328      	movs	r3, #40	; 0x28
 8001278:	71fb      	strb	r3, [r7, #7]
		break;
 800127a:	e005      	b.n	8001288 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 800127c:	2388      	movs	r3, #136	; 0x88
 800127e:	71fb      	strb	r3, [r7, #7]
		break;
 8001280:	e002      	b.n	8001288 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001282:	23e8      	movs	r3, #232	; 0xe8
 8001284:	71fb      	strb	r3, [r7, #7]
		break;
 8001286:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	2201      	movs	r2, #1
 800128c:	4619      	mov	r1, r3
 800128e:	2036      	movs	r0, #54	; 0x36
 8001290:	f7ff ffa8 	bl	80011e4 <ILI9341_SendCommandAndData>
 8001294:	e000      	b.n	8001298 <ILI9341_SetRotation+0x54>
		return;
 8001296:	bf00      	nop
}
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop

080012a0 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4604      	mov	r4, r0
 80012a8:	4608      	mov	r0, r1
 80012aa:	4611      	mov	r1, r2
 80012ac:	461a      	mov	r2, r3
 80012ae:	4623      	mov	r3, r4
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	4603      	mov	r3, r0
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	807b      	strh	r3, [r7, #2]
 80012ba:	4613      	mov	r3, r2
 80012bc:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 80012be:	88fa      	ldrh	r2, [r7, #6]
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	4413      	add	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3b01      	subs	r3, #1
 80012c8:	81fb      	strh	r3, [r7, #14]
 80012ca:	88ba      	ldrh	r2, [r7, #4]
 80012cc:	883b      	ldrh	r3, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	3b01      	subs	r3, #1
 80012d4:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b29b      	uxth	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 80012e6:	89fb      	ldrh	r3, [r7, #14]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2204      	movs	r2, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	202a      	movs	r0, #42	; 0x2a
 8001300:	f7ff ff70 	bl	80011e4 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	b29b      	uxth	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001314:	89bb      	ldrh	r3, [r7, #12]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b29b      	uxth	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 800131e:	89bb      	ldrh	r3, [r7, #12]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2204      	movs	r2, #4
 800132a:	4619      	mov	r1, r3
 800132c:	202b      	movs	r0, #43	; 0x2b
 800132e:	f7ff ff59 	bl	80011e4 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001332:	202c      	movs	r0, #44	; 0x2c
 8001334:	f7ff ff34 	bl	80011a0 <ILI9341_SendComand>

}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bd90      	pop	{r4, r7, pc}

08001340 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	460b      	mov	r3, r1
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db21      	blt.n	800139e <ILI9341_WritePixel+0x5e>
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001362:	da1c      	bge.n	800139e <ILI9341_WritePixel+0x5e>
 8001364:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db18      	blt.n	800139e <ILI9341_WritePixel+0x5e>
 800136c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001370:	2bef      	cmp	r3, #239	; 0xef
 8001372:	dc14      	bgt.n	800139e <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001374:	88f8      	ldrh	r0, [r7, #6]
 8001376:	88b9      	ldrh	r1, [r7, #4]
 8001378:	2301      	movs	r3, #1
 800137a:	2201      	movs	r2, #1
 800137c:	f7ff ff90 	bl	80012a0 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	b29b      	uxth	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2202      	movs	r2, #2
 8001396:	4619      	mov	r1, r3
 8001398:	202c      	movs	r0, #44	; 0x2c
 800139a:	f7ff ff23 	bl	80011e4 <ILI9341_SendCommandAndData>
	}

}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4603      	mov	r3, r0
 80013b2:	81fb      	strh	r3, [r7, #14]
 80013b4:	460b      	mov	r3, r1
 80013b6:	81bb      	strh	r3, [r7, #12]
 80013b8:	4613      	mov	r3, r2
 80013ba:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 80013bc:	89fa      	ldrh	r2, [r7, #14]
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	4413      	add	r3, r2
 80013c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013c6:	dc14      	bgt.n	80013f2 <ILI9341_DrawImage+0x4c>
 80013c8:	89ba      	ldrh	r2, [r7, #12]
 80013ca:	8b3b      	ldrh	r3, [r7, #24]
 80013cc:	4413      	add	r3, r2
 80013ce:	2bf0      	cmp	r3, #240	; 0xf0
 80013d0:	dc0f      	bgt.n	80013f2 <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	88fa      	ldrh	r2, [r7, #6]
 80013d6:	89b9      	ldrh	r1, [r7, #12]
 80013d8:	89f8      	ldrh	r0, [r7, #14]
 80013da:	f7ff ff61 	bl	80012a0 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	8b3a      	ldrh	r2, [r7, #24]
 80013e2:	fb02 f303 	mul.w	r3, r2, r3
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	461a      	mov	r2, r3
 80013ea:	68b9      	ldr	r1, [r7, #8]
 80013ec:	202c      	movs	r0, #44	; 0x2c
 80013ee:	f7ff fef9 	bl	80011e4 <ILI9341_SendCommandAndData>
	}
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001406:	23f0      	movs	r3, #240	; 0xf0
 8001408:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800140c:	2100      	movs	r1, #0
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff ff46 	bl	80012a0 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001414:	202c      	movs	r0, #44	; 0x2c
 8001416:	f7ff fec3 	bl	80011a0 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 800141a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800141e:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001426:	4822      	ldr	r0, [pc, #136]	; (80014b0 <ILI9341_ClearDisplay+0xb4>)
 8001428:	f001 ff50 	bl	80032cc <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001432:	481f      	ldr	r0, [pc, #124]	; (80014b0 <ILI9341_ClearDisplay+0xb4>)
 8001434:	f001 ff4a 	bl	80032cc <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001438:	e023      	b.n	8001482 <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <ILI9341_ClearDisplay+0xb8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b02      	cmp	r3, #2
 8001448:	d11b      	bne.n	8001482 <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <ILI9341_ClearDisplay+0xb8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	330c      	adds	r3, #12
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 800145c:	bf00      	nop
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <ILI9341_ClearDisplay+0xb8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b02      	cmp	r3, #2
 800146c:	d1f7      	bne.n	800145e <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <ILI9341_ClearDisplay+0xb8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	330c      	adds	r3, #12
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3b01      	subs	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1d8      	bne.n	800143a <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001488:	bf00      	nop
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <ILI9341_ClearDisplay+0xb8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	2b80      	cmp	r3, #128	; 0x80
 8001498:	d0f7      	beq.n	800148a <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a0:	4803      	ldr	r0, [pc, #12]	; (80014b0 <ILI9341_ClearDisplay+0xb4>)
 80014a2:	f001 ff13 	bl	80032cc <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40020400 	.word	0x40020400
 80014b4:	2000009c 	.word	0x2000009c

080014b8 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 80014c0:	4a24      	ldr	r2, [pc, #144]	; (8001554 <ILI9341_Init+0x9c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <ILI9341_Init+0xa0>)
 80014c8:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014d8:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e0:	481e      	ldr	r0, [pc, #120]	; (800155c <ILI9341_Init+0xa4>)
 80014e2:	f001 fef3 	bl	80032cc <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 80014e6:	200a      	movs	r0, #10
 80014e8:	f7ff fe1f 	bl	800112a <ILI9341_Delay>
	ILI9341_RST_HIGH;
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f2:	481a      	ldr	r0, [pc, #104]	; (800155c <ILI9341_Init+0xa4>)
 80014f4:	f001 feea 	bl	80032cc <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 80014f8:	200a      	movs	r0, #10
 80014fa:	f7ff fe16 	bl	800112a <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 80014fe:	e019      	b.n	8001534 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60fa      	str	r2, [r7, #12]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 800150a:	7abb      	ldrb	r3, [r7, #10]
 800150c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001510:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 8001512:	7a7a      	ldrb	r2, [r7, #9]
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	68f9      	ldr	r1, [r7, #12]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fe63 	bl	80011e4 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800151e:	7a7b      	ldrb	r3, [r7, #9]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8001526:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800152a:	2b00      	cmp	r3, #0
 800152c:	da02      	bge.n	8001534 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800152e:	2096      	movs	r0, #150	; 0x96
 8001530:	f7ff fdfb 	bl	800112a <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60fa      	str	r2, [r7, #12]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	72fb      	strb	r3, [r7, #11]
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1dd      	bne.n	8001500 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8001544:	2003      	movs	r0, #3
 8001546:	f7ff fe7d 	bl	8001244 <ILI9341_SetRotation>
}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000009c 	.word	0x2000009c
 8001558:	080084dc 	.word	0x080084dc
 800155c:	40020400 	.word	0x40020400

08001560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_DMA_Init+0x4c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <MX_DMA_Init+0x4c>)
 8001570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MX_DMA_Init+0x4c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2010      	movs	r0, #16
 8001588:	f001 f8e3 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800158c:	2010      	movs	r0, #16
 800158e:	f001 f8fc 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2011      	movs	r0, #17
 8001598:	f001 f8db 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800159c:	2011      	movs	r0, #17
 800159e:	f001 f8f4 	bl	800278a <HAL_NVIC_EnableIRQ>

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <system_init>:

#include "functions.h"
#include "logo.h"


uint8_t system_init(){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80015b6:	f24c 6018 	movw	r0, #50712	; 0xc618
 80015ba:	f7ff ff1f 	bl	80013fc <ILI9341_ClearDisplay>
	  ILI9341_DrawImage(40, 50, logo, 240, 140);
 80015be:	238c      	movs	r3, #140	; 0x8c
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	23f0      	movs	r3, #240	; 0xf0
 80015c4:	4a6a      	ldr	r2, [pc, #424]	; (8001770 <system_init+0x1c0>)
 80015c6:	2132      	movs	r1, #50	; 0x32
 80015c8:	2028      	movs	r0, #40	; 0x28
 80015ca:	f7ff feec 	bl	80013a6 <ILI9341_DrawImage>
//	  GFX_Image(40, 50, logo, 240, 140); usunieta wolniejsza wersja rysowania

	  HAL_Delay(200); // !!!! TODO
 80015ce:	20c8      	movs	r0, #200	; 0xc8
 80015d0:	f000 ffc0 	bl	8002554 <HAL_Delay>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 80015d4:	4867      	ldr	r0, [pc, #412]	; (8001774 <system_init+0x1c4>)
 80015d6:	f7ff fb0d 	bl	8000bf4 <EF_SetFont>
	  uint8_t Len = sprintf((char*)Msg, "Inicjalizacja...");
 80015da:	4967      	ldr	r1, [pc, #412]	; (8001778 <system_init+0x1c8>)
 80015dc:	4867      	ldr	r0, [pc, #412]	; (800177c <system_init+0x1cc>)
 80015de:	f003 fcd5 	bl	8004f8c <siprintf>
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80015e6:	2300      	movs	r3, #0
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	2300      	movs	r3, #0
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	2214      	movs	r2, #20
 80015f2:	213c      	movs	r1, #60	; 0x3c
 80015f4:	4861      	ldr	r0, [pc, #388]	; (800177c <system_init+0x1cc>)
 80015f6:	f7ff fd17 	bl	8001028 <EF_PutString>
	  Len++;
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	3301      	adds	r3, #1
 80015fe:	71fb      	strb	r3, [r7, #7]
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 8001600:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	2305      	movs	r3, #5
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2314      	movs	r3, #20
 800160c:	2214      	movs	r2, #20
 800160e:	21c8      	movs	r1, #200	; 0xc8
 8001610:	203c      	movs	r0, #60	; 0x3c
 8001612:	f7ff fa22 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 8001616:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	2305      	movs	r3, #5
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2314      	movs	r3, #20
 8001622:	2214      	movs	r2, #20
 8001624:	21c8      	movs	r1, #200	; 0xc8
 8001626:	205a      	movs	r0, #90	; 0x5a
 8001628:	f7ff fa17 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 800162c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	2305      	movs	r3, #5
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2314      	movs	r3, #20
 8001638:	2214      	movs	r2, #20
 800163a:	21c8      	movs	r1, #200	; 0xc8
 800163c:	2078      	movs	r0, #120	; 0x78
 800163e:	f7ff fa0c 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 8001642:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	2305      	movs	r3, #5
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2314      	movs	r3, #20
 800164e:	2214      	movs	r2, #20
 8001650:	21c8      	movs	r1, #200	; 0xc8
 8001652:	2096      	movs	r0, #150	; 0x96
 8001654:	f7ff fa01 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 8001658:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	2305      	movs	r3, #5
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2314      	movs	r3, #20
 8001664:	2214      	movs	r2, #20
 8001666:	21c8      	movs	r1, #200	; 0xc8
 8001668:	20b4      	movs	r0, #180	; 0xb4
 800166a:	f7ff f9f6 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 800166e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	2305      	movs	r3, #5
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2314      	movs	r3, #20
 800167a:	2214      	movs	r2, #20
 800167c:	21c8      	movs	r1, #200	; 0xc8
 800167e:	20d2      	movs	r0, #210	; 0xd2
 8001680:	f7ff f9eb 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 8001684:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	2305      	movs	r3, #5
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2314      	movs	r3, #20
 8001690:	2214      	movs	r2, #20
 8001692:	21c8      	movs	r1, #200	; 0xc8
 8001694:	20f0      	movs	r0, #240	; 0xf0
 8001696:	f7ff f9e0 	bl	8000a5a <GFX_DrawRoundRectangle>

	  HAL_Delay(100); // !!!! TODO
 800169a:	2064      	movs	r0, #100	; 0x64
 800169c:	f000 ff5a 	bl	8002554 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 80016a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	2305      	movs	r3, #5
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2314      	movs	r3, #20
 80016ac:	2214      	movs	r2, #20
 80016ae:	21c8      	movs	r1, #200	; 0xc8
 80016b0:	203c      	movs	r0, #60	; 0x3c
 80016b2:	f7ff fa4f 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 80016b6:	2064      	movs	r0, #100	; 0x64
 80016b8:	f000 ff4c 	bl	8002554 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 80016bc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	2305      	movs	r3, #5
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2314      	movs	r3, #20
 80016c8:	2214      	movs	r2, #20
 80016ca:	21c8      	movs	r1, #200	; 0xc8
 80016cc:	205a      	movs	r0, #90	; 0x5a
 80016ce:	f7ff fa41 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 80016d2:	2064      	movs	r0, #100	; 0x64
 80016d4:	f000 ff3e 	bl	8002554 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 80016d8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	2305      	movs	r3, #5
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2314      	movs	r3, #20
 80016e4:	2214      	movs	r2, #20
 80016e6:	21c8      	movs	r1, #200	; 0xc8
 80016e8:	2078      	movs	r0, #120	; 0x78
 80016ea:	f7ff fa33 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 80016ee:	2064      	movs	r0, #100	; 0x64
 80016f0:	f000 ff30 	bl	8002554 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 80016f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	2305      	movs	r3, #5
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2314      	movs	r3, #20
 8001700:	2214      	movs	r2, #20
 8001702:	21c8      	movs	r1, #200	; 0xc8
 8001704:	2096      	movs	r0, #150	; 0x96
 8001706:	f7ff fa25 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 800170a:	2064      	movs	r0, #100	; 0x64
 800170c:	f000 ff22 	bl	8002554 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 8001710:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	2305      	movs	r3, #5
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2314      	movs	r3, #20
 800171c:	2214      	movs	r2, #20
 800171e:	21c8      	movs	r1, #200	; 0xc8
 8001720:	20b4      	movs	r0, #180	; 0xb4
 8001722:	f7ff fa17 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 8001726:	2064      	movs	r0, #100	; 0x64
 8001728:	f000 ff14 	bl	8002554 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 800172c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	2305      	movs	r3, #5
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2314      	movs	r3, #20
 8001738:	2214      	movs	r2, #20
 800173a:	21c8      	movs	r1, #200	; 0xc8
 800173c:	20d2      	movs	r0, #210	; 0xd2
 800173e:	f7ff fa09 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 8001742:	2064      	movs	r0, #100	; 0x64
 8001744:	f000 ff06 	bl	8002554 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 8001748:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	2305      	movs	r3, #5
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2314      	movs	r3, #20
 8001754:	2214      	movs	r2, #20
 8001756:	21c8      	movs	r1, #200	; 0xc8
 8001758:	20f0      	movs	r0, #240	; 0xf0
 800175a:	f7ff f9fb 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(200); // !!!! TODO
 800175e:	20c8      	movs	r0, #200	; 0xc8
 8001760:	f000 fef8 	bl	8002554 <HAL_Delay>



	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	0800854c 	.word	0x0800854c
 8001774:	080084d0 	.word	0x080084d0
 8001778:	080064a0 	.word	0x080064a0
 800177c:	200000a0 	.word	0x200000a0

08001780 <showCurrentParameters>:

void showCurrentParameters(uint8_t temp_zew, uint8_t temp_wew, uint8_t time, uint8_t water_lvl, uint8_t humidity)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af02      	add	r7, sp, #8
 8001786:	4604      	mov	r4, r0
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4623      	mov	r3, r4
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	4603      	mov	r3, r0
 8001794:	71bb      	strb	r3, [r7, #6]
 8001796:	460b      	mov	r3, r1
 8001798:	717b      	strb	r3, [r7, #5]
 800179a:	4613      	mov	r3, r2
 800179c:	713b      	strb	r3, [r7, #4]
		// TODO zrobić żeby czytało właściwe wartości
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800179e:	f24c 6018 	movw	r0, #50712	; 0xc618
 80017a2:	f7ff fe2b 	bl	80013fc <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80017a6:	482d      	ldr	r0, [pc, #180]	; (800185c <showCurrentParameters+0xdc>)
 80017a8:	f7ff fa24 	bl	8000bf4 <EF_SetFont>
	  uint8_t Len = sprintf((char*)Msg, "Czas: 00:00:00");
 80017ac:	492c      	ldr	r1, [pc, #176]	; (8001860 <showCurrentParameters+0xe0>)
 80017ae:	482d      	ldr	r0, [pc, #180]	; (8001864 <showCurrentParameters+0xe4>)
 80017b0:	f003 fbec 	bl	8004f8c <siprintf>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80017b8:	2300      	movs	r3, #0
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	2214      	movs	r2, #20
 80017c4:	2114      	movs	r1, #20
 80017c6:	4827      	ldr	r0, [pc, #156]	; (8001864 <showCurrentParameters+0xe4>)
 80017c8:	f7ff fc2e 	bl	8001028 <EF_PutString>
	  Len = sprintf((char*)Msg, "Temp. zewn: 0`C");
 80017cc:	4926      	ldr	r1, [pc, #152]	; (8001868 <showCurrentParameters+0xe8>)
 80017ce:	4825      	ldr	r0, [pc, #148]	; (8001864 <showCurrentParameters+0xe4>)
 80017d0:	f003 fbdc 	bl	8004f8c <siprintf>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 50, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80017d8:	2300      	movs	r3, #0
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2300      	movs	r3, #0
 80017e2:	2232      	movs	r2, #50	; 0x32
 80017e4:	2114      	movs	r1, #20
 80017e6:	481f      	ldr	r0, [pc, #124]	; (8001864 <showCurrentParameters+0xe4>)
 80017e8:	f7ff fc1e 	bl	8001028 <EF_PutString>
	  Len = sprintf((char*)Msg, "Temp. wewn: 0`C");
 80017ec:	491f      	ldr	r1, [pc, #124]	; (800186c <showCurrentParameters+0xec>)
 80017ee:	481d      	ldr	r0, [pc, #116]	; (8001864 <showCurrentParameters+0xe4>)
 80017f0:	f003 fbcc 	bl	8004f8c <siprintf>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 80, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80017f8:	2300      	movs	r3, #0
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	2300      	movs	r3, #0
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2300      	movs	r3, #0
 8001802:	2250      	movs	r2, #80	; 0x50
 8001804:	2114      	movs	r1, #20
 8001806:	4817      	ldr	r0, [pc, #92]	; (8001864 <showCurrentParameters+0xe4>)
 8001808:	f7ff fc0e 	bl	8001028 <EF_PutString>
	  Len = sprintf((char*)Msg, "Wilgotność: 0%%");
 800180c:	4918      	ldr	r1, [pc, #96]	; (8001870 <showCurrentParameters+0xf0>)
 800180e:	4815      	ldr	r0, [pc, #84]	; (8001864 <showCurrentParameters+0xe4>)
 8001810:	f003 fbbc 	bl	8004f8c <siprintf>
 8001814:	4603      	mov	r3, r0
 8001816:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 110, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 8001818:	2300      	movs	r3, #0
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2300      	movs	r3, #0
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	226e      	movs	r2, #110	; 0x6e
 8001824:	2114      	movs	r1, #20
 8001826:	480f      	ldr	r0, [pc, #60]	; (8001864 <showCurrentParameters+0xe4>)
 8001828:	f7ff fbfe 	bl	8001028 <EF_PutString>
	  Len = sprintf((char*)Msg, "Poziom wody: 0%%");
 800182c:	4911      	ldr	r1, [pc, #68]	; (8001874 <showCurrentParameters+0xf4>)
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <showCurrentParameters+0xe4>)
 8001830:	f003 fbac 	bl	8004f8c <siprintf>
 8001834:	4603      	mov	r3, r0
 8001836:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 140, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2300      	movs	r3, #0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	228c      	movs	r2, #140	; 0x8c
 8001844:	2114      	movs	r1, #20
 8001846:	4807      	ldr	r0, [pc, #28]	; (8001864 <showCurrentParameters+0xe4>)
 8001848:	f7ff fbee 	bl	8001028 <EF_PutString>
	  Len++;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	3301      	adds	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bd90      	pop	{r4, r7, pc}
 800185a:	bf00      	nop
 800185c:	080084d0 	.word	0x080084d0
 8001860:	080064b4 	.word	0x080064b4
 8001864:	200000a0 	.word	0x200000a0
 8001868:	080064c4 	.word	0x080064c4
 800186c:	080064d4 	.word	0x080064d4
 8001870:	080064e4 	.word	0x080064e4
 8001874:	080064f8 	.word	0x080064f8

08001878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <MX_GPIO_Init+0xe4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a31      	ldr	r2, [pc, #196]	; (800195c <MX_GPIO_Init+0xe4>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b2f      	ldr	r3, [pc, #188]	; (800195c <MX_GPIO_Init+0xe4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <MX_GPIO_Init+0xe4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a2a      	ldr	r2, [pc, #168]	; (800195c <MX_GPIO_Init+0xe4>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b28      	ldr	r3, [pc, #160]	; (800195c <MX_GPIO_Init+0xe4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <MX_GPIO_Init+0xe4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a23      	ldr	r2, [pc, #140]	; (800195c <MX_GPIO_Init+0xe4>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <MX_GPIO_Init+0xe4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_GPIO_Init+0xe4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a1c      	ldr	r2, [pc, #112]	; (800195c <MX_GPIO_Init+0xe4>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_GPIO_Init+0xe4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001904:	4816      	ldr	r0, [pc, #88]	; (8001960 <MX_GPIO_Init+0xe8>)
 8001906:	f001 fce1 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001910:	4814      	ldr	r0, [pc, #80]	; (8001964 <MX_GPIO_Init+0xec>)
 8001912:	f001 fcdb 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 8001916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	480c      	ldr	r0, [pc, #48]	; (8001960 <MX_GPIO_Init+0xe8>)
 8001930:	f001 fb48 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8001934:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_GPIO_Init+0xec>)
 800194e:	f001 fb39 	bl	8002fc4 <HAL_GPIO_Init>

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40020800 	.word	0x40020800
 8001964:	40020400 	.word	0x40020400

08001968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800196e:	f000 fd7f 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001972:	f000 f82d 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001976:	f7ff ff7f 	bl	8001878 <MX_GPIO_Init>
  MX_SPI1_Init();
 800197a:	f000 f9a3 	bl	8001cc4 <MX_SPI1_Init>
  MX_DMA_Init();
 800197e:	f7ff fdef 	bl	8001560 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001982:	f000 fc6d 	bl	8002260 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1);
 8001986:	480f      	ldr	r0, [pc, #60]	; (80019c4 <main+0x5c>)
 8001988:	f7ff fd96 	bl	80014b8 <ILI9341_Init>

  system_init();
 800198c:	f7ff fe10 	bl	80015b0 <system_init>

  showCurrentParameters(0, 0, 0, 0, 0);
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff fef0 	bl	8001780 <showCurrentParameters>

  UARTDMA_Init(&huartdma2, &huart2);
 80019a0:	4909      	ldr	r1, [pc, #36]	; (80019c8 <main+0x60>)
 80019a2:	480a      	ldr	r0, [pc, #40]	; (80019cc <main+0x64>)
 80019a4:	f000 fc0e 	bl	80021c4 <UARTDMA_Init>
  while (1)
  {

	 // ILI9341_DrawImage(40, 50, logo, 240, 140);

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80019a8:	4808      	ldr	r0, [pc, #32]	; (80019cc <main+0x64>)
 80019aa:	f000 fbbf 	bl	800212c <UARTDMA_IsDataReceivedReady>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <main+0x52>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <main+0x64>)
 80019b6:	f000 f879 	bl	8001aac <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 80019ba:	4804      	ldr	r0, [pc, #16]	; (80019cc <main+0x64>)
 80019bc:	f000 fbc8 	bl	8002150 <UARTDMA_TransmitEvent>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80019c0:	e7f2      	b.n	80019a8 <main+0x40>
 80019c2:	bf00      	nop
 80019c4:	20000210 	.word	0x20000210
 80019c8:	20000328 	.word	0x20000328
 80019cc:	200000c0 	.word	0x200000c0

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2230      	movs	r2, #48	; 0x30
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 facc 	bl	8004f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <SystemClock_Config+0xc8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <SystemClock_Config+0xc8>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <SystemClock_Config+0xc8>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a36:	2302      	movs	r3, #2
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001a40:	230c      	movs	r3, #12
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a44:	2360      	movs	r3, #96	; 0x60
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fc53 	bl	8003300 <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a60:	f000 f81e 	bl	8001aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	230f      	movs	r3, #15
 8001a66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	2103      	movs	r1, #3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f001 feb5 	bl	80037f0 <HAL_RCC_ClockConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a8c:	f000 f808 	bl	8001aa0 <Error_Handler>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3750      	adds	r7, #80	; 0x50
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <UART_ParseLine>:
 * 		CHSTATE=1,0\n	// Zmien stan przekaznika 1 na wylaczony
 * 		CHSTATE=2,1\n	// Zmien stan przekaznika 2 na wlaczony
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b094      	sub	sp, #80	; 0x50
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fadf 	bl	800207e <UARTDMA_GetLineFromReceiveBuffer>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d12f      	bne.n	8001b26 <UART_ParseLine+0x7a>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	4919      	ldr	r1, [pc, #100]	; (8001b30 <UART_ParseLine+0x84>)
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fa7d 	bl	8004fcc <strtok>
 8001ad2:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8001ad4:	4917      	ldr	r1, [pc, #92]	; (8001b34 <UART_ParseLine+0x88>)
 8001ad6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ad8:	f7fe fb82 	bl	80001e0 <strcmp>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8001ae2:	f000 f831 	bl	8001b48 <UART_ParseLED>
	  {
		  void UART_ParseAnswChangeRelayState();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8001ae6:	e01e      	b.n	8001b26 <UART_ParseLine+0x7a>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8001ae8:	4913      	ldr	r1, [pc, #76]	; (8001b38 <UART_ParseLine+0x8c>)
 8001aea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001aec:	f7fe fb78 	bl	80001e0 <strcmp>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8001af6:	f000 f875 	bl	8001be4 <UART_ParseAnswStatus>
}
 8001afa:	e014      	b.n	8001b26 <UART_ParseLine+0x7a>
	  else if (strcmp(ParsePointer, "ATEMP") == 0)
 8001afc:	490f      	ldr	r1, [pc, #60]	; (8001b3c <UART_ParseLine+0x90>)
 8001afe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b00:	f7fe fb6e 	bl	80001e0 <strcmp>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8001b0a:	f000 f872 	bl	8001bf2 <UART_ParseAnswTemp>
}
 8001b0e:	e00a      	b.n	8001b26 <UART_ParseLine+0x7a>
	  else if (strcmp(ParsePointer, "APRES") == 0)
 8001b10:	490b      	ldr	r1, [pc, #44]	; (8001b40 <UART_ParseLine+0x94>)
 8001b12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b14:	f7fe fb64 	bl	80001e0 <strcmp>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <UART_ParseLine+0x7a>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0)
 8001b1e:	4909      	ldr	r1, [pc, #36]	; (8001b44 <UART_ParseLine+0x98>)
 8001b20:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b22:	f7fe fb5d 	bl	80001e0 <strcmp>
}
 8001b26:	bf00      	nop
 8001b28:	3750      	adds	r7, #80	; 0x50
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	0800650c 	.word	0x0800650c
 8001b34:	08006510 	.word	0x08006510
 8001b38:	08006514 	.word	0x08006514
 8001b3c:	0800651c 	.word	0x0800651c
 8001b40:	08006524 	.word	0x08006524
 8001b44:	0800652c 	.word	0x0800652c

08001b48 <UART_ParseLED>:


/////////////////////////////////////////// FUNKCJA PARSOWANIA USER LED ////////////////////////////////////////////////////////////////////////////

void UART_ParseLED()
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8001b4e:	491f      	ldr	r1, [pc, #124]	; (8001bcc <UART_ParseLED+0x84>)
 8001b50:	2000      	movs	r0, #0
 8001b52:	f003 fa3b 	bl	8004fcc <strtok>
 8001b56:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d031      	beq.n	8001bc4 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b2f      	cmp	r3, #47	; 0x2f
 8001b66:	d903      	bls.n	8001b70 <UART_ParseLED+0x28>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b39      	cmp	r3, #57	; 0x39
 8001b6e:	d904      	bls.n	8001b7a <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8001b70:	4917      	ldr	r1, [pc, #92]	; (8001bd0 <UART_ParseLED+0x88>)
 8001b72:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <UART_ParseLED+0x8c>)
 8001b74:	f000 fab4 	bl	80020e0 <UARTDMA_Print>
			return;	// And exit parsing
 8001b78:	e024      	b.n	8001bc4 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f003 f9d0 	bl	8004f20 <atoi>
 8001b80:	4603      	mov	r3, r0
 8001b82:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d10a      	bne.n	8001ba0 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b90:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <UART_ParseLED+0x90>)
 8001b92:	f001 fb9b 	bl	80032cc <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8001b96:	4911      	ldr	r1, [pc, #68]	; (8001bdc <UART_ParseLED+0x94>)
 8001b98:	480e      	ldr	r0, [pc, #56]	; (8001bd4 <UART_ParseLED+0x8c>)
 8001b9a:	f000 faa1 	bl	80020e0 <UARTDMA_Print>
 8001b9e:	e011      	b.n	8001bc4 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10a      	bne.n	8001bbc <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bac:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <UART_ParseLED+0x90>)
 8001bae:	f001 fb8d 	bl	80032cc <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8001bb2:	490b      	ldr	r1, [pc, #44]	; (8001be0 <UART_ParseLED+0x98>)
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <UART_ParseLED+0x8c>)
 8001bb6:	f000 fa93 	bl	80020e0 <UARTDMA_Print>
 8001bba:	e003      	b.n	8001bc4 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8001bbc:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <UART_ParseLED+0x88>)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <UART_ParseLED+0x8c>)
 8001bc0:	f000 fa8e 	bl	80020e0 <UARTDMA_Print>
		}
	}
}
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	08006538 	.word	0x08006538
 8001bd0:	0800653c 	.word	0x0800653c
 8001bd4:	200000c0 	.word	0x200000c0
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	0800654c 	.word	0x0800654c
 8001be0:	08006558 	.word	0x08006558

08001be4 <UART_ParseAnswStatus>:

void UART_ParseAnswStatus()
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
	//TODO: Dodac obsluge statusu urzadzenia
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <UART_ParseAnswTemp>:


void UART_ParseAnswTemp(second_uc_data *dane)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]

}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	781a      	ldrb	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d101      	bne.n	8001c22 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e018      	b.n	8001c54 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	785b      	ldrb	r3, [r3, #1]
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	789a      	ldrb	r2, [r3, #2]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	785b      	ldrb	r3, [r3, #1]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <RB_Read+0x58>)
 8001c3a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c3e:	1159      	asrs	r1, r3, #5
 8001c40:	17d3      	asrs	r3, r2, #31
 8001c42:	1ac9      	subs	r1, r1, r3
 8001c44:	460b      	mov	r3, r1
 8001c46:	019b      	lsls	r3, r3, #6
 8001c48:	440b      	add	r3, r1
 8001c4a:	1ad1      	subs	r1, r2, r3
 8001c4c:	b2ca      	uxtb	r2, r1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	7e07e07f 	.word	0x7e07e07f

08001c64 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <RB_Write+0x5c>)
 8001c78:	fb83 1302 	smull	r1, r3, r3, r2
 8001c7c:	1159      	asrs	r1, r3, #5
 8001c7e:	17d3      	asrs	r3, r2, #31
 8001c80:	1ac9      	subs	r1, r1, r3
 8001c82:	460b      	mov	r3, r1
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	440b      	add	r3, r1
 8001c88:	1ad1      	subs	r1, r2, r3
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	785b      	ldrb	r3, [r3, #1]
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d101      	bne.n	8001c9c <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e00a      	b.n	8001cb2 <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	7e07e07f 	.word	0x7e07e07f

08001cc4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001cca:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <MX_SPI1_Init+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001d10:	220a      	movs	r2, #10
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <MX_SPI1_Init+0x64>)
 8001d16:	f001 ff3b 	bl	8003b90 <HAL_SPI_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d20:	f7ff febe 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000210 	.word	0x20000210
 8001d2c:	40013000 	.word	0x40013000

08001d30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_SPI_MspInit+0x84>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12b      	bne.n	8001daa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d8a:	23e0      	movs	r3, #224	; 0xe0
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_SPI_MspInit+0x8c>)
 8001da6:	f001 f90d 	bl	8002fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	; 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40013000 	.word	0x40013000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_MspInit+0x4c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_MspInit+0x4c>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_MspInit+0x4c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_MspInit+0x4c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_MspInit+0x4c>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_MspInit+0x4c>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <NMI_Handler+0x4>

08001e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1a:	e7fe      	b.n	8001e1a <HardFault_Handler+0x4>

08001e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <MemManage_Handler+0x4>

08001e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e26:	e7fe      	b.n	8001e26 <BusFault_Handler+0x4>

08001e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <UsageFault_Handler+0x4>

08001e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5c:	f000 fb5a 	bl	8002514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <DMA1_Stream5_IRQHandler+0x10>)
 8001e6a:	f000 fe41 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000268 	.word	0x20000268

08001e78 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <DMA1_Stream6_IRQHandler+0x10>)
 8001e7e:	f000 fe37 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200002c8 	.word	0x200002c8

08001e8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <USART2_IRQHandler+0x10>)
 8001e92:	f002 f801 	bl	8003e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000328 	.word	0x20000328

08001ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
	return 1;
 8001ea4:	2301      	movs	r3, #1
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_kill>:

int _kill(int pid, int sig)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eba:	f003 f835 	bl	8004f28 <__errno>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2216      	movs	r2, #22
 8001ec2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_exit>:

void _exit (int status)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ffe7 	bl	8001eb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ee2:	e7fe      	b.n	8001ee2 <_exit+0x12>

08001ee4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e00a      	b.n	8001f0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ef6:	f3af 8000 	nop.w
 8001efa:	4601      	mov	r1, r0
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	b2ca      	uxtb	r2, r1
 8001f04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbf0      	blt.n	8001ef6 <_read+0x12>
	}

return len;
 8001f14:	687b      	ldr	r3, [r7, #4]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e009      	b.n	8001f44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	60ba      	str	r2, [r7, #8]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dbf1      	blt.n	8001f30 <_write+0x12>
	}
	return len;
 8001f4c:	687b      	ldr	r3, [r7, #4]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_close>:

int _close(int file)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_isatty>:

int _isatty(int file)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
	return 1;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
	return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <_sbrk+0x5c>)
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <_sbrk+0x60>)
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <_sbrk+0x64>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <_sbrk+0x64>)
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <_sbrk+0x68>)
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d207      	bcs.n	8002000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff0:	f002 ff9a 	bl	8004f28 <__errno>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	e009      	b.n	8002014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <_sbrk+0x64>)
 8002010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20020000 	.word	0x20020000
 8002020:	00000400 	.word	0x00000400
 8002024:	2000008c 	.word	0x2000008c
 8002028:	20000380 	.word	0x20000380

0800202c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <SystemInit+0x20>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <SystemInit+0x20>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	33ca      	adds	r3, #202	; 0xca
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fdfd 	bl	8001c64 <RB_Write>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01f      	beq.n	80020d6 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8002096:	e013      	b.n	80020c0 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b0a      	cmp	r3, #10
 800209e:	d10c      	bne.n	80020ba <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 80020b6:	2300      	movs	r3, #0
 80020b8:	e00e      	b.n	80020d8 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3345      	adds	r3, #69	; 0x45
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fd9e 	bl	8001c08 <RB_Read>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0e2      	beq.n	8002098 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80020ee:	e012      	b.n	8002116 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ffab 	bl	8002050 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	2b0a      	cmp	r3, #10
 8002104:	d107      	bne.n	8002116 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 800210c:	3301      	adds	r3, #1
 800210e:	b2da      	uxtb	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	72fb      	strb	r3, [r7, #11]
 800211c:	7afb      	ldrb	r3, [r7, #11]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1e6      	bne.n	80020f0 <UARTDMA_Print+0x10>
		}
	}
}
 8002122:	bf00      	nop
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8002158:	2300      	movs	r3, #0
 800215a:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d027      	beq.n	80021bc <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800216c:	e013      	b.n	8002196 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 800216e:	7b7b      	ldrb	r3, [r7, #13]
 8002170:	2b0a      	cmp	r3, #10
 8002172:	d107      	bne.n	8002184 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 800217a:	3b01      	subs	r3, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	81fa      	strh	r2, [r7, #14]
 800218a:	4619      	mov	r1, r3
 800218c:	7b7a      	ldrb	r2, [r7, #13]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	440b      	add	r3, r1
 8002192:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	33ca      	adds	r3, #202	; 0xca
 800219a:	f107 020d 	add.w	r2, r7, #13
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fd31 	bl	8001c08 <RB_Read>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0e0      	beq.n	800216e <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3389      	adds	r3, #137	; 0x89
 80021b4:	89fa      	ldrh	r2, [r7, #14]
 80021b6:	4619      	mov	r1, r3
 80021b8:	f001 fdc0 	bl	8003d3c <HAL_UART_Transmit_DMA>
	}
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0210 	orr.w	r2, r2, #16
 80021e6:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0210 	orr.w	r2, r2, #16
 80021fe:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0210 	orr.w	r2, r2, #16
 8002216:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3304      	adds	r3, #4
 8002220:	2241      	movs	r2, #65	; 0x41
 8002222:	4619      	mov	r1, r3
 8002224:	f001 fe08 	bl	8003e38 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0208 	bic.w	r2, r2, #8
 800223e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0208 	bic.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <MX_USART2_UART_Init+0x4c>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <MX_USART2_UART_Init+0x50>)
 8002268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <MX_USART2_UART_Init+0x4c>)
 800226c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_USART2_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_USART2_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_USART2_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_USART2_UART_Init+0x4c>)
 8002286:	220c      	movs	r2, #12
 8002288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_USART2_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_USART2_UART_Init+0x4c>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_USART2_UART_Init+0x4c>)
 8002298:	f001 fd03 	bl	8003ca2 <HAL_UART_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022a2:	f7ff fbfd 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000328 	.word	0x20000328
 80022b0:	40004400 	.word	0x40004400

080022b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a4b      	ldr	r2, [pc, #300]	; (8002400 <HAL_UART_MspInit+0x14c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	f040 8090 	bne.w	80023f8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_UART_MspInit+0x150>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a48      	ldr	r2, [pc, #288]	; (8002404 <HAL_UART_MspInit+0x150>)
 80022e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
 80022e8:	4b46      	ldr	r3, [pc, #280]	; (8002404 <HAL_UART_MspInit+0x150>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	4b42      	ldr	r3, [pc, #264]	; (8002404 <HAL_UART_MspInit+0x150>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a41      	ldr	r2, [pc, #260]	; (8002404 <HAL_UART_MspInit+0x150>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_UART_MspInit+0x150>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002310:	230c      	movs	r3, #12
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002320:	2307      	movs	r3, #7
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4837      	ldr	r0, [pc, #220]	; (8002408 <HAL_UART_MspInit+0x154>)
 800232c:	f000 fe4a 	bl	8002fc4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_UART_MspInit+0x158>)
 8002332:	4a37      	ldr	r2, [pc, #220]	; (8002410 <HAL_UART_MspInit+0x15c>)
 8002334:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002336:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_UART_MspInit+0x158>)
 8002338:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800233c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233e:	4b33      	ldr	r3, [pc, #204]	; (800240c <HAL_UART_MspInit+0x158>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002344:	4b31      	ldr	r3, [pc, #196]	; (800240c <HAL_UART_MspInit+0x158>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_UART_MspInit+0x158>)
 800234c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002350:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002352:	4b2e      	ldr	r3, [pc, #184]	; (800240c <HAL_UART_MspInit+0x158>)
 8002354:	2200      	movs	r2, #0
 8002356:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_UART_MspInit+0x158>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800235e:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_UART_MspInit+0x158>)
 8002360:	2200      	movs	r2, #0
 8002362:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002364:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_UART_MspInit+0x158>)
 8002366:	2200      	movs	r2, #0
 8002368:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_UART_MspInit+0x158>)
 800236c:	2200      	movs	r2, #0
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002370:	4826      	ldr	r0, [pc, #152]	; (800240c <HAL_UART_MspInit+0x158>)
 8002372:	f000 fa25 	bl	80027c0 <HAL_DMA_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800237c:	f7ff fb90 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a22      	ldr	r2, [pc, #136]	; (800240c <HAL_UART_MspInit+0x158>)
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
 8002386:	4a21      	ldr	r2, [pc, #132]	; (800240c <HAL_UART_MspInit+0x158>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <HAL_UART_MspInit+0x160>)
 800238e:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_UART_MspInit+0x164>)
 8002390:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_UART_MspInit+0x160>)
 8002394:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002398:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_UART_MspInit+0x160>)
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a0:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_UART_MspInit+0x160>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_UART_MspInit+0x160>)
 80023a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_UART_MspInit+0x160>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_UART_MspInit+0x160>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_UART_MspInit+0x160>)
 80023bc:	2200      	movs	r2, #0
 80023be:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_UART_MspInit+0x160>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_UART_MspInit+0x160>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023cc:	4811      	ldr	r0, [pc, #68]	; (8002414 <HAL_UART_MspInit+0x160>)
 80023ce:	f000 f9f7 	bl	80027c0 <HAL_DMA_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80023d8:	f7ff fb62 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <HAL_UART_MspInit+0x160>)
 80023e0:	635a      	str	r2, [r3, #52]	; 0x34
 80023e2:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <HAL_UART_MspInit+0x160>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	2026      	movs	r0, #38	; 0x26
 80023ee:	f000 f9b0 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023f2:	2026      	movs	r0, #38	; 0x26
 80023f4:	f000 f9c9 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023f8:	bf00      	nop
 80023fa:	3728      	adds	r7, #40	; 0x28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40004400 	.word	0x40004400
 8002404:	40023800 	.word	0x40023800
 8002408:	40020000 	.word	0x40020000
 800240c:	20000268 	.word	0x20000268
 8002410:	40026088 	.word	0x40026088
 8002414:	200002c8 	.word	0x200002c8
 8002418:	400260a0 	.word	0x400260a0

0800241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002422:	490e      	ldr	r1, [pc, #56]	; (800245c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002424:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002438:	4c0b      	ldr	r4, [pc, #44]	; (8002468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002446:	f7ff fdf1 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f002 fd73 	bl	8004f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244e:	f7ff fa8b 	bl	8001968 <main>
  bx  lr    
 8002452:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800245c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002460:	08018e48 	.word	0x08018e48
  ldr r2, =_sbss
 8002464:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002468:	20000380 	.word	0x20000380

0800246c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC_IRQHandler>
	...

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_Init+0x40>)
 800247a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_Init+0x40>)
 8002486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_Init+0x40>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002498:	2003      	movs	r0, #3
 800249a:	f000 f94f 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249e:	2000      	movs	r0, #0
 80024a0:	f000 f808 	bl	80024b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a4:	f7ff fc8c 	bl	8001dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_InitTick+0x54>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_InitTick+0x58>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f967 	bl	80027a6 <HAL_SYSTICK_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e00e      	b.n	8002500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d80a      	bhi.n	80024fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e8:	2200      	movs	r2, #0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f000 f92f 	bl	8002752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <HAL_InitTick+0x5c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000000 	.word	0x20000000
 800250c:	20000008 	.word	0x20000008
 8002510:	20000004 	.word	0x20000004

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x20>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_IncTick+0x24>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <HAL_IncTick+0x24>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000008 	.word	0x20000008
 8002538:	2000036c 	.word	0x2000036c

0800253c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_GetTick+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	2000036c 	.word	0x2000036c

08002554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff ffee 	bl	800253c <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d005      	beq.n	800257a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_Delay+0x44>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800257a:	bf00      	nop
 800257c:	f7ff ffde 	bl	800253c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	429a      	cmp	r2, r3
 800258a:	d8f7      	bhi.n	800257c <HAL_Delay+0x28>
  {
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000008 	.word	0x20000008

0800259c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	60d3      	str	r3, [r2, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0b      	blt.n	800262a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <__NVIC_EnableIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff8e 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff29 	bl	800259c <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002764:	f7ff ff3e 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 8002768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff8e 	bl	8002690 <NVIC_EncodePriority>
 8002774:	4602      	mov	r2, r0
 8002776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff5d 	bl	800263c <__NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff31 	bl	8002600 <__NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffa2 	bl	80026f8 <SysTick_Config>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff feb6 	bl	800253c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e099      	b.n	8002910 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fc:	e00f      	b.n	800281e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027fe:	f7ff fe9d 	bl	800253c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b05      	cmp	r3, #5
 800280a:	d908      	bls.n	800281e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2203      	movs	r2, #3
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e078      	b.n	8002910 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e8      	bne.n	80027fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4b38      	ldr	r3, [pc, #224]	; (8002918 <HAL_DMA_Init+0x158>)
 8002838:	4013      	ands	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	2b04      	cmp	r3, #4
 8002876:	d107      	bne.n	8002888 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4313      	orrs	r3, r2
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0307 	bic.w	r3, r3, #7
 800289e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d117      	bne.n	80028e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fb01 	bl	8002ecc <DMA_CheckFifoParam>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2240      	movs	r2, #64	; 0x40
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028de:	2301      	movs	r3, #1
 80028e0:	e016      	b.n	8002910 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fab8 	bl	8002e60 <DMA_CalcBaseAndBitshift>
 80028f0:	4603      	mov	r3, r0
 80028f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	223f      	movs	r2, #63	; 0x3f
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	f010803f 	.word	0xf010803f

0800291c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_DMA_Start_IT+0x26>
 800293e:	2302      	movs	r3, #2
 8002940:	e040      	b.n	80029c4 <HAL_DMA_Start_IT+0xa8>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d12f      	bne.n	80029b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 fa4a 	bl	8002e04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	223f      	movs	r2, #63	; 0x3f
 8002976:	409a      	lsls	r2, r3
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0216 	orr.w	r2, r2, #22
 800298a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e005      	b.n	80029c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029da:	f7ff fdaf 	bl	800253c <HAL_GetTick>
 80029de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d008      	beq.n	80029fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e052      	b.n	8002aa4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0216 	bic.w	r2, r2, #22
 8002a0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <HAL_DMA_Abort+0x62>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0208 	bic.w	r2, r2, #8
 8002a3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4e:	e013      	b.n	8002a78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a50:	f7ff fd74 	bl	800253c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d90c      	bls.n	8002a78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2203      	movs	r2, #3
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e015      	b.n	8002aa4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e4      	bne.n	8002a50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	223f      	movs	r2, #63	; 0x3f
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d004      	beq.n	8002aca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00c      	b.n	8002ae4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2205      	movs	r2, #5
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002afc:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <HAL_DMA_IRQHandler+0x258>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a92      	ldr	r2, [pc, #584]	; (8002d4c <HAL_DMA_IRQHandler+0x25c>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0a9b      	lsrs	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01a      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0204 	bic.w	r2, r2, #4
 8002b42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	2208      	movs	r2, #8
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2201      	movs	r2, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d012      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	2201      	movs	r2, #1
 8002b80:	409a      	lsls	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	f043 0202 	orr.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	2204      	movs	r2, #4
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d012      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2210      	movs	r2, #16
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d043      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03c      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2210      	movs	r2, #16
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d024      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
 8002c1e:	e01f      	b.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01b      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
 8002c30:	e016      	b.n	8002c60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0208 	bic.w	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c64:	2220      	movs	r2, #32
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 808e 	beq.w	8002d8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8086 	beq.w	8002d8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	2220      	movs	r2, #32
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d136      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0216 	bic.w	r2, r2, #22
 8002ca8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <HAL_DMA_IRQHandler+0x1da>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0208 	bic.w	r2, r2, #8
 8002cd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	223f      	movs	r2, #63	; 0x3f
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d07d      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
        }
        return;
 8002d06:	e078      	b.n	8002dfa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01c      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d108      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d030      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
 8002d34:	e02b      	b.n	8002d8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d027      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	4798      	blx	r3
 8002d46:	e022      	b.n	8002d8e <HAL_DMA_IRQHandler+0x29e>
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0210 	bic.w	r2, r2, #16
 8002d6c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d032      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d022      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2205      	movs	r2, #5
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d307      	bcc.n	8002dd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f2      	bne.n	8002dba <HAL_DMA_IRQHandler+0x2ca>
 8002dd4:	e000      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002dd6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
 8002df8:	e000      	b.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dfa:	bf00      	nop
    }
  }
}
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop

08002e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d108      	bne.n	8002e44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e42:	e007      	b.n	8002e54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	3b10      	subs	r3, #16
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e7a:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d909      	bls.n	8002ea2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002ea0:	e007      	b.n	8002eb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eaa:	f023 0303 	bic.w	r3, r3, #3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	aaaaaaab 	.word	0xaaaaaaab
 8002ec8:	08018be4 	.word	0x08018be4

08002ecc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11f      	bne.n	8002f26 <DMA_CheckFifoParam+0x5a>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d856      	bhi.n	8002f9a <DMA_CheckFifoParam+0xce>
 8002eec:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <DMA_CheckFifoParam+0x28>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f17 	.word	0x08002f17
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	08002f9b 	.word	0x08002f9b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d046      	beq.n	8002f9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e043      	b.n	8002f9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f1e:	d140      	bne.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e03d      	b.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2e:	d121      	bne.n	8002f74 <DMA_CheckFifoParam+0xa8>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d837      	bhi.n	8002fa6 <DMA_CheckFifoParam+0xda>
 8002f36:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <DMA_CheckFifoParam+0x70>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f53 	.word	0x08002f53
 8002f44:	08002f4d 	.word	0x08002f4d
 8002f48:	08002f65 	.word	0x08002f65
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e030      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d025      	beq.n	8002faa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f62:	e022      	b.n	8002faa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f6c:	d11f      	bne.n	8002fae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f72:	e01c      	b.n	8002fae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d903      	bls.n	8002f82 <DMA_CheckFifoParam+0xb6>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d003      	beq.n	8002f88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f80:	e018      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      break;
 8002f86:	e015      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e00b      	b.n	8002fb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e00a      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e008      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e006      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e004      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e159      	b.n	8003294 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f040 8148 	bne.w	800328e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d005      	beq.n	8003016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003012:	2b02      	cmp	r3, #2
 8003014:	d130      	bne.n	8003078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 0201 	and.w	r2, r3, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b03      	cmp	r3, #3
 8003082:	d017      	beq.n	80030b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d123      	bne.n	8003108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	08da      	lsrs	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3208      	adds	r2, #8
 80030c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	220f      	movs	r2, #15
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	08da      	lsrs	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3208      	adds	r2, #8
 8003102:	69b9      	ldr	r1, [r7, #24]
 8003104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0203 	and.w	r2, r3, #3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a2 	beq.w	800328e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b57      	ldr	r3, [pc, #348]	; (80032ac <HAL_GPIO_Init+0x2e8>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a56      	ldr	r2, [pc, #344]	; (80032ac <HAL_GPIO_Init+0x2e8>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 800315a:	4b54      	ldr	r3, [pc, #336]	; (80032ac <HAL_GPIO_Init+0x2e8>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003166:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_GPIO_Init+0x2ec>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a49      	ldr	r2, [pc, #292]	; (80032b4 <HAL_GPIO_Init+0x2f0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d019      	beq.n	80031c6 <HAL_GPIO_Init+0x202>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a48      	ldr	r2, [pc, #288]	; (80032b8 <HAL_GPIO_Init+0x2f4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_Init+0x1fe>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a47      	ldr	r2, [pc, #284]	; (80032bc <HAL_GPIO_Init+0x2f8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00d      	beq.n	80031be <HAL_GPIO_Init+0x1fa>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a46      	ldr	r2, [pc, #280]	; (80032c0 <HAL_GPIO_Init+0x2fc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <HAL_GPIO_Init+0x1f6>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a45      	ldr	r2, [pc, #276]	; (80032c4 <HAL_GPIO_Init+0x300>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_GPIO_Init+0x1f2>
 80031b2:	2304      	movs	r3, #4
 80031b4:	e008      	b.n	80031c8 <HAL_GPIO_Init+0x204>
 80031b6:	2307      	movs	r3, #7
 80031b8:	e006      	b.n	80031c8 <HAL_GPIO_Init+0x204>
 80031ba:	2303      	movs	r3, #3
 80031bc:	e004      	b.n	80031c8 <HAL_GPIO_Init+0x204>
 80031be:	2302      	movs	r3, #2
 80031c0:	e002      	b.n	80031c8 <HAL_GPIO_Init+0x204>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_GPIO_Init+0x204>
 80031c6:	2300      	movs	r3, #0
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	f002 0203 	and.w	r2, r2, #3
 80031ce:	0092      	lsls	r2, r2, #2
 80031d0:	4093      	lsls	r3, r2
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031d8:	4935      	ldr	r1, [pc, #212]	; (80032b0 <HAL_GPIO_Init+0x2ec>)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e6:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <HAL_GPIO_Init+0x304>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800320a:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <HAL_GPIO_Init+0x304>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003210:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_GPIO_Init+0x304>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003234:	4a24      	ldr	r2, [pc, #144]	; (80032c8 <HAL_GPIO_Init+0x304>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_GPIO_Init+0x304>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800325e:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_GPIO_Init+0x304>)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003264:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_GPIO_Init+0x304>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003288:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <HAL_GPIO_Init+0x304>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3301      	adds	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	f67f aea2 	bls.w	8002fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40013800 	.word	0x40013800
 80032b4:	40020000 	.word	0x40020000
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40020800 	.word	0x40020800
 80032c0:	40020c00 	.word	0x40020c00
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40013c00 	.word	0x40013c00

080032cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
 80032d8:	4613      	mov	r3, r2
 80032da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032dc:	787b      	ldrb	r3, [r7, #1]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032e8:	e003      	b.n	80032f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	041a      	lsls	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	619a      	str	r2, [r3, #24]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e264      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d075      	beq.n	800340a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800331e:	4ba3      	ldr	r3, [pc, #652]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b04      	cmp	r3, #4
 8003328:	d00c      	beq.n	8003344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332a:	4ba0      	ldr	r3, [pc, #640]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003332:	2b08      	cmp	r3, #8
 8003334:	d112      	bne.n	800335c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003336:	4b9d      	ldr	r3, [pc, #628]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003342:	d10b      	bne.n	800335c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	4b99      	ldr	r3, [pc, #612]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d05b      	beq.n	8003408 <HAL_RCC_OscConfig+0x108>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d157      	bne.n	8003408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e23f      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003364:	d106      	bne.n	8003374 <HAL_RCC_OscConfig+0x74>
 8003366:	4b91      	ldr	r3, [pc, #580]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a90      	ldr	r2, [pc, #576]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e01d      	b.n	80033b0 <HAL_RCC_OscConfig+0xb0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x98>
 800337e:	4b8b      	ldr	r3, [pc, #556]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a8a      	ldr	r2, [pc, #552]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b88      	ldr	r3, [pc, #544]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a87      	ldr	r2, [pc, #540]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e00b      	b.n	80033b0 <HAL_RCC_OscConfig+0xb0>
 8003398:	4b84      	ldr	r3, [pc, #528]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a83      	ldr	r2, [pc, #524]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 800339e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4b81      	ldr	r3, [pc, #516]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a80      	ldr	r2, [pc, #512]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 80033aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7ff f8c0 	bl	800253c <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c0:	f7ff f8bc 	bl	800253c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e204      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0xc0>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7ff f8ac 	bl	800253c <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e8:	f7ff f8a8 	bl	800253c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1f0      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	4b6c      	ldr	r3, [pc, #432]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0xe8>
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d063      	beq.n	80034de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003416:	4b65      	ldr	r3, [pc, #404]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003422:	4b62      	ldr	r3, [pc, #392]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800342a:	2b08      	cmp	r3, #8
 800342c:	d11c      	bne.n	8003468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342e:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d116      	bne.n	8003468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	4b5c      	ldr	r3, [pc, #368]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x152>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d001      	beq.n	8003452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1c4      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b56      	ldr	r3, [pc, #344]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4952      	ldr	r1, [pc, #328]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	e03a      	b.n	80034de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003470:	4b4f      	ldr	r3, [pc, #316]	; (80035b0 <HAL_RCC_OscConfig+0x2b0>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7ff f861 	bl	800253c <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347e:	f7ff f85d 	bl	800253c <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1a5      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	4b46      	ldr	r3, [pc, #280]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4940      	ldr	r1, [pc, #256]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b2:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCC_OscConfig+0x2b0>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7ff f840 	bl	800253c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c0:	f7ff f83c 	bl	800253c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e184      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	4b36      	ldr	r3, [pc, #216]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d030      	beq.n	800354c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f2:	4b30      	ldr	r3, [pc, #192]	; (80035b4 <HAL_RCC_OscConfig+0x2b4>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7ff f820 	bl	800253c <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003500:	f7ff f81c 	bl	800253c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e164      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x200>
 800351e:	e015      	b.n	800354c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003520:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCC_OscConfig+0x2b4>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003526:	f7ff f809 	bl	800253c <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352e:	f7ff f805 	bl	800253c <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e14d      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f0      	bne.n	800352e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a0 	beq.w	800369a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 8003574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <HAL_RCC_OscConfig+0x2ac>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_OscConfig+0x2b8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d121      	bne.n	80035da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_RCC_OscConfig+0x2b8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a07      	ldr	r2, [pc, #28]	; (80035b8 <HAL_RCC_OscConfig+0x2b8>)
 800359c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a2:	f7fe ffcb 	bl	800253c <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	e011      	b.n	80035ce <HAL_RCC_OscConfig+0x2ce>
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	42470000 	.word	0x42470000
 80035b4:	42470e80 	.word	0x42470e80
 80035b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035bc:	f7fe ffbe 	bl	800253c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e106      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b85      	ldr	r3, [pc, #532]	; (80037e4 <HAL_RCC_OscConfig+0x4e4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2f0>
 80035e2:	4b81      	ldr	r3, [pc, #516]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a80      	ldr	r2, [pc, #512]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
 80035ee:	e01c      	b.n	800362a <HAL_RCC_OscConfig+0x32a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d10c      	bne.n	8003612 <HAL_RCC_OscConfig+0x312>
 80035f8:	4b7b      	ldr	r3, [pc, #492]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	4a7a      	ldr	r2, [pc, #488]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 80035fe:	f043 0304 	orr.w	r3, r3, #4
 8003602:	6713      	str	r3, [r2, #112]	; 0x70
 8003604:	4b78      	ldr	r3, [pc, #480]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	4a77      	ldr	r2, [pc, #476]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	; 0x70
 8003610:	e00b      	b.n	800362a <HAL_RCC_OscConfig+0x32a>
 8003612:	4b75      	ldr	r3, [pc, #468]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	4a74      	ldr	r2, [pc, #464]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	6713      	str	r3, [r2, #112]	; 0x70
 800361e:	4b72      	ldr	r3, [pc, #456]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a71      	ldr	r2, [pc, #452]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 8003624:	f023 0304 	bic.w	r3, r3, #4
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d015      	beq.n	800365e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7fe ff83 	bl	800253c <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fe ff7f 	bl	800253c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e0c5      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0ee      	beq.n	800363a <HAL_RCC_OscConfig+0x33a>
 800365c:	e014      	b.n	8003688 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365e:	f7fe ff6d 	bl	800253c <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003664:	e00a      	b.n	800367c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7fe ff69 	bl	800253c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f241 3288 	movw	r2, #5000	; 0x1388
 8003674:	4293      	cmp	r3, r2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0af      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367c:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ee      	bne.n	8003666 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d105      	bne.n	800369a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368e:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	4a55      	ldr	r2, [pc, #340]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 8003694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 809b 	beq.w	80037da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a4:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d05c      	beq.n	800376a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d141      	bne.n	800373c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b8:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <HAL_RCC_OscConfig+0x4ec>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe ff3d 	bl	800253c <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe ff39 	bl	800253c <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e081      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d8:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f0      	bne.n	80036c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	019b      	lsls	r3, r3, #6
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	085b      	lsrs	r3, r3, #1
 80036fc:	3b01      	subs	r3, #1
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	4937      	ldr	r1, [pc, #220]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370e:	4b37      	ldr	r3, [pc, #220]	; (80037ec <HAL_RCC_OscConfig+0x4ec>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fe ff12 	bl	800253c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371c:	f7fe ff0e 	bl	800253c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e056      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372e:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x41c>
 800373a:	e04e      	b.n	80037da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373c:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <HAL_RCC_OscConfig+0x4ec>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fe fefb 	bl	800253c <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374a:	f7fe fef7 	bl	800253c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e03f      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375c:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x44a>
 8003768:	e037      	b.n	80037da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e032      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <HAL_RCC_OscConfig+0x4e8>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d028      	beq.n	80037d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d121      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d11a      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037a6:	4013      	ands	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d111      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	085b      	lsrs	r3, r3, #1
 80037be:	3b01      	subs	r3, #1
 80037c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40007000 	.word	0x40007000
 80037e8:	40023800 	.word	0x40023800
 80037ec:	42470060 	.word	0x42470060

080037f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0cc      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b68      	ldr	r3, [pc, #416]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d90c      	bls.n	800382c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b8      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a58      	ldr	r2, [pc, #352]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4b53      	ldr	r3, [pc, #332]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a52      	ldr	r2, [pc, #328]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	494d      	ldr	r1, [pc, #308]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d044      	beq.n	8003910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d119      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e067      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ce:	4b37      	ldr	r3, [pc, #220]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4934      	ldr	r1, [pc, #208]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e0:	f7fe fe2c 	bl	800253c <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e8:	f7fe fe28 	bl	800253c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e04f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 020c 	and.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	429a      	cmp	r2, r3
 800390e:	d1eb      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d20c      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e032      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4916      	ldr	r1, [pc, #88]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	490e      	ldr	r1, [pc, #56]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003976:	f000 f821 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800397a:	4602      	mov	r2, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	490a      	ldr	r1, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	5ccb      	ldrb	r3, [r1, r3]
 800398a:	fa22 f303 	lsr.w	r3, r2, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fd8c 	bl	80024b4 <HAL_InitTick>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023c00 	.word	0x40023c00
 80039ac:	40023800 	.word	0x40023800
 80039b0:	08018bcc 	.word	0x08018bcc
 80039b4:	20000000 	.word	0x20000000
 80039b8:	20000004 	.word	0x20000004

080039bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b5b0      	push	{r4, r5, r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039c2:	2100      	movs	r1, #0
 80039c4:	6079      	str	r1, [r7, #4]
 80039c6:	2100      	movs	r1, #0
 80039c8:	60f9      	str	r1, [r7, #12]
 80039ca:	2100      	movs	r1, #0
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039ce:	2100      	movs	r1, #0
 80039d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d2:	4952      	ldr	r1, [pc, #328]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x160>)
 80039d4:	6889      	ldr	r1, [r1, #8]
 80039d6:	f001 010c 	and.w	r1, r1, #12
 80039da:	2908      	cmp	r1, #8
 80039dc:	d00d      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0x3e>
 80039de:	2908      	cmp	r1, #8
 80039e0:	f200 8094 	bhi.w	8003b0c <HAL_RCC_GetSysClockFreq+0x150>
 80039e4:	2900      	cmp	r1, #0
 80039e6:	d002      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x32>
 80039e8:	2904      	cmp	r1, #4
 80039ea:	d003      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x38>
 80039ec:	e08e      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ee:	4b4c      	ldr	r3, [pc, #304]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x164>)
 80039f0:	60bb      	str	r3, [r7, #8]
       break;
 80039f2:	e08e      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039f4:	4b4b      	ldr	r3, [pc, #300]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x168>)
 80039f6:	60bb      	str	r3, [r7, #8]
      break;
 80039f8:	e08b      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039fa:	4948      	ldr	r1, [pc, #288]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x160>)
 80039fc:	6849      	ldr	r1, [r1, #4]
 80039fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a02:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a04:	4945      	ldr	r1, [pc, #276]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a06:	6849      	ldr	r1, [r1, #4]
 8003a08:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a0c:	2900      	cmp	r1, #0
 8003a0e:	d024      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a10:	4942      	ldr	r1, [pc, #264]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a12:	6849      	ldr	r1, [r1, #4]
 8003a14:	0989      	lsrs	r1, r1, #6
 8003a16:	4608      	mov	r0, r1
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a20:	f04f 0500 	mov.w	r5, #0
 8003a24:	ea00 0204 	and.w	r2, r0, r4
 8003a28:	ea01 0305 	and.w	r3, r1, r5
 8003a2c:	493d      	ldr	r1, [pc, #244]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a2e:	fb01 f003 	mul.w	r0, r1, r3
 8003a32:	2100      	movs	r1, #0
 8003a34:	fb01 f102 	mul.w	r1, r1, r2
 8003a38:	1844      	adds	r4, r0, r1
 8003a3a:	493a      	ldr	r1, [pc, #232]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a3c:	fba2 0101 	umull	r0, r1, r2, r1
 8003a40:	1863      	adds	r3, r4, r1
 8003a42:	4619      	mov	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	f7fc fc30 	bl	80002b0 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4613      	mov	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	e04a      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5a:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	461a      	mov	r2, r3
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a6a:	f04f 0100 	mov.w	r1, #0
 8003a6e:	ea02 0400 	and.w	r4, r2, r0
 8003a72:	ea03 0501 	and.w	r5, r3, r1
 8003a76:	4620      	mov	r0, r4
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	014b      	lsls	r3, r1, #5
 8003a84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a88:	0142      	lsls	r2, r0, #5
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	1b00      	subs	r0, r0, r4
 8003a90:	eb61 0105 	sbc.w	r1, r1, r5
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	018b      	lsls	r3, r1, #6
 8003a9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003aa2:	0182      	lsls	r2, r0, #6
 8003aa4:	1a12      	subs	r2, r2, r0
 8003aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aaa:	f04f 0000 	mov.w	r0, #0
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	00d9      	lsls	r1, r3, #3
 8003ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ab8:	00d0      	lsls	r0, r2, #3
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	1912      	adds	r2, r2, r4
 8003ac0:	eb45 0303 	adc.w	r3, r5, r3
 8003ac4:	f04f 0000 	mov.w	r0, #0
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	0299      	lsls	r1, r3, #10
 8003ace:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ad2:	0290      	lsls	r0, r2, #10
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	f7fc fbe4 	bl	80002b0 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4613      	mov	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x160>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	3301      	adds	r3, #1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	60bb      	str	r3, [r7, #8]
      break;
 8003b0a:	e002      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b0e:	60bb      	str	r3, [r7, #8]
      break;
 8003b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b12:	68bb      	ldr	r3, [r7, #8]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	00f42400 	.word	0x00f42400
 8003b24:	017d7840 	.word	0x017d7840

08003b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000000 	.word	0x20000000

08003b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b44:	f7ff fff0 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	0a9b      	lsrs	r3, r3, #10
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4903      	ldr	r1, [pc, #12]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40023800 	.word	0x40023800
 8003b64:	08018bdc 	.word	0x08018bdc

08003b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b6c:	f7ff ffdc 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0b5b      	lsrs	r3, r3, #13
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08018bdc 	.word	0x08018bdc

08003b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07b      	b.n	8003c9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb2:	d009      	beq.n	8003bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	61da      	str	r2, [r3, #28]
 8003bba:	e005      	b.n	8003bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fe f8a4 	bl	8001d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	ea42 0103 	orr.w	r1, r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	f003 0104 	and.w	r1, r3, #4
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f003 0210 	and.w	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e03f      	b.n	8003d34 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fe faf3 	bl	80022b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2224      	movs	r2, #36	; 0x24
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ce4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 ff52 	bl	8004b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cfa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	; 0x30
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d165      	bne.n	8003e22 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_UART_Transmit_DMA+0x26>
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e05e      	b.n	8003e24 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_UART_Transmit_DMA+0x38>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e057      	b.n	8003e24 <HAL_UART_Transmit_DMA+0xe8>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2221      	movs	r2, #33	; 0x21
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	4a22      	ldr	r2, [pc, #136]	; (8003e2c <HAL_UART_Transmit_DMA+0xf0>)
 8003da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	4a21      	ldr	r2, [pc, #132]	; (8003e30 <HAL_UART_Transmit_DMA+0xf4>)
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <HAL_UART_Transmit_DMA+0xf8>)
 8003db2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	2200      	movs	r2, #0
 8003dba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003dbc:	f107 0308 	add.w	r3, r7, #8
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	f7fe fda2 	bl	800291c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003de0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e0a:	627a      	str	r2, [r7, #36]	; 0x24
 8003e0c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6a39      	ldr	r1, [r7, #32]
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e000      	b.n	8003e24 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3730      	adds	r7, #48	; 0x30
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	08004431 	.word	0x08004431
 8003e30:	080044cb 	.word	0x080044cb
 8003e34:	08004643 	.word	0x08004643

08003e38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d11d      	bne.n	8003e8e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_UART_Receive_DMA+0x26>
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e016      	b.n	8003e90 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_UART_Receive_DMA+0x38>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e00f      	b.n	8003e90 <HAL_UART_Receive_DMA+0x58>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	461a      	mov	r2, r3
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fc27 	bl	80046d8 <UART_Start_Receive_DMA>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	e000      	b.n	8003e90 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b0ba      	sub	sp, #232	; 0xe8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10f      	bne.n	8003efe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_UART_IRQHandler+0x66>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fd8f 	bl	8004a1a <UART_Receive_IT>
      return;
 8003efc:	e256      	b.n	80043ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80de 	beq.w	80040c4 <HAL_UART_IRQHandler+0x22c>
 8003f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80d1 	beq.w	80040c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_UART_IRQHandler+0xae>
 8003f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_UART_IRQHandler+0xd2>
 8003f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_UART_IRQHandler+0xf6>
 8003f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d011      	beq.n	8003fbe <HAL_UART_IRQHandler+0x126>
 8003f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d105      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0208 	orr.w	r2, r3, #8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 81ed 	beq.w	80043a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x14e>
 8003fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fd1a 	bl	8004a1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_UART_IRQHandler+0x17a>
 800400a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d04f      	beq.n	80040b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fc22 	bl	800485c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d141      	bne.n	80040aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3314      	adds	r3, #20
 800402c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800403c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3314      	adds	r3, #20
 800404e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004052:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800405e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800406a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1d9      	bne.n	8004026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	d013      	beq.n	80040a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	4a7d      	ldr	r2, [pc, #500]	; (8004274 <HAL_UART_IRQHandler+0x3dc>)
 8004080:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fd10 	bl	8002aac <HAL_DMA_Abort_IT>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800409c:	4610      	mov	r0, r2
 800409e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	e00e      	b.n	80040c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9ae 	bl	8004404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	e00a      	b.n	80040c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9aa 	bl	8004404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	e006      	b.n	80040c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9a6 	bl	8004404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040be:	e170      	b.n	80043a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	bf00      	nop
    return;
 80040c2:	e16e      	b.n	80043a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	f040 814a 	bne.w	8004362 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8143 	beq.w	8004362 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 813c 	beq.w	8004362 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	f040 80b4 	bne.w	8004278 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800411c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8140 	beq.w	80043a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800412a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800412e:	429a      	cmp	r2, r3
 8004130:	f080 8139 	bcs.w	80043a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800413a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004146:	f000 8088 	beq.w	800425a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800417a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004182:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800418e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1d9      	bne.n	800414a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e1      	bne.n	8004196 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3314      	adds	r3, #20
 80041d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3314      	adds	r3, #20
 80041f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e3      	bne.n	80041d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422a:	f023 0310 	bic.w	r3, r3, #16
 800422e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800423c:	65ba      	str	r2, [r7, #88]	; 0x58
 800423e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800424a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e3      	bne.n	8004218 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe fbb9 	bl	80029cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004262:	b29b      	uxth	r3, r3
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	b29b      	uxth	r3, r3
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8d4 	bl	8004418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004270:	e099      	b.n	80043a6 <HAL_UART_IRQHandler+0x50e>
 8004272:	bf00      	nop
 8004274:	08004923 	.word	0x08004923
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004280:	b29b      	uxth	r3, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 808b 	beq.w	80043aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8086 	beq.w	80043aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042c2:	647a      	str	r2, [r7, #68]	; 0x44
 80042c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e3      	bne.n	800429e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3314      	adds	r3, #20
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	623b      	str	r3, [r7, #32]
   return(result);
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3314      	adds	r3, #20
 80042f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042fa:	633a      	str	r2, [r7, #48]	; 0x30
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e3      	bne.n	80042d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	60fb      	str	r3, [r7, #12]
   return(result);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0310 	bic.w	r3, r3, #16
 8004332:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004340:	61fa      	str	r2, [r7, #28]
 8004342:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	69b9      	ldr	r1, [r7, #24]
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	617b      	str	r3, [r7, #20]
   return(result);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e3      	bne.n	800431c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f85c 	bl	8004418 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004360:	e023      	b.n	80043aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_UART_IRQHandler+0x4ea>
 800436e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fae5 	bl	800494a <UART_Transmit_IT>
    return;
 8004380:	e014      	b.n	80043ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00e      	beq.n	80043ac <HAL_UART_IRQHandler+0x514>
 800438e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fb25 	bl	80049ea <UART_EndTransmit_IT>
    return;
 80043a0:	e004      	b.n	80043ac <HAL_UART_IRQHandler+0x514>
    return;
 80043a2:	bf00      	nop
 80043a4:	e002      	b.n	80043ac <HAL_UART_IRQHandler+0x514>
      return;
 80043a6:	bf00      	nop
 80043a8:	e000      	b.n	80043ac <HAL_UART_IRQHandler+0x514>
      return;
 80043aa:	bf00      	nop
  }
}
 80043ac:	37e8      	adds	r7, #232	; 0xe8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop

080043b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b090      	sub	sp, #64	; 0x40
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d137      	bne.n	80044bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800444c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444e:	2200      	movs	r2, #0
 8004450:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3314      	adds	r3, #20
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	623b      	str	r3, [r7, #32]
   return(result);
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004468:	63bb      	str	r3, [r7, #56]	; 0x38
 800446a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3314      	adds	r3, #20
 8004470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004472:	633a      	str	r2, [r7, #48]	; 0x30
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e5      	bne.n	8004452 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	60fb      	str	r3, [r7, #12]
   return(result);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449c:	637b      	str	r3, [r7, #52]	; 0x34
 800449e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a6:	61fa      	str	r2, [r7, #28]
 80044a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	617b      	str	r3, [r7, #20]
   return(result);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e5      	bne.n	8004486 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044ba:	e002      	b.n	80044c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80044bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80044be:	f7ff ff79 	bl	80043b4 <HAL_UART_TxCpltCallback>
}
 80044c2:	bf00      	nop
 80044c4:	3740      	adds	r7, #64	; 0x40
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff ff75 	bl	80043c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b09c      	sub	sp, #112	; 0x70
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d172      	bne.n	80045e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004504:	2200      	movs	r2, #0
 8004506:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800451e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004528:	65ba      	str	r2, [r7, #88]	; 0x58
 800452a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800452e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3314      	adds	r3, #20
 8004542:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	667b      	str	r3, [r7, #100]	; 0x64
 8004554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800455c:	647a      	str	r2, [r7, #68]	; 0x44
 800455e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800456a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e5      	bne.n	800453c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3314      	adds	r3, #20
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	623b      	str	r3, [r7, #32]
   return(result);
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004586:	663b      	str	r3, [r7, #96]	; 0x60
 8004588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3314      	adds	r3, #20
 800458e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004590:	633a      	str	r2, [r7, #48]	; 0x30
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d119      	bne.n	80045e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	330c      	adds	r3, #12
 80045ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0310 	bic.w	r3, r3, #16
 80045ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	330c      	adds	r3, #12
 80045d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045d4:	61fa      	str	r2, [r7, #28]
 80045d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	69b9      	ldr	r1, [r7, #24]
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	617b      	str	r3, [r7, #20]
   return(result);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e5      	bne.n	80045b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d106      	bne.n	80045fe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045f4:	4619      	mov	r1, r3
 80045f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045f8:	f7ff ff0e 	bl	8004418 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045fc:	e002      	b.n	8004604 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80045fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004600:	f7ff feec 	bl	80043dc <HAL_UART_RxCpltCallback>
}
 8004604:	bf00      	nop
 8004606:	3770      	adds	r7, #112	; 0x70
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	2b01      	cmp	r3, #1
 8004620:	d108      	bne.n	8004634 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	b29b      	uxth	r3, r3
 800462a:	4619      	mov	r1, r3
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff fef3 	bl	8004418 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004632:	e002      	b.n	800463a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7ff fedb 	bl	80043f0 <HAL_UART_RxHalfCpltCallback>
}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b21      	cmp	r3, #33	; 0x21
 8004674:	d108      	bne.n	8004688 <UART_DMAError+0x46>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2200      	movs	r2, #0
 8004680:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004682:	68b8      	ldr	r0, [r7, #8]
 8004684:	f000 f8c2 	bl	800480c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	bf0c      	ite	eq
 8004696:	2301      	moveq	r3, #1
 8004698:	2300      	movne	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b22      	cmp	r3, #34	; 0x22
 80046a8:	d108      	bne.n	80046bc <UART_DMAError+0x7a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2200      	movs	r2, #0
 80046b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80046b6:	68b8      	ldr	r0, [r7, #8]
 80046b8:	f000 f8d0 	bl	800485c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	f043 0210 	orr.w	r2, r3, #16
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046c8:	68b8      	ldr	r0, [r7, #8]
 80046ca:	f7ff fe9b 	bl	8004404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b098      	sub	sp, #96	; 0x60
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2222      	movs	r2, #34	; 0x22
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	4a3e      	ldr	r2, [pc, #248]	; (8004800 <UART_Start_Receive_DMA+0x128>)
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	4a3d      	ldr	r2, [pc, #244]	; (8004804 <UART_Start_Receive_DMA+0x12c>)
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	4a3c      	ldr	r2, [pc, #240]	; (8004808 <UART_Start_Receive_DMA+0x130>)
 8004716:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	2200      	movs	r2, #0
 800471e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004720:	f107 0308 	add.w	r3, r7, #8
 8004724:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	f7fe f8f0 	bl	800291c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800476a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	65bb      	str	r3, [r7, #88]	; 0x58
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800477a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800477c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e5      	bne.n	800475a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	657b      	str	r3, [r7, #84]	; 0x54
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e5      	bne.n	800478e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	617b      	str	r3, [r7, #20]
   return(result);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d8:	653b      	str	r3, [r7, #80]	; 0x50
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3314      	adds	r3, #20
 80047e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047e2:	627a      	str	r2, [r7, #36]	; 0x24
 80047e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6a39      	ldr	r1, [r7, #32]
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e5      	bne.n	80047c2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3760      	adds	r7, #96	; 0x60
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	080044e7 	.word	0x080044e7
 8004804:	0800460d 	.word	0x0800460d
 8004808:	08004643 	.word	0x08004643

0800480c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	; 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	60bb      	str	r3, [r7, #8]
   return(result);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	61ba      	str	r2, [r7, #24]
 8004836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6979      	ldr	r1, [r7, #20]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	613b      	str	r3, [r7, #16]
   return(result);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004850:	bf00      	nop
 8004852:	3724      	adds	r7, #36	; 0x24
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b095      	sub	sp, #84	; 0x54
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800487a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004884:	643a      	str	r2, [r7, #64]	; 0x40
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800488a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3314      	adds	r3, #20
 800489e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3314      	adds	r3, #20
 80048b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d119      	bne.n	8004908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f023 0310 	bic.w	r3, r3, #16
 80048ea:	647b      	str	r3, [r7, #68]	; 0x44
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f4:	61ba      	str	r2, [r7, #24]
 80048f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6979      	ldr	r1, [r7, #20]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	613b      	str	r3, [r7, #16]
   return(result);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e5      	bne.n	80048d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004916:	bf00      	nop
 8004918:	3754      	adds	r7, #84	; 0x54
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff fd61 	bl	8004404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b21      	cmp	r3, #33	; 0x21
 800495c:	d13e      	bne.n	80049dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	d114      	bne.n	8004992 <UART_Transmit_IT+0x48>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d110      	bne.n	8004992 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004984:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	1c9a      	adds	r2, r3, #2
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]
 8004990:	e008      	b.n	80049a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6211      	str	r1, [r2, #32]
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4619      	mov	r1, r3
 80049b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10f      	bne.n	80049d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff fcd2 	bl	80043b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b08c      	sub	sp, #48	; 0x30
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b22      	cmp	r3, #34	; 0x22
 8004a2c:	f040 80ab 	bne.w	8004b86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a38:	d117      	bne.n	8004a6a <UART_Receive_IT+0x50>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d113      	bne.n	8004a6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	1c9a      	adds	r2, r3, #2
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28
 8004a68:	e026      	b.n	8004ab8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7c:	d007      	beq.n	8004a8e <UART_Receive_IT+0x74>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <UART_Receive_IT+0x82>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e008      	b.n	8004aae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d15a      	bne.n	8004b82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0220 	bic.w	r2, r2, #32
 8004ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d135      	bne.n	8004b78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	613b      	str	r3, [r7, #16]
   return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f023 0310 	bic.w	r3, r3, #16
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	330c      	adds	r3, #12
 8004b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b32:	623a      	str	r2, [r7, #32]
 8004b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	69f9      	ldr	r1, [r7, #28]
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e5      	bne.n	8004b12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d10a      	bne.n	8004b6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff fc51 	bl	8004418 <HAL_UARTEx_RxEventCallback>
 8004b76:	e002      	b.n	8004b7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff fc2f 	bl	80043dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e002      	b.n	8004b88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3730      	adds	r7, #48	; 0x30
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	b09f      	sub	sp, #124	; 0x7c
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba6:	68d9      	ldr	r1, [r3, #12]
 8004ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	ea40 0301 	orr.w	r3, r0, r1
 8004bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bd4:	f021 010c 	bic.w	r1, r1, #12
 8004bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bde:	430b      	orrs	r3, r1
 8004be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bee:	6999      	ldr	r1, [r3, #24]
 8004bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	ea40 0301 	orr.w	r3, r0, r1
 8004bf8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4bc5      	ldr	r3, [pc, #788]	; (8004f14 <UART_SetConfig+0x384>)
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d004      	beq.n	8004c0e <UART_SetConfig+0x7e>
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4bc3      	ldr	r3, [pc, #780]	; (8004f18 <UART_SetConfig+0x388>)
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d103      	bne.n	8004c16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c0e:	f7fe ffab 	bl	8003b68 <HAL_RCC_GetPCLK2Freq>
 8004c12:	6778      	str	r0, [r7, #116]	; 0x74
 8004c14:	e002      	b.n	8004c1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c16:	f7fe ff93 	bl	8003b40 <HAL_RCC_GetPCLK1Freq>
 8004c1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c24:	f040 80b6 	bne.w	8004d94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2a:	461c      	mov	r4, r3
 8004c2c:	f04f 0500 	mov.w	r5, #0
 8004c30:	4622      	mov	r2, r4
 8004c32:	462b      	mov	r3, r5
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	6439      	str	r1, [r7, #64]	; 0x40
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c40:	1912      	adds	r2, r2, r4
 8004c42:	eb45 0303 	adc.w	r3, r5, r3
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	00d9      	lsls	r1, r3, #3
 8004c50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c54:	00d0      	lsls	r0, r2, #3
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	1911      	adds	r1, r2, r4
 8004c5c:	6639      	str	r1, [r7, #96]	; 0x60
 8004c5e:	416b      	adcs	r3, r5
 8004c60:	667b      	str	r3, [r7, #100]	; 0x64
 8004c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	1891      	adds	r1, r2, r2
 8004c6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c70:	415b      	adcs	r3, r3
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c7c:	f7fb fb18 	bl	80002b0 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4ba5      	ldr	r3, [pc, #660]	; (8004f1c <UART_SetConfig+0x38c>)
 8004c86:	fba3 2302 	umull	r2, r3, r3, r2
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	011e      	lsls	r6, r3, #4
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c90:	461c      	mov	r4, r3
 8004c92:	f04f 0500 	mov.w	r5, #0
 8004c96:	4622      	mov	r2, r4
 8004c98:	462b      	mov	r3, r5
 8004c9a:	1891      	adds	r1, r2, r2
 8004c9c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ca6:	1912      	adds	r2, r2, r4
 8004ca8:	eb45 0303 	adc.w	r3, r5, r3
 8004cac:	f04f 0000 	mov.w	r0, #0
 8004cb0:	f04f 0100 	mov.w	r1, #0
 8004cb4:	00d9      	lsls	r1, r3, #3
 8004cb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cba:	00d0      	lsls	r0, r2, #3
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	1911      	adds	r1, r2, r4
 8004cc2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cc4:	416b      	adcs	r3, r5
 8004cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	1891      	adds	r1, r2, r2
 8004cd4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cd6:	415b      	adcs	r3, r3
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ce2:	f7fb fae5 	bl	80002b0 <__aeabi_uldivmod>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4b8c      	ldr	r3, [pc, #560]	; (8004f1c <UART_SetConfig+0x38c>)
 8004cec:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	2164      	movs	r1, #100	; 0x64
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	3332      	adds	r3, #50	; 0x32
 8004cfe:	4a87      	ldr	r2, [pc, #540]	; (8004f1c <UART_SetConfig+0x38c>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d0c:	441e      	add	r6, r3
 8004d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d10:	4618      	mov	r0, r3
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	1894      	adds	r4, r2, r2
 8004d1c:	623c      	str	r4, [r7, #32]
 8004d1e:	415b      	adcs	r3, r3
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
 8004d22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d26:	1812      	adds	r2, r2, r0
 8004d28:	eb41 0303 	adc.w	r3, r1, r3
 8004d2c:	f04f 0400 	mov.w	r4, #0
 8004d30:	f04f 0500 	mov.w	r5, #0
 8004d34:	00dd      	lsls	r5, r3, #3
 8004d36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d3a:	00d4      	lsls	r4, r2, #3
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	462b      	mov	r3, r5
 8004d40:	1814      	adds	r4, r2, r0
 8004d42:	653c      	str	r4, [r7, #80]	; 0x50
 8004d44:	414b      	adcs	r3, r1
 8004d46:	657b      	str	r3, [r7, #84]	; 0x54
 8004d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	1891      	adds	r1, r2, r2
 8004d54:	61b9      	str	r1, [r7, #24]
 8004d56:	415b      	adcs	r3, r3
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d62:	f7fb faa5 	bl	80002b0 <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4b6c      	ldr	r3, [pc, #432]	; (8004f1c <UART_SetConfig+0x38c>)
 8004d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	2164      	movs	r1, #100	; 0x64
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	3332      	adds	r3, #50	; 0x32
 8004d7e:	4a67      	ldr	r2, [pc, #412]	; (8004f1c <UART_SetConfig+0x38c>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	f003 0207 	and.w	r2, r3, #7
 8004d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4432      	add	r2, r6
 8004d90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d92:	e0b9      	b.n	8004f08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d96:	461c      	mov	r4, r3
 8004d98:	f04f 0500 	mov.w	r5, #0
 8004d9c:	4622      	mov	r2, r4
 8004d9e:	462b      	mov	r3, r5
 8004da0:	1891      	adds	r1, r2, r2
 8004da2:	6139      	str	r1, [r7, #16]
 8004da4:	415b      	adcs	r3, r3
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dac:	1912      	adds	r2, r2, r4
 8004dae:	eb45 0303 	adc.w	r3, r5, r3
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	00d9      	lsls	r1, r3, #3
 8004dbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dc0:	00d0      	lsls	r0, r2, #3
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	eb12 0804 	adds.w	r8, r2, r4
 8004dca:	eb43 0905 	adc.w	r9, r3, r5
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f04f 0100 	mov.w	r1, #0
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	008b      	lsls	r3, r1, #2
 8004de2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004de6:	0082      	lsls	r2, r0, #2
 8004de8:	4640      	mov	r0, r8
 8004dea:	4649      	mov	r1, r9
 8004dec:	f7fb fa60 	bl	80002b0 <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4b49      	ldr	r3, [pc, #292]	; (8004f1c <UART_SetConfig+0x38c>)
 8004df6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	011e      	lsls	r6, r3, #4
 8004dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e00:	4618      	mov	r0, r3
 8004e02:	f04f 0100 	mov.w	r1, #0
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	1894      	adds	r4, r2, r2
 8004e0c:	60bc      	str	r4, [r7, #8]
 8004e0e:	415b      	adcs	r3, r3
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e16:	1812      	adds	r2, r2, r0
 8004e18:	eb41 0303 	adc.w	r3, r1, r3
 8004e1c:	f04f 0400 	mov.w	r4, #0
 8004e20:	f04f 0500 	mov.w	r5, #0
 8004e24:	00dd      	lsls	r5, r3, #3
 8004e26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e2a:	00d4      	lsls	r4, r2, #3
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	462b      	mov	r3, r5
 8004e30:	1814      	adds	r4, r2, r0
 8004e32:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e34:	414b      	adcs	r3, r1
 8004e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	008b      	lsls	r3, r1, #2
 8004e4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e50:	0082      	lsls	r2, r0, #2
 8004e52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e56:	f7fb fa2b 	bl	80002b0 <__aeabi_uldivmod>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <UART_SetConfig+0x38c>)
 8004e60:	fba3 1302 	umull	r1, r3, r3, r2
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	2164      	movs	r1, #100	; 0x64
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	3332      	adds	r3, #50	; 0x32
 8004e72:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <UART_SetConfig+0x38c>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e7e:	441e      	add	r6, r3
 8004e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e82:	4618      	mov	r0, r3
 8004e84:	f04f 0100 	mov.w	r1, #0
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	1894      	adds	r4, r2, r2
 8004e8e:	603c      	str	r4, [r7, #0]
 8004e90:	415b      	adcs	r3, r3
 8004e92:	607b      	str	r3, [r7, #4]
 8004e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e98:	1812      	adds	r2, r2, r0
 8004e9a:	eb41 0303 	adc.w	r3, r1, r3
 8004e9e:	f04f 0400 	mov.w	r4, #0
 8004ea2:	f04f 0500 	mov.w	r5, #0
 8004ea6:	00dd      	lsls	r5, r3, #3
 8004ea8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004eac:	00d4      	lsls	r4, r2, #3
 8004eae:	4622      	mov	r2, r4
 8004eb0:	462b      	mov	r3, r5
 8004eb2:	eb12 0a00 	adds.w	sl, r2, r0
 8004eb6:	eb43 0b01 	adc.w	fp, r3, r1
 8004eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f04f 0100 	mov.w	r1, #0
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	008b      	lsls	r3, r1, #2
 8004ece:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ed2:	0082      	lsls	r2, r0, #2
 8004ed4:	4650      	mov	r0, sl
 8004ed6:	4659      	mov	r1, fp
 8004ed8:	f7fb f9ea 	bl	80002b0 <__aeabi_uldivmod>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <UART_SetConfig+0x38c>)
 8004ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	2164      	movs	r1, #100	; 0x64
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	3332      	adds	r3, #50	; 0x32
 8004ef4:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <UART_SetConfig+0x38c>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	f003 020f 	and.w	r2, r3, #15
 8004f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4432      	add	r2, r6
 8004f06:	609a      	str	r2, [r3, #8]
}
 8004f08:	bf00      	nop
 8004f0a:	377c      	adds	r7, #124	; 0x7c
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f12:	bf00      	nop
 8004f14:	40011000 	.word	0x40011000
 8004f18:	40011400 	.word	0x40011400
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <atoi>:
 8004f20:	220a      	movs	r2, #10
 8004f22:	2100      	movs	r1, #0
 8004f24:	f000 b932 	b.w	800518c <strtol>

08004f28 <__errno>:
 8004f28:	4b01      	ldr	r3, [pc, #4]	; (8004f30 <__errno+0x8>)
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	2000000c 	.word	0x2000000c

08004f34 <__libc_init_array>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4d0d      	ldr	r5, [pc, #52]	; (8004f6c <__libc_init_array+0x38>)
 8004f38:	4c0d      	ldr	r4, [pc, #52]	; (8004f70 <__libc_init_array+0x3c>)
 8004f3a:	1b64      	subs	r4, r4, r5
 8004f3c:	10a4      	asrs	r4, r4, #2
 8004f3e:	2600      	movs	r6, #0
 8004f40:	42a6      	cmp	r6, r4
 8004f42:	d109      	bne.n	8004f58 <__libc_init_array+0x24>
 8004f44:	4d0b      	ldr	r5, [pc, #44]	; (8004f74 <__libc_init_array+0x40>)
 8004f46:	4c0c      	ldr	r4, [pc, #48]	; (8004f78 <__libc_init_array+0x44>)
 8004f48:	f001 fa9e 	bl	8006488 <_init>
 8004f4c:	1b64      	subs	r4, r4, r5
 8004f4e:	10a4      	asrs	r4, r4, #2
 8004f50:	2600      	movs	r6, #0
 8004f52:	42a6      	cmp	r6, r4
 8004f54:	d105      	bne.n	8004f62 <__libc_init_array+0x2e>
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5c:	4798      	blx	r3
 8004f5e:	3601      	adds	r6, #1
 8004f60:	e7ee      	b.n	8004f40 <__libc_init_array+0xc>
 8004f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f66:	4798      	blx	r3
 8004f68:	3601      	adds	r6, #1
 8004f6a:	e7f2      	b.n	8004f52 <__libc_init_array+0x1e>
 8004f6c:	08018e40 	.word	0x08018e40
 8004f70:	08018e40 	.word	0x08018e40
 8004f74:	08018e40 	.word	0x08018e40
 8004f78:	08018e44 	.word	0x08018e44

08004f7c <memset>:
 8004f7c:	4402      	add	r2, r0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d100      	bne.n	8004f86 <memset+0xa>
 8004f84:	4770      	bx	lr
 8004f86:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8a:	e7f9      	b.n	8004f80 <memset+0x4>

08004f8c <siprintf>:
 8004f8c:	b40e      	push	{r1, r2, r3}
 8004f8e:	b500      	push	{lr}
 8004f90:	b09c      	sub	sp, #112	; 0x70
 8004f92:	ab1d      	add	r3, sp, #116	; 0x74
 8004f94:	9002      	str	r0, [sp, #8]
 8004f96:	9006      	str	r0, [sp, #24]
 8004f98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f9c:	4809      	ldr	r0, [pc, #36]	; (8004fc4 <siprintf+0x38>)
 8004f9e:	9107      	str	r1, [sp, #28]
 8004fa0:	9104      	str	r1, [sp, #16]
 8004fa2:	4909      	ldr	r1, [pc, #36]	; (8004fc8 <siprintf+0x3c>)
 8004fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa8:	9105      	str	r1, [sp, #20]
 8004faa:	6800      	ldr	r0, [r0, #0]
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	a902      	add	r1, sp, #8
 8004fb0:	f000 fa34 	bl	800541c <_svfiprintf_r>
 8004fb4:	9b02      	ldr	r3, [sp, #8]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	b01c      	add	sp, #112	; 0x70
 8004fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fc0:	b003      	add	sp, #12
 8004fc2:	4770      	bx	lr
 8004fc4:	2000000c 	.word	0x2000000c
 8004fc8:	ffff0208 	.word	0xffff0208

08004fcc <strtok>:
 8004fcc:	4b16      	ldr	r3, [pc, #88]	; (8005028 <strtok+0x5c>)
 8004fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fd0:	681e      	ldr	r6, [r3, #0]
 8004fd2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	b9fc      	cbnz	r4, 8005018 <strtok+0x4c>
 8004fd8:	2050      	movs	r0, #80	; 0x50
 8004fda:	9101      	str	r1, [sp, #4]
 8004fdc:	f000 f910 	bl	8005200 <malloc>
 8004fe0:	9901      	ldr	r1, [sp, #4]
 8004fe2:	65b0      	str	r0, [r6, #88]	; 0x58
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	b920      	cbnz	r0, 8004ff2 <strtok+0x26>
 8004fe8:	4b10      	ldr	r3, [pc, #64]	; (800502c <strtok+0x60>)
 8004fea:	4811      	ldr	r0, [pc, #68]	; (8005030 <strtok+0x64>)
 8004fec:	2157      	movs	r1, #87	; 0x57
 8004fee:	f000 f8d7 	bl	80051a0 <__assert_func>
 8004ff2:	e9c0 4400 	strd	r4, r4, [r0]
 8004ff6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004ffa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004ffe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005002:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005006:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800500a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800500e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005012:	6184      	str	r4, [r0, #24]
 8005014:	7704      	strb	r4, [r0, #28]
 8005016:	6244      	str	r4, [r0, #36]	; 0x24
 8005018:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800501a:	2301      	movs	r3, #1
 800501c:	4628      	mov	r0, r5
 800501e:	b002      	add	sp, #8
 8005020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005024:	f000 b806 	b.w	8005034 <__strtok_r>
 8005028:	2000000c 	.word	0x2000000c
 800502c:	08018bf0 	.word	0x08018bf0
 8005030:	08018c07 	.word	0x08018c07

08005034 <__strtok_r>:
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005036:	b908      	cbnz	r0, 800503c <__strtok_r+0x8>
 8005038:	6810      	ldr	r0, [r2, #0]
 800503a:	b188      	cbz	r0, 8005060 <__strtok_r+0x2c>
 800503c:	4604      	mov	r4, r0
 800503e:	4620      	mov	r0, r4
 8005040:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005044:	460f      	mov	r7, r1
 8005046:	f817 6b01 	ldrb.w	r6, [r7], #1
 800504a:	b91e      	cbnz	r6, 8005054 <__strtok_r+0x20>
 800504c:	b965      	cbnz	r5, 8005068 <__strtok_r+0x34>
 800504e:	6015      	str	r5, [r2, #0]
 8005050:	4628      	mov	r0, r5
 8005052:	e005      	b.n	8005060 <__strtok_r+0x2c>
 8005054:	42b5      	cmp	r5, r6
 8005056:	d1f6      	bne.n	8005046 <__strtok_r+0x12>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f0      	bne.n	800503e <__strtok_r+0xa>
 800505c:	6014      	str	r4, [r2, #0]
 800505e:	7003      	strb	r3, [r0, #0]
 8005060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005062:	461c      	mov	r4, r3
 8005064:	e00c      	b.n	8005080 <__strtok_r+0x4c>
 8005066:	b915      	cbnz	r5, 800506e <__strtok_r+0x3a>
 8005068:	f814 3b01 	ldrb.w	r3, [r4], #1
 800506c:	460e      	mov	r6, r1
 800506e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005072:	42ab      	cmp	r3, r5
 8005074:	d1f7      	bne.n	8005066 <__strtok_r+0x32>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f3      	beq.n	8005062 <__strtok_r+0x2e>
 800507a:	2300      	movs	r3, #0
 800507c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005080:	6014      	str	r4, [r2, #0]
 8005082:	e7ed      	b.n	8005060 <__strtok_r+0x2c>

08005084 <_strtol_l.isra.0>:
 8005084:	2b01      	cmp	r3, #1
 8005086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508a:	d001      	beq.n	8005090 <_strtol_l.isra.0+0xc>
 800508c:	2b24      	cmp	r3, #36	; 0x24
 800508e:	d906      	bls.n	800509e <_strtol_l.isra.0+0x1a>
 8005090:	f7ff ff4a 	bl	8004f28 <__errno>
 8005094:	2316      	movs	r3, #22
 8005096:	6003      	str	r3, [r0, #0]
 8005098:	2000      	movs	r0, #0
 800509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509e:	4f3a      	ldr	r7, [pc, #232]	; (8005188 <_strtol_l.isra.0+0x104>)
 80050a0:	468e      	mov	lr, r1
 80050a2:	4676      	mov	r6, lr
 80050a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80050a8:	5de5      	ldrb	r5, [r4, r7]
 80050aa:	f015 0508 	ands.w	r5, r5, #8
 80050ae:	d1f8      	bne.n	80050a2 <_strtol_l.isra.0+0x1e>
 80050b0:	2c2d      	cmp	r4, #45	; 0x2d
 80050b2:	d134      	bne.n	800511e <_strtol_l.isra.0+0x9a>
 80050b4:	f89e 4000 	ldrb.w	r4, [lr]
 80050b8:	f04f 0801 	mov.w	r8, #1
 80050bc:	f106 0e02 	add.w	lr, r6, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d05c      	beq.n	800517e <_strtol_l.isra.0+0xfa>
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d10c      	bne.n	80050e2 <_strtol_l.isra.0+0x5e>
 80050c8:	2c30      	cmp	r4, #48	; 0x30
 80050ca:	d10a      	bne.n	80050e2 <_strtol_l.isra.0+0x5e>
 80050cc:	f89e 4000 	ldrb.w	r4, [lr]
 80050d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80050d4:	2c58      	cmp	r4, #88	; 0x58
 80050d6:	d14d      	bne.n	8005174 <_strtol_l.isra.0+0xf0>
 80050d8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80050dc:	2310      	movs	r3, #16
 80050de:	f10e 0e02 	add.w	lr, lr, #2
 80050e2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80050e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80050ea:	2600      	movs	r6, #0
 80050ec:	fbbc f9f3 	udiv	r9, ip, r3
 80050f0:	4635      	mov	r5, r6
 80050f2:	fb03 ca19 	mls	sl, r3, r9, ip
 80050f6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80050fa:	2f09      	cmp	r7, #9
 80050fc:	d818      	bhi.n	8005130 <_strtol_l.isra.0+0xac>
 80050fe:	463c      	mov	r4, r7
 8005100:	42a3      	cmp	r3, r4
 8005102:	dd24      	ble.n	800514e <_strtol_l.isra.0+0xca>
 8005104:	2e00      	cmp	r6, #0
 8005106:	db1f      	blt.n	8005148 <_strtol_l.isra.0+0xc4>
 8005108:	45a9      	cmp	r9, r5
 800510a:	d31d      	bcc.n	8005148 <_strtol_l.isra.0+0xc4>
 800510c:	d101      	bne.n	8005112 <_strtol_l.isra.0+0x8e>
 800510e:	45a2      	cmp	sl, r4
 8005110:	db1a      	blt.n	8005148 <_strtol_l.isra.0+0xc4>
 8005112:	fb05 4503 	mla	r5, r5, r3, r4
 8005116:	2601      	movs	r6, #1
 8005118:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800511c:	e7eb      	b.n	80050f6 <_strtol_l.isra.0+0x72>
 800511e:	2c2b      	cmp	r4, #43	; 0x2b
 8005120:	bf08      	it	eq
 8005122:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005126:	46a8      	mov	r8, r5
 8005128:	bf08      	it	eq
 800512a:	f106 0e02 	addeq.w	lr, r6, #2
 800512e:	e7c7      	b.n	80050c0 <_strtol_l.isra.0+0x3c>
 8005130:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005134:	2f19      	cmp	r7, #25
 8005136:	d801      	bhi.n	800513c <_strtol_l.isra.0+0xb8>
 8005138:	3c37      	subs	r4, #55	; 0x37
 800513a:	e7e1      	b.n	8005100 <_strtol_l.isra.0+0x7c>
 800513c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005140:	2f19      	cmp	r7, #25
 8005142:	d804      	bhi.n	800514e <_strtol_l.isra.0+0xca>
 8005144:	3c57      	subs	r4, #87	; 0x57
 8005146:	e7db      	b.n	8005100 <_strtol_l.isra.0+0x7c>
 8005148:	f04f 36ff 	mov.w	r6, #4294967295
 800514c:	e7e4      	b.n	8005118 <_strtol_l.isra.0+0x94>
 800514e:	2e00      	cmp	r6, #0
 8005150:	da05      	bge.n	800515e <_strtol_l.isra.0+0xda>
 8005152:	2322      	movs	r3, #34	; 0x22
 8005154:	6003      	str	r3, [r0, #0]
 8005156:	4665      	mov	r5, ip
 8005158:	b942      	cbnz	r2, 800516c <_strtol_l.isra.0+0xe8>
 800515a:	4628      	mov	r0, r5
 800515c:	e79d      	b.n	800509a <_strtol_l.isra.0+0x16>
 800515e:	f1b8 0f00 	cmp.w	r8, #0
 8005162:	d000      	beq.n	8005166 <_strtol_l.isra.0+0xe2>
 8005164:	426d      	negs	r5, r5
 8005166:	2a00      	cmp	r2, #0
 8005168:	d0f7      	beq.n	800515a <_strtol_l.isra.0+0xd6>
 800516a:	b10e      	cbz	r6, 8005170 <_strtol_l.isra.0+0xec>
 800516c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005170:	6011      	str	r1, [r2, #0]
 8005172:	e7f2      	b.n	800515a <_strtol_l.isra.0+0xd6>
 8005174:	2430      	movs	r4, #48	; 0x30
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1b3      	bne.n	80050e2 <_strtol_l.isra.0+0x5e>
 800517a:	2308      	movs	r3, #8
 800517c:	e7b1      	b.n	80050e2 <_strtol_l.isra.0+0x5e>
 800517e:	2c30      	cmp	r4, #48	; 0x30
 8005180:	d0a4      	beq.n	80050cc <_strtol_l.isra.0+0x48>
 8005182:	230a      	movs	r3, #10
 8005184:	e7ad      	b.n	80050e2 <_strtol_l.isra.0+0x5e>
 8005186:	bf00      	nop
 8005188:	08018ca5 	.word	0x08018ca5

0800518c <strtol>:
 800518c:	4613      	mov	r3, r2
 800518e:	460a      	mov	r2, r1
 8005190:	4601      	mov	r1, r0
 8005192:	4802      	ldr	r0, [pc, #8]	; (800519c <strtol+0x10>)
 8005194:	6800      	ldr	r0, [r0, #0]
 8005196:	f7ff bf75 	b.w	8005084 <_strtol_l.isra.0>
 800519a:	bf00      	nop
 800519c:	2000000c 	.word	0x2000000c

080051a0 <__assert_func>:
 80051a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051a2:	4614      	mov	r4, r2
 80051a4:	461a      	mov	r2, r3
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <__assert_func+0x2c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4605      	mov	r5, r0
 80051ac:	68d8      	ldr	r0, [r3, #12]
 80051ae:	b14c      	cbz	r4, 80051c4 <__assert_func+0x24>
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <__assert_func+0x30>)
 80051b2:	9100      	str	r1, [sp, #0]
 80051b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051b8:	4906      	ldr	r1, [pc, #24]	; (80051d4 <__assert_func+0x34>)
 80051ba:	462b      	mov	r3, r5
 80051bc:	f000 f80e 	bl	80051dc <fiprintf>
 80051c0:	f000 fdea 	bl	8005d98 <abort>
 80051c4:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <__assert_func+0x38>)
 80051c6:	461c      	mov	r4, r3
 80051c8:	e7f3      	b.n	80051b2 <__assert_func+0x12>
 80051ca:	bf00      	nop
 80051cc:	2000000c 	.word	0x2000000c
 80051d0:	08018c68 	.word	0x08018c68
 80051d4:	08018c75 	.word	0x08018c75
 80051d8:	08018ca3 	.word	0x08018ca3

080051dc <fiprintf>:
 80051dc:	b40e      	push	{r1, r2, r3}
 80051de:	b503      	push	{r0, r1, lr}
 80051e0:	4601      	mov	r1, r0
 80051e2:	ab03      	add	r3, sp, #12
 80051e4:	4805      	ldr	r0, [pc, #20]	; (80051fc <fiprintf+0x20>)
 80051e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ea:	6800      	ldr	r0, [r0, #0]
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	f000 fa3f 	bl	8005670 <_vfiprintf_r>
 80051f2:	b002      	add	sp, #8
 80051f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f8:	b003      	add	sp, #12
 80051fa:	4770      	bx	lr
 80051fc:	2000000c 	.word	0x2000000c

08005200 <malloc>:
 8005200:	4b02      	ldr	r3, [pc, #8]	; (800520c <malloc+0xc>)
 8005202:	4601      	mov	r1, r0
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	f000 b853 	b.w	80052b0 <_malloc_r>
 800520a:	bf00      	nop
 800520c:	2000000c 	.word	0x2000000c

08005210 <_free_r>:
 8005210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005212:	2900      	cmp	r1, #0
 8005214:	d048      	beq.n	80052a8 <_free_r+0x98>
 8005216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521a:	9001      	str	r0, [sp, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f1a1 0404 	sub.w	r4, r1, #4
 8005222:	bfb8      	it	lt
 8005224:	18e4      	addlt	r4, r4, r3
 8005226:	f001 f805 	bl	8006234 <__malloc_lock>
 800522a:	4a20      	ldr	r2, [pc, #128]	; (80052ac <_free_r+0x9c>)
 800522c:	9801      	ldr	r0, [sp, #4]
 800522e:	6813      	ldr	r3, [r2, #0]
 8005230:	4615      	mov	r5, r2
 8005232:	b933      	cbnz	r3, 8005242 <_free_r+0x32>
 8005234:	6063      	str	r3, [r4, #4]
 8005236:	6014      	str	r4, [r2, #0]
 8005238:	b003      	add	sp, #12
 800523a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800523e:	f000 bfff 	b.w	8006240 <__malloc_unlock>
 8005242:	42a3      	cmp	r3, r4
 8005244:	d90b      	bls.n	800525e <_free_r+0x4e>
 8005246:	6821      	ldr	r1, [r4, #0]
 8005248:	1862      	adds	r2, r4, r1
 800524a:	4293      	cmp	r3, r2
 800524c:	bf04      	itt	eq
 800524e:	681a      	ldreq	r2, [r3, #0]
 8005250:	685b      	ldreq	r3, [r3, #4]
 8005252:	6063      	str	r3, [r4, #4]
 8005254:	bf04      	itt	eq
 8005256:	1852      	addeq	r2, r2, r1
 8005258:	6022      	streq	r2, [r4, #0]
 800525a:	602c      	str	r4, [r5, #0]
 800525c:	e7ec      	b.n	8005238 <_free_r+0x28>
 800525e:	461a      	mov	r2, r3
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	b10b      	cbz	r3, 8005268 <_free_r+0x58>
 8005264:	42a3      	cmp	r3, r4
 8005266:	d9fa      	bls.n	800525e <_free_r+0x4e>
 8005268:	6811      	ldr	r1, [r2, #0]
 800526a:	1855      	adds	r5, r2, r1
 800526c:	42a5      	cmp	r5, r4
 800526e:	d10b      	bne.n	8005288 <_free_r+0x78>
 8005270:	6824      	ldr	r4, [r4, #0]
 8005272:	4421      	add	r1, r4
 8005274:	1854      	adds	r4, r2, r1
 8005276:	42a3      	cmp	r3, r4
 8005278:	6011      	str	r1, [r2, #0]
 800527a:	d1dd      	bne.n	8005238 <_free_r+0x28>
 800527c:	681c      	ldr	r4, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	6053      	str	r3, [r2, #4]
 8005282:	4421      	add	r1, r4
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	e7d7      	b.n	8005238 <_free_r+0x28>
 8005288:	d902      	bls.n	8005290 <_free_r+0x80>
 800528a:	230c      	movs	r3, #12
 800528c:	6003      	str	r3, [r0, #0]
 800528e:	e7d3      	b.n	8005238 <_free_r+0x28>
 8005290:	6825      	ldr	r5, [r4, #0]
 8005292:	1961      	adds	r1, r4, r5
 8005294:	428b      	cmp	r3, r1
 8005296:	bf04      	itt	eq
 8005298:	6819      	ldreq	r1, [r3, #0]
 800529a:	685b      	ldreq	r3, [r3, #4]
 800529c:	6063      	str	r3, [r4, #4]
 800529e:	bf04      	itt	eq
 80052a0:	1949      	addeq	r1, r1, r5
 80052a2:	6021      	streq	r1, [r4, #0]
 80052a4:	6054      	str	r4, [r2, #4]
 80052a6:	e7c7      	b.n	8005238 <_free_r+0x28>
 80052a8:	b003      	add	sp, #12
 80052aa:	bd30      	pop	{r4, r5, pc}
 80052ac:	20000090 	.word	0x20000090

080052b0 <_malloc_r>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	1ccd      	adds	r5, r1, #3
 80052b4:	f025 0503 	bic.w	r5, r5, #3
 80052b8:	3508      	adds	r5, #8
 80052ba:	2d0c      	cmp	r5, #12
 80052bc:	bf38      	it	cc
 80052be:	250c      	movcc	r5, #12
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	4606      	mov	r6, r0
 80052c4:	db01      	blt.n	80052ca <_malloc_r+0x1a>
 80052c6:	42a9      	cmp	r1, r5
 80052c8:	d903      	bls.n	80052d2 <_malloc_r+0x22>
 80052ca:	230c      	movs	r3, #12
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	2000      	movs	r0, #0
 80052d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d2:	f000 ffaf 	bl	8006234 <__malloc_lock>
 80052d6:	4921      	ldr	r1, [pc, #132]	; (800535c <_malloc_r+0xac>)
 80052d8:	680a      	ldr	r2, [r1, #0]
 80052da:	4614      	mov	r4, r2
 80052dc:	b99c      	cbnz	r4, 8005306 <_malloc_r+0x56>
 80052de:	4f20      	ldr	r7, [pc, #128]	; (8005360 <_malloc_r+0xb0>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	b923      	cbnz	r3, 80052ee <_malloc_r+0x3e>
 80052e4:	4621      	mov	r1, r4
 80052e6:	4630      	mov	r0, r6
 80052e8:	f000 fc86 	bl	8005bf8 <_sbrk_r>
 80052ec:	6038      	str	r0, [r7, #0]
 80052ee:	4629      	mov	r1, r5
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 fc81 	bl	8005bf8 <_sbrk_r>
 80052f6:	1c43      	adds	r3, r0, #1
 80052f8:	d123      	bne.n	8005342 <_malloc_r+0x92>
 80052fa:	230c      	movs	r3, #12
 80052fc:	6033      	str	r3, [r6, #0]
 80052fe:	4630      	mov	r0, r6
 8005300:	f000 ff9e 	bl	8006240 <__malloc_unlock>
 8005304:	e7e3      	b.n	80052ce <_malloc_r+0x1e>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	1b5b      	subs	r3, r3, r5
 800530a:	d417      	bmi.n	800533c <_malloc_r+0x8c>
 800530c:	2b0b      	cmp	r3, #11
 800530e:	d903      	bls.n	8005318 <_malloc_r+0x68>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	441c      	add	r4, r3
 8005314:	6025      	str	r5, [r4, #0]
 8005316:	e004      	b.n	8005322 <_malloc_r+0x72>
 8005318:	6863      	ldr	r3, [r4, #4]
 800531a:	42a2      	cmp	r2, r4
 800531c:	bf0c      	ite	eq
 800531e:	600b      	streq	r3, [r1, #0]
 8005320:	6053      	strne	r3, [r2, #4]
 8005322:	4630      	mov	r0, r6
 8005324:	f000 ff8c 	bl	8006240 <__malloc_unlock>
 8005328:	f104 000b 	add.w	r0, r4, #11
 800532c:	1d23      	adds	r3, r4, #4
 800532e:	f020 0007 	bic.w	r0, r0, #7
 8005332:	1ac2      	subs	r2, r0, r3
 8005334:	d0cc      	beq.n	80052d0 <_malloc_r+0x20>
 8005336:	1a1b      	subs	r3, r3, r0
 8005338:	50a3      	str	r3, [r4, r2]
 800533a:	e7c9      	b.n	80052d0 <_malloc_r+0x20>
 800533c:	4622      	mov	r2, r4
 800533e:	6864      	ldr	r4, [r4, #4]
 8005340:	e7cc      	b.n	80052dc <_malloc_r+0x2c>
 8005342:	1cc4      	adds	r4, r0, #3
 8005344:	f024 0403 	bic.w	r4, r4, #3
 8005348:	42a0      	cmp	r0, r4
 800534a:	d0e3      	beq.n	8005314 <_malloc_r+0x64>
 800534c:	1a21      	subs	r1, r4, r0
 800534e:	4630      	mov	r0, r6
 8005350:	f000 fc52 	bl	8005bf8 <_sbrk_r>
 8005354:	3001      	adds	r0, #1
 8005356:	d1dd      	bne.n	8005314 <_malloc_r+0x64>
 8005358:	e7cf      	b.n	80052fa <_malloc_r+0x4a>
 800535a:	bf00      	nop
 800535c:	20000090 	.word	0x20000090
 8005360:	20000094 	.word	0x20000094

08005364 <__ssputs_r>:
 8005364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	688e      	ldr	r6, [r1, #8]
 800536a:	429e      	cmp	r6, r3
 800536c:	4682      	mov	sl, r0
 800536e:	460c      	mov	r4, r1
 8005370:	4690      	mov	r8, r2
 8005372:	461f      	mov	r7, r3
 8005374:	d838      	bhi.n	80053e8 <__ssputs_r+0x84>
 8005376:	898a      	ldrh	r2, [r1, #12]
 8005378:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800537c:	d032      	beq.n	80053e4 <__ssputs_r+0x80>
 800537e:	6825      	ldr	r5, [r4, #0]
 8005380:	6909      	ldr	r1, [r1, #16]
 8005382:	eba5 0901 	sub.w	r9, r5, r1
 8005386:	6965      	ldr	r5, [r4, #20]
 8005388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800538c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005390:	3301      	adds	r3, #1
 8005392:	444b      	add	r3, r9
 8005394:	106d      	asrs	r5, r5, #1
 8005396:	429d      	cmp	r5, r3
 8005398:	bf38      	it	cc
 800539a:	461d      	movcc	r5, r3
 800539c:	0553      	lsls	r3, r2, #21
 800539e:	d531      	bpl.n	8005404 <__ssputs_r+0xa0>
 80053a0:	4629      	mov	r1, r5
 80053a2:	f7ff ff85 	bl	80052b0 <_malloc_r>
 80053a6:	4606      	mov	r6, r0
 80053a8:	b950      	cbnz	r0, 80053c0 <__ssputs_r+0x5c>
 80053aa:	230c      	movs	r3, #12
 80053ac:	f8ca 3000 	str.w	r3, [sl]
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c0:	6921      	ldr	r1, [r4, #16]
 80053c2:	464a      	mov	r2, r9
 80053c4:	f000 ff0e 	bl	80061e4 <memcpy>
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d2:	81a3      	strh	r3, [r4, #12]
 80053d4:	6126      	str	r6, [r4, #16]
 80053d6:	6165      	str	r5, [r4, #20]
 80053d8:	444e      	add	r6, r9
 80053da:	eba5 0509 	sub.w	r5, r5, r9
 80053de:	6026      	str	r6, [r4, #0]
 80053e0:	60a5      	str	r5, [r4, #8]
 80053e2:	463e      	mov	r6, r7
 80053e4:	42be      	cmp	r6, r7
 80053e6:	d900      	bls.n	80053ea <__ssputs_r+0x86>
 80053e8:	463e      	mov	r6, r7
 80053ea:	4632      	mov	r2, r6
 80053ec:	6820      	ldr	r0, [r4, #0]
 80053ee:	4641      	mov	r1, r8
 80053f0:	f000 ff06 	bl	8006200 <memmove>
 80053f4:	68a3      	ldr	r3, [r4, #8]
 80053f6:	6822      	ldr	r2, [r4, #0]
 80053f8:	1b9b      	subs	r3, r3, r6
 80053fa:	4432      	add	r2, r6
 80053fc:	60a3      	str	r3, [r4, #8]
 80053fe:	6022      	str	r2, [r4, #0]
 8005400:	2000      	movs	r0, #0
 8005402:	e7db      	b.n	80053bc <__ssputs_r+0x58>
 8005404:	462a      	mov	r2, r5
 8005406:	f000 ff21 	bl	800624c <_realloc_r>
 800540a:	4606      	mov	r6, r0
 800540c:	2800      	cmp	r0, #0
 800540e:	d1e1      	bne.n	80053d4 <__ssputs_r+0x70>
 8005410:	6921      	ldr	r1, [r4, #16]
 8005412:	4650      	mov	r0, sl
 8005414:	f7ff fefc 	bl	8005210 <_free_r>
 8005418:	e7c7      	b.n	80053aa <__ssputs_r+0x46>
	...

0800541c <_svfiprintf_r>:
 800541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	4698      	mov	r8, r3
 8005422:	898b      	ldrh	r3, [r1, #12]
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	b09d      	sub	sp, #116	; 0x74
 8005428:	4607      	mov	r7, r0
 800542a:	460d      	mov	r5, r1
 800542c:	4614      	mov	r4, r2
 800542e:	d50e      	bpl.n	800544e <_svfiprintf_r+0x32>
 8005430:	690b      	ldr	r3, [r1, #16]
 8005432:	b963      	cbnz	r3, 800544e <_svfiprintf_r+0x32>
 8005434:	2140      	movs	r1, #64	; 0x40
 8005436:	f7ff ff3b 	bl	80052b0 <_malloc_r>
 800543a:	6028      	str	r0, [r5, #0]
 800543c:	6128      	str	r0, [r5, #16]
 800543e:	b920      	cbnz	r0, 800544a <_svfiprintf_r+0x2e>
 8005440:	230c      	movs	r3, #12
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	f04f 30ff 	mov.w	r0, #4294967295
 8005448:	e0d1      	b.n	80055ee <_svfiprintf_r+0x1d2>
 800544a:	2340      	movs	r3, #64	; 0x40
 800544c:	616b      	str	r3, [r5, #20]
 800544e:	2300      	movs	r3, #0
 8005450:	9309      	str	r3, [sp, #36]	; 0x24
 8005452:	2320      	movs	r3, #32
 8005454:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005458:	f8cd 800c 	str.w	r8, [sp, #12]
 800545c:	2330      	movs	r3, #48	; 0x30
 800545e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005608 <_svfiprintf_r+0x1ec>
 8005462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005466:	f04f 0901 	mov.w	r9, #1
 800546a:	4623      	mov	r3, r4
 800546c:	469a      	mov	sl, r3
 800546e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005472:	b10a      	cbz	r2, 8005478 <_svfiprintf_r+0x5c>
 8005474:	2a25      	cmp	r2, #37	; 0x25
 8005476:	d1f9      	bne.n	800546c <_svfiprintf_r+0x50>
 8005478:	ebba 0b04 	subs.w	fp, sl, r4
 800547c:	d00b      	beq.n	8005496 <_svfiprintf_r+0x7a>
 800547e:	465b      	mov	r3, fp
 8005480:	4622      	mov	r2, r4
 8005482:	4629      	mov	r1, r5
 8005484:	4638      	mov	r0, r7
 8005486:	f7ff ff6d 	bl	8005364 <__ssputs_r>
 800548a:	3001      	adds	r0, #1
 800548c:	f000 80aa 	beq.w	80055e4 <_svfiprintf_r+0x1c8>
 8005490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005492:	445a      	add	r2, fp
 8005494:	9209      	str	r2, [sp, #36]	; 0x24
 8005496:	f89a 3000 	ldrb.w	r3, [sl]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 80a2 	beq.w	80055e4 <_svfiprintf_r+0x1c8>
 80054a0:	2300      	movs	r3, #0
 80054a2:	f04f 32ff 	mov.w	r2, #4294967295
 80054a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054aa:	f10a 0a01 	add.w	sl, sl, #1
 80054ae:	9304      	str	r3, [sp, #16]
 80054b0:	9307      	str	r3, [sp, #28]
 80054b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054b6:	931a      	str	r3, [sp, #104]	; 0x68
 80054b8:	4654      	mov	r4, sl
 80054ba:	2205      	movs	r2, #5
 80054bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c0:	4851      	ldr	r0, [pc, #324]	; (8005608 <_svfiprintf_r+0x1ec>)
 80054c2:	f7fa fea5 	bl	8000210 <memchr>
 80054c6:	9a04      	ldr	r2, [sp, #16]
 80054c8:	b9d8      	cbnz	r0, 8005502 <_svfiprintf_r+0xe6>
 80054ca:	06d0      	lsls	r0, r2, #27
 80054cc:	bf44      	itt	mi
 80054ce:	2320      	movmi	r3, #32
 80054d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054d4:	0711      	lsls	r1, r2, #28
 80054d6:	bf44      	itt	mi
 80054d8:	232b      	movmi	r3, #43	; 0x2b
 80054da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054de:	f89a 3000 	ldrb.w	r3, [sl]
 80054e2:	2b2a      	cmp	r3, #42	; 0x2a
 80054e4:	d015      	beq.n	8005512 <_svfiprintf_r+0xf6>
 80054e6:	9a07      	ldr	r2, [sp, #28]
 80054e8:	4654      	mov	r4, sl
 80054ea:	2000      	movs	r0, #0
 80054ec:	f04f 0c0a 	mov.w	ip, #10
 80054f0:	4621      	mov	r1, r4
 80054f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054f6:	3b30      	subs	r3, #48	; 0x30
 80054f8:	2b09      	cmp	r3, #9
 80054fa:	d94e      	bls.n	800559a <_svfiprintf_r+0x17e>
 80054fc:	b1b0      	cbz	r0, 800552c <_svfiprintf_r+0x110>
 80054fe:	9207      	str	r2, [sp, #28]
 8005500:	e014      	b.n	800552c <_svfiprintf_r+0x110>
 8005502:	eba0 0308 	sub.w	r3, r0, r8
 8005506:	fa09 f303 	lsl.w	r3, r9, r3
 800550a:	4313      	orrs	r3, r2
 800550c:	9304      	str	r3, [sp, #16]
 800550e:	46a2      	mov	sl, r4
 8005510:	e7d2      	b.n	80054b8 <_svfiprintf_r+0x9c>
 8005512:	9b03      	ldr	r3, [sp, #12]
 8005514:	1d19      	adds	r1, r3, #4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	9103      	str	r1, [sp, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	bfbb      	ittet	lt
 800551e:	425b      	neglt	r3, r3
 8005520:	f042 0202 	orrlt.w	r2, r2, #2
 8005524:	9307      	strge	r3, [sp, #28]
 8005526:	9307      	strlt	r3, [sp, #28]
 8005528:	bfb8      	it	lt
 800552a:	9204      	strlt	r2, [sp, #16]
 800552c:	7823      	ldrb	r3, [r4, #0]
 800552e:	2b2e      	cmp	r3, #46	; 0x2e
 8005530:	d10c      	bne.n	800554c <_svfiprintf_r+0x130>
 8005532:	7863      	ldrb	r3, [r4, #1]
 8005534:	2b2a      	cmp	r3, #42	; 0x2a
 8005536:	d135      	bne.n	80055a4 <_svfiprintf_r+0x188>
 8005538:	9b03      	ldr	r3, [sp, #12]
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	9203      	str	r2, [sp, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	bfb8      	it	lt
 8005544:	f04f 33ff 	movlt.w	r3, #4294967295
 8005548:	3402      	adds	r4, #2
 800554a:	9305      	str	r3, [sp, #20]
 800554c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005618 <_svfiprintf_r+0x1fc>
 8005550:	7821      	ldrb	r1, [r4, #0]
 8005552:	2203      	movs	r2, #3
 8005554:	4650      	mov	r0, sl
 8005556:	f7fa fe5b 	bl	8000210 <memchr>
 800555a:	b140      	cbz	r0, 800556e <_svfiprintf_r+0x152>
 800555c:	2340      	movs	r3, #64	; 0x40
 800555e:	eba0 000a 	sub.w	r0, r0, sl
 8005562:	fa03 f000 	lsl.w	r0, r3, r0
 8005566:	9b04      	ldr	r3, [sp, #16]
 8005568:	4303      	orrs	r3, r0
 800556a:	3401      	adds	r4, #1
 800556c:	9304      	str	r3, [sp, #16]
 800556e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005572:	4826      	ldr	r0, [pc, #152]	; (800560c <_svfiprintf_r+0x1f0>)
 8005574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005578:	2206      	movs	r2, #6
 800557a:	f7fa fe49 	bl	8000210 <memchr>
 800557e:	2800      	cmp	r0, #0
 8005580:	d038      	beq.n	80055f4 <_svfiprintf_r+0x1d8>
 8005582:	4b23      	ldr	r3, [pc, #140]	; (8005610 <_svfiprintf_r+0x1f4>)
 8005584:	bb1b      	cbnz	r3, 80055ce <_svfiprintf_r+0x1b2>
 8005586:	9b03      	ldr	r3, [sp, #12]
 8005588:	3307      	adds	r3, #7
 800558a:	f023 0307 	bic.w	r3, r3, #7
 800558e:	3308      	adds	r3, #8
 8005590:	9303      	str	r3, [sp, #12]
 8005592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005594:	4433      	add	r3, r6
 8005596:	9309      	str	r3, [sp, #36]	; 0x24
 8005598:	e767      	b.n	800546a <_svfiprintf_r+0x4e>
 800559a:	fb0c 3202 	mla	r2, ip, r2, r3
 800559e:	460c      	mov	r4, r1
 80055a0:	2001      	movs	r0, #1
 80055a2:	e7a5      	b.n	80054f0 <_svfiprintf_r+0xd4>
 80055a4:	2300      	movs	r3, #0
 80055a6:	3401      	adds	r4, #1
 80055a8:	9305      	str	r3, [sp, #20]
 80055aa:	4619      	mov	r1, r3
 80055ac:	f04f 0c0a 	mov.w	ip, #10
 80055b0:	4620      	mov	r0, r4
 80055b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055b6:	3a30      	subs	r2, #48	; 0x30
 80055b8:	2a09      	cmp	r2, #9
 80055ba:	d903      	bls.n	80055c4 <_svfiprintf_r+0x1a8>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0c5      	beq.n	800554c <_svfiprintf_r+0x130>
 80055c0:	9105      	str	r1, [sp, #20]
 80055c2:	e7c3      	b.n	800554c <_svfiprintf_r+0x130>
 80055c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80055c8:	4604      	mov	r4, r0
 80055ca:	2301      	movs	r3, #1
 80055cc:	e7f0      	b.n	80055b0 <_svfiprintf_r+0x194>
 80055ce:	ab03      	add	r3, sp, #12
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	462a      	mov	r2, r5
 80055d4:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <_svfiprintf_r+0x1f8>)
 80055d6:	a904      	add	r1, sp, #16
 80055d8:	4638      	mov	r0, r7
 80055da:	f3af 8000 	nop.w
 80055de:	1c42      	adds	r2, r0, #1
 80055e0:	4606      	mov	r6, r0
 80055e2:	d1d6      	bne.n	8005592 <_svfiprintf_r+0x176>
 80055e4:	89ab      	ldrh	r3, [r5, #12]
 80055e6:	065b      	lsls	r3, r3, #25
 80055e8:	f53f af2c 	bmi.w	8005444 <_svfiprintf_r+0x28>
 80055ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ee:	b01d      	add	sp, #116	; 0x74
 80055f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f4:	ab03      	add	r3, sp, #12
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	462a      	mov	r2, r5
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <_svfiprintf_r+0x1f8>)
 80055fc:	a904      	add	r1, sp, #16
 80055fe:	4638      	mov	r0, r7
 8005600:	f000 f9d4 	bl	80059ac <_printf_i>
 8005604:	e7eb      	b.n	80055de <_svfiprintf_r+0x1c2>
 8005606:	bf00      	nop
 8005608:	08018da5 	.word	0x08018da5
 800560c:	08018daf 	.word	0x08018daf
 8005610:	00000000 	.word	0x00000000
 8005614:	08005365 	.word	0x08005365
 8005618:	08018dab 	.word	0x08018dab

0800561c <__sfputc_r>:
 800561c:	6893      	ldr	r3, [r2, #8]
 800561e:	3b01      	subs	r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	b410      	push	{r4}
 8005624:	6093      	str	r3, [r2, #8]
 8005626:	da08      	bge.n	800563a <__sfputc_r+0x1e>
 8005628:	6994      	ldr	r4, [r2, #24]
 800562a:	42a3      	cmp	r3, r4
 800562c:	db01      	blt.n	8005632 <__sfputc_r+0x16>
 800562e:	290a      	cmp	r1, #10
 8005630:	d103      	bne.n	800563a <__sfputc_r+0x1e>
 8005632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005636:	f000 baef 	b.w	8005c18 <__swbuf_r>
 800563a:	6813      	ldr	r3, [r2, #0]
 800563c:	1c58      	adds	r0, r3, #1
 800563e:	6010      	str	r0, [r2, #0]
 8005640:	7019      	strb	r1, [r3, #0]
 8005642:	4608      	mov	r0, r1
 8005644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005648:	4770      	bx	lr

0800564a <__sfputs_r>:
 800564a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564c:	4606      	mov	r6, r0
 800564e:	460f      	mov	r7, r1
 8005650:	4614      	mov	r4, r2
 8005652:	18d5      	adds	r5, r2, r3
 8005654:	42ac      	cmp	r4, r5
 8005656:	d101      	bne.n	800565c <__sfputs_r+0x12>
 8005658:	2000      	movs	r0, #0
 800565a:	e007      	b.n	800566c <__sfputs_r+0x22>
 800565c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005660:	463a      	mov	r2, r7
 8005662:	4630      	mov	r0, r6
 8005664:	f7ff ffda 	bl	800561c <__sfputc_r>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d1f3      	bne.n	8005654 <__sfputs_r+0xa>
 800566c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005670 <_vfiprintf_r>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	460d      	mov	r5, r1
 8005676:	b09d      	sub	sp, #116	; 0x74
 8005678:	4614      	mov	r4, r2
 800567a:	4698      	mov	r8, r3
 800567c:	4606      	mov	r6, r0
 800567e:	b118      	cbz	r0, 8005688 <_vfiprintf_r+0x18>
 8005680:	6983      	ldr	r3, [r0, #24]
 8005682:	b90b      	cbnz	r3, 8005688 <_vfiprintf_r+0x18>
 8005684:	f000 fcaa 	bl	8005fdc <__sinit>
 8005688:	4b89      	ldr	r3, [pc, #548]	; (80058b0 <_vfiprintf_r+0x240>)
 800568a:	429d      	cmp	r5, r3
 800568c:	d11b      	bne.n	80056c6 <_vfiprintf_r+0x56>
 800568e:	6875      	ldr	r5, [r6, #4]
 8005690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005692:	07d9      	lsls	r1, r3, #31
 8005694:	d405      	bmi.n	80056a2 <_vfiprintf_r+0x32>
 8005696:	89ab      	ldrh	r3, [r5, #12]
 8005698:	059a      	lsls	r2, r3, #22
 800569a:	d402      	bmi.n	80056a2 <_vfiprintf_r+0x32>
 800569c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800569e:	f000 fd3b 	bl	8006118 <__retarget_lock_acquire_recursive>
 80056a2:	89ab      	ldrh	r3, [r5, #12]
 80056a4:	071b      	lsls	r3, r3, #28
 80056a6:	d501      	bpl.n	80056ac <_vfiprintf_r+0x3c>
 80056a8:	692b      	ldr	r3, [r5, #16]
 80056aa:	b9eb      	cbnz	r3, 80056e8 <_vfiprintf_r+0x78>
 80056ac:	4629      	mov	r1, r5
 80056ae:	4630      	mov	r0, r6
 80056b0:	f000 fb04 	bl	8005cbc <__swsetup_r>
 80056b4:	b1c0      	cbz	r0, 80056e8 <_vfiprintf_r+0x78>
 80056b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056b8:	07dc      	lsls	r4, r3, #31
 80056ba:	d50e      	bpl.n	80056da <_vfiprintf_r+0x6a>
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	b01d      	add	sp, #116	; 0x74
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c6:	4b7b      	ldr	r3, [pc, #492]	; (80058b4 <_vfiprintf_r+0x244>)
 80056c8:	429d      	cmp	r5, r3
 80056ca:	d101      	bne.n	80056d0 <_vfiprintf_r+0x60>
 80056cc:	68b5      	ldr	r5, [r6, #8]
 80056ce:	e7df      	b.n	8005690 <_vfiprintf_r+0x20>
 80056d0:	4b79      	ldr	r3, [pc, #484]	; (80058b8 <_vfiprintf_r+0x248>)
 80056d2:	429d      	cmp	r5, r3
 80056d4:	bf08      	it	eq
 80056d6:	68f5      	ldreq	r5, [r6, #12]
 80056d8:	e7da      	b.n	8005690 <_vfiprintf_r+0x20>
 80056da:	89ab      	ldrh	r3, [r5, #12]
 80056dc:	0598      	lsls	r0, r3, #22
 80056de:	d4ed      	bmi.n	80056bc <_vfiprintf_r+0x4c>
 80056e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056e2:	f000 fd1a 	bl	800611a <__retarget_lock_release_recursive>
 80056e6:	e7e9      	b.n	80056bc <_vfiprintf_r+0x4c>
 80056e8:	2300      	movs	r3, #0
 80056ea:	9309      	str	r3, [sp, #36]	; 0x24
 80056ec:	2320      	movs	r3, #32
 80056ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056f6:	2330      	movs	r3, #48	; 0x30
 80056f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058bc <_vfiprintf_r+0x24c>
 80056fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005700:	f04f 0901 	mov.w	r9, #1
 8005704:	4623      	mov	r3, r4
 8005706:	469a      	mov	sl, r3
 8005708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800570c:	b10a      	cbz	r2, 8005712 <_vfiprintf_r+0xa2>
 800570e:	2a25      	cmp	r2, #37	; 0x25
 8005710:	d1f9      	bne.n	8005706 <_vfiprintf_r+0x96>
 8005712:	ebba 0b04 	subs.w	fp, sl, r4
 8005716:	d00b      	beq.n	8005730 <_vfiprintf_r+0xc0>
 8005718:	465b      	mov	r3, fp
 800571a:	4622      	mov	r2, r4
 800571c:	4629      	mov	r1, r5
 800571e:	4630      	mov	r0, r6
 8005720:	f7ff ff93 	bl	800564a <__sfputs_r>
 8005724:	3001      	adds	r0, #1
 8005726:	f000 80aa 	beq.w	800587e <_vfiprintf_r+0x20e>
 800572a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800572c:	445a      	add	r2, fp
 800572e:	9209      	str	r2, [sp, #36]	; 0x24
 8005730:	f89a 3000 	ldrb.w	r3, [sl]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80a2 	beq.w	800587e <_vfiprintf_r+0x20e>
 800573a:	2300      	movs	r3, #0
 800573c:	f04f 32ff 	mov.w	r2, #4294967295
 8005740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005744:	f10a 0a01 	add.w	sl, sl, #1
 8005748:	9304      	str	r3, [sp, #16]
 800574a:	9307      	str	r3, [sp, #28]
 800574c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005750:	931a      	str	r3, [sp, #104]	; 0x68
 8005752:	4654      	mov	r4, sl
 8005754:	2205      	movs	r2, #5
 8005756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800575a:	4858      	ldr	r0, [pc, #352]	; (80058bc <_vfiprintf_r+0x24c>)
 800575c:	f7fa fd58 	bl	8000210 <memchr>
 8005760:	9a04      	ldr	r2, [sp, #16]
 8005762:	b9d8      	cbnz	r0, 800579c <_vfiprintf_r+0x12c>
 8005764:	06d1      	lsls	r1, r2, #27
 8005766:	bf44      	itt	mi
 8005768:	2320      	movmi	r3, #32
 800576a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800576e:	0713      	lsls	r3, r2, #28
 8005770:	bf44      	itt	mi
 8005772:	232b      	movmi	r3, #43	; 0x2b
 8005774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005778:	f89a 3000 	ldrb.w	r3, [sl]
 800577c:	2b2a      	cmp	r3, #42	; 0x2a
 800577e:	d015      	beq.n	80057ac <_vfiprintf_r+0x13c>
 8005780:	9a07      	ldr	r2, [sp, #28]
 8005782:	4654      	mov	r4, sl
 8005784:	2000      	movs	r0, #0
 8005786:	f04f 0c0a 	mov.w	ip, #10
 800578a:	4621      	mov	r1, r4
 800578c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005790:	3b30      	subs	r3, #48	; 0x30
 8005792:	2b09      	cmp	r3, #9
 8005794:	d94e      	bls.n	8005834 <_vfiprintf_r+0x1c4>
 8005796:	b1b0      	cbz	r0, 80057c6 <_vfiprintf_r+0x156>
 8005798:	9207      	str	r2, [sp, #28]
 800579a:	e014      	b.n	80057c6 <_vfiprintf_r+0x156>
 800579c:	eba0 0308 	sub.w	r3, r0, r8
 80057a0:	fa09 f303 	lsl.w	r3, r9, r3
 80057a4:	4313      	orrs	r3, r2
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	46a2      	mov	sl, r4
 80057aa:	e7d2      	b.n	8005752 <_vfiprintf_r+0xe2>
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	1d19      	adds	r1, r3, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	9103      	str	r1, [sp, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bfbb      	ittet	lt
 80057b8:	425b      	neglt	r3, r3
 80057ba:	f042 0202 	orrlt.w	r2, r2, #2
 80057be:	9307      	strge	r3, [sp, #28]
 80057c0:	9307      	strlt	r3, [sp, #28]
 80057c2:	bfb8      	it	lt
 80057c4:	9204      	strlt	r2, [sp, #16]
 80057c6:	7823      	ldrb	r3, [r4, #0]
 80057c8:	2b2e      	cmp	r3, #46	; 0x2e
 80057ca:	d10c      	bne.n	80057e6 <_vfiprintf_r+0x176>
 80057cc:	7863      	ldrb	r3, [r4, #1]
 80057ce:	2b2a      	cmp	r3, #42	; 0x2a
 80057d0:	d135      	bne.n	800583e <_vfiprintf_r+0x1ce>
 80057d2:	9b03      	ldr	r3, [sp, #12]
 80057d4:	1d1a      	adds	r2, r3, #4
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	9203      	str	r2, [sp, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	bfb8      	it	lt
 80057de:	f04f 33ff 	movlt.w	r3, #4294967295
 80057e2:	3402      	adds	r4, #2
 80057e4:	9305      	str	r3, [sp, #20]
 80057e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058cc <_vfiprintf_r+0x25c>
 80057ea:	7821      	ldrb	r1, [r4, #0]
 80057ec:	2203      	movs	r2, #3
 80057ee:	4650      	mov	r0, sl
 80057f0:	f7fa fd0e 	bl	8000210 <memchr>
 80057f4:	b140      	cbz	r0, 8005808 <_vfiprintf_r+0x198>
 80057f6:	2340      	movs	r3, #64	; 0x40
 80057f8:	eba0 000a 	sub.w	r0, r0, sl
 80057fc:	fa03 f000 	lsl.w	r0, r3, r0
 8005800:	9b04      	ldr	r3, [sp, #16]
 8005802:	4303      	orrs	r3, r0
 8005804:	3401      	adds	r4, #1
 8005806:	9304      	str	r3, [sp, #16]
 8005808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800580c:	482c      	ldr	r0, [pc, #176]	; (80058c0 <_vfiprintf_r+0x250>)
 800580e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005812:	2206      	movs	r2, #6
 8005814:	f7fa fcfc 	bl	8000210 <memchr>
 8005818:	2800      	cmp	r0, #0
 800581a:	d03f      	beq.n	800589c <_vfiprintf_r+0x22c>
 800581c:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <_vfiprintf_r+0x254>)
 800581e:	bb1b      	cbnz	r3, 8005868 <_vfiprintf_r+0x1f8>
 8005820:	9b03      	ldr	r3, [sp, #12]
 8005822:	3307      	adds	r3, #7
 8005824:	f023 0307 	bic.w	r3, r3, #7
 8005828:	3308      	adds	r3, #8
 800582a:	9303      	str	r3, [sp, #12]
 800582c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582e:	443b      	add	r3, r7
 8005830:	9309      	str	r3, [sp, #36]	; 0x24
 8005832:	e767      	b.n	8005704 <_vfiprintf_r+0x94>
 8005834:	fb0c 3202 	mla	r2, ip, r2, r3
 8005838:	460c      	mov	r4, r1
 800583a:	2001      	movs	r0, #1
 800583c:	e7a5      	b.n	800578a <_vfiprintf_r+0x11a>
 800583e:	2300      	movs	r3, #0
 8005840:	3401      	adds	r4, #1
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	4619      	mov	r1, r3
 8005846:	f04f 0c0a 	mov.w	ip, #10
 800584a:	4620      	mov	r0, r4
 800584c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005850:	3a30      	subs	r2, #48	; 0x30
 8005852:	2a09      	cmp	r2, #9
 8005854:	d903      	bls.n	800585e <_vfiprintf_r+0x1ee>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0c5      	beq.n	80057e6 <_vfiprintf_r+0x176>
 800585a:	9105      	str	r1, [sp, #20]
 800585c:	e7c3      	b.n	80057e6 <_vfiprintf_r+0x176>
 800585e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005862:	4604      	mov	r4, r0
 8005864:	2301      	movs	r3, #1
 8005866:	e7f0      	b.n	800584a <_vfiprintf_r+0x1da>
 8005868:	ab03      	add	r3, sp, #12
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	462a      	mov	r2, r5
 800586e:	4b16      	ldr	r3, [pc, #88]	; (80058c8 <_vfiprintf_r+0x258>)
 8005870:	a904      	add	r1, sp, #16
 8005872:	4630      	mov	r0, r6
 8005874:	f3af 8000 	nop.w
 8005878:	4607      	mov	r7, r0
 800587a:	1c78      	adds	r0, r7, #1
 800587c:	d1d6      	bne.n	800582c <_vfiprintf_r+0x1bc>
 800587e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005880:	07d9      	lsls	r1, r3, #31
 8005882:	d405      	bmi.n	8005890 <_vfiprintf_r+0x220>
 8005884:	89ab      	ldrh	r3, [r5, #12]
 8005886:	059a      	lsls	r2, r3, #22
 8005888:	d402      	bmi.n	8005890 <_vfiprintf_r+0x220>
 800588a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800588c:	f000 fc45 	bl	800611a <__retarget_lock_release_recursive>
 8005890:	89ab      	ldrh	r3, [r5, #12]
 8005892:	065b      	lsls	r3, r3, #25
 8005894:	f53f af12 	bmi.w	80056bc <_vfiprintf_r+0x4c>
 8005898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800589a:	e711      	b.n	80056c0 <_vfiprintf_r+0x50>
 800589c:	ab03      	add	r3, sp, #12
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	462a      	mov	r2, r5
 80058a2:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <_vfiprintf_r+0x258>)
 80058a4:	a904      	add	r1, sp, #16
 80058a6:	4630      	mov	r0, r6
 80058a8:	f000 f880 	bl	80059ac <_printf_i>
 80058ac:	e7e4      	b.n	8005878 <_vfiprintf_r+0x208>
 80058ae:	bf00      	nop
 80058b0:	08018df8 	.word	0x08018df8
 80058b4:	08018e18 	.word	0x08018e18
 80058b8:	08018dd8 	.word	0x08018dd8
 80058bc:	08018da5 	.word	0x08018da5
 80058c0:	08018daf 	.word	0x08018daf
 80058c4:	00000000 	.word	0x00000000
 80058c8:	0800564b 	.word	0x0800564b
 80058cc:	08018dab 	.word	0x08018dab

080058d0 <_printf_common>:
 80058d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	4616      	mov	r6, r2
 80058d6:	4699      	mov	r9, r3
 80058d8:	688a      	ldr	r2, [r1, #8]
 80058da:	690b      	ldr	r3, [r1, #16]
 80058dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058e0:	4293      	cmp	r3, r2
 80058e2:	bfb8      	it	lt
 80058e4:	4613      	movlt	r3, r2
 80058e6:	6033      	str	r3, [r6, #0]
 80058e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058ec:	4607      	mov	r7, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	b10a      	cbz	r2, 80058f6 <_printf_common+0x26>
 80058f2:	3301      	adds	r3, #1
 80058f4:	6033      	str	r3, [r6, #0]
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	0699      	lsls	r1, r3, #26
 80058fa:	bf42      	ittt	mi
 80058fc:	6833      	ldrmi	r3, [r6, #0]
 80058fe:	3302      	addmi	r3, #2
 8005900:	6033      	strmi	r3, [r6, #0]
 8005902:	6825      	ldr	r5, [r4, #0]
 8005904:	f015 0506 	ands.w	r5, r5, #6
 8005908:	d106      	bne.n	8005918 <_printf_common+0x48>
 800590a:	f104 0a19 	add.w	sl, r4, #25
 800590e:	68e3      	ldr	r3, [r4, #12]
 8005910:	6832      	ldr	r2, [r6, #0]
 8005912:	1a9b      	subs	r3, r3, r2
 8005914:	42ab      	cmp	r3, r5
 8005916:	dc26      	bgt.n	8005966 <_printf_common+0x96>
 8005918:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800591c:	1e13      	subs	r3, r2, #0
 800591e:	6822      	ldr	r2, [r4, #0]
 8005920:	bf18      	it	ne
 8005922:	2301      	movne	r3, #1
 8005924:	0692      	lsls	r2, r2, #26
 8005926:	d42b      	bmi.n	8005980 <_printf_common+0xb0>
 8005928:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800592c:	4649      	mov	r1, r9
 800592e:	4638      	mov	r0, r7
 8005930:	47c0      	blx	r8
 8005932:	3001      	adds	r0, #1
 8005934:	d01e      	beq.n	8005974 <_printf_common+0xa4>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	68e5      	ldr	r5, [r4, #12]
 800593a:	6832      	ldr	r2, [r6, #0]
 800593c:	f003 0306 	and.w	r3, r3, #6
 8005940:	2b04      	cmp	r3, #4
 8005942:	bf08      	it	eq
 8005944:	1aad      	subeq	r5, r5, r2
 8005946:	68a3      	ldr	r3, [r4, #8]
 8005948:	6922      	ldr	r2, [r4, #16]
 800594a:	bf0c      	ite	eq
 800594c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005950:	2500      	movne	r5, #0
 8005952:	4293      	cmp	r3, r2
 8005954:	bfc4      	itt	gt
 8005956:	1a9b      	subgt	r3, r3, r2
 8005958:	18ed      	addgt	r5, r5, r3
 800595a:	2600      	movs	r6, #0
 800595c:	341a      	adds	r4, #26
 800595e:	42b5      	cmp	r5, r6
 8005960:	d11a      	bne.n	8005998 <_printf_common+0xc8>
 8005962:	2000      	movs	r0, #0
 8005964:	e008      	b.n	8005978 <_printf_common+0xa8>
 8005966:	2301      	movs	r3, #1
 8005968:	4652      	mov	r2, sl
 800596a:	4649      	mov	r1, r9
 800596c:	4638      	mov	r0, r7
 800596e:	47c0      	blx	r8
 8005970:	3001      	adds	r0, #1
 8005972:	d103      	bne.n	800597c <_printf_common+0xac>
 8005974:	f04f 30ff 	mov.w	r0, #4294967295
 8005978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597c:	3501      	adds	r5, #1
 800597e:	e7c6      	b.n	800590e <_printf_common+0x3e>
 8005980:	18e1      	adds	r1, r4, r3
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	2030      	movs	r0, #48	; 0x30
 8005986:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800598a:	4422      	add	r2, r4
 800598c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005990:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005994:	3302      	adds	r3, #2
 8005996:	e7c7      	b.n	8005928 <_printf_common+0x58>
 8005998:	2301      	movs	r3, #1
 800599a:	4622      	mov	r2, r4
 800599c:	4649      	mov	r1, r9
 800599e:	4638      	mov	r0, r7
 80059a0:	47c0      	blx	r8
 80059a2:	3001      	adds	r0, #1
 80059a4:	d0e6      	beq.n	8005974 <_printf_common+0xa4>
 80059a6:	3601      	adds	r6, #1
 80059a8:	e7d9      	b.n	800595e <_printf_common+0x8e>
	...

080059ac <_printf_i>:
 80059ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	460c      	mov	r4, r1
 80059b2:	4691      	mov	r9, r2
 80059b4:	7e27      	ldrb	r7, [r4, #24]
 80059b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059b8:	2f78      	cmp	r7, #120	; 0x78
 80059ba:	4680      	mov	r8, r0
 80059bc:	469a      	mov	sl, r3
 80059be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059c2:	d807      	bhi.n	80059d4 <_printf_i+0x28>
 80059c4:	2f62      	cmp	r7, #98	; 0x62
 80059c6:	d80a      	bhi.n	80059de <_printf_i+0x32>
 80059c8:	2f00      	cmp	r7, #0
 80059ca:	f000 80d8 	beq.w	8005b7e <_printf_i+0x1d2>
 80059ce:	2f58      	cmp	r7, #88	; 0x58
 80059d0:	f000 80a3 	beq.w	8005b1a <_printf_i+0x16e>
 80059d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059dc:	e03a      	b.n	8005a54 <_printf_i+0xa8>
 80059de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059e2:	2b15      	cmp	r3, #21
 80059e4:	d8f6      	bhi.n	80059d4 <_printf_i+0x28>
 80059e6:	a001      	add	r0, pc, #4	; (adr r0, 80059ec <_printf_i+0x40>)
 80059e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059ec:	08005a45 	.word	0x08005a45
 80059f0:	08005a59 	.word	0x08005a59
 80059f4:	080059d5 	.word	0x080059d5
 80059f8:	080059d5 	.word	0x080059d5
 80059fc:	080059d5 	.word	0x080059d5
 8005a00:	080059d5 	.word	0x080059d5
 8005a04:	08005a59 	.word	0x08005a59
 8005a08:	080059d5 	.word	0x080059d5
 8005a0c:	080059d5 	.word	0x080059d5
 8005a10:	080059d5 	.word	0x080059d5
 8005a14:	080059d5 	.word	0x080059d5
 8005a18:	08005b65 	.word	0x08005b65
 8005a1c:	08005a89 	.word	0x08005a89
 8005a20:	08005b47 	.word	0x08005b47
 8005a24:	080059d5 	.word	0x080059d5
 8005a28:	080059d5 	.word	0x080059d5
 8005a2c:	08005b87 	.word	0x08005b87
 8005a30:	080059d5 	.word	0x080059d5
 8005a34:	08005a89 	.word	0x08005a89
 8005a38:	080059d5 	.word	0x080059d5
 8005a3c:	080059d5 	.word	0x080059d5
 8005a40:	08005b4f 	.word	0x08005b4f
 8005a44:	680b      	ldr	r3, [r1, #0]
 8005a46:	1d1a      	adds	r2, r3, #4
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	600a      	str	r2, [r1, #0]
 8005a4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0a3      	b.n	8005ba0 <_printf_i+0x1f4>
 8005a58:	6825      	ldr	r5, [r4, #0]
 8005a5a:	6808      	ldr	r0, [r1, #0]
 8005a5c:	062e      	lsls	r6, r5, #24
 8005a5e:	f100 0304 	add.w	r3, r0, #4
 8005a62:	d50a      	bpl.n	8005a7a <_printf_i+0xce>
 8005a64:	6805      	ldr	r5, [r0, #0]
 8005a66:	600b      	str	r3, [r1, #0]
 8005a68:	2d00      	cmp	r5, #0
 8005a6a:	da03      	bge.n	8005a74 <_printf_i+0xc8>
 8005a6c:	232d      	movs	r3, #45	; 0x2d
 8005a6e:	426d      	negs	r5, r5
 8005a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a74:	485e      	ldr	r0, [pc, #376]	; (8005bf0 <_printf_i+0x244>)
 8005a76:	230a      	movs	r3, #10
 8005a78:	e019      	b.n	8005aae <_printf_i+0x102>
 8005a7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a7e:	6805      	ldr	r5, [r0, #0]
 8005a80:	600b      	str	r3, [r1, #0]
 8005a82:	bf18      	it	ne
 8005a84:	b22d      	sxthne	r5, r5
 8005a86:	e7ef      	b.n	8005a68 <_printf_i+0xbc>
 8005a88:	680b      	ldr	r3, [r1, #0]
 8005a8a:	6825      	ldr	r5, [r4, #0]
 8005a8c:	1d18      	adds	r0, r3, #4
 8005a8e:	6008      	str	r0, [r1, #0]
 8005a90:	0628      	lsls	r0, r5, #24
 8005a92:	d501      	bpl.n	8005a98 <_printf_i+0xec>
 8005a94:	681d      	ldr	r5, [r3, #0]
 8005a96:	e002      	b.n	8005a9e <_printf_i+0xf2>
 8005a98:	0669      	lsls	r1, r5, #25
 8005a9a:	d5fb      	bpl.n	8005a94 <_printf_i+0xe8>
 8005a9c:	881d      	ldrh	r5, [r3, #0]
 8005a9e:	4854      	ldr	r0, [pc, #336]	; (8005bf0 <_printf_i+0x244>)
 8005aa0:	2f6f      	cmp	r7, #111	; 0x6f
 8005aa2:	bf0c      	ite	eq
 8005aa4:	2308      	moveq	r3, #8
 8005aa6:	230a      	movne	r3, #10
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aae:	6866      	ldr	r6, [r4, #4]
 8005ab0:	60a6      	str	r6, [r4, #8]
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	bfa2      	ittt	ge
 8005ab6:	6821      	ldrge	r1, [r4, #0]
 8005ab8:	f021 0104 	bicge.w	r1, r1, #4
 8005abc:	6021      	strge	r1, [r4, #0]
 8005abe:	b90d      	cbnz	r5, 8005ac4 <_printf_i+0x118>
 8005ac0:	2e00      	cmp	r6, #0
 8005ac2:	d04d      	beq.n	8005b60 <_printf_i+0x1b4>
 8005ac4:	4616      	mov	r6, r2
 8005ac6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aca:	fb03 5711 	mls	r7, r3, r1, r5
 8005ace:	5dc7      	ldrb	r7, [r0, r7]
 8005ad0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ad4:	462f      	mov	r7, r5
 8005ad6:	42bb      	cmp	r3, r7
 8005ad8:	460d      	mov	r5, r1
 8005ada:	d9f4      	bls.n	8005ac6 <_printf_i+0x11a>
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d10b      	bne.n	8005af8 <_printf_i+0x14c>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	07df      	lsls	r7, r3, #31
 8005ae4:	d508      	bpl.n	8005af8 <_printf_i+0x14c>
 8005ae6:	6923      	ldr	r3, [r4, #16]
 8005ae8:	6861      	ldr	r1, [r4, #4]
 8005aea:	4299      	cmp	r1, r3
 8005aec:	bfde      	ittt	le
 8005aee:	2330      	movle	r3, #48	; 0x30
 8005af0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005af4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005af8:	1b92      	subs	r2, r2, r6
 8005afa:	6122      	str	r2, [r4, #16]
 8005afc:	f8cd a000 	str.w	sl, [sp]
 8005b00:	464b      	mov	r3, r9
 8005b02:	aa03      	add	r2, sp, #12
 8005b04:	4621      	mov	r1, r4
 8005b06:	4640      	mov	r0, r8
 8005b08:	f7ff fee2 	bl	80058d0 <_printf_common>
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d14c      	bne.n	8005baa <_printf_i+0x1fe>
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295
 8005b14:	b004      	add	sp, #16
 8005b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1a:	4835      	ldr	r0, [pc, #212]	; (8005bf0 <_printf_i+0x244>)
 8005b1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	680e      	ldr	r6, [r1, #0]
 8005b24:	061f      	lsls	r7, r3, #24
 8005b26:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b2a:	600e      	str	r6, [r1, #0]
 8005b2c:	d514      	bpl.n	8005b58 <_printf_i+0x1ac>
 8005b2e:	07d9      	lsls	r1, r3, #31
 8005b30:	bf44      	itt	mi
 8005b32:	f043 0320 	orrmi.w	r3, r3, #32
 8005b36:	6023      	strmi	r3, [r4, #0]
 8005b38:	b91d      	cbnz	r5, 8005b42 <_printf_i+0x196>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	f023 0320 	bic.w	r3, r3, #32
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	2310      	movs	r3, #16
 8005b44:	e7b0      	b.n	8005aa8 <_printf_i+0xfc>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	f043 0320 	orr.w	r3, r3, #32
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	2378      	movs	r3, #120	; 0x78
 8005b50:	4828      	ldr	r0, [pc, #160]	; (8005bf4 <_printf_i+0x248>)
 8005b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b56:	e7e3      	b.n	8005b20 <_printf_i+0x174>
 8005b58:	065e      	lsls	r6, r3, #25
 8005b5a:	bf48      	it	mi
 8005b5c:	b2ad      	uxthmi	r5, r5
 8005b5e:	e7e6      	b.n	8005b2e <_printf_i+0x182>
 8005b60:	4616      	mov	r6, r2
 8005b62:	e7bb      	b.n	8005adc <_printf_i+0x130>
 8005b64:	680b      	ldr	r3, [r1, #0]
 8005b66:	6826      	ldr	r6, [r4, #0]
 8005b68:	6960      	ldr	r0, [r4, #20]
 8005b6a:	1d1d      	adds	r5, r3, #4
 8005b6c:	600d      	str	r5, [r1, #0]
 8005b6e:	0635      	lsls	r5, r6, #24
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	d501      	bpl.n	8005b78 <_printf_i+0x1cc>
 8005b74:	6018      	str	r0, [r3, #0]
 8005b76:	e002      	b.n	8005b7e <_printf_i+0x1d2>
 8005b78:	0671      	lsls	r1, r6, #25
 8005b7a:	d5fb      	bpl.n	8005b74 <_printf_i+0x1c8>
 8005b7c:	8018      	strh	r0, [r3, #0]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6123      	str	r3, [r4, #16]
 8005b82:	4616      	mov	r6, r2
 8005b84:	e7ba      	b.n	8005afc <_printf_i+0x150>
 8005b86:	680b      	ldr	r3, [r1, #0]
 8005b88:	1d1a      	adds	r2, r3, #4
 8005b8a:	600a      	str	r2, [r1, #0]
 8005b8c:	681e      	ldr	r6, [r3, #0]
 8005b8e:	6862      	ldr	r2, [r4, #4]
 8005b90:	2100      	movs	r1, #0
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7fa fb3c 	bl	8000210 <memchr>
 8005b98:	b108      	cbz	r0, 8005b9e <_printf_i+0x1f2>
 8005b9a:	1b80      	subs	r0, r0, r6
 8005b9c:	6060      	str	r0, [r4, #4]
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	6123      	str	r3, [r4, #16]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba8:	e7a8      	b.n	8005afc <_printf_i+0x150>
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	4632      	mov	r2, r6
 8005bae:	4649      	mov	r1, r9
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	47d0      	blx	sl
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d0ab      	beq.n	8005b10 <_printf_i+0x164>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	079b      	lsls	r3, r3, #30
 8005bbc:	d413      	bmi.n	8005be6 <_printf_i+0x23a>
 8005bbe:	68e0      	ldr	r0, [r4, #12]
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	4298      	cmp	r0, r3
 8005bc4:	bfb8      	it	lt
 8005bc6:	4618      	movlt	r0, r3
 8005bc8:	e7a4      	b.n	8005b14 <_printf_i+0x168>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4632      	mov	r2, r6
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	47d0      	blx	sl
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d09b      	beq.n	8005b10 <_printf_i+0x164>
 8005bd8:	3501      	adds	r5, #1
 8005bda:	68e3      	ldr	r3, [r4, #12]
 8005bdc:	9903      	ldr	r1, [sp, #12]
 8005bde:	1a5b      	subs	r3, r3, r1
 8005be0:	42ab      	cmp	r3, r5
 8005be2:	dcf2      	bgt.n	8005bca <_printf_i+0x21e>
 8005be4:	e7eb      	b.n	8005bbe <_printf_i+0x212>
 8005be6:	2500      	movs	r5, #0
 8005be8:	f104 0619 	add.w	r6, r4, #25
 8005bec:	e7f5      	b.n	8005bda <_printf_i+0x22e>
 8005bee:	bf00      	nop
 8005bf0:	08018db6 	.word	0x08018db6
 8005bf4:	08018dc7 	.word	0x08018dc7

08005bf8 <_sbrk_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4d06      	ldr	r5, [pc, #24]	; (8005c14 <_sbrk_r+0x1c>)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4604      	mov	r4, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	602b      	str	r3, [r5, #0]
 8005c04:	f7fc f9dc 	bl	8001fc0 <_sbrk>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d102      	bne.n	8005c12 <_sbrk_r+0x1a>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	b103      	cbz	r3, 8005c12 <_sbrk_r+0x1a>
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
 8005c14:	2000037c 	.word	0x2000037c

08005c18 <__swbuf_r>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	460e      	mov	r6, r1
 8005c1c:	4614      	mov	r4, r2
 8005c1e:	4605      	mov	r5, r0
 8005c20:	b118      	cbz	r0, 8005c2a <__swbuf_r+0x12>
 8005c22:	6983      	ldr	r3, [r0, #24]
 8005c24:	b90b      	cbnz	r3, 8005c2a <__swbuf_r+0x12>
 8005c26:	f000 f9d9 	bl	8005fdc <__sinit>
 8005c2a:	4b21      	ldr	r3, [pc, #132]	; (8005cb0 <__swbuf_r+0x98>)
 8005c2c:	429c      	cmp	r4, r3
 8005c2e:	d12b      	bne.n	8005c88 <__swbuf_r+0x70>
 8005c30:	686c      	ldr	r4, [r5, #4]
 8005c32:	69a3      	ldr	r3, [r4, #24]
 8005c34:	60a3      	str	r3, [r4, #8]
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	071a      	lsls	r2, r3, #28
 8005c3a:	d52f      	bpl.n	8005c9c <__swbuf_r+0x84>
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	b36b      	cbz	r3, 8005c9c <__swbuf_r+0x84>
 8005c40:	6923      	ldr	r3, [r4, #16]
 8005c42:	6820      	ldr	r0, [r4, #0]
 8005c44:	1ac0      	subs	r0, r0, r3
 8005c46:	6963      	ldr	r3, [r4, #20]
 8005c48:	b2f6      	uxtb	r6, r6
 8005c4a:	4283      	cmp	r3, r0
 8005c4c:	4637      	mov	r7, r6
 8005c4e:	dc04      	bgt.n	8005c5a <__swbuf_r+0x42>
 8005c50:	4621      	mov	r1, r4
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 f92e 	bl	8005eb4 <_fflush_r>
 8005c58:	bb30      	cbnz	r0, 8005ca8 <__swbuf_r+0x90>
 8005c5a:	68a3      	ldr	r3, [r4, #8]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	60a3      	str	r3, [r4, #8]
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	6022      	str	r2, [r4, #0]
 8005c66:	701e      	strb	r6, [r3, #0]
 8005c68:	6963      	ldr	r3, [r4, #20]
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	4283      	cmp	r3, r0
 8005c6e:	d004      	beq.n	8005c7a <__swbuf_r+0x62>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	07db      	lsls	r3, r3, #31
 8005c74:	d506      	bpl.n	8005c84 <__swbuf_r+0x6c>
 8005c76:	2e0a      	cmp	r6, #10
 8005c78:	d104      	bne.n	8005c84 <__swbuf_r+0x6c>
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 f919 	bl	8005eb4 <_fflush_r>
 8005c82:	b988      	cbnz	r0, 8005ca8 <__swbuf_r+0x90>
 8005c84:	4638      	mov	r0, r7
 8005c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <__swbuf_r+0x9c>)
 8005c8a:	429c      	cmp	r4, r3
 8005c8c:	d101      	bne.n	8005c92 <__swbuf_r+0x7a>
 8005c8e:	68ac      	ldr	r4, [r5, #8]
 8005c90:	e7cf      	b.n	8005c32 <__swbuf_r+0x1a>
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <__swbuf_r+0xa0>)
 8005c94:	429c      	cmp	r4, r3
 8005c96:	bf08      	it	eq
 8005c98:	68ec      	ldreq	r4, [r5, #12]
 8005c9a:	e7ca      	b.n	8005c32 <__swbuf_r+0x1a>
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f000 f80c 	bl	8005cbc <__swsetup_r>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d0cb      	beq.n	8005c40 <__swbuf_r+0x28>
 8005ca8:	f04f 37ff 	mov.w	r7, #4294967295
 8005cac:	e7ea      	b.n	8005c84 <__swbuf_r+0x6c>
 8005cae:	bf00      	nop
 8005cb0:	08018df8 	.word	0x08018df8
 8005cb4:	08018e18 	.word	0x08018e18
 8005cb8:	08018dd8 	.word	0x08018dd8

08005cbc <__swsetup_r>:
 8005cbc:	4b32      	ldr	r3, [pc, #200]	; (8005d88 <__swsetup_r+0xcc>)
 8005cbe:	b570      	push	{r4, r5, r6, lr}
 8005cc0:	681d      	ldr	r5, [r3, #0]
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	b125      	cbz	r5, 8005cd2 <__swsetup_r+0x16>
 8005cc8:	69ab      	ldr	r3, [r5, #24]
 8005cca:	b913      	cbnz	r3, 8005cd2 <__swsetup_r+0x16>
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f000 f985 	bl	8005fdc <__sinit>
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <__swsetup_r+0xd0>)
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	d10f      	bne.n	8005cf8 <__swsetup_r+0x3c>
 8005cd8:	686c      	ldr	r4, [r5, #4]
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ce0:	0719      	lsls	r1, r3, #28
 8005ce2:	d42c      	bmi.n	8005d3e <__swsetup_r+0x82>
 8005ce4:	06dd      	lsls	r5, r3, #27
 8005ce6:	d411      	bmi.n	8005d0c <__swsetup_r+0x50>
 8005ce8:	2309      	movs	r3, #9
 8005cea:	6033      	str	r3, [r6, #0]
 8005cec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf6:	e03e      	b.n	8005d76 <__swsetup_r+0xba>
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <__swsetup_r+0xd4>)
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	d101      	bne.n	8005d02 <__swsetup_r+0x46>
 8005cfe:	68ac      	ldr	r4, [r5, #8]
 8005d00:	e7eb      	b.n	8005cda <__swsetup_r+0x1e>
 8005d02:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <__swsetup_r+0xd8>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	bf08      	it	eq
 8005d08:	68ec      	ldreq	r4, [r5, #12]
 8005d0a:	e7e6      	b.n	8005cda <__swsetup_r+0x1e>
 8005d0c:	0758      	lsls	r0, r3, #29
 8005d0e:	d512      	bpl.n	8005d36 <__swsetup_r+0x7a>
 8005d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d12:	b141      	cbz	r1, 8005d26 <__swsetup_r+0x6a>
 8005d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d18:	4299      	cmp	r1, r3
 8005d1a:	d002      	beq.n	8005d22 <__swsetup_r+0x66>
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f7ff fa77 	bl	8005210 <_free_r>
 8005d22:	2300      	movs	r3, #0
 8005d24:	6363      	str	r3, [r4, #52]	; 0x34
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6063      	str	r3, [r4, #4]
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	f043 0308 	orr.w	r3, r3, #8
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	b94b      	cbnz	r3, 8005d56 <__swsetup_r+0x9a>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4c:	d003      	beq.n	8005d56 <__swsetup_r+0x9a>
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4630      	mov	r0, r6
 8005d52:	f000 fa07 	bl	8006164 <__smakebuf_r>
 8005d56:	89a0      	ldrh	r0, [r4, #12]
 8005d58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d5c:	f010 0301 	ands.w	r3, r0, #1
 8005d60:	d00a      	beq.n	8005d78 <__swsetup_r+0xbc>
 8005d62:	2300      	movs	r3, #0
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	6963      	ldr	r3, [r4, #20]
 8005d68:	425b      	negs	r3, r3
 8005d6a:	61a3      	str	r3, [r4, #24]
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	b943      	cbnz	r3, 8005d82 <__swsetup_r+0xc6>
 8005d70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d74:	d1ba      	bne.n	8005cec <__swsetup_r+0x30>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	0781      	lsls	r1, r0, #30
 8005d7a:	bf58      	it	pl
 8005d7c:	6963      	ldrpl	r3, [r4, #20]
 8005d7e:	60a3      	str	r3, [r4, #8]
 8005d80:	e7f4      	b.n	8005d6c <__swsetup_r+0xb0>
 8005d82:	2000      	movs	r0, #0
 8005d84:	e7f7      	b.n	8005d76 <__swsetup_r+0xba>
 8005d86:	bf00      	nop
 8005d88:	2000000c 	.word	0x2000000c
 8005d8c:	08018df8 	.word	0x08018df8
 8005d90:	08018e18 	.word	0x08018e18
 8005d94:	08018dd8 	.word	0x08018dd8

08005d98 <abort>:
 8005d98:	b508      	push	{r3, lr}
 8005d9a:	2006      	movs	r0, #6
 8005d9c:	f000 faa4 	bl	80062e8 <raise>
 8005da0:	2001      	movs	r0, #1
 8005da2:	f7fc f895 	bl	8001ed0 <_exit>
	...

08005da8 <__sflush_r>:
 8005da8:	898a      	ldrh	r2, [r1, #12]
 8005daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dae:	4605      	mov	r5, r0
 8005db0:	0710      	lsls	r0, r2, #28
 8005db2:	460c      	mov	r4, r1
 8005db4:	d458      	bmi.n	8005e68 <__sflush_r+0xc0>
 8005db6:	684b      	ldr	r3, [r1, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	dc05      	bgt.n	8005dc8 <__sflush_r+0x20>
 8005dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dc02      	bgt.n	8005dc8 <__sflush_r+0x20>
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dca:	2e00      	cmp	r6, #0
 8005dcc:	d0f9      	beq.n	8005dc2 <__sflush_r+0x1a>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005dd4:	682f      	ldr	r7, [r5, #0]
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	d032      	beq.n	8005e40 <__sflush_r+0x98>
 8005dda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	075a      	lsls	r2, r3, #29
 8005de0:	d505      	bpl.n	8005dee <__sflush_r+0x46>
 8005de2:	6863      	ldr	r3, [r4, #4]
 8005de4:	1ac0      	subs	r0, r0, r3
 8005de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005de8:	b10b      	cbz	r3, 8005dee <__sflush_r+0x46>
 8005dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dec:	1ac0      	subs	r0, r0, r3
 8005dee:	2300      	movs	r3, #0
 8005df0:	4602      	mov	r2, r0
 8005df2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005df4:	6a21      	ldr	r1, [r4, #32]
 8005df6:	4628      	mov	r0, r5
 8005df8:	47b0      	blx	r6
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	d106      	bne.n	8005e0e <__sflush_r+0x66>
 8005e00:	6829      	ldr	r1, [r5, #0]
 8005e02:	291d      	cmp	r1, #29
 8005e04:	d82c      	bhi.n	8005e60 <__sflush_r+0xb8>
 8005e06:	4a2a      	ldr	r2, [pc, #168]	; (8005eb0 <__sflush_r+0x108>)
 8005e08:	40ca      	lsrs	r2, r1
 8005e0a:	07d6      	lsls	r6, r2, #31
 8005e0c:	d528      	bpl.n	8005e60 <__sflush_r+0xb8>
 8005e0e:	2200      	movs	r2, #0
 8005e10:	6062      	str	r2, [r4, #4]
 8005e12:	04d9      	lsls	r1, r3, #19
 8005e14:	6922      	ldr	r2, [r4, #16]
 8005e16:	6022      	str	r2, [r4, #0]
 8005e18:	d504      	bpl.n	8005e24 <__sflush_r+0x7c>
 8005e1a:	1c42      	adds	r2, r0, #1
 8005e1c:	d101      	bne.n	8005e22 <__sflush_r+0x7a>
 8005e1e:	682b      	ldr	r3, [r5, #0]
 8005e20:	b903      	cbnz	r3, 8005e24 <__sflush_r+0x7c>
 8005e22:	6560      	str	r0, [r4, #84]	; 0x54
 8005e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e26:	602f      	str	r7, [r5, #0]
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	d0ca      	beq.n	8005dc2 <__sflush_r+0x1a>
 8005e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e30:	4299      	cmp	r1, r3
 8005e32:	d002      	beq.n	8005e3a <__sflush_r+0x92>
 8005e34:	4628      	mov	r0, r5
 8005e36:	f7ff f9eb 	bl	8005210 <_free_r>
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	6360      	str	r0, [r4, #52]	; 0x34
 8005e3e:	e7c1      	b.n	8005dc4 <__sflush_r+0x1c>
 8005e40:	6a21      	ldr	r1, [r4, #32]
 8005e42:	2301      	movs	r3, #1
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b0      	blx	r6
 8005e48:	1c41      	adds	r1, r0, #1
 8005e4a:	d1c7      	bne.n	8005ddc <__sflush_r+0x34>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0c4      	beq.n	8005ddc <__sflush_r+0x34>
 8005e52:	2b1d      	cmp	r3, #29
 8005e54:	d001      	beq.n	8005e5a <__sflush_r+0xb2>
 8005e56:	2b16      	cmp	r3, #22
 8005e58:	d101      	bne.n	8005e5e <__sflush_r+0xb6>
 8005e5a:	602f      	str	r7, [r5, #0]
 8005e5c:	e7b1      	b.n	8005dc2 <__sflush_r+0x1a>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e64:	81a3      	strh	r3, [r4, #12]
 8005e66:	e7ad      	b.n	8005dc4 <__sflush_r+0x1c>
 8005e68:	690f      	ldr	r7, [r1, #16]
 8005e6a:	2f00      	cmp	r7, #0
 8005e6c:	d0a9      	beq.n	8005dc2 <__sflush_r+0x1a>
 8005e6e:	0793      	lsls	r3, r2, #30
 8005e70:	680e      	ldr	r6, [r1, #0]
 8005e72:	bf08      	it	eq
 8005e74:	694b      	ldreq	r3, [r1, #20]
 8005e76:	600f      	str	r7, [r1, #0]
 8005e78:	bf18      	it	ne
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	eba6 0807 	sub.w	r8, r6, r7
 8005e80:	608b      	str	r3, [r1, #8]
 8005e82:	f1b8 0f00 	cmp.w	r8, #0
 8005e86:	dd9c      	ble.n	8005dc2 <__sflush_r+0x1a>
 8005e88:	6a21      	ldr	r1, [r4, #32]
 8005e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e8c:	4643      	mov	r3, r8
 8005e8e:	463a      	mov	r2, r7
 8005e90:	4628      	mov	r0, r5
 8005e92:	47b0      	blx	r6
 8005e94:	2800      	cmp	r0, #0
 8005e96:	dc06      	bgt.n	8005ea6 <__sflush_r+0xfe>
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	e78e      	b.n	8005dc4 <__sflush_r+0x1c>
 8005ea6:	4407      	add	r7, r0
 8005ea8:	eba8 0800 	sub.w	r8, r8, r0
 8005eac:	e7e9      	b.n	8005e82 <__sflush_r+0xda>
 8005eae:	bf00      	nop
 8005eb0:	20400001 	.word	0x20400001

08005eb4 <_fflush_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	690b      	ldr	r3, [r1, #16]
 8005eb8:	4605      	mov	r5, r0
 8005eba:	460c      	mov	r4, r1
 8005ebc:	b913      	cbnz	r3, 8005ec4 <_fflush_r+0x10>
 8005ebe:	2500      	movs	r5, #0
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	bd38      	pop	{r3, r4, r5, pc}
 8005ec4:	b118      	cbz	r0, 8005ece <_fflush_r+0x1a>
 8005ec6:	6983      	ldr	r3, [r0, #24]
 8005ec8:	b90b      	cbnz	r3, 8005ece <_fflush_r+0x1a>
 8005eca:	f000 f887 	bl	8005fdc <__sinit>
 8005ece:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <_fflush_r+0x6c>)
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	d11b      	bne.n	8005f0c <_fflush_r+0x58>
 8005ed4:	686c      	ldr	r4, [r5, #4]
 8005ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0ef      	beq.n	8005ebe <_fflush_r+0xa>
 8005ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ee0:	07d0      	lsls	r0, r2, #31
 8005ee2:	d404      	bmi.n	8005eee <_fflush_r+0x3a>
 8005ee4:	0599      	lsls	r1, r3, #22
 8005ee6:	d402      	bmi.n	8005eee <_fflush_r+0x3a>
 8005ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eea:	f000 f915 	bl	8006118 <__retarget_lock_acquire_recursive>
 8005eee:	4628      	mov	r0, r5
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	f7ff ff59 	bl	8005da8 <__sflush_r>
 8005ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ef8:	07da      	lsls	r2, r3, #31
 8005efa:	4605      	mov	r5, r0
 8005efc:	d4e0      	bmi.n	8005ec0 <_fflush_r+0xc>
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	059b      	lsls	r3, r3, #22
 8005f02:	d4dd      	bmi.n	8005ec0 <_fflush_r+0xc>
 8005f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f06:	f000 f908 	bl	800611a <__retarget_lock_release_recursive>
 8005f0a:	e7d9      	b.n	8005ec0 <_fflush_r+0xc>
 8005f0c:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <_fflush_r+0x70>)
 8005f0e:	429c      	cmp	r4, r3
 8005f10:	d101      	bne.n	8005f16 <_fflush_r+0x62>
 8005f12:	68ac      	ldr	r4, [r5, #8]
 8005f14:	e7df      	b.n	8005ed6 <_fflush_r+0x22>
 8005f16:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <_fflush_r+0x74>)
 8005f18:	429c      	cmp	r4, r3
 8005f1a:	bf08      	it	eq
 8005f1c:	68ec      	ldreq	r4, [r5, #12]
 8005f1e:	e7da      	b.n	8005ed6 <_fflush_r+0x22>
 8005f20:	08018df8 	.word	0x08018df8
 8005f24:	08018e18 	.word	0x08018e18
 8005f28:	08018dd8 	.word	0x08018dd8

08005f2c <std>:
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	4604      	mov	r4, r0
 8005f32:	e9c0 3300 	strd	r3, r3, [r0]
 8005f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f3a:	6083      	str	r3, [r0, #8]
 8005f3c:	8181      	strh	r1, [r0, #12]
 8005f3e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f40:	81c2      	strh	r2, [r0, #14]
 8005f42:	6183      	str	r3, [r0, #24]
 8005f44:	4619      	mov	r1, r3
 8005f46:	2208      	movs	r2, #8
 8005f48:	305c      	adds	r0, #92	; 0x5c
 8005f4a:	f7ff f817 	bl	8004f7c <memset>
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <std+0x38>)
 8005f50:	6263      	str	r3, [r4, #36]	; 0x24
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <std+0x3c>)
 8005f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f56:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <std+0x40>)
 8005f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f5a:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <std+0x44>)
 8005f5c:	6224      	str	r4, [r4, #32]
 8005f5e:	6323      	str	r3, [r4, #48]	; 0x30
 8005f60:	bd10      	pop	{r4, pc}
 8005f62:	bf00      	nop
 8005f64:	08006321 	.word	0x08006321
 8005f68:	08006343 	.word	0x08006343
 8005f6c:	0800637b 	.word	0x0800637b
 8005f70:	0800639f 	.word	0x0800639f

08005f74 <_cleanup_r>:
 8005f74:	4901      	ldr	r1, [pc, #4]	; (8005f7c <_cleanup_r+0x8>)
 8005f76:	f000 b8af 	b.w	80060d8 <_fwalk_reent>
 8005f7a:	bf00      	nop
 8005f7c:	08005eb5 	.word	0x08005eb5

08005f80 <__sfmoreglue>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	1e4a      	subs	r2, r1, #1
 8005f84:	2568      	movs	r5, #104	; 0x68
 8005f86:	4355      	muls	r5, r2
 8005f88:	460e      	mov	r6, r1
 8005f8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f8e:	f7ff f98f 	bl	80052b0 <_malloc_r>
 8005f92:	4604      	mov	r4, r0
 8005f94:	b140      	cbz	r0, 8005fa8 <__sfmoreglue+0x28>
 8005f96:	2100      	movs	r1, #0
 8005f98:	e9c0 1600 	strd	r1, r6, [r0]
 8005f9c:	300c      	adds	r0, #12
 8005f9e:	60a0      	str	r0, [r4, #8]
 8005fa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fa4:	f7fe ffea 	bl	8004f7c <memset>
 8005fa8:	4620      	mov	r0, r4
 8005faa:	bd70      	pop	{r4, r5, r6, pc}

08005fac <__sfp_lock_acquire>:
 8005fac:	4801      	ldr	r0, [pc, #4]	; (8005fb4 <__sfp_lock_acquire+0x8>)
 8005fae:	f000 b8b3 	b.w	8006118 <__retarget_lock_acquire_recursive>
 8005fb2:	bf00      	nop
 8005fb4:	20000378 	.word	0x20000378

08005fb8 <__sfp_lock_release>:
 8005fb8:	4801      	ldr	r0, [pc, #4]	; (8005fc0 <__sfp_lock_release+0x8>)
 8005fba:	f000 b8ae 	b.w	800611a <__retarget_lock_release_recursive>
 8005fbe:	bf00      	nop
 8005fc0:	20000378 	.word	0x20000378

08005fc4 <__sinit_lock_acquire>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	; (8005fcc <__sinit_lock_acquire+0x8>)
 8005fc6:	f000 b8a7 	b.w	8006118 <__retarget_lock_acquire_recursive>
 8005fca:	bf00      	nop
 8005fcc:	20000373 	.word	0x20000373

08005fd0 <__sinit_lock_release>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	; (8005fd8 <__sinit_lock_release+0x8>)
 8005fd2:	f000 b8a2 	b.w	800611a <__retarget_lock_release_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	20000373 	.word	0x20000373

08005fdc <__sinit>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	4604      	mov	r4, r0
 8005fe0:	f7ff fff0 	bl	8005fc4 <__sinit_lock_acquire>
 8005fe4:	69a3      	ldr	r3, [r4, #24]
 8005fe6:	b11b      	cbz	r3, 8005ff0 <__sinit+0x14>
 8005fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fec:	f7ff bff0 	b.w	8005fd0 <__sinit_lock_release>
 8005ff0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ff4:	6523      	str	r3, [r4, #80]	; 0x50
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <__sinit+0x68>)
 8005ff8:	4a13      	ldr	r2, [pc, #76]	; (8006048 <__sinit+0x6c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ffe:	42a3      	cmp	r3, r4
 8006000:	bf04      	itt	eq
 8006002:	2301      	moveq	r3, #1
 8006004:	61a3      	streq	r3, [r4, #24]
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f820 	bl	800604c <__sfp>
 800600c:	6060      	str	r0, [r4, #4]
 800600e:	4620      	mov	r0, r4
 8006010:	f000 f81c 	bl	800604c <__sfp>
 8006014:	60a0      	str	r0, [r4, #8]
 8006016:	4620      	mov	r0, r4
 8006018:	f000 f818 	bl	800604c <__sfp>
 800601c:	2200      	movs	r2, #0
 800601e:	60e0      	str	r0, [r4, #12]
 8006020:	2104      	movs	r1, #4
 8006022:	6860      	ldr	r0, [r4, #4]
 8006024:	f7ff ff82 	bl	8005f2c <std>
 8006028:	68a0      	ldr	r0, [r4, #8]
 800602a:	2201      	movs	r2, #1
 800602c:	2109      	movs	r1, #9
 800602e:	f7ff ff7d 	bl	8005f2c <std>
 8006032:	68e0      	ldr	r0, [r4, #12]
 8006034:	2202      	movs	r2, #2
 8006036:	2112      	movs	r1, #18
 8006038:	f7ff ff78 	bl	8005f2c <std>
 800603c:	2301      	movs	r3, #1
 800603e:	61a3      	str	r3, [r4, #24]
 8006040:	e7d2      	b.n	8005fe8 <__sinit+0xc>
 8006042:	bf00      	nop
 8006044:	08018bec 	.word	0x08018bec
 8006048:	08005f75 	.word	0x08005f75

0800604c <__sfp>:
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604e:	4607      	mov	r7, r0
 8006050:	f7ff ffac 	bl	8005fac <__sfp_lock_acquire>
 8006054:	4b1e      	ldr	r3, [pc, #120]	; (80060d0 <__sfp+0x84>)
 8006056:	681e      	ldr	r6, [r3, #0]
 8006058:	69b3      	ldr	r3, [r6, #24]
 800605a:	b913      	cbnz	r3, 8006062 <__sfp+0x16>
 800605c:	4630      	mov	r0, r6
 800605e:	f7ff ffbd 	bl	8005fdc <__sinit>
 8006062:	3648      	adds	r6, #72	; 0x48
 8006064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006068:	3b01      	subs	r3, #1
 800606a:	d503      	bpl.n	8006074 <__sfp+0x28>
 800606c:	6833      	ldr	r3, [r6, #0]
 800606e:	b30b      	cbz	r3, 80060b4 <__sfp+0x68>
 8006070:	6836      	ldr	r6, [r6, #0]
 8006072:	e7f7      	b.n	8006064 <__sfp+0x18>
 8006074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006078:	b9d5      	cbnz	r5, 80060b0 <__sfp+0x64>
 800607a:	4b16      	ldr	r3, [pc, #88]	; (80060d4 <__sfp+0x88>)
 800607c:	60e3      	str	r3, [r4, #12]
 800607e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006082:	6665      	str	r5, [r4, #100]	; 0x64
 8006084:	f000 f847 	bl	8006116 <__retarget_lock_init_recursive>
 8006088:	f7ff ff96 	bl	8005fb8 <__sfp_lock_release>
 800608c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006090:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006094:	6025      	str	r5, [r4, #0]
 8006096:	61a5      	str	r5, [r4, #24]
 8006098:	2208      	movs	r2, #8
 800609a:	4629      	mov	r1, r5
 800609c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060a0:	f7fe ff6c 	bl	8004f7c <memset>
 80060a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060ac:	4620      	mov	r0, r4
 80060ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b0:	3468      	adds	r4, #104	; 0x68
 80060b2:	e7d9      	b.n	8006068 <__sfp+0x1c>
 80060b4:	2104      	movs	r1, #4
 80060b6:	4638      	mov	r0, r7
 80060b8:	f7ff ff62 	bl	8005f80 <__sfmoreglue>
 80060bc:	4604      	mov	r4, r0
 80060be:	6030      	str	r0, [r6, #0]
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d1d5      	bne.n	8006070 <__sfp+0x24>
 80060c4:	f7ff ff78 	bl	8005fb8 <__sfp_lock_release>
 80060c8:	230c      	movs	r3, #12
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	e7ee      	b.n	80060ac <__sfp+0x60>
 80060ce:	bf00      	nop
 80060d0:	08018bec 	.word	0x08018bec
 80060d4:	ffff0001 	.word	0xffff0001

080060d8 <_fwalk_reent>:
 80060d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060dc:	4606      	mov	r6, r0
 80060de:	4688      	mov	r8, r1
 80060e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060e4:	2700      	movs	r7, #0
 80060e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060ea:	f1b9 0901 	subs.w	r9, r9, #1
 80060ee:	d505      	bpl.n	80060fc <_fwalk_reent+0x24>
 80060f0:	6824      	ldr	r4, [r4, #0]
 80060f2:	2c00      	cmp	r4, #0
 80060f4:	d1f7      	bne.n	80060e6 <_fwalk_reent+0xe>
 80060f6:	4638      	mov	r0, r7
 80060f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060fc:	89ab      	ldrh	r3, [r5, #12]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d907      	bls.n	8006112 <_fwalk_reent+0x3a>
 8006102:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006106:	3301      	adds	r3, #1
 8006108:	d003      	beq.n	8006112 <_fwalk_reent+0x3a>
 800610a:	4629      	mov	r1, r5
 800610c:	4630      	mov	r0, r6
 800610e:	47c0      	blx	r8
 8006110:	4307      	orrs	r7, r0
 8006112:	3568      	adds	r5, #104	; 0x68
 8006114:	e7e9      	b.n	80060ea <_fwalk_reent+0x12>

08006116 <__retarget_lock_init_recursive>:
 8006116:	4770      	bx	lr

08006118 <__retarget_lock_acquire_recursive>:
 8006118:	4770      	bx	lr

0800611a <__retarget_lock_release_recursive>:
 800611a:	4770      	bx	lr

0800611c <__swhatbuf_r>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	460e      	mov	r6, r1
 8006120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006124:	2900      	cmp	r1, #0
 8006126:	b096      	sub	sp, #88	; 0x58
 8006128:	4614      	mov	r4, r2
 800612a:	461d      	mov	r5, r3
 800612c:	da07      	bge.n	800613e <__swhatbuf_r+0x22>
 800612e:	2300      	movs	r3, #0
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	89b3      	ldrh	r3, [r6, #12]
 8006134:	061a      	lsls	r2, r3, #24
 8006136:	d410      	bmi.n	800615a <__swhatbuf_r+0x3e>
 8006138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800613c:	e00e      	b.n	800615c <__swhatbuf_r+0x40>
 800613e:	466a      	mov	r2, sp
 8006140:	f000 f954 	bl	80063ec <_fstat_r>
 8006144:	2800      	cmp	r0, #0
 8006146:	dbf2      	blt.n	800612e <__swhatbuf_r+0x12>
 8006148:	9a01      	ldr	r2, [sp, #4]
 800614a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800614e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006152:	425a      	negs	r2, r3
 8006154:	415a      	adcs	r2, r3
 8006156:	602a      	str	r2, [r5, #0]
 8006158:	e7ee      	b.n	8006138 <__swhatbuf_r+0x1c>
 800615a:	2340      	movs	r3, #64	; 0x40
 800615c:	2000      	movs	r0, #0
 800615e:	6023      	str	r3, [r4, #0]
 8006160:	b016      	add	sp, #88	; 0x58
 8006162:	bd70      	pop	{r4, r5, r6, pc}

08006164 <__smakebuf_r>:
 8006164:	898b      	ldrh	r3, [r1, #12]
 8006166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006168:	079d      	lsls	r5, r3, #30
 800616a:	4606      	mov	r6, r0
 800616c:	460c      	mov	r4, r1
 800616e:	d507      	bpl.n	8006180 <__smakebuf_r+0x1c>
 8006170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	2301      	movs	r3, #1
 800617a:	6163      	str	r3, [r4, #20]
 800617c:	b002      	add	sp, #8
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	ab01      	add	r3, sp, #4
 8006182:	466a      	mov	r2, sp
 8006184:	f7ff ffca 	bl	800611c <__swhatbuf_r>
 8006188:	9900      	ldr	r1, [sp, #0]
 800618a:	4605      	mov	r5, r0
 800618c:	4630      	mov	r0, r6
 800618e:	f7ff f88f 	bl	80052b0 <_malloc_r>
 8006192:	b948      	cbnz	r0, 80061a8 <__smakebuf_r+0x44>
 8006194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006198:	059a      	lsls	r2, r3, #22
 800619a:	d4ef      	bmi.n	800617c <__smakebuf_r+0x18>
 800619c:	f023 0303 	bic.w	r3, r3, #3
 80061a0:	f043 0302 	orr.w	r3, r3, #2
 80061a4:	81a3      	strh	r3, [r4, #12]
 80061a6:	e7e3      	b.n	8006170 <__smakebuf_r+0xc>
 80061a8:	4b0d      	ldr	r3, [pc, #52]	; (80061e0 <__smakebuf_r+0x7c>)
 80061aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	6020      	str	r0, [r4, #0]
 80061b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b4:	81a3      	strh	r3, [r4, #12]
 80061b6:	9b00      	ldr	r3, [sp, #0]
 80061b8:	6163      	str	r3, [r4, #20]
 80061ba:	9b01      	ldr	r3, [sp, #4]
 80061bc:	6120      	str	r0, [r4, #16]
 80061be:	b15b      	cbz	r3, 80061d8 <__smakebuf_r+0x74>
 80061c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061c4:	4630      	mov	r0, r6
 80061c6:	f000 f923 	bl	8006410 <_isatty_r>
 80061ca:	b128      	cbz	r0, 80061d8 <__smakebuf_r+0x74>
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f023 0303 	bic.w	r3, r3, #3
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	81a3      	strh	r3, [r4, #12]
 80061d8:	89a0      	ldrh	r0, [r4, #12]
 80061da:	4305      	orrs	r5, r0
 80061dc:	81a5      	strh	r5, [r4, #12]
 80061de:	e7cd      	b.n	800617c <__smakebuf_r+0x18>
 80061e0:	08005f75 	.word	0x08005f75

080061e4 <memcpy>:
 80061e4:	440a      	add	r2, r1
 80061e6:	4291      	cmp	r1, r2
 80061e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80061ec:	d100      	bne.n	80061f0 <memcpy+0xc>
 80061ee:	4770      	bx	lr
 80061f0:	b510      	push	{r4, lr}
 80061f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061fa:	4291      	cmp	r1, r2
 80061fc:	d1f9      	bne.n	80061f2 <memcpy+0xe>
 80061fe:	bd10      	pop	{r4, pc}

08006200 <memmove>:
 8006200:	4288      	cmp	r0, r1
 8006202:	b510      	push	{r4, lr}
 8006204:	eb01 0402 	add.w	r4, r1, r2
 8006208:	d902      	bls.n	8006210 <memmove+0x10>
 800620a:	4284      	cmp	r4, r0
 800620c:	4623      	mov	r3, r4
 800620e:	d807      	bhi.n	8006220 <memmove+0x20>
 8006210:	1e43      	subs	r3, r0, #1
 8006212:	42a1      	cmp	r1, r4
 8006214:	d008      	beq.n	8006228 <memmove+0x28>
 8006216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800621a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800621e:	e7f8      	b.n	8006212 <memmove+0x12>
 8006220:	4402      	add	r2, r0
 8006222:	4601      	mov	r1, r0
 8006224:	428a      	cmp	r2, r1
 8006226:	d100      	bne.n	800622a <memmove+0x2a>
 8006228:	bd10      	pop	{r4, pc}
 800622a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800622e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006232:	e7f7      	b.n	8006224 <memmove+0x24>

08006234 <__malloc_lock>:
 8006234:	4801      	ldr	r0, [pc, #4]	; (800623c <__malloc_lock+0x8>)
 8006236:	f7ff bf6f 	b.w	8006118 <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	20000374 	.word	0x20000374

08006240 <__malloc_unlock>:
 8006240:	4801      	ldr	r0, [pc, #4]	; (8006248 <__malloc_unlock+0x8>)
 8006242:	f7ff bf6a 	b.w	800611a <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	20000374 	.word	0x20000374

0800624c <_realloc_r>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	4607      	mov	r7, r0
 8006250:	4614      	mov	r4, r2
 8006252:	460e      	mov	r6, r1
 8006254:	b921      	cbnz	r1, 8006260 <_realloc_r+0x14>
 8006256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800625a:	4611      	mov	r1, r2
 800625c:	f7ff b828 	b.w	80052b0 <_malloc_r>
 8006260:	b922      	cbnz	r2, 800626c <_realloc_r+0x20>
 8006262:	f7fe ffd5 	bl	8005210 <_free_r>
 8006266:	4625      	mov	r5, r4
 8006268:	4628      	mov	r0, r5
 800626a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800626c:	f000 f8f2 	bl	8006454 <_malloc_usable_size_r>
 8006270:	42a0      	cmp	r0, r4
 8006272:	d20f      	bcs.n	8006294 <_realloc_r+0x48>
 8006274:	4621      	mov	r1, r4
 8006276:	4638      	mov	r0, r7
 8006278:	f7ff f81a 	bl	80052b0 <_malloc_r>
 800627c:	4605      	mov	r5, r0
 800627e:	2800      	cmp	r0, #0
 8006280:	d0f2      	beq.n	8006268 <_realloc_r+0x1c>
 8006282:	4631      	mov	r1, r6
 8006284:	4622      	mov	r2, r4
 8006286:	f7ff ffad 	bl	80061e4 <memcpy>
 800628a:	4631      	mov	r1, r6
 800628c:	4638      	mov	r0, r7
 800628e:	f7fe ffbf 	bl	8005210 <_free_r>
 8006292:	e7e9      	b.n	8006268 <_realloc_r+0x1c>
 8006294:	4635      	mov	r5, r6
 8006296:	e7e7      	b.n	8006268 <_realloc_r+0x1c>

08006298 <_raise_r>:
 8006298:	291f      	cmp	r1, #31
 800629a:	b538      	push	{r3, r4, r5, lr}
 800629c:	4604      	mov	r4, r0
 800629e:	460d      	mov	r5, r1
 80062a0:	d904      	bls.n	80062ac <_raise_r+0x14>
 80062a2:	2316      	movs	r3, #22
 80062a4:	6003      	str	r3, [r0, #0]
 80062a6:	f04f 30ff 	mov.w	r0, #4294967295
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062ae:	b112      	cbz	r2, 80062b6 <_raise_r+0x1e>
 80062b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062b4:	b94b      	cbnz	r3, 80062ca <_raise_r+0x32>
 80062b6:	4620      	mov	r0, r4
 80062b8:	f000 f830 	bl	800631c <_getpid_r>
 80062bc:	462a      	mov	r2, r5
 80062be:	4601      	mov	r1, r0
 80062c0:	4620      	mov	r0, r4
 80062c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062c6:	f000 b817 	b.w	80062f8 <_kill_r>
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d00a      	beq.n	80062e4 <_raise_r+0x4c>
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	d103      	bne.n	80062da <_raise_r+0x42>
 80062d2:	2316      	movs	r3, #22
 80062d4:	6003      	str	r3, [r0, #0]
 80062d6:	2001      	movs	r0, #1
 80062d8:	e7e7      	b.n	80062aa <_raise_r+0x12>
 80062da:	2400      	movs	r4, #0
 80062dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062e0:	4628      	mov	r0, r5
 80062e2:	4798      	blx	r3
 80062e4:	2000      	movs	r0, #0
 80062e6:	e7e0      	b.n	80062aa <_raise_r+0x12>

080062e8 <raise>:
 80062e8:	4b02      	ldr	r3, [pc, #8]	; (80062f4 <raise+0xc>)
 80062ea:	4601      	mov	r1, r0
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	f7ff bfd3 	b.w	8006298 <_raise_r>
 80062f2:	bf00      	nop
 80062f4:	2000000c 	.word	0x2000000c

080062f8 <_kill_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d07      	ldr	r5, [pc, #28]	; (8006318 <_kill_r+0x20>)
 80062fc:	2300      	movs	r3, #0
 80062fe:	4604      	mov	r4, r0
 8006300:	4608      	mov	r0, r1
 8006302:	4611      	mov	r1, r2
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	f7fb fdd3 	bl	8001eb0 <_kill>
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	d102      	bne.n	8006314 <_kill_r+0x1c>
 800630e:	682b      	ldr	r3, [r5, #0]
 8006310:	b103      	cbz	r3, 8006314 <_kill_r+0x1c>
 8006312:	6023      	str	r3, [r4, #0]
 8006314:	bd38      	pop	{r3, r4, r5, pc}
 8006316:	bf00      	nop
 8006318:	2000037c 	.word	0x2000037c

0800631c <_getpid_r>:
 800631c:	f7fb bdc0 	b.w	8001ea0 <_getpid>

08006320 <__sread>:
 8006320:	b510      	push	{r4, lr}
 8006322:	460c      	mov	r4, r1
 8006324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006328:	f000 f89c 	bl	8006464 <_read_r>
 800632c:	2800      	cmp	r0, #0
 800632e:	bfab      	itete	ge
 8006330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006332:	89a3      	ldrhlt	r3, [r4, #12]
 8006334:	181b      	addge	r3, r3, r0
 8006336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800633a:	bfac      	ite	ge
 800633c:	6563      	strge	r3, [r4, #84]	; 0x54
 800633e:	81a3      	strhlt	r3, [r4, #12]
 8006340:	bd10      	pop	{r4, pc}

08006342 <__swrite>:
 8006342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006346:	461f      	mov	r7, r3
 8006348:	898b      	ldrh	r3, [r1, #12]
 800634a:	05db      	lsls	r3, r3, #23
 800634c:	4605      	mov	r5, r0
 800634e:	460c      	mov	r4, r1
 8006350:	4616      	mov	r6, r2
 8006352:	d505      	bpl.n	8006360 <__swrite+0x1e>
 8006354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006358:	2302      	movs	r3, #2
 800635a:	2200      	movs	r2, #0
 800635c:	f000 f868 	bl	8006430 <_lseek_r>
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800636a:	81a3      	strh	r3, [r4, #12]
 800636c:	4632      	mov	r2, r6
 800636e:	463b      	mov	r3, r7
 8006370:	4628      	mov	r0, r5
 8006372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006376:	f000 b817 	b.w	80063a8 <_write_r>

0800637a <__sseek>:
 800637a:	b510      	push	{r4, lr}
 800637c:	460c      	mov	r4, r1
 800637e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006382:	f000 f855 	bl	8006430 <_lseek_r>
 8006386:	1c43      	adds	r3, r0, #1
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	bf15      	itete	ne
 800638c:	6560      	strne	r0, [r4, #84]	; 0x54
 800638e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006396:	81a3      	strheq	r3, [r4, #12]
 8006398:	bf18      	it	ne
 800639a:	81a3      	strhne	r3, [r4, #12]
 800639c:	bd10      	pop	{r4, pc}

0800639e <__sclose>:
 800639e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a2:	f000 b813 	b.w	80063cc <_close_r>
	...

080063a8 <_write_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4d07      	ldr	r5, [pc, #28]	; (80063c8 <_write_r+0x20>)
 80063ac:	4604      	mov	r4, r0
 80063ae:	4608      	mov	r0, r1
 80063b0:	4611      	mov	r1, r2
 80063b2:	2200      	movs	r2, #0
 80063b4:	602a      	str	r2, [r5, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f7fb fdb1 	bl	8001f1e <_write>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_write_r+0x1e>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_write_r+0x1e>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	2000037c 	.word	0x2000037c

080063cc <_close_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4d06      	ldr	r5, [pc, #24]	; (80063e8 <_close_r+0x1c>)
 80063d0:	2300      	movs	r3, #0
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
 80063d6:	602b      	str	r3, [r5, #0]
 80063d8:	f7fb fdbd 	bl	8001f56 <_close>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d102      	bne.n	80063e6 <_close_r+0x1a>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	b103      	cbz	r3, 80063e6 <_close_r+0x1a>
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	2000037c 	.word	0x2000037c

080063ec <_fstat_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4d07      	ldr	r5, [pc, #28]	; (800640c <_fstat_r+0x20>)
 80063f0:	2300      	movs	r3, #0
 80063f2:	4604      	mov	r4, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	4611      	mov	r1, r2
 80063f8:	602b      	str	r3, [r5, #0]
 80063fa:	f7fb fdb8 	bl	8001f6e <_fstat>
 80063fe:	1c43      	adds	r3, r0, #1
 8006400:	d102      	bne.n	8006408 <_fstat_r+0x1c>
 8006402:	682b      	ldr	r3, [r5, #0]
 8006404:	b103      	cbz	r3, 8006408 <_fstat_r+0x1c>
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	bd38      	pop	{r3, r4, r5, pc}
 800640a:	bf00      	nop
 800640c:	2000037c 	.word	0x2000037c

08006410 <_isatty_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4d06      	ldr	r5, [pc, #24]	; (800642c <_isatty_r+0x1c>)
 8006414:	2300      	movs	r3, #0
 8006416:	4604      	mov	r4, r0
 8006418:	4608      	mov	r0, r1
 800641a:	602b      	str	r3, [r5, #0]
 800641c:	f7fb fdb7 	bl	8001f8e <_isatty>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_isatty_r+0x1a>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_isatty_r+0x1a>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	2000037c 	.word	0x2000037c

08006430 <_lseek_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d07      	ldr	r5, [pc, #28]	; (8006450 <_lseek_r+0x20>)
 8006434:	4604      	mov	r4, r0
 8006436:	4608      	mov	r0, r1
 8006438:	4611      	mov	r1, r2
 800643a:	2200      	movs	r2, #0
 800643c:	602a      	str	r2, [r5, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	f7fb fdb0 	bl	8001fa4 <_lseek>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d102      	bne.n	800644e <_lseek_r+0x1e>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	b103      	cbz	r3, 800644e <_lseek_r+0x1e>
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	2000037c 	.word	0x2000037c

08006454 <_malloc_usable_size_r>:
 8006454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006458:	1f18      	subs	r0, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	bfbc      	itt	lt
 800645e:	580b      	ldrlt	r3, [r1, r0]
 8006460:	18c0      	addlt	r0, r0, r3
 8006462:	4770      	bx	lr

08006464 <_read_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d07      	ldr	r5, [pc, #28]	; (8006484 <_read_r+0x20>)
 8006468:	4604      	mov	r4, r0
 800646a:	4608      	mov	r0, r1
 800646c:	4611      	mov	r1, r2
 800646e:	2200      	movs	r2, #0
 8006470:	602a      	str	r2, [r5, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	f7fb fd36 	bl	8001ee4 <_read>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d102      	bne.n	8006482 <_read_r+0x1e>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	b103      	cbz	r3, 8006482 <_read_r+0x1e>
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	2000037c 	.word	0x2000037c

08006488 <_init>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	bf00      	nop
 800648c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648e:	bc08      	pop	{r3}
 8006490:	469e      	mov	lr, r3
 8006492:	4770      	bx	lr

08006494 <_fini>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	bf00      	nop
 8006498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649a:	bc08      	pop	{r3}
 800649c:	469e      	mov	lr, r3
 800649e:	4770      	bx	lr
