
TFT_01_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000129ac  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018e10  08018e10  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  08018e10  08018e10  00028e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018e18  08018e18  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018e18  08018e18  00028e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018e1c  08018e1c  00028e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08018e20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000070  08018e90  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08018e90  00030380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013de9  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003292  00000000  00000000  00043e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00047120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000050af  00000000  00000000  00047da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014b54  00000000  00000000  0004ce57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a526  00000000  00000000  000619ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000ebed1  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b18  00000000  00000000  000ebf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bec  00000000  00000000  000eca40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800644c 	.word	0x0800644c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800644c 	.word	0x0800644c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	; 0x30
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
 80005b4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	1acb      	subs	r3, r1, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	bfb8      	it	lt
 80005ce:	425b      	neglt	r3, r3
 80005d0:	429a      	cmp	r2, r3
 80005d2:	bfcc      	ite	gt
 80005d4:	2301      	movgt	r3, #1
 80005d6:	2300      	movle	r3, #0
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80005dc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00b      	beq.n	80005fc <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ee:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	623b      	str	r3, [r7, #32]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dd0b      	ble.n	800061c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	61fb      	str	r3, [r7, #28]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	b29a      	uxth	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	b29b      	uxth	r3, r3
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	bfb8      	it	lt
 8000634:	425b      	neglt	r3, r3
 8000636:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000638:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800063c:	0fda      	lsrs	r2, r3, #31
 800063e:	4413      	add	r3, r2
 8000640:	105b      	asrs	r3, r3, #1
 8000642:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	429a      	cmp	r2, r3
 800064a:	da02      	bge.n	8000652 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800064c:	2301      	movs	r3, #1
 800064e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000650:	e02e      	b.n	80006b0 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8000652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000656:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000658:	e02a      	b.n	80006b0 <GFX_WriteLine+0x108>
	        if (steep) {
 800065a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800065e:	2b00      	cmp	r3, #0
 8000660:	d008      	beq.n	8000674 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	b21b      	sxth	r3, r3
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	b211      	sxth	r1, r2
 800066a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800066c:	4618      	mov	r0, r3
 800066e:	f000 feab 	bl	80013c8 <ILI9341_WritePixel>
 8000672:	e007      	b.n	8000684 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	b21b      	sxth	r3, r3
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	b211      	sxth	r1, r2
 800067c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fea2 	bl	80013c8 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8000684:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000686:	8abb      	ldrh	r3, [r7, #20]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	b29b      	uxth	r3, r3
 800068c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800068e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000692:	2b00      	cmp	r3, #0
 8000694:	da09      	bge.n	80006aa <GFX_WriteLine+0x102>
	            y_start += ystep;
 8000696:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	4413      	add	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80006a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80006a2:	8afb      	ldrh	r3, [r7, #22]
 80006a4:	4413      	add	r3, r2
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3301      	adds	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	ddd0      	ble.n	800065a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3730      	adds	r7, #48	; 0x30
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b086      	sub	sp, #24
 80006c6:	af02      	add	r7, sp, #8
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	887b      	ldrh	r3, [r7, #2]
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4613      	mov	r3, r2
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	68b9      	ldr	r1, [r7, #8]
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f7ff ff60 	bl	80005a8 <GFX_WriteLine>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	1e5a      	subs	r2, r3, #1
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	68b9      	ldr	r1, [r7, #8]
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f7ff ff4a 	bl	80005a8 <GFX_WriteLine>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	4611      	mov	r1, r2
 8000728:	461a      	mov	r2, r3
 800072a:	460b      	mov	r3, r1
 800072c:	80fb      	strh	r3, [r7, #6]
 800072e:	4613      	mov	r3, r2
 8000730:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e008      	b.n	800074a <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000738:	88ba      	ldrh	r2, [r7, #4]
 800073a:	8c3b      	ldrh	r3, [r7, #32]
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	6978      	ldr	r0, [r7, #20]
 8000740:	f7ff ffbf 	bl	80006c2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	88fa      	ldrh	r2, [r7, #6]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4413      	add	r3, r2
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	429a      	cmp	r2, r3
 8000754:	dbf0      	blt.n	8000738 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	4611      	mov	r1, r2
 800076c:	461a      	mov	r2, r3
 800076e:	460b      	mov	r3, r1
 8000770:	80fb      	strh	r3, [r7, #6]
 8000772:	4613      	mov	r3, r2
 8000774:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	f1c3 0301 	rsb	r3, r3, #1
 800077c:	b29b      	uxth	r3, r3
 800077e:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	461a      	mov	r2, r3
 8000788:	03d2      	lsls	r2, r2, #15
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	b29b      	uxth	r3, r3
 8000790:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800079a:	e0b5      	b.n	8000908 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 800079c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db0e      	blt.n	80007c2 <GFX_DrawCircleHelper+0x62>
            y--;
 80007a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	3b01      	subs	r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80007b0:	8b7b      	ldrh	r3, [r7, #26]
 80007b2:	3302      	adds	r3, #2
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80007b8:	8bfa      	ldrh	r2, [r7, #30]
 80007ba:	8b7b      	ldrh	r3, [r7, #26]
 80007bc:	4413      	add	r3, r2
 80007be:	b29b      	uxth	r3, r3
 80007c0:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80007c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	3301      	adds	r3, #1
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80007ce:	8bbb      	ldrh	r3, [r7, #28]
 80007d0:	3302      	adds	r3, #2
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80007d6:	8bfa      	ldrh	r2, [r7, #30]
 80007d8:	8bbb      	ldrh	r3, [r7, #28]
 80007da:	4413      	add	r3, r2
 80007dc:	b29b      	uxth	r3, r3
 80007de:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80007e0:	797b      	ldrb	r3, [r7, #5]
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d01f      	beq.n	800082a <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	8b3b      	ldrh	r3, [r7, #24]
 80007f0:	4413      	add	r3, r2
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b218      	sxth	r0, r3
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	8afb      	ldrh	r3, [r7, #22]
 80007fc:	4413      	add	r3, r2
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b21b      	sxth	r3, r3
 8000802:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000804:	4619      	mov	r1, r3
 8000806:	f000 fddf 	bl	80013c8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	b29a      	uxth	r2, r3
 800080e:	8afb      	ldrh	r3, [r7, #22]
 8000810:	4413      	add	r3, r2
 8000812:	b29b      	uxth	r3, r3
 8000814:	b218      	sxth	r0, r3
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	b29a      	uxth	r2, r3
 800081a:	8b3b      	ldrh	r3, [r7, #24]
 800081c:	4413      	add	r3, r2
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
 8000822:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000824:	4619      	mov	r1, r3
 8000826:	f000 fdcf 	bl	80013c8 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 800082a:	797b      	ldrb	r3, [r7, #5]
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d01f      	beq.n	8000874 <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	b29a      	uxth	r2, r3
 8000838:	8b3b      	ldrh	r3, [r7, #24]
 800083a:	4413      	add	r3, r2
 800083c:	b29b      	uxth	r3, r3
 800083e:	b218      	sxth	r0, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	b29a      	uxth	r2, r3
 8000844:	8afb      	ldrh	r3, [r7, #22]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	b21b      	sxth	r3, r3
 800084c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800084e:	4619      	mov	r1, r3
 8000850:	f000 fdba 	bl	80013c8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	b29a      	uxth	r2, r3
 8000858:	8afb      	ldrh	r3, [r7, #22]
 800085a:	4413      	add	r3, r2
 800085c:	b29b      	uxth	r3, r3
 800085e:	b218      	sxth	r0, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	b29a      	uxth	r2, r3
 8000864:	8b3b      	ldrh	r3, [r7, #24]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	b29b      	uxth	r3, r3
 800086a:	b21b      	sxth	r3, r3
 800086c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800086e:	4619      	mov	r1, r3
 8000870:	f000 fdaa 	bl	80013c8 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 8000874:	797b      	ldrb	r3, [r7, #5]
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	2b00      	cmp	r3, #0
 800087c:	d01f      	beq.n	80008be <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	b29a      	uxth	r2, r3
 8000882:	8afb      	ldrh	r3, [r7, #22]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	b29b      	uxth	r3, r3
 8000888:	b218      	sxth	r0, r3
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	b29a      	uxth	r2, r3
 800088e:	8b3b      	ldrh	r3, [r7, #24]
 8000890:	4413      	add	r3, r2
 8000892:	b29b      	uxth	r3, r3
 8000894:	b21b      	sxth	r3, r3
 8000896:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000898:	4619      	mov	r1, r3
 800089a:	f000 fd95 	bl	80013c8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	8b3b      	ldrh	r3, [r7, #24]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b218      	sxth	r0, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	8afb      	ldrh	r3, [r7, #22]
 80008b0:	4413      	add	r3, r2
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80008b8:	4619      	mov	r1, r3
 80008ba:	f000 fd85 	bl	80013c8 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d01f      	beq.n	8000908 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	8afb      	ldrh	r3, [r7, #22]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b218      	sxth	r0, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	8b3b      	ldrh	r3, [r7, #24]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b21b      	sxth	r3, r3
 80008e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80008e2:	4619      	mov	r1, r3
 80008e4:	f000 fd70 	bl	80013c8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	8b3b      	ldrh	r3, [r7, #24]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b218      	sxth	r0, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	8afb      	ldrh	r3, [r7, #22]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b21b      	sxth	r3, r3
 8000900:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000902:	4619      	mov	r1, r3
 8000904:	f000 fd60 	bl	80013c8 <ILI9341_WritePixel>
    while (x<y) {
 8000908:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800090c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000910:	429a      	cmp	r2, r3
 8000912:	f6ff af43 	blt.w	800079c <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	4611      	mov	r1, r2
 800092c:	461a      	mov	r2, r3
 800092e:	460b      	mov	r3, r1
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	4613      	mov	r3, r2
 8000934:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	f1c3 0301 	rsb	r3, r3, #1
 800093c:	b29b      	uxth	r3, r3
 800093e:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	461a      	mov	r2, r3
 8000948:	03d2      	lsls	r2, r2, #15
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	b29b      	uxth	r3, r3
 8000950:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800095a:	e073      	b.n	8000a44 <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 800095c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0e      	blt.n	8000982 <GFX_DrawFillCircleHelper+0x62>
            y--;
 8000964:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000968:	b29b      	uxth	r3, r3
 800096a:	3b01      	subs	r3, #1
 800096c:	b29b      	uxth	r3, r3
 800096e:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000970:	8b7b      	ldrh	r3, [r7, #26]
 8000972:	3302      	adds	r3, #2
 8000974:	b29b      	uxth	r3, r3
 8000976:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8000978:	8bfa      	ldrh	r2, [r7, #30]
 800097a:	8b7b      	ldrh	r3, [r7, #26]
 800097c:	4413      	add	r3, r2
 800097e:	b29b      	uxth	r3, r3
 8000980:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000982:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000986:	b29b      	uxth	r3, r3
 8000988:	3301      	adds	r3, #1
 800098a:	b29b      	uxth	r3, r3
 800098c:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 800098e:	8bbb      	ldrh	r3, [r7, #28]
 8000990:	3302      	adds	r3, #2
 8000992:	b29b      	uxth	r3, r3
 8000994:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8000996:	8bfa      	ldrh	r2, [r7, #30]
 8000998:	8bbb      	ldrh	r3, [r7, #28]
 800099a:	4413      	add	r3, r2
 800099c:	b29b      	uxth	r3, r3
 800099e:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 80009a0:	797b      	ldrb	r3, [r7, #5]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d023      	beq.n	80009f2 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80009aa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	18d0      	adds	r0, r2, r3
 80009b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	1ad1      	subs	r1, r2, r3
 80009ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80009c6:	441a      	add	r2, r3
 80009c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009ca:	f7ff fe7a 	bl	80006c2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80009ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	18d0      	adds	r0, r2, r3
 80009d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	1ad1      	subs	r1, r2, r3
 80009de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80009ea:	441a      	add	r2, r3
 80009ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009ee:	f7ff fe68 	bl	80006c2 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80009f2:	797b      	ldrb	r3, [r7, #5]
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d023      	beq.n	8000a44 <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80009fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	1ad0      	subs	r0, r2, r3
 8000a04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	1ad1      	subs	r1, r2, r3
 8000a0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000a18:	441a      	add	r2, r3
 8000a1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a1c:	f7ff fe51 	bl	80006c2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8000a20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	1ad0      	subs	r0, r2, r3
 8000a28:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	1ad1      	subs	r1, r2, r3
 8000a30:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000a3c:	441a      	add	r2, r3
 8000a3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a40:	f7ff fe3f 	bl	80006c2 <GFX_DrawFastVLine>
    while (x<y) {
 8000a44:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000a48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	db85      	blt.n	800095c <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	3720      	adds	r7, #32
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	4611      	mov	r1, r2
 8000a66:	461a      	mov	r2, r3
 8000a68:	460b      	mov	r3, r1
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000a70:	8b3a      	ldrh	r2, [r7, #24]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	18d0      	adds	r0, r2, r3
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	8b3b      	ldrh	r3, [r7, #24]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	1ad2      	subs	r2, r2, r3
 8000a7e:	8bbb      	ldrh	r3, [r7, #28]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	f7ff fe35 	bl	80006f0 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000a86:	8b3a      	ldrh	r2, [r7, #24]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	18d0      	adds	r0, r2, r3
 8000a8c:	88ba      	ldrh	r2, [r7, #4]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	4413      	add	r3, r2
 8000a92:	1e59      	subs	r1, r3, #1
 8000a94:	88fa      	ldrh	r2, [r7, #6]
 8000a96:	8b3b      	ldrh	r3, [r7, #24]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	1ad2      	subs	r2, r2, r3
 8000a9c:	8bbb      	ldrh	r3, [r7, #28]
 8000a9e:	f7ff fe27 	bl	80006f0 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000aa2:	8b3a      	ldrh	r2, [r7, #24]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	18d1      	adds	r1, r2, r3
 8000aa8:	88ba      	ldrh	r2, [r7, #4]
 8000aaa:	8b3b      	ldrh	r3, [r7, #24]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	1ad2      	subs	r2, r2, r3
 8000ab0:	8bbb      	ldrh	r3, [r7, #28]
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fe05 	bl	80006c2 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000ab8:	88fa      	ldrh	r2, [r7, #6]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4413      	add	r3, r2
 8000abe:	1e58      	subs	r0, r3, #1
 8000ac0:	8b3a      	ldrh	r2, [r7, #24]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	18d1      	adds	r1, r2, r3
 8000ac6:	88ba      	ldrh	r2, [r7, #4]
 8000ac8:	8b3b      	ldrh	r3, [r7, #24]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	1ad2      	subs	r2, r2, r3
 8000ace:	8bbb      	ldrh	r3, [r7, #28]
 8000ad0:	f7ff fdf7 	bl	80006c2 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 8000ad4:	8b3a      	ldrh	r2, [r7, #24]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	18d0      	adds	r0, r2, r3
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	18d1      	adds	r1, r2, r3
 8000ae0:	8b3a      	ldrh	r2, [r7, #24]
 8000ae2:	8bbb      	ldrh	r3, [r7, #28]
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	f7ff fe3a 	bl	8000760 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	441a      	add	r2, r3
 8000af2:	8b3b      	ldrh	r3, [r7, #24]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	1e58      	subs	r0, r3, #1
 8000af8:	8b3a      	ldrh	r2, [r7, #24]
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	18d1      	adds	r1, r2, r3
 8000afe:	8b3a      	ldrh	r2, [r7, #24]
 8000b00:	8bbb      	ldrh	r3, [r7, #28]
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2302      	movs	r3, #2
 8000b06:	f7ff fe2b 	bl	8000760 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000b0a:	88fa      	ldrh	r2, [r7, #6]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	441a      	add	r2, r3
 8000b10:	8b3b      	ldrh	r3, [r7, #24]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	1e58      	subs	r0, r3, #1
 8000b16:	88ba      	ldrh	r2, [r7, #4]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	441a      	add	r2, r3
 8000b1c:	8b3b      	ldrh	r3, [r7, #24]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	1e59      	subs	r1, r3, #1
 8000b22:	8b3a      	ldrh	r2, [r7, #24]
 8000b24:	8bbb      	ldrh	r3, [r7, #28]
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2304      	movs	r3, #4
 8000b2a:	f7ff fe19 	bl	8000760 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000b2e:	8b3a      	ldrh	r2, [r7, #24]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	18d0      	adds	r0, r2, r3
 8000b34:	88ba      	ldrh	r2, [r7, #4]
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	441a      	add	r2, r3
 8000b3a:	8b3b      	ldrh	r3, [r7, #24]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	1e59      	subs	r1, r3, #1
 8000b40:	8b3a      	ldrh	r2, [r7, #24]
 8000b42:	8bbb      	ldrh	r3, [r7, #28]
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2308      	movs	r3, #8
 8000b48:	f7ff fe0a 	bl	8000760 <GFX_DrawCircleHelper>
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	461a      	mov	r2, r3
 8000b62:	460b      	mov	r3, r1
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	4613      	mov	r3, r2
 8000b68:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8000b6a:	8c3a      	ldrh	r2, [r7, #32]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	18d0      	adds	r0, r2, r3
 8000b70:	8c3b      	ldrh	r3, [r7, #32]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	88fa      	ldrh	r2, [r7, #6]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	88b9      	ldrh	r1, [r7, #4]
 8000b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	460b      	mov	r3, r1
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	f7ff fdc9 	bl	800071c <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8000b8a:	88fa      	ldrh	r2, [r7, #6]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	441a      	add	r2, r3
 8000b90:	8c3b      	ldrh	r3, [r7, #32]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	1e58      	subs	r0, r3, #1
 8000b96:	8c3a      	ldrh	r2, [r7, #32]
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	18d1      	adds	r1, r2, r3
 8000b9c:	8c3b      	ldrh	r3, [r7, #32]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	88ba      	ldrh	r2, [r7, #4]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	8c3c      	ldrh	r4, [r7, #32]
 8000bb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4622      	mov	r2, r4
 8000bba:	f7ff feb1 	bl	8000920 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8000bbe:	8c3a      	ldrh	r2, [r7, #32]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	18d0      	adds	r0, r2, r3
 8000bc4:	8c3a      	ldrh	r2, [r7, #32]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	18d1      	adds	r1, r2, r3
 8000bca:	8c3b      	ldrh	r3, [r7, #32]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	88ba      	ldrh	r2, [r7, #4]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	8c3c      	ldrh	r4, [r7, #32]
 8000bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000be0:	9201      	str	r2, [sp, #4]
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2302      	movs	r3, #2
 8000be6:	4622      	mov	r2, r4
 8000be8:	f7ff fe9a 	bl	8000920 <GFX_DrawFillCircleHelper>
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <GFX_Image>:
	}
}
#endif
#if STM32_USING ==1
void GFX_Image(int x, int y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	807b      	strh	r3, [r7, #2]
	uint8_t i, j;
	const uint8_t *Ptr = img; // wskaznik do chodzenia po obrazie
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	613b      	str	r3, [r7, #16]

	for(j = 0; j < h; j++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	75bb      	strb	r3, [r7, #22]
 8000c0a:	e02c      	b.n	8000c66 <GFX_Image+0x72>
	{
		for(i = 0; i < w; i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	75fb      	strb	r3, [r7, #23]
 8000c10:	e021      	b.n	8000c56 <GFX_Image+0x62>
		{
			GFX_DrawPixel(x+i, y+j, (*Ptr << 8) | ((*(Ptr+1)) & 0xFF) ); // kolor jest 16bitowy, dlatego trzeba wziac dwa kolejne bajty i upakowac je
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	b218      	sxth	r0, r3
 8000c20:	7dbb      	ldrb	r3, [r7, #22]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b219      	sxth	r1, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b21b      	sxth	r3, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	f000 fbbf 	bl	80013c8 <ILI9341_WritePixel>
			Ptr += sizeof(ColorType);
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
		for(i = 0; i < w; i++)
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	3301      	adds	r3, #1
 8000c54:	75fb      	strb	r3, [r7, #23]
 8000c56:	7dfb      	ldrb	r3, [r7, #23]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	887a      	ldrh	r2, [r7, #2]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8d8      	bhi.n	8000c12 <GFX_Image+0x1e>
	for(j = 0; j < h; j++)
 8000c60:	7dbb      	ldrb	r3, [r7, #22]
 8000c62:	3301      	adds	r3, #1
 8000c64:	75bb      	strb	r3, [r7, #22]
 8000c66:	7dbb      	ldrb	r3, [r7, #22]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	8c3a      	ldrh	r2, [r7, #32]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8cd      	bhi.n	8000c0c <GFX_Image+0x18>
		}
	}
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <EF_SetFont+0x1c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000098 	.word	0x20000098

08000c9c <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <EF_GetFontHeight+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	20000098 	.word	0x20000098

08000cb4 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <EF_GetFontStartChar+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	785b      	ldrb	r3, [r3, #1]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	20000098 	.word	0x20000098

08000ccc <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <EF_GetFontEndChar+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	789b      	ldrb	r3, [r3, #2]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	20000098 	.word	0x20000098

08000ce4 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <EF_GetFontSpaceWidth+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	78db      	ldrb	r3, [r3, #3]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	20000098 	.word	0x20000098

08000cfc <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2bc5      	cmp	r3, #197	; 0xc5
 8000d10:	d052      	beq.n	8000db8 <EF_DecodePolish+0xbc>
 8000d12:	2bc5      	cmp	r3, #197	; 0xc5
 8000d14:	f300 80e7 	bgt.w	8000ee6 <EF_DecodePolish+0x1ea>
 8000d18:	2bc3      	cmp	r3, #195	; 0xc3
 8000d1a:	d002      	beq.n	8000d22 <EF_DecodePolish+0x26>
 8000d1c:	2bc4      	cmp	r3, #196	; 0xc4
 8000d1e:	d00a      	beq.n	8000d36 <EF_DecodePolish+0x3a>
 8000d20:	e0e1      	b.n	8000ee6 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	2b93      	cmp	r3, #147	; 0x93
 8000d26:	d002      	beq.n	8000d2e <EF_DecodePolish+0x32>
 8000d28:	2bb3      	cmp	r3, #179	; 0xb3
 8000d2a:	d002      	beq.n	8000d32 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8000d2c:	e0db      	b.n	8000ee6 <EF_DecodePolish+0x1ea>
			return 0x84;
 8000d2e:	2384      	movs	r3, #132	; 0x84
 8000d30:	e0da      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8000d32:	238d      	movs	r3, #141	; 0x8d
 8000d34:	e0d8      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	3b84      	subs	r3, #132	; 0x84
 8000d3a:	2b15      	cmp	r3, #21
 8000d3c:	f200 80d0 	bhi.w	8000ee0 <EF_DecodePolish+0x1e4>
 8000d40:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <EF_DecodePolish+0x4c>)
 8000d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d46:	bf00      	nop
 8000d48:	08000da1 	.word	0x08000da1
 8000d4c:	08000dad 	.word	0x08000dad
 8000d50:	08000da9 	.word	0x08000da9
 8000d54:	08000db5 	.word	0x08000db5
 8000d58:	08000ee1 	.word	0x08000ee1
 8000d5c:	08000ee1 	.word	0x08000ee1
 8000d60:	08000ee1 	.word	0x08000ee1
 8000d64:	08000ee1 	.word	0x08000ee1
 8000d68:	08000ee1 	.word	0x08000ee1
 8000d6c:	08000ee1 	.word	0x08000ee1
 8000d70:	08000ee1 	.word	0x08000ee1
 8000d74:	08000ee1 	.word	0x08000ee1
 8000d78:	08000ee1 	.word	0x08000ee1
 8000d7c:	08000ee1 	.word	0x08000ee1
 8000d80:	08000ee1 	.word	0x08000ee1
 8000d84:	08000ee1 	.word	0x08000ee1
 8000d88:	08000ee1 	.word	0x08000ee1
 8000d8c:	08000ee1 	.word	0x08000ee1
 8000d90:	08000ee1 	.word	0x08000ee1
 8000d94:	08000ee1 	.word	0x08000ee1
 8000d98:	08000da5 	.word	0x08000da5
 8000d9c:	08000db1 	.word	0x08000db1
		{
		case 0x84: // Ą
			return 0x7F;
 8000da0:	237f      	movs	r3, #127	; 0x7f
 8000da2:	e0a1      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8000da4:	2381      	movs	r3, #129	; 0x81
 8000da6:	e09f      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	e09d      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8000dac:	2388      	movs	r3, #136	; 0x88
 8000dae:	e09b      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8000db0:	238a      	movs	r3, #138	; 0x8a
 8000db2:	e099      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8000db4:	2389      	movs	r3, #137	; 0x89
 8000db6:	e097      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	3b81      	subs	r3, #129	; 0x81
 8000dbc:	2b3b      	cmp	r3, #59	; 0x3b
 8000dbe:	f200 8091 	bhi.w	8000ee4 <EF_DecodePolish+0x1e8>
 8000dc2:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <EF_DecodePolish+0xcc>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000eb9 	.word	0x08000eb9
 8000dcc:	08000ecd 	.word	0x08000ecd
 8000dd0:	08000ebd 	.word	0x08000ebd
 8000dd4:	08000ed1 	.word	0x08000ed1
 8000dd8:	08000ee5 	.word	0x08000ee5
 8000ddc:	08000ee5 	.word	0x08000ee5
 8000de0:	08000ee5 	.word	0x08000ee5
 8000de4:	08000ee5 	.word	0x08000ee5
 8000de8:	08000ee5 	.word	0x08000ee5
 8000dec:	08000ee5 	.word	0x08000ee5
 8000df0:	08000ee5 	.word	0x08000ee5
 8000df4:	08000ee5 	.word	0x08000ee5
 8000df8:	08000ee5 	.word	0x08000ee5
 8000dfc:	08000ee5 	.word	0x08000ee5
 8000e00:	08000ee5 	.word	0x08000ee5
 8000e04:	08000ee5 	.word	0x08000ee5
 8000e08:	08000ee5 	.word	0x08000ee5
 8000e0c:	08000ee5 	.word	0x08000ee5
 8000e10:	08000ee5 	.word	0x08000ee5
 8000e14:	08000ee5 	.word	0x08000ee5
 8000e18:	08000ee5 	.word	0x08000ee5
 8000e1c:	08000ee5 	.word	0x08000ee5
 8000e20:	08000ee5 	.word	0x08000ee5
 8000e24:	08000ee5 	.word	0x08000ee5
 8000e28:	08000ee5 	.word	0x08000ee5
 8000e2c:	08000ec1 	.word	0x08000ec1
 8000e30:	08000ed5 	.word	0x08000ed5
 8000e34:	08000ee5 	.word	0x08000ee5
 8000e38:	08000ee5 	.word	0x08000ee5
 8000e3c:	08000ee5 	.word	0x08000ee5
 8000e40:	08000ee5 	.word	0x08000ee5
 8000e44:	08000ee5 	.word	0x08000ee5
 8000e48:	08000ee5 	.word	0x08000ee5
 8000e4c:	08000ee5 	.word	0x08000ee5
 8000e50:	08000ee5 	.word	0x08000ee5
 8000e54:	08000ee5 	.word	0x08000ee5
 8000e58:	08000ee5 	.word	0x08000ee5
 8000e5c:	08000ee5 	.word	0x08000ee5
 8000e60:	08000ee5 	.word	0x08000ee5
 8000e64:	08000ee5 	.word	0x08000ee5
 8000e68:	08000ee5 	.word	0x08000ee5
 8000e6c:	08000ee5 	.word	0x08000ee5
 8000e70:	08000ee5 	.word	0x08000ee5
 8000e74:	08000ee5 	.word	0x08000ee5
 8000e78:	08000ee5 	.word	0x08000ee5
 8000e7c:	08000ee5 	.word	0x08000ee5
 8000e80:	08000ee5 	.word	0x08000ee5
 8000e84:	08000ee5 	.word	0x08000ee5
 8000e88:	08000ee5 	.word	0x08000ee5
 8000e8c:	08000ee5 	.word	0x08000ee5
 8000e90:	08000ee5 	.word	0x08000ee5
 8000e94:	08000ee5 	.word	0x08000ee5
 8000e98:	08000ee5 	.word	0x08000ee5
 8000e9c:	08000ee5 	.word	0x08000ee5
 8000ea0:	08000ee5 	.word	0x08000ee5
 8000ea4:	08000ee5 	.word	0x08000ee5
 8000ea8:	08000ec5 	.word	0x08000ec5
 8000eac:	08000ed9 	.word	0x08000ed9
 8000eb0:	08000ec9 	.word	0x08000ec9
 8000eb4:	08000edd 	.word	0x08000edd
		{
		case 0x81: // Ł
			return 0x82;
 8000eb8:	2382      	movs	r3, #130	; 0x82
 8000eba:	e015      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8000ebc:	2383      	movs	r3, #131	; 0x83
 8000ebe:	e013      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8000ec0:	2385      	movs	r3, #133	; 0x85
 8000ec2:	e011      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8000ec4:	2386      	movs	r3, #134	; 0x86
 8000ec6:	e00f      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8000ec8:	2387      	movs	r3, #135	; 0x87
 8000eca:	e00d      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8000ecc:	238b      	movs	r3, #139	; 0x8b
 8000ece:	e00b      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8000ed0:	238c      	movs	r3, #140	; 0x8c
 8000ed2:	e009      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8000ed4:	238e      	movs	r3, #142	; 0x8e
 8000ed6:	e007      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8000ed8:	238f      	movs	r3, #143	; 0x8f
 8000eda:	e005      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8000edc:	2390      	movs	r3, #144	; 0x90
 8000ede:	e003      	b.n	8000ee8 <EF_DecodePolish+0x1ec>
		break;
 8000ee0:	bf00      	nop
 8000ee2:	e000      	b.n	8000ee6 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8000ee4:	bf00      	nop
	}

	return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4623      	mov	r3, r4
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	4603      	mov	r3, r0
 8000f08:	80bb      	strh	r3, [r7, #4]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	807b      	strh	r3, [r7, #2]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8000f12:	f7ff fecf 	bl	8000cb4 <EF_GetFontStartChar>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	1a9b      	subs	r3, r3, r2
 8000f1e:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b20      	cmp	r3, #32
 8000f24:	d120      	bne.n	8000f68 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8000f26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d114      	bne.n	8000f58 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8000f2e:	88bc      	ldrh	r4, [r7, #4]
 8000f30:	887d      	ldrh	r5, [r7, #2]
 8000f32:	f7ff fed7 	bl	8000ce4 <EF_GetFontSpaceWidth>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	0052      	lsls	r2, r2, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b5a      	ldr	r3, [pc, #360]	; (80010ac <EF_PutChar+0x1b8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b299      	uxth	r1, r3
 8000f4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4629      	mov	r1, r5
 8000f52:	4620      	mov	r0, r4
 8000f54:	f7ff fbe2 	bl	800071c <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8000f58:	f7ff fec4 	bl	8000ce4 <EF_GetFontSpaceWidth>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	0052      	lsls	r2, r2, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	e09c      	b.n	80010a2 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8000f68:	f7ff fea4 	bl	8000cb4 <EF_GetFontStartChar>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d201      	bcs.n	8000f7a <EF_PutChar+0x86>
	{
		return 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e093      	b.n	80010a2 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8000f7a:	f7ff fea7 	bl	8000ccc <EF_GetFontEndChar>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	7c7b      	ldrb	r3, [r7, #17]
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d901      	bls.n	8000f8c <EF_PutChar+0x98>
	{
		return 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e08a      	b.n	80010a2 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8000f8c:	4b47      	ldr	r3, [pc, #284]	; (80010ac <EF_PutChar+0x1b8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	7c7b      	ldrb	r3, [r7, #17]
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <EF_PutChar+0x1b8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4a42      	ldr	r2, [pc, #264]	; (80010ac <EF_PutChar+0x1b8>)
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	6851      	ldr	r1, [r2, #4]
 8000fa6:	7c7a      	ldrb	r2, [r7, #17]
 8000fa8:	0092      	lsls	r2, r2, #2
 8000faa:	440a      	add	r2, r1
 8000fac:	8852      	ldrh	r2, [r2, #2]
 8000fae:	4413      	add	r3, r2
 8000fb0:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	83fb      	strh	r3, [r7, #30]
 8000fb6:	e066      	b.n	8001086 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	777b      	strb	r3, [r7, #29]
 8000fc2:	e053      	b.n	800106c <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8000fca:	7efb      	ldrb	r3, [r7, #27]
 8000fcc:	2b07      	cmp	r3, #7
 8000fce:	d905      	bls.n	8000fdc <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8000fd4:	7efb      	ldrb	r3, [r7, #27]
 8000fd6:	3b08      	subs	r3, #8
 8000fd8:	76fb      	strb	r3, [r7, #27]
 8000fda:	e001      	b.n	8000fe0 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8000fdc:	7efb      	ldrb	r3, [r7, #27]
 8000fde:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	74bb      	strb	r3, [r7, #18]
 8000fe4:	e038      	b.n	8001058 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8000fe6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da15      	bge.n	800101a <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8000fee:	7f7b      	ldrb	r3, [r7, #29]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	88bb      	ldrh	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	7cbb      	ldrb	r3, [r7, #18]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	4413      	add	r3, r2
 8001002:	b29b      	uxth	r3, r3
 8001004:	b218      	sxth	r0, r3
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	8bfb      	ldrh	r3, [r7, #30]
 800100a:	4413      	add	r3, r2
 800100c:	b29b      	uxth	r3, r3
 800100e:	b21b      	sxth	r3, r3
 8001010:	883a      	ldrh	r2, [r7, #0]
 8001012:	4619      	mov	r1, r3
 8001014:	f000 f9d8 	bl	80013c8 <ILI9341_WritePixel>
 8001018:	e018      	b.n	800104c <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 800101a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800101e:	2b01      	cmp	r3, #1
 8001020:	d114      	bne.n	800104c <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001022:	7f7b      	ldrb	r3, [r7, #29]
 8001024:	b29b      	uxth	r3, r3
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	b29a      	uxth	r2, r3
 800102a:	88bb      	ldrh	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	b29a      	uxth	r2, r3
 8001030:	7cbb      	ldrb	r3, [r7, #18]
 8001032:	b29b      	uxth	r3, r3
 8001034:	4413      	add	r3, r2
 8001036:	b29b      	uxth	r3, r3
 8001038:	b218      	sxth	r0, r3
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	8bfb      	ldrh	r3, [r7, #30]
 800103e:	4413      	add	r3, r2
 8001040:	b29b      	uxth	r3, r3
 8001042:	b21b      	sxth	r3, r3
 8001044:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001046:	4619      	mov	r1, r3
 8001048:	f000 f9be 	bl	80013c8 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 800104c:	7cbb      	ldrb	r3, [r7, #18]
 800104e:	3301      	adds	r3, #1
 8001050:	74bb      	strb	r3, [r7, #18]
 8001052:	7cfb      	ldrb	r3, [r7, #19]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	74fb      	strb	r3, [r7, #19]
 8001058:	7cba      	ldrb	r2, [r7, #18]
 800105a:	7f3b      	ldrb	r3, [r7, #28]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3c2      	bcc.n	8000fe6 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001066:	7f7b      	ldrb	r3, [r7, #29]
 8001068:	3301      	adds	r3, #1
 800106a:	777b      	strb	r3, [r7, #29]
 800106c:	7f7a      	ldrb	r2, [r7, #29]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	da00      	bge.n	800107a <EF_PutChar+0x186>
 8001078:	3307      	adds	r3, #7
 800107a:	10db      	asrs	r3, r3, #3
 800107c:	429a      	cmp	r2, r3
 800107e:	dda1      	ble.n	8000fc4 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001080:	8bfb      	ldrh	r3, [r7, #30]
 8001082:	3301      	adds	r3, #1
 8001084:	83fb      	strh	r3, [r7, #30]
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <EF_PutChar+0x1b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	8bfa      	ldrh	r2, [r7, #30]
 8001090:	429a      	cmp	r2, r3
 8001092:	d391      	bcc.n	8000fb8 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <EF_PutChar+0x1b8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	7c7b      	ldrb	r3, [r7, #17]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	781b      	ldrb	r3, [r3, #0]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000098 	.word	0x20000098

080010b0 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4603      	mov	r3, r0
 80010c0:	817b      	strh	r3, [r7, #10]
 80010c2:	460b      	mov	r3, r1
 80010c4:	813b      	strh	r3, [r7, #8]
 80010c6:	4613      	mov	r3, r2
 80010c8:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff f892 	bl	80001f4 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 80010d4:	2300      	movs	r3, #0
 80010d6:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 80010d8:	2300      	movs	r3, #0
 80010da:	75fb      	strb	r3, [r7, #23]
 80010dc:	e05a      	b.n	8001194 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2bc5      	cmp	r3, #197	; 0xc5
 80010e8:	d817      	bhi.n	800111a <EF_PutString+0x6a>
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2bc2      	cmp	r3, #194	; 0xc2
 80010f4:	d911      	bls.n	800111a <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	7818      	ldrb	r0, [r3, #0]
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	3301      	adds	r3, #1
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fdf7 	bl	8000cfc <EF_DecodePolish>
 800110e:	4603      	mov	r3, r0
 8001110:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	3301      	adds	r3, #1
 8001116:	75fb      	strb	r3, [r7, #23]
 8001118:	e004      	b.n	8001124 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001124:	897a      	ldrh	r2, [r7, #10]
 8001126:	8abb      	ldrh	r3, [r7, #20]
 8001128:	4413      	add	r3, r2
 800112a:	b299      	uxth	r1, r3
 800112c:	88fc      	ldrh	r4, [r7, #6]
 800112e:	893a      	ldrh	r2, [r7, #8]
 8001130:	7cf8      	ldrb	r0, [r7, #19]
 8001132:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	4623      	mov	r3, r4
 800113e:	f7ff fed9 	bl	8000ef4 <EF_PutChar>
 8001142:	4603      	mov	r3, r0
 8001144:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001146:	7c7b      	ldrb	r3, [r7, #17]
 8001148:	b29a      	uxth	r2, r3
 800114a:	8abb      	ldrh	r3, [r7, #20]
 800114c:	4413      	add	r3, r2
 800114e:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001150:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001154:	2b01      	cmp	r3, #1
 8001156:	d113      	bne.n	8001180 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001158:	897a      	ldrh	r2, [r7, #10]
 800115a:	8abb      	ldrh	r3, [r7, #20]
 800115c:	18d4      	adds	r4, r2, r3
 800115e:	893d      	ldrh	r5, [r7, #8]
 8001160:	f7ff fdc0 	bl	8000ce4 <EF_GetFontSpaceWidth>
 8001164:	4603      	mov	r3, r0
 8001166:	b29e      	uxth	r6, r3
 8001168:	f7ff fd98 	bl	8000c9c <EF_GetFontHeight>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	4632      	mov	r2, r6
 8001178:	4629      	mov	r1, r5
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff face 	bl	800071c <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001180:	f7ff fdb0 	bl	8000ce4 <EF_GetFontSpaceWidth>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	8abb      	ldrh	r3, [r7, #20]
 800118a:	4413      	add	r3, r2
 800118c:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	3301      	adds	r3, #1
 8001192:	75fb      	strb	r3, [r7, #23]
 8001194:	7dfa      	ldrb	r2, [r7, #23]
 8001196:	7cbb      	ldrb	r3, [r7, #18]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3a0      	bcc.n	80010de <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 800119c:	8abb      	ldrh	r3, [r7, #20]
 800119e:	b2dc      	uxtb	r4, r3
 80011a0:	f7ff fda0 	bl	8000ce4 <EF_GetFontSpaceWidth>
 80011a4:	4603      	mov	r3, r0
 80011a6:	1ae3      	subs	r3, r4, r3
 80011a8:	b2db      	uxtb	r3, r3
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011b2 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f001 f9ac 	bl	8002518 <HAL_Delay>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 80011d2:	e014      	b.n	80011fe <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <ILI9341_SendToTFT+0x5c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d10c      	bne.n	80011fe <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <ILI9341_SendToTFT+0x5c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	330c      	adds	r3, #12
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3301      	adds	r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e7      	bne.n	80011d4 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001204:	bf00      	nop
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <ILI9341_SendToTFT+0x5c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	2b80      	cmp	r3, #128	; 0x80
 8001214:	d0f7      	beq.n	8001206 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	2000009c 	.word	0x2000009c

08001228 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <ILI9341_SendComand+0x40>)
 800123a:	f002 f829 	bl	8003290 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <ILI9341_SendComand+0x40>)
 8001246:	f002 f823 	bl	8003290 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffba 	bl	80011c8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <ILI9341_SendComand+0x40>)
 800125c:	f002 f818 	bl	8003290 <HAL_GPIO_WritePin>
#endif
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020400 	.word	0x40020400

0800126c <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001280:	4811      	ldr	r0, [pc, #68]	; (80012c8 <ILI9341_SendCommandAndData+0x5c>)
 8001282:	f002 f805 	bl	8003290 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128c:	480e      	ldr	r0, [pc, #56]	; (80012c8 <ILI9341_SendCommandAndData+0x5c>)
 800128e:	f001 ffff 	bl	8003290 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001292:	f107 030f 	add.w	r3, r7, #15
 8001296:	2101      	movs	r1, #1
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff95 	bl	80011c8 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a4:	4808      	ldr	r0, [pc, #32]	; (80012c8 <ILI9341_SendCommandAndData+0x5c>)
 80012a6:	f001 fff3 	bl	8003290 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	68b8      	ldr	r0, [r7, #8]
 80012ae:	f7ff ff8b 	bl	80011c8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <ILI9341_SendCommandAndData+0x5c>)
 80012ba:	f001 ffe9 	bl	8003290 <HAL_GPIO_WritePin>
#endif

}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40020400 	.word	0x40020400

080012cc <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d820      	bhi.n	800131e <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d816      	bhi.n	8001310 <ILI9341_SetRotation+0x44>
 80012e2:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <ILI9341_SetRotation+0x1c>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	080012ff 	.word	0x080012ff
 80012f0:	08001305 	.word	0x08001305
 80012f4:	0800130b 	.word	0x0800130b
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 80012f8:	2348      	movs	r3, #72	; 0x48
 80012fa:	71fb      	strb	r3, [r7, #7]
		break;
 80012fc:	e008      	b.n	8001310 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 80012fe:	2328      	movs	r3, #40	; 0x28
 8001300:	71fb      	strb	r3, [r7, #7]
		break;
 8001302:	e005      	b.n	8001310 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001304:	2388      	movs	r3, #136	; 0x88
 8001306:	71fb      	strb	r3, [r7, #7]
		break;
 8001308:	e002      	b.n	8001310 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 800130a:	23e8      	movs	r3, #232	; 0xe8
 800130c:	71fb      	strb	r3, [r7, #7]
		break;
 800130e:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	2201      	movs	r2, #1
 8001314:	4619      	mov	r1, r3
 8001316:	2036      	movs	r0, #54	; 0x36
 8001318:	f7ff ffa8 	bl	800126c <ILI9341_SendCommandAndData>
 800131c:	e000      	b.n	8001320 <ILI9341_SetRotation+0x54>
		return;
 800131e:	bf00      	nop
}
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop

08001328 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	80fb      	strh	r3, [r7, #6]
 800133a:	4603      	mov	r3, r0
 800133c:	80bb      	strh	r3, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	807b      	strh	r3, [r7, #2]
 8001342:	4613      	mov	r3, r2
 8001344:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001346:	88fa      	ldrh	r2, [r7, #6]
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	4413      	add	r3, r2
 800134c:	b29b      	uxth	r3, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	81fb      	strh	r3, [r7, #14]
 8001352:	88ba      	ldrh	r2, [r7, #4]
 8001354:	883b      	ldrh	r3, [r7, #0]
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	3b01      	subs	r3, #1
 800135c:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	b29b      	uxth	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b29b      	uxth	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001378:	89fb      	ldrh	r3, [r7, #14]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2204      	movs	r2, #4
 8001384:	4619      	mov	r1, r3
 8001386:	202a      	movs	r0, #42	; 0x2a
 8001388:	f7ff ff70 	bl	800126c <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	b29b      	uxth	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001396:	88bb      	ldrh	r3, [r7, #4]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 800139c:	89bb      	ldrh	r3, [r7, #12]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 80013a6:	89bb      	ldrh	r3, [r7, #12]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	2204      	movs	r2, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	202b      	movs	r0, #43	; 0x2b
 80013b6:	f7ff ff59 	bl	800126c <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 80013ba:	202c      	movs	r0, #44	; 0x2c
 80013bc:	f7ff ff34 	bl	8001228 <ILI9341_SendComand>

}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}

080013c8 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
 80013d2:	460b      	mov	r3, r1
 80013d4:	80bb      	strh	r3, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 80013da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db21      	blt.n	8001426 <ILI9341_WritePixel+0x5e>
 80013e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013ea:	da1c      	bge.n	8001426 <ILI9341_WritePixel+0x5e>
 80013ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db18      	blt.n	8001426 <ILI9341_WritePixel+0x5e>
 80013f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013f8:	2bef      	cmp	r3, #239	; 0xef
 80013fa:	dc14      	bgt.n	8001426 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 80013fc:	88f8      	ldrh	r0, [r7, #6]
 80013fe:	88b9      	ldrh	r1, [r7, #4]
 8001400:	2301      	movs	r3, #1
 8001402:	2201      	movs	r2, #1
 8001404:	f7ff ff90 	bl	8001328 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	b29b      	uxth	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2202      	movs	r2, #2
 800141e:	4619      	mov	r1, r3
 8001420:	202c      	movs	r0, #44	; 0x2c
 8001422:	f7ff ff23 	bl	800126c <ILI9341_SendCommandAndData>
	}

}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <ILI9341_ClearDisplay>:
	}
}


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800143a:	23f0      	movs	r3, #240	; 0xf0
 800143c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001440:	2100      	movs	r1, #0
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff ff70 	bl	8001328 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001448:	202c      	movs	r0, #44	; 0x2c
 800144a:	f7ff feed 	bl	8001228 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 800144e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001452:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145a:	4822      	ldr	r0, [pc, #136]	; (80014e4 <ILI9341_ClearDisplay+0xb4>)
 800145c:	f001 ff18 	bl	8003290 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001466:	481f      	ldr	r0, [pc, #124]	; (80014e4 <ILI9341_ClearDisplay+0xb4>)
 8001468:	f001 ff12 	bl	8003290 <HAL_GPIO_WritePin>

    while (Length > 0U)
 800146c:	e023      	b.n	80014b6 <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <ILI9341_ClearDisplay+0xb8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b02      	cmp	r3, #2
 800147c:	d11b      	bne.n	80014b6 <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <ILI9341_ClearDisplay+0xb8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	330c      	adds	r3, #12
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001490:	bf00      	nop
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <ILI9341_ClearDisplay+0xb8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d1f7      	bne.n	8001492 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <ILI9341_ClearDisplay+0xb8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	330c      	adds	r3, #12
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1d8      	bne.n	800146e <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 80014bc:	bf00      	nop
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <ILI9341_ClearDisplay+0xb8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	2b80      	cmp	r3, #128	; 0x80
 80014cc:	d0f7      	beq.n	80014be <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <ILI9341_ClearDisplay+0xb4>)
 80014d6:	f001 fedb 	bl	8003290 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40020400 	.word	0x40020400
 80014e8:	2000009c 	.word	0x2000009c

080014ec <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 80014f4:	4a24      	ldr	r2, [pc, #144]	; (8001588 <ILI9341_Init+0x9c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <ILI9341_Init+0xa0>)
 80014fc:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800150c:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001514:	481e      	ldr	r0, [pc, #120]	; (8001590 <ILI9341_Init+0xa4>)
 8001516:	f001 febb 	bl	8003290 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800151a:	200a      	movs	r0, #10
 800151c:	f7ff fe49 	bl	80011b2 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001526:	481a      	ldr	r0, [pc, #104]	; (8001590 <ILI9341_Init+0xa4>)
 8001528:	f001 feb2 	bl	8003290 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800152c:	200a      	movs	r0, #10
 800152e:	f7ff fe40 	bl	80011b2 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001532:	e019      	b.n	8001568 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60fa      	str	r2, [r7, #12]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 800153e:	7abb      	ldrb	r3, [r7, #10]
 8001540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001544:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 8001546:	7a7a      	ldrb	r2, [r7, #9]
 8001548:	7afb      	ldrb	r3, [r7, #11]
 800154a:	68f9      	ldr	r1, [r7, #12]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fe8d 	bl	800126c <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 8001552:	7a7b      	ldrb	r3, [r7, #9]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 800155a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800155e:	2b00      	cmp	r3, #0
 8001560:	da02      	bge.n	8001568 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 8001562:	2096      	movs	r0, #150	; 0x96
 8001564:	f7ff fe25 	bl	80011b2 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60fa      	str	r2, [r7, #12]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	72fb      	strb	r3, [r7, #11]
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1dd      	bne.n	8001534 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8001578:	2003      	movs	r0, #3
 800157a:	f7ff fea7 	bl	80012cc <ILI9341_SetRotation>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000009c 	.word	0x2000009c
 800158c:	080084b4 	.word	0x080084b4
 8001590:	40020400 	.word	0x40020400

08001594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_DMA_Init+0x4c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <MX_DMA_Init+0x4c>)
 80015a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_DMA_Init+0x4c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2010      	movs	r0, #16
 80015bc:	f001 f8ab 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015c0:	2010      	movs	r0, #16
 80015c2:	f001 f8c4 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2011      	movs	r0, #17
 80015cc:	f001 f8a3 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015d0:	2011      	movs	r0, #17
 80015d2:	f001 f8bc 	bl	800274e <HAL_NVIC_EnableIRQ>

}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <system_init>:

#include "functions.h"
#include "logo.h"


uint8_t system_init(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80015ea:	f24c 6018 	movw	r0, #50712	; 0xc618
 80015ee:	f7ff ff1f 	bl	8001430 <ILI9341_ClearDisplay>
	  GFX_Image(40, 50, logo, 240, 140);
 80015f2:	238c      	movs	r3, #140	; 0x8c
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	23f0      	movs	r3, #240	; 0xf0
 80015f8:	4a6a      	ldr	r2, [pc, #424]	; (80017a4 <system_init+0x1c0>)
 80015fa:	2132      	movs	r1, #50	; 0x32
 80015fc:	2028      	movs	r0, #40	; 0x28
 80015fe:	f7ff faf9 	bl	8000bf4 <GFX_Image>

	  HAL_Delay(200); // !!!! TODO
 8001602:	20c8      	movs	r0, #200	; 0xc8
 8001604:	f000 ff88 	bl	8002518 <HAL_Delay>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8001608:	4867      	ldr	r0, [pc, #412]	; (80017a8 <system_init+0x1c4>)
 800160a:	f7ff fb37 	bl	8000c7c <EF_SetFont>
	  uint8_t Len = sprintf(Msg, "Inicjalizacja...");
 800160e:	4967      	ldr	r1, [pc, #412]	; (80017ac <system_init+0x1c8>)
 8001610:	4867      	ldr	r0, [pc, #412]	; (80017b0 <system_init+0x1cc>)
 8001612:	f003 fc9d 	bl	8004f50 <siprintf>
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800161a:	2300      	movs	r3, #0
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	2300      	movs	r3, #0
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2300      	movs	r3, #0
 8001624:	2214      	movs	r2, #20
 8001626:	213c      	movs	r1, #60	; 0x3c
 8001628:	4861      	ldr	r0, [pc, #388]	; (80017b0 <system_init+0x1cc>)
 800162a:	f7ff fd41 	bl	80010b0 <EF_PutString>
	  Len++;
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	3301      	adds	r3, #1
 8001632:	71fb      	strb	r3, [r7, #7]
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 8001634:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	2305      	movs	r3, #5
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2314      	movs	r3, #20
 8001640:	2214      	movs	r2, #20
 8001642:	21c8      	movs	r1, #200	; 0xc8
 8001644:	203c      	movs	r0, #60	; 0x3c
 8001646:	f7ff fa08 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 800164a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2305      	movs	r3, #5
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2314      	movs	r3, #20
 8001656:	2214      	movs	r2, #20
 8001658:	21c8      	movs	r1, #200	; 0xc8
 800165a:	205a      	movs	r0, #90	; 0x5a
 800165c:	f7ff f9fd 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 8001660:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	2305      	movs	r3, #5
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2314      	movs	r3, #20
 800166c:	2214      	movs	r2, #20
 800166e:	21c8      	movs	r1, #200	; 0xc8
 8001670:	2078      	movs	r0, #120	; 0x78
 8001672:	f7ff f9f2 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 8001676:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	2305      	movs	r3, #5
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2314      	movs	r3, #20
 8001682:	2214      	movs	r2, #20
 8001684:	21c8      	movs	r1, #200	; 0xc8
 8001686:	2096      	movs	r0, #150	; 0x96
 8001688:	f7ff f9e7 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 800168c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	2305      	movs	r3, #5
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2314      	movs	r3, #20
 8001698:	2214      	movs	r2, #20
 800169a:	21c8      	movs	r1, #200	; 0xc8
 800169c:	20b4      	movs	r0, #180	; 0xb4
 800169e:	f7ff f9dc 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 80016a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	2305      	movs	r3, #5
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2314      	movs	r3, #20
 80016ae:	2214      	movs	r2, #20
 80016b0:	21c8      	movs	r1, #200	; 0xc8
 80016b2:	20d2      	movs	r0, #210	; 0xd2
 80016b4:	f7ff f9d1 	bl	8000a5a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 80016b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	2305      	movs	r3, #5
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2314      	movs	r3, #20
 80016c4:	2214      	movs	r2, #20
 80016c6:	21c8      	movs	r1, #200	; 0xc8
 80016c8:	20f0      	movs	r0, #240	; 0xf0
 80016ca:	f7ff f9c6 	bl	8000a5a <GFX_DrawRoundRectangle>

	  HAL_Delay(100); // !!!! TODO
 80016ce:	2064      	movs	r0, #100	; 0x64
 80016d0:	f000 ff22 	bl	8002518 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 80016d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2305      	movs	r3, #5
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2314      	movs	r3, #20
 80016e0:	2214      	movs	r2, #20
 80016e2:	21c8      	movs	r1, #200	; 0xc8
 80016e4:	203c      	movs	r0, #60	; 0x3c
 80016e6:	f7ff fa35 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 80016ea:	2064      	movs	r0, #100	; 0x64
 80016ec:	f000 ff14 	bl	8002518 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 80016f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	2305      	movs	r3, #5
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2314      	movs	r3, #20
 80016fc:	2214      	movs	r2, #20
 80016fe:	21c8      	movs	r1, #200	; 0xc8
 8001700:	205a      	movs	r0, #90	; 0x5a
 8001702:	f7ff fa27 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 8001706:	2064      	movs	r0, #100	; 0x64
 8001708:	f000 ff06 	bl	8002518 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 800170c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	2305      	movs	r3, #5
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2314      	movs	r3, #20
 8001718:	2214      	movs	r2, #20
 800171a:	21c8      	movs	r1, #200	; 0xc8
 800171c:	2078      	movs	r0, #120	; 0x78
 800171e:	f7ff fa19 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 8001722:	2064      	movs	r0, #100	; 0x64
 8001724:	f000 fef8 	bl	8002518 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 8001728:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	2305      	movs	r3, #5
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2314      	movs	r3, #20
 8001734:	2214      	movs	r2, #20
 8001736:	21c8      	movs	r1, #200	; 0xc8
 8001738:	2096      	movs	r0, #150	; 0x96
 800173a:	f7ff fa0b 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 800173e:	2064      	movs	r0, #100	; 0x64
 8001740:	f000 feea 	bl	8002518 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 8001744:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	2305      	movs	r3, #5
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2314      	movs	r3, #20
 8001750:	2214      	movs	r2, #20
 8001752:	21c8      	movs	r1, #200	; 0xc8
 8001754:	20b4      	movs	r0, #180	; 0xb4
 8001756:	f7ff f9fd 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 800175a:	2064      	movs	r0, #100	; 0x64
 800175c:	f000 fedc 	bl	8002518 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 8001760:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	2305      	movs	r3, #5
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2314      	movs	r3, #20
 800176c:	2214      	movs	r2, #20
 800176e:	21c8      	movs	r1, #200	; 0xc8
 8001770:	20d2      	movs	r0, #210	; 0xd2
 8001772:	f7ff f9ef 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 8001776:	2064      	movs	r0, #100	; 0x64
 8001778:	f000 fece 	bl	8002518 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 800177c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	2305      	movs	r3, #5
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2314      	movs	r3, #20
 8001788:	2214      	movs	r2, #20
 800178a:	21c8      	movs	r1, #200	; 0xc8
 800178c:	20f0      	movs	r0, #240	; 0xf0
 800178e:	f7ff f9e1 	bl	8000b54 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(200); // !!!! TODO
 8001792:	20c8      	movs	r0, #200	; 0xc8
 8001794:	f000 fec0 	bl	8002518 <HAL_Delay>



	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	08008524 	.word	0x08008524
 80017a8:	080084a8 	.word	0x080084a8
 80017ac:	08006464 	.word	0x08006464
 80017b0:	200000a0 	.word	0x200000a0

080017b4 <showCurrentParameters>:

void showCurrentParameters(uint8_t temp_zew, uint8_t temp_wew, uint8_t time, uint8_t water_lvl, uint8_t humidity)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	4604      	mov	r4, r0
 80017bc:	4608      	mov	r0, r1
 80017be:	4611      	mov	r1, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	4603      	mov	r3, r0
 80017c8:	71bb      	strb	r3, [r7, #6]
 80017ca:	460b      	mov	r3, r1
 80017cc:	717b      	strb	r3, [r7, #5]
 80017ce:	4613      	mov	r3, r2
 80017d0:	713b      	strb	r3, [r7, #4]
		// TODO zrobić żeby czytało właściwe wartości
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80017d2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80017d6:	f7ff fe2b 	bl	8001430 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80017da:	482d      	ldr	r0, [pc, #180]	; (8001890 <showCurrentParameters+0xdc>)
 80017dc:	f7ff fa4e 	bl	8000c7c <EF_SetFont>
	  uint8_t Len = sprintf(Msg, "Czas: 00:00:00");
 80017e0:	492c      	ldr	r1, [pc, #176]	; (8001894 <showCurrentParameters+0xe0>)
 80017e2:	482d      	ldr	r0, [pc, #180]	; (8001898 <showCurrentParameters+0xe4>)
 80017e4:	f003 fbb4 	bl	8004f50 <siprintf>
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80017ec:	2300      	movs	r3, #0
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	2214      	movs	r2, #20
 80017f8:	2114      	movs	r1, #20
 80017fa:	4827      	ldr	r0, [pc, #156]	; (8001898 <showCurrentParameters+0xe4>)
 80017fc:	f7ff fc58 	bl	80010b0 <EF_PutString>
	  Len = sprintf(Msg, "Temp. zewn: 0`C");
 8001800:	4926      	ldr	r1, [pc, #152]	; (800189c <showCurrentParameters+0xe8>)
 8001802:	4825      	ldr	r0, [pc, #148]	; (8001898 <showCurrentParameters+0xe4>)
 8001804:	f003 fba4 	bl	8004f50 <siprintf>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 50, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800180c:	2300      	movs	r3, #0
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2300      	movs	r3, #0
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	2232      	movs	r2, #50	; 0x32
 8001818:	2114      	movs	r1, #20
 800181a:	481f      	ldr	r0, [pc, #124]	; (8001898 <showCurrentParameters+0xe4>)
 800181c:	f7ff fc48 	bl	80010b0 <EF_PutString>
	  Len = sprintf(Msg, "Temp. wewn: 0`C");
 8001820:	491f      	ldr	r1, [pc, #124]	; (80018a0 <showCurrentParameters+0xec>)
 8001822:	481d      	ldr	r0, [pc, #116]	; (8001898 <showCurrentParameters+0xe4>)
 8001824:	f003 fb94 	bl	8004f50 <siprintf>
 8001828:	4603      	mov	r3, r0
 800182a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 80, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800182c:	2300      	movs	r3, #0
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	2300      	movs	r3, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	2250      	movs	r2, #80	; 0x50
 8001838:	2114      	movs	r1, #20
 800183a:	4817      	ldr	r0, [pc, #92]	; (8001898 <showCurrentParameters+0xe4>)
 800183c:	f7ff fc38 	bl	80010b0 <EF_PutString>
	  Len = sprintf(Msg, "Wilgotność: 0%");
 8001840:	4918      	ldr	r1, [pc, #96]	; (80018a4 <showCurrentParameters+0xf0>)
 8001842:	4815      	ldr	r0, [pc, #84]	; (8001898 <showCurrentParameters+0xe4>)
 8001844:	f003 fb84 	bl	8004f50 <siprintf>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 110, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800184c:	2300      	movs	r3, #0
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2300      	movs	r3, #0
 8001856:	226e      	movs	r2, #110	; 0x6e
 8001858:	2114      	movs	r1, #20
 800185a:	480f      	ldr	r0, [pc, #60]	; (8001898 <showCurrentParameters+0xe4>)
 800185c:	f7ff fc28 	bl	80010b0 <EF_PutString>
	  Len = sprintf(Msg, "Poziom wody: 0%");
 8001860:	4911      	ldr	r1, [pc, #68]	; (80018a8 <showCurrentParameters+0xf4>)
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <showCurrentParameters+0xe4>)
 8001864:	f003 fb74 	bl	8004f50 <siprintf>
 8001868:	4603      	mov	r3, r0
 800186a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 140, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800186c:	2300      	movs	r3, #0
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	2300      	movs	r3, #0
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	228c      	movs	r2, #140	; 0x8c
 8001878:	2114      	movs	r1, #20
 800187a:	4807      	ldr	r0, [pc, #28]	; (8001898 <showCurrentParameters+0xe4>)
 800187c:	f7ff fc18 	bl	80010b0 <EF_PutString>
	  Len++;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	3301      	adds	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}
 800188e:	bf00      	nop
 8001890:	080084a8 	.word	0x080084a8
 8001894:	08006478 	.word	0x08006478
 8001898:	200000a0 	.word	0x200000a0
 800189c:	08006488 	.word	0x08006488
 80018a0:	08006498 	.word	0x08006498
 80018a4:	080064a8 	.word	0x080064a8
 80018a8:	080064bc 	.word	0x080064bc

080018ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <MX_GPIO_Init+0xe4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a31      	ldr	r2, [pc, #196]	; (8001990 <MX_GPIO_Init+0xe4>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <MX_GPIO_Init+0xe4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <MX_GPIO_Init+0xe4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a2a      	ldr	r2, [pc, #168]	; (8001990 <MX_GPIO_Init+0xe4>)
 80018e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <MX_GPIO_Init+0xe4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <MX_GPIO_Init+0xe4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a23      	ldr	r2, [pc, #140]	; (8001990 <MX_GPIO_Init+0xe4>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <MX_GPIO_Init+0xe4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <MX_GPIO_Init+0xe4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <MX_GPIO_Init+0xe4>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_GPIO_Init+0xe4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001938:	4816      	ldr	r0, [pc, #88]	; (8001994 <MX_GPIO_Init+0xe8>)
 800193a:	f001 fca9 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001944:	4814      	ldr	r0, [pc, #80]	; (8001998 <MX_GPIO_Init+0xec>)
 8001946:	f001 fca3 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 800194a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	480c      	ldr	r0, [pc, #48]	; (8001994 <MX_GPIO_Init+0xe8>)
 8001964:	f001 fb10 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8001968:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_GPIO_Init+0xec>)
 8001982:	f001 fb01 	bl	8002f88 <HAL_GPIO_Init>

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40020800 	.word	0x40020800
 8001998:	40020400 	.word	0x40020400

0800199c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a2:	f000 fd47 	bl	8002434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a6:	f000 f82d 	bl	8001a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019aa:	f7ff ff7f 	bl	80018ac <MX_GPIO_Init>
  MX_SPI1_Init();
 80019ae:	f000 f96b 	bl	8001c88 <MX_SPI1_Init>
  MX_DMA_Init();
 80019b2:	f7ff fdef 	bl	8001594 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019b6:	f000 fc35 	bl	8002224 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1);
 80019ba:	480f      	ldr	r0, [pc, #60]	; (80019f8 <main+0x5c>)
 80019bc:	f7ff fd96 	bl	80014ec <ILI9341_Init>

  system_init();
 80019c0:	f7ff fe10 	bl	80015e4 <system_init>

  showCurrentParameters(0, 0, 0, 0, 0);
 80019c4:	2300      	movs	r3, #0
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2300      	movs	r3, #0
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff fef0 	bl	80017b4 <showCurrentParameters>

  UARTDMA_Init(&huartdma2, &huart2);
 80019d4:	4909      	ldr	r1, [pc, #36]	; (80019fc <main+0x60>)
 80019d6:	480a      	ldr	r0, [pc, #40]	; (8001a00 <main+0x64>)
 80019d8:	f000 fbd6 	bl	8002188 <UARTDMA_Init>
  while (1)
  {

	 // ILI9341_DrawImage(40, 50, logo, 240, 140);

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80019dc:	4808      	ldr	r0, [pc, #32]	; (8001a00 <main+0x64>)
 80019de:	f000 fb87 	bl	80020f0 <UARTDMA_IsDataReceivedReady>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <main+0x52>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <main+0x64>)
 80019ea:	f000 f879 	bl	8001ae0 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 80019ee:	4804      	ldr	r0, [pc, #16]	; (8001a00 <main+0x64>)
 80019f0:	f000 fb90 	bl	8002114 <UARTDMA_TransmitEvent>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80019f4:	e7f2      	b.n	80019dc <main+0x40>
 80019f6:	bf00      	nop
 80019f8:	20000210 	.word	0x20000210
 80019fc:	20000328 	.word	0x20000328
 8001a00:	200000c0 	.word	0x200000c0

08001a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b094      	sub	sp, #80	; 0x50
 8001a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0a:	f107 0320 	add.w	r3, r7, #32
 8001a0e:	2230      	movs	r2, #48	; 0x30
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fa94 	bl	8004f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <SystemClock_Config+0xc8>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	4a26      	ldr	r2, [pc, #152]	; (8001acc <SystemClock_Config+0xc8>)
 8001a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a36:	6413      	str	r3, [r2, #64]	; 0x40
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <SystemClock_Config+0xc8>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <SystemClock_Config+0xcc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a20      	ldr	r2, [pc, #128]	; (8001ad0 <SystemClock_Config+0xcc>)
 8001a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <SystemClock_Config+0xcc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001a74:	230c      	movs	r3, #12
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a78:	2360      	movs	r3, #96	; 0x60
 8001a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a80:	2304      	movs	r3, #4
 8001a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a84:	f107 0320 	add.w	r3, r7, #32
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fc1b 	bl	80032c4 <HAL_RCC_OscConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a94:	f000 f81e 	bl	8001ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a98:	230f      	movs	r3, #15
 8001a9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	2103      	movs	r1, #3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 fe7d 	bl	80037b4 <HAL_RCC_ClockConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ac0:	f000 f808 	bl	8001ad4 <Error_Handler>
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3750      	adds	r7, #80	; 0x50
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001adc:	e7fe      	b.n	8001adc <Error_Handler+0x8>
	...

08001ae0 <UART_ParseLine>:
 * 		CHSTATE=1,0\n	// Zmien stan przekaznika 1 na wylaczony
 * 		CHSTATE=2,1\n	// Zmien stan przekaznika 2 na wlaczony
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b094      	sub	sp, #80	; 0x50
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 faa7 	bl	8002042 <UARTDMA_GetLineFromReceiveBuffer>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <UART_ParseLine+0x3a>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	4909      	ldr	r1, [pc, #36]	; (8001b24 <UART_ParseLine+0x44>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 fa45 	bl	8004f90 <strtok>
 8001b06:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <UART_ParseLine+0x48>)
 8001b0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b0c:	f7fe fb68 	bl	80001e0 <strcmp>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <UART_ParseLine+0x3a>
	  {
		  UART_ParseLED();
 8001b16:	f000 f809 	bl	8001b2c <UART_ParseLED>
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	3750      	adds	r7, #80	; 0x50
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	080064cc 	.word	0x080064cc
 8001b28:	080064d0 	.word	0x080064d0

08001b2c <UART_ParseLED>:


/////////////////////////////////////////// FUNKCJA PARSOWANIA USER LED ////////////////////////////////////////////////////////////////////////////

void UART_ParseLED()
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8001b32:	491f      	ldr	r1, [pc, #124]	; (8001bb0 <UART_ParseLED+0x84>)
 8001b34:	2000      	movs	r0, #0
 8001b36:	f003 fa2b 	bl	8004f90 <strtok>
 8001b3a:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d031      	beq.n	8001ba8 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b2f      	cmp	r3, #47	; 0x2f
 8001b4a:	d903      	bls.n	8001b54 <UART_ParseLED+0x28>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b39      	cmp	r3, #57	; 0x39
 8001b52:	d904      	bls.n	8001b5e <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, "LED wrong value. Don't use letters dude!\r\n"); // Print message
 8001b54:	4917      	ldr	r1, [pc, #92]	; (8001bb4 <UART_ParseLED+0x88>)
 8001b56:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <UART_ParseLED+0x8c>)
 8001b58:	f000 faa4 	bl	80020a4 <UARTDMA_Print>
			return;	// And exit parsing
 8001b5c:	e024      	b.n	8001ba8 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f003 f9c0 	bl	8004ee4 <atoi>
 8001b64:	4603      	mov	r3, r0
 8001b66:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d10a      	bne.n	8001b84 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b74:	4811      	ldr	r0, [pc, #68]	; (8001bbc <UART_ParseLED+0x90>)
 8001b76:	f001 fb8b 	bl	8003290 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED On\r\n");
 8001b7a:	4911      	ldr	r1, [pc, #68]	; (8001bc0 <UART_ParseLED+0x94>)
 8001b7c:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <UART_ParseLED+0x8c>)
 8001b7e:	f000 fa91 	bl	80020a4 <UARTDMA_Print>
 8001b82:	e011      	b.n	8001ba8 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10a      	bne.n	8001ba0 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b90:	480a      	ldr	r0, [pc, #40]	; (8001bbc <UART_ParseLED+0x90>)
 8001b92:	f001 fb7d 	bl	8003290 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED Off\r\n");
 8001b96:	490b      	ldr	r1, [pc, #44]	; (8001bc4 <UART_ParseLED+0x98>)
 8001b98:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <UART_ParseLED+0x8c>)
 8001b9a:	f000 fa83 	bl	80020a4 <UARTDMA_Print>
 8001b9e:	e003      	b.n	8001ba8 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, "LED wrong value. Use 0 or 1.\r\n");
 8001ba0:	4909      	ldr	r1, [pc, #36]	; (8001bc8 <UART_ParseLED+0x9c>)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <UART_ParseLED+0x8c>)
 8001ba4:	f000 fa7e 	bl	80020a4 <UARTDMA_Print>
		}
	}
}
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	080064d4 	.word	0x080064d4
 8001bb4:	080064d8 	.word	0x080064d8
 8001bb8:	200000c0 	.word	0x200000c0
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	08006504 	.word	0x08006504
 8001bc4:	08006510 	.word	0x08006510
 8001bc8:	0800651c 	.word	0x0800651c

08001bcc <RB_Read>:
 */
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d101      	bne.n	8001be6 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8001be2:	2301      	movs	r3, #1
 8001be4:	e018      	b.n	8001c18 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	785b      	ldrb	r3, [r3, #1]
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	789a      	ldrb	r2, [r3, #2]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	785b      	ldrb	r3, [r3, #1]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <RB_Read+0x58>)
 8001bfe:	fb83 1302 	smull	r1, r3, r3, r2
 8001c02:	1159      	asrs	r1, r3, #5
 8001c04:	17d3      	asrs	r3, r2, #31
 8001c06:	1ac9      	subs	r1, r1, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	019b      	lsls	r3, r3, #6
 8001c0c:	440b      	add	r3, r1
 8001c0e:	1ad1      	subs	r1, r2, r3
 8001c10:	b2ca      	uxtb	r2, r1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	7e07e07f 	.word	0x7e07e07f

08001c28 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <RB_Write+0x5c>)
 8001c3c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c40:	1159      	asrs	r1, r3, #5
 8001c42:	17d3      	asrs	r3, r2, #31
 8001c44:	1ac9      	subs	r1, r1, r3
 8001c46:	460b      	mov	r3, r1
 8001c48:	019b      	lsls	r3, r3, #6
 8001c4a:	440b      	add	r3, r1
 8001c4c:	1ad1      	subs	r1, r2, r3
 8001c4e:	460b      	mov	r3, r1
 8001c50:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d101      	bne.n	8001c60 <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e00a      	b.n	8001c76 <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	7e07e07f 	.word	0x7e07e07f

08001c88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_SPI1_Init+0x64>)
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <MX_SPI1_Init+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_SPI1_Init+0x64>)
 8001c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_SPI1_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_SPI1_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_SPI1_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_SPI1_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_SPI1_Init+0x64>)
 8001cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_SPI1_Init+0x64>)
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <MX_SPI1_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_SPI1_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <MX_SPI1_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_SPI1_Init+0x64>)
 8001cd4:	220a      	movs	r2, #10
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <MX_SPI1_Init+0x64>)
 8001cda:	f001 ff3b 	bl	8003b54 <HAL_SPI_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ce4:	f7ff fef6 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000210 	.word	0x20000210
 8001cf0:	40013000 	.word	0x40013000

08001cf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_SPI_MspInit+0x84>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d12b      	bne.n	8001d6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d4e:	23e0      	movs	r3, #224	; 0xe0
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d5e:	2305      	movs	r3, #5
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4805      	ldr	r0, [pc, #20]	; (8001d80 <HAL_SPI_MspInit+0x8c>)
 8001d6a:	f001 f90d 	bl	8002f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	; 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40013000 	.word	0x40013000
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_MspInit+0x4c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <NMI_Handler+0x4>

08001dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <HardFault_Handler+0x4>

08001de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <MemManage_Handler+0x4>

08001de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e20:	f000 fb5a 	bl	80024d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <DMA1_Stream5_IRQHandler+0x10>)
 8001e2e:	f000 fe41 	bl	8002ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000268 	.word	0x20000268

08001e3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <DMA1_Stream6_IRQHandler+0x10>)
 8001e42:	f000 fe37 	bl	8002ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200002c8 	.word	0x200002c8

08001e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <USART2_IRQHandler+0x10>)
 8001e56:	f002 f801 	bl	8003e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000328 	.word	0x20000328

08001e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	return 1;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_kill>:

int _kill(int pid, int sig)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e7e:	f003 f835 	bl	8004eec <__errno>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2216      	movs	r2, #22
 8001e86:	601a      	str	r2, [r3, #0]
	return -1;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_exit>:

void _exit (int status)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ffe7 	bl	8001e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea6:	e7fe      	b.n	8001ea6 <_exit+0x12>

08001ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e00a      	b.n	8001ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eba:	f3af 8000 	nop.w
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dbf0      	blt.n	8001eba <_read+0x12>
	}

return len;
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e009      	b.n	8001f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbf1      	blt.n	8001ef4 <_write+0x12>
	}
	return len;
 8001f10:	687b      	ldr	r3, [r7, #4]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_close>:

int _close(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	return -1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f42:	605a      	str	r2, [r3, #4]
	return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_isatty>:

int _isatty(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	return 1;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
	return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f002 ff9a 	bl	8004eec <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20020000 	.word	0x20020000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	2000008c 	.word	0x2000008c
 8001fec:	20000380 	.word	0x20000380

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	33ca      	adds	r3, #202	; 0xca
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fdfd 	bl	8001c28 <RB_Write>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002056:	2b00      	cmp	r3, #0
 8002058:	d01f      	beq.n	800209a <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800205a:	e013      	b.n	8002084 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b0a      	cmp	r3, #10
 8002062:	d10c      	bne.n	800207e <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002070:	3b01      	subs	r3, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 800207a:	2300      	movs	r3, #0
 800207c:	e00e      	b.n	800209c <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3301      	adds	r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3345      	adds	r3, #69	; 0x45
 8002088:	68f9      	ldr	r1, [r7, #12]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fd9e 	bl	8001bcc <RB_Read>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0e2      	beq.n	800205c <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80020b2:	e012      	b.n	80020da <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 80020b4:	7afb      	ldrb	r3, [r7, #11]
 80020b6:	4619      	mov	r1, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffab 	bl	8002014 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3301      	adds	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 80020c4:	7afb      	ldrb	r3, [r7, #11]
 80020c6:	2b0a      	cmp	r3, #10
 80020c8:	d107      	bne.n	80020da <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80020d0:	3301      	adds	r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	72fb      	strb	r3, [r7, #11]
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1e6      	bne.n	80020b4 <UARTDMA_Print+0x10>
		}
	}
}
 80020e6:	bf00      	nop
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 800211c:	2300      	movs	r3, #0
 800211e:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002126:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d027      	beq.n	8002180 <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8002130:	e013      	b.n	800215a <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8002132:	7b7b      	ldrb	r3, [r7, #13]
 8002134:	2b0a      	cmp	r3, #10
 8002136:	d107      	bne.n	8002148 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 800213e:	3b01      	subs	r3, #1
 8002140:	b2da      	uxtb	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	81fa      	strh	r2, [r7, #14]
 800214e:	4619      	mov	r1, r3
 8002150:	7b7a      	ldrb	r2, [r7, #13]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	440b      	add	r3, r1
 8002156:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	33ca      	adds	r3, #202	; 0xca
 800215e:	f107 020d 	add.w	r2, r7, #13
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fd31 	bl	8001bcc <RB_Read>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0e0      	beq.n	8002132 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3389      	adds	r3, #137	; 0x89
 8002178:	89fa      	ldrh	r2, [r7, #14]
 800217a:	4619      	mov	r1, r3
 800217c:	f001 fdc0 	bl	8003d00 <HAL_UART_Transmit_DMA>
	}
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0210 	orr.w	r2, r2, #16
 80021aa:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0210 	orr.w	r2, r2, #16
 80021c2:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0210 	orr.w	r2, r2, #16
 80021da:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3304      	adds	r3, #4
 80021e4:	2241      	movs	r2, #65	; 0x41
 80021e6:	4619      	mov	r1, r3
 80021e8:	f001 fe08 	bl	8003dfc <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0208 	bic.w	r2, r2, #8
 8002202:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0208 	bic.w	r2, r2, #8
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <MX_USART2_UART_Init+0x4c>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <MX_USART2_UART_Init+0x50>)
 800222c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <MX_USART2_UART_Init+0x4c>)
 8002230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002234:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_USART2_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_USART2_UART_Init+0x4c>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <MX_USART2_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_USART2_UART_Init+0x4c>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <MX_USART2_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_USART2_UART_Init+0x4c>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <MX_USART2_UART_Init+0x4c>)
 800225c:	f001 fd03 	bl	8003c66 <HAL_UART_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002266:	f7ff fc35 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000328 	.word	0x20000328
 8002274:	40004400 	.word	0x40004400

08002278 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a4b      	ldr	r2, [pc, #300]	; (80023c4 <HAL_UART_MspInit+0x14c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	f040 8090 	bne.w	80023bc <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <HAL_UART_MspInit+0x150>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	4a48      	ldr	r2, [pc, #288]	; (80023c8 <HAL_UART_MspInit+0x150>)
 80022a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022aa:	6413      	str	r3, [r2, #64]	; 0x40
 80022ac:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_UART_MspInit+0x150>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <HAL_UART_MspInit+0x150>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	4a41      	ldr	r2, [pc, #260]	; (80023c8 <HAL_UART_MspInit+0x150>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6313      	str	r3, [r2, #48]	; 0x30
 80022c8:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_UART_MspInit+0x150>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022d4:	230c      	movs	r3, #12
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e4:	2307      	movs	r3, #7
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	4837      	ldr	r0, [pc, #220]	; (80023cc <HAL_UART_MspInit+0x154>)
 80022f0:	f000 fe4a 	bl	8002f88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80022f4:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <HAL_UART_MspInit+0x158>)
 80022f6:	4a37      	ldr	r2, [pc, #220]	; (80023d4 <HAL_UART_MspInit+0x15c>)
 80022f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80022fa:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <HAL_UART_MspInit+0x158>)
 80022fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002300:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002302:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <HAL_UART_MspInit+0x158>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002308:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <HAL_UART_MspInit+0x158>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_UART_MspInit+0x158>)
 8002310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002314:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002316:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <HAL_UART_MspInit+0x158>)
 8002318:	2200      	movs	r2, #0
 800231a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800231c:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <HAL_UART_MspInit+0x158>)
 800231e:	2200      	movs	r2, #0
 8002320:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_UART_MspInit+0x158>)
 8002324:	2200      	movs	r2, #0
 8002326:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <HAL_UART_MspInit+0x158>)
 800232a:	2200      	movs	r2, #0
 800232c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800232e:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <HAL_UART_MspInit+0x158>)
 8002330:	2200      	movs	r2, #0
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002334:	4826      	ldr	r0, [pc, #152]	; (80023d0 <HAL_UART_MspInit+0x158>)
 8002336:	f000 fa25 	bl	8002784 <HAL_DMA_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002340:	f7ff fbc8 	bl	8001ad4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_UART_MspInit+0x158>)
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
 800234a:	4a21      	ldr	r2, [pc, #132]	; (80023d0 <HAL_UART_MspInit+0x158>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_UART_MspInit+0x160>)
 8002352:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_UART_MspInit+0x164>)
 8002354:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_UART_MspInit+0x160>)
 8002358:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800235c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_UART_MspInit+0x160>)
 8002360:	2240      	movs	r2, #64	; 0x40
 8002362:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_UART_MspInit+0x160>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_UART_MspInit+0x160>)
 800236c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002370:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_UART_MspInit+0x160>)
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <HAL_UART_MspInit+0x160>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_UART_MspInit+0x160>)
 8002380:	2200      	movs	r2, #0
 8002382:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_UART_MspInit+0x160>)
 8002386:	2200      	movs	r2, #0
 8002388:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_UART_MspInit+0x160>)
 800238c:	2200      	movs	r2, #0
 800238e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002390:	4811      	ldr	r0, [pc, #68]	; (80023d8 <HAL_UART_MspInit+0x160>)
 8002392:	f000 f9f7 	bl	8002784 <HAL_DMA_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800239c:	f7ff fb9a 	bl	8001ad4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0d      	ldr	r2, [pc, #52]	; (80023d8 <HAL_UART_MspInit+0x160>)
 80023a4:	635a      	str	r2, [r3, #52]	; 0x34
 80023a6:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <HAL_UART_MspInit+0x160>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2026      	movs	r0, #38	; 0x26
 80023b2:	f000 f9b0 	bl	8002716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023b6:	2026      	movs	r0, #38	; 0x26
 80023b8:	f000 f9c9 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40004400 	.word	0x40004400
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	20000268 	.word	0x20000268
 80023d4:	40026088 	.word	0x40026088
 80023d8:	200002c8 	.word	0x200002c8
 80023dc:	400260a0 	.word	0x400260a0

080023e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002418 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e4:	480d      	ldr	r0, [pc, #52]	; (800241c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023e6:	490e      	ldr	r1, [pc, #56]	; (8002420 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023e8:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023fc:	4c0b      	ldr	r4, [pc, #44]	; (800242c <LoopFillZerobss+0x26>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800240a:	f7ff fdf1 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240e:	f002 fd73 	bl	8004ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002412:	f7ff fac3 	bl	800199c <main>
  bx  lr    
 8002416:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800241c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002420:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002424:	08018e20 	.word	0x08018e20
  ldr r2, =_sbss
 8002428:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800242c:	20000380 	.word	0x20000380

08002430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002430:	e7fe      	b.n	8002430 <ADC_IRQHandler>
	...

08002434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <HAL_Init+0x40>)
 800243e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_Init+0x40>)
 800244a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_Init+0x40>)
 8002456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245c:	2003      	movs	r0, #3
 800245e:	f000 f94f 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002462:	2000      	movs	r0, #0
 8002464:	f000 f808 	bl	8002478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002468:	f7ff fc8c 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023c00 	.word	0x40023c00

08002478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_InitTick+0x54>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x58>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f967 	bl	800276a <HAL_SYSTICK_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00e      	b.n	80024c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0f      	cmp	r3, #15
 80024aa:	d80a      	bhi.n	80024c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ac:	2200      	movs	r2, #0
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f000 f92f 	bl	8002716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b8:	4a06      	ldr	r2, [pc, #24]	; (80024d4 <HAL_InitTick+0x5c>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000008 	.word	0x20000008
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x20>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x24>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_IncTick+0x24>)
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000008 	.word	0x20000008
 80024fc:	2000036c 	.word	0x2000036c

08002500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return uwTick;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_GetTick+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	2000036c 	.word	0x2000036c

08002518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff ffee 	bl	8002500 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d005      	beq.n	800253e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_Delay+0x44>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253e:	bf00      	nop
 8002540:	f7ff ffde 	bl	8002500 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	429a      	cmp	r2, r3
 800254e:	d8f7      	bhi.n	8002540 <HAL_Delay+0x28>
  {
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000008 	.word	0x20000008

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4907      	ldr	r1, [pc, #28]	; (80025fc <__NVIC_EnableIRQ+0x38>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	; (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	; (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
         );
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f7ff ff8e 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff29 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002728:	f7ff ff3e 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 800272c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff ff8e 	bl	8002654 <NVIC_EncodePriority>
 8002738:	4602      	mov	r2, r0
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff5d 	bl	8002600 <__NVIC_SetPriority>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff31 	bl	80025c4 <__NVIC_EnableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ffa2 	bl	80026bc <SysTick_Config>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff feb6 	bl	8002500 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e099      	b.n	80028d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c0:	e00f      	b.n	80027e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c2:	f7ff fe9d 	bl	8002500 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d908      	bls.n	80027e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2203      	movs	r2, #3
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e078      	b.n	80028d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e8      	bne.n	80027c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <HAL_DMA_Init+0x158>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2b04      	cmp	r3, #4
 800283a:	d107      	bne.n	800284c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	4313      	orrs	r3, r2
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f023 0307 	bic.w	r3, r3, #7
 8002862:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	2b04      	cmp	r3, #4
 8002874:	d117      	bne.n	80028a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fb01 	bl	8002e90 <DMA_CheckFifoParam>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028a2:	2301      	movs	r3, #1
 80028a4:	e016      	b.n	80028d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fab8 	bl	8002e24 <DMA_CalcBaseAndBitshift>
 80028b4:	4603      	mov	r3, r0
 80028b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	223f      	movs	r2, #63	; 0x3f
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	f010803f 	.word	0xf010803f

080028e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_DMA_Start_IT+0x26>
 8002902:	2302      	movs	r3, #2
 8002904:	e040      	b.n	8002988 <HAL_DMA_Start_IT+0xa8>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d12f      	bne.n	800297a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fa4a 	bl	8002dc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	223f      	movs	r2, #63	; 0x3f
 800293a:	409a      	lsls	r2, r3
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0216 	orr.w	r2, r2, #22
 800294e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0208 	orr.w	r2, r2, #8
 8002966:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e005      	b.n	8002986 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002982:	2302      	movs	r3, #2
 8002984:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002986:	7dfb      	ldrb	r3, [r7, #23]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800299e:	f7ff fdaf 	bl	8002500 <HAL_GetTick>
 80029a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d008      	beq.n	80029c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2280      	movs	r2, #128	; 0x80
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e052      	b.n	8002a68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0216 	bic.w	r2, r2, #22
 80029d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <HAL_DMA_Abort+0x62>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0208 	bic.w	r2, r2, #8
 8002a00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a12:	e013      	b.n	8002a3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a14:	f7ff fd74 	bl	8002500 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d90c      	bls.n	8002a3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e015      	b.n	8002a68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e4      	bne.n	8002a14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	223f      	movs	r2, #63	; 0x3f
 8002a50:	409a      	lsls	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d004      	beq.n	8002a8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00c      	b.n	8002aa8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2205      	movs	r2, #5
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ac0:	4b92      	ldr	r3, [pc, #584]	; (8002d0c <HAL_DMA_IRQHandler+0x258>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a92      	ldr	r2, [pc, #584]	; (8002d10 <HAL_DMA_IRQHandler+0x25c>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0a9b      	lsrs	r3, r3, #10
 8002acc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	2208      	movs	r2, #8
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01a      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0204 	bic.w	r2, r2, #4
 8002b06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f043 0201 	orr.w	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2201      	movs	r2, #1
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d012      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2201      	movs	r2, #1
 8002b44:	409a      	lsls	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f043 0202 	orr.w	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d012      	beq.n	8002b8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00b      	beq.n	8002b8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	2204      	movs	r2, #4
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	f043 0204 	orr.w	r2, r3, #4
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2210      	movs	r2, #16
 8002b92:	409a      	lsls	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d043      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d03c      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bae:	2210      	movs	r2, #16
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d018      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d108      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d024      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
 8002be2:	e01f      	b.n	8002c24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01b      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
 8002bf4:	e016      	b.n	8002c24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0208 	bic.w	r2, r2, #8
 8002c12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2220      	movs	r2, #32
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 808e 	beq.w	8002d52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8086 	beq.w	8002d52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d136      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0216 	bic.w	r2, r2, #22
 8002c6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d103      	bne.n	8002c8e <HAL_DMA_IRQHandler+0x1da>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0208 	bic.w	r2, r2, #8
 8002c9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	223f      	movs	r2, #63	; 0x3f
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d07d      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
        }
        return;
 8002cca:	e078      	b.n	8002dbe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01c      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d030      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
 8002cf8:	e02b      	b.n	8002d52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d027      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
 8002d0a:	e022      	b.n	8002d52 <HAL_DMA_IRQHandler+0x29e>
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10f      	bne.n	8002d42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0210 	bic.w	r2, r2, #16
 8002d30:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d032      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d022      	beq.n	8002dac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2205      	movs	r2, #5
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	3301      	adds	r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d307      	bcc.n	8002d9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f2      	bne.n	8002d7e <HAL_DMA_IRQHandler+0x2ca>
 8002d98:	e000      	b.n	8002d9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d9a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
 8002dbc:	e000      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dbe:	bf00      	nop
    }
  }
}
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop

08002dc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002de4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d108      	bne.n	8002e08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e06:	e007      	b.n	8002e18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	60da      	str	r2, [r3, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	3b10      	subs	r3, #16
 8002e34:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <DMA_CalcBaseAndBitshift+0x64>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e3e:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <DMA_CalcBaseAndBitshift+0x68>)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d909      	bls.n	8002e66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e5a:	f023 0303 	bic.w	r3, r3, #3
 8002e5e:	1d1a      	adds	r2, r3, #4
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	659a      	str	r2, [r3, #88]	; 0x58
 8002e64:	e007      	b.n	8002e76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	aaaaaaab 	.word	0xaaaaaaab
 8002e8c:	08018bbc 	.word	0x08018bbc

08002e90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d11f      	bne.n	8002eea <DMA_CheckFifoParam+0x5a>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d856      	bhi.n	8002f5e <DMA_CheckFifoParam+0xce>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <DMA_CheckFifoParam+0x28>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002edb 	.word	0x08002edb
 8002ec0:	08002ec9 	.word	0x08002ec9
 8002ec4:	08002f5f 	.word	0x08002f5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d046      	beq.n	8002f62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed8:	e043      	b.n	8002f62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ee2:	d140      	bne.n	8002f66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee8:	e03d      	b.n	8002f66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef2:	d121      	bne.n	8002f38 <DMA_CheckFifoParam+0xa8>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d837      	bhi.n	8002f6a <DMA_CheckFifoParam+0xda>
 8002efa:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <DMA_CheckFifoParam+0x70>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f17 	.word	0x08002f17
 8002f08:	08002f11 	.word	0x08002f11
 8002f0c:	08002f29 	.word	0x08002f29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e030      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d025      	beq.n	8002f6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f26:	e022      	b.n	8002f6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f30:	d11f      	bne.n	8002f72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f36:	e01c      	b.n	8002f72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d903      	bls.n	8002f46 <DMA_CheckFifoParam+0xb6>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d003      	beq.n	8002f4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f44:	e018      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4a:	e015      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	e00b      	b.n	8002f76 <DMA_CheckFifoParam+0xe6>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e00a      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;
 8002f62:	bf00      	nop
 8002f64:	e008      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;
 8002f66:	bf00      	nop
 8002f68:	e006      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e004      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e002      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f72:	bf00      	nop
 8002f74:	e000      	b.n	8002f78 <DMA_CheckFifoParam+0xe8>
      break;
 8002f76:	bf00      	nop
    }
  } 
  
  return status; 
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop

08002f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	; 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	e159      	b.n	8003258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	f040 8148 	bne.w	8003252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d005      	beq.n	8002fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d130      	bne.n	800303c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 0201 	and.w	r2, r3, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b03      	cmp	r3, #3
 8003046:	d017      	beq.n	8003078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d123      	bne.n	80030cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	08da      	lsrs	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3208      	adds	r2, #8
 800308c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	08da      	lsrs	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3208      	adds	r2, #8
 80030c6:	69b9      	ldr	r1, [r7, #24]
 80030c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0203 	and.w	r2, r3, #3
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a2 	beq.w	8003252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b57      	ldr	r3, [pc, #348]	; (8003270 <HAL_GPIO_Init+0x2e8>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	4a56      	ldr	r2, [pc, #344]	; (8003270 <HAL_GPIO_Init+0x2e8>)
 8003118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800311c:	6453      	str	r3, [r2, #68]	; 0x44
 800311e:	4b54      	ldr	r3, [pc, #336]	; (8003270 <HAL_GPIO_Init+0x2e8>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800312a:	4a52      	ldr	r2, [pc, #328]	; (8003274 <HAL_GPIO_Init+0x2ec>)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	3302      	adds	r3, #2
 8003132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a49      	ldr	r2, [pc, #292]	; (8003278 <HAL_GPIO_Init+0x2f0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x202>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a48      	ldr	r2, [pc, #288]	; (800327c <HAL_GPIO_Init+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x1fe>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a47      	ldr	r2, [pc, #284]	; (8003280 <HAL_GPIO_Init+0x2f8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x1fa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a46      	ldr	r2, [pc, #280]	; (8003284 <HAL_GPIO_Init+0x2fc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x1f6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a45      	ldr	r2, [pc, #276]	; (8003288 <HAL_GPIO_Init+0x300>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x1f2>
 8003176:	2304      	movs	r3, #4
 8003178:	e008      	b.n	800318c <HAL_GPIO_Init+0x204>
 800317a:	2307      	movs	r3, #7
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x204>
 800317e:	2303      	movs	r3, #3
 8003180:	e004      	b.n	800318c <HAL_GPIO_Init+0x204>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_Init+0x204>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_Init+0x204>
 800318a:	2300      	movs	r3, #0
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f002 0203 	and.w	r2, r2, #3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800319c:	4935      	ldr	r1, [pc, #212]	; (8003274 <HAL_GPIO_Init+0x2ec>)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031aa:	4b38      	ldr	r3, [pc, #224]	; (800328c <HAL_GPIO_Init+0x304>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ce:	4a2f      	ldr	r2, [pc, #188]	; (800328c <HAL_GPIO_Init+0x304>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HAL_GPIO_Init+0x304>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031f8:	4a24      	ldr	r2, [pc, #144]	; (800328c <HAL_GPIO_Init+0x304>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_GPIO_Init+0x304>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003222:	4a1a      	ldr	r2, [pc, #104]	; (800328c <HAL_GPIO_Init+0x304>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003228:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_GPIO_Init+0x304>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800324c:	4a0f      	ldr	r2, [pc, #60]	; (800328c <HAL_GPIO_Init+0x304>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3301      	adds	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	f67f aea2 	bls.w	8002fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40013800 	.word	0x40013800
 8003278:	40020000 	.word	0x40020000
 800327c:	40020400 	.word	0x40020400
 8003280:	40020800 	.word	0x40020800
 8003284:	40020c00 	.word	0x40020c00
 8003288:	40021000 	.word	0x40021000
 800328c:	40013c00 	.word	0x40013c00

08003290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
 800329c:	4613      	mov	r3, r2
 800329e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ac:	e003      	b.n	80032b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	041a      	lsls	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	619a      	str	r2, [r3, #24]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e264      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d075      	beq.n	80033ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032e2:	4ba3      	ldr	r3, [pc, #652]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d00c      	beq.n	8003308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ee:	4ba0      	ldr	r3, [pc, #640]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d112      	bne.n	8003320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fa:	4b9d      	ldr	r3, [pc, #628]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003306:	d10b      	bne.n	8003320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	4b99      	ldr	r3, [pc, #612]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05b      	beq.n	80033cc <HAL_RCC_OscConfig+0x108>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d157      	bne.n	80033cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e23f      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x74>
 800332a:	4b91      	ldr	r3, [pc, #580]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a90      	ldr	r2, [pc, #576]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0xb0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x98>
 8003342:	4b8b      	ldr	r3, [pc, #556]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a8a      	ldr	r2, [pc, #552]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a87      	ldr	r2, [pc, #540]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xb0>
 800335c:	4b84      	ldr	r3, [pc, #528]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a83      	ldr	r2, [pc, #524]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b81      	ldr	r3, [pc, #516]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a80      	ldr	r2, [pc, #512]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7ff f8c0 	bl	8002500 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7ff f8bc 	bl	8002500 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e204      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0xc0>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7ff f8ac 	bl	8002500 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ac:	f7ff f8a8 	bl	8002500 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1f0      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0xe8>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d063      	beq.n	80034a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033da:	4b65      	ldr	r3, [pc, #404]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b62      	ldr	r3, [pc, #392]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b5f      	ldr	r3, [pc, #380]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b5c      	ldr	r3, [pc, #368]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x152>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1c4      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b56      	ldr	r3, [pc, #344]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4952      	ldr	r1, [pc, #328]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HAL_RCC_OscConfig+0x2b0>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7ff f861 	bl	8002500 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7ff f85d 	bl	8002500 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1a5      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b46      	ldr	r3, [pc, #280]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4940      	ldr	r1, [pc, #256]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <HAL_RCC_OscConfig+0x2b0>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7ff f840 	bl	8002500 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003484:	f7ff f83c 	bl	8002500 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e184      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b36      	ldr	r3, [pc, #216]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d030      	beq.n	8003510 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b30      	ldr	r3, [pc, #192]	; (8003578 <HAL_RCC_OscConfig+0x2b4>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7ff f820 	bl	8002500 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7ff f81c 	bl	8002500 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e164      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b26      	ldr	r3, [pc, #152]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x200>
 80034e2:	e015      	b.n	8003510 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_RCC_OscConfig+0x2b4>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ea:	f7ff f809 	bl	8002500 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7ff f805 	bl	8002500 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e14d      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80a0 	beq.w	800365e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10f      	bne.n	800354e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	4a0e      	ldr	r2, [pc, #56]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353c:	6413      	str	r3, [r2, #64]	; 0x40
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_OscConfig+0x2b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d121      	bne.n	800359e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <HAL_RCC_OscConfig+0x2b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a07      	ldr	r2, [pc, #28]	; (800357c <HAL_RCC_OscConfig+0x2b8>)
 8003560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003566:	f7fe ffcb 	bl	8002500 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	e011      	b.n	8003592 <HAL_RCC_OscConfig+0x2ce>
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	42470000 	.word	0x42470000
 8003578:	42470e80 	.word	0x42470e80
 800357c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003580:	f7fe ffbe 	bl	8002500 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e106      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCC_OscConfig+0x4e4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_OscConfig+0x2f0>
 80035a6:	4b81      	ldr	r3, [pc, #516]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a80      	ldr	r2, [pc, #512]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
 80035b2:	e01c      	b.n	80035ee <HAL_RCC_OscConfig+0x32a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCC_OscConfig+0x312>
 80035bc:	4b7b      	ldr	r3, [pc, #492]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	4a7a      	ldr	r2, [pc, #488]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	6713      	str	r3, [r2, #112]	; 0x70
 80035c8:	4b78      	ldr	r3, [pc, #480]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4a77      	ldr	r2, [pc, #476]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70
 80035d4:	e00b      	b.n	80035ee <HAL_RCC_OscConfig+0x32a>
 80035d6:	4b75      	ldr	r3, [pc, #468]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a74      	ldr	r2, [pc, #464]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
 80035e2:	4b72      	ldr	r3, [pc, #456]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a71      	ldr	r2, [pc, #452]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80035e8:	f023 0304 	bic.w	r3, r3, #4
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d015      	beq.n	8003622 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fe ff83 	bl	8002500 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fc:	e00a      	b.n	8003614 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fe ff7f 	bl	8002500 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	; 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e0c5      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003614:	4b65      	ldr	r3, [pc, #404]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ee      	beq.n	80035fe <HAL_RCC_OscConfig+0x33a>
 8003620:	e014      	b.n	800364c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003622:	f7fe ff6d 	bl	8002500 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fe ff69 	bl	8002500 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	; 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0af      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003640:	4b5a      	ldr	r3, [pc, #360]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ee      	bne.n	800362a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d105      	bne.n	800365e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003652:	4b56      	ldr	r3, [pc, #344]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a55      	ldr	r2, [pc, #340]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 8003658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 809b 	beq.w	800379e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003668:	4b50      	ldr	r3, [pc, #320]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b08      	cmp	r3, #8
 8003672:	d05c      	beq.n	800372e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d141      	bne.n	8003700 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367c:	4b4c      	ldr	r3, [pc, #304]	; (80037b0 <HAL_RCC_OscConfig+0x4ec>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fe ff3d 	bl	8002500 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368a:	f7fe ff39 	bl	8002500 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e081      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	019b      	lsls	r3, r3, #6
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	3b01      	subs	r3, #1
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	061b      	lsls	r3, r3, #24
 80036cc:	4937      	ldr	r1, [pc, #220]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d2:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <HAL_RCC_OscConfig+0x4ec>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fe ff12 	bl	8002500 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe ff0e 	bl	8002500 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e056      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x41c>
 80036fe:	e04e      	b.n	800379e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCC_OscConfig+0x4ec>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fe fefb 	bl	8002500 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370e:	f7fe fef7 	bl	8002500 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e03f      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x44a>
 800372c:	e037      	b.n	800379e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e032      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800373a:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <HAL_RCC_OscConfig+0x4e8>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d028      	beq.n	800379a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d121      	bne.n	800379a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d11a      	bne.n	800379a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800376a:	4013      	ands	r3, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003770:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003772:	4293      	cmp	r3, r2
 8003774:	d111      	bne.n	800379a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d107      	bne.n	800379a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40007000 	.word	0x40007000
 80037ac:	40023800 	.word	0x40023800
 80037b0:	42470060 	.word	0x42470060

080037b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0cc      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b68      	ldr	r3, [pc, #416]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d90c      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b65      	ldr	r3, [pc, #404]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b63      	ldr	r3, [pc, #396]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0b8      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003808:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003820:	4b53      	ldr	r3, [pc, #332]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800382a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b50      	ldr	r3, [pc, #320]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	494d      	ldr	r1, [pc, #308]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d044      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d119      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e07f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d003      	beq.n	8003872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386e:	2b03      	cmp	r3, #3
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003872:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e06f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003882:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e067      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003892:	4b37      	ldr	r3, [pc, #220]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4934      	ldr	r1, [pc, #208]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a4:	f7fe fe2c 	bl	8002500 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7fe fe28 	bl	8002500 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e04f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 020c 	and.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1eb      	bne.n	80038ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d20c      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e032      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4916      	ldr	r1, [pc, #88]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	490e      	ldr	r1, [pc, #56]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800393a:	f000 f821 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800393e:	4602      	mov	r2, r0
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	490a      	ldr	r1, [pc, #40]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 800394c:	5ccb      	ldrb	r3, [r1, r3]
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	4a09      	ldr	r2, [pc, #36]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fd8c 	bl	8002478 <HAL_InitTick>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023c00 	.word	0x40023c00
 8003970:	40023800 	.word	0x40023800
 8003974:	08018ba4 	.word	0x08018ba4
 8003978:	20000000 	.word	0x20000000
 800397c:	20000004 	.word	0x20000004

08003980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003980:	b5b0      	push	{r4, r5, r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003986:	2100      	movs	r1, #0
 8003988:	6079      	str	r1, [r7, #4]
 800398a:	2100      	movs	r1, #0
 800398c:	60f9      	str	r1, [r7, #12]
 800398e:	2100      	movs	r1, #0
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003992:	2100      	movs	r1, #0
 8003994:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003996:	4952      	ldr	r1, [pc, #328]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003998:	6889      	ldr	r1, [r1, #8]
 800399a:	f001 010c 	and.w	r1, r1, #12
 800399e:	2908      	cmp	r1, #8
 80039a0:	d00d      	beq.n	80039be <HAL_RCC_GetSysClockFreq+0x3e>
 80039a2:	2908      	cmp	r1, #8
 80039a4:	f200 8094 	bhi.w	8003ad0 <HAL_RCC_GetSysClockFreq+0x150>
 80039a8:	2900      	cmp	r1, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x32>
 80039ac:	2904      	cmp	r1, #4
 80039ae:	d003      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x38>
 80039b0:	e08e      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039b2:	4b4c      	ldr	r3, [pc, #304]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x164>)
 80039b4:	60bb      	str	r3, [r7, #8]
       break;
 80039b6:	e08e      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b8:	4b4b      	ldr	r3, [pc, #300]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 80039ba:	60bb      	str	r3, [r7, #8]
      break;
 80039bc:	e08b      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039be:	4948      	ldr	r1, [pc, #288]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80039c0:	6849      	ldr	r1, [r1, #4]
 80039c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80039c6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c8:	4945      	ldr	r1, [pc, #276]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80039ca:	6849      	ldr	r1, [r1, #4]
 80039cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80039d0:	2900      	cmp	r1, #0
 80039d2:	d024      	beq.n	8003a1e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d4:	4942      	ldr	r1, [pc, #264]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80039d6:	6849      	ldr	r1, [r1, #4]
 80039d8:	0989      	lsrs	r1, r1, #6
 80039da:	4608      	mov	r0, r1
 80039dc:	f04f 0100 	mov.w	r1, #0
 80039e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80039e4:	f04f 0500 	mov.w	r5, #0
 80039e8:	ea00 0204 	and.w	r2, r0, r4
 80039ec:	ea01 0305 	and.w	r3, r1, r5
 80039f0:	493d      	ldr	r1, [pc, #244]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 80039f2:	fb01 f003 	mul.w	r0, r1, r3
 80039f6:	2100      	movs	r1, #0
 80039f8:	fb01 f102 	mul.w	r1, r1, r2
 80039fc:	1844      	adds	r4, r0, r1
 80039fe:	493a      	ldr	r1, [pc, #232]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a00:	fba2 0101 	umull	r0, r1, r2, r1
 8003a04:	1863      	adds	r3, r4, r1
 8003a06:	4619      	mov	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	f7fc fc4e 	bl	80002b0 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4613      	mov	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e04a      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1e:	4b30      	ldr	r3, [pc, #192]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	099b      	lsrs	r3, r3, #6
 8003a24:	461a      	mov	r2, r3
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	ea02 0400 	and.w	r4, r2, r0
 8003a36:	ea03 0501 	and.w	r5, r3, r1
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	014b      	lsls	r3, r1, #5
 8003a48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a4c:	0142      	lsls	r2, r0, #5
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	1b00      	subs	r0, r0, r4
 8003a54:	eb61 0105 	sbc.w	r1, r1, r5
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	018b      	lsls	r3, r1, #6
 8003a62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a66:	0182      	lsls	r2, r0, #6
 8003a68:	1a12      	subs	r2, r2, r0
 8003a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6e:	f04f 0000 	mov.w	r0, #0
 8003a72:	f04f 0100 	mov.w	r1, #0
 8003a76:	00d9      	lsls	r1, r3, #3
 8003a78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a7c:	00d0      	lsls	r0, r2, #3
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	1912      	adds	r2, r2, r4
 8003a84:	eb45 0303 	adc.w	r3, r5, r3
 8003a88:	f04f 0000 	mov.w	r0, #0
 8003a8c:	f04f 0100 	mov.w	r1, #0
 8003a90:	0299      	lsls	r1, r3, #10
 8003a92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a96:	0290      	lsls	r0, r2, #10
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	f7fc fc02 	bl	80002b0 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	60bb      	str	r3, [r7, #8]
      break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003ad2:	60bb      	str	r3, [r7, #8]
      break;
 8003ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bdb0      	pop	{r4, r5, r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	017d7840 	.word	0x017d7840

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000000 	.word	0x20000000

08003b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b08:	f7ff fff0 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0a9b      	lsrs	r3, r3, #10
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4903      	ldr	r1, [pc, #12]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	08018bb4 	.word	0x08018bb4

08003b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b30:	f7ff ffdc 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	0b5b      	lsrs	r3, r3, #13
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08018bb4 	.word	0x08018bb4

08003b54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e07b      	b.n	8003c5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b76:	d009      	beq.n	8003b8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	61da      	str	r2, [r3, #28]
 8003b7e:	e005      	b.n	8003b8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fe f8a4 	bl	8001cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c10:	ea42 0103 	orr.w	r1, r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0104 	and.w	r1, r3, #4
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f003 0210 	and.w	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e03f      	b.n	8003cf8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7fe faf3 	bl	8002278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2224      	movs	r2, #36	; 0x24
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 ff52 	bl	8004b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cbe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cde:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	; 0x30
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d165      	bne.n	8003de6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_UART_Transmit_DMA+0x26>
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e05e      	b.n	8003de8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_UART_Transmit_DMA+0x38>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e057      	b.n	8003de8 <HAL_UART_Transmit_DMA+0xe8>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2221      	movs	r2, #33	; 0x21
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d64:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <HAL_UART_Transmit_DMA+0xf0>)
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6c:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <HAL_UART_Transmit_DMA+0xf4>)
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	4a20      	ldr	r2, [pc, #128]	; (8003df8 <HAL_UART_Transmit_DMA+0xf8>)
 8003d76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	6819      	ldr	r1, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3304      	adds	r3, #4
 8003d94:	461a      	mov	r2, r3
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	f7fe fda2 	bl	80028e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003da4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dce:	627a      	str	r2, [r7, #36]	; 0x24
 8003dd0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6a39      	ldr	r1, [r7, #32]
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e5      	bne.n	8003dae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e000      	b.n	8003de8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3730      	adds	r7, #48	; 0x30
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	080043f5 	.word	0x080043f5
 8003df4:	0800448f 	.word	0x0800448f
 8003df8:	08004607 	.word	0x08004607

08003dfc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d11d      	bne.n	8003e52 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_UART_Receive_DMA+0x26>
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e016      	b.n	8003e54 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_UART_Receive_DMA+0x38>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e00f      	b.n	8003e54 <HAL_UART_Receive_DMA+0x58>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	461a      	mov	r2, r3
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fc27 	bl	800469c <UART_Start_Receive_DMA>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	e000      	b.n	8003e54 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b0ba      	sub	sp, #232	; 0xe8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x66>
 8003eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fd8f 	bl	80049de <UART_Receive_IT>
      return;
 8003ec0:	e256      	b.n	8004370 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80de 	beq.w	8004088 <HAL_UART_IRQHandler+0x22c>
 8003ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d106      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003edc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80d1 	beq.w	8004088 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_UART_IRQHandler+0xae>
 8003ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f043 0201 	orr.w	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_UART_IRQHandler+0xd2>
 8003f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f043 0202 	orr.w	r2, r3, #2
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_UART_IRQHandler+0xf6>
 8003f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f043 0204 	orr.w	r2, r3, #4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d011      	beq.n	8003f82 <HAL_UART_IRQHandler+0x126>
 8003f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f043 0208 	orr.w	r2, r3, #8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 81ed 	beq.w	8004366 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_UART_IRQHandler+0x14e>
 8003f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fd1a 	bl	80049de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x17a>
 8003fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04f      	beq.n	8004076 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fc22 	bl	8004820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d141      	bne.n	800406e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3314      	adds	r3, #20
 8003ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004008:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3314      	adds	r3, #20
 8004012:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004016:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800401a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004022:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800402e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1d9      	bne.n	8003fea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	2b00      	cmp	r3, #0
 800403c:	d013      	beq.n	8004066 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	4a7d      	ldr	r2, [pc, #500]	; (8004238 <HAL_UART_IRQHandler+0x3dc>)
 8004044:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe fd10 	bl	8002a70 <HAL_DMA_Abort_IT>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004060:	4610      	mov	r0, r2
 8004062:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	e00e      	b.n	8004084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9ae 	bl	80043c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406c:	e00a      	b.n	8004084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9aa 	bl	80043c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	e006      	b.n	8004084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f9a6 	bl	80043c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004082:	e170      	b.n	8004366 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004084:	bf00      	nop
    return;
 8004086:	e16e      	b.n	8004366 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	2b01      	cmp	r3, #1
 800408e:	f040 814a 	bne.w	8004326 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8143 	beq.w	8004326 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 813c 	beq.w	8004326 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b40      	cmp	r3, #64	; 0x40
 80040d0:	f040 80b4 	bne.w	800423c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8140 	beq.w	800436a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040f2:	429a      	cmp	r2, r3
 80040f4:	f080 8139 	bcs.w	800436a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410a:	f000 8088 	beq.w	800421e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800413a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800413e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004146:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1d9      	bne.n	800410e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3314      	adds	r3, #20
 8004160:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800416a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800417e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004182:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004186:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e1      	bne.n	800415a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e3      	bne.n	8004196 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ee:	f023 0310 	bic.w	r3, r3, #16
 80041f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004200:	65ba      	str	r2, [r7, #88]	; 0x58
 8004202:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004206:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800420e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e3      	bne.n	80041dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	4618      	mov	r0, r3
 800421a:	f7fe fbb9 	bl	8002990 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004226:	b29b      	uxth	r3, r3
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	b29b      	uxth	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f8d4 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004234:	e099      	b.n	800436a <HAL_UART_IRQHandler+0x50e>
 8004236:	bf00      	nop
 8004238:	080048e7 	.word	0x080048e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004244:	b29b      	uxth	r3, r3
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 808b 	beq.w	800436e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8086 	beq.w	800436e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004286:	647a      	str	r2, [r7, #68]	; 0x44
 8004288:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800428c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e3      	bne.n	8004262 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3314      	adds	r3, #20
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	623b      	str	r3, [r7, #32]
   return(result);
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042be:	633a      	str	r2, [r7, #48]	; 0x30
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e3      	bne.n	800429a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0310 	bic.w	r3, r3, #16
 80042f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004304:	61fa      	str	r2, [r7, #28]
 8004306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	617b      	str	r3, [r7, #20]
   return(result);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e3      	bne.n	80042e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004318:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f85c 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004324:	e023      	b.n	800436e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_UART_IRQHandler+0x4ea>
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fae5 	bl	800490e <UART_Transmit_IT>
    return;
 8004344:	e014      	b.n	8004370 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00e      	beq.n	8004370 <HAL_UART_IRQHandler+0x514>
 8004352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d008      	beq.n	8004370 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fb25 	bl	80049ae <UART_EndTransmit_IT>
    return;
 8004364:	e004      	b.n	8004370 <HAL_UART_IRQHandler+0x514>
    return;
 8004366:	bf00      	nop
 8004368:	e002      	b.n	8004370 <HAL_UART_IRQHandler+0x514>
      return;
 800436a:	bf00      	nop
 800436c:	e000      	b.n	8004370 <HAL_UART_IRQHandler+0x514>
      return;
 800436e:	bf00      	nop
  }
}
 8004370:	37e8      	adds	r7, #232	; 0xe8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop

08004378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b090      	sub	sp, #64	; 0x40
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d137      	bne.n	8004480 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004412:	2200      	movs	r2, #0
 8004414:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	623b      	str	r3, [r7, #32]
   return(result);
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800442c:	63bb      	str	r3, [r7, #56]	; 0x38
 800442e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3314      	adds	r3, #20
 8004434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004436:	633a      	str	r2, [r7, #48]	; 0x30
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800443c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e5      	bne.n	8004416 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800444a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	60fb      	str	r3, [r7, #12]
   return(result);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
 8004462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800446a:	61fa      	str	r2, [r7, #28]
 800446c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	69b9      	ldr	r1, [r7, #24]
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	617b      	str	r3, [r7, #20]
   return(result);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800447e:	e002      	b.n	8004486 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004480:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004482:	f7ff ff79 	bl	8004378 <HAL_UART_TxCpltCallback>
}
 8004486:	bf00      	nop
 8004488:	3740      	adds	r7, #64	; 0x40
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff ff75 	bl	800438c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b09c      	sub	sp, #112	; 0x70
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d172      	bne.n	80045ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	2200      	movs	r2, #0
 80044ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80044ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3314      	adds	r3, #20
 8004506:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	667b      	str	r3, [r7, #100]	; 0x64
 8004518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004520:	647a      	str	r2, [r7, #68]	; 0x44
 8004522:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	623b      	str	r3, [r7, #32]
   return(result);
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454a:	663b      	str	r3, [r7, #96]	; 0x60
 800454c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004554:	633a      	str	r2, [r7, #48]	; 0x30
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800455a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	2b01      	cmp	r3, #1
 8004576:	d119      	bne.n	80045ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	60fb      	str	r3, [r7, #12]
   return(result);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0310 	bic.w	r3, r3, #16
 800458e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004598:	61fa      	str	r2, [r7, #28]
 800459a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	69b9      	ldr	r1, [r7, #24]
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	617b      	str	r3, [r7, #20]
   return(result);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d106      	bne.n	80045c2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045b8:	4619      	mov	r1, r3
 80045ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045bc:	f7ff ff0e 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045c0:	e002      	b.n	80045c8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80045c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045c4:	f7ff feec 	bl	80043a0 <HAL_UART_RxCpltCallback>
}
 80045c8:	bf00      	nop
 80045ca:	3770      	adds	r7, #112	; 0x70
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d108      	bne.n	80045f8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	4619      	mov	r1, r3
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff fef3 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045f6:	e002      	b.n	80045fe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff fedb 	bl	80043b4 <HAL_UART_RxHalfCpltCallback>
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b21      	cmp	r3, #33	; 0x21
 8004638:	d108      	bne.n	800464c <UART_DMAError+0x46>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2200      	movs	r2, #0
 8004644:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004646:	68b8      	ldr	r0, [r7, #8]
 8004648:	f000 f8c2 	bl	80047d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b22      	cmp	r3, #34	; 0x22
 800466c:	d108      	bne.n	8004680 <UART_DMAError+0x7a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2200      	movs	r2, #0
 8004678:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800467a:	68b8      	ldr	r0, [r7, #8]
 800467c:	f000 f8d0 	bl	8004820 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f043 0210 	orr.w	r2, r3, #16
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800468c:	68b8      	ldr	r0, [r7, #8]
 800468e:	f7ff fe9b 	bl	80043c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b098      	sub	sp, #96	; 0x60
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	88fa      	ldrh	r2, [r7, #6]
 80046b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2222      	movs	r2, #34	; 0x22
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	4a3e      	ldr	r2, [pc, #248]	; (80047c4 <UART_Start_Receive_DMA+0x128>)
 80046ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	4a3d      	ldr	r2, [pc, #244]	; (80047c8 <UART_Start_Receive_DMA+0x12c>)
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	4a3c      	ldr	r2, [pc, #240]	; (80047cc <UART_Start_Receive_DMA+0x130>)
 80046da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	2200      	movs	r2, #0
 80046e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046e4:	f107 0308 	add.w	r3, r7, #8
 80046e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4619      	mov	r1, r3
 80046f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	f7fe f8f0 	bl	80028e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800472e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004734:	65bb      	str	r3, [r7, #88]	; 0x58
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800473e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004740:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004744:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800474c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e5      	bne.n	800471e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3314      	adds	r3, #20
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	657b      	str	r3, [r7, #84]	; 0x54
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3314      	adds	r3, #20
 8004770:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004772:	63ba      	str	r2, [r7, #56]	; 0x38
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3314      	adds	r3, #20
 800478c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	617b      	str	r3, [r7, #20]
   return(result);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479c:	653b      	str	r3, [r7, #80]	; 0x50
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3314      	adds	r3, #20
 80047a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047a6:	627a      	str	r2, [r7, #36]	; 0x24
 80047a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6a39      	ldr	r1, [r7, #32]
 80047ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e5      	bne.n	8004786 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3760      	adds	r7, #96	; 0x60
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	080044ab 	.word	0x080044ab
 80047c8:	080045d1 	.word	0x080045d1
 80047cc:	08004607 	.word	0x08004607

080047d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	; 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	61ba      	str	r2, [r7, #24]
 80047fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6979      	ldr	r1, [r7, #20]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	613b      	str	r3, [r7, #16]
   return(result);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004814:	bf00      	nop
 8004816:	3724      	adds	r7, #36	; 0x24
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b095      	sub	sp, #84	; 0x54
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800483e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004848:	643a      	str	r2, [r7, #64]	; 0x40
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800484e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e5      	bne.n	8004828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3314      	adds	r3, #20
 8004862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	61fb      	str	r3, [r7, #28]
   return(result);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	64bb      	str	r3, [r7, #72]	; 0x48
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3314      	adds	r3, #20
 800487a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800487c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	2b01      	cmp	r3, #1
 8004896:	d119      	bne.n	80048cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f023 0310 	bic.w	r3, r3, #16
 80048ae:	647b      	str	r3, [r7, #68]	; 0x44
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048b8:	61ba      	str	r2, [r7, #24]
 80048ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6979      	ldr	r1, [r7, #20]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	613b      	str	r3, [r7, #16]
   return(result);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048da:	bf00      	nop
 80048dc:	3754      	adds	r7, #84	; 0x54
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7ff fd61 	bl	80043c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800490e:	b480      	push	{r7}
 8004910:	b085      	sub	sp, #20
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b21      	cmp	r3, #33	; 0x21
 8004920:	d13e      	bne.n	80049a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492a:	d114      	bne.n	8004956 <UART_Transmit_IT+0x48>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d110      	bne.n	8004956 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004948:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	1c9a      	adds	r2, r3, #2
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	621a      	str	r2, [r3, #32]
 8004954:	e008      	b.n	8004968 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6211      	str	r1, [r2, #32]
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29b      	uxth	r3, r3
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4619      	mov	r1, r3
 8004976:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10f      	bne.n	800499c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800498a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800499a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff fcd2 	bl	8004378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b08c      	sub	sp, #48	; 0x30
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b22      	cmp	r3, #34	; 0x22
 80049f0:	f040 80ab 	bne.w	8004b4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fc:	d117      	bne.n	8004a2e <UART_Receive_IT+0x50>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d113      	bne.n	8004a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	1c9a      	adds	r2, r3, #2
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a2c:	e026      	b.n	8004a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a40:	d007      	beq.n	8004a52 <UART_Receive_IT+0x74>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <UART_Receive_IT+0x82>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e008      	b.n	8004a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d15a      	bne.n	8004b46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0220 	bic.w	r2, r2, #32
 8004a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d135      	bne.n	8004b3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f023 0310 	bic.w	r3, r3, #16
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af6:	623a      	str	r2, [r7, #32]
 8004af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	69f9      	ldr	r1, [r7, #28]
 8004afc:	6a3a      	ldr	r2, [r7, #32]
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b10      	cmp	r3, #16
 8004b16:	d10a      	bne.n	8004b2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fc51 	bl	80043dc <HAL_UARTEx_RxEventCallback>
 8004b3a:	e002      	b.n	8004b42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff fc2f 	bl	80043a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e002      	b.n	8004b4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
  }
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3730      	adds	r7, #48	; 0x30
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	b09f      	sub	sp, #124	; 0x7c
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6a:	68d9      	ldr	r1, [r3, #12]
 8004b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	ea40 0301 	orr.w	r3, r0, r1
 8004b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b98:	f021 010c 	bic.w	r1, r1, #12
 8004b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb2:	6999      	ldr	r1, [r3, #24]
 8004bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	ea40 0301 	orr.w	r3, r0, r1
 8004bbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4bc5      	ldr	r3, [pc, #788]	; (8004ed8 <UART_SetConfig+0x384>)
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d004      	beq.n	8004bd2 <UART_SetConfig+0x7e>
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4bc3      	ldr	r3, [pc, #780]	; (8004edc <UART_SetConfig+0x388>)
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d103      	bne.n	8004bda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bd2:	f7fe ffab 	bl	8003b2c <HAL_RCC_GetPCLK2Freq>
 8004bd6:	6778      	str	r0, [r7, #116]	; 0x74
 8004bd8:	e002      	b.n	8004be0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bda:	f7fe ff93 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8004bde:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be8:	f040 80b6 	bne.w	8004d58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bee:	461c      	mov	r4, r3
 8004bf0:	f04f 0500 	mov.w	r5, #0
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	1891      	adds	r1, r2, r2
 8004bfa:	6439      	str	r1, [r7, #64]	; 0x40
 8004bfc:	415b      	adcs	r3, r3
 8004bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8004c00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c04:	1912      	adds	r2, r2, r4
 8004c06:	eb45 0303 	adc.w	r3, r5, r3
 8004c0a:	f04f 0000 	mov.w	r0, #0
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	00d9      	lsls	r1, r3, #3
 8004c14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c18:	00d0      	lsls	r0, r2, #3
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	1911      	adds	r1, r2, r4
 8004c20:	6639      	str	r1, [r7, #96]	; 0x60
 8004c22:	416b      	adcs	r3, r5
 8004c24:	667b      	str	r3, [r7, #100]	; 0x64
 8004c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	1891      	adds	r1, r2, r2
 8004c32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c34:	415b      	adcs	r3, r3
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c40:	f7fb fb36 	bl	80002b0 <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4ba5      	ldr	r3, [pc, #660]	; (8004ee0 <UART_SetConfig+0x38c>)
 8004c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	011e      	lsls	r6, r3, #4
 8004c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c54:	461c      	mov	r4, r3
 8004c56:	f04f 0500 	mov.w	r5, #0
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	1891      	adds	r1, r2, r2
 8004c60:	6339      	str	r1, [r7, #48]	; 0x30
 8004c62:	415b      	adcs	r3, r3
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
 8004c66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c6a:	1912      	adds	r2, r2, r4
 8004c6c:	eb45 0303 	adc.w	r3, r5, r3
 8004c70:	f04f 0000 	mov.w	r0, #0
 8004c74:	f04f 0100 	mov.w	r1, #0
 8004c78:	00d9      	lsls	r1, r3, #3
 8004c7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c7e:	00d0      	lsls	r0, r2, #3
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	1911      	adds	r1, r2, r4
 8004c86:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c88:	416b      	adcs	r3, r5
 8004c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	461a      	mov	r2, r3
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	1891      	adds	r1, r2, r2
 8004c98:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c9a:	415b      	adcs	r3, r3
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ca2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ca6:	f7fb fb03 	bl	80002b0 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4b8c      	ldr	r3, [pc, #560]	; (8004ee0 <UART_SetConfig+0x38c>)
 8004cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	2164      	movs	r1, #100	; 0x64
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	3332      	adds	r3, #50	; 0x32
 8004cc2:	4a87      	ldr	r2, [pc, #540]	; (8004ee0 <UART_SetConfig+0x38c>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cd0:	441e      	add	r6, r3
 8004cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	1894      	adds	r4, r2, r2
 8004ce0:	623c      	str	r4, [r7, #32]
 8004ce2:	415b      	adcs	r3, r3
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cea:	1812      	adds	r2, r2, r0
 8004cec:	eb41 0303 	adc.w	r3, r1, r3
 8004cf0:	f04f 0400 	mov.w	r4, #0
 8004cf4:	f04f 0500 	mov.w	r5, #0
 8004cf8:	00dd      	lsls	r5, r3, #3
 8004cfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cfe:	00d4      	lsls	r4, r2, #3
 8004d00:	4622      	mov	r2, r4
 8004d02:	462b      	mov	r3, r5
 8004d04:	1814      	adds	r4, r2, r0
 8004d06:	653c      	str	r4, [r7, #80]	; 0x50
 8004d08:	414b      	adcs	r3, r1
 8004d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	461a      	mov	r2, r3
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	1891      	adds	r1, r2, r2
 8004d18:	61b9      	str	r1, [r7, #24]
 8004d1a:	415b      	adcs	r3, r3
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d26:	f7fb fac3 	bl	80002b0 <__aeabi_uldivmod>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4b6c      	ldr	r3, [pc, #432]	; (8004ee0 <UART_SetConfig+0x38c>)
 8004d30:	fba3 1302 	umull	r1, r3, r3, r2
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	2164      	movs	r1, #100	; 0x64
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	3332      	adds	r3, #50	; 0x32
 8004d42:	4a67      	ldr	r2, [pc, #412]	; (8004ee0 <UART_SetConfig+0x38c>)
 8004d44:	fba2 2303 	umull	r2, r3, r2, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	f003 0207 	and.w	r2, r3, #7
 8004d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4432      	add	r2, r6
 8004d54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d56:	e0b9      	b.n	8004ecc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d5a:	461c      	mov	r4, r3
 8004d5c:	f04f 0500 	mov.w	r5, #0
 8004d60:	4622      	mov	r2, r4
 8004d62:	462b      	mov	r3, r5
 8004d64:	1891      	adds	r1, r2, r2
 8004d66:	6139      	str	r1, [r7, #16]
 8004d68:	415b      	adcs	r3, r3
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d70:	1912      	adds	r2, r2, r4
 8004d72:	eb45 0303 	adc.w	r3, r5, r3
 8004d76:	f04f 0000 	mov.w	r0, #0
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	00d9      	lsls	r1, r3, #3
 8004d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d84:	00d0      	lsls	r0, r2, #3
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	eb12 0804 	adds.w	r8, r2, r4
 8004d8e:	eb43 0905 	adc.w	r9, r3, r5
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f04f 0100 	mov.w	r1, #0
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	008b      	lsls	r3, r1, #2
 8004da6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004daa:	0082      	lsls	r2, r0, #2
 8004dac:	4640      	mov	r0, r8
 8004dae:	4649      	mov	r1, r9
 8004db0:	f7fb fa7e 	bl	80002b0 <__aeabi_uldivmod>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4b49      	ldr	r3, [pc, #292]	; (8004ee0 <UART_SetConfig+0x38c>)
 8004dba:	fba3 2302 	umull	r2, r3, r3, r2
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	011e      	lsls	r6, r3, #4
 8004dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f04f 0100 	mov.w	r1, #0
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	1894      	adds	r4, r2, r2
 8004dd0:	60bc      	str	r4, [r7, #8]
 8004dd2:	415b      	adcs	r3, r3
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dda:	1812      	adds	r2, r2, r0
 8004ddc:	eb41 0303 	adc.w	r3, r1, r3
 8004de0:	f04f 0400 	mov.w	r4, #0
 8004de4:	f04f 0500 	mov.w	r5, #0
 8004de8:	00dd      	lsls	r5, r3, #3
 8004dea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dee:	00d4      	lsls	r4, r2, #3
 8004df0:	4622      	mov	r2, r4
 8004df2:	462b      	mov	r3, r5
 8004df4:	1814      	adds	r4, r2, r0
 8004df6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f04f 0100 	mov.w	r1, #0
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	008b      	lsls	r3, r1, #2
 8004e10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e14:	0082      	lsls	r2, r0, #2
 8004e16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e1a:	f7fb fa49 	bl	80002b0 <__aeabi_uldivmod>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4b2f      	ldr	r3, [pc, #188]	; (8004ee0 <UART_SetConfig+0x38c>)
 8004e24:	fba3 1302 	umull	r1, r3, r3, r2
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	2164      	movs	r1, #100	; 0x64
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	3332      	adds	r3, #50	; 0x32
 8004e36:	4a2a      	ldr	r2, [pc, #168]	; (8004ee0 <UART_SetConfig+0x38c>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e42:	441e      	add	r6, r3
 8004e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e46:	4618      	mov	r0, r3
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	1894      	adds	r4, r2, r2
 8004e52:	603c      	str	r4, [r7, #0]
 8004e54:	415b      	adcs	r3, r3
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5c:	1812      	adds	r2, r2, r0
 8004e5e:	eb41 0303 	adc.w	r3, r1, r3
 8004e62:	f04f 0400 	mov.w	r4, #0
 8004e66:	f04f 0500 	mov.w	r5, #0
 8004e6a:	00dd      	lsls	r5, r3, #3
 8004e6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e70:	00d4      	lsls	r4, r2, #3
 8004e72:	4622      	mov	r2, r4
 8004e74:	462b      	mov	r3, r5
 8004e76:	eb12 0a00 	adds.w	sl, r2, r0
 8004e7a:	eb43 0b01 	adc.w	fp, r3, r1
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f04f 0100 	mov.w	r1, #0
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	008b      	lsls	r3, r1, #2
 8004e92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e96:	0082      	lsls	r2, r0, #2
 8004e98:	4650      	mov	r0, sl
 8004e9a:	4659      	mov	r1, fp
 8004e9c:	f7fb fa08 	bl	80002b0 <__aeabi_uldivmod>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <UART_SetConfig+0x38c>)
 8004ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	2164      	movs	r1, #100	; 0x64
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	3332      	adds	r3, #50	; 0x32
 8004eb8:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <UART_SetConfig+0x38c>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	f003 020f 	and.w	r2, r3, #15
 8004ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4432      	add	r2, r6
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	377c      	adds	r7, #124	; 0x7c
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40011000 	.word	0x40011000
 8004edc:	40011400 	.word	0x40011400
 8004ee0:	51eb851f 	.word	0x51eb851f

08004ee4 <atoi>:
 8004ee4:	220a      	movs	r2, #10
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	f000 b932 	b.w	8005150 <strtol>

08004eec <__errno>:
 8004eec:	4b01      	ldr	r3, [pc, #4]	; (8004ef4 <__errno+0x8>)
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	2000000c 	.word	0x2000000c

08004ef8 <__libc_init_array>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	4d0d      	ldr	r5, [pc, #52]	; (8004f30 <__libc_init_array+0x38>)
 8004efc:	4c0d      	ldr	r4, [pc, #52]	; (8004f34 <__libc_init_array+0x3c>)
 8004efe:	1b64      	subs	r4, r4, r5
 8004f00:	10a4      	asrs	r4, r4, #2
 8004f02:	2600      	movs	r6, #0
 8004f04:	42a6      	cmp	r6, r4
 8004f06:	d109      	bne.n	8004f1c <__libc_init_array+0x24>
 8004f08:	4d0b      	ldr	r5, [pc, #44]	; (8004f38 <__libc_init_array+0x40>)
 8004f0a:	4c0c      	ldr	r4, [pc, #48]	; (8004f3c <__libc_init_array+0x44>)
 8004f0c:	f001 fa9e 	bl	800644c <_init>
 8004f10:	1b64      	subs	r4, r4, r5
 8004f12:	10a4      	asrs	r4, r4, #2
 8004f14:	2600      	movs	r6, #0
 8004f16:	42a6      	cmp	r6, r4
 8004f18:	d105      	bne.n	8004f26 <__libc_init_array+0x2e>
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f20:	4798      	blx	r3
 8004f22:	3601      	adds	r6, #1
 8004f24:	e7ee      	b.n	8004f04 <__libc_init_array+0xc>
 8004f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2a:	4798      	blx	r3
 8004f2c:	3601      	adds	r6, #1
 8004f2e:	e7f2      	b.n	8004f16 <__libc_init_array+0x1e>
 8004f30:	08018e18 	.word	0x08018e18
 8004f34:	08018e18 	.word	0x08018e18
 8004f38:	08018e18 	.word	0x08018e18
 8004f3c:	08018e1c 	.word	0x08018e1c

08004f40 <memset>:
 8004f40:	4402      	add	r2, r0
 8004f42:	4603      	mov	r3, r0
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d100      	bne.n	8004f4a <memset+0xa>
 8004f48:	4770      	bx	lr
 8004f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4e:	e7f9      	b.n	8004f44 <memset+0x4>

08004f50 <siprintf>:
 8004f50:	b40e      	push	{r1, r2, r3}
 8004f52:	b500      	push	{lr}
 8004f54:	b09c      	sub	sp, #112	; 0x70
 8004f56:	ab1d      	add	r3, sp, #116	; 0x74
 8004f58:	9002      	str	r0, [sp, #8]
 8004f5a:	9006      	str	r0, [sp, #24]
 8004f5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f60:	4809      	ldr	r0, [pc, #36]	; (8004f88 <siprintf+0x38>)
 8004f62:	9107      	str	r1, [sp, #28]
 8004f64:	9104      	str	r1, [sp, #16]
 8004f66:	4909      	ldr	r1, [pc, #36]	; (8004f8c <siprintf+0x3c>)
 8004f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f6c:	9105      	str	r1, [sp, #20]
 8004f6e:	6800      	ldr	r0, [r0, #0]
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	a902      	add	r1, sp, #8
 8004f74:	f000 fa34 	bl	80053e0 <_svfiprintf_r>
 8004f78:	9b02      	ldr	r3, [sp, #8]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	b01c      	add	sp, #112	; 0x70
 8004f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f84:	b003      	add	sp, #12
 8004f86:	4770      	bx	lr
 8004f88:	2000000c 	.word	0x2000000c
 8004f8c:	ffff0208 	.word	0xffff0208

08004f90 <strtok>:
 8004f90:	4b16      	ldr	r3, [pc, #88]	; (8004fec <strtok+0x5c>)
 8004f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f94:	681e      	ldr	r6, [r3, #0]
 8004f96:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004f98:	4605      	mov	r5, r0
 8004f9a:	b9fc      	cbnz	r4, 8004fdc <strtok+0x4c>
 8004f9c:	2050      	movs	r0, #80	; 0x50
 8004f9e:	9101      	str	r1, [sp, #4]
 8004fa0:	f000 f910 	bl	80051c4 <malloc>
 8004fa4:	9901      	ldr	r1, [sp, #4]
 8004fa6:	65b0      	str	r0, [r6, #88]	; 0x58
 8004fa8:	4602      	mov	r2, r0
 8004faa:	b920      	cbnz	r0, 8004fb6 <strtok+0x26>
 8004fac:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <strtok+0x60>)
 8004fae:	4811      	ldr	r0, [pc, #68]	; (8004ff4 <strtok+0x64>)
 8004fb0:	2157      	movs	r1, #87	; 0x57
 8004fb2:	f000 f8d7 	bl	8005164 <__assert_func>
 8004fb6:	e9c0 4400 	strd	r4, r4, [r0]
 8004fba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004fbe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004fc2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004fc6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004fca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004fce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004fd2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004fd6:	6184      	str	r4, [r0, #24]
 8004fd8:	7704      	strb	r4, [r0, #28]
 8004fda:	6244      	str	r4, [r0, #36]	; 0x24
 8004fdc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004fde:	2301      	movs	r3, #1
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	b002      	add	sp, #8
 8004fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fe8:	f000 b806 	b.w	8004ff8 <__strtok_r>
 8004fec:	2000000c 	.word	0x2000000c
 8004ff0:	08018bc8 	.word	0x08018bc8
 8004ff4:	08018bdf 	.word	0x08018bdf

08004ff8 <__strtok_r>:
 8004ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ffa:	b908      	cbnz	r0, 8005000 <__strtok_r+0x8>
 8004ffc:	6810      	ldr	r0, [r2, #0]
 8004ffe:	b188      	cbz	r0, 8005024 <__strtok_r+0x2c>
 8005000:	4604      	mov	r4, r0
 8005002:	4620      	mov	r0, r4
 8005004:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005008:	460f      	mov	r7, r1
 800500a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800500e:	b91e      	cbnz	r6, 8005018 <__strtok_r+0x20>
 8005010:	b965      	cbnz	r5, 800502c <__strtok_r+0x34>
 8005012:	6015      	str	r5, [r2, #0]
 8005014:	4628      	mov	r0, r5
 8005016:	e005      	b.n	8005024 <__strtok_r+0x2c>
 8005018:	42b5      	cmp	r5, r6
 800501a:	d1f6      	bne.n	800500a <__strtok_r+0x12>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <__strtok_r+0xa>
 8005020:	6014      	str	r4, [r2, #0]
 8005022:	7003      	strb	r3, [r0, #0]
 8005024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005026:	461c      	mov	r4, r3
 8005028:	e00c      	b.n	8005044 <__strtok_r+0x4c>
 800502a:	b915      	cbnz	r5, 8005032 <__strtok_r+0x3a>
 800502c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005030:	460e      	mov	r6, r1
 8005032:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005036:	42ab      	cmp	r3, r5
 8005038:	d1f7      	bne.n	800502a <__strtok_r+0x32>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f3      	beq.n	8005026 <__strtok_r+0x2e>
 800503e:	2300      	movs	r3, #0
 8005040:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005044:	6014      	str	r4, [r2, #0]
 8005046:	e7ed      	b.n	8005024 <__strtok_r+0x2c>

08005048 <_strtol_l.isra.0>:
 8005048:	2b01      	cmp	r3, #1
 800504a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800504e:	d001      	beq.n	8005054 <_strtol_l.isra.0+0xc>
 8005050:	2b24      	cmp	r3, #36	; 0x24
 8005052:	d906      	bls.n	8005062 <_strtol_l.isra.0+0x1a>
 8005054:	f7ff ff4a 	bl	8004eec <__errno>
 8005058:	2316      	movs	r3, #22
 800505a:	6003      	str	r3, [r0, #0]
 800505c:	2000      	movs	r0, #0
 800505e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005062:	4f3a      	ldr	r7, [pc, #232]	; (800514c <_strtol_l.isra.0+0x104>)
 8005064:	468e      	mov	lr, r1
 8005066:	4676      	mov	r6, lr
 8005068:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800506c:	5de5      	ldrb	r5, [r4, r7]
 800506e:	f015 0508 	ands.w	r5, r5, #8
 8005072:	d1f8      	bne.n	8005066 <_strtol_l.isra.0+0x1e>
 8005074:	2c2d      	cmp	r4, #45	; 0x2d
 8005076:	d134      	bne.n	80050e2 <_strtol_l.isra.0+0x9a>
 8005078:	f89e 4000 	ldrb.w	r4, [lr]
 800507c:	f04f 0801 	mov.w	r8, #1
 8005080:	f106 0e02 	add.w	lr, r6, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d05c      	beq.n	8005142 <_strtol_l.isra.0+0xfa>
 8005088:	2b10      	cmp	r3, #16
 800508a:	d10c      	bne.n	80050a6 <_strtol_l.isra.0+0x5e>
 800508c:	2c30      	cmp	r4, #48	; 0x30
 800508e:	d10a      	bne.n	80050a6 <_strtol_l.isra.0+0x5e>
 8005090:	f89e 4000 	ldrb.w	r4, [lr]
 8005094:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005098:	2c58      	cmp	r4, #88	; 0x58
 800509a:	d14d      	bne.n	8005138 <_strtol_l.isra.0+0xf0>
 800509c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80050a0:	2310      	movs	r3, #16
 80050a2:	f10e 0e02 	add.w	lr, lr, #2
 80050a6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80050aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80050ae:	2600      	movs	r6, #0
 80050b0:	fbbc f9f3 	udiv	r9, ip, r3
 80050b4:	4635      	mov	r5, r6
 80050b6:	fb03 ca19 	mls	sl, r3, r9, ip
 80050ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80050be:	2f09      	cmp	r7, #9
 80050c0:	d818      	bhi.n	80050f4 <_strtol_l.isra.0+0xac>
 80050c2:	463c      	mov	r4, r7
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	dd24      	ble.n	8005112 <_strtol_l.isra.0+0xca>
 80050c8:	2e00      	cmp	r6, #0
 80050ca:	db1f      	blt.n	800510c <_strtol_l.isra.0+0xc4>
 80050cc:	45a9      	cmp	r9, r5
 80050ce:	d31d      	bcc.n	800510c <_strtol_l.isra.0+0xc4>
 80050d0:	d101      	bne.n	80050d6 <_strtol_l.isra.0+0x8e>
 80050d2:	45a2      	cmp	sl, r4
 80050d4:	db1a      	blt.n	800510c <_strtol_l.isra.0+0xc4>
 80050d6:	fb05 4503 	mla	r5, r5, r3, r4
 80050da:	2601      	movs	r6, #1
 80050dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80050e0:	e7eb      	b.n	80050ba <_strtol_l.isra.0+0x72>
 80050e2:	2c2b      	cmp	r4, #43	; 0x2b
 80050e4:	bf08      	it	eq
 80050e6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80050ea:	46a8      	mov	r8, r5
 80050ec:	bf08      	it	eq
 80050ee:	f106 0e02 	addeq.w	lr, r6, #2
 80050f2:	e7c7      	b.n	8005084 <_strtol_l.isra.0+0x3c>
 80050f4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80050f8:	2f19      	cmp	r7, #25
 80050fa:	d801      	bhi.n	8005100 <_strtol_l.isra.0+0xb8>
 80050fc:	3c37      	subs	r4, #55	; 0x37
 80050fe:	e7e1      	b.n	80050c4 <_strtol_l.isra.0+0x7c>
 8005100:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005104:	2f19      	cmp	r7, #25
 8005106:	d804      	bhi.n	8005112 <_strtol_l.isra.0+0xca>
 8005108:	3c57      	subs	r4, #87	; 0x57
 800510a:	e7db      	b.n	80050c4 <_strtol_l.isra.0+0x7c>
 800510c:	f04f 36ff 	mov.w	r6, #4294967295
 8005110:	e7e4      	b.n	80050dc <_strtol_l.isra.0+0x94>
 8005112:	2e00      	cmp	r6, #0
 8005114:	da05      	bge.n	8005122 <_strtol_l.isra.0+0xda>
 8005116:	2322      	movs	r3, #34	; 0x22
 8005118:	6003      	str	r3, [r0, #0]
 800511a:	4665      	mov	r5, ip
 800511c:	b942      	cbnz	r2, 8005130 <_strtol_l.isra.0+0xe8>
 800511e:	4628      	mov	r0, r5
 8005120:	e79d      	b.n	800505e <_strtol_l.isra.0+0x16>
 8005122:	f1b8 0f00 	cmp.w	r8, #0
 8005126:	d000      	beq.n	800512a <_strtol_l.isra.0+0xe2>
 8005128:	426d      	negs	r5, r5
 800512a:	2a00      	cmp	r2, #0
 800512c:	d0f7      	beq.n	800511e <_strtol_l.isra.0+0xd6>
 800512e:	b10e      	cbz	r6, 8005134 <_strtol_l.isra.0+0xec>
 8005130:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005134:	6011      	str	r1, [r2, #0]
 8005136:	e7f2      	b.n	800511e <_strtol_l.isra.0+0xd6>
 8005138:	2430      	movs	r4, #48	; 0x30
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1b3      	bne.n	80050a6 <_strtol_l.isra.0+0x5e>
 800513e:	2308      	movs	r3, #8
 8005140:	e7b1      	b.n	80050a6 <_strtol_l.isra.0+0x5e>
 8005142:	2c30      	cmp	r4, #48	; 0x30
 8005144:	d0a4      	beq.n	8005090 <_strtol_l.isra.0+0x48>
 8005146:	230a      	movs	r3, #10
 8005148:	e7ad      	b.n	80050a6 <_strtol_l.isra.0+0x5e>
 800514a:	bf00      	nop
 800514c:	08018c7d 	.word	0x08018c7d

08005150 <strtol>:
 8005150:	4613      	mov	r3, r2
 8005152:	460a      	mov	r2, r1
 8005154:	4601      	mov	r1, r0
 8005156:	4802      	ldr	r0, [pc, #8]	; (8005160 <strtol+0x10>)
 8005158:	6800      	ldr	r0, [r0, #0]
 800515a:	f7ff bf75 	b.w	8005048 <_strtol_l.isra.0>
 800515e:	bf00      	nop
 8005160:	2000000c 	.word	0x2000000c

08005164 <__assert_func>:
 8005164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005166:	4614      	mov	r4, r2
 8005168:	461a      	mov	r2, r3
 800516a:	4b09      	ldr	r3, [pc, #36]	; (8005190 <__assert_func+0x2c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4605      	mov	r5, r0
 8005170:	68d8      	ldr	r0, [r3, #12]
 8005172:	b14c      	cbz	r4, 8005188 <__assert_func+0x24>
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <__assert_func+0x30>)
 8005176:	9100      	str	r1, [sp, #0]
 8005178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800517c:	4906      	ldr	r1, [pc, #24]	; (8005198 <__assert_func+0x34>)
 800517e:	462b      	mov	r3, r5
 8005180:	f000 f80e 	bl	80051a0 <fiprintf>
 8005184:	f000 fdea 	bl	8005d5c <abort>
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <__assert_func+0x38>)
 800518a:	461c      	mov	r4, r3
 800518c:	e7f3      	b.n	8005176 <__assert_func+0x12>
 800518e:	bf00      	nop
 8005190:	2000000c 	.word	0x2000000c
 8005194:	08018c40 	.word	0x08018c40
 8005198:	08018c4d 	.word	0x08018c4d
 800519c:	08018c7b 	.word	0x08018c7b

080051a0 <fiprintf>:
 80051a0:	b40e      	push	{r1, r2, r3}
 80051a2:	b503      	push	{r0, r1, lr}
 80051a4:	4601      	mov	r1, r0
 80051a6:	ab03      	add	r3, sp, #12
 80051a8:	4805      	ldr	r0, [pc, #20]	; (80051c0 <fiprintf+0x20>)
 80051aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ae:	6800      	ldr	r0, [r0, #0]
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	f000 fa3f 	bl	8005634 <_vfiprintf_r>
 80051b6:	b002      	add	sp, #8
 80051b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051bc:	b003      	add	sp, #12
 80051be:	4770      	bx	lr
 80051c0:	2000000c 	.word	0x2000000c

080051c4 <malloc>:
 80051c4:	4b02      	ldr	r3, [pc, #8]	; (80051d0 <malloc+0xc>)
 80051c6:	4601      	mov	r1, r0
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	f000 b853 	b.w	8005274 <_malloc_r>
 80051ce:	bf00      	nop
 80051d0:	2000000c 	.word	0x2000000c

080051d4 <_free_r>:
 80051d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051d6:	2900      	cmp	r1, #0
 80051d8:	d048      	beq.n	800526c <_free_r+0x98>
 80051da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051de:	9001      	str	r0, [sp, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f1a1 0404 	sub.w	r4, r1, #4
 80051e6:	bfb8      	it	lt
 80051e8:	18e4      	addlt	r4, r4, r3
 80051ea:	f001 f805 	bl	80061f8 <__malloc_lock>
 80051ee:	4a20      	ldr	r2, [pc, #128]	; (8005270 <_free_r+0x9c>)
 80051f0:	9801      	ldr	r0, [sp, #4]
 80051f2:	6813      	ldr	r3, [r2, #0]
 80051f4:	4615      	mov	r5, r2
 80051f6:	b933      	cbnz	r3, 8005206 <_free_r+0x32>
 80051f8:	6063      	str	r3, [r4, #4]
 80051fa:	6014      	str	r4, [r2, #0]
 80051fc:	b003      	add	sp, #12
 80051fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005202:	f000 bfff 	b.w	8006204 <__malloc_unlock>
 8005206:	42a3      	cmp	r3, r4
 8005208:	d90b      	bls.n	8005222 <_free_r+0x4e>
 800520a:	6821      	ldr	r1, [r4, #0]
 800520c:	1862      	adds	r2, r4, r1
 800520e:	4293      	cmp	r3, r2
 8005210:	bf04      	itt	eq
 8005212:	681a      	ldreq	r2, [r3, #0]
 8005214:	685b      	ldreq	r3, [r3, #4]
 8005216:	6063      	str	r3, [r4, #4]
 8005218:	bf04      	itt	eq
 800521a:	1852      	addeq	r2, r2, r1
 800521c:	6022      	streq	r2, [r4, #0]
 800521e:	602c      	str	r4, [r5, #0]
 8005220:	e7ec      	b.n	80051fc <_free_r+0x28>
 8005222:	461a      	mov	r2, r3
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	b10b      	cbz	r3, 800522c <_free_r+0x58>
 8005228:	42a3      	cmp	r3, r4
 800522a:	d9fa      	bls.n	8005222 <_free_r+0x4e>
 800522c:	6811      	ldr	r1, [r2, #0]
 800522e:	1855      	adds	r5, r2, r1
 8005230:	42a5      	cmp	r5, r4
 8005232:	d10b      	bne.n	800524c <_free_r+0x78>
 8005234:	6824      	ldr	r4, [r4, #0]
 8005236:	4421      	add	r1, r4
 8005238:	1854      	adds	r4, r2, r1
 800523a:	42a3      	cmp	r3, r4
 800523c:	6011      	str	r1, [r2, #0]
 800523e:	d1dd      	bne.n	80051fc <_free_r+0x28>
 8005240:	681c      	ldr	r4, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	6053      	str	r3, [r2, #4]
 8005246:	4421      	add	r1, r4
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	e7d7      	b.n	80051fc <_free_r+0x28>
 800524c:	d902      	bls.n	8005254 <_free_r+0x80>
 800524e:	230c      	movs	r3, #12
 8005250:	6003      	str	r3, [r0, #0]
 8005252:	e7d3      	b.n	80051fc <_free_r+0x28>
 8005254:	6825      	ldr	r5, [r4, #0]
 8005256:	1961      	adds	r1, r4, r5
 8005258:	428b      	cmp	r3, r1
 800525a:	bf04      	itt	eq
 800525c:	6819      	ldreq	r1, [r3, #0]
 800525e:	685b      	ldreq	r3, [r3, #4]
 8005260:	6063      	str	r3, [r4, #4]
 8005262:	bf04      	itt	eq
 8005264:	1949      	addeq	r1, r1, r5
 8005266:	6021      	streq	r1, [r4, #0]
 8005268:	6054      	str	r4, [r2, #4]
 800526a:	e7c7      	b.n	80051fc <_free_r+0x28>
 800526c:	b003      	add	sp, #12
 800526e:	bd30      	pop	{r4, r5, pc}
 8005270:	20000090 	.word	0x20000090

08005274 <_malloc_r>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	1ccd      	adds	r5, r1, #3
 8005278:	f025 0503 	bic.w	r5, r5, #3
 800527c:	3508      	adds	r5, #8
 800527e:	2d0c      	cmp	r5, #12
 8005280:	bf38      	it	cc
 8005282:	250c      	movcc	r5, #12
 8005284:	2d00      	cmp	r5, #0
 8005286:	4606      	mov	r6, r0
 8005288:	db01      	blt.n	800528e <_malloc_r+0x1a>
 800528a:	42a9      	cmp	r1, r5
 800528c:	d903      	bls.n	8005296 <_malloc_r+0x22>
 800528e:	230c      	movs	r3, #12
 8005290:	6033      	str	r3, [r6, #0]
 8005292:	2000      	movs	r0, #0
 8005294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005296:	f000 ffaf 	bl	80061f8 <__malloc_lock>
 800529a:	4921      	ldr	r1, [pc, #132]	; (8005320 <_malloc_r+0xac>)
 800529c:	680a      	ldr	r2, [r1, #0]
 800529e:	4614      	mov	r4, r2
 80052a0:	b99c      	cbnz	r4, 80052ca <_malloc_r+0x56>
 80052a2:	4f20      	ldr	r7, [pc, #128]	; (8005324 <_malloc_r+0xb0>)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	b923      	cbnz	r3, 80052b2 <_malloc_r+0x3e>
 80052a8:	4621      	mov	r1, r4
 80052aa:	4630      	mov	r0, r6
 80052ac:	f000 fc86 	bl	8005bbc <_sbrk_r>
 80052b0:	6038      	str	r0, [r7, #0]
 80052b2:	4629      	mov	r1, r5
 80052b4:	4630      	mov	r0, r6
 80052b6:	f000 fc81 	bl	8005bbc <_sbrk_r>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	d123      	bne.n	8005306 <_malloc_r+0x92>
 80052be:	230c      	movs	r3, #12
 80052c0:	6033      	str	r3, [r6, #0]
 80052c2:	4630      	mov	r0, r6
 80052c4:	f000 ff9e 	bl	8006204 <__malloc_unlock>
 80052c8:	e7e3      	b.n	8005292 <_malloc_r+0x1e>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	1b5b      	subs	r3, r3, r5
 80052ce:	d417      	bmi.n	8005300 <_malloc_r+0x8c>
 80052d0:	2b0b      	cmp	r3, #11
 80052d2:	d903      	bls.n	80052dc <_malloc_r+0x68>
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	441c      	add	r4, r3
 80052d8:	6025      	str	r5, [r4, #0]
 80052da:	e004      	b.n	80052e6 <_malloc_r+0x72>
 80052dc:	6863      	ldr	r3, [r4, #4]
 80052de:	42a2      	cmp	r2, r4
 80052e0:	bf0c      	ite	eq
 80052e2:	600b      	streq	r3, [r1, #0]
 80052e4:	6053      	strne	r3, [r2, #4]
 80052e6:	4630      	mov	r0, r6
 80052e8:	f000 ff8c 	bl	8006204 <__malloc_unlock>
 80052ec:	f104 000b 	add.w	r0, r4, #11
 80052f0:	1d23      	adds	r3, r4, #4
 80052f2:	f020 0007 	bic.w	r0, r0, #7
 80052f6:	1ac2      	subs	r2, r0, r3
 80052f8:	d0cc      	beq.n	8005294 <_malloc_r+0x20>
 80052fa:	1a1b      	subs	r3, r3, r0
 80052fc:	50a3      	str	r3, [r4, r2]
 80052fe:	e7c9      	b.n	8005294 <_malloc_r+0x20>
 8005300:	4622      	mov	r2, r4
 8005302:	6864      	ldr	r4, [r4, #4]
 8005304:	e7cc      	b.n	80052a0 <_malloc_r+0x2c>
 8005306:	1cc4      	adds	r4, r0, #3
 8005308:	f024 0403 	bic.w	r4, r4, #3
 800530c:	42a0      	cmp	r0, r4
 800530e:	d0e3      	beq.n	80052d8 <_malloc_r+0x64>
 8005310:	1a21      	subs	r1, r4, r0
 8005312:	4630      	mov	r0, r6
 8005314:	f000 fc52 	bl	8005bbc <_sbrk_r>
 8005318:	3001      	adds	r0, #1
 800531a:	d1dd      	bne.n	80052d8 <_malloc_r+0x64>
 800531c:	e7cf      	b.n	80052be <_malloc_r+0x4a>
 800531e:	bf00      	nop
 8005320:	20000090 	.word	0x20000090
 8005324:	20000094 	.word	0x20000094

08005328 <__ssputs_r>:
 8005328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800532c:	688e      	ldr	r6, [r1, #8]
 800532e:	429e      	cmp	r6, r3
 8005330:	4682      	mov	sl, r0
 8005332:	460c      	mov	r4, r1
 8005334:	4690      	mov	r8, r2
 8005336:	461f      	mov	r7, r3
 8005338:	d838      	bhi.n	80053ac <__ssputs_r+0x84>
 800533a:	898a      	ldrh	r2, [r1, #12]
 800533c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005340:	d032      	beq.n	80053a8 <__ssputs_r+0x80>
 8005342:	6825      	ldr	r5, [r4, #0]
 8005344:	6909      	ldr	r1, [r1, #16]
 8005346:	eba5 0901 	sub.w	r9, r5, r1
 800534a:	6965      	ldr	r5, [r4, #20]
 800534c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005354:	3301      	adds	r3, #1
 8005356:	444b      	add	r3, r9
 8005358:	106d      	asrs	r5, r5, #1
 800535a:	429d      	cmp	r5, r3
 800535c:	bf38      	it	cc
 800535e:	461d      	movcc	r5, r3
 8005360:	0553      	lsls	r3, r2, #21
 8005362:	d531      	bpl.n	80053c8 <__ssputs_r+0xa0>
 8005364:	4629      	mov	r1, r5
 8005366:	f7ff ff85 	bl	8005274 <_malloc_r>
 800536a:	4606      	mov	r6, r0
 800536c:	b950      	cbnz	r0, 8005384 <__ssputs_r+0x5c>
 800536e:	230c      	movs	r3, #12
 8005370:	f8ca 3000 	str.w	r3, [sl]
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800537a:	81a3      	strh	r3, [r4, #12]
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005384:	6921      	ldr	r1, [r4, #16]
 8005386:	464a      	mov	r2, r9
 8005388:	f000 ff0e 	bl	80061a8 <memcpy>
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005396:	81a3      	strh	r3, [r4, #12]
 8005398:	6126      	str	r6, [r4, #16]
 800539a:	6165      	str	r5, [r4, #20]
 800539c:	444e      	add	r6, r9
 800539e:	eba5 0509 	sub.w	r5, r5, r9
 80053a2:	6026      	str	r6, [r4, #0]
 80053a4:	60a5      	str	r5, [r4, #8]
 80053a6:	463e      	mov	r6, r7
 80053a8:	42be      	cmp	r6, r7
 80053aa:	d900      	bls.n	80053ae <__ssputs_r+0x86>
 80053ac:	463e      	mov	r6, r7
 80053ae:	4632      	mov	r2, r6
 80053b0:	6820      	ldr	r0, [r4, #0]
 80053b2:	4641      	mov	r1, r8
 80053b4:	f000 ff06 	bl	80061c4 <memmove>
 80053b8:	68a3      	ldr	r3, [r4, #8]
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	1b9b      	subs	r3, r3, r6
 80053be:	4432      	add	r2, r6
 80053c0:	60a3      	str	r3, [r4, #8]
 80053c2:	6022      	str	r2, [r4, #0]
 80053c4:	2000      	movs	r0, #0
 80053c6:	e7db      	b.n	8005380 <__ssputs_r+0x58>
 80053c8:	462a      	mov	r2, r5
 80053ca:	f000 ff21 	bl	8006210 <_realloc_r>
 80053ce:	4606      	mov	r6, r0
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d1e1      	bne.n	8005398 <__ssputs_r+0x70>
 80053d4:	6921      	ldr	r1, [r4, #16]
 80053d6:	4650      	mov	r0, sl
 80053d8:	f7ff fefc 	bl	80051d4 <_free_r>
 80053dc:	e7c7      	b.n	800536e <__ssputs_r+0x46>
	...

080053e0 <_svfiprintf_r>:
 80053e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e4:	4698      	mov	r8, r3
 80053e6:	898b      	ldrh	r3, [r1, #12]
 80053e8:	061b      	lsls	r3, r3, #24
 80053ea:	b09d      	sub	sp, #116	; 0x74
 80053ec:	4607      	mov	r7, r0
 80053ee:	460d      	mov	r5, r1
 80053f0:	4614      	mov	r4, r2
 80053f2:	d50e      	bpl.n	8005412 <_svfiprintf_r+0x32>
 80053f4:	690b      	ldr	r3, [r1, #16]
 80053f6:	b963      	cbnz	r3, 8005412 <_svfiprintf_r+0x32>
 80053f8:	2140      	movs	r1, #64	; 0x40
 80053fa:	f7ff ff3b 	bl	8005274 <_malloc_r>
 80053fe:	6028      	str	r0, [r5, #0]
 8005400:	6128      	str	r0, [r5, #16]
 8005402:	b920      	cbnz	r0, 800540e <_svfiprintf_r+0x2e>
 8005404:	230c      	movs	r3, #12
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	e0d1      	b.n	80055b2 <_svfiprintf_r+0x1d2>
 800540e:	2340      	movs	r3, #64	; 0x40
 8005410:	616b      	str	r3, [r5, #20]
 8005412:	2300      	movs	r3, #0
 8005414:	9309      	str	r3, [sp, #36]	; 0x24
 8005416:	2320      	movs	r3, #32
 8005418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800541c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005420:	2330      	movs	r3, #48	; 0x30
 8005422:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055cc <_svfiprintf_r+0x1ec>
 8005426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800542a:	f04f 0901 	mov.w	r9, #1
 800542e:	4623      	mov	r3, r4
 8005430:	469a      	mov	sl, r3
 8005432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005436:	b10a      	cbz	r2, 800543c <_svfiprintf_r+0x5c>
 8005438:	2a25      	cmp	r2, #37	; 0x25
 800543a:	d1f9      	bne.n	8005430 <_svfiprintf_r+0x50>
 800543c:	ebba 0b04 	subs.w	fp, sl, r4
 8005440:	d00b      	beq.n	800545a <_svfiprintf_r+0x7a>
 8005442:	465b      	mov	r3, fp
 8005444:	4622      	mov	r2, r4
 8005446:	4629      	mov	r1, r5
 8005448:	4638      	mov	r0, r7
 800544a:	f7ff ff6d 	bl	8005328 <__ssputs_r>
 800544e:	3001      	adds	r0, #1
 8005450:	f000 80aa 	beq.w	80055a8 <_svfiprintf_r+0x1c8>
 8005454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005456:	445a      	add	r2, fp
 8005458:	9209      	str	r2, [sp, #36]	; 0x24
 800545a:	f89a 3000 	ldrb.w	r3, [sl]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80a2 	beq.w	80055a8 <_svfiprintf_r+0x1c8>
 8005464:	2300      	movs	r3, #0
 8005466:	f04f 32ff 	mov.w	r2, #4294967295
 800546a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800546e:	f10a 0a01 	add.w	sl, sl, #1
 8005472:	9304      	str	r3, [sp, #16]
 8005474:	9307      	str	r3, [sp, #28]
 8005476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800547a:	931a      	str	r3, [sp, #104]	; 0x68
 800547c:	4654      	mov	r4, sl
 800547e:	2205      	movs	r2, #5
 8005480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005484:	4851      	ldr	r0, [pc, #324]	; (80055cc <_svfiprintf_r+0x1ec>)
 8005486:	f7fa fec3 	bl	8000210 <memchr>
 800548a:	9a04      	ldr	r2, [sp, #16]
 800548c:	b9d8      	cbnz	r0, 80054c6 <_svfiprintf_r+0xe6>
 800548e:	06d0      	lsls	r0, r2, #27
 8005490:	bf44      	itt	mi
 8005492:	2320      	movmi	r3, #32
 8005494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005498:	0711      	lsls	r1, r2, #28
 800549a:	bf44      	itt	mi
 800549c:	232b      	movmi	r3, #43	; 0x2b
 800549e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054a2:	f89a 3000 	ldrb.w	r3, [sl]
 80054a6:	2b2a      	cmp	r3, #42	; 0x2a
 80054a8:	d015      	beq.n	80054d6 <_svfiprintf_r+0xf6>
 80054aa:	9a07      	ldr	r2, [sp, #28]
 80054ac:	4654      	mov	r4, sl
 80054ae:	2000      	movs	r0, #0
 80054b0:	f04f 0c0a 	mov.w	ip, #10
 80054b4:	4621      	mov	r1, r4
 80054b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054ba:	3b30      	subs	r3, #48	; 0x30
 80054bc:	2b09      	cmp	r3, #9
 80054be:	d94e      	bls.n	800555e <_svfiprintf_r+0x17e>
 80054c0:	b1b0      	cbz	r0, 80054f0 <_svfiprintf_r+0x110>
 80054c2:	9207      	str	r2, [sp, #28]
 80054c4:	e014      	b.n	80054f0 <_svfiprintf_r+0x110>
 80054c6:	eba0 0308 	sub.w	r3, r0, r8
 80054ca:	fa09 f303 	lsl.w	r3, r9, r3
 80054ce:	4313      	orrs	r3, r2
 80054d0:	9304      	str	r3, [sp, #16]
 80054d2:	46a2      	mov	sl, r4
 80054d4:	e7d2      	b.n	800547c <_svfiprintf_r+0x9c>
 80054d6:	9b03      	ldr	r3, [sp, #12]
 80054d8:	1d19      	adds	r1, r3, #4
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	9103      	str	r1, [sp, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bfbb      	ittet	lt
 80054e2:	425b      	neglt	r3, r3
 80054e4:	f042 0202 	orrlt.w	r2, r2, #2
 80054e8:	9307      	strge	r3, [sp, #28]
 80054ea:	9307      	strlt	r3, [sp, #28]
 80054ec:	bfb8      	it	lt
 80054ee:	9204      	strlt	r2, [sp, #16]
 80054f0:	7823      	ldrb	r3, [r4, #0]
 80054f2:	2b2e      	cmp	r3, #46	; 0x2e
 80054f4:	d10c      	bne.n	8005510 <_svfiprintf_r+0x130>
 80054f6:	7863      	ldrb	r3, [r4, #1]
 80054f8:	2b2a      	cmp	r3, #42	; 0x2a
 80054fa:	d135      	bne.n	8005568 <_svfiprintf_r+0x188>
 80054fc:	9b03      	ldr	r3, [sp, #12]
 80054fe:	1d1a      	adds	r2, r3, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	9203      	str	r2, [sp, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	bfb8      	it	lt
 8005508:	f04f 33ff 	movlt.w	r3, #4294967295
 800550c:	3402      	adds	r4, #2
 800550e:	9305      	str	r3, [sp, #20]
 8005510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055dc <_svfiprintf_r+0x1fc>
 8005514:	7821      	ldrb	r1, [r4, #0]
 8005516:	2203      	movs	r2, #3
 8005518:	4650      	mov	r0, sl
 800551a:	f7fa fe79 	bl	8000210 <memchr>
 800551e:	b140      	cbz	r0, 8005532 <_svfiprintf_r+0x152>
 8005520:	2340      	movs	r3, #64	; 0x40
 8005522:	eba0 000a 	sub.w	r0, r0, sl
 8005526:	fa03 f000 	lsl.w	r0, r3, r0
 800552a:	9b04      	ldr	r3, [sp, #16]
 800552c:	4303      	orrs	r3, r0
 800552e:	3401      	adds	r4, #1
 8005530:	9304      	str	r3, [sp, #16]
 8005532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005536:	4826      	ldr	r0, [pc, #152]	; (80055d0 <_svfiprintf_r+0x1f0>)
 8005538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800553c:	2206      	movs	r2, #6
 800553e:	f7fa fe67 	bl	8000210 <memchr>
 8005542:	2800      	cmp	r0, #0
 8005544:	d038      	beq.n	80055b8 <_svfiprintf_r+0x1d8>
 8005546:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <_svfiprintf_r+0x1f4>)
 8005548:	bb1b      	cbnz	r3, 8005592 <_svfiprintf_r+0x1b2>
 800554a:	9b03      	ldr	r3, [sp, #12]
 800554c:	3307      	adds	r3, #7
 800554e:	f023 0307 	bic.w	r3, r3, #7
 8005552:	3308      	adds	r3, #8
 8005554:	9303      	str	r3, [sp, #12]
 8005556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005558:	4433      	add	r3, r6
 800555a:	9309      	str	r3, [sp, #36]	; 0x24
 800555c:	e767      	b.n	800542e <_svfiprintf_r+0x4e>
 800555e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005562:	460c      	mov	r4, r1
 8005564:	2001      	movs	r0, #1
 8005566:	e7a5      	b.n	80054b4 <_svfiprintf_r+0xd4>
 8005568:	2300      	movs	r3, #0
 800556a:	3401      	adds	r4, #1
 800556c:	9305      	str	r3, [sp, #20]
 800556e:	4619      	mov	r1, r3
 8005570:	f04f 0c0a 	mov.w	ip, #10
 8005574:	4620      	mov	r0, r4
 8005576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800557a:	3a30      	subs	r2, #48	; 0x30
 800557c:	2a09      	cmp	r2, #9
 800557e:	d903      	bls.n	8005588 <_svfiprintf_r+0x1a8>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0c5      	beq.n	8005510 <_svfiprintf_r+0x130>
 8005584:	9105      	str	r1, [sp, #20]
 8005586:	e7c3      	b.n	8005510 <_svfiprintf_r+0x130>
 8005588:	fb0c 2101 	mla	r1, ip, r1, r2
 800558c:	4604      	mov	r4, r0
 800558e:	2301      	movs	r3, #1
 8005590:	e7f0      	b.n	8005574 <_svfiprintf_r+0x194>
 8005592:	ab03      	add	r3, sp, #12
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	462a      	mov	r2, r5
 8005598:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <_svfiprintf_r+0x1f8>)
 800559a:	a904      	add	r1, sp, #16
 800559c:	4638      	mov	r0, r7
 800559e:	f3af 8000 	nop.w
 80055a2:	1c42      	adds	r2, r0, #1
 80055a4:	4606      	mov	r6, r0
 80055a6:	d1d6      	bne.n	8005556 <_svfiprintf_r+0x176>
 80055a8:	89ab      	ldrh	r3, [r5, #12]
 80055aa:	065b      	lsls	r3, r3, #25
 80055ac:	f53f af2c 	bmi.w	8005408 <_svfiprintf_r+0x28>
 80055b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055b2:	b01d      	add	sp, #116	; 0x74
 80055b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b8:	ab03      	add	r3, sp, #12
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	462a      	mov	r2, r5
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <_svfiprintf_r+0x1f8>)
 80055c0:	a904      	add	r1, sp, #16
 80055c2:	4638      	mov	r0, r7
 80055c4:	f000 f9d4 	bl	8005970 <_printf_i>
 80055c8:	e7eb      	b.n	80055a2 <_svfiprintf_r+0x1c2>
 80055ca:	bf00      	nop
 80055cc:	08018d7d 	.word	0x08018d7d
 80055d0:	08018d87 	.word	0x08018d87
 80055d4:	00000000 	.word	0x00000000
 80055d8:	08005329 	.word	0x08005329
 80055dc:	08018d83 	.word	0x08018d83

080055e0 <__sfputc_r>:
 80055e0:	6893      	ldr	r3, [r2, #8]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	b410      	push	{r4}
 80055e8:	6093      	str	r3, [r2, #8]
 80055ea:	da08      	bge.n	80055fe <__sfputc_r+0x1e>
 80055ec:	6994      	ldr	r4, [r2, #24]
 80055ee:	42a3      	cmp	r3, r4
 80055f0:	db01      	blt.n	80055f6 <__sfputc_r+0x16>
 80055f2:	290a      	cmp	r1, #10
 80055f4:	d103      	bne.n	80055fe <__sfputc_r+0x1e>
 80055f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055fa:	f000 baef 	b.w	8005bdc <__swbuf_r>
 80055fe:	6813      	ldr	r3, [r2, #0]
 8005600:	1c58      	adds	r0, r3, #1
 8005602:	6010      	str	r0, [r2, #0]
 8005604:	7019      	strb	r1, [r3, #0]
 8005606:	4608      	mov	r0, r1
 8005608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800560c:	4770      	bx	lr

0800560e <__sfputs_r>:
 800560e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005610:	4606      	mov	r6, r0
 8005612:	460f      	mov	r7, r1
 8005614:	4614      	mov	r4, r2
 8005616:	18d5      	adds	r5, r2, r3
 8005618:	42ac      	cmp	r4, r5
 800561a:	d101      	bne.n	8005620 <__sfputs_r+0x12>
 800561c:	2000      	movs	r0, #0
 800561e:	e007      	b.n	8005630 <__sfputs_r+0x22>
 8005620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005624:	463a      	mov	r2, r7
 8005626:	4630      	mov	r0, r6
 8005628:	f7ff ffda 	bl	80055e0 <__sfputc_r>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d1f3      	bne.n	8005618 <__sfputs_r+0xa>
 8005630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005634 <_vfiprintf_r>:
 8005634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	460d      	mov	r5, r1
 800563a:	b09d      	sub	sp, #116	; 0x74
 800563c:	4614      	mov	r4, r2
 800563e:	4698      	mov	r8, r3
 8005640:	4606      	mov	r6, r0
 8005642:	b118      	cbz	r0, 800564c <_vfiprintf_r+0x18>
 8005644:	6983      	ldr	r3, [r0, #24]
 8005646:	b90b      	cbnz	r3, 800564c <_vfiprintf_r+0x18>
 8005648:	f000 fcaa 	bl	8005fa0 <__sinit>
 800564c:	4b89      	ldr	r3, [pc, #548]	; (8005874 <_vfiprintf_r+0x240>)
 800564e:	429d      	cmp	r5, r3
 8005650:	d11b      	bne.n	800568a <_vfiprintf_r+0x56>
 8005652:	6875      	ldr	r5, [r6, #4]
 8005654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005656:	07d9      	lsls	r1, r3, #31
 8005658:	d405      	bmi.n	8005666 <_vfiprintf_r+0x32>
 800565a:	89ab      	ldrh	r3, [r5, #12]
 800565c:	059a      	lsls	r2, r3, #22
 800565e:	d402      	bmi.n	8005666 <_vfiprintf_r+0x32>
 8005660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005662:	f000 fd3b 	bl	80060dc <__retarget_lock_acquire_recursive>
 8005666:	89ab      	ldrh	r3, [r5, #12]
 8005668:	071b      	lsls	r3, r3, #28
 800566a:	d501      	bpl.n	8005670 <_vfiprintf_r+0x3c>
 800566c:	692b      	ldr	r3, [r5, #16]
 800566e:	b9eb      	cbnz	r3, 80056ac <_vfiprintf_r+0x78>
 8005670:	4629      	mov	r1, r5
 8005672:	4630      	mov	r0, r6
 8005674:	f000 fb04 	bl	8005c80 <__swsetup_r>
 8005678:	b1c0      	cbz	r0, 80056ac <_vfiprintf_r+0x78>
 800567a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800567c:	07dc      	lsls	r4, r3, #31
 800567e:	d50e      	bpl.n	800569e <_vfiprintf_r+0x6a>
 8005680:	f04f 30ff 	mov.w	r0, #4294967295
 8005684:	b01d      	add	sp, #116	; 0x74
 8005686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568a:	4b7b      	ldr	r3, [pc, #492]	; (8005878 <_vfiprintf_r+0x244>)
 800568c:	429d      	cmp	r5, r3
 800568e:	d101      	bne.n	8005694 <_vfiprintf_r+0x60>
 8005690:	68b5      	ldr	r5, [r6, #8]
 8005692:	e7df      	b.n	8005654 <_vfiprintf_r+0x20>
 8005694:	4b79      	ldr	r3, [pc, #484]	; (800587c <_vfiprintf_r+0x248>)
 8005696:	429d      	cmp	r5, r3
 8005698:	bf08      	it	eq
 800569a:	68f5      	ldreq	r5, [r6, #12]
 800569c:	e7da      	b.n	8005654 <_vfiprintf_r+0x20>
 800569e:	89ab      	ldrh	r3, [r5, #12]
 80056a0:	0598      	lsls	r0, r3, #22
 80056a2:	d4ed      	bmi.n	8005680 <_vfiprintf_r+0x4c>
 80056a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056a6:	f000 fd1a 	bl	80060de <__retarget_lock_release_recursive>
 80056aa:	e7e9      	b.n	8005680 <_vfiprintf_r+0x4c>
 80056ac:	2300      	movs	r3, #0
 80056ae:	9309      	str	r3, [sp, #36]	; 0x24
 80056b0:	2320      	movs	r3, #32
 80056b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ba:	2330      	movs	r3, #48	; 0x30
 80056bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005880 <_vfiprintf_r+0x24c>
 80056c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056c4:	f04f 0901 	mov.w	r9, #1
 80056c8:	4623      	mov	r3, r4
 80056ca:	469a      	mov	sl, r3
 80056cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056d0:	b10a      	cbz	r2, 80056d6 <_vfiprintf_r+0xa2>
 80056d2:	2a25      	cmp	r2, #37	; 0x25
 80056d4:	d1f9      	bne.n	80056ca <_vfiprintf_r+0x96>
 80056d6:	ebba 0b04 	subs.w	fp, sl, r4
 80056da:	d00b      	beq.n	80056f4 <_vfiprintf_r+0xc0>
 80056dc:	465b      	mov	r3, fp
 80056de:	4622      	mov	r2, r4
 80056e0:	4629      	mov	r1, r5
 80056e2:	4630      	mov	r0, r6
 80056e4:	f7ff ff93 	bl	800560e <__sfputs_r>
 80056e8:	3001      	adds	r0, #1
 80056ea:	f000 80aa 	beq.w	8005842 <_vfiprintf_r+0x20e>
 80056ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f0:	445a      	add	r2, fp
 80056f2:	9209      	str	r2, [sp, #36]	; 0x24
 80056f4:	f89a 3000 	ldrb.w	r3, [sl]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80a2 	beq.w	8005842 <_vfiprintf_r+0x20e>
 80056fe:	2300      	movs	r3, #0
 8005700:	f04f 32ff 	mov.w	r2, #4294967295
 8005704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005708:	f10a 0a01 	add.w	sl, sl, #1
 800570c:	9304      	str	r3, [sp, #16]
 800570e:	9307      	str	r3, [sp, #28]
 8005710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005714:	931a      	str	r3, [sp, #104]	; 0x68
 8005716:	4654      	mov	r4, sl
 8005718:	2205      	movs	r2, #5
 800571a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571e:	4858      	ldr	r0, [pc, #352]	; (8005880 <_vfiprintf_r+0x24c>)
 8005720:	f7fa fd76 	bl	8000210 <memchr>
 8005724:	9a04      	ldr	r2, [sp, #16]
 8005726:	b9d8      	cbnz	r0, 8005760 <_vfiprintf_r+0x12c>
 8005728:	06d1      	lsls	r1, r2, #27
 800572a:	bf44      	itt	mi
 800572c:	2320      	movmi	r3, #32
 800572e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005732:	0713      	lsls	r3, r2, #28
 8005734:	bf44      	itt	mi
 8005736:	232b      	movmi	r3, #43	; 0x2b
 8005738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800573c:	f89a 3000 	ldrb.w	r3, [sl]
 8005740:	2b2a      	cmp	r3, #42	; 0x2a
 8005742:	d015      	beq.n	8005770 <_vfiprintf_r+0x13c>
 8005744:	9a07      	ldr	r2, [sp, #28]
 8005746:	4654      	mov	r4, sl
 8005748:	2000      	movs	r0, #0
 800574a:	f04f 0c0a 	mov.w	ip, #10
 800574e:	4621      	mov	r1, r4
 8005750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005754:	3b30      	subs	r3, #48	; 0x30
 8005756:	2b09      	cmp	r3, #9
 8005758:	d94e      	bls.n	80057f8 <_vfiprintf_r+0x1c4>
 800575a:	b1b0      	cbz	r0, 800578a <_vfiprintf_r+0x156>
 800575c:	9207      	str	r2, [sp, #28]
 800575e:	e014      	b.n	800578a <_vfiprintf_r+0x156>
 8005760:	eba0 0308 	sub.w	r3, r0, r8
 8005764:	fa09 f303 	lsl.w	r3, r9, r3
 8005768:	4313      	orrs	r3, r2
 800576a:	9304      	str	r3, [sp, #16]
 800576c:	46a2      	mov	sl, r4
 800576e:	e7d2      	b.n	8005716 <_vfiprintf_r+0xe2>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	1d19      	adds	r1, r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	9103      	str	r1, [sp, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	bfbb      	ittet	lt
 800577c:	425b      	neglt	r3, r3
 800577e:	f042 0202 	orrlt.w	r2, r2, #2
 8005782:	9307      	strge	r3, [sp, #28]
 8005784:	9307      	strlt	r3, [sp, #28]
 8005786:	bfb8      	it	lt
 8005788:	9204      	strlt	r2, [sp, #16]
 800578a:	7823      	ldrb	r3, [r4, #0]
 800578c:	2b2e      	cmp	r3, #46	; 0x2e
 800578e:	d10c      	bne.n	80057aa <_vfiprintf_r+0x176>
 8005790:	7863      	ldrb	r3, [r4, #1]
 8005792:	2b2a      	cmp	r3, #42	; 0x2a
 8005794:	d135      	bne.n	8005802 <_vfiprintf_r+0x1ce>
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	1d1a      	adds	r2, r3, #4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	9203      	str	r2, [sp, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfb8      	it	lt
 80057a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80057a6:	3402      	adds	r4, #2
 80057a8:	9305      	str	r3, [sp, #20]
 80057aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005890 <_vfiprintf_r+0x25c>
 80057ae:	7821      	ldrb	r1, [r4, #0]
 80057b0:	2203      	movs	r2, #3
 80057b2:	4650      	mov	r0, sl
 80057b4:	f7fa fd2c 	bl	8000210 <memchr>
 80057b8:	b140      	cbz	r0, 80057cc <_vfiprintf_r+0x198>
 80057ba:	2340      	movs	r3, #64	; 0x40
 80057bc:	eba0 000a 	sub.w	r0, r0, sl
 80057c0:	fa03 f000 	lsl.w	r0, r3, r0
 80057c4:	9b04      	ldr	r3, [sp, #16]
 80057c6:	4303      	orrs	r3, r0
 80057c8:	3401      	adds	r4, #1
 80057ca:	9304      	str	r3, [sp, #16]
 80057cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d0:	482c      	ldr	r0, [pc, #176]	; (8005884 <_vfiprintf_r+0x250>)
 80057d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057d6:	2206      	movs	r2, #6
 80057d8:	f7fa fd1a 	bl	8000210 <memchr>
 80057dc:	2800      	cmp	r0, #0
 80057de:	d03f      	beq.n	8005860 <_vfiprintf_r+0x22c>
 80057e0:	4b29      	ldr	r3, [pc, #164]	; (8005888 <_vfiprintf_r+0x254>)
 80057e2:	bb1b      	cbnz	r3, 800582c <_vfiprintf_r+0x1f8>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	3307      	adds	r3, #7
 80057e8:	f023 0307 	bic.w	r3, r3, #7
 80057ec:	3308      	adds	r3, #8
 80057ee:	9303      	str	r3, [sp, #12]
 80057f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f2:	443b      	add	r3, r7
 80057f4:	9309      	str	r3, [sp, #36]	; 0x24
 80057f6:	e767      	b.n	80056c8 <_vfiprintf_r+0x94>
 80057f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80057fc:	460c      	mov	r4, r1
 80057fe:	2001      	movs	r0, #1
 8005800:	e7a5      	b.n	800574e <_vfiprintf_r+0x11a>
 8005802:	2300      	movs	r3, #0
 8005804:	3401      	adds	r4, #1
 8005806:	9305      	str	r3, [sp, #20]
 8005808:	4619      	mov	r1, r3
 800580a:	f04f 0c0a 	mov.w	ip, #10
 800580e:	4620      	mov	r0, r4
 8005810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005814:	3a30      	subs	r2, #48	; 0x30
 8005816:	2a09      	cmp	r2, #9
 8005818:	d903      	bls.n	8005822 <_vfiprintf_r+0x1ee>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0c5      	beq.n	80057aa <_vfiprintf_r+0x176>
 800581e:	9105      	str	r1, [sp, #20]
 8005820:	e7c3      	b.n	80057aa <_vfiprintf_r+0x176>
 8005822:	fb0c 2101 	mla	r1, ip, r1, r2
 8005826:	4604      	mov	r4, r0
 8005828:	2301      	movs	r3, #1
 800582a:	e7f0      	b.n	800580e <_vfiprintf_r+0x1da>
 800582c:	ab03      	add	r3, sp, #12
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	462a      	mov	r2, r5
 8005832:	4b16      	ldr	r3, [pc, #88]	; (800588c <_vfiprintf_r+0x258>)
 8005834:	a904      	add	r1, sp, #16
 8005836:	4630      	mov	r0, r6
 8005838:	f3af 8000 	nop.w
 800583c:	4607      	mov	r7, r0
 800583e:	1c78      	adds	r0, r7, #1
 8005840:	d1d6      	bne.n	80057f0 <_vfiprintf_r+0x1bc>
 8005842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005844:	07d9      	lsls	r1, r3, #31
 8005846:	d405      	bmi.n	8005854 <_vfiprintf_r+0x220>
 8005848:	89ab      	ldrh	r3, [r5, #12]
 800584a:	059a      	lsls	r2, r3, #22
 800584c:	d402      	bmi.n	8005854 <_vfiprintf_r+0x220>
 800584e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005850:	f000 fc45 	bl	80060de <__retarget_lock_release_recursive>
 8005854:	89ab      	ldrh	r3, [r5, #12]
 8005856:	065b      	lsls	r3, r3, #25
 8005858:	f53f af12 	bmi.w	8005680 <_vfiprintf_r+0x4c>
 800585c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800585e:	e711      	b.n	8005684 <_vfiprintf_r+0x50>
 8005860:	ab03      	add	r3, sp, #12
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	462a      	mov	r2, r5
 8005866:	4b09      	ldr	r3, [pc, #36]	; (800588c <_vfiprintf_r+0x258>)
 8005868:	a904      	add	r1, sp, #16
 800586a:	4630      	mov	r0, r6
 800586c:	f000 f880 	bl	8005970 <_printf_i>
 8005870:	e7e4      	b.n	800583c <_vfiprintf_r+0x208>
 8005872:	bf00      	nop
 8005874:	08018dd0 	.word	0x08018dd0
 8005878:	08018df0 	.word	0x08018df0
 800587c:	08018db0 	.word	0x08018db0
 8005880:	08018d7d 	.word	0x08018d7d
 8005884:	08018d87 	.word	0x08018d87
 8005888:	00000000 	.word	0x00000000
 800588c:	0800560f 	.word	0x0800560f
 8005890:	08018d83 	.word	0x08018d83

08005894 <_printf_common>:
 8005894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	4616      	mov	r6, r2
 800589a:	4699      	mov	r9, r3
 800589c:	688a      	ldr	r2, [r1, #8]
 800589e:	690b      	ldr	r3, [r1, #16]
 80058a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058a4:	4293      	cmp	r3, r2
 80058a6:	bfb8      	it	lt
 80058a8:	4613      	movlt	r3, r2
 80058aa:	6033      	str	r3, [r6, #0]
 80058ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058b0:	4607      	mov	r7, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	b10a      	cbz	r2, 80058ba <_printf_common+0x26>
 80058b6:	3301      	adds	r3, #1
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	0699      	lsls	r1, r3, #26
 80058be:	bf42      	ittt	mi
 80058c0:	6833      	ldrmi	r3, [r6, #0]
 80058c2:	3302      	addmi	r3, #2
 80058c4:	6033      	strmi	r3, [r6, #0]
 80058c6:	6825      	ldr	r5, [r4, #0]
 80058c8:	f015 0506 	ands.w	r5, r5, #6
 80058cc:	d106      	bne.n	80058dc <_printf_common+0x48>
 80058ce:	f104 0a19 	add.w	sl, r4, #25
 80058d2:	68e3      	ldr	r3, [r4, #12]
 80058d4:	6832      	ldr	r2, [r6, #0]
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	42ab      	cmp	r3, r5
 80058da:	dc26      	bgt.n	800592a <_printf_common+0x96>
 80058dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058e0:	1e13      	subs	r3, r2, #0
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	bf18      	it	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	0692      	lsls	r2, r2, #26
 80058ea:	d42b      	bmi.n	8005944 <_printf_common+0xb0>
 80058ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058f0:	4649      	mov	r1, r9
 80058f2:	4638      	mov	r0, r7
 80058f4:	47c0      	blx	r8
 80058f6:	3001      	adds	r0, #1
 80058f8:	d01e      	beq.n	8005938 <_printf_common+0xa4>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	68e5      	ldr	r5, [r4, #12]
 80058fe:	6832      	ldr	r2, [r6, #0]
 8005900:	f003 0306 	and.w	r3, r3, #6
 8005904:	2b04      	cmp	r3, #4
 8005906:	bf08      	it	eq
 8005908:	1aad      	subeq	r5, r5, r2
 800590a:	68a3      	ldr	r3, [r4, #8]
 800590c:	6922      	ldr	r2, [r4, #16]
 800590e:	bf0c      	ite	eq
 8005910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005914:	2500      	movne	r5, #0
 8005916:	4293      	cmp	r3, r2
 8005918:	bfc4      	itt	gt
 800591a:	1a9b      	subgt	r3, r3, r2
 800591c:	18ed      	addgt	r5, r5, r3
 800591e:	2600      	movs	r6, #0
 8005920:	341a      	adds	r4, #26
 8005922:	42b5      	cmp	r5, r6
 8005924:	d11a      	bne.n	800595c <_printf_common+0xc8>
 8005926:	2000      	movs	r0, #0
 8005928:	e008      	b.n	800593c <_printf_common+0xa8>
 800592a:	2301      	movs	r3, #1
 800592c:	4652      	mov	r2, sl
 800592e:	4649      	mov	r1, r9
 8005930:	4638      	mov	r0, r7
 8005932:	47c0      	blx	r8
 8005934:	3001      	adds	r0, #1
 8005936:	d103      	bne.n	8005940 <_printf_common+0xac>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005940:	3501      	adds	r5, #1
 8005942:	e7c6      	b.n	80058d2 <_printf_common+0x3e>
 8005944:	18e1      	adds	r1, r4, r3
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	2030      	movs	r0, #48	; 0x30
 800594a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800594e:	4422      	add	r2, r4
 8005950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005958:	3302      	adds	r3, #2
 800595a:	e7c7      	b.n	80058ec <_printf_common+0x58>
 800595c:	2301      	movs	r3, #1
 800595e:	4622      	mov	r2, r4
 8005960:	4649      	mov	r1, r9
 8005962:	4638      	mov	r0, r7
 8005964:	47c0      	blx	r8
 8005966:	3001      	adds	r0, #1
 8005968:	d0e6      	beq.n	8005938 <_printf_common+0xa4>
 800596a:	3601      	adds	r6, #1
 800596c:	e7d9      	b.n	8005922 <_printf_common+0x8e>
	...

08005970 <_printf_i>:
 8005970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	460c      	mov	r4, r1
 8005976:	4691      	mov	r9, r2
 8005978:	7e27      	ldrb	r7, [r4, #24]
 800597a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800597c:	2f78      	cmp	r7, #120	; 0x78
 800597e:	4680      	mov	r8, r0
 8005980:	469a      	mov	sl, r3
 8005982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005986:	d807      	bhi.n	8005998 <_printf_i+0x28>
 8005988:	2f62      	cmp	r7, #98	; 0x62
 800598a:	d80a      	bhi.n	80059a2 <_printf_i+0x32>
 800598c:	2f00      	cmp	r7, #0
 800598e:	f000 80d8 	beq.w	8005b42 <_printf_i+0x1d2>
 8005992:	2f58      	cmp	r7, #88	; 0x58
 8005994:	f000 80a3 	beq.w	8005ade <_printf_i+0x16e>
 8005998:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800599c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059a0:	e03a      	b.n	8005a18 <_printf_i+0xa8>
 80059a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059a6:	2b15      	cmp	r3, #21
 80059a8:	d8f6      	bhi.n	8005998 <_printf_i+0x28>
 80059aa:	a001      	add	r0, pc, #4	; (adr r0, 80059b0 <_printf_i+0x40>)
 80059ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059b0:	08005a09 	.word	0x08005a09
 80059b4:	08005a1d 	.word	0x08005a1d
 80059b8:	08005999 	.word	0x08005999
 80059bc:	08005999 	.word	0x08005999
 80059c0:	08005999 	.word	0x08005999
 80059c4:	08005999 	.word	0x08005999
 80059c8:	08005a1d 	.word	0x08005a1d
 80059cc:	08005999 	.word	0x08005999
 80059d0:	08005999 	.word	0x08005999
 80059d4:	08005999 	.word	0x08005999
 80059d8:	08005999 	.word	0x08005999
 80059dc:	08005b29 	.word	0x08005b29
 80059e0:	08005a4d 	.word	0x08005a4d
 80059e4:	08005b0b 	.word	0x08005b0b
 80059e8:	08005999 	.word	0x08005999
 80059ec:	08005999 	.word	0x08005999
 80059f0:	08005b4b 	.word	0x08005b4b
 80059f4:	08005999 	.word	0x08005999
 80059f8:	08005a4d 	.word	0x08005a4d
 80059fc:	08005999 	.word	0x08005999
 8005a00:	08005999 	.word	0x08005999
 8005a04:	08005b13 	.word	0x08005b13
 8005a08:	680b      	ldr	r3, [r1, #0]
 8005a0a:	1d1a      	adds	r2, r3, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	600a      	str	r2, [r1, #0]
 8005a10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0a3      	b.n	8005b64 <_printf_i+0x1f4>
 8005a1c:	6825      	ldr	r5, [r4, #0]
 8005a1e:	6808      	ldr	r0, [r1, #0]
 8005a20:	062e      	lsls	r6, r5, #24
 8005a22:	f100 0304 	add.w	r3, r0, #4
 8005a26:	d50a      	bpl.n	8005a3e <_printf_i+0xce>
 8005a28:	6805      	ldr	r5, [r0, #0]
 8005a2a:	600b      	str	r3, [r1, #0]
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	da03      	bge.n	8005a38 <_printf_i+0xc8>
 8005a30:	232d      	movs	r3, #45	; 0x2d
 8005a32:	426d      	negs	r5, r5
 8005a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a38:	485e      	ldr	r0, [pc, #376]	; (8005bb4 <_printf_i+0x244>)
 8005a3a:	230a      	movs	r3, #10
 8005a3c:	e019      	b.n	8005a72 <_printf_i+0x102>
 8005a3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a42:	6805      	ldr	r5, [r0, #0]
 8005a44:	600b      	str	r3, [r1, #0]
 8005a46:	bf18      	it	ne
 8005a48:	b22d      	sxthne	r5, r5
 8005a4a:	e7ef      	b.n	8005a2c <_printf_i+0xbc>
 8005a4c:	680b      	ldr	r3, [r1, #0]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	1d18      	adds	r0, r3, #4
 8005a52:	6008      	str	r0, [r1, #0]
 8005a54:	0628      	lsls	r0, r5, #24
 8005a56:	d501      	bpl.n	8005a5c <_printf_i+0xec>
 8005a58:	681d      	ldr	r5, [r3, #0]
 8005a5a:	e002      	b.n	8005a62 <_printf_i+0xf2>
 8005a5c:	0669      	lsls	r1, r5, #25
 8005a5e:	d5fb      	bpl.n	8005a58 <_printf_i+0xe8>
 8005a60:	881d      	ldrh	r5, [r3, #0]
 8005a62:	4854      	ldr	r0, [pc, #336]	; (8005bb4 <_printf_i+0x244>)
 8005a64:	2f6f      	cmp	r7, #111	; 0x6f
 8005a66:	bf0c      	ite	eq
 8005a68:	2308      	moveq	r3, #8
 8005a6a:	230a      	movne	r3, #10
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a72:	6866      	ldr	r6, [r4, #4]
 8005a74:	60a6      	str	r6, [r4, #8]
 8005a76:	2e00      	cmp	r6, #0
 8005a78:	bfa2      	ittt	ge
 8005a7a:	6821      	ldrge	r1, [r4, #0]
 8005a7c:	f021 0104 	bicge.w	r1, r1, #4
 8005a80:	6021      	strge	r1, [r4, #0]
 8005a82:	b90d      	cbnz	r5, 8005a88 <_printf_i+0x118>
 8005a84:	2e00      	cmp	r6, #0
 8005a86:	d04d      	beq.n	8005b24 <_printf_i+0x1b4>
 8005a88:	4616      	mov	r6, r2
 8005a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8005a92:	5dc7      	ldrb	r7, [r0, r7]
 8005a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a98:	462f      	mov	r7, r5
 8005a9a:	42bb      	cmp	r3, r7
 8005a9c:	460d      	mov	r5, r1
 8005a9e:	d9f4      	bls.n	8005a8a <_printf_i+0x11a>
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d10b      	bne.n	8005abc <_printf_i+0x14c>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	07df      	lsls	r7, r3, #31
 8005aa8:	d508      	bpl.n	8005abc <_printf_i+0x14c>
 8005aaa:	6923      	ldr	r3, [r4, #16]
 8005aac:	6861      	ldr	r1, [r4, #4]
 8005aae:	4299      	cmp	r1, r3
 8005ab0:	bfde      	ittt	le
 8005ab2:	2330      	movle	r3, #48	; 0x30
 8005ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ab8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005abc:	1b92      	subs	r2, r2, r6
 8005abe:	6122      	str	r2, [r4, #16]
 8005ac0:	f8cd a000 	str.w	sl, [sp]
 8005ac4:	464b      	mov	r3, r9
 8005ac6:	aa03      	add	r2, sp, #12
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4640      	mov	r0, r8
 8005acc:	f7ff fee2 	bl	8005894 <_printf_common>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d14c      	bne.n	8005b6e <_printf_i+0x1fe>
 8005ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad8:	b004      	add	sp, #16
 8005ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ade:	4835      	ldr	r0, [pc, #212]	; (8005bb4 <_printf_i+0x244>)
 8005ae0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	680e      	ldr	r6, [r1, #0]
 8005ae8:	061f      	lsls	r7, r3, #24
 8005aea:	f856 5b04 	ldr.w	r5, [r6], #4
 8005aee:	600e      	str	r6, [r1, #0]
 8005af0:	d514      	bpl.n	8005b1c <_printf_i+0x1ac>
 8005af2:	07d9      	lsls	r1, r3, #31
 8005af4:	bf44      	itt	mi
 8005af6:	f043 0320 	orrmi.w	r3, r3, #32
 8005afa:	6023      	strmi	r3, [r4, #0]
 8005afc:	b91d      	cbnz	r5, 8005b06 <_printf_i+0x196>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	f023 0320 	bic.w	r3, r3, #32
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	2310      	movs	r3, #16
 8005b08:	e7b0      	b.n	8005a6c <_printf_i+0xfc>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	f043 0320 	orr.w	r3, r3, #32
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	2378      	movs	r3, #120	; 0x78
 8005b14:	4828      	ldr	r0, [pc, #160]	; (8005bb8 <_printf_i+0x248>)
 8005b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b1a:	e7e3      	b.n	8005ae4 <_printf_i+0x174>
 8005b1c:	065e      	lsls	r6, r3, #25
 8005b1e:	bf48      	it	mi
 8005b20:	b2ad      	uxthmi	r5, r5
 8005b22:	e7e6      	b.n	8005af2 <_printf_i+0x182>
 8005b24:	4616      	mov	r6, r2
 8005b26:	e7bb      	b.n	8005aa0 <_printf_i+0x130>
 8005b28:	680b      	ldr	r3, [r1, #0]
 8005b2a:	6826      	ldr	r6, [r4, #0]
 8005b2c:	6960      	ldr	r0, [r4, #20]
 8005b2e:	1d1d      	adds	r5, r3, #4
 8005b30:	600d      	str	r5, [r1, #0]
 8005b32:	0635      	lsls	r5, r6, #24
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	d501      	bpl.n	8005b3c <_printf_i+0x1cc>
 8005b38:	6018      	str	r0, [r3, #0]
 8005b3a:	e002      	b.n	8005b42 <_printf_i+0x1d2>
 8005b3c:	0671      	lsls	r1, r6, #25
 8005b3e:	d5fb      	bpl.n	8005b38 <_printf_i+0x1c8>
 8005b40:	8018      	strh	r0, [r3, #0]
 8005b42:	2300      	movs	r3, #0
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	4616      	mov	r6, r2
 8005b48:	e7ba      	b.n	8005ac0 <_printf_i+0x150>
 8005b4a:	680b      	ldr	r3, [r1, #0]
 8005b4c:	1d1a      	adds	r2, r3, #4
 8005b4e:	600a      	str	r2, [r1, #0]
 8005b50:	681e      	ldr	r6, [r3, #0]
 8005b52:	6862      	ldr	r2, [r4, #4]
 8005b54:	2100      	movs	r1, #0
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7fa fb5a 	bl	8000210 <memchr>
 8005b5c:	b108      	cbz	r0, 8005b62 <_printf_i+0x1f2>
 8005b5e:	1b80      	subs	r0, r0, r6
 8005b60:	6060      	str	r0, [r4, #4]
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	6123      	str	r3, [r4, #16]
 8005b66:	2300      	movs	r3, #0
 8005b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b6c:	e7a8      	b.n	8005ac0 <_printf_i+0x150>
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	4632      	mov	r2, r6
 8005b72:	4649      	mov	r1, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	47d0      	blx	sl
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d0ab      	beq.n	8005ad4 <_printf_i+0x164>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	079b      	lsls	r3, r3, #30
 8005b80:	d413      	bmi.n	8005baa <_printf_i+0x23a>
 8005b82:	68e0      	ldr	r0, [r4, #12]
 8005b84:	9b03      	ldr	r3, [sp, #12]
 8005b86:	4298      	cmp	r0, r3
 8005b88:	bfb8      	it	lt
 8005b8a:	4618      	movlt	r0, r3
 8005b8c:	e7a4      	b.n	8005ad8 <_printf_i+0x168>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4632      	mov	r2, r6
 8005b92:	4649      	mov	r1, r9
 8005b94:	4640      	mov	r0, r8
 8005b96:	47d0      	blx	sl
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d09b      	beq.n	8005ad4 <_printf_i+0x164>
 8005b9c:	3501      	adds	r5, #1
 8005b9e:	68e3      	ldr	r3, [r4, #12]
 8005ba0:	9903      	ldr	r1, [sp, #12]
 8005ba2:	1a5b      	subs	r3, r3, r1
 8005ba4:	42ab      	cmp	r3, r5
 8005ba6:	dcf2      	bgt.n	8005b8e <_printf_i+0x21e>
 8005ba8:	e7eb      	b.n	8005b82 <_printf_i+0x212>
 8005baa:	2500      	movs	r5, #0
 8005bac:	f104 0619 	add.w	r6, r4, #25
 8005bb0:	e7f5      	b.n	8005b9e <_printf_i+0x22e>
 8005bb2:	bf00      	nop
 8005bb4:	08018d8e 	.word	0x08018d8e
 8005bb8:	08018d9f 	.word	0x08018d9f

08005bbc <_sbrk_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4d06      	ldr	r5, [pc, #24]	; (8005bd8 <_sbrk_r+0x1c>)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	602b      	str	r3, [r5, #0]
 8005bc8:	f7fc f9dc 	bl	8001f84 <_sbrk>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_sbrk_r+0x1a>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_sbrk_r+0x1a>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	2000037c 	.word	0x2000037c

08005bdc <__swbuf_r>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	460e      	mov	r6, r1
 8005be0:	4614      	mov	r4, r2
 8005be2:	4605      	mov	r5, r0
 8005be4:	b118      	cbz	r0, 8005bee <__swbuf_r+0x12>
 8005be6:	6983      	ldr	r3, [r0, #24]
 8005be8:	b90b      	cbnz	r3, 8005bee <__swbuf_r+0x12>
 8005bea:	f000 f9d9 	bl	8005fa0 <__sinit>
 8005bee:	4b21      	ldr	r3, [pc, #132]	; (8005c74 <__swbuf_r+0x98>)
 8005bf0:	429c      	cmp	r4, r3
 8005bf2:	d12b      	bne.n	8005c4c <__swbuf_r+0x70>
 8005bf4:	686c      	ldr	r4, [r5, #4]
 8005bf6:	69a3      	ldr	r3, [r4, #24]
 8005bf8:	60a3      	str	r3, [r4, #8]
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	071a      	lsls	r2, r3, #28
 8005bfe:	d52f      	bpl.n	8005c60 <__swbuf_r+0x84>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	b36b      	cbz	r3, 8005c60 <__swbuf_r+0x84>
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	6820      	ldr	r0, [r4, #0]
 8005c08:	1ac0      	subs	r0, r0, r3
 8005c0a:	6963      	ldr	r3, [r4, #20]
 8005c0c:	b2f6      	uxtb	r6, r6
 8005c0e:	4283      	cmp	r3, r0
 8005c10:	4637      	mov	r7, r6
 8005c12:	dc04      	bgt.n	8005c1e <__swbuf_r+0x42>
 8005c14:	4621      	mov	r1, r4
 8005c16:	4628      	mov	r0, r5
 8005c18:	f000 f92e 	bl	8005e78 <_fflush_r>
 8005c1c:	bb30      	cbnz	r0, 8005c6c <__swbuf_r+0x90>
 8005c1e:	68a3      	ldr	r3, [r4, #8]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	60a3      	str	r3, [r4, #8]
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	6022      	str	r2, [r4, #0]
 8005c2a:	701e      	strb	r6, [r3, #0]
 8005c2c:	6963      	ldr	r3, [r4, #20]
 8005c2e:	3001      	adds	r0, #1
 8005c30:	4283      	cmp	r3, r0
 8005c32:	d004      	beq.n	8005c3e <__swbuf_r+0x62>
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	07db      	lsls	r3, r3, #31
 8005c38:	d506      	bpl.n	8005c48 <__swbuf_r+0x6c>
 8005c3a:	2e0a      	cmp	r6, #10
 8005c3c:	d104      	bne.n	8005c48 <__swbuf_r+0x6c>
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 f919 	bl	8005e78 <_fflush_r>
 8005c46:	b988      	cbnz	r0, 8005c6c <__swbuf_r+0x90>
 8005c48:	4638      	mov	r0, r7
 8005c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <__swbuf_r+0x9c>)
 8005c4e:	429c      	cmp	r4, r3
 8005c50:	d101      	bne.n	8005c56 <__swbuf_r+0x7a>
 8005c52:	68ac      	ldr	r4, [r5, #8]
 8005c54:	e7cf      	b.n	8005bf6 <__swbuf_r+0x1a>
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <__swbuf_r+0xa0>)
 8005c58:	429c      	cmp	r4, r3
 8005c5a:	bf08      	it	eq
 8005c5c:	68ec      	ldreq	r4, [r5, #12]
 8005c5e:	e7ca      	b.n	8005bf6 <__swbuf_r+0x1a>
 8005c60:	4621      	mov	r1, r4
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 f80c 	bl	8005c80 <__swsetup_r>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d0cb      	beq.n	8005c04 <__swbuf_r+0x28>
 8005c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c70:	e7ea      	b.n	8005c48 <__swbuf_r+0x6c>
 8005c72:	bf00      	nop
 8005c74:	08018dd0 	.word	0x08018dd0
 8005c78:	08018df0 	.word	0x08018df0
 8005c7c:	08018db0 	.word	0x08018db0

08005c80 <__swsetup_r>:
 8005c80:	4b32      	ldr	r3, [pc, #200]	; (8005d4c <__swsetup_r+0xcc>)
 8005c82:	b570      	push	{r4, r5, r6, lr}
 8005c84:	681d      	ldr	r5, [r3, #0]
 8005c86:	4606      	mov	r6, r0
 8005c88:	460c      	mov	r4, r1
 8005c8a:	b125      	cbz	r5, 8005c96 <__swsetup_r+0x16>
 8005c8c:	69ab      	ldr	r3, [r5, #24]
 8005c8e:	b913      	cbnz	r3, 8005c96 <__swsetup_r+0x16>
 8005c90:	4628      	mov	r0, r5
 8005c92:	f000 f985 	bl	8005fa0 <__sinit>
 8005c96:	4b2e      	ldr	r3, [pc, #184]	; (8005d50 <__swsetup_r+0xd0>)
 8005c98:	429c      	cmp	r4, r3
 8005c9a:	d10f      	bne.n	8005cbc <__swsetup_r+0x3c>
 8005c9c:	686c      	ldr	r4, [r5, #4]
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ca4:	0719      	lsls	r1, r3, #28
 8005ca6:	d42c      	bmi.n	8005d02 <__swsetup_r+0x82>
 8005ca8:	06dd      	lsls	r5, r3, #27
 8005caa:	d411      	bmi.n	8005cd0 <__swsetup_r+0x50>
 8005cac:	2309      	movs	r3, #9
 8005cae:	6033      	str	r3, [r6, #0]
 8005cb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cb4:	81a3      	strh	r3, [r4, #12]
 8005cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cba:	e03e      	b.n	8005d3a <__swsetup_r+0xba>
 8005cbc:	4b25      	ldr	r3, [pc, #148]	; (8005d54 <__swsetup_r+0xd4>)
 8005cbe:	429c      	cmp	r4, r3
 8005cc0:	d101      	bne.n	8005cc6 <__swsetup_r+0x46>
 8005cc2:	68ac      	ldr	r4, [r5, #8]
 8005cc4:	e7eb      	b.n	8005c9e <__swsetup_r+0x1e>
 8005cc6:	4b24      	ldr	r3, [pc, #144]	; (8005d58 <__swsetup_r+0xd8>)
 8005cc8:	429c      	cmp	r4, r3
 8005cca:	bf08      	it	eq
 8005ccc:	68ec      	ldreq	r4, [r5, #12]
 8005cce:	e7e6      	b.n	8005c9e <__swsetup_r+0x1e>
 8005cd0:	0758      	lsls	r0, r3, #29
 8005cd2:	d512      	bpl.n	8005cfa <__swsetup_r+0x7a>
 8005cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cd6:	b141      	cbz	r1, 8005cea <__swsetup_r+0x6a>
 8005cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cdc:	4299      	cmp	r1, r3
 8005cde:	d002      	beq.n	8005ce6 <__swsetup_r+0x66>
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	f7ff fa77 	bl	80051d4 <_free_r>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	6063      	str	r3, [r4, #4]
 8005cf6:	6923      	ldr	r3, [r4, #16]
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	f043 0308 	orr.w	r3, r3, #8
 8005d00:	81a3      	strh	r3, [r4, #12]
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	b94b      	cbnz	r3, 8005d1a <__swsetup_r+0x9a>
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d10:	d003      	beq.n	8005d1a <__swsetup_r+0x9a>
 8005d12:	4621      	mov	r1, r4
 8005d14:	4630      	mov	r0, r6
 8005d16:	f000 fa07 	bl	8006128 <__smakebuf_r>
 8005d1a:	89a0      	ldrh	r0, [r4, #12]
 8005d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d20:	f010 0301 	ands.w	r3, r0, #1
 8005d24:	d00a      	beq.n	8005d3c <__swsetup_r+0xbc>
 8005d26:	2300      	movs	r3, #0
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	6963      	ldr	r3, [r4, #20]
 8005d2c:	425b      	negs	r3, r3
 8005d2e:	61a3      	str	r3, [r4, #24]
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	b943      	cbnz	r3, 8005d46 <__swsetup_r+0xc6>
 8005d34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d38:	d1ba      	bne.n	8005cb0 <__swsetup_r+0x30>
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	0781      	lsls	r1, r0, #30
 8005d3e:	bf58      	it	pl
 8005d40:	6963      	ldrpl	r3, [r4, #20]
 8005d42:	60a3      	str	r3, [r4, #8]
 8005d44:	e7f4      	b.n	8005d30 <__swsetup_r+0xb0>
 8005d46:	2000      	movs	r0, #0
 8005d48:	e7f7      	b.n	8005d3a <__swsetup_r+0xba>
 8005d4a:	bf00      	nop
 8005d4c:	2000000c 	.word	0x2000000c
 8005d50:	08018dd0 	.word	0x08018dd0
 8005d54:	08018df0 	.word	0x08018df0
 8005d58:	08018db0 	.word	0x08018db0

08005d5c <abort>:
 8005d5c:	b508      	push	{r3, lr}
 8005d5e:	2006      	movs	r0, #6
 8005d60:	f000 faa4 	bl	80062ac <raise>
 8005d64:	2001      	movs	r0, #1
 8005d66:	f7fc f895 	bl	8001e94 <_exit>
	...

08005d6c <__sflush_r>:
 8005d6c:	898a      	ldrh	r2, [r1, #12]
 8005d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d72:	4605      	mov	r5, r0
 8005d74:	0710      	lsls	r0, r2, #28
 8005d76:	460c      	mov	r4, r1
 8005d78:	d458      	bmi.n	8005e2c <__sflush_r+0xc0>
 8005d7a:	684b      	ldr	r3, [r1, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dc05      	bgt.n	8005d8c <__sflush_r+0x20>
 8005d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	dc02      	bgt.n	8005d8c <__sflush_r+0x20>
 8005d86:	2000      	movs	r0, #0
 8005d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d8e:	2e00      	cmp	r6, #0
 8005d90:	d0f9      	beq.n	8005d86 <__sflush_r+0x1a>
 8005d92:	2300      	movs	r3, #0
 8005d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d98:	682f      	ldr	r7, [r5, #0]
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	d032      	beq.n	8005e04 <__sflush_r+0x98>
 8005d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	075a      	lsls	r2, r3, #29
 8005da4:	d505      	bpl.n	8005db2 <__sflush_r+0x46>
 8005da6:	6863      	ldr	r3, [r4, #4]
 8005da8:	1ac0      	subs	r0, r0, r3
 8005daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dac:	b10b      	cbz	r3, 8005db2 <__sflush_r+0x46>
 8005dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005db0:	1ac0      	subs	r0, r0, r3
 8005db2:	2300      	movs	r3, #0
 8005db4:	4602      	mov	r2, r0
 8005db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005db8:	6a21      	ldr	r1, [r4, #32]
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b0      	blx	r6
 8005dbe:	1c43      	adds	r3, r0, #1
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	d106      	bne.n	8005dd2 <__sflush_r+0x66>
 8005dc4:	6829      	ldr	r1, [r5, #0]
 8005dc6:	291d      	cmp	r1, #29
 8005dc8:	d82c      	bhi.n	8005e24 <__sflush_r+0xb8>
 8005dca:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <__sflush_r+0x108>)
 8005dcc:	40ca      	lsrs	r2, r1
 8005dce:	07d6      	lsls	r6, r2, #31
 8005dd0:	d528      	bpl.n	8005e24 <__sflush_r+0xb8>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	6062      	str	r2, [r4, #4]
 8005dd6:	04d9      	lsls	r1, r3, #19
 8005dd8:	6922      	ldr	r2, [r4, #16]
 8005dda:	6022      	str	r2, [r4, #0]
 8005ddc:	d504      	bpl.n	8005de8 <__sflush_r+0x7c>
 8005dde:	1c42      	adds	r2, r0, #1
 8005de0:	d101      	bne.n	8005de6 <__sflush_r+0x7a>
 8005de2:	682b      	ldr	r3, [r5, #0]
 8005de4:	b903      	cbnz	r3, 8005de8 <__sflush_r+0x7c>
 8005de6:	6560      	str	r0, [r4, #84]	; 0x54
 8005de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dea:	602f      	str	r7, [r5, #0]
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d0ca      	beq.n	8005d86 <__sflush_r+0x1a>
 8005df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005df4:	4299      	cmp	r1, r3
 8005df6:	d002      	beq.n	8005dfe <__sflush_r+0x92>
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f7ff f9eb 	bl	80051d4 <_free_r>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	6360      	str	r0, [r4, #52]	; 0x34
 8005e02:	e7c1      	b.n	8005d88 <__sflush_r+0x1c>
 8005e04:	6a21      	ldr	r1, [r4, #32]
 8005e06:	2301      	movs	r3, #1
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b0      	blx	r6
 8005e0c:	1c41      	adds	r1, r0, #1
 8005e0e:	d1c7      	bne.n	8005da0 <__sflush_r+0x34>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0c4      	beq.n	8005da0 <__sflush_r+0x34>
 8005e16:	2b1d      	cmp	r3, #29
 8005e18:	d001      	beq.n	8005e1e <__sflush_r+0xb2>
 8005e1a:	2b16      	cmp	r3, #22
 8005e1c:	d101      	bne.n	8005e22 <__sflush_r+0xb6>
 8005e1e:	602f      	str	r7, [r5, #0]
 8005e20:	e7b1      	b.n	8005d86 <__sflush_r+0x1a>
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	e7ad      	b.n	8005d88 <__sflush_r+0x1c>
 8005e2c:	690f      	ldr	r7, [r1, #16]
 8005e2e:	2f00      	cmp	r7, #0
 8005e30:	d0a9      	beq.n	8005d86 <__sflush_r+0x1a>
 8005e32:	0793      	lsls	r3, r2, #30
 8005e34:	680e      	ldr	r6, [r1, #0]
 8005e36:	bf08      	it	eq
 8005e38:	694b      	ldreq	r3, [r1, #20]
 8005e3a:	600f      	str	r7, [r1, #0]
 8005e3c:	bf18      	it	ne
 8005e3e:	2300      	movne	r3, #0
 8005e40:	eba6 0807 	sub.w	r8, r6, r7
 8005e44:	608b      	str	r3, [r1, #8]
 8005e46:	f1b8 0f00 	cmp.w	r8, #0
 8005e4a:	dd9c      	ble.n	8005d86 <__sflush_r+0x1a>
 8005e4c:	6a21      	ldr	r1, [r4, #32]
 8005e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e50:	4643      	mov	r3, r8
 8005e52:	463a      	mov	r2, r7
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b0      	blx	r6
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	dc06      	bgt.n	8005e6a <__sflush_r+0xfe>
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	e78e      	b.n	8005d88 <__sflush_r+0x1c>
 8005e6a:	4407      	add	r7, r0
 8005e6c:	eba8 0800 	sub.w	r8, r8, r0
 8005e70:	e7e9      	b.n	8005e46 <__sflush_r+0xda>
 8005e72:	bf00      	nop
 8005e74:	20400001 	.word	0x20400001

08005e78 <_fflush_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	690b      	ldr	r3, [r1, #16]
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	b913      	cbnz	r3, 8005e88 <_fflush_r+0x10>
 8005e82:	2500      	movs	r5, #0
 8005e84:	4628      	mov	r0, r5
 8005e86:	bd38      	pop	{r3, r4, r5, pc}
 8005e88:	b118      	cbz	r0, 8005e92 <_fflush_r+0x1a>
 8005e8a:	6983      	ldr	r3, [r0, #24]
 8005e8c:	b90b      	cbnz	r3, 8005e92 <_fflush_r+0x1a>
 8005e8e:	f000 f887 	bl	8005fa0 <__sinit>
 8005e92:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <_fflush_r+0x6c>)
 8005e94:	429c      	cmp	r4, r3
 8005e96:	d11b      	bne.n	8005ed0 <_fflush_r+0x58>
 8005e98:	686c      	ldr	r4, [r5, #4]
 8005e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0ef      	beq.n	8005e82 <_fflush_r+0xa>
 8005ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ea4:	07d0      	lsls	r0, r2, #31
 8005ea6:	d404      	bmi.n	8005eb2 <_fflush_r+0x3a>
 8005ea8:	0599      	lsls	r1, r3, #22
 8005eaa:	d402      	bmi.n	8005eb2 <_fflush_r+0x3a>
 8005eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eae:	f000 f915 	bl	80060dc <__retarget_lock_acquire_recursive>
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	f7ff ff59 	bl	8005d6c <__sflush_r>
 8005eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ebc:	07da      	lsls	r2, r3, #31
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	d4e0      	bmi.n	8005e84 <_fflush_r+0xc>
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	059b      	lsls	r3, r3, #22
 8005ec6:	d4dd      	bmi.n	8005e84 <_fflush_r+0xc>
 8005ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eca:	f000 f908 	bl	80060de <__retarget_lock_release_recursive>
 8005ece:	e7d9      	b.n	8005e84 <_fflush_r+0xc>
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <_fflush_r+0x70>)
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	d101      	bne.n	8005eda <_fflush_r+0x62>
 8005ed6:	68ac      	ldr	r4, [r5, #8]
 8005ed8:	e7df      	b.n	8005e9a <_fflush_r+0x22>
 8005eda:	4b04      	ldr	r3, [pc, #16]	; (8005eec <_fflush_r+0x74>)
 8005edc:	429c      	cmp	r4, r3
 8005ede:	bf08      	it	eq
 8005ee0:	68ec      	ldreq	r4, [r5, #12]
 8005ee2:	e7da      	b.n	8005e9a <_fflush_r+0x22>
 8005ee4:	08018dd0 	.word	0x08018dd0
 8005ee8:	08018df0 	.word	0x08018df0
 8005eec:	08018db0 	.word	0x08018db0

08005ef0 <std>:
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	b510      	push	{r4, lr}
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8005efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005efe:	6083      	str	r3, [r0, #8]
 8005f00:	8181      	strh	r1, [r0, #12]
 8005f02:	6643      	str	r3, [r0, #100]	; 0x64
 8005f04:	81c2      	strh	r2, [r0, #14]
 8005f06:	6183      	str	r3, [r0, #24]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	305c      	adds	r0, #92	; 0x5c
 8005f0e:	f7ff f817 	bl	8004f40 <memset>
 8005f12:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <std+0x38>)
 8005f14:	6263      	str	r3, [r4, #36]	; 0x24
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <std+0x3c>)
 8005f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f1a:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <std+0x40>)
 8005f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <std+0x44>)
 8005f20:	6224      	str	r4, [r4, #32]
 8005f22:	6323      	str	r3, [r4, #48]	; 0x30
 8005f24:	bd10      	pop	{r4, pc}
 8005f26:	bf00      	nop
 8005f28:	080062e5 	.word	0x080062e5
 8005f2c:	08006307 	.word	0x08006307
 8005f30:	0800633f 	.word	0x0800633f
 8005f34:	08006363 	.word	0x08006363

08005f38 <_cleanup_r>:
 8005f38:	4901      	ldr	r1, [pc, #4]	; (8005f40 <_cleanup_r+0x8>)
 8005f3a:	f000 b8af 	b.w	800609c <_fwalk_reent>
 8005f3e:	bf00      	nop
 8005f40:	08005e79 	.word	0x08005e79

08005f44 <__sfmoreglue>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	1e4a      	subs	r2, r1, #1
 8005f48:	2568      	movs	r5, #104	; 0x68
 8005f4a:	4355      	muls	r5, r2
 8005f4c:	460e      	mov	r6, r1
 8005f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f52:	f7ff f98f 	bl	8005274 <_malloc_r>
 8005f56:	4604      	mov	r4, r0
 8005f58:	b140      	cbz	r0, 8005f6c <__sfmoreglue+0x28>
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8005f60:	300c      	adds	r0, #12
 8005f62:	60a0      	str	r0, [r4, #8]
 8005f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f68:	f7fe ffea 	bl	8004f40 <memset>
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}

08005f70 <__sfp_lock_acquire>:
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <__sfp_lock_acquire+0x8>)
 8005f72:	f000 b8b3 	b.w	80060dc <__retarget_lock_acquire_recursive>
 8005f76:	bf00      	nop
 8005f78:	20000378 	.word	0x20000378

08005f7c <__sfp_lock_release>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <__sfp_lock_release+0x8>)
 8005f7e:	f000 b8ae 	b.w	80060de <__retarget_lock_release_recursive>
 8005f82:	bf00      	nop
 8005f84:	20000378 	.word	0x20000378

08005f88 <__sinit_lock_acquire>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__sinit_lock_acquire+0x8>)
 8005f8a:	f000 b8a7 	b.w	80060dc <__retarget_lock_acquire_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000373 	.word	0x20000373

08005f94 <__sinit_lock_release>:
 8005f94:	4801      	ldr	r0, [pc, #4]	; (8005f9c <__sinit_lock_release+0x8>)
 8005f96:	f000 b8a2 	b.w	80060de <__retarget_lock_release_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	20000373 	.word	0x20000373

08005fa0 <__sinit>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	f7ff fff0 	bl	8005f88 <__sinit_lock_acquire>
 8005fa8:	69a3      	ldr	r3, [r4, #24]
 8005faa:	b11b      	cbz	r3, 8005fb4 <__sinit+0x14>
 8005fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb0:	f7ff bff0 	b.w	8005f94 <__sinit_lock_release>
 8005fb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fb8:	6523      	str	r3, [r4, #80]	; 0x50
 8005fba:	4b13      	ldr	r3, [pc, #76]	; (8006008 <__sinit+0x68>)
 8005fbc:	4a13      	ldr	r2, [pc, #76]	; (800600c <__sinit+0x6c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	bf04      	itt	eq
 8005fc6:	2301      	moveq	r3, #1
 8005fc8:	61a3      	streq	r3, [r4, #24]
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f820 	bl	8006010 <__sfp>
 8005fd0:	6060      	str	r0, [r4, #4]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 f81c 	bl	8006010 <__sfp>
 8005fd8:	60a0      	str	r0, [r4, #8]
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 f818 	bl	8006010 <__sfp>
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	60e0      	str	r0, [r4, #12]
 8005fe4:	2104      	movs	r1, #4
 8005fe6:	6860      	ldr	r0, [r4, #4]
 8005fe8:	f7ff ff82 	bl	8005ef0 <std>
 8005fec:	68a0      	ldr	r0, [r4, #8]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	2109      	movs	r1, #9
 8005ff2:	f7ff ff7d 	bl	8005ef0 <std>
 8005ff6:	68e0      	ldr	r0, [r4, #12]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	2112      	movs	r1, #18
 8005ffc:	f7ff ff78 	bl	8005ef0 <std>
 8006000:	2301      	movs	r3, #1
 8006002:	61a3      	str	r3, [r4, #24]
 8006004:	e7d2      	b.n	8005fac <__sinit+0xc>
 8006006:	bf00      	nop
 8006008:	08018bc4 	.word	0x08018bc4
 800600c:	08005f39 	.word	0x08005f39

08006010 <__sfp>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	4607      	mov	r7, r0
 8006014:	f7ff ffac 	bl	8005f70 <__sfp_lock_acquire>
 8006018:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <__sfp+0x84>)
 800601a:	681e      	ldr	r6, [r3, #0]
 800601c:	69b3      	ldr	r3, [r6, #24]
 800601e:	b913      	cbnz	r3, 8006026 <__sfp+0x16>
 8006020:	4630      	mov	r0, r6
 8006022:	f7ff ffbd 	bl	8005fa0 <__sinit>
 8006026:	3648      	adds	r6, #72	; 0x48
 8006028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800602c:	3b01      	subs	r3, #1
 800602e:	d503      	bpl.n	8006038 <__sfp+0x28>
 8006030:	6833      	ldr	r3, [r6, #0]
 8006032:	b30b      	cbz	r3, 8006078 <__sfp+0x68>
 8006034:	6836      	ldr	r6, [r6, #0]
 8006036:	e7f7      	b.n	8006028 <__sfp+0x18>
 8006038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800603c:	b9d5      	cbnz	r5, 8006074 <__sfp+0x64>
 800603e:	4b16      	ldr	r3, [pc, #88]	; (8006098 <__sfp+0x88>)
 8006040:	60e3      	str	r3, [r4, #12]
 8006042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006046:	6665      	str	r5, [r4, #100]	; 0x64
 8006048:	f000 f847 	bl	80060da <__retarget_lock_init_recursive>
 800604c:	f7ff ff96 	bl	8005f7c <__sfp_lock_release>
 8006050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006058:	6025      	str	r5, [r4, #0]
 800605a:	61a5      	str	r5, [r4, #24]
 800605c:	2208      	movs	r2, #8
 800605e:	4629      	mov	r1, r5
 8006060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006064:	f7fe ff6c 	bl	8004f40 <memset>
 8006068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800606c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006070:	4620      	mov	r0, r4
 8006072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006074:	3468      	adds	r4, #104	; 0x68
 8006076:	e7d9      	b.n	800602c <__sfp+0x1c>
 8006078:	2104      	movs	r1, #4
 800607a:	4638      	mov	r0, r7
 800607c:	f7ff ff62 	bl	8005f44 <__sfmoreglue>
 8006080:	4604      	mov	r4, r0
 8006082:	6030      	str	r0, [r6, #0]
 8006084:	2800      	cmp	r0, #0
 8006086:	d1d5      	bne.n	8006034 <__sfp+0x24>
 8006088:	f7ff ff78 	bl	8005f7c <__sfp_lock_release>
 800608c:	230c      	movs	r3, #12
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	e7ee      	b.n	8006070 <__sfp+0x60>
 8006092:	bf00      	nop
 8006094:	08018bc4 	.word	0x08018bc4
 8006098:	ffff0001 	.word	0xffff0001

0800609c <_fwalk_reent>:
 800609c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a0:	4606      	mov	r6, r0
 80060a2:	4688      	mov	r8, r1
 80060a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060a8:	2700      	movs	r7, #0
 80060aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060ae:	f1b9 0901 	subs.w	r9, r9, #1
 80060b2:	d505      	bpl.n	80060c0 <_fwalk_reent+0x24>
 80060b4:	6824      	ldr	r4, [r4, #0]
 80060b6:	2c00      	cmp	r4, #0
 80060b8:	d1f7      	bne.n	80060aa <_fwalk_reent+0xe>
 80060ba:	4638      	mov	r0, r7
 80060bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c0:	89ab      	ldrh	r3, [r5, #12]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d907      	bls.n	80060d6 <_fwalk_reent+0x3a>
 80060c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060ca:	3301      	adds	r3, #1
 80060cc:	d003      	beq.n	80060d6 <_fwalk_reent+0x3a>
 80060ce:	4629      	mov	r1, r5
 80060d0:	4630      	mov	r0, r6
 80060d2:	47c0      	blx	r8
 80060d4:	4307      	orrs	r7, r0
 80060d6:	3568      	adds	r5, #104	; 0x68
 80060d8:	e7e9      	b.n	80060ae <_fwalk_reent+0x12>

080060da <__retarget_lock_init_recursive>:
 80060da:	4770      	bx	lr

080060dc <__retarget_lock_acquire_recursive>:
 80060dc:	4770      	bx	lr

080060de <__retarget_lock_release_recursive>:
 80060de:	4770      	bx	lr

080060e0 <__swhatbuf_r>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	460e      	mov	r6, r1
 80060e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e8:	2900      	cmp	r1, #0
 80060ea:	b096      	sub	sp, #88	; 0x58
 80060ec:	4614      	mov	r4, r2
 80060ee:	461d      	mov	r5, r3
 80060f0:	da07      	bge.n	8006102 <__swhatbuf_r+0x22>
 80060f2:	2300      	movs	r3, #0
 80060f4:	602b      	str	r3, [r5, #0]
 80060f6:	89b3      	ldrh	r3, [r6, #12]
 80060f8:	061a      	lsls	r2, r3, #24
 80060fa:	d410      	bmi.n	800611e <__swhatbuf_r+0x3e>
 80060fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006100:	e00e      	b.n	8006120 <__swhatbuf_r+0x40>
 8006102:	466a      	mov	r2, sp
 8006104:	f000 f954 	bl	80063b0 <_fstat_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	dbf2      	blt.n	80060f2 <__swhatbuf_r+0x12>
 800610c:	9a01      	ldr	r2, [sp, #4]
 800610e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006112:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006116:	425a      	negs	r2, r3
 8006118:	415a      	adcs	r2, r3
 800611a:	602a      	str	r2, [r5, #0]
 800611c:	e7ee      	b.n	80060fc <__swhatbuf_r+0x1c>
 800611e:	2340      	movs	r3, #64	; 0x40
 8006120:	2000      	movs	r0, #0
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	b016      	add	sp, #88	; 0x58
 8006126:	bd70      	pop	{r4, r5, r6, pc}

08006128 <__smakebuf_r>:
 8006128:	898b      	ldrh	r3, [r1, #12]
 800612a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800612c:	079d      	lsls	r5, r3, #30
 800612e:	4606      	mov	r6, r0
 8006130:	460c      	mov	r4, r1
 8006132:	d507      	bpl.n	8006144 <__smakebuf_r+0x1c>
 8006134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	6123      	str	r3, [r4, #16]
 800613c:	2301      	movs	r3, #1
 800613e:	6163      	str	r3, [r4, #20]
 8006140:	b002      	add	sp, #8
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	ab01      	add	r3, sp, #4
 8006146:	466a      	mov	r2, sp
 8006148:	f7ff ffca 	bl	80060e0 <__swhatbuf_r>
 800614c:	9900      	ldr	r1, [sp, #0]
 800614e:	4605      	mov	r5, r0
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff f88f 	bl	8005274 <_malloc_r>
 8006156:	b948      	cbnz	r0, 800616c <__smakebuf_r+0x44>
 8006158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800615c:	059a      	lsls	r2, r3, #22
 800615e:	d4ef      	bmi.n	8006140 <__smakebuf_r+0x18>
 8006160:	f023 0303 	bic.w	r3, r3, #3
 8006164:	f043 0302 	orr.w	r3, r3, #2
 8006168:	81a3      	strh	r3, [r4, #12]
 800616a:	e7e3      	b.n	8006134 <__smakebuf_r+0xc>
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <__smakebuf_r+0x7c>)
 800616e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	6020      	str	r0, [r4, #0]
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	81a3      	strh	r3, [r4, #12]
 800617a:	9b00      	ldr	r3, [sp, #0]
 800617c:	6163      	str	r3, [r4, #20]
 800617e:	9b01      	ldr	r3, [sp, #4]
 8006180:	6120      	str	r0, [r4, #16]
 8006182:	b15b      	cbz	r3, 800619c <__smakebuf_r+0x74>
 8006184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006188:	4630      	mov	r0, r6
 800618a:	f000 f923 	bl	80063d4 <_isatty_r>
 800618e:	b128      	cbz	r0, 800619c <__smakebuf_r+0x74>
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	81a3      	strh	r3, [r4, #12]
 800619c:	89a0      	ldrh	r0, [r4, #12]
 800619e:	4305      	orrs	r5, r0
 80061a0:	81a5      	strh	r5, [r4, #12]
 80061a2:	e7cd      	b.n	8006140 <__smakebuf_r+0x18>
 80061a4:	08005f39 	.word	0x08005f39

080061a8 <memcpy>:
 80061a8:	440a      	add	r2, r1
 80061aa:	4291      	cmp	r1, r2
 80061ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80061b0:	d100      	bne.n	80061b4 <memcpy+0xc>
 80061b2:	4770      	bx	lr
 80061b4:	b510      	push	{r4, lr}
 80061b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061be:	4291      	cmp	r1, r2
 80061c0:	d1f9      	bne.n	80061b6 <memcpy+0xe>
 80061c2:	bd10      	pop	{r4, pc}

080061c4 <memmove>:
 80061c4:	4288      	cmp	r0, r1
 80061c6:	b510      	push	{r4, lr}
 80061c8:	eb01 0402 	add.w	r4, r1, r2
 80061cc:	d902      	bls.n	80061d4 <memmove+0x10>
 80061ce:	4284      	cmp	r4, r0
 80061d0:	4623      	mov	r3, r4
 80061d2:	d807      	bhi.n	80061e4 <memmove+0x20>
 80061d4:	1e43      	subs	r3, r0, #1
 80061d6:	42a1      	cmp	r1, r4
 80061d8:	d008      	beq.n	80061ec <memmove+0x28>
 80061da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061e2:	e7f8      	b.n	80061d6 <memmove+0x12>
 80061e4:	4402      	add	r2, r0
 80061e6:	4601      	mov	r1, r0
 80061e8:	428a      	cmp	r2, r1
 80061ea:	d100      	bne.n	80061ee <memmove+0x2a>
 80061ec:	bd10      	pop	{r4, pc}
 80061ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061f6:	e7f7      	b.n	80061e8 <memmove+0x24>

080061f8 <__malloc_lock>:
 80061f8:	4801      	ldr	r0, [pc, #4]	; (8006200 <__malloc_lock+0x8>)
 80061fa:	f7ff bf6f 	b.w	80060dc <__retarget_lock_acquire_recursive>
 80061fe:	bf00      	nop
 8006200:	20000374 	.word	0x20000374

08006204 <__malloc_unlock>:
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <__malloc_unlock+0x8>)
 8006206:	f7ff bf6a 	b.w	80060de <__retarget_lock_release_recursive>
 800620a:	bf00      	nop
 800620c:	20000374 	.word	0x20000374

08006210 <_realloc_r>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	4607      	mov	r7, r0
 8006214:	4614      	mov	r4, r2
 8006216:	460e      	mov	r6, r1
 8006218:	b921      	cbnz	r1, 8006224 <_realloc_r+0x14>
 800621a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800621e:	4611      	mov	r1, r2
 8006220:	f7ff b828 	b.w	8005274 <_malloc_r>
 8006224:	b922      	cbnz	r2, 8006230 <_realloc_r+0x20>
 8006226:	f7fe ffd5 	bl	80051d4 <_free_r>
 800622a:	4625      	mov	r5, r4
 800622c:	4628      	mov	r0, r5
 800622e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006230:	f000 f8f2 	bl	8006418 <_malloc_usable_size_r>
 8006234:	42a0      	cmp	r0, r4
 8006236:	d20f      	bcs.n	8006258 <_realloc_r+0x48>
 8006238:	4621      	mov	r1, r4
 800623a:	4638      	mov	r0, r7
 800623c:	f7ff f81a 	bl	8005274 <_malloc_r>
 8006240:	4605      	mov	r5, r0
 8006242:	2800      	cmp	r0, #0
 8006244:	d0f2      	beq.n	800622c <_realloc_r+0x1c>
 8006246:	4631      	mov	r1, r6
 8006248:	4622      	mov	r2, r4
 800624a:	f7ff ffad 	bl	80061a8 <memcpy>
 800624e:	4631      	mov	r1, r6
 8006250:	4638      	mov	r0, r7
 8006252:	f7fe ffbf 	bl	80051d4 <_free_r>
 8006256:	e7e9      	b.n	800622c <_realloc_r+0x1c>
 8006258:	4635      	mov	r5, r6
 800625a:	e7e7      	b.n	800622c <_realloc_r+0x1c>

0800625c <_raise_r>:
 800625c:	291f      	cmp	r1, #31
 800625e:	b538      	push	{r3, r4, r5, lr}
 8006260:	4604      	mov	r4, r0
 8006262:	460d      	mov	r5, r1
 8006264:	d904      	bls.n	8006270 <_raise_r+0x14>
 8006266:	2316      	movs	r3, #22
 8006268:	6003      	str	r3, [r0, #0]
 800626a:	f04f 30ff 	mov.w	r0, #4294967295
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006272:	b112      	cbz	r2, 800627a <_raise_r+0x1e>
 8006274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006278:	b94b      	cbnz	r3, 800628e <_raise_r+0x32>
 800627a:	4620      	mov	r0, r4
 800627c:	f000 f830 	bl	80062e0 <_getpid_r>
 8006280:	462a      	mov	r2, r5
 8006282:	4601      	mov	r1, r0
 8006284:	4620      	mov	r0, r4
 8006286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800628a:	f000 b817 	b.w	80062bc <_kill_r>
 800628e:	2b01      	cmp	r3, #1
 8006290:	d00a      	beq.n	80062a8 <_raise_r+0x4c>
 8006292:	1c59      	adds	r1, r3, #1
 8006294:	d103      	bne.n	800629e <_raise_r+0x42>
 8006296:	2316      	movs	r3, #22
 8006298:	6003      	str	r3, [r0, #0]
 800629a:	2001      	movs	r0, #1
 800629c:	e7e7      	b.n	800626e <_raise_r+0x12>
 800629e:	2400      	movs	r4, #0
 80062a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062a4:	4628      	mov	r0, r5
 80062a6:	4798      	blx	r3
 80062a8:	2000      	movs	r0, #0
 80062aa:	e7e0      	b.n	800626e <_raise_r+0x12>

080062ac <raise>:
 80062ac:	4b02      	ldr	r3, [pc, #8]	; (80062b8 <raise+0xc>)
 80062ae:	4601      	mov	r1, r0
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	f7ff bfd3 	b.w	800625c <_raise_r>
 80062b6:	bf00      	nop
 80062b8:	2000000c 	.word	0x2000000c

080062bc <_kill_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4d07      	ldr	r5, [pc, #28]	; (80062dc <_kill_r+0x20>)
 80062c0:	2300      	movs	r3, #0
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	f7fb fdd3 	bl	8001e74 <_kill>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d102      	bne.n	80062d8 <_kill_r+0x1c>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	b103      	cbz	r3, 80062d8 <_kill_r+0x1c>
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	bd38      	pop	{r3, r4, r5, pc}
 80062da:	bf00      	nop
 80062dc:	2000037c 	.word	0x2000037c

080062e0 <_getpid_r>:
 80062e0:	f7fb bdc0 	b.w	8001e64 <_getpid>

080062e4 <__sread>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	460c      	mov	r4, r1
 80062e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ec:	f000 f89c 	bl	8006428 <_read_r>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	bfab      	itete	ge
 80062f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062f6:	89a3      	ldrhlt	r3, [r4, #12]
 80062f8:	181b      	addge	r3, r3, r0
 80062fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062fe:	bfac      	ite	ge
 8006300:	6563      	strge	r3, [r4, #84]	; 0x54
 8006302:	81a3      	strhlt	r3, [r4, #12]
 8006304:	bd10      	pop	{r4, pc}

08006306 <__swrite>:
 8006306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630a:	461f      	mov	r7, r3
 800630c:	898b      	ldrh	r3, [r1, #12]
 800630e:	05db      	lsls	r3, r3, #23
 8006310:	4605      	mov	r5, r0
 8006312:	460c      	mov	r4, r1
 8006314:	4616      	mov	r6, r2
 8006316:	d505      	bpl.n	8006324 <__swrite+0x1e>
 8006318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631c:	2302      	movs	r3, #2
 800631e:	2200      	movs	r2, #0
 8006320:	f000 f868 	bl	80063f4 <_lseek_r>
 8006324:	89a3      	ldrh	r3, [r4, #12]
 8006326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800632a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800632e:	81a3      	strh	r3, [r4, #12]
 8006330:	4632      	mov	r2, r6
 8006332:	463b      	mov	r3, r7
 8006334:	4628      	mov	r0, r5
 8006336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800633a:	f000 b817 	b.w	800636c <_write_r>

0800633e <__sseek>:
 800633e:	b510      	push	{r4, lr}
 8006340:	460c      	mov	r4, r1
 8006342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006346:	f000 f855 	bl	80063f4 <_lseek_r>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	bf15      	itete	ne
 8006350:	6560      	strne	r0, [r4, #84]	; 0x54
 8006352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800635a:	81a3      	strheq	r3, [r4, #12]
 800635c:	bf18      	it	ne
 800635e:	81a3      	strhne	r3, [r4, #12]
 8006360:	bd10      	pop	{r4, pc}

08006362 <__sclose>:
 8006362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006366:	f000 b813 	b.w	8006390 <_close_r>
	...

0800636c <_write_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d07      	ldr	r5, [pc, #28]	; (800638c <_write_r+0x20>)
 8006370:	4604      	mov	r4, r0
 8006372:	4608      	mov	r0, r1
 8006374:	4611      	mov	r1, r2
 8006376:	2200      	movs	r2, #0
 8006378:	602a      	str	r2, [r5, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f7fb fdb1 	bl	8001ee2 <_write>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_write_r+0x1e>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_write_r+0x1e>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	2000037c 	.word	0x2000037c

08006390 <_close_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d06      	ldr	r5, [pc, #24]	; (80063ac <_close_r+0x1c>)
 8006394:	2300      	movs	r3, #0
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	f7fb fdbd 	bl	8001f1a <_close>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d102      	bne.n	80063aa <_close_r+0x1a>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	b103      	cbz	r3, 80063aa <_close_r+0x1a>
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	2000037c 	.word	0x2000037c

080063b0 <_fstat_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	4d07      	ldr	r5, [pc, #28]	; (80063d0 <_fstat_r+0x20>)
 80063b4:	2300      	movs	r3, #0
 80063b6:	4604      	mov	r4, r0
 80063b8:	4608      	mov	r0, r1
 80063ba:	4611      	mov	r1, r2
 80063bc:	602b      	str	r3, [r5, #0]
 80063be:	f7fb fdb8 	bl	8001f32 <_fstat>
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	d102      	bne.n	80063cc <_fstat_r+0x1c>
 80063c6:	682b      	ldr	r3, [r5, #0]
 80063c8:	b103      	cbz	r3, 80063cc <_fstat_r+0x1c>
 80063ca:	6023      	str	r3, [r4, #0]
 80063cc:	bd38      	pop	{r3, r4, r5, pc}
 80063ce:	bf00      	nop
 80063d0:	2000037c 	.word	0x2000037c

080063d4 <_isatty_r>:
 80063d4:	b538      	push	{r3, r4, r5, lr}
 80063d6:	4d06      	ldr	r5, [pc, #24]	; (80063f0 <_isatty_r+0x1c>)
 80063d8:	2300      	movs	r3, #0
 80063da:	4604      	mov	r4, r0
 80063dc:	4608      	mov	r0, r1
 80063de:	602b      	str	r3, [r5, #0]
 80063e0:	f7fb fdb7 	bl	8001f52 <_isatty>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d102      	bne.n	80063ee <_isatty_r+0x1a>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	b103      	cbz	r3, 80063ee <_isatty_r+0x1a>
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	2000037c 	.word	0x2000037c

080063f4 <_lseek_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4d07      	ldr	r5, [pc, #28]	; (8006414 <_lseek_r+0x20>)
 80063f8:	4604      	mov	r4, r0
 80063fa:	4608      	mov	r0, r1
 80063fc:	4611      	mov	r1, r2
 80063fe:	2200      	movs	r2, #0
 8006400:	602a      	str	r2, [r5, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	f7fb fdb0 	bl	8001f68 <_lseek>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_lseek_r+0x1e>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b103      	cbz	r3, 8006412 <_lseek_r+0x1e>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	2000037c 	.word	0x2000037c

08006418 <_malloc_usable_size_r>:
 8006418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800641c:	1f18      	subs	r0, r3, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	bfbc      	itt	lt
 8006422:	580b      	ldrlt	r3, [r1, r0]
 8006424:	18c0      	addlt	r0, r0, r3
 8006426:	4770      	bx	lr

08006428 <_read_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4d07      	ldr	r5, [pc, #28]	; (8006448 <_read_r+0x20>)
 800642c:	4604      	mov	r4, r0
 800642e:	4608      	mov	r0, r1
 8006430:	4611      	mov	r1, r2
 8006432:	2200      	movs	r2, #0
 8006434:	602a      	str	r2, [r5, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	f7fb fd36 	bl	8001ea8 <_read>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_read_r+0x1e>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_read_r+0x1e>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	2000037c 	.word	0x2000037c

0800644c <_init>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr

08006458 <_fini>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr
