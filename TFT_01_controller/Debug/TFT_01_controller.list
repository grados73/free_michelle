
TFT_01_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012784  08004be0  08004be0  00014be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017364  08017364  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  08017364  08017364  00027364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801736c  0801736c  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801736c  0801736c  0002736c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017370  08017370  00027370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08017374  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000070  080173e4  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  080173e4  00030230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cb9  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a13  00000000  00000000  00040d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00043770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003b66  00000000  00000000  00044260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011f89  00000000  00000000  00047dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00088eb0  00000000  00000000  00059d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e2bff  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000009c0  00000000  00000000  000e2c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f18  00000000  00000000  000e3618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004bc8 	.word	0x08004bc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004bc8 	.word	0x08004bc8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005a0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	1acb      	subs	r3, r1, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	bfb8      	it	lt
 80005ae:	425b      	neglt	r3, r3
 80005b0:	429a      	cmp	r2, r3
 80005b2:	bfcc      	ite	gt
 80005b4:	2301      	movgt	r3, #1
 80005b6:	2300      	movle	r3, #0
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80005bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00b      	beq.n	80005dc <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ce:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	623b      	str	r3, [r7, #32]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	6a3b      	ldr	r3, [r7, #32]
 80005da:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dd0b      	ble.n	80005fc <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	61fb      	str	r3, [r7, #28]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	b29b      	uxth	r3, r3
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	b29b      	uxth	r3, r3
 8000608:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	bfb8      	it	lt
 8000614:	425b      	neglt	r3, r3
 8000616:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000618:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800061c:	0fda      	lsrs	r2, r3, #31
 800061e:	4413      	add	r3, r2
 8000620:	105b      	asrs	r3, r3, #1
 8000622:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	429a      	cmp	r2, r3
 800062a:	da02      	bge.n	8000632 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000630:	e02e      	b.n	8000690 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8000632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000636:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000638:	e02a      	b.n	8000690 <GFX_WriteLine+0x108>
	        if (steep) {
 800063a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800063e:	2b00      	cmp	r3, #0
 8000640:	d008      	beq.n	8000654 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	b21b      	sxth	r3, r3
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	b211      	sxth	r1, r2
 800064a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800064c:	4618      	mov	r0, r3
 800064e:	f000 feab 	bl	80013a8 <ILI9341_WritePixel>
 8000652:	e007      	b.n	8000664 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	b21b      	sxth	r3, r3
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	b211      	sxth	r1, r2
 800065c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fea2 	bl	80013a8 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8000664:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000666:	8abb      	ldrh	r3, [r7, #20]
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	b29b      	uxth	r3, r3
 800066c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800066e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000672:	2b00      	cmp	r3, #0
 8000674:	da09      	bge.n	800068a <GFX_WriteLine+0x102>
	            y_start += ystep;
 8000676:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	4413      	add	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000680:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000682:	8afb      	ldrh	r3, [r7, #22]
 8000684:	4413      	add	r3, r2
 8000686:	b29b      	uxth	r3, r3
 8000688:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3301      	adds	r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	ddd0      	ble.n	800063a <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	; 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af02      	add	r7, sp, #8
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	1e5a      	subs	r2, r3, #1
 80006b8:	887b      	ldrh	r3, [r7, #2]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4613      	mov	r3, r2
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f7ff ff60 	bl	8000588 <GFX_WriteLine>
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af02      	add	r7, sp, #8
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	1e5a      	subs	r2, r3, #1
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f7ff ff4a 	bl	8000588 <GFX_WriteLine>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4611      	mov	r1, r2
 8000708:	461a      	mov	r2, r3
 800070a:	460b      	mov	r3, r1
 800070c:	80fb      	strh	r3, [r7, #6]
 800070e:	4613      	mov	r3, r2
 8000710:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	e008      	b.n	800072a <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000718:	88ba      	ldrh	r2, [r7, #4]
 800071a:	8c3b      	ldrh	r3, [r7, #32]
 800071c:	68b9      	ldr	r1, [r7, #8]
 800071e:	6978      	ldr	r0, [r7, #20]
 8000720:	f7ff ffbf 	bl	80006a2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	3301      	adds	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	88fa      	ldrh	r2, [r7, #6]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	429a      	cmp	r2, r3
 8000734:	dbf0      	blt.n	8000718 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	460b      	mov	r3, r1
 8000750:	80fb      	strh	r3, [r7, #6]
 8000752:	4613      	mov	r3, r2
 8000754:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	f1c3 0301 	rsb	r3, r3, #1
 800075c:	b29b      	uxth	r3, r3
 800075e:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	461a      	mov	r2, r3
 8000768:	03d2      	lsls	r2, r2, #15
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	b29b      	uxth	r3, r3
 8000770:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800077a:	e0b5      	b.n	80008e8 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 800077c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000780:	2b00      	cmp	r3, #0
 8000782:	db0e      	blt.n	80007a2 <GFX_DrawCircleHelper+0x62>
            y--;
 8000784:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000788:	b29b      	uxth	r3, r3
 800078a:	3b01      	subs	r3, #1
 800078c:	b29b      	uxth	r3, r3
 800078e:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000790:	8b7b      	ldrh	r3, [r7, #26]
 8000792:	3302      	adds	r3, #2
 8000794:	b29b      	uxth	r3, r3
 8000796:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8000798:	8bfa      	ldrh	r2, [r7, #30]
 800079a:	8b7b      	ldrh	r3, [r7, #26]
 800079c:	4413      	add	r3, r2
 800079e:	b29b      	uxth	r3, r3
 80007a0:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80007a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	3301      	adds	r3, #1
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80007ae:	8bbb      	ldrh	r3, [r7, #28]
 80007b0:	3302      	adds	r3, #2
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80007b6:	8bfa      	ldrh	r2, [r7, #30]
 80007b8:	8bbb      	ldrh	r3, [r7, #28]
 80007ba:	4413      	add	r3, r2
 80007bc:	b29b      	uxth	r3, r3
 80007be:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80007c0:	797b      	ldrb	r3, [r7, #5]
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d01f      	beq.n	800080a <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	8b3b      	ldrh	r3, [r7, #24]
 80007d0:	4413      	add	r3, r2
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	b218      	sxth	r0, r3
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	b29a      	uxth	r2, r3
 80007da:	8afb      	ldrh	r3, [r7, #22]
 80007dc:	4413      	add	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80007e4:	4619      	mov	r1, r3
 80007e6:	f000 fddf 	bl	80013a8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	8afb      	ldrh	r3, [r7, #22]
 80007f0:	4413      	add	r3, r2
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b218      	sxth	r0, r3
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	8b3b      	ldrh	r3, [r7, #24]
 80007fc:	4413      	add	r3, r2
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b21b      	sxth	r3, r3
 8000802:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000804:	4619      	mov	r1, r3
 8000806:	f000 fdcf 	bl	80013a8 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 800080a:	797b      	ldrb	r3, [r7, #5]
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	2b00      	cmp	r3, #0
 8000812:	d01f      	beq.n	8000854 <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	b29a      	uxth	r2, r3
 8000818:	8b3b      	ldrh	r3, [r7, #24]
 800081a:	4413      	add	r3, r2
 800081c:	b29b      	uxth	r3, r3
 800081e:	b218      	sxth	r0, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	b29a      	uxth	r2, r3
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	b29b      	uxth	r3, r3
 800082a:	b21b      	sxth	r3, r3
 800082c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800082e:	4619      	mov	r1, r3
 8000830:	f000 fdba 	bl	80013a8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	b29a      	uxth	r2, r3
 8000838:	8afb      	ldrh	r3, [r7, #22]
 800083a:	4413      	add	r3, r2
 800083c:	b29b      	uxth	r3, r3
 800083e:	b218      	sxth	r0, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	b29a      	uxth	r2, r3
 8000844:	8b3b      	ldrh	r3, [r7, #24]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	b21b      	sxth	r3, r3
 800084c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800084e:	4619      	mov	r1, r3
 8000850:	f000 fdaa 	bl	80013a8 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 8000854:	797b      	ldrb	r3, [r7, #5]
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	2b00      	cmp	r3, #0
 800085c:	d01f      	beq.n	800089e <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	b29a      	uxth	r2, r3
 8000862:	8afb      	ldrh	r3, [r7, #22]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	b29b      	uxth	r3, r3
 8000868:	b218      	sxth	r0, r3
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	b29a      	uxth	r2, r3
 800086e:	8b3b      	ldrh	r3, [r7, #24]
 8000870:	4413      	add	r3, r2
 8000872:	b29b      	uxth	r3, r3
 8000874:	b21b      	sxth	r3, r3
 8000876:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000878:	4619      	mov	r1, r3
 800087a:	f000 fd95 	bl	80013a8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	b29a      	uxth	r2, r3
 8000882:	8b3b      	ldrh	r3, [r7, #24]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	b29b      	uxth	r3, r3
 8000888:	b218      	sxth	r0, r3
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	b29a      	uxth	r2, r3
 800088e:	8afb      	ldrh	r3, [r7, #22]
 8000890:	4413      	add	r3, r2
 8000892:	b29b      	uxth	r3, r3
 8000894:	b21b      	sxth	r3, r3
 8000896:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000898:	4619      	mov	r1, r3
 800089a:	f000 fd85 	bl	80013a8 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 800089e:	797b      	ldrb	r3, [r7, #5]
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d01f      	beq.n	80008e8 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	8afb      	ldrh	r3, [r7, #22]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	b218      	sxth	r0, r3
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	8b3b      	ldrh	r3, [r7, #24]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b21b      	sxth	r3, r3
 80008c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80008c2:	4619      	mov	r1, r3
 80008c4:	f000 fd70 	bl	80013a8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	8b3b      	ldrh	r3, [r7, #24]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b218      	sxth	r0, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	8afb      	ldrh	r3, [r7, #22]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b21b      	sxth	r3, r3
 80008e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80008e2:	4619      	mov	r1, r3
 80008e4:	f000 fd60 	bl	80013a8 <ILI9341_WritePixel>
    while (x<y) {
 80008e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80008ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	f6ff af43 	blt.w	800077c <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	4611      	mov	r1, r2
 800090c:	461a      	mov	r2, r3
 800090e:	460b      	mov	r3, r1
 8000910:	80fb      	strh	r3, [r7, #6]
 8000912:	4613      	mov	r3, r2
 8000914:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	f1c3 0301 	rsb	r3, r3, #1
 800091c:	b29b      	uxth	r3, r3
 800091e:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	461a      	mov	r2, r3
 8000928:	03d2      	lsls	r2, r2, #15
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	b29b      	uxth	r3, r3
 8000930:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800093a:	e073      	b.n	8000a24 <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 800093c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0e      	blt.n	8000962 <GFX_DrawFillCircleHelper+0x62>
            y--;
 8000944:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000948:	b29b      	uxth	r3, r3
 800094a:	3b01      	subs	r3, #1
 800094c:	b29b      	uxth	r3, r3
 800094e:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000950:	8b7b      	ldrh	r3, [r7, #26]
 8000952:	3302      	adds	r3, #2
 8000954:	b29b      	uxth	r3, r3
 8000956:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8000958:	8bfa      	ldrh	r2, [r7, #30]
 800095a:	8b7b      	ldrh	r3, [r7, #26]
 800095c:	4413      	add	r3, r2
 800095e:	b29b      	uxth	r3, r3
 8000960:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000962:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000966:	b29b      	uxth	r3, r3
 8000968:	3301      	adds	r3, #1
 800096a:	b29b      	uxth	r3, r3
 800096c:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 800096e:	8bbb      	ldrh	r3, [r7, #28]
 8000970:	3302      	adds	r3, #2
 8000972:	b29b      	uxth	r3, r3
 8000974:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8000976:	8bfa      	ldrh	r2, [r7, #30]
 8000978:	8bbb      	ldrh	r3, [r7, #28]
 800097a:	4413      	add	r3, r2
 800097c:	b29b      	uxth	r3, r3
 800097e:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8000980:	797b      	ldrb	r3, [r7, #5]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d023      	beq.n	80009d2 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800098a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	18d0      	adds	r0, r2, r3
 8000992:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	1ad1      	subs	r1, r2, r3
 800099a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80009a6:	441a      	add	r2, r3
 80009a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009aa:	f7ff fe7a 	bl	80006a2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80009ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	18d0      	adds	r0, r2, r3
 80009b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	1ad1      	subs	r1, r2, r3
 80009be:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80009ca:	441a      	add	r2, r3
 80009cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009ce:	f7ff fe68 	bl	80006a2 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80009d2:	797b      	ldrb	r3, [r7, #5]
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d023      	beq.n	8000a24 <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80009dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad0      	subs	r0, r2, r3
 80009e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009e8:	68ba      	ldr	r2, [r7, #8]
 80009ea:	1ad1      	subs	r1, r2, r3
 80009ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80009f8:	441a      	add	r2, r3
 80009fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009fc:	f7ff fe51 	bl	80006a2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8000a00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	1ad0      	subs	r0, r2, r3
 8000a08:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	1ad1      	subs	r1, r2, r3
 8000a10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000a1c:	441a      	add	r2, r3
 8000a1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a20:	f7ff fe3f 	bl	80006a2 <GFX_DrawFastVLine>
    while (x<y) {
 8000a24:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000a28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	db85      	blt.n	800093c <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af02      	add	r7, sp, #8
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	4611      	mov	r1, r2
 8000a46:	461a      	mov	r2, r3
 8000a48:	460b      	mov	r3, r1
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000a50:	8b3a      	ldrh	r2, [r7, #24]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	18d0      	adds	r0, r2, r3
 8000a56:	88fa      	ldrh	r2, [r7, #6]
 8000a58:	8b3b      	ldrh	r3, [r7, #24]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	1ad2      	subs	r2, r2, r3
 8000a5e:	8bbb      	ldrh	r3, [r7, #28]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	f7ff fe35 	bl	80006d0 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000a66:	8b3a      	ldrh	r2, [r7, #24]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	18d0      	adds	r0, r2, r3
 8000a6c:	88ba      	ldrh	r2, [r7, #4]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	4413      	add	r3, r2
 8000a72:	1e59      	subs	r1, r3, #1
 8000a74:	88fa      	ldrh	r2, [r7, #6]
 8000a76:	8b3b      	ldrh	r3, [r7, #24]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	1ad2      	subs	r2, r2, r3
 8000a7c:	8bbb      	ldrh	r3, [r7, #28]
 8000a7e:	f7ff fe27 	bl	80006d0 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000a82:	8b3a      	ldrh	r2, [r7, #24]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	18d1      	adds	r1, r2, r3
 8000a88:	88ba      	ldrh	r2, [r7, #4]
 8000a8a:	8b3b      	ldrh	r3, [r7, #24]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	1ad2      	subs	r2, r2, r3
 8000a90:	8bbb      	ldrh	r3, [r7, #28]
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f7ff fe05 	bl	80006a2 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000a98:	88fa      	ldrh	r2, [r7, #6]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	1e58      	subs	r0, r3, #1
 8000aa0:	8b3a      	ldrh	r2, [r7, #24]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	18d1      	adds	r1, r2, r3
 8000aa6:	88ba      	ldrh	r2, [r7, #4]
 8000aa8:	8b3b      	ldrh	r3, [r7, #24]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	1ad2      	subs	r2, r2, r3
 8000aae:	8bbb      	ldrh	r3, [r7, #28]
 8000ab0:	f7ff fdf7 	bl	80006a2 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 8000ab4:	8b3a      	ldrh	r2, [r7, #24]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	18d0      	adds	r0, r2, r3
 8000aba:	8b3a      	ldrh	r2, [r7, #24]
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	18d1      	adds	r1, r2, r3
 8000ac0:	8b3a      	ldrh	r2, [r7, #24]
 8000ac2:	8bbb      	ldrh	r3, [r7, #28]
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	f7ff fe3a 	bl	8000740 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000acc:	88fa      	ldrh	r2, [r7, #6]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	441a      	add	r2, r3
 8000ad2:	8b3b      	ldrh	r3, [r7, #24]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	1e58      	subs	r0, r3, #1
 8000ad8:	8b3a      	ldrh	r2, [r7, #24]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	18d1      	adds	r1, r2, r3
 8000ade:	8b3a      	ldrh	r2, [r7, #24]
 8000ae0:	8bbb      	ldrh	r3, [r7, #28]
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	f7ff fe2b 	bl	8000740 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000aea:	88fa      	ldrh	r2, [r7, #6]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	441a      	add	r2, r3
 8000af0:	8b3b      	ldrh	r3, [r7, #24]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	1e58      	subs	r0, r3, #1
 8000af6:	88ba      	ldrh	r2, [r7, #4]
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	441a      	add	r2, r3
 8000afc:	8b3b      	ldrh	r3, [r7, #24]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	1e59      	subs	r1, r3, #1
 8000b02:	8b3a      	ldrh	r2, [r7, #24]
 8000b04:	8bbb      	ldrh	r3, [r7, #28]
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2304      	movs	r3, #4
 8000b0a:	f7ff fe19 	bl	8000740 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000b0e:	8b3a      	ldrh	r2, [r7, #24]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	18d0      	adds	r0, r2, r3
 8000b14:	88ba      	ldrh	r2, [r7, #4]
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	441a      	add	r2, r3
 8000b1a:	8b3b      	ldrh	r3, [r7, #24]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	1e59      	subs	r1, r3, #1
 8000b20:	8b3a      	ldrh	r2, [r7, #24]
 8000b22:	8bbb      	ldrh	r3, [r7, #28]
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2308      	movs	r3, #8
 8000b28:	f7ff fe0a 	bl	8000740 <GFX_DrawCircleHelper>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	461a      	mov	r2, r3
 8000b42:	460b      	mov	r3, r1
 8000b44:	80fb      	strh	r3, [r7, #6]
 8000b46:	4613      	mov	r3, r2
 8000b48:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8000b4a:	8c3a      	ldrh	r2, [r7, #32]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	18d0      	adds	r0, r2, r3
 8000b50:	8c3b      	ldrh	r3, [r7, #32]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	88fa      	ldrh	r2, [r7, #6]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	88b9      	ldrh	r1, [r7, #4]
 8000b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	460b      	mov	r3, r1
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	f7ff fdc9 	bl	80006fc <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8000b6a:	88fa      	ldrh	r2, [r7, #6]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	441a      	add	r2, r3
 8000b70:	8c3b      	ldrh	r3, [r7, #32]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	1e58      	subs	r0, r3, #1
 8000b76:	8c3a      	ldrh	r2, [r7, #32]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	18d1      	adds	r1, r2, r3
 8000b7c:	8c3b      	ldrh	r3, [r7, #32]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	88ba      	ldrh	r2, [r7, #4]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	8c3c      	ldrh	r4, [r7, #32]
 8000b90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b92:	9201      	str	r2, [sp, #4]
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2301      	movs	r3, #1
 8000b98:	4622      	mov	r2, r4
 8000b9a:	f7ff feb1 	bl	8000900 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8000b9e:	8c3a      	ldrh	r2, [r7, #32]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	18d0      	adds	r0, r2, r3
 8000ba4:	8c3a      	ldrh	r2, [r7, #32]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	18d1      	adds	r1, r2, r3
 8000baa:	8c3b      	ldrh	r3, [r7, #32]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	88ba      	ldrh	r2, [r7, #4]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	8c3c      	ldrh	r4, [r7, #32]
 8000bbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000bc0:	9201      	str	r2, [sp, #4]
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	4622      	mov	r2, r4
 8000bc8:	f7ff fe9a 	bl	8000900 <GFX_DrawFillCircleHelper>
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd90      	pop	{r4, r7, pc}

08000bd4 <GFX_Image>:
	}
}
#endif
#if STM32_USING ==1
void GFX_Image(int x, int y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	807b      	strh	r3, [r7, #2]
	uint8_t i, j;
	const uint8_t *Ptr = img; // wskaznik do chodzenia po obrazie
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	613b      	str	r3, [r7, #16]

	for(j = 0; j < h; j++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	75bb      	strb	r3, [r7, #22]
 8000bea:	e02c      	b.n	8000c46 <GFX_Image+0x72>
	{
		for(i = 0; i < w; i++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	75fb      	strb	r3, [r7, #23]
 8000bf0:	e021      	b.n	8000c36 <GFX_Image+0x62>
		{
			GFX_DrawPixel(x+i, y+j, (*Ptr << 8) | ((*(Ptr+1)) & 0xFF) ); // kolor jest 16bitowy, dlatego trzeba wziac dwa kolejne bajty i upakowac je
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	b218      	sxth	r0, r3
 8000c00:	7dbb      	ldrb	r3, [r7, #22]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b219      	sxth	r1, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	f000 fbbf 	bl	80013a8 <ILI9341_WritePixel>
			Ptr += sizeof(ColorType);
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
		for(i = 0; i < w; i++)
 8000c30:	7dfb      	ldrb	r3, [r7, #23]
 8000c32:	3301      	adds	r3, #1
 8000c34:	75fb      	strb	r3, [r7, #23]
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8d8      	bhi.n	8000bf2 <GFX_Image+0x1e>
	for(j = 0; j < h; j++)
 8000c40:	7dbb      	ldrb	r3, [r7, #22]
 8000c42:	3301      	adds	r3, #1
 8000c44:	75bb      	strb	r3, [r7, #22]
 8000c46:	7dbb      	ldrb	r3, [r7, #22]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	8c3a      	ldrh	r2, [r7, #32]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8cd      	bhi.n	8000bec <GFX_Image+0x18>
		}
	}
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <EF_SetFont+0x1c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000098 	.word	0x20000098

08000c7c <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <EF_GetFontHeight+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	781b      	ldrb	r3, [r3, #0]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	20000098 	.word	0x20000098

08000c94 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <EF_GetFontStartChar+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	785b      	ldrb	r3, [r3, #1]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	20000098 	.word	0x20000098

08000cac <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <EF_GetFontEndChar+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	789b      	ldrb	r3, [r3, #2]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20000098 	.word	0x20000098

08000cc4 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <EF_GetFontSpaceWidth+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	78db      	ldrb	r3, [r3, #3]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	20000098 	.word	0x20000098

08000cdc <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2bc5      	cmp	r3, #197	; 0xc5
 8000cf0:	d052      	beq.n	8000d98 <EF_DecodePolish+0xbc>
 8000cf2:	2bc5      	cmp	r3, #197	; 0xc5
 8000cf4:	f300 80e7 	bgt.w	8000ec6 <EF_DecodePolish+0x1ea>
 8000cf8:	2bc3      	cmp	r3, #195	; 0xc3
 8000cfa:	d002      	beq.n	8000d02 <EF_DecodePolish+0x26>
 8000cfc:	2bc4      	cmp	r3, #196	; 0xc4
 8000cfe:	d00a      	beq.n	8000d16 <EF_DecodePolish+0x3a>
 8000d00:	e0e1      	b.n	8000ec6 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	2b93      	cmp	r3, #147	; 0x93
 8000d06:	d002      	beq.n	8000d0e <EF_DecodePolish+0x32>
 8000d08:	2bb3      	cmp	r3, #179	; 0xb3
 8000d0a:	d002      	beq.n	8000d12 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8000d0c:	e0db      	b.n	8000ec6 <EF_DecodePolish+0x1ea>
			return 0x84;
 8000d0e:	2384      	movs	r3, #132	; 0x84
 8000d10:	e0da      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8000d12:	238d      	movs	r3, #141	; 0x8d
 8000d14:	e0d8      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	3b84      	subs	r3, #132	; 0x84
 8000d1a:	2b15      	cmp	r3, #21
 8000d1c:	f200 80d0 	bhi.w	8000ec0 <EF_DecodePolish+0x1e4>
 8000d20:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <EF_DecodePolish+0x4c>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d81 	.word	0x08000d81
 8000d2c:	08000d8d 	.word	0x08000d8d
 8000d30:	08000d89 	.word	0x08000d89
 8000d34:	08000d95 	.word	0x08000d95
 8000d38:	08000ec1 	.word	0x08000ec1
 8000d3c:	08000ec1 	.word	0x08000ec1
 8000d40:	08000ec1 	.word	0x08000ec1
 8000d44:	08000ec1 	.word	0x08000ec1
 8000d48:	08000ec1 	.word	0x08000ec1
 8000d4c:	08000ec1 	.word	0x08000ec1
 8000d50:	08000ec1 	.word	0x08000ec1
 8000d54:	08000ec1 	.word	0x08000ec1
 8000d58:	08000ec1 	.word	0x08000ec1
 8000d5c:	08000ec1 	.word	0x08000ec1
 8000d60:	08000ec1 	.word	0x08000ec1
 8000d64:	08000ec1 	.word	0x08000ec1
 8000d68:	08000ec1 	.word	0x08000ec1
 8000d6c:	08000ec1 	.word	0x08000ec1
 8000d70:	08000ec1 	.word	0x08000ec1
 8000d74:	08000ec1 	.word	0x08000ec1
 8000d78:	08000d85 	.word	0x08000d85
 8000d7c:	08000d91 	.word	0x08000d91
		{
		case 0x84: // Ą
			return 0x7F;
 8000d80:	237f      	movs	r3, #127	; 0x7f
 8000d82:	e0a1      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8000d84:	2381      	movs	r3, #129	; 0x81
 8000d86:	e09f      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	e09d      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8000d8c:	2388      	movs	r3, #136	; 0x88
 8000d8e:	e09b      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8000d90:	238a      	movs	r3, #138	; 0x8a
 8000d92:	e099      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8000d94:	2389      	movs	r3, #137	; 0x89
 8000d96:	e097      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	3b81      	subs	r3, #129	; 0x81
 8000d9c:	2b3b      	cmp	r3, #59	; 0x3b
 8000d9e:	f200 8091 	bhi.w	8000ec4 <EF_DecodePolish+0x1e8>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <EF_DecodePolish+0xcc>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000e99 	.word	0x08000e99
 8000dac:	08000ead 	.word	0x08000ead
 8000db0:	08000e9d 	.word	0x08000e9d
 8000db4:	08000eb1 	.word	0x08000eb1
 8000db8:	08000ec5 	.word	0x08000ec5
 8000dbc:	08000ec5 	.word	0x08000ec5
 8000dc0:	08000ec5 	.word	0x08000ec5
 8000dc4:	08000ec5 	.word	0x08000ec5
 8000dc8:	08000ec5 	.word	0x08000ec5
 8000dcc:	08000ec5 	.word	0x08000ec5
 8000dd0:	08000ec5 	.word	0x08000ec5
 8000dd4:	08000ec5 	.word	0x08000ec5
 8000dd8:	08000ec5 	.word	0x08000ec5
 8000ddc:	08000ec5 	.word	0x08000ec5
 8000de0:	08000ec5 	.word	0x08000ec5
 8000de4:	08000ec5 	.word	0x08000ec5
 8000de8:	08000ec5 	.word	0x08000ec5
 8000dec:	08000ec5 	.word	0x08000ec5
 8000df0:	08000ec5 	.word	0x08000ec5
 8000df4:	08000ec5 	.word	0x08000ec5
 8000df8:	08000ec5 	.word	0x08000ec5
 8000dfc:	08000ec5 	.word	0x08000ec5
 8000e00:	08000ec5 	.word	0x08000ec5
 8000e04:	08000ec5 	.word	0x08000ec5
 8000e08:	08000ec5 	.word	0x08000ec5
 8000e0c:	08000ea1 	.word	0x08000ea1
 8000e10:	08000eb5 	.word	0x08000eb5
 8000e14:	08000ec5 	.word	0x08000ec5
 8000e18:	08000ec5 	.word	0x08000ec5
 8000e1c:	08000ec5 	.word	0x08000ec5
 8000e20:	08000ec5 	.word	0x08000ec5
 8000e24:	08000ec5 	.word	0x08000ec5
 8000e28:	08000ec5 	.word	0x08000ec5
 8000e2c:	08000ec5 	.word	0x08000ec5
 8000e30:	08000ec5 	.word	0x08000ec5
 8000e34:	08000ec5 	.word	0x08000ec5
 8000e38:	08000ec5 	.word	0x08000ec5
 8000e3c:	08000ec5 	.word	0x08000ec5
 8000e40:	08000ec5 	.word	0x08000ec5
 8000e44:	08000ec5 	.word	0x08000ec5
 8000e48:	08000ec5 	.word	0x08000ec5
 8000e4c:	08000ec5 	.word	0x08000ec5
 8000e50:	08000ec5 	.word	0x08000ec5
 8000e54:	08000ec5 	.word	0x08000ec5
 8000e58:	08000ec5 	.word	0x08000ec5
 8000e5c:	08000ec5 	.word	0x08000ec5
 8000e60:	08000ec5 	.word	0x08000ec5
 8000e64:	08000ec5 	.word	0x08000ec5
 8000e68:	08000ec5 	.word	0x08000ec5
 8000e6c:	08000ec5 	.word	0x08000ec5
 8000e70:	08000ec5 	.word	0x08000ec5
 8000e74:	08000ec5 	.word	0x08000ec5
 8000e78:	08000ec5 	.word	0x08000ec5
 8000e7c:	08000ec5 	.word	0x08000ec5
 8000e80:	08000ec5 	.word	0x08000ec5
 8000e84:	08000ec5 	.word	0x08000ec5
 8000e88:	08000ea5 	.word	0x08000ea5
 8000e8c:	08000eb9 	.word	0x08000eb9
 8000e90:	08000ea9 	.word	0x08000ea9
 8000e94:	08000ebd 	.word	0x08000ebd
		{
		case 0x81: // Ł
			return 0x82;
 8000e98:	2382      	movs	r3, #130	; 0x82
 8000e9a:	e015      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8000e9c:	2383      	movs	r3, #131	; 0x83
 8000e9e:	e013      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8000ea0:	2385      	movs	r3, #133	; 0x85
 8000ea2:	e011      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8000ea4:	2386      	movs	r3, #134	; 0x86
 8000ea6:	e00f      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8000ea8:	2387      	movs	r3, #135	; 0x87
 8000eaa:	e00d      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8000eac:	238b      	movs	r3, #139	; 0x8b
 8000eae:	e00b      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8000eb0:	238c      	movs	r3, #140	; 0x8c
 8000eb2:	e009      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8000eb4:	238e      	movs	r3, #142	; 0x8e
 8000eb6:	e007      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8000eb8:	238f      	movs	r3, #143	; 0x8f
 8000eba:	e005      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8000ebc:	2390      	movs	r3, #144	; 0x90
 8000ebe:	e003      	b.n	8000ec8 <EF_DecodePolish+0x1ec>
		break;
 8000ec0:	bf00      	nop
 8000ec2:	e000      	b.n	8000ec6 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8000ec4:	bf00      	nop
	}

	return 0;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8000ed4:	b5b0      	push	{r4, r5, r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4604      	mov	r4, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	4611      	mov	r1, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4623      	mov	r3, r4
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80bb      	strh	r3, [r7, #4]
 8000eea:	460b      	mov	r3, r1
 8000eec:	807b      	strh	r3, [r7, #2]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8000ef2:	f7ff fecf 	bl	8000c94 <EF_GetFontStartChar>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b20      	cmp	r3, #32
 8000f04:	d120      	bne.n	8000f48 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8000f06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d114      	bne.n	8000f38 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8000f0e:	88bc      	ldrh	r4, [r7, #4]
 8000f10:	887d      	ldrh	r5, [r7, #2]
 8000f12:	f7ff fed7 	bl	8000cc4 <EF_GetFontSpaceWidth>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	0052      	lsls	r2, r2, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b5a      	ldr	r3, [pc, #360]	; (800108c <EF_PutChar+0x1b8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4629      	mov	r1, r5
 8000f32:	4620      	mov	r0, r4
 8000f34:	f7ff fbe2 	bl	80006fc <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8000f38:	f7ff fec4 	bl	8000cc4 <EF_GetFontSpaceWidth>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	0052      	lsls	r2, r2, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	e09c      	b.n	8001082 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8000f48:	f7ff fea4 	bl	8000c94 <EF_GetFontStartChar>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d201      	bcs.n	8000f5a <EF_PutChar+0x86>
	{
		return 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e093      	b.n	8001082 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8000f5a:	f7ff fea7 	bl	8000cac <EF_GetFontEndChar>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	7c7b      	ldrb	r3, [r7, #17]
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d901      	bls.n	8000f6c <EF_PutChar+0x98>
	{
		return 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e08a      	b.n	8001082 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8000f6c:	4b47      	ldr	r3, [pc, #284]	; (800108c <EF_PutChar+0x1b8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	7c7b      	ldrb	r3, [r7, #17]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8000f7a:	4b44      	ldr	r3, [pc, #272]	; (800108c <EF_PutChar+0x1b8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a42      	ldr	r2, [pc, #264]	; (800108c <EF_PutChar+0x1b8>)
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	6851      	ldr	r1, [r2, #4]
 8000f86:	7c7a      	ldrb	r2, [r7, #17]
 8000f88:	0092      	lsls	r2, r2, #2
 8000f8a:	440a      	add	r2, r1
 8000f8c:	8852      	ldrh	r2, [r2, #2]
 8000f8e:	4413      	add	r3, r2
 8000f90:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	83fb      	strh	r3, [r7, #30]
 8000f96:	e066      	b.n	8001066 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	777b      	strb	r3, [r7, #29]
 8000fa2:	e053      	b.n	800104c <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8000faa:	7efb      	ldrb	r3, [r7, #27]
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	d905      	bls.n	8000fbc <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8000fb4:	7efb      	ldrb	r3, [r7, #27]
 8000fb6:	3b08      	subs	r3, #8
 8000fb8:	76fb      	strb	r3, [r7, #27]
 8000fba:	e001      	b.n	8000fc0 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8000fbc:	7efb      	ldrb	r3, [r7, #27]
 8000fbe:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	74bb      	strb	r3, [r7, #18]
 8000fc4:	e038      	b.n	8001038 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8000fc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	da15      	bge.n	8000ffa <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8000fce:	7f7b      	ldrb	r3, [r7, #29]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	7cbb      	ldrb	r3, [r7, #18]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b218      	sxth	r0, r3
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	8bfb      	ldrh	r3, [r7, #30]
 8000fea:	4413      	add	r3, r2
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	883a      	ldrh	r2, [r7, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f000 f9d8 	bl	80013a8 <ILI9341_WritePixel>
 8000ff8:	e018      	b.n	800102c <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8000ffa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d114      	bne.n	800102c <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001002:	7f7b      	ldrb	r3, [r7, #29]
 8001004:	b29b      	uxth	r3, r3
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	b29a      	uxth	r2, r3
 800100a:	88bb      	ldrh	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	b29a      	uxth	r2, r3
 8001010:	7cbb      	ldrb	r3, [r7, #18]
 8001012:	b29b      	uxth	r3, r3
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	b218      	sxth	r0, r3
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	8bfb      	ldrh	r3, [r7, #30]
 800101e:	4413      	add	r3, r2
 8001020:	b29b      	uxth	r3, r3
 8001022:	b21b      	sxth	r3, r3
 8001024:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001026:	4619      	mov	r1, r3
 8001028:	f000 f9be 	bl	80013a8 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 800102c:	7cbb      	ldrb	r3, [r7, #18]
 800102e:	3301      	adds	r3, #1
 8001030:	74bb      	strb	r3, [r7, #18]
 8001032:	7cfb      	ldrb	r3, [r7, #19]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	74fb      	strb	r3, [r7, #19]
 8001038:	7cba      	ldrb	r2, [r7, #18]
 800103a:	7f3b      	ldrb	r3, [r7, #28]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3c2      	bcc.n	8000fc6 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001046:	7f7b      	ldrb	r3, [r7, #29]
 8001048:	3301      	adds	r3, #1
 800104a:	777b      	strb	r3, [r7, #29]
 800104c:	7f7a      	ldrb	r2, [r7, #29]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3b01      	subs	r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	da00      	bge.n	800105a <EF_PutChar+0x186>
 8001058:	3307      	adds	r3, #7
 800105a:	10db      	asrs	r3, r3, #3
 800105c:	429a      	cmp	r2, r3
 800105e:	dda1      	ble.n	8000fa4 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001060:	8bfb      	ldrh	r3, [r7, #30]
 8001062:	3301      	adds	r3, #1
 8001064:	83fb      	strh	r3, [r7, #30]
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <EF_PutChar+0x1b8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	8bfa      	ldrh	r2, [r7, #30]
 8001070:	429a      	cmp	r2, r3
 8001072:	d391      	bcc.n	8000f98 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <EF_PutChar+0x1b8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	7c7b      	ldrb	r3, [r7, #17]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	781b      	ldrb	r3, [r3, #0]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bdb0      	pop	{r4, r5, r7, pc}
 800108a:	bf00      	nop
 800108c:	20000098 	.word	0x20000098

08001090 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af02      	add	r7, sp, #8
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	4608      	mov	r0, r1
 800109a:	4611      	mov	r1, r2
 800109c:	461a      	mov	r2, r3
 800109e:	4603      	mov	r3, r0
 80010a0:	817b      	strh	r3, [r7, #10]
 80010a2:	460b      	mov	r3, r1
 80010a4:	813b      	strh	r3, [r7, #8]
 80010a6:	4613      	mov	r3, r2
 80010a8:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f7ff f898 	bl	80001e0 <strlen>
 80010b0:	4603      	mov	r3, r0
 80010b2:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 80010b4:	2300      	movs	r3, #0
 80010b6:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 80010b8:	2300      	movs	r3, #0
 80010ba:	75fb      	strb	r3, [r7, #23]
 80010bc:	e05a      	b.n	8001174 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2bc5      	cmp	r3, #197	; 0xc5
 80010c8:	d817      	bhi.n	80010fa <EF_PutString+0x6a>
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2bc2      	cmp	r3, #194	; 0xc2
 80010d4:	d911      	bls.n	80010fa <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	7818      	ldrb	r0, [r3, #0]
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	3301      	adds	r3, #1
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fdf7 	bl	8000cdc <EF_DecodePolish>
 80010ee:	4603      	mov	r3, r0
 80010f0:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	3301      	adds	r3, #1
 80010f6:	75fb      	strb	r3, [r7, #23]
 80010f8:	e004      	b.n	8001104 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001104:	897a      	ldrh	r2, [r7, #10]
 8001106:	8abb      	ldrh	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	b299      	uxth	r1, r3
 800110c:	88fc      	ldrh	r4, [r7, #6]
 800110e:	893a      	ldrh	r2, [r7, #8]
 8001110:	7cf8      	ldrb	r0, [r7, #19]
 8001112:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4623      	mov	r3, r4
 800111e:	f7ff fed9 	bl	8000ed4 <EF_PutChar>
 8001122:	4603      	mov	r3, r0
 8001124:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001126:	7c7b      	ldrb	r3, [r7, #17]
 8001128:	b29a      	uxth	r2, r3
 800112a:	8abb      	ldrh	r3, [r7, #20]
 800112c:	4413      	add	r3, r2
 800112e:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001130:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001134:	2b01      	cmp	r3, #1
 8001136:	d113      	bne.n	8001160 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001138:	897a      	ldrh	r2, [r7, #10]
 800113a:	8abb      	ldrh	r3, [r7, #20]
 800113c:	18d4      	adds	r4, r2, r3
 800113e:	893d      	ldrh	r5, [r7, #8]
 8001140:	f7ff fdc0 	bl	8000cc4 <EF_GetFontSpaceWidth>
 8001144:	4603      	mov	r3, r0
 8001146:	b29e      	uxth	r6, r3
 8001148:	f7ff fd98 	bl	8000c7c <EF_GetFontHeight>
 800114c:	4603      	mov	r3, r0
 800114e:	b29a      	uxth	r2, r3
 8001150:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	4632      	mov	r2, r6
 8001158:	4629      	mov	r1, r5
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff face 	bl	80006fc <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001160:	f7ff fdb0 	bl	8000cc4 <EF_GetFontSpaceWidth>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	8abb      	ldrh	r3, [r7, #20]
 800116a:	4413      	add	r3, r2
 800116c:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	3301      	adds	r3, #1
 8001172:	75fb      	strb	r3, [r7, #23]
 8001174:	7dfa      	ldrb	r2, [r7, #23]
 8001176:	7cbb      	ldrb	r3, [r7, #18]
 8001178:	429a      	cmp	r2, r3
 800117a:	d3a0      	bcc.n	80010be <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 800117c:	8abb      	ldrh	r3, [r7, #20]
 800117e:	b2dc      	uxtb	r4, r3
 8001180:	f7ff fda0 	bl	8000cc4 <EF_GetFontSpaceWidth>
 8001184:	4603      	mov	r3, r0
 8001186:	1ae3      	subs	r3, r4, r3
 8001188:	b2db      	uxtb	r3, r3
}
 800118a:	4618      	mov	r0, r3
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001192 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 ff2c 	bl	8001ff8 <HAL_Delay>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 80011b2:	e014      	b.n	80011de <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <ILI9341_SendToTFT+0x5c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d10c      	bne.n	80011de <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <ILI9341_SendToTFT+0x5c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	330c      	adds	r3, #12
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3301      	adds	r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3b01      	subs	r3, #1
 80011dc:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1e7      	bne.n	80011b4 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 80011e4:	bf00      	nop
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <ILI9341_SendToTFT+0x5c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	2b80      	cmp	r3, #128	; 0x80
 80011f4:	d0f7      	beq.n	80011e6 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	2000009c 	.word	0x2000009c

08001208 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <ILI9341_SendComand+0x40>)
 800121a:	f001 fd23 	bl	8002c64 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001224:	4808      	ldr	r0, [pc, #32]	; (8001248 <ILI9341_SendComand+0x40>)
 8001226:	f001 fd1d 	bl	8002c64 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ffba 	bl	80011a8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <ILI9341_SendComand+0x40>)
 800123c:	f001 fd12 	bl	8002c64 <HAL_GPIO_WritePin>
#endif
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40020400 	.word	0x40020400

0800124c <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001260:	4811      	ldr	r0, [pc, #68]	; (80012a8 <ILI9341_SendCommandAndData+0x5c>)
 8001262:	f001 fcff 	bl	8002c64 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126c:	480e      	ldr	r0, [pc, #56]	; (80012a8 <ILI9341_SendCommandAndData+0x5c>)
 800126e:	f001 fcf9 	bl	8002c64 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001272:	f107 030f 	add.w	r3, r7, #15
 8001276:	2101      	movs	r1, #1
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff95 	bl	80011a8 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <ILI9341_SendCommandAndData+0x5c>)
 8001286:	f001 fced 	bl	8002c64 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f7ff ff8b 	bl	80011a8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <ILI9341_SendCommandAndData+0x5c>)
 800129a:	f001 fce3 	bl	8002c64 <HAL_GPIO_WritePin>
#endif

}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020400 	.word	0x40020400

080012ac <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d820      	bhi.n	80012fe <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d816      	bhi.n	80012f0 <ILI9341_SetRotation+0x44>
 80012c2:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <ILI9341_SetRotation+0x1c>)
 80012c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c8:	080012d9 	.word	0x080012d9
 80012cc:	080012df 	.word	0x080012df
 80012d0:	080012e5 	.word	0x080012e5
 80012d4:	080012eb 	.word	0x080012eb
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 80012d8:	2348      	movs	r3, #72	; 0x48
 80012da:	71fb      	strb	r3, [r7, #7]
		break;
 80012dc:	e008      	b.n	80012f0 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 80012de:	2328      	movs	r3, #40	; 0x28
 80012e0:	71fb      	strb	r3, [r7, #7]
		break;
 80012e2:	e005      	b.n	80012f0 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 80012e4:	2388      	movs	r3, #136	; 0x88
 80012e6:	71fb      	strb	r3, [r7, #7]
		break;
 80012e8:	e002      	b.n	80012f0 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80012ea:	23e8      	movs	r3, #232	; 0xe8
 80012ec:	71fb      	strb	r3, [r7, #7]
		break;
 80012ee:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	2201      	movs	r2, #1
 80012f4:	4619      	mov	r1, r3
 80012f6:	2036      	movs	r0, #54	; 0x36
 80012f8:	f7ff ffa8 	bl	800124c <ILI9341_SendCommandAndData>
 80012fc:	e000      	b.n	8001300 <ILI9341_SetRotation+0x54>
		return;
 80012fe:	bf00      	nop
}
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop

08001308 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4604      	mov	r4, r0
 8001310:	4608      	mov	r0, r1
 8001312:	4611      	mov	r1, r2
 8001314:	461a      	mov	r2, r3
 8001316:	4623      	mov	r3, r4
 8001318:	80fb      	strh	r3, [r7, #6]
 800131a:	4603      	mov	r3, r0
 800131c:	80bb      	strh	r3, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	807b      	strh	r3, [r7, #2]
 8001322:	4613      	mov	r3, r2
 8001324:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001326:	88fa      	ldrh	r2, [r7, #6]
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	4413      	add	r3, r2
 800132c:	b29b      	uxth	r3, r3
 800132e:	3b01      	subs	r3, #1
 8001330:	81fb      	strh	r3, [r7, #14]
 8001332:	88ba      	ldrh	r2, [r7, #4]
 8001334:	883b      	ldrh	r3, [r7, #0]
 8001336:	4413      	add	r3, r2
 8001338:	b29b      	uxth	r3, r3
 800133a:	3b01      	subs	r3, #1
 800133c:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b29b      	uxth	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	b29b      	uxth	r3, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2204      	movs	r2, #4
 8001364:	4619      	mov	r1, r3
 8001366:	202a      	movs	r0, #42	; 0x2a
 8001368:	f7ff ff70 	bl	800124c <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 800136c:	88bb      	ldrh	r3, [r7, #4]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	b29b      	uxth	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 800137c:	89bb      	ldrh	r3, [r7, #12]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	b29b      	uxth	r3, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001386:	89bb      	ldrh	r3, [r7, #12]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	2204      	movs	r2, #4
 8001392:	4619      	mov	r1, r3
 8001394:	202b      	movs	r0, #43	; 0x2b
 8001396:	f7ff ff59 	bl	800124c <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 800139a:	202c      	movs	r0, #44	; 0x2c
 800139c:	f7ff ff34 	bl	8001208 <ILI9341_SendComand>

}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}

080013a8 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
 80013b2:	460b      	mov	r3, r1
 80013b4:	80bb      	strh	r3, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 80013ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db21      	blt.n	8001406 <ILI9341_WritePixel+0x5e>
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013ca:	da1c      	bge.n	8001406 <ILI9341_WritePixel+0x5e>
 80013cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db18      	blt.n	8001406 <ILI9341_WritePixel+0x5e>
 80013d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d8:	2bef      	cmp	r3, #239	; 0xef
 80013da:	dc14      	bgt.n	8001406 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 80013dc:	88f8      	ldrh	r0, [r7, #6]
 80013de:	88b9      	ldrh	r1, [r7, #4]
 80013e0:	2301      	movs	r3, #1
 80013e2:	2201      	movs	r2, #1
 80013e4:	f7ff ff90 	bl	8001308 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2202      	movs	r2, #2
 80013fe:	4619      	mov	r1, r3
 8001400:	202c      	movs	r0, #44	; 0x2c
 8001402:	f7ff ff23 	bl	800124c <ILI9341_SendCommandAndData>
	}

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <ILI9341_ClearDisplay>:
	}
}


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800141a:	23f0      	movs	r3, #240	; 0xf0
 800141c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001420:	2100      	movs	r1, #0
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff ff70 	bl	8001308 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001428:	202c      	movs	r0, #44	; 0x2c
 800142a:	f7ff feed 	bl	8001208 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 800142e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001432:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143a:	4822      	ldr	r0, [pc, #136]	; (80014c4 <ILI9341_ClearDisplay+0xb4>)
 800143c:	f001 fc12 	bl	8002c64 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001446:	481f      	ldr	r0, [pc, #124]	; (80014c4 <ILI9341_ClearDisplay+0xb4>)
 8001448:	f001 fc0c 	bl	8002c64 <HAL_GPIO_WritePin>

    while (Length > 0U)
 800144c:	e023      	b.n	8001496 <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <ILI9341_ClearDisplay+0xb8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b02      	cmp	r3, #2
 800145c:	d11b      	bne.n	8001496 <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <ILI9341_ClearDisplay+0xb8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	330c      	adds	r3, #12
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001470:	bf00      	nop
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <ILI9341_ClearDisplay+0xb8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b02      	cmp	r3, #2
 8001480:	d1f7      	bne.n	8001472 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <ILI9341_ClearDisplay+0xb8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	330c      	adds	r3, #12
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3b01      	subs	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1d8      	bne.n	800144e <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 800149c:	bf00      	nop
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <ILI9341_ClearDisplay+0xb8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	2b80      	cmp	r3, #128	; 0x80
 80014ac:	d0f7      	beq.n	800149e <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <ILI9341_ClearDisplay+0xb4>)
 80014b6:	f001 fbd5 	bl	8002c64 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40020400 	.word	0x40020400
 80014c8:	2000009c 	.word	0x2000009c

080014cc <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <ILI9341_Init+0x9c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <ILI9341_Init+0xa0>)
 80014dc:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ec:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f4:	481e      	ldr	r0, [pc, #120]	; (8001570 <ILI9341_Init+0xa4>)
 80014f6:	f001 fbb5 	bl	8002c64 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 80014fa:	200a      	movs	r0, #10
 80014fc:	f7ff fe49 	bl	8001192 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001506:	481a      	ldr	r0, [pc, #104]	; (8001570 <ILI9341_Init+0xa4>)
 8001508:	f001 fbac 	bl	8002c64 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800150c:	200a      	movs	r0, #10
 800150e:	f7ff fe40 	bl	8001192 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001512:	e019      	b.n	8001548 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	60fa      	str	r2, [r7, #12]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 800151e:	7abb      	ldrb	r3, [r7, #10]
 8001520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001524:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 8001526:	7a7a      	ldrb	r2, [r7, #9]
 8001528:	7afb      	ldrb	r3, [r7, #11]
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fe8d 	bl	800124c <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 8001532:	7a7b      	ldrb	r3, [r7, #9]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 800153a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da02      	bge.n	8001548 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 8001542:	2096      	movs	r0, #150	; 0x96
 8001544:	f7ff fe25 	bl	8001192 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	60fa      	str	r2, [r7, #12]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	72fb      	strb	r3, [r7, #11]
 8001552:	7afb      	ldrb	r3, [r7, #11]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1dd      	bne.n	8001514 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8001558:	2003      	movs	r0, #3
 800155a:	f7ff fea7 	bl	80012ac <ILI9341_SetRotation>
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000009c 	.word	0x2000009c
 800156c:	08006bc0 	.word	0x08006bc0
 8001570:	40020400 	.word	0x40020400

08001574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_DMA_Init+0x4c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <MX_DMA_Init+0x4c>)
 8001584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <MX_DMA_Init+0x4c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2010      	movs	r0, #16
 800159c:	f000 fe2b 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015a0:	2010      	movs	r0, #16
 80015a2:	f000 fe44 	bl	800222e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2011      	movs	r0, #17
 80015ac:	f000 fe23 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015b0:	2011      	movs	r0, #17
 80015b2:	f000 fe3c 	bl	800222e <HAL_NVIC_EnableIRQ>

}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800

080015c4 <system_init>:

#include "functions.h"
#include "logo.h"


uint8_t system_init(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80015ca:	f24c 6018 	movw	r0, #50712	; 0xc618
 80015ce:	f7ff ff1f 	bl	8001410 <ILI9341_ClearDisplay>
	  GFX_Image(40, 50, logo, 240, 140);
 80015d2:	238c      	movs	r3, #140	; 0x8c
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	23f0      	movs	r3, #240	; 0xf0
 80015d8:	4a6a      	ldr	r2, [pc, #424]	; (8001784 <system_init+0x1c0>)
 80015da:	2132      	movs	r1, #50	; 0x32
 80015dc:	2028      	movs	r0, #40	; 0x28
 80015de:	f7ff faf9 	bl	8000bd4 <GFX_Image>

	  HAL_Delay(200); // !!!! TODO
 80015e2:	20c8      	movs	r0, #200	; 0xc8
 80015e4:	f000 fd08 	bl	8001ff8 <HAL_Delay>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 80015e8:	4867      	ldr	r0, [pc, #412]	; (8001788 <system_init+0x1c4>)
 80015ea:	f7ff fb37 	bl	8000c5c <EF_SetFont>
	  uint8_t Len = sprintf(Msg, "Inicjalizacja...");
 80015ee:	4967      	ldr	r1, [pc, #412]	; (800178c <system_init+0x1c8>)
 80015f0:	4867      	ldr	r0, [pc, #412]	; (8001790 <system_init+0x1cc>)
 80015f2:	f002 febb 	bl	800436c <siprintf>
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80015fa:	2300      	movs	r3, #0
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	2300      	movs	r3, #0
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	2214      	movs	r2, #20
 8001606:	213c      	movs	r1, #60	; 0x3c
 8001608:	4861      	ldr	r0, [pc, #388]	; (8001790 <system_init+0x1cc>)
 800160a:	f7ff fd41 	bl	8001090 <EF_PutString>
	  Len++;
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	3301      	adds	r3, #1
 8001612:	71fb      	strb	r3, [r7, #7]
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 8001614:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	2305      	movs	r3, #5
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2314      	movs	r3, #20
 8001620:	2214      	movs	r2, #20
 8001622:	21c8      	movs	r1, #200	; 0xc8
 8001624:	203c      	movs	r0, #60	; 0x3c
 8001626:	f7ff fa08 	bl	8000a3a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 800162a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	2305      	movs	r3, #5
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2314      	movs	r3, #20
 8001636:	2214      	movs	r2, #20
 8001638:	21c8      	movs	r1, #200	; 0xc8
 800163a:	205a      	movs	r0, #90	; 0x5a
 800163c:	f7ff f9fd 	bl	8000a3a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 8001640:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	2305      	movs	r3, #5
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2314      	movs	r3, #20
 800164c:	2214      	movs	r2, #20
 800164e:	21c8      	movs	r1, #200	; 0xc8
 8001650:	2078      	movs	r0, #120	; 0x78
 8001652:	f7ff f9f2 	bl	8000a3a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 8001656:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2305      	movs	r3, #5
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2314      	movs	r3, #20
 8001662:	2214      	movs	r2, #20
 8001664:	21c8      	movs	r1, #200	; 0xc8
 8001666:	2096      	movs	r0, #150	; 0x96
 8001668:	f7ff f9e7 	bl	8000a3a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 800166c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	2305      	movs	r3, #5
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2314      	movs	r3, #20
 8001678:	2214      	movs	r2, #20
 800167a:	21c8      	movs	r1, #200	; 0xc8
 800167c:	20b4      	movs	r0, #180	; 0xb4
 800167e:	f7ff f9dc 	bl	8000a3a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 8001682:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	2305      	movs	r3, #5
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2314      	movs	r3, #20
 800168e:	2214      	movs	r2, #20
 8001690:	21c8      	movs	r1, #200	; 0xc8
 8001692:	20d2      	movs	r0, #210	; 0xd2
 8001694:	f7ff f9d1 	bl	8000a3a <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 8001698:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	2305      	movs	r3, #5
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2314      	movs	r3, #20
 80016a4:	2214      	movs	r2, #20
 80016a6:	21c8      	movs	r1, #200	; 0xc8
 80016a8:	20f0      	movs	r0, #240	; 0xf0
 80016aa:	f7ff f9c6 	bl	8000a3a <GFX_DrawRoundRectangle>

	  HAL_Delay(100); // !!!! TODO
 80016ae:	2064      	movs	r0, #100	; 0x64
 80016b0:	f000 fca2 	bl	8001ff8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 80016b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	2305      	movs	r3, #5
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2314      	movs	r3, #20
 80016c0:	2214      	movs	r2, #20
 80016c2:	21c8      	movs	r1, #200	; 0xc8
 80016c4:	203c      	movs	r0, #60	; 0x3c
 80016c6:	f7ff fa35 	bl	8000b34 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 80016ca:	2064      	movs	r0, #100	; 0x64
 80016cc:	f000 fc94 	bl	8001ff8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 80016d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	2305      	movs	r3, #5
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2314      	movs	r3, #20
 80016dc:	2214      	movs	r2, #20
 80016de:	21c8      	movs	r1, #200	; 0xc8
 80016e0:	205a      	movs	r0, #90	; 0x5a
 80016e2:	f7ff fa27 	bl	8000b34 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 80016e6:	2064      	movs	r0, #100	; 0x64
 80016e8:	f000 fc86 	bl	8001ff8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 80016ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	2305      	movs	r3, #5
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2314      	movs	r3, #20
 80016f8:	2214      	movs	r2, #20
 80016fa:	21c8      	movs	r1, #200	; 0xc8
 80016fc:	2078      	movs	r0, #120	; 0x78
 80016fe:	f7ff fa19 	bl	8000b34 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 8001702:	2064      	movs	r0, #100	; 0x64
 8001704:	f000 fc78 	bl	8001ff8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 8001708:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2305      	movs	r3, #5
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2314      	movs	r3, #20
 8001714:	2214      	movs	r2, #20
 8001716:	21c8      	movs	r1, #200	; 0xc8
 8001718:	2096      	movs	r0, #150	; 0x96
 800171a:	f7ff fa0b 	bl	8000b34 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 800171e:	2064      	movs	r0, #100	; 0x64
 8001720:	f000 fc6a 	bl	8001ff8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 8001724:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	2305      	movs	r3, #5
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2314      	movs	r3, #20
 8001730:	2214      	movs	r2, #20
 8001732:	21c8      	movs	r1, #200	; 0xc8
 8001734:	20b4      	movs	r0, #180	; 0xb4
 8001736:	f7ff f9fd 	bl	8000b34 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 800173a:	2064      	movs	r0, #100	; 0x64
 800173c:	f000 fc5c 	bl	8001ff8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 8001740:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	2305      	movs	r3, #5
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2314      	movs	r3, #20
 800174c:	2214      	movs	r2, #20
 800174e:	21c8      	movs	r1, #200	; 0xc8
 8001750:	20d2      	movs	r0, #210	; 0xd2
 8001752:	f7ff f9ef 	bl	8000b34 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 8001756:	2064      	movs	r0, #100	; 0x64
 8001758:	f000 fc4e 	bl	8001ff8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 800175c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	2305      	movs	r3, #5
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2314      	movs	r3, #20
 8001768:	2214      	movs	r2, #20
 800176a:	21c8      	movs	r1, #200	; 0xc8
 800176c:	20f0      	movs	r0, #240	; 0xf0
 800176e:	f7ff f9e1 	bl	8000b34 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(200); // !!!! TODO
 8001772:	20c8      	movs	r0, #200	; 0xc8
 8001774:	f000 fc40 	bl	8001ff8 <HAL_Delay>



	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	08006c30 	.word	0x08006c30
 8001788:	08006bb4 	.word	0x08006bb4
 800178c:	08004be0 	.word	0x08004be0
 8001790:	200000a0 	.word	0x200000a0

08001794 <showCurrentParameters>:

void showCurrentParameters(uint8_t temp_zew, uint8_t temp_wew, uint8_t time, uint8_t water_lvl, uint8_t humidity)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b087      	sub	sp, #28
 8001798:	af02      	add	r7, sp, #8
 800179a:	4604      	mov	r4, r0
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4623      	mov	r3, r4
 80017a4:	71fb      	strb	r3, [r7, #7]
 80017a6:	4603      	mov	r3, r0
 80017a8:	71bb      	strb	r3, [r7, #6]
 80017aa:	460b      	mov	r3, r1
 80017ac:	717b      	strb	r3, [r7, #5]
 80017ae:	4613      	mov	r3, r2
 80017b0:	713b      	strb	r3, [r7, #4]
		// TODO zrobić żeby czytało właściwe wartości
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80017b2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80017b6:	f7ff fe2b 	bl	8001410 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80017ba:	482d      	ldr	r0, [pc, #180]	; (8001870 <showCurrentParameters+0xdc>)
 80017bc:	f7ff fa4e 	bl	8000c5c <EF_SetFont>
	  uint8_t Len = sprintf(Msg, "Czas: 00:00:00");
 80017c0:	492c      	ldr	r1, [pc, #176]	; (8001874 <showCurrentParameters+0xe0>)
 80017c2:	482d      	ldr	r0, [pc, #180]	; (8001878 <showCurrentParameters+0xe4>)
 80017c4:	f002 fdd2 	bl	800436c <siprintf>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80017cc:	2300      	movs	r3, #0
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	2300      	movs	r3, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	2214      	movs	r2, #20
 80017d8:	2114      	movs	r1, #20
 80017da:	4827      	ldr	r0, [pc, #156]	; (8001878 <showCurrentParameters+0xe4>)
 80017dc:	f7ff fc58 	bl	8001090 <EF_PutString>
	  Len = sprintf(Msg, "Temp. zewn: 0`C");
 80017e0:	4926      	ldr	r1, [pc, #152]	; (800187c <showCurrentParameters+0xe8>)
 80017e2:	4825      	ldr	r0, [pc, #148]	; (8001878 <showCurrentParameters+0xe4>)
 80017e4:	f002 fdc2 	bl	800436c <siprintf>
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 50, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80017ec:	2300      	movs	r3, #0
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	2232      	movs	r2, #50	; 0x32
 80017f8:	2114      	movs	r1, #20
 80017fa:	481f      	ldr	r0, [pc, #124]	; (8001878 <showCurrentParameters+0xe4>)
 80017fc:	f7ff fc48 	bl	8001090 <EF_PutString>
	  Len = sprintf(Msg, "Temp. wewn: 0`C");
 8001800:	491f      	ldr	r1, [pc, #124]	; (8001880 <showCurrentParameters+0xec>)
 8001802:	481d      	ldr	r0, [pc, #116]	; (8001878 <showCurrentParameters+0xe4>)
 8001804:	f002 fdb2 	bl	800436c <siprintf>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 80, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800180c:	2300      	movs	r3, #0
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2300      	movs	r3, #0
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	2250      	movs	r2, #80	; 0x50
 8001818:	2114      	movs	r1, #20
 800181a:	4817      	ldr	r0, [pc, #92]	; (8001878 <showCurrentParameters+0xe4>)
 800181c:	f7ff fc38 	bl	8001090 <EF_PutString>
	  Len = sprintf(Msg, "Wilgotność: 0%");
 8001820:	4918      	ldr	r1, [pc, #96]	; (8001884 <showCurrentParameters+0xf0>)
 8001822:	4815      	ldr	r0, [pc, #84]	; (8001878 <showCurrentParameters+0xe4>)
 8001824:	f002 fda2 	bl	800436c <siprintf>
 8001828:	4603      	mov	r3, r0
 800182a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 110, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800182c:	2300      	movs	r3, #0
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	2300      	movs	r3, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	226e      	movs	r2, #110	; 0x6e
 8001838:	2114      	movs	r1, #20
 800183a:	480f      	ldr	r0, [pc, #60]	; (8001878 <showCurrentParameters+0xe4>)
 800183c:	f7ff fc28 	bl	8001090 <EF_PutString>
	  Len = sprintf(Msg, "Poziom wody: 0%");
 8001840:	4911      	ldr	r1, [pc, #68]	; (8001888 <showCurrentParameters+0xf4>)
 8001842:	480d      	ldr	r0, [pc, #52]	; (8001878 <showCurrentParameters+0xe4>)
 8001844:	f002 fd92 	bl	800436c <siprintf>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 140, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800184c:	2300      	movs	r3, #0
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2300      	movs	r3, #0
 8001856:	228c      	movs	r2, #140	; 0x8c
 8001858:	2114      	movs	r1, #20
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <showCurrentParameters+0xe4>)
 800185c:	f7ff fc18 	bl	8001090 <EF_PutString>
	  Len++;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	3301      	adds	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	bf00      	nop
 8001870:	08006bb4 	.word	0x08006bb4
 8001874:	08004bf4 	.word	0x08004bf4
 8001878:	200000a0 	.word	0x200000a0
 800187c:	08004c04 	.word	0x08004c04
 8001880:	08004c14 	.word	0x08004c14
 8001884:	08004c24 	.word	0x08004c24
 8001888:	08004c38 	.word	0x08004c38

0800188c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a31      	ldr	r2, [pc, #196]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a2a      	ldr	r2, [pc, #168]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <MX_GPIO_Init+0xe4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <MX_GPIO_Init+0xe4>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <MX_GPIO_Init+0xe4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001918:	4816      	ldr	r0, [pc, #88]	; (8001974 <MX_GPIO_Init+0xe8>)
 800191a:	f001 f9a3 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001924:	4814      	ldr	r0, [pc, #80]	; (8001978 <MX_GPIO_Init+0xec>)
 8001926:	f001 f99d 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 800192a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	480c      	ldr	r0, [pc, #48]	; (8001974 <MX_GPIO_Init+0xe8>)
 8001944:	f001 f80a 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8001948:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_GPIO_Init+0xec>)
 8001962:	f000 fffb 	bl	800295c <HAL_GPIO_Init>

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40020800 	.word	0x40020800
 8001978:	40020400 	.word	0x40020400

0800197c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001982:	f000 fac7 	bl	8001f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001986:	f000 f819 	bl	80019bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198a:	f7ff ff7f 	bl	800188c <MX_GPIO_Init>
  MX_SPI1_Init();
 800198e:	f000 f883 	bl	8001a98 <MX_SPI1_Init>
  MX_DMA_Init();
 8001992:	f7ff fdef 	bl	8001574 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001996:	f000 f9b5 	bl	8001d04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1);
 800199a:	4807      	ldr	r0, [pc, #28]	; (80019b8 <main+0x3c>)
 800199c:	f7ff fd96 	bl	80014cc <ILI9341_Init>


  system_init();
 80019a0:	f7ff fe10 	bl	80015c4 <system_init>

  showCurrentParameters(0, 0, 0, 0, 0);
 80019a4:	2300      	movs	r3, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2300      	movs	r3, #0
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff fef0 	bl	8001794 <showCurrentParameters>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <main+0x38>
 80019b6:	bf00      	nop
 80019b8:	200000c0 	.word	0x200000c0

080019bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b094      	sub	sp, #80	; 0x50
 80019c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	2230      	movs	r2, #48	; 0x30
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fcc6 	bl	800435c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <SystemClock_Config+0xc8>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <SystemClock_Config+0xc8>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6413      	str	r3, [r2, #64]	; 0x40
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <SystemClock_Config+0xc8>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <SystemClock_Config+0xcc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a20      	ldr	r2, [pc, #128]	; (8001a88 <SystemClock_Config+0xcc>)
 8001a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <SystemClock_Config+0xcc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a22:	2302      	movs	r3, #2
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a30:	2360      	movs	r3, #96	; 0x60
 8001a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 f929 	bl	8002c98 <HAL_RCC_OscConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a4c:	f000 f81e 	bl	8001a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a50:	230f      	movs	r3, #15
 8001a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a54:	2302      	movs	r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2103      	movs	r1, #3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 fb8b 	bl	8003188 <HAL_RCC_ClockConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a78:	f000 f808 	bl	8001a8c <Error_Handler>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3750      	adds	r7, #80	; 0x50
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <MX_SPI1_Init+0x64>)
 8001a9e:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <MX_SPI1_Init+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MX_SPI1_Init+0x64>)
 8001aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <MX_SPI1_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <MX_SPI1_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_SPI1_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_SPI1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_SPI1_Init+0x64>)
 8001ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_SPI1_Init+0x64>)
 8001acc:	2210      	movs	r2, #16
 8001ace:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <MX_SPI1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_SPI1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <MX_SPI1_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_SPI1_Init+0x64>)
 8001ae4:	220a      	movs	r2, #10
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_SPI1_Init+0x64>)
 8001aea:	f001 fd1d 	bl	8003528 <HAL_SPI_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001af4:	f7ff ffca 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200000c0 	.word	0x200000c0
 8001b00:	40013000 	.word	0x40013000

08001b04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_SPI_MspInit+0x84>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d12b      	bne.n	8001b7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a10      	ldr	r2, [pc, #64]	; (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b5e:	23e0      	movs	r3, #224	; 0xe0
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b6e:	2305      	movs	r3, #5
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <HAL_SPI_MspInit+0x8c>)
 8001b7a:	f000 feef 	bl	800295c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40013000 	.word	0x40013000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020000 	.word	0x40020000

08001b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_MspInit+0x4c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <HAL_MspInit+0x4c>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f9c2 	bl	8001fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <DMA1_Stream5_IRQHandler+0x10>)
 8001c3e:	f000 fc51 	bl	80024e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000118 	.word	0x20000118

08001c4c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA1_Stream6_IRQHandler+0x10>)
 8001c52:	f000 fc47 	bl	80024e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000178 	.word	0x20000178

08001c60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <USART2_IRQHandler+0x10>)
 8001c66:	f001 fd35 	bl	80036d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200001d8 	.word	0x200001d8

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f002 fb30 	bl	8004308 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20020000 	.word	0x20020000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	2000008c 	.word	0x2000008c
 8001cdc:	20000230 	.word	0x20000230

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <MX_USART2_UART_Init+0x50>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d3c:	f001 fc7d 	bl	800363a <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d46:	f7ff fea1 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200001d8 	.word	0x200001d8
 8001d54:	40004400 	.word	0x40004400

08001d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a4b      	ldr	r2, [pc, #300]	; (8001ea4 <HAL_UART_MspInit+0x14c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	f040 8090 	bne.w	8001e9c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_UART_MspInit+0x150>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_UART_MspInit+0x150>)
 8001d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8c:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_UART_MspInit+0x150>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <HAL_UART_MspInit+0x150>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	4a41      	ldr	r2, [pc, #260]	; (8001ea8 <HAL_UART_MspInit+0x150>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6313      	str	r3, [r2, #48]	; 0x30
 8001da8:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <HAL_UART_MspInit+0x150>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001db4:	230c      	movs	r3, #12
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4837      	ldr	r0, [pc, #220]	; (8001eac <HAL_UART_MspInit+0x154>)
 8001dd0:	f000 fdc4 	bl	800295c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001dd6:	4a37      	ldr	r2, [pc, #220]	; (8001eb4 <HAL_UART_MspInit+0x15c>)
 8001dd8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001ddc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001de0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de2:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de8:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dee:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001df0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e08:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e14:	4826      	ldr	r0, [pc, #152]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001e16:	f000 fa25 	bl	8002264 <HAL_DMA_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001e20:	f7ff fe34 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_UART_MspInit+0x158>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e30:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <HAL_UART_MspInit+0x164>)
 8001e34:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e40:	2240      	movs	r2, #64	; 0x40
 8001e42:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e50:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e70:	4811      	ldr	r0, [pc, #68]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e72:	f000 f9f7 	bl	8002264 <HAL_DMA_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001e7c:	f7ff fe06 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <HAL_UART_MspInit+0x160>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2026      	movs	r0, #38	; 0x26
 8001e92:	f000 f9b0 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e96:	2026      	movs	r0, #38	; 0x26
 8001e98:	f000 f9c9 	bl	800222e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40004400 	.word	0x40004400
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	20000118 	.word	0x20000118
 8001eb4:	40026088 	.word	0x40026088
 8001eb8:	20000178 	.word	0x20000178
 8001ebc:	400260a0 	.word	0x400260a0

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ec6:	490e      	ldr	r1, [pc, #56]	; (8001f00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001edc:	4c0b      	ldr	r4, [pc, #44]	; (8001f0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eea:	f7ff fef9 	bl	8001ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f002 fa11 	bl	8004314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7ff fd43 	bl	800197c <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ef8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f04:	08017374 	.word	0x08017374
  ldr r2, =_sbss
 8001f08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f0c:	20000230 	.word	0x20000230

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>
	...

08001f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_Init+0x40>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_Init+0x40>)
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_Init+0x40>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 f94f 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 f808 	bl	8001f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f48:	f7ff fe24 	bl	8001b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_InitTick+0x54>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x58>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f967 	bl	800224a <HAL_SYSTICK_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00e      	b.n	8001fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	d80a      	bhi.n	8001fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f000 f92f 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <HAL_InitTick+0x5c>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x20>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x24>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_IncTick+0x24>)
 8001fca:	6013      	str	r3, [r2, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	2000021c 	.word	0x2000021c

08001fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_GetTick+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	2000021c 	.word	0x2000021c

08001ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff ffee 	bl	8001fe0 <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d005      	beq.n	800201e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_Delay+0x44>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800201e:	bf00      	nop
 8002020:	f7ff ffde 	bl	8001fe0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d8f7      	bhi.n	8002020 <HAL_Delay+0x28>
  {
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008

08002040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800205c:	4013      	ands	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800206c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002072:	4a04      	ldr	r2, [pc, #16]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	60d3      	str	r3, [r2, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <__NVIC_GetPriorityGrouping+0x18>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0307 	and.w	r3, r3, #7
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db0b      	blt.n	80020ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <__NVIC_EnableIRQ+0x38>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2001      	movs	r0, #1
 80020c6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	; (800212c <__NVIC_SetPriority+0x4c>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	440b      	add	r3, r1
 8002104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002108:	e00a      	b.n	8002120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4908      	ldr	r1, [pc, #32]	; (8002130 <__NVIC_SetPriority+0x50>)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3b04      	subs	r3, #4
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	761a      	strb	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff8e 	bl	80020e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff29 	bl	8002040 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff3e 	bl	8002088 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff8e 	bl	8002134 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5d 	bl	80020e0 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff31 	bl	80020a4 <__NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffa2 	bl	800219c <SysTick_Config>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff feb6 	bl	8001fe0 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e099      	b.n	80023b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a0:	e00f      	b.n	80022c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a2:	f7ff fe9d 	bl	8001fe0 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d908      	bls.n	80022c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e078      	b.n	80023b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1e8      	bne.n	80022a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_DMA_Init+0x158>)
 80022dc:	4013      	ands	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2b04      	cmp	r3, #4
 800231a:	d107      	bne.n	800232c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	4313      	orrs	r3, r2
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f023 0307 	bic.w	r3, r3, #7
 8002342:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	2b04      	cmp	r3, #4
 8002354:	d117      	bne.n	8002386 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00e      	beq.n	8002386 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fa7b 	bl	8002864 <DMA_CheckFifoParam>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2240      	movs	r2, #64	; 0x40
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002382:	2301      	movs	r3, #1
 8002384:	e016      	b.n	80023b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fa32 	bl	80027f8 <DMA_CalcBaseAndBitshift>
 8002394:	4603      	mov	r3, r0
 8002396:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	223f      	movs	r2, #63	; 0x3f
 800239e:	409a      	lsls	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	f010803f 	.word	0xf010803f

080023c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023ce:	f7ff fe07 	bl	8001fe0 <HAL_GetTick>
 80023d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e052      	b.n	8002498 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0216 	bic.w	r2, r2, #22
 8002400:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002410:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <HAL_DMA_Abort+0x62>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0208 	bic.w	r2, r2, #8
 8002430:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002442:	e013      	b.n	800246c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002444:	f7ff fdcc 	bl	8001fe0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b05      	cmp	r3, #5
 8002450:	d90c      	bls.n	800246c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2220      	movs	r2, #32
 8002456:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e015      	b.n	8002498 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e4      	bne.n	8002444 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	223f      	movs	r2, #63	; 0x3f
 8002480:	409a      	lsls	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d004      	beq.n	80024be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00c      	b.n	80024d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2205      	movs	r2, #5
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024f0:	4b92      	ldr	r3, [pc, #584]	; (800273c <HAL_DMA_IRQHandler+0x258>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a92      	ldr	r2, [pc, #584]	; (8002740 <HAL_DMA_IRQHandler+0x25c>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0a9b      	lsrs	r3, r3, #10
 80024fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	2208      	movs	r2, #8
 8002510:	409a      	lsls	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01a      	beq.n	8002550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0204 	bic.w	r2, r2, #4
 8002536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	2208      	movs	r2, #8
 800253e:	409a      	lsls	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	2201      	movs	r2, #1
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2201      	movs	r2, #1
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f043 0202 	orr.w	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	2204      	movs	r2, #4
 800258c:	409a      	lsls	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d012      	beq.n	80025bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00b      	beq.n	80025bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	2204      	movs	r2, #4
 80025aa:	409a      	lsls	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f043 0204 	orr.w	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	2210      	movs	r2, #16
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d043      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d03c      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	2210      	movs	r2, #16
 80025e0:	409a      	lsls	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d018      	beq.n	8002626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d024      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
 8002612:	e01f      	b.n	8002654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01b      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4798      	blx	r3
 8002624:	e016      	b.n	8002654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d107      	bne.n	8002644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0208 	bic.w	r2, r2, #8
 8002642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002658:	2220      	movs	r2, #32
 800265a:	409a      	lsls	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 808e 	beq.w	8002782 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8086 	beq.w	8002782 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2220      	movs	r2, #32
 800267c:	409a      	lsls	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b05      	cmp	r3, #5
 800268c:	d136      	bne.n	80026fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0216 	bic.w	r2, r2, #22
 800269c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <HAL_DMA_IRQHandler+0x1da>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0208 	bic.w	r2, r2, #8
 80026cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	223f      	movs	r2, #63	; 0x3f
 80026d4:	409a      	lsls	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d07d      	beq.n	80027ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	4798      	blx	r3
        }
        return;
 80026fa:	e078      	b.n	80027ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01c      	beq.n	8002744 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d108      	bne.n	800272a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	2b00      	cmp	r3, #0
 800271e:	d030      	beq.n	8002782 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
 8002728:	e02b      	b.n	8002782 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d027      	beq.n	8002782 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
 800273a:	e022      	b.n	8002782 <HAL_DMA_IRQHandler+0x29e>
 800273c:	20000000 	.word	0x20000000
 8002740:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0210 	bic.w	r2, r2, #16
 8002760:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	2b00      	cmp	r3, #0
 8002788:	d032      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d022      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2205      	movs	r2, #5
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3301      	adds	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d307      	bcc.n	80027ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f2      	bne.n	80027ae <HAL_DMA_IRQHandler+0x2ca>
 80027c8:	e000      	b.n	80027cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027ca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
 80027ec:	e000      	b.n	80027f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80027ee:	bf00      	nop
    }
  }
}
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop

080027f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3b10      	subs	r3, #16
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <DMA_CalcBaseAndBitshift+0x64>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <DMA_CalcBaseAndBitshift+0x68>)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d909      	bls.n	800283a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800282e:	f023 0303 	bic.w	r3, r3, #3
 8002832:	1d1a      	adds	r2, r3, #4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	659a      	str	r2, [r3, #88]	; 0x58
 8002838:	e007      	b.n	800284a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	aaaaaaab 	.word	0xaaaaaaab
 8002860:	080172c8 	.word	0x080172c8

08002864 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11f      	bne.n	80028be <DMA_CheckFifoParam+0x5a>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d856      	bhi.n	8002932 <DMA_CheckFifoParam+0xce>
 8002884:	a201      	add	r2, pc, #4	; (adr r2, 800288c <DMA_CheckFifoParam+0x28>)
 8002886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288a:	bf00      	nop
 800288c:	0800289d 	.word	0x0800289d
 8002890:	080028af 	.word	0x080028af
 8002894:	0800289d 	.word	0x0800289d
 8002898:	08002933 	.word	0x08002933
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d046      	beq.n	8002936 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e043      	b.n	8002936 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b6:	d140      	bne.n	800293a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028bc:	e03d      	b.n	800293a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c6:	d121      	bne.n	800290c <DMA_CheckFifoParam+0xa8>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d837      	bhi.n	800293e <DMA_CheckFifoParam+0xda>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <DMA_CheckFifoParam+0x70>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028eb 	.word	0x080028eb
 80028dc:	080028e5 	.word	0x080028e5
 80028e0:	080028fd 	.word	0x080028fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      break;
 80028e8:	e030      	b.n	800294c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d025      	beq.n	8002942 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fa:	e022      	b.n	8002942 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002904:	d11f      	bne.n	8002946 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800290a:	e01c      	b.n	8002946 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d903      	bls.n	800291a <DMA_CheckFifoParam+0xb6>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d003      	beq.n	8002920 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002918:	e018      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      break;
 800291e:	e015      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00e      	beq.n	800294a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e00b      	b.n	800294a <DMA_CheckFifoParam+0xe6>
      break;
 8002932:	bf00      	nop
 8002934:	e00a      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 8002936:	bf00      	nop
 8002938:	e008      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
 800293c:	e006      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800293e:	bf00      	nop
 8002940:	e004      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;   
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
    }
  } 
  
  return status; 
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e159      	b.n	8002c2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	f040 8148 	bne.w	8002c26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d005      	beq.n	80029ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d130      	bne.n	8002a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2203      	movs	r2, #3
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 0201 	and.w	r2, r3, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d017      	beq.n	8002a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d123      	bne.n	8002aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	69b9      	ldr	r1, [r7, #24]
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80a2 	beq.w	8002c26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b57      	ldr	r3, [pc, #348]	; (8002c44 <HAL_GPIO_Init+0x2e8>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	4a56      	ldr	r2, [pc, #344]	; (8002c44 <HAL_GPIO_Init+0x2e8>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	; 0x44
 8002af2:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <HAL_GPIO_Init+0x2e8>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afe:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_GPIO_Init+0x2ec>)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a49      	ldr	r2, [pc, #292]	; (8002c4c <HAL_GPIO_Init+0x2f0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x202>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a48      	ldr	r2, [pc, #288]	; (8002c50 <HAL_GPIO_Init+0x2f4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x1fe>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a47      	ldr	r2, [pc, #284]	; (8002c54 <HAL_GPIO_Init+0x2f8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x1fa>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a46      	ldr	r2, [pc, #280]	; (8002c58 <HAL_GPIO_Init+0x2fc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x1f6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a45      	ldr	r2, [pc, #276]	; (8002c5c <HAL_GPIO_Init+0x300>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x1f2>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e008      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b4e:	2307      	movs	r3, #7
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b52:	2303      	movs	r3, #3
 8002b54:	e004      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x204>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f002 0203 	and.w	r2, r2, #3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b70:	4935      	ldr	r1, [pc, #212]	; (8002c48 <HAL_GPIO_Init+0x2ec>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ba2:	4a2f      	ldr	r2, [pc, #188]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bcc:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bfc:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c20:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	f67f aea2 	bls.w	8002978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40020800 	.word	0x40020800
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40013c00 	.word	0x40013c00

08002c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
 8002c70:	4613      	mov	r3, r2
 8002c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c80:	e003      	b.n	8002c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	041a      	lsls	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e264      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d075      	beq.n	8002da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cb6:	4ba3      	ldr	r3, [pc, #652]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d00c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4ba0      	ldr	r3, [pc, #640]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4b9d      	ldr	r3, [pc, #628]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cda:	d10b      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	4b99      	ldr	r3, [pc, #612]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d05b      	beq.n	8002da0 <HAL_RCC_OscConfig+0x108>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d157      	bne.n	8002da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e23f      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x74>
 8002cfe:	4b91      	ldr	r3, [pc, #580]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a90      	ldr	r2, [pc, #576]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e01d      	b.n	8002d48 <HAL_RCC_OscConfig+0xb0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x98>
 8002d16:	4b8b      	ldr	r3, [pc, #556]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a8a      	ldr	r2, [pc, #552]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b88      	ldr	r3, [pc, #544]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a87      	ldr	r2, [pc, #540]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0xb0>
 8002d30:	4b84      	ldr	r3, [pc, #528]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a83      	ldr	r2, [pc, #524]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b81      	ldr	r3, [pc, #516]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a80      	ldr	r2, [pc, #512]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7ff f946 	bl	8001fe0 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d58:	f7ff f942 	bl	8001fe0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e204      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0xc0>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7ff f932 	bl	8001fe0 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d80:	f7ff f92e 	bl	8001fe0 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e1f0      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	4b6c      	ldr	r3, [pc, #432]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0xe8>
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d063      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dae:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b62      	ldr	r3, [pc, #392]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d11c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d116      	bne.n	8002e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_RCC_OscConfig+0x152>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e1c4      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4b56      	ldr	r3, [pc, #344]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4952      	ldr	r1, [pc, #328]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	e03a      	b.n	8002e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e08:	4b4f      	ldr	r3, [pc, #316]	; (8002f48 <HAL_RCC_OscConfig+0x2b0>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7ff f8e7 	bl	8001fe0 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e16:	f7ff f8e3 	bl	8001fe0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1a5      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	4b46      	ldr	r3, [pc, #280]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e34:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4940      	ldr	r1, [pc, #256]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	e015      	b.n	8002e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4a:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <HAL_RCC_OscConfig+0x2b0>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7ff f8c6 	bl	8001fe0 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e58:	f7ff f8c2 	bl	8001fe0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e184      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d030      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8a:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_RCC_OscConfig+0x2b4>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7ff f8a6 	bl	8001fe0 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e98:	f7ff f8a2 	bl	8001fe0 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e164      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x200>
 8002eb6:	e015      	b.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb8:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCC_OscConfig+0x2b4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7ff f88f 	bl	8001fe0 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7ff f88b 	bl	8001fe0 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e14d      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f0      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80a0 	beq.w	8003032 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f10:	6413      	str	r3, [r2, #64]	; 0x40
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x2b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d121      	bne.n	8002f72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <HAL_RCC_OscConfig+0x2b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <HAL_RCC_OscConfig+0x2b8>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3a:	f7ff f851 	bl	8001fe0 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	e011      	b.n	8002f66 <HAL_RCC_OscConfig+0x2ce>
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	42470000 	.word	0x42470000
 8002f4c:	42470e80 	.word	0x42470e80
 8002f50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7ff f844 	bl	8001fe0 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e106      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b85      	ldr	r3, [pc, #532]	; (800317c <HAL_RCC_OscConfig+0x4e4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d106      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2f0>
 8002f7a:	4b81      	ldr	r3, [pc, #516]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a80      	ldr	r2, [pc, #512]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
 8002f86:	e01c      	b.n	8002fc2 <HAL_RCC_OscConfig+0x32a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d10c      	bne.n	8002faa <HAL_RCC_OscConfig+0x312>
 8002f90:	4b7b      	ldr	r3, [pc, #492]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a7a      	ldr	r2, [pc, #488]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002f96:	f043 0304 	orr.w	r3, r3, #4
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9c:	4b78      	ldr	r3, [pc, #480]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4a77      	ldr	r2, [pc, #476]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa8:	e00b      	b.n	8002fc2 <HAL_RCC_OscConfig+0x32a>
 8002faa:	4b75      	ldr	r3, [pc, #468]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a74      	ldr	r2, [pc, #464]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb6:	4b72      	ldr	r3, [pc, #456]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a71      	ldr	r2, [pc, #452]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d015      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fca:	f7ff f809 	bl	8001fe0 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7ff f805 	bl	8001fe0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0c5      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	4b65      	ldr	r3, [pc, #404]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ee      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x33a>
 8002ff4:	e014      	b.n	8003020 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fff3 	bl	8001fe0 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe ffef 	bl	8001fe0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0af      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003014:	4b5a      	ldr	r3, [pc, #360]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ee      	bne.n	8002ffe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003026:	4b56      	ldr	r3, [pc, #344]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a55      	ldr	r2, [pc, #340]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 800302c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 809b 	beq.w	8003172 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d05c      	beq.n	8003102 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d141      	bne.n	80030d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003050:	4b4c      	ldr	r3, [pc, #304]	; (8003184 <HAL_RCC_OscConfig+0x4ec>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fe ffc3 	bl	8001fe0 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305e:	f7fe ffbf 	bl	8001fe0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e081      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003070:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	019b      	lsls	r3, r3, #6
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	3b01      	subs	r3, #1
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	061b      	lsls	r3, r3, #24
 80030a0:	4937      	ldr	r1, [pc, #220]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <HAL_RCC_OscConfig+0x4ec>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe ff98 	bl	8001fe0 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe ff94 	bl	8001fe0 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e056      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x41c>
 80030d2:	e04e      	b.n	8003172 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d4:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_OscConfig+0x4ec>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fe ff81 	bl	8001fe0 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe ff7d 	bl	8001fe0 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e03f      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f4:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x44a>
 8003100:	e037      	b.n	8003172 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e032      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <HAL_RCC_OscConfig+0x4e8>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d028      	beq.n	800316e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d121      	bne.n	800316e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d11a      	bne.n	800316e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800313e:	4013      	ands	r3, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003144:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003146:	4293      	cmp	r3, r2
 8003148:	d111      	bne.n	800316e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	3b01      	subs	r3, #1
 8003158:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d107      	bne.n	800316e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40007000 	.word	0x40007000
 8003180:	40023800 	.word	0x40023800
 8003184:	42470060 	.word	0x42470060

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0cc      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b68      	ldr	r3, [pc, #416]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d90c      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b65      	ldr	r3, [pc, #404]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b8      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494d      	ldr	r1, [pc, #308]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d044      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d119      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d003      	beq.n	8003246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e067      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4934      	ldr	r1, [pc, #208]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fe feb2 	bl	8001fe0 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fe feae 	bl	8001fe0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e04f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d20c      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e032      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490e      	ldr	r1, [pc, #56]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800330e:	f000 f821 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	490a      	ldr	r1, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fe12 	bl	8001f58 <HAL_InitTick>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023c00 	.word	0x40023c00
 8003344:	40023800 	.word	0x40023800
 8003348:	080172b0 	.word	0x080172b0
 800334c:	20000000 	.word	0x20000000
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	b5b0      	push	{r4, r5, r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800335a:	2100      	movs	r1, #0
 800335c:	6079      	str	r1, [r7, #4]
 800335e:	2100      	movs	r1, #0
 8003360:	60f9      	str	r1, [r7, #12]
 8003362:	2100      	movs	r1, #0
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003366:	2100      	movs	r1, #0
 8003368:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336a:	4952      	ldr	r1, [pc, #328]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800336c:	6889      	ldr	r1, [r1, #8]
 800336e:	f001 010c 	and.w	r1, r1, #12
 8003372:	2908      	cmp	r1, #8
 8003374:	d00d      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x3e>
 8003376:	2908      	cmp	r1, #8
 8003378:	f200 8094 	bhi.w	80034a4 <HAL_RCC_GetSysClockFreq+0x150>
 800337c:	2900      	cmp	r1, #0
 800337e:	d002      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x32>
 8003380:	2904      	cmp	r1, #4
 8003382:	d003      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x38>
 8003384:	e08e      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003386:	4b4c      	ldr	r3, [pc, #304]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003388:	60bb      	str	r3, [r7, #8]
       break;
 800338a:	e08e      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800338c:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <HAL_RCC_GetSysClockFreq+0x168>)
 800338e:	60bb      	str	r3, [r7, #8]
      break;
 8003390:	e08b      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003392:	4948      	ldr	r1, [pc, #288]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003394:	6849      	ldr	r1, [r1, #4]
 8003396:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800339a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800339c:	4945      	ldr	r1, [pc, #276]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800339e:	6849      	ldr	r1, [r1, #4]
 80033a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80033a4:	2900      	cmp	r1, #0
 80033a6:	d024      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a8:	4942      	ldr	r1, [pc, #264]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80033aa:	6849      	ldr	r1, [r1, #4]
 80033ac:	0989      	lsrs	r1, r1, #6
 80033ae:	4608      	mov	r0, r1
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80033b8:	f04f 0500 	mov.w	r5, #0
 80033bc:	ea00 0204 	and.w	r2, r0, r4
 80033c0:	ea01 0305 	and.w	r3, r1, r5
 80033c4:	493d      	ldr	r1, [pc, #244]	; (80034bc <HAL_RCC_GetSysClockFreq+0x168>)
 80033c6:	fb01 f003 	mul.w	r0, r1, r3
 80033ca:	2100      	movs	r1, #0
 80033cc:	fb01 f102 	mul.w	r1, r1, r2
 80033d0:	1844      	adds	r4, r0, r1
 80033d2:	493a      	ldr	r1, [pc, #232]	; (80034bc <HAL_RCC_GetSysClockFreq+0x168>)
 80033d4:	fba2 0101 	umull	r0, r1, r2, r1
 80033d8:	1863      	adds	r3, r4, r1
 80033da:	4619      	mov	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	461a      	mov	r2, r3
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	f7fc ff54 	bl	8000290 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e04a      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f2:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	461a      	mov	r2, r3
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	ea02 0400 	and.w	r4, r2, r0
 800340a:	ea03 0501 	and.w	r5, r3, r1
 800340e:	4620      	mov	r0, r4
 8003410:	4629      	mov	r1, r5
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	014b      	lsls	r3, r1, #5
 800341c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003420:	0142      	lsls	r2, r0, #5
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	1b00      	subs	r0, r0, r4
 8003428:	eb61 0105 	sbc.w	r1, r1, r5
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	018b      	lsls	r3, r1, #6
 8003436:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800343a:	0182      	lsls	r2, r0, #6
 800343c:	1a12      	subs	r2, r2, r0
 800343e:	eb63 0301 	sbc.w	r3, r3, r1
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	00d9      	lsls	r1, r3, #3
 800344c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003450:	00d0      	lsls	r0, r2, #3
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	1912      	adds	r2, r2, r4
 8003458:	eb45 0303 	adc.w	r3, r5, r3
 800345c:	f04f 0000 	mov.w	r0, #0
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	0299      	lsls	r1, r3, #10
 8003466:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800346a:	0290      	lsls	r0, r2, #10
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	461a      	mov	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fc ff08 	bl	8000290 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4613      	mov	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	3301      	adds	r3, #1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	60bb      	str	r3, [r7, #8]
      break;
 80034a2:	e002      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80034a6:	60bb      	str	r3, [r7, #8]
      break;
 80034a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034aa:	68bb      	ldr	r3, [r7, #8]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bdb0      	pop	{r4, r5, r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	017d7840 	.word	0x017d7840

080034c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0a9b      	lsrs	r3, r3, #10
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4903      	ldr	r1, [pc, #12]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	080172c0 	.word	0x080172c0

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003504:	f7ff ffdc 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0b5b      	lsrs	r3, r3, #13
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4903      	ldr	r1, [pc, #12]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	080172c0 	.word	0x080172c0

08003528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e07b      	b.n	8003632 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	d108      	bne.n	8003554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800354a:	d009      	beq.n	8003560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	61da      	str	r2, [r3, #28]
 8003552:	e005      	b.n	8003560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe fac2 	bl	8001b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	ea42 0103 	orr.w	r1, r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	f003 0104 	and.w	r1, r3, #4
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f003 0210 	and.w	r2, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003620:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e03f      	b.n	80036cc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fe fb79 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2224      	movs	r2, #36	; 0x24
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800367c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fc7a 	bl	8003f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003692:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b0ba      	sub	sp, #232	; 0xe8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10f      	bne.n	800373a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_UART_IRQHandler+0x66>
 8003726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fb65 	bl	8003e02 <UART_Receive_IT>
      return;
 8003738:	e256      	b.n	8003be8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800373a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80de 	beq.w	8003900 <HAL_UART_IRQHandler+0x22c>
 8003744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d106      	bne.n	800375e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003754:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80d1 	beq.w	8003900 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_UART_IRQHandler+0xae>
 800376a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f043 0201 	orr.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_UART_IRQHandler+0xd2>
 800378e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f043 0202 	orr.w	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_UART_IRQHandler+0xf6>
 80037b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d011      	beq.n	80037fa <HAL_UART_IRQHandler+0x126>
 80037d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f043 0208 	orr.w	r2, r3, #8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 81ed 	beq.w	8003bde <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_UART_IRQHandler+0x14e>
 8003810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 faf0 	bl	8003e02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <HAL_UART_IRQHandler+0x17a>
 8003846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d04f      	beq.n	80038ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f9f8 	bl	8003c44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d141      	bne.n	80038e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3314      	adds	r3, #20
 8003868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800387c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3314      	adds	r3, #20
 800388a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800388e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800389a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1d9      	bne.n	8003862 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d013      	beq.n	80038de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	4a7d      	ldr	r2, [pc, #500]	; (8003ab0 <HAL_UART_IRQHandler+0x3dc>)
 80038bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fdec 	bl	80024a0 <HAL_DMA_Abort_IT>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d8:	4610      	mov	r0, r2
 80038da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	e00e      	b.n	80038fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f99a 	bl	8003c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	e00a      	b.n	80038fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f996 	bl	8003c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e006      	b.n	80038fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f992 	bl	8003c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038fa:	e170      	b.n	8003bde <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	bf00      	nop
    return;
 80038fe:	e16e      	b.n	8003bde <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 814a 	bne.w	8003b9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800390a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8143 	beq.w	8003b9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 813c 	beq.w	8003b9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	f040 80b4 	bne.w	8003ab4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003958:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8140 	beq.w	8003be2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800396a:	429a      	cmp	r2, r3
 800396c:	f080 8139 	bcs.w	8003be2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003976:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003982:	f000 8088 	beq.w	8003a96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800399c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1d9      	bne.n	8003986 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3314      	adds	r3, #20
 80039d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3314      	adds	r3, #20
 80039f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a02:	e841 2300 	strex	r3, r2, [r1]
 8003a06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e1      	bne.n	80039d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3314      	adds	r3, #20
 8003a14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3314      	adds	r3, #20
 8003a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e3      	bne.n	8003a0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a66:	f023 0310 	bic.w	r3, r3, #16
 8003a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a78:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e3      	bne.n	8003a54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe fc95 	bl	80023c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f8c0 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aac:	e099      	b.n	8003be2 <HAL_UART_IRQHandler+0x50e>
 8003aae:	bf00      	nop
 8003ab0:	08003d0b 	.word	0x08003d0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 808b 	beq.w	8003be6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ad0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8086 	beq.w	8003be6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003afe:	647a      	str	r2, [r7, #68]	; 0x44
 8003b00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e3      	bne.n	8003ada <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3314      	adds	r3, #20
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	623b      	str	r3, [r7, #32]
   return(result);
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3314      	adds	r3, #20
 8003b32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b36:	633a      	str	r2, [r7, #48]	; 0x30
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e3      	bne.n	8003b12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0310 	bic.w	r3, r3, #16
 8003b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b7c:	61fa      	str	r2, [r7, #28]
 8003b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	69b9      	ldr	r1, [r7, #24]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	617b      	str	r3, [r7, #20]
   return(result);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e3      	bne.n	8003b58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f848 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b9c:	e023      	b.n	8003be6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_UART_IRQHandler+0x4ea>
 8003baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f8bb 	bl	8003d32 <UART_Transmit_IT>
    return;
 8003bbc:	e014      	b.n	8003be8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00e      	beq.n	8003be8 <HAL_UART_IRQHandler+0x514>
 8003bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8fb 	bl	8003dd2 <UART_EndTransmit_IT>
    return;
 8003bdc:	e004      	b.n	8003be8 <HAL_UART_IRQHandler+0x514>
    return;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <HAL_UART_IRQHandler+0x514>
      return;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <HAL_UART_IRQHandler+0x514>
      return;
 8003be6:	bf00      	nop
  }
}
 8003be8:	37e8      	adds	r7, #232	; 0xe8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop

08003bf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b095      	sub	sp, #84	; 0x54
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	330c      	adds	r3, #12
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c6c:	643a      	str	r2, [r7, #64]	; 0x40
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e5      	bne.n	8003c4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3314      	adds	r3, #20
 8003c86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ca0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e5      	bne.n	8003c80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d119      	bne.n	8003cf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f023 0310 	bic.w	r3, r3, #16
 8003cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cdc:	61ba      	str	r2, [r7, #24]
 8003cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6979      	ldr	r1, [r7, #20]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cfe:	bf00      	nop
 8003d00:	3754      	adds	r7, #84	; 0x54
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff ff77 	bl	8003c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b21      	cmp	r3, #33	; 0x21
 8003d44:	d13e      	bne.n	8003dc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4e:	d114      	bne.n	8003d7a <UART_Transmit_IT+0x48>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d110      	bne.n	8003d7a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	621a      	str	r2, [r3, #32]
 8003d78:	e008      	b.n	8003d8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	1c59      	adds	r1, r3, #1
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6211      	str	r1, [r2, #32]
 8003d84:	781a      	ldrb	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10f      	bne.n	8003dc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fefc 	bl	8003bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b08c      	sub	sp, #48	; 0x30
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b22      	cmp	r3, #34	; 0x22
 8003e14:	f040 80ab 	bne.w	8003f6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e20:	d117      	bne.n	8003e52 <UART_Receive_IT+0x50>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d113      	bne.n	8003e52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	1c9a      	adds	r2, r3, #2
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e50:	e026      	b.n	8003ea0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e64:	d007      	beq.n	8003e76 <UART_Receive_IT+0x74>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <UART_Receive_IT+0x82>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	e008      	b.n	8003e96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4619      	mov	r1, r3
 8003eae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d15a      	bne.n	8003f6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0220 	bic.w	r2, r2, #32
 8003ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d135      	bne.n	8003f60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f023 0310 	bic.w	r3, r3, #16
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	330c      	adds	r3, #12
 8003f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1a:	623a      	str	r2, [r7, #32]
 8003f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	69f9      	ldr	r1, [r7, #28]
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d10a      	bne.n	8003f52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fe67 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
 8003f5e:	e002      	b.n	8003f66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff fe4f 	bl	8003c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e002      	b.n	8003f70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
  }
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3730      	adds	r7, #48	; 0x30
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7c:	b09f      	sub	sp, #124	; 0x7c
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8e:	68d9      	ldr	r1, [r3, #12]
 8003f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	ea40 0301 	orr.w	r3, r0, r1
 8003f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fbc:	f021 010c 	bic.w	r1, r1, #12
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	6999      	ldr	r1, [r3, #24]
 8003fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	ea40 0301 	orr.w	r3, r0, r1
 8003fe0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4bc5      	ldr	r3, [pc, #788]	; (80042fc <UART_SetConfig+0x384>)
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d004      	beq.n	8003ff6 <UART_SetConfig+0x7e>
 8003fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4bc3      	ldr	r3, [pc, #780]	; (8004300 <UART_SetConfig+0x388>)
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d103      	bne.n	8003ffe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ff6:	f7ff fa83 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8003ffa:	6778      	str	r0, [r7, #116]	; 0x74
 8003ffc:	e002      	b.n	8004004 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ffe:	f7ff fa6b 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8004002:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400c:	f040 80b6 	bne.w	800417c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004012:	461c      	mov	r4, r3
 8004014:	f04f 0500 	mov.w	r5, #0
 8004018:	4622      	mov	r2, r4
 800401a:	462b      	mov	r3, r5
 800401c:	1891      	adds	r1, r2, r2
 800401e:	6439      	str	r1, [r7, #64]	; 0x40
 8004020:	415b      	adcs	r3, r3
 8004022:	647b      	str	r3, [r7, #68]	; 0x44
 8004024:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004028:	1912      	adds	r2, r2, r4
 800402a:	eb45 0303 	adc.w	r3, r5, r3
 800402e:	f04f 0000 	mov.w	r0, #0
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	00d9      	lsls	r1, r3, #3
 8004038:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800403c:	00d0      	lsls	r0, r2, #3
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	1911      	adds	r1, r2, r4
 8004044:	6639      	str	r1, [r7, #96]	; 0x60
 8004046:	416b      	adcs	r3, r5
 8004048:	667b      	str	r3, [r7, #100]	; 0x64
 800404a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	461a      	mov	r2, r3
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	1891      	adds	r1, r2, r2
 8004056:	63b9      	str	r1, [r7, #56]	; 0x38
 8004058:	415b      	adcs	r3, r3
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800405c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004060:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004064:	f7fc f914 	bl	8000290 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4ba5      	ldr	r3, [pc, #660]	; (8004304 <UART_SetConfig+0x38c>)
 800406e:	fba3 2302 	umull	r2, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	011e      	lsls	r6, r3, #4
 8004076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004078:	461c      	mov	r4, r3
 800407a:	f04f 0500 	mov.w	r5, #0
 800407e:	4622      	mov	r2, r4
 8004080:	462b      	mov	r3, r5
 8004082:	1891      	adds	r1, r2, r2
 8004084:	6339      	str	r1, [r7, #48]	; 0x30
 8004086:	415b      	adcs	r3, r3
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
 800408a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800408e:	1912      	adds	r2, r2, r4
 8004090:	eb45 0303 	adc.w	r3, r5, r3
 8004094:	f04f 0000 	mov.w	r0, #0
 8004098:	f04f 0100 	mov.w	r1, #0
 800409c:	00d9      	lsls	r1, r3, #3
 800409e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040a2:	00d0      	lsls	r0, r2, #3
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	1911      	adds	r1, r2, r4
 80040aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80040ac:	416b      	adcs	r3, r5
 80040ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	461a      	mov	r2, r3
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	1891      	adds	r1, r2, r2
 80040bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80040be:	415b      	adcs	r3, r3
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80040ca:	f7fc f8e1 	bl	8000290 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4b8c      	ldr	r3, [pc, #560]	; (8004304 <UART_SetConfig+0x38c>)
 80040d4:	fba3 1302 	umull	r1, r3, r3, r2
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	2164      	movs	r1, #100	; 0x64
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	3332      	adds	r3, #50	; 0x32
 80040e6:	4a87      	ldr	r2, [pc, #540]	; (8004304 <UART_SetConfig+0x38c>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040f4:	441e      	add	r6, r3
 80040f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f8:	4618      	mov	r0, r3
 80040fa:	f04f 0100 	mov.w	r1, #0
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	1894      	adds	r4, r2, r2
 8004104:	623c      	str	r4, [r7, #32]
 8004106:	415b      	adcs	r3, r3
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
 800410a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800410e:	1812      	adds	r2, r2, r0
 8004110:	eb41 0303 	adc.w	r3, r1, r3
 8004114:	f04f 0400 	mov.w	r4, #0
 8004118:	f04f 0500 	mov.w	r5, #0
 800411c:	00dd      	lsls	r5, r3, #3
 800411e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004122:	00d4      	lsls	r4, r2, #3
 8004124:	4622      	mov	r2, r4
 8004126:	462b      	mov	r3, r5
 8004128:	1814      	adds	r4, r2, r0
 800412a:	653c      	str	r4, [r7, #80]	; 0x50
 800412c:	414b      	adcs	r3, r1
 800412e:	657b      	str	r3, [r7, #84]	; 0x54
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	461a      	mov	r2, r3
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	1891      	adds	r1, r2, r2
 800413c:	61b9      	str	r1, [r7, #24]
 800413e:	415b      	adcs	r3, r3
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004146:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800414a:	f7fc f8a1 	bl	8000290 <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4b6c      	ldr	r3, [pc, #432]	; (8004304 <UART_SetConfig+0x38c>)
 8004154:	fba3 1302 	umull	r1, r3, r3, r2
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	2164      	movs	r1, #100	; 0x64
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	3332      	adds	r3, #50	; 0x32
 8004166:	4a67      	ldr	r2, [pc, #412]	; (8004304 <UART_SetConfig+0x38c>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	f003 0207 	and.w	r2, r3, #7
 8004172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4432      	add	r2, r6
 8004178:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800417a:	e0b9      	b.n	80042f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800417c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800417e:	461c      	mov	r4, r3
 8004180:	f04f 0500 	mov.w	r5, #0
 8004184:	4622      	mov	r2, r4
 8004186:	462b      	mov	r3, r5
 8004188:	1891      	adds	r1, r2, r2
 800418a:	6139      	str	r1, [r7, #16]
 800418c:	415b      	adcs	r3, r3
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004194:	1912      	adds	r2, r2, r4
 8004196:	eb45 0303 	adc.w	r3, r5, r3
 800419a:	f04f 0000 	mov.w	r0, #0
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	00d9      	lsls	r1, r3, #3
 80041a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041a8:	00d0      	lsls	r0, r2, #3
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	eb12 0804 	adds.w	r8, r2, r4
 80041b2:	eb43 0905 	adc.w	r9, r3, r5
 80041b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	008b      	lsls	r3, r1, #2
 80041ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ce:	0082      	lsls	r2, r0, #2
 80041d0:	4640      	mov	r0, r8
 80041d2:	4649      	mov	r1, r9
 80041d4:	f7fc f85c 	bl	8000290 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4b49      	ldr	r3, [pc, #292]	; (8004304 <UART_SetConfig+0x38c>)
 80041de:	fba3 2302 	umull	r2, r3, r3, r2
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	011e      	lsls	r6, r3, #4
 80041e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e8:	4618      	mov	r0, r3
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	1894      	adds	r4, r2, r2
 80041f4:	60bc      	str	r4, [r7, #8]
 80041f6:	415b      	adcs	r3, r3
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041fe:	1812      	adds	r2, r2, r0
 8004200:	eb41 0303 	adc.w	r3, r1, r3
 8004204:	f04f 0400 	mov.w	r4, #0
 8004208:	f04f 0500 	mov.w	r5, #0
 800420c:	00dd      	lsls	r5, r3, #3
 800420e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004212:	00d4      	lsls	r4, r2, #3
 8004214:	4622      	mov	r2, r4
 8004216:	462b      	mov	r3, r5
 8004218:	1814      	adds	r4, r2, r0
 800421a:	64bc      	str	r4, [r7, #72]	; 0x48
 800421c:	414b      	adcs	r3, r1
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4618      	mov	r0, r3
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	008b      	lsls	r3, r1, #2
 8004234:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004238:	0082      	lsls	r2, r0, #2
 800423a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800423e:	f7fc f827 	bl	8000290 <__aeabi_uldivmod>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <UART_SetConfig+0x38c>)
 8004248:	fba3 1302 	umull	r1, r3, r3, r2
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	2164      	movs	r1, #100	; 0x64
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	3332      	adds	r3, #50	; 0x32
 800425a:	4a2a      	ldr	r2, [pc, #168]	; (8004304 <UART_SetConfig+0x38c>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004266:	441e      	add	r6, r3
 8004268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800426a:	4618      	mov	r0, r3
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	1894      	adds	r4, r2, r2
 8004276:	603c      	str	r4, [r7, #0]
 8004278:	415b      	adcs	r3, r3
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004280:	1812      	adds	r2, r2, r0
 8004282:	eb41 0303 	adc.w	r3, r1, r3
 8004286:	f04f 0400 	mov.w	r4, #0
 800428a:	f04f 0500 	mov.w	r5, #0
 800428e:	00dd      	lsls	r5, r3, #3
 8004290:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004294:	00d4      	lsls	r4, r2, #3
 8004296:	4622      	mov	r2, r4
 8004298:	462b      	mov	r3, r5
 800429a:	eb12 0a00 	adds.w	sl, r2, r0
 800429e:	eb43 0b01 	adc.w	fp, r3, r1
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f04f 0100 	mov.w	r1, #0
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	008b      	lsls	r3, r1, #2
 80042b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042ba:	0082      	lsls	r2, r0, #2
 80042bc:	4650      	mov	r0, sl
 80042be:	4659      	mov	r1, fp
 80042c0:	f7fb ffe6 	bl	8000290 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <UART_SetConfig+0x38c>)
 80042ca:	fba3 1302 	umull	r1, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2164      	movs	r1, #100	; 0x64
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	3332      	adds	r3, #50	; 0x32
 80042dc:	4a09      	ldr	r2, [pc, #36]	; (8004304 <UART_SetConfig+0x38c>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	f003 020f 	and.w	r2, r3, #15
 80042e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4432      	add	r2, r6
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	377c      	adds	r7, #124	; 0x7c
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fa:	bf00      	nop
 80042fc:	40011000 	.word	0x40011000
 8004300:	40011400 	.word	0x40011400
 8004304:	51eb851f 	.word	0x51eb851f

08004308 <__errno>:
 8004308:	4b01      	ldr	r3, [pc, #4]	; (8004310 <__errno+0x8>)
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	2000000c 	.word	0x2000000c

08004314 <__libc_init_array>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	4d0d      	ldr	r5, [pc, #52]	; (800434c <__libc_init_array+0x38>)
 8004318:	4c0d      	ldr	r4, [pc, #52]	; (8004350 <__libc_init_array+0x3c>)
 800431a:	1b64      	subs	r4, r4, r5
 800431c:	10a4      	asrs	r4, r4, #2
 800431e:	2600      	movs	r6, #0
 8004320:	42a6      	cmp	r6, r4
 8004322:	d109      	bne.n	8004338 <__libc_init_array+0x24>
 8004324:	4d0b      	ldr	r5, [pc, #44]	; (8004354 <__libc_init_array+0x40>)
 8004326:	4c0c      	ldr	r4, [pc, #48]	; (8004358 <__libc_init_array+0x44>)
 8004328:	f000 fc4e 	bl	8004bc8 <_init>
 800432c:	1b64      	subs	r4, r4, r5
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	2600      	movs	r6, #0
 8004332:	42a6      	cmp	r6, r4
 8004334:	d105      	bne.n	8004342 <__libc_init_array+0x2e>
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	f855 3b04 	ldr.w	r3, [r5], #4
 800433c:	4798      	blx	r3
 800433e:	3601      	adds	r6, #1
 8004340:	e7ee      	b.n	8004320 <__libc_init_array+0xc>
 8004342:	f855 3b04 	ldr.w	r3, [r5], #4
 8004346:	4798      	blx	r3
 8004348:	3601      	adds	r6, #1
 800434a:	e7f2      	b.n	8004332 <__libc_init_array+0x1e>
 800434c:	0801736c 	.word	0x0801736c
 8004350:	0801736c 	.word	0x0801736c
 8004354:	0801736c 	.word	0x0801736c
 8004358:	08017370 	.word	0x08017370

0800435c <memset>:
 800435c:	4402      	add	r2, r0
 800435e:	4603      	mov	r3, r0
 8004360:	4293      	cmp	r3, r2
 8004362:	d100      	bne.n	8004366 <memset+0xa>
 8004364:	4770      	bx	lr
 8004366:	f803 1b01 	strb.w	r1, [r3], #1
 800436a:	e7f9      	b.n	8004360 <memset+0x4>

0800436c <siprintf>:
 800436c:	b40e      	push	{r1, r2, r3}
 800436e:	b500      	push	{lr}
 8004370:	b09c      	sub	sp, #112	; 0x70
 8004372:	ab1d      	add	r3, sp, #116	; 0x74
 8004374:	9002      	str	r0, [sp, #8]
 8004376:	9006      	str	r0, [sp, #24]
 8004378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800437c:	4809      	ldr	r0, [pc, #36]	; (80043a4 <siprintf+0x38>)
 800437e:	9107      	str	r1, [sp, #28]
 8004380:	9104      	str	r1, [sp, #16]
 8004382:	4909      	ldr	r1, [pc, #36]	; (80043a8 <siprintf+0x3c>)
 8004384:	f853 2b04 	ldr.w	r2, [r3], #4
 8004388:	9105      	str	r1, [sp, #20]
 800438a:	6800      	ldr	r0, [r0, #0]
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	a902      	add	r1, sp, #8
 8004390:	f000 f912 	bl	80045b8 <_svfiprintf_r>
 8004394:	9b02      	ldr	r3, [sp, #8]
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	b01c      	add	sp, #112	; 0x70
 800439c:	f85d eb04 	ldr.w	lr, [sp], #4
 80043a0:	b003      	add	sp, #12
 80043a2:	4770      	bx	lr
 80043a4:	2000000c 	.word	0x2000000c
 80043a8:	ffff0208 	.word	0xffff0208

080043ac <_free_r>:
 80043ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ae:	2900      	cmp	r1, #0
 80043b0:	d048      	beq.n	8004444 <_free_r+0x98>
 80043b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b6:	9001      	str	r0, [sp, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f1a1 0404 	sub.w	r4, r1, #4
 80043be:	bfb8      	it	lt
 80043c0:	18e4      	addlt	r4, r4, r3
 80043c2:	f000 fbc7 	bl	8004b54 <__malloc_lock>
 80043c6:	4a20      	ldr	r2, [pc, #128]	; (8004448 <_free_r+0x9c>)
 80043c8:	9801      	ldr	r0, [sp, #4]
 80043ca:	6813      	ldr	r3, [r2, #0]
 80043cc:	4615      	mov	r5, r2
 80043ce:	b933      	cbnz	r3, 80043de <_free_r+0x32>
 80043d0:	6063      	str	r3, [r4, #4]
 80043d2:	6014      	str	r4, [r2, #0]
 80043d4:	b003      	add	sp, #12
 80043d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043da:	f000 bbc1 	b.w	8004b60 <__malloc_unlock>
 80043de:	42a3      	cmp	r3, r4
 80043e0:	d90b      	bls.n	80043fa <_free_r+0x4e>
 80043e2:	6821      	ldr	r1, [r4, #0]
 80043e4:	1862      	adds	r2, r4, r1
 80043e6:	4293      	cmp	r3, r2
 80043e8:	bf04      	itt	eq
 80043ea:	681a      	ldreq	r2, [r3, #0]
 80043ec:	685b      	ldreq	r3, [r3, #4]
 80043ee:	6063      	str	r3, [r4, #4]
 80043f0:	bf04      	itt	eq
 80043f2:	1852      	addeq	r2, r2, r1
 80043f4:	6022      	streq	r2, [r4, #0]
 80043f6:	602c      	str	r4, [r5, #0]
 80043f8:	e7ec      	b.n	80043d4 <_free_r+0x28>
 80043fa:	461a      	mov	r2, r3
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	b10b      	cbz	r3, 8004404 <_free_r+0x58>
 8004400:	42a3      	cmp	r3, r4
 8004402:	d9fa      	bls.n	80043fa <_free_r+0x4e>
 8004404:	6811      	ldr	r1, [r2, #0]
 8004406:	1855      	adds	r5, r2, r1
 8004408:	42a5      	cmp	r5, r4
 800440a:	d10b      	bne.n	8004424 <_free_r+0x78>
 800440c:	6824      	ldr	r4, [r4, #0]
 800440e:	4421      	add	r1, r4
 8004410:	1854      	adds	r4, r2, r1
 8004412:	42a3      	cmp	r3, r4
 8004414:	6011      	str	r1, [r2, #0]
 8004416:	d1dd      	bne.n	80043d4 <_free_r+0x28>
 8004418:	681c      	ldr	r4, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	6053      	str	r3, [r2, #4]
 800441e:	4421      	add	r1, r4
 8004420:	6011      	str	r1, [r2, #0]
 8004422:	e7d7      	b.n	80043d4 <_free_r+0x28>
 8004424:	d902      	bls.n	800442c <_free_r+0x80>
 8004426:	230c      	movs	r3, #12
 8004428:	6003      	str	r3, [r0, #0]
 800442a:	e7d3      	b.n	80043d4 <_free_r+0x28>
 800442c:	6825      	ldr	r5, [r4, #0]
 800442e:	1961      	adds	r1, r4, r5
 8004430:	428b      	cmp	r3, r1
 8004432:	bf04      	itt	eq
 8004434:	6819      	ldreq	r1, [r3, #0]
 8004436:	685b      	ldreq	r3, [r3, #4]
 8004438:	6063      	str	r3, [r4, #4]
 800443a:	bf04      	itt	eq
 800443c:	1949      	addeq	r1, r1, r5
 800443e:	6021      	streq	r1, [r4, #0]
 8004440:	6054      	str	r4, [r2, #4]
 8004442:	e7c7      	b.n	80043d4 <_free_r+0x28>
 8004444:	b003      	add	sp, #12
 8004446:	bd30      	pop	{r4, r5, pc}
 8004448:	20000090 	.word	0x20000090

0800444c <_malloc_r>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	1ccd      	adds	r5, r1, #3
 8004450:	f025 0503 	bic.w	r5, r5, #3
 8004454:	3508      	adds	r5, #8
 8004456:	2d0c      	cmp	r5, #12
 8004458:	bf38      	it	cc
 800445a:	250c      	movcc	r5, #12
 800445c:	2d00      	cmp	r5, #0
 800445e:	4606      	mov	r6, r0
 8004460:	db01      	blt.n	8004466 <_malloc_r+0x1a>
 8004462:	42a9      	cmp	r1, r5
 8004464:	d903      	bls.n	800446e <_malloc_r+0x22>
 8004466:	230c      	movs	r3, #12
 8004468:	6033      	str	r3, [r6, #0]
 800446a:	2000      	movs	r0, #0
 800446c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800446e:	f000 fb71 	bl	8004b54 <__malloc_lock>
 8004472:	4921      	ldr	r1, [pc, #132]	; (80044f8 <_malloc_r+0xac>)
 8004474:	680a      	ldr	r2, [r1, #0]
 8004476:	4614      	mov	r4, r2
 8004478:	b99c      	cbnz	r4, 80044a2 <_malloc_r+0x56>
 800447a:	4f20      	ldr	r7, [pc, #128]	; (80044fc <_malloc_r+0xb0>)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	b923      	cbnz	r3, 800448a <_malloc_r+0x3e>
 8004480:	4621      	mov	r1, r4
 8004482:	4630      	mov	r0, r6
 8004484:	f000 fb2c 	bl	8004ae0 <_sbrk_r>
 8004488:	6038      	str	r0, [r7, #0]
 800448a:	4629      	mov	r1, r5
 800448c:	4630      	mov	r0, r6
 800448e:	f000 fb27 	bl	8004ae0 <_sbrk_r>
 8004492:	1c43      	adds	r3, r0, #1
 8004494:	d123      	bne.n	80044de <_malloc_r+0x92>
 8004496:	230c      	movs	r3, #12
 8004498:	6033      	str	r3, [r6, #0]
 800449a:	4630      	mov	r0, r6
 800449c:	f000 fb60 	bl	8004b60 <__malloc_unlock>
 80044a0:	e7e3      	b.n	800446a <_malloc_r+0x1e>
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	1b5b      	subs	r3, r3, r5
 80044a6:	d417      	bmi.n	80044d8 <_malloc_r+0x8c>
 80044a8:	2b0b      	cmp	r3, #11
 80044aa:	d903      	bls.n	80044b4 <_malloc_r+0x68>
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	441c      	add	r4, r3
 80044b0:	6025      	str	r5, [r4, #0]
 80044b2:	e004      	b.n	80044be <_malloc_r+0x72>
 80044b4:	6863      	ldr	r3, [r4, #4]
 80044b6:	42a2      	cmp	r2, r4
 80044b8:	bf0c      	ite	eq
 80044ba:	600b      	streq	r3, [r1, #0]
 80044bc:	6053      	strne	r3, [r2, #4]
 80044be:	4630      	mov	r0, r6
 80044c0:	f000 fb4e 	bl	8004b60 <__malloc_unlock>
 80044c4:	f104 000b 	add.w	r0, r4, #11
 80044c8:	1d23      	adds	r3, r4, #4
 80044ca:	f020 0007 	bic.w	r0, r0, #7
 80044ce:	1ac2      	subs	r2, r0, r3
 80044d0:	d0cc      	beq.n	800446c <_malloc_r+0x20>
 80044d2:	1a1b      	subs	r3, r3, r0
 80044d4:	50a3      	str	r3, [r4, r2]
 80044d6:	e7c9      	b.n	800446c <_malloc_r+0x20>
 80044d8:	4622      	mov	r2, r4
 80044da:	6864      	ldr	r4, [r4, #4]
 80044dc:	e7cc      	b.n	8004478 <_malloc_r+0x2c>
 80044de:	1cc4      	adds	r4, r0, #3
 80044e0:	f024 0403 	bic.w	r4, r4, #3
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	d0e3      	beq.n	80044b0 <_malloc_r+0x64>
 80044e8:	1a21      	subs	r1, r4, r0
 80044ea:	4630      	mov	r0, r6
 80044ec:	f000 faf8 	bl	8004ae0 <_sbrk_r>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d1dd      	bne.n	80044b0 <_malloc_r+0x64>
 80044f4:	e7cf      	b.n	8004496 <_malloc_r+0x4a>
 80044f6:	bf00      	nop
 80044f8:	20000090 	.word	0x20000090
 80044fc:	20000094 	.word	0x20000094

08004500 <__ssputs_r>:
 8004500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004504:	688e      	ldr	r6, [r1, #8]
 8004506:	429e      	cmp	r6, r3
 8004508:	4682      	mov	sl, r0
 800450a:	460c      	mov	r4, r1
 800450c:	4690      	mov	r8, r2
 800450e:	461f      	mov	r7, r3
 8004510:	d838      	bhi.n	8004584 <__ssputs_r+0x84>
 8004512:	898a      	ldrh	r2, [r1, #12]
 8004514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004518:	d032      	beq.n	8004580 <__ssputs_r+0x80>
 800451a:	6825      	ldr	r5, [r4, #0]
 800451c:	6909      	ldr	r1, [r1, #16]
 800451e:	eba5 0901 	sub.w	r9, r5, r1
 8004522:	6965      	ldr	r5, [r4, #20]
 8004524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004528:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800452c:	3301      	adds	r3, #1
 800452e:	444b      	add	r3, r9
 8004530:	106d      	asrs	r5, r5, #1
 8004532:	429d      	cmp	r5, r3
 8004534:	bf38      	it	cc
 8004536:	461d      	movcc	r5, r3
 8004538:	0553      	lsls	r3, r2, #21
 800453a:	d531      	bpl.n	80045a0 <__ssputs_r+0xa0>
 800453c:	4629      	mov	r1, r5
 800453e:	f7ff ff85 	bl	800444c <_malloc_r>
 8004542:	4606      	mov	r6, r0
 8004544:	b950      	cbnz	r0, 800455c <__ssputs_r+0x5c>
 8004546:	230c      	movs	r3, #12
 8004548:	f8ca 3000 	str.w	r3, [sl]
 800454c:	89a3      	ldrh	r3, [r4, #12]
 800454e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004552:	81a3      	strh	r3, [r4, #12]
 8004554:	f04f 30ff 	mov.w	r0, #4294967295
 8004558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455c:	6921      	ldr	r1, [r4, #16]
 800455e:	464a      	mov	r2, r9
 8004560:	f000 fad0 	bl	8004b04 <memcpy>
 8004564:	89a3      	ldrh	r3, [r4, #12]
 8004566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800456a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456e:	81a3      	strh	r3, [r4, #12]
 8004570:	6126      	str	r6, [r4, #16]
 8004572:	6165      	str	r5, [r4, #20]
 8004574:	444e      	add	r6, r9
 8004576:	eba5 0509 	sub.w	r5, r5, r9
 800457a:	6026      	str	r6, [r4, #0]
 800457c:	60a5      	str	r5, [r4, #8]
 800457e:	463e      	mov	r6, r7
 8004580:	42be      	cmp	r6, r7
 8004582:	d900      	bls.n	8004586 <__ssputs_r+0x86>
 8004584:	463e      	mov	r6, r7
 8004586:	4632      	mov	r2, r6
 8004588:	6820      	ldr	r0, [r4, #0]
 800458a:	4641      	mov	r1, r8
 800458c:	f000 fac8 	bl	8004b20 <memmove>
 8004590:	68a3      	ldr	r3, [r4, #8]
 8004592:	6822      	ldr	r2, [r4, #0]
 8004594:	1b9b      	subs	r3, r3, r6
 8004596:	4432      	add	r2, r6
 8004598:	60a3      	str	r3, [r4, #8]
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	2000      	movs	r0, #0
 800459e:	e7db      	b.n	8004558 <__ssputs_r+0x58>
 80045a0:	462a      	mov	r2, r5
 80045a2:	f000 fae3 	bl	8004b6c <_realloc_r>
 80045a6:	4606      	mov	r6, r0
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d1e1      	bne.n	8004570 <__ssputs_r+0x70>
 80045ac:	6921      	ldr	r1, [r4, #16]
 80045ae:	4650      	mov	r0, sl
 80045b0:	f7ff fefc 	bl	80043ac <_free_r>
 80045b4:	e7c7      	b.n	8004546 <__ssputs_r+0x46>
	...

080045b8 <_svfiprintf_r>:
 80045b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045bc:	4698      	mov	r8, r3
 80045be:	898b      	ldrh	r3, [r1, #12]
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	b09d      	sub	sp, #116	; 0x74
 80045c4:	4607      	mov	r7, r0
 80045c6:	460d      	mov	r5, r1
 80045c8:	4614      	mov	r4, r2
 80045ca:	d50e      	bpl.n	80045ea <_svfiprintf_r+0x32>
 80045cc:	690b      	ldr	r3, [r1, #16]
 80045ce:	b963      	cbnz	r3, 80045ea <_svfiprintf_r+0x32>
 80045d0:	2140      	movs	r1, #64	; 0x40
 80045d2:	f7ff ff3b 	bl	800444c <_malloc_r>
 80045d6:	6028      	str	r0, [r5, #0]
 80045d8:	6128      	str	r0, [r5, #16]
 80045da:	b920      	cbnz	r0, 80045e6 <_svfiprintf_r+0x2e>
 80045dc:	230c      	movs	r3, #12
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295
 80045e4:	e0d1      	b.n	800478a <_svfiprintf_r+0x1d2>
 80045e6:	2340      	movs	r3, #64	; 0x40
 80045e8:	616b      	str	r3, [r5, #20]
 80045ea:	2300      	movs	r3, #0
 80045ec:	9309      	str	r3, [sp, #36]	; 0x24
 80045ee:	2320      	movs	r3, #32
 80045f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80045f8:	2330      	movs	r3, #48	; 0x30
 80045fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80047a4 <_svfiprintf_r+0x1ec>
 80045fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004602:	f04f 0901 	mov.w	r9, #1
 8004606:	4623      	mov	r3, r4
 8004608:	469a      	mov	sl, r3
 800460a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800460e:	b10a      	cbz	r2, 8004614 <_svfiprintf_r+0x5c>
 8004610:	2a25      	cmp	r2, #37	; 0x25
 8004612:	d1f9      	bne.n	8004608 <_svfiprintf_r+0x50>
 8004614:	ebba 0b04 	subs.w	fp, sl, r4
 8004618:	d00b      	beq.n	8004632 <_svfiprintf_r+0x7a>
 800461a:	465b      	mov	r3, fp
 800461c:	4622      	mov	r2, r4
 800461e:	4629      	mov	r1, r5
 8004620:	4638      	mov	r0, r7
 8004622:	f7ff ff6d 	bl	8004500 <__ssputs_r>
 8004626:	3001      	adds	r0, #1
 8004628:	f000 80aa 	beq.w	8004780 <_svfiprintf_r+0x1c8>
 800462c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800462e:	445a      	add	r2, fp
 8004630:	9209      	str	r2, [sp, #36]	; 0x24
 8004632:	f89a 3000 	ldrb.w	r3, [sl]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80a2 	beq.w	8004780 <_svfiprintf_r+0x1c8>
 800463c:	2300      	movs	r3, #0
 800463e:	f04f 32ff 	mov.w	r2, #4294967295
 8004642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004646:	f10a 0a01 	add.w	sl, sl, #1
 800464a:	9304      	str	r3, [sp, #16]
 800464c:	9307      	str	r3, [sp, #28]
 800464e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004652:	931a      	str	r3, [sp, #104]	; 0x68
 8004654:	4654      	mov	r4, sl
 8004656:	2205      	movs	r2, #5
 8004658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800465c:	4851      	ldr	r0, [pc, #324]	; (80047a4 <_svfiprintf_r+0x1ec>)
 800465e:	f7fb fdc7 	bl	80001f0 <memchr>
 8004662:	9a04      	ldr	r2, [sp, #16]
 8004664:	b9d8      	cbnz	r0, 800469e <_svfiprintf_r+0xe6>
 8004666:	06d0      	lsls	r0, r2, #27
 8004668:	bf44      	itt	mi
 800466a:	2320      	movmi	r3, #32
 800466c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004670:	0711      	lsls	r1, r2, #28
 8004672:	bf44      	itt	mi
 8004674:	232b      	movmi	r3, #43	; 0x2b
 8004676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800467a:	f89a 3000 	ldrb.w	r3, [sl]
 800467e:	2b2a      	cmp	r3, #42	; 0x2a
 8004680:	d015      	beq.n	80046ae <_svfiprintf_r+0xf6>
 8004682:	9a07      	ldr	r2, [sp, #28]
 8004684:	4654      	mov	r4, sl
 8004686:	2000      	movs	r0, #0
 8004688:	f04f 0c0a 	mov.w	ip, #10
 800468c:	4621      	mov	r1, r4
 800468e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004692:	3b30      	subs	r3, #48	; 0x30
 8004694:	2b09      	cmp	r3, #9
 8004696:	d94e      	bls.n	8004736 <_svfiprintf_r+0x17e>
 8004698:	b1b0      	cbz	r0, 80046c8 <_svfiprintf_r+0x110>
 800469a:	9207      	str	r2, [sp, #28]
 800469c:	e014      	b.n	80046c8 <_svfiprintf_r+0x110>
 800469e:	eba0 0308 	sub.w	r3, r0, r8
 80046a2:	fa09 f303 	lsl.w	r3, r9, r3
 80046a6:	4313      	orrs	r3, r2
 80046a8:	9304      	str	r3, [sp, #16]
 80046aa:	46a2      	mov	sl, r4
 80046ac:	e7d2      	b.n	8004654 <_svfiprintf_r+0x9c>
 80046ae:	9b03      	ldr	r3, [sp, #12]
 80046b0:	1d19      	adds	r1, r3, #4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	9103      	str	r1, [sp, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bfbb      	ittet	lt
 80046ba:	425b      	neglt	r3, r3
 80046bc:	f042 0202 	orrlt.w	r2, r2, #2
 80046c0:	9307      	strge	r3, [sp, #28]
 80046c2:	9307      	strlt	r3, [sp, #28]
 80046c4:	bfb8      	it	lt
 80046c6:	9204      	strlt	r2, [sp, #16]
 80046c8:	7823      	ldrb	r3, [r4, #0]
 80046ca:	2b2e      	cmp	r3, #46	; 0x2e
 80046cc:	d10c      	bne.n	80046e8 <_svfiprintf_r+0x130>
 80046ce:	7863      	ldrb	r3, [r4, #1]
 80046d0:	2b2a      	cmp	r3, #42	; 0x2a
 80046d2:	d135      	bne.n	8004740 <_svfiprintf_r+0x188>
 80046d4:	9b03      	ldr	r3, [sp, #12]
 80046d6:	1d1a      	adds	r2, r3, #4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	9203      	str	r2, [sp, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bfb8      	it	lt
 80046e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80046e4:	3402      	adds	r4, #2
 80046e6:	9305      	str	r3, [sp, #20]
 80046e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047b4 <_svfiprintf_r+0x1fc>
 80046ec:	7821      	ldrb	r1, [r4, #0]
 80046ee:	2203      	movs	r2, #3
 80046f0:	4650      	mov	r0, sl
 80046f2:	f7fb fd7d 	bl	80001f0 <memchr>
 80046f6:	b140      	cbz	r0, 800470a <_svfiprintf_r+0x152>
 80046f8:	2340      	movs	r3, #64	; 0x40
 80046fa:	eba0 000a 	sub.w	r0, r0, sl
 80046fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004702:	9b04      	ldr	r3, [sp, #16]
 8004704:	4303      	orrs	r3, r0
 8004706:	3401      	adds	r4, #1
 8004708:	9304      	str	r3, [sp, #16]
 800470a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800470e:	4826      	ldr	r0, [pc, #152]	; (80047a8 <_svfiprintf_r+0x1f0>)
 8004710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004714:	2206      	movs	r2, #6
 8004716:	f7fb fd6b 	bl	80001f0 <memchr>
 800471a:	2800      	cmp	r0, #0
 800471c:	d038      	beq.n	8004790 <_svfiprintf_r+0x1d8>
 800471e:	4b23      	ldr	r3, [pc, #140]	; (80047ac <_svfiprintf_r+0x1f4>)
 8004720:	bb1b      	cbnz	r3, 800476a <_svfiprintf_r+0x1b2>
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	3307      	adds	r3, #7
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	3308      	adds	r3, #8
 800472c:	9303      	str	r3, [sp, #12]
 800472e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004730:	4433      	add	r3, r6
 8004732:	9309      	str	r3, [sp, #36]	; 0x24
 8004734:	e767      	b.n	8004606 <_svfiprintf_r+0x4e>
 8004736:	fb0c 3202 	mla	r2, ip, r2, r3
 800473a:	460c      	mov	r4, r1
 800473c:	2001      	movs	r0, #1
 800473e:	e7a5      	b.n	800468c <_svfiprintf_r+0xd4>
 8004740:	2300      	movs	r3, #0
 8004742:	3401      	adds	r4, #1
 8004744:	9305      	str	r3, [sp, #20]
 8004746:	4619      	mov	r1, r3
 8004748:	f04f 0c0a 	mov.w	ip, #10
 800474c:	4620      	mov	r0, r4
 800474e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004752:	3a30      	subs	r2, #48	; 0x30
 8004754:	2a09      	cmp	r2, #9
 8004756:	d903      	bls.n	8004760 <_svfiprintf_r+0x1a8>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0c5      	beq.n	80046e8 <_svfiprintf_r+0x130>
 800475c:	9105      	str	r1, [sp, #20]
 800475e:	e7c3      	b.n	80046e8 <_svfiprintf_r+0x130>
 8004760:	fb0c 2101 	mla	r1, ip, r1, r2
 8004764:	4604      	mov	r4, r0
 8004766:	2301      	movs	r3, #1
 8004768:	e7f0      	b.n	800474c <_svfiprintf_r+0x194>
 800476a:	ab03      	add	r3, sp, #12
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	462a      	mov	r2, r5
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <_svfiprintf_r+0x1f8>)
 8004772:	a904      	add	r1, sp, #16
 8004774:	4638      	mov	r0, r7
 8004776:	f3af 8000 	nop.w
 800477a:	1c42      	adds	r2, r0, #1
 800477c:	4606      	mov	r6, r0
 800477e:	d1d6      	bne.n	800472e <_svfiprintf_r+0x176>
 8004780:	89ab      	ldrh	r3, [r5, #12]
 8004782:	065b      	lsls	r3, r3, #25
 8004784:	f53f af2c 	bmi.w	80045e0 <_svfiprintf_r+0x28>
 8004788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800478a:	b01d      	add	sp, #116	; 0x74
 800478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004790:	ab03      	add	r3, sp, #12
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	462a      	mov	r2, r5
 8004796:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <_svfiprintf_r+0x1f8>)
 8004798:	a904      	add	r1, sp, #16
 800479a:	4638      	mov	r0, r7
 800479c:	f000 f87a 	bl	8004894 <_printf_i>
 80047a0:	e7eb      	b.n	800477a <_svfiprintf_r+0x1c2>
 80047a2:	bf00      	nop
 80047a4:	080172d0 	.word	0x080172d0
 80047a8:	080172da 	.word	0x080172da
 80047ac:	00000000 	.word	0x00000000
 80047b0:	08004501 	.word	0x08004501
 80047b4:	080172d6 	.word	0x080172d6

080047b8 <_printf_common>:
 80047b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	4616      	mov	r6, r2
 80047be:	4699      	mov	r9, r3
 80047c0:	688a      	ldr	r2, [r1, #8]
 80047c2:	690b      	ldr	r3, [r1, #16]
 80047c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c8:	4293      	cmp	r3, r2
 80047ca:	bfb8      	it	lt
 80047cc:	4613      	movlt	r3, r2
 80047ce:	6033      	str	r3, [r6, #0]
 80047d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047d4:	4607      	mov	r7, r0
 80047d6:	460c      	mov	r4, r1
 80047d8:	b10a      	cbz	r2, 80047de <_printf_common+0x26>
 80047da:	3301      	adds	r3, #1
 80047dc:	6033      	str	r3, [r6, #0]
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	0699      	lsls	r1, r3, #26
 80047e2:	bf42      	ittt	mi
 80047e4:	6833      	ldrmi	r3, [r6, #0]
 80047e6:	3302      	addmi	r3, #2
 80047e8:	6033      	strmi	r3, [r6, #0]
 80047ea:	6825      	ldr	r5, [r4, #0]
 80047ec:	f015 0506 	ands.w	r5, r5, #6
 80047f0:	d106      	bne.n	8004800 <_printf_common+0x48>
 80047f2:	f104 0a19 	add.w	sl, r4, #25
 80047f6:	68e3      	ldr	r3, [r4, #12]
 80047f8:	6832      	ldr	r2, [r6, #0]
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	42ab      	cmp	r3, r5
 80047fe:	dc26      	bgt.n	800484e <_printf_common+0x96>
 8004800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004804:	1e13      	subs	r3, r2, #0
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	bf18      	it	ne
 800480a:	2301      	movne	r3, #1
 800480c:	0692      	lsls	r2, r2, #26
 800480e:	d42b      	bmi.n	8004868 <_printf_common+0xb0>
 8004810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004814:	4649      	mov	r1, r9
 8004816:	4638      	mov	r0, r7
 8004818:	47c0      	blx	r8
 800481a:	3001      	adds	r0, #1
 800481c:	d01e      	beq.n	800485c <_printf_common+0xa4>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	68e5      	ldr	r5, [r4, #12]
 8004822:	6832      	ldr	r2, [r6, #0]
 8004824:	f003 0306 	and.w	r3, r3, #6
 8004828:	2b04      	cmp	r3, #4
 800482a:	bf08      	it	eq
 800482c:	1aad      	subeq	r5, r5, r2
 800482e:	68a3      	ldr	r3, [r4, #8]
 8004830:	6922      	ldr	r2, [r4, #16]
 8004832:	bf0c      	ite	eq
 8004834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004838:	2500      	movne	r5, #0
 800483a:	4293      	cmp	r3, r2
 800483c:	bfc4      	itt	gt
 800483e:	1a9b      	subgt	r3, r3, r2
 8004840:	18ed      	addgt	r5, r5, r3
 8004842:	2600      	movs	r6, #0
 8004844:	341a      	adds	r4, #26
 8004846:	42b5      	cmp	r5, r6
 8004848:	d11a      	bne.n	8004880 <_printf_common+0xc8>
 800484a:	2000      	movs	r0, #0
 800484c:	e008      	b.n	8004860 <_printf_common+0xa8>
 800484e:	2301      	movs	r3, #1
 8004850:	4652      	mov	r2, sl
 8004852:	4649      	mov	r1, r9
 8004854:	4638      	mov	r0, r7
 8004856:	47c0      	blx	r8
 8004858:	3001      	adds	r0, #1
 800485a:	d103      	bne.n	8004864 <_printf_common+0xac>
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004864:	3501      	adds	r5, #1
 8004866:	e7c6      	b.n	80047f6 <_printf_common+0x3e>
 8004868:	18e1      	adds	r1, r4, r3
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	2030      	movs	r0, #48	; 0x30
 800486e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004872:	4422      	add	r2, r4
 8004874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800487c:	3302      	adds	r3, #2
 800487e:	e7c7      	b.n	8004810 <_printf_common+0x58>
 8004880:	2301      	movs	r3, #1
 8004882:	4622      	mov	r2, r4
 8004884:	4649      	mov	r1, r9
 8004886:	4638      	mov	r0, r7
 8004888:	47c0      	blx	r8
 800488a:	3001      	adds	r0, #1
 800488c:	d0e6      	beq.n	800485c <_printf_common+0xa4>
 800488e:	3601      	adds	r6, #1
 8004890:	e7d9      	b.n	8004846 <_printf_common+0x8e>
	...

08004894 <_printf_i>:
 8004894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	460c      	mov	r4, r1
 800489a:	4691      	mov	r9, r2
 800489c:	7e27      	ldrb	r7, [r4, #24]
 800489e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048a0:	2f78      	cmp	r7, #120	; 0x78
 80048a2:	4680      	mov	r8, r0
 80048a4:	469a      	mov	sl, r3
 80048a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048aa:	d807      	bhi.n	80048bc <_printf_i+0x28>
 80048ac:	2f62      	cmp	r7, #98	; 0x62
 80048ae:	d80a      	bhi.n	80048c6 <_printf_i+0x32>
 80048b0:	2f00      	cmp	r7, #0
 80048b2:	f000 80d8 	beq.w	8004a66 <_printf_i+0x1d2>
 80048b6:	2f58      	cmp	r7, #88	; 0x58
 80048b8:	f000 80a3 	beq.w	8004a02 <_printf_i+0x16e>
 80048bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048c4:	e03a      	b.n	800493c <_printf_i+0xa8>
 80048c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ca:	2b15      	cmp	r3, #21
 80048cc:	d8f6      	bhi.n	80048bc <_printf_i+0x28>
 80048ce:	a001      	add	r0, pc, #4	; (adr r0, 80048d4 <_printf_i+0x40>)
 80048d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048d4:	0800492d 	.word	0x0800492d
 80048d8:	08004941 	.word	0x08004941
 80048dc:	080048bd 	.word	0x080048bd
 80048e0:	080048bd 	.word	0x080048bd
 80048e4:	080048bd 	.word	0x080048bd
 80048e8:	080048bd 	.word	0x080048bd
 80048ec:	08004941 	.word	0x08004941
 80048f0:	080048bd 	.word	0x080048bd
 80048f4:	080048bd 	.word	0x080048bd
 80048f8:	080048bd 	.word	0x080048bd
 80048fc:	080048bd 	.word	0x080048bd
 8004900:	08004a4d 	.word	0x08004a4d
 8004904:	08004971 	.word	0x08004971
 8004908:	08004a2f 	.word	0x08004a2f
 800490c:	080048bd 	.word	0x080048bd
 8004910:	080048bd 	.word	0x080048bd
 8004914:	08004a6f 	.word	0x08004a6f
 8004918:	080048bd 	.word	0x080048bd
 800491c:	08004971 	.word	0x08004971
 8004920:	080048bd 	.word	0x080048bd
 8004924:	080048bd 	.word	0x080048bd
 8004928:	08004a37 	.word	0x08004a37
 800492c:	680b      	ldr	r3, [r1, #0]
 800492e:	1d1a      	adds	r2, r3, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	600a      	str	r2, [r1, #0]
 8004934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800493c:	2301      	movs	r3, #1
 800493e:	e0a3      	b.n	8004a88 <_printf_i+0x1f4>
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	6808      	ldr	r0, [r1, #0]
 8004944:	062e      	lsls	r6, r5, #24
 8004946:	f100 0304 	add.w	r3, r0, #4
 800494a:	d50a      	bpl.n	8004962 <_printf_i+0xce>
 800494c:	6805      	ldr	r5, [r0, #0]
 800494e:	600b      	str	r3, [r1, #0]
 8004950:	2d00      	cmp	r5, #0
 8004952:	da03      	bge.n	800495c <_printf_i+0xc8>
 8004954:	232d      	movs	r3, #45	; 0x2d
 8004956:	426d      	negs	r5, r5
 8004958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495c:	485e      	ldr	r0, [pc, #376]	; (8004ad8 <_printf_i+0x244>)
 800495e:	230a      	movs	r3, #10
 8004960:	e019      	b.n	8004996 <_printf_i+0x102>
 8004962:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004966:	6805      	ldr	r5, [r0, #0]
 8004968:	600b      	str	r3, [r1, #0]
 800496a:	bf18      	it	ne
 800496c:	b22d      	sxthne	r5, r5
 800496e:	e7ef      	b.n	8004950 <_printf_i+0xbc>
 8004970:	680b      	ldr	r3, [r1, #0]
 8004972:	6825      	ldr	r5, [r4, #0]
 8004974:	1d18      	adds	r0, r3, #4
 8004976:	6008      	str	r0, [r1, #0]
 8004978:	0628      	lsls	r0, r5, #24
 800497a:	d501      	bpl.n	8004980 <_printf_i+0xec>
 800497c:	681d      	ldr	r5, [r3, #0]
 800497e:	e002      	b.n	8004986 <_printf_i+0xf2>
 8004980:	0669      	lsls	r1, r5, #25
 8004982:	d5fb      	bpl.n	800497c <_printf_i+0xe8>
 8004984:	881d      	ldrh	r5, [r3, #0]
 8004986:	4854      	ldr	r0, [pc, #336]	; (8004ad8 <_printf_i+0x244>)
 8004988:	2f6f      	cmp	r7, #111	; 0x6f
 800498a:	bf0c      	ite	eq
 800498c:	2308      	moveq	r3, #8
 800498e:	230a      	movne	r3, #10
 8004990:	2100      	movs	r1, #0
 8004992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004996:	6866      	ldr	r6, [r4, #4]
 8004998:	60a6      	str	r6, [r4, #8]
 800499a:	2e00      	cmp	r6, #0
 800499c:	bfa2      	ittt	ge
 800499e:	6821      	ldrge	r1, [r4, #0]
 80049a0:	f021 0104 	bicge.w	r1, r1, #4
 80049a4:	6021      	strge	r1, [r4, #0]
 80049a6:	b90d      	cbnz	r5, 80049ac <_printf_i+0x118>
 80049a8:	2e00      	cmp	r6, #0
 80049aa:	d04d      	beq.n	8004a48 <_printf_i+0x1b4>
 80049ac:	4616      	mov	r6, r2
 80049ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80049b2:	fb03 5711 	mls	r7, r3, r1, r5
 80049b6:	5dc7      	ldrb	r7, [r0, r7]
 80049b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049bc:	462f      	mov	r7, r5
 80049be:	42bb      	cmp	r3, r7
 80049c0:	460d      	mov	r5, r1
 80049c2:	d9f4      	bls.n	80049ae <_printf_i+0x11a>
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d10b      	bne.n	80049e0 <_printf_i+0x14c>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	07df      	lsls	r7, r3, #31
 80049cc:	d508      	bpl.n	80049e0 <_printf_i+0x14c>
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	6861      	ldr	r1, [r4, #4]
 80049d2:	4299      	cmp	r1, r3
 80049d4:	bfde      	ittt	le
 80049d6:	2330      	movle	r3, #48	; 0x30
 80049d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049e0:	1b92      	subs	r2, r2, r6
 80049e2:	6122      	str	r2, [r4, #16]
 80049e4:	f8cd a000 	str.w	sl, [sp]
 80049e8:	464b      	mov	r3, r9
 80049ea:	aa03      	add	r2, sp, #12
 80049ec:	4621      	mov	r1, r4
 80049ee:	4640      	mov	r0, r8
 80049f0:	f7ff fee2 	bl	80047b8 <_printf_common>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d14c      	bne.n	8004a92 <_printf_i+0x1fe>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	b004      	add	sp, #16
 80049fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a02:	4835      	ldr	r0, [pc, #212]	; (8004ad8 <_printf_i+0x244>)
 8004a04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	680e      	ldr	r6, [r1, #0]
 8004a0c:	061f      	lsls	r7, r3, #24
 8004a0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a12:	600e      	str	r6, [r1, #0]
 8004a14:	d514      	bpl.n	8004a40 <_printf_i+0x1ac>
 8004a16:	07d9      	lsls	r1, r3, #31
 8004a18:	bf44      	itt	mi
 8004a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a1e:	6023      	strmi	r3, [r4, #0]
 8004a20:	b91d      	cbnz	r5, 8004a2a <_printf_i+0x196>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	f023 0320 	bic.w	r3, r3, #32
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	2310      	movs	r3, #16
 8004a2c:	e7b0      	b.n	8004990 <_printf_i+0xfc>
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	f043 0320 	orr.w	r3, r3, #32
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	2378      	movs	r3, #120	; 0x78
 8004a38:	4828      	ldr	r0, [pc, #160]	; (8004adc <_printf_i+0x248>)
 8004a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a3e:	e7e3      	b.n	8004a08 <_printf_i+0x174>
 8004a40:	065e      	lsls	r6, r3, #25
 8004a42:	bf48      	it	mi
 8004a44:	b2ad      	uxthmi	r5, r5
 8004a46:	e7e6      	b.n	8004a16 <_printf_i+0x182>
 8004a48:	4616      	mov	r6, r2
 8004a4a:	e7bb      	b.n	80049c4 <_printf_i+0x130>
 8004a4c:	680b      	ldr	r3, [r1, #0]
 8004a4e:	6826      	ldr	r6, [r4, #0]
 8004a50:	6960      	ldr	r0, [r4, #20]
 8004a52:	1d1d      	adds	r5, r3, #4
 8004a54:	600d      	str	r5, [r1, #0]
 8004a56:	0635      	lsls	r5, r6, #24
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	d501      	bpl.n	8004a60 <_printf_i+0x1cc>
 8004a5c:	6018      	str	r0, [r3, #0]
 8004a5e:	e002      	b.n	8004a66 <_printf_i+0x1d2>
 8004a60:	0671      	lsls	r1, r6, #25
 8004a62:	d5fb      	bpl.n	8004a5c <_printf_i+0x1c8>
 8004a64:	8018      	strh	r0, [r3, #0]
 8004a66:	2300      	movs	r3, #0
 8004a68:	6123      	str	r3, [r4, #16]
 8004a6a:	4616      	mov	r6, r2
 8004a6c:	e7ba      	b.n	80049e4 <_printf_i+0x150>
 8004a6e:	680b      	ldr	r3, [r1, #0]
 8004a70:	1d1a      	adds	r2, r3, #4
 8004a72:	600a      	str	r2, [r1, #0]
 8004a74:	681e      	ldr	r6, [r3, #0]
 8004a76:	6862      	ldr	r2, [r4, #4]
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f7fb fbb8 	bl	80001f0 <memchr>
 8004a80:	b108      	cbz	r0, 8004a86 <_printf_i+0x1f2>
 8004a82:	1b80      	subs	r0, r0, r6
 8004a84:	6060      	str	r0, [r4, #4]
 8004a86:	6863      	ldr	r3, [r4, #4]
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a90:	e7a8      	b.n	80049e4 <_printf_i+0x150>
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	4632      	mov	r2, r6
 8004a96:	4649      	mov	r1, r9
 8004a98:	4640      	mov	r0, r8
 8004a9a:	47d0      	blx	sl
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d0ab      	beq.n	80049f8 <_printf_i+0x164>
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	079b      	lsls	r3, r3, #30
 8004aa4:	d413      	bmi.n	8004ace <_printf_i+0x23a>
 8004aa6:	68e0      	ldr	r0, [r4, #12]
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	4298      	cmp	r0, r3
 8004aac:	bfb8      	it	lt
 8004aae:	4618      	movlt	r0, r3
 8004ab0:	e7a4      	b.n	80049fc <_printf_i+0x168>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	4640      	mov	r0, r8
 8004aba:	47d0      	blx	sl
 8004abc:	3001      	adds	r0, #1
 8004abe:	d09b      	beq.n	80049f8 <_printf_i+0x164>
 8004ac0:	3501      	adds	r5, #1
 8004ac2:	68e3      	ldr	r3, [r4, #12]
 8004ac4:	9903      	ldr	r1, [sp, #12]
 8004ac6:	1a5b      	subs	r3, r3, r1
 8004ac8:	42ab      	cmp	r3, r5
 8004aca:	dcf2      	bgt.n	8004ab2 <_printf_i+0x21e>
 8004acc:	e7eb      	b.n	8004aa6 <_printf_i+0x212>
 8004ace:	2500      	movs	r5, #0
 8004ad0:	f104 0619 	add.w	r6, r4, #25
 8004ad4:	e7f5      	b.n	8004ac2 <_printf_i+0x22e>
 8004ad6:	bf00      	nop
 8004ad8:	080172e1 	.word	0x080172e1
 8004adc:	080172f2 	.word	0x080172f2

08004ae0 <_sbrk_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	4d06      	ldr	r5, [pc, #24]	; (8004afc <_sbrk_r+0x1c>)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	4608      	mov	r0, r1
 8004aea:	602b      	str	r3, [r5, #0]
 8004aec:	f7fd f8c2 	bl	8001c74 <_sbrk>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d102      	bne.n	8004afa <_sbrk_r+0x1a>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	b103      	cbz	r3, 8004afa <_sbrk_r+0x1a>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	2000022c 	.word	0x2000022c

08004b00 <__retarget_lock_acquire_recursive>:
 8004b00:	4770      	bx	lr

08004b02 <__retarget_lock_release_recursive>:
 8004b02:	4770      	bx	lr

08004b04 <memcpy>:
 8004b04:	440a      	add	r2, r1
 8004b06:	4291      	cmp	r1, r2
 8004b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b0c:	d100      	bne.n	8004b10 <memcpy+0xc>
 8004b0e:	4770      	bx	lr
 8004b10:	b510      	push	{r4, lr}
 8004b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b1a:	4291      	cmp	r1, r2
 8004b1c:	d1f9      	bne.n	8004b12 <memcpy+0xe>
 8004b1e:	bd10      	pop	{r4, pc}

08004b20 <memmove>:
 8004b20:	4288      	cmp	r0, r1
 8004b22:	b510      	push	{r4, lr}
 8004b24:	eb01 0402 	add.w	r4, r1, r2
 8004b28:	d902      	bls.n	8004b30 <memmove+0x10>
 8004b2a:	4284      	cmp	r4, r0
 8004b2c:	4623      	mov	r3, r4
 8004b2e:	d807      	bhi.n	8004b40 <memmove+0x20>
 8004b30:	1e43      	subs	r3, r0, #1
 8004b32:	42a1      	cmp	r1, r4
 8004b34:	d008      	beq.n	8004b48 <memmove+0x28>
 8004b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b3e:	e7f8      	b.n	8004b32 <memmove+0x12>
 8004b40:	4402      	add	r2, r0
 8004b42:	4601      	mov	r1, r0
 8004b44:	428a      	cmp	r2, r1
 8004b46:	d100      	bne.n	8004b4a <memmove+0x2a>
 8004b48:	bd10      	pop	{r4, pc}
 8004b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b52:	e7f7      	b.n	8004b44 <memmove+0x24>

08004b54 <__malloc_lock>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__malloc_lock+0x8>)
 8004b56:	f7ff bfd3 	b.w	8004b00 <__retarget_lock_acquire_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	20000224 	.word	0x20000224

08004b60 <__malloc_unlock>:
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <__malloc_unlock+0x8>)
 8004b62:	f7ff bfce 	b.w	8004b02 <__retarget_lock_release_recursive>
 8004b66:	bf00      	nop
 8004b68:	20000224 	.word	0x20000224

08004b6c <_realloc_r>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	4607      	mov	r7, r0
 8004b70:	4614      	mov	r4, r2
 8004b72:	460e      	mov	r6, r1
 8004b74:	b921      	cbnz	r1, 8004b80 <_realloc_r+0x14>
 8004b76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	f7ff bc66 	b.w	800444c <_malloc_r>
 8004b80:	b922      	cbnz	r2, 8004b8c <_realloc_r+0x20>
 8004b82:	f7ff fc13 	bl	80043ac <_free_r>
 8004b86:	4625      	mov	r5, r4
 8004b88:	4628      	mov	r0, r5
 8004b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b8c:	f000 f814 	bl	8004bb8 <_malloc_usable_size_r>
 8004b90:	42a0      	cmp	r0, r4
 8004b92:	d20f      	bcs.n	8004bb4 <_realloc_r+0x48>
 8004b94:	4621      	mov	r1, r4
 8004b96:	4638      	mov	r0, r7
 8004b98:	f7ff fc58 	bl	800444c <_malloc_r>
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d0f2      	beq.n	8004b88 <_realloc_r+0x1c>
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	f7ff ffad 	bl	8004b04 <memcpy>
 8004baa:	4631      	mov	r1, r6
 8004bac:	4638      	mov	r0, r7
 8004bae:	f7ff fbfd 	bl	80043ac <_free_r>
 8004bb2:	e7e9      	b.n	8004b88 <_realloc_r+0x1c>
 8004bb4:	4635      	mov	r5, r6
 8004bb6:	e7e7      	b.n	8004b88 <_realloc_r+0x1c>

08004bb8 <_malloc_usable_size_r>:
 8004bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bbc:	1f18      	subs	r0, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bfbc      	itt	lt
 8004bc2:	580b      	ldrlt	r3, [r1, r0]
 8004bc4:	18c0      	addlt	r0, r0, r3
 8004bc6:	4770      	bx	lr

08004bc8 <_init>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	bf00      	nop
 8004bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bce:	bc08      	pop	{r3}
 8004bd0:	469e      	mov	lr, r3
 8004bd2:	4770      	bx	lr

08004bd4 <_fini>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	bf00      	nop
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr
