
TFT_01_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012c88  0800a548  0800a548  0001a548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d1d0  0801d1d0  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d1d0  0801d1d0  0002d1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d1d8  0801d1d8  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d1d8  0801d1d8  0002d1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d1dc  0801d1dc  0002d1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801d1e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e0  0801d3c0  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0801d3c0  000304f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014042  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fb  00000000  00000000  00044252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00047550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000513b  00000000  00000000  000481f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014c32  00000000  00000000  0004d333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a690  00000000  00000000  00061f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000ec5f5  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b60  00000000  00000000  000ec648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046cc  00000000  00000000  000ed1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a52c 	.word	0x0800a52c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a52c 	.word	0x0800a52c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fe67 	bl	8001db4 <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fe5e 	bl	8001db4 <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	460b      	mov	r3, r1
 80011a0:	80fb      	strh	r3, [r7, #6]
 80011a2:	4613      	mov	r3, r2
 80011a4:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e008      	b.n	80011be <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80011ac:	88ba      	ldrh	r2, [r7, #4]
 80011ae:	8c3b      	ldrh	r3, [r7, #32]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ffbf 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dbf0      	blt.n	80011ac <GFX_DrawFillRectangle+0x1c>
    }

}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	4611      	mov	r1, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	80fb      	strh	r3, [r7, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	f1c3 0301 	rsb	r3, r3, #1
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	461a      	mov	r2, r3
 80011fc:	03d2      	lsls	r2, r2, #15
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	b29b      	uxth	r3, r3
 8001204:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800120e:	e0b5      	b.n	800137c <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001210:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0e      	blt.n	8001236 <GFX_DrawCircleHelper+0x62>
            y--;
 8001218:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800121c:	b29b      	uxth	r3, r3
 800121e:	3b01      	subs	r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001224:	8b7b      	ldrh	r3, [r7, #26]
 8001226:	3302      	adds	r3, #2
 8001228:	b29b      	uxth	r3, r3
 800122a:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800122c:	8bfa      	ldrh	r2, [r7, #30]
 800122e:	8b7b      	ldrh	r3, [r7, #26]
 8001230:	4413      	add	r3, r2
 8001232:	b29b      	uxth	r3, r3
 8001234:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001236:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800123a:	b29b      	uxth	r3, r3
 800123c:	3301      	adds	r3, #1
 800123e:	b29b      	uxth	r3, r3
 8001240:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001242:	8bbb      	ldrh	r3, [r7, #28]
 8001244:	3302      	adds	r3, #2
 8001246:	b29b      	uxth	r3, r3
 8001248:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800124a:	8bfa      	ldrh	r2, [r7, #30]
 800124c:	8bbb      	ldrh	r3, [r7, #28]
 800124e:	4413      	add	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	2b00      	cmp	r3, #0
 800125c:	d01f      	beq.n	800129e <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	b29a      	uxth	r2, r3
 8001262:	8b3b      	ldrh	r3, [r7, #24]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	b218      	sxth	r0, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	b29a      	uxth	r2, r3
 800126e:	8afb      	ldrh	r3, [r7, #22]
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	b21b      	sxth	r3, r3
 8001276:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001278:	4619      	mov	r1, r3
 800127a:	f000 fd9b 	bl	8001db4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	b29a      	uxth	r2, r3
 8001282:	8afb      	ldrh	r3, [r7, #22]
 8001284:	4413      	add	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	b218      	sxth	r0, r3
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	b29a      	uxth	r2, r3
 800128e:	8b3b      	ldrh	r3, [r7, #24]
 8001290:	4413      	add	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	b21b      	sxth	r3, r3
 8001296:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001298:	4619      	mov	r1, r3
 800129a:	f000 fd8b 	bl	8001db4 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 800129e:	797b      	ldrb	r3, [r7, #5]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d01f      	beq.n	80012e8 <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	8b3b      	ldrh	r3, [r7, #24]
 80012ae:	4413      	add	r3, r2
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	b218      	sxth	r0, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	8afb      	ldrh	r3, [r7, #22]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	b21b      	sxth	r3, r3
 80012c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012c2:	4619      	mov	r1, r3
 80012c4:	f000 fd76 	bl	8001db4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	8afb      	ldrh	r3, [r7, #22]
 80012ce:	4413      	add	r3, r2
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b218      	sxth	r0, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	8b3b      	ldrh	r3, [r7, #24]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b21b      	sxth	r3, r3
 80012e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012e2:	4619      	mov	r1, r3
 80012e4:	f000 fd66 	bl	8001db4 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 80012e8:	797b      	ldrb	r3, [r7, #5]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d01f      	beq.n	8001332 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	8afb      	ldrh	r3, [r7, #22]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b218      	sxth	r0, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	b29a      	uxth	r2, r3
 8001302:	8b3b      	ldrh	r3, [r7, #24]
 8001304:	4413      	add	r3, r2
 8001306:	b29b      	uxth	r3, r3
 8001308:	b21b      	sxth	r3, r3
 800130a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800130c:	4619      	mov	r1, r3
 800130e:	f000 fd51 	bl	8001db4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	b29a      	uxth	r2, r3
 8001316:	8b3b      	ldrh	r3, [r7, #24]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b29b      	uxth	r3, r3
 800131c:	b218      	sxth	r0, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	b29a      	uxth	r2, r3
 8001322:	8afb      	ldrh	r3, [r7, #22]
 8001324:	4413      	add	r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	b21b      	sxth	r3, r3
 800132a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800132c:	4619      	mov	r1, r3
 800132e:	f000 fd41 	bl	8001db4 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001332:	797b      	ldrb	r3, [r7, #5]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d01f      	beq.n	800137c <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	b29a      	uxth	r2, r3
 8001340:	8afb      	ldrh	r3, [r7, #22]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	b218      	sxth	r0, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	b29a      	uxth	r2, r3
 800134c:	8b3b      	ldrh	r3, [r7, #24]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	b29b      	uxth	r3, r3
 8001352:	b21b      	sxth	r3, r3
 8001354:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001356:	4619      	mov	r1, r3
 8001358:	f000 fd2c 	bl	8001db4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	b29a      	uxth	r2, r3
 8001360:	8b3b      	ldrh	r3, [r7, #24]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b29b      	uxth	r3, r3
 8001366:	b218      	sxth	r0, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	b29a      	uxth	r2, r3
 800136c:	8afb      	ldrh	r3, [r7, #22]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b29b      	uxth	r3, r3
 8001372:	b21b      	sxth	r3, r3
 8001374:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001376:	4619      	mov	r1, r3
 8001378:	f000 fd1c 	bl	8001db4 <ILI9341_WritePixel>
    while (x<y) {
 800137c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001380:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001384:	429a      	cmp	r2, r3
 8001386:	f6ff af43 	blt.w	8001210 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	4611      	mov	r1, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	460b      	mov	r3, r1
 80013a4:	80fb      	strh	r3, [r7, #6]
 80013a6:	4613      	mov	r3, r2
 80013a8:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f1c3 0301 	rsb	r3, r3, #1
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	461a      	mov	r2, r3
 80013bc:	03d2      	lsls	r2, r2, #15
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80013ce:	e073      	b.n	80014b8 <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 80013d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0e      	blt.n	80013f6 <GFX_DrawFillCircleHelper+0x62>
            y--;
 80013d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3b01      	subs	r3, #1
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80013e4:	8b7b      	ldrh	r3, [r7, #26]
 80013e6:	3302      	adds	r3, #2
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80013ec:	8bfa      	ldrh	r2, [r7, #30]
 80013ee:	8b7b      	ldrh	r3, [r7, #26]
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80013f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3301      	adds	r3, #1
 80013fe:	b29b      	uxth	r3, r3
 8001400:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	3302      	adds	r3, #2
 8001406:	b29b      	uxth	r3, r3
 8001408:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800140a:	8bfa      	ldrh	r2, [r7, #30]
 800140c:	8bbb      	ldrh	r3, [r7, #28]
 800140e:	4413      	add	r3, r2
 8001410:	b29b      	uxth	r3, r3
 8001412:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001414:	797b      	ldrb	r3, [r7, #5]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d023      	beq.n	8001466 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800141e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	18d0      	adds	r0, r2, r3
 8001426:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	1ad1      	subs	r1, r2, r3
 800142e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800143a:	441a      	add	r2, r3
 800143c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800143e:	f7ff fe7a 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001442:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	18d0      	adds	r0, r2, r3
 800144a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	1ad1      	subs	r1, r2, r3
 8001452:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800145e:	441a      	add	r2, r3
 8001460:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001462:	f7ff fe68 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001466:	797b      	ldrb	r3, [r7, #5]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d023      	beq.n	80014b8 <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001470:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	1ad0      	subs	r0, r2, r3
 8001478:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	1ad1      	subs	r1, r2, r3
 8001480:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800148c:	441a      	add	r2, r3
 800148e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001490:	f7ff fe51 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001494:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	1ad0      	subs	r0, r2, r3
 800149c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	1ad1      	subs	r1, r2, r3
 80014a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014b0:	441a      	add	r2, r3
 80014b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014b4:	f7ff fe3f 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 80014b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	db85      	blt.n	80013d0 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3720      	adds	r7, #32
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af02      	add	r7, sp, #8
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	4611      	mov	r1, r2
 80014da:	461a      	mov	r2, r3
 80014dc:	460b      	mov	r3, r1
 80014de:	80fb      	strh	r3, [r7, #6]
 80014e0:	4613      	mov	r3, r2
 80014e2:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 80014e4:	8b3a      	ldrh	r2, [r7, #24]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	18d0      	adds	r0, r2, r3
 80014ea:	88fa      	ldrh	r2, [r7, #6]
 80014ec:	8b3b      	ldrh	r3, [r7, #24]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	1ad2      	subs	r2, r2, r3
 80014f2:	8bbb      	ldrh	r3, [r7, #28]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	f7ff fe35 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80014fa:	8b3a      	ldrh	r2, [r7, #24]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	18d0      	adds	r0, r2, r3
 8001500:	88ba      	ldrh	r2, [r7, #4]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4413      	add	r3, r2
 8001506:	1e59      	subs	r1, r3, #1
 8001508:	88fa      	ldrh	r2, [r7, #6]
 800150a:	8b3b      	ldrh	r3, [r7, #24]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	1ad2      	subs	r2, r2, r3
 8001510:	8bbb      	ldrh	r3, [r7, #28]
 8001512:	f7ff fe27 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001516:	8b3a      	ldrh	r2, [r7, #24]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	18d1      	adds	r1, r2, r3
 800151c:	88ba      	ldrh	r2, [r7, #4]
 800151e:	8b3b      	ldrh	r3, [r7, #24]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	1ad2      	subs	r2, r2, r3
 8001524:	8bbb      	ldrh	r3, [r7, #28]
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff fe05 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800152c:	88fa      	ldrh	r2, [r7, #6]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	1e58      	subs	r0, r3, #1
 8001534:	8b3a      	ldrh	r2, [r7, #24]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	18d1      	adds	r1, r2, r3
 800153a:	88ba      	ldrh	r2, [r7, #4]
 800153c:	8b3b      	ldrh	r3, [r7, #24]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	1ad2      	subs	r2, r2, r3
 8001542:	8bbb      	ldrh	r3, [r7, #28]
 8001544:	f7ff fdf7 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 8001548:	8b3a      	ldrh	r2, [r7, #24]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	18d0      	adds	r0, r2, r3
 800154e:	8b3a      	ldrh	r2, [r7, #24]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	18d1      	adds	r1, r2, r3
 8001554:	8b3a      	ldrh	r2, [r7, #24]
 8001556:	8bbb      	ldrh	r3, [r7, #28]
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2301      	movs	r3, #1
 800155c:	f7ff fe3a 	bl	80011d4 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8001560:	88fa      	ldrh	r2, [r7, #6]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	441a      	add	r2, r3
 8001566:	8b3b      	ldrh	r3, [r7, #24]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	8b3a      	ldrh	r2, [r7, #24]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	18d1      	adds	r1, r2, r3
 8001572:	8b3a      	ldrh	r2, [r7, #24]
 8001574:	8bbb      	ldrh	r3, [r7, #28]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2302      	movs	r3, #2
 800157a:	f7ff fe2b 	bl	80011d4 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 800157e:	88fa      	ldrh	r2, [r7, #6]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	441a      	add	r2, r3
 8001584:	8b3b      	ldrh	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	1e58      	subs	r0, r3, #1
 800158a:	88ba      	ldrh	r2, [r7, #4]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	441a      	add	r2, r3
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	1e59      	subs	r1, r3, #1
 8001596:	8b3a      	ldrh	r2, [r7, #24]
 8001598:	8bbb      	ldrh	r3, [r7, #28]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2304      	movs	r3, #4
 800159e:	f7ff fe19 	bl	80011d4 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80015a2:	8b3a      	ldrh	r2, [r7, #24]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	18d0      	adds	r0, r2, r3
 80015a8:	88ba      	ldrh	r2, [r7, #4]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	441a      	add	r2, r3
 80015ae:	8b3b      	ldrh	r3, [r7, #24]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	1e59      	subs	r1, r3, #1
 80015b4:	8b3a      	ldrh	r2, [r7, #24]
 80015b6:	8bbb      	ldrh	r3, [r7, #28]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2308      	movs	r3, #8
 80015bc:	f7ff fe0a 	bl	80011d4 <GFX_DrawCircleHelper>
}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	4611      	mov	r1, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	460b      	mov	r3, r1
 80015d8:	80fb      	strh	r3, [r7, #6]
 80015da:	4613      	mov	r3, r2
 80015dc:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 80015de:	8c3a      	ldrh	r2, [r7, #32]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	18d0      	adds	r0, r2, r3
 80015e4:	8c3b      	ldrh	r3, [r7, #32]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	88fa      	ldrh	r2, [r7, #6]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	88b9      	ldrh	r1, [r7, #4]
 80015f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	460b      	mov	r3, r1
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	f7ff fdc9 	bl	8001190 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80015fe:	88fa      	ldrh	r2, [r7, #6]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	441a      	add	r2, r3
 8001604:	8c3b      	ldrh	r3, [r7, #32]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	1e58      	subs	r0, r3, #1
 800160a:	8c3a      	ldrh	r2, [r7, #32]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	18d1      	adds	r1, r2, r3
 8001610:	8c3b      	ldrh	r3, [r7, #32]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	b29b      	uxth	r3, r3
 8001616:	88ba      	ldrh	r2, [r7, #4]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	b21b      	sxth	r3, r3
 8001622:	8c3c      	ldrh	r4, [r7, #32]
 8001624:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001626:	9201      	str	r2, [sp, #4]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	4622      	mov	r2, r4
 800162e:	f7ff feb1 	bl	8001394 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001632:	8c3a      	ldrh	r2, [r7, #32]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	18d0      	adds	r0, r2, r3
 8001638:	8c3a      	ldrh	r2, [r7, #32]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	18d1      	adds	r1, r2, r3
 800163e:	8c3b      	ldrh	r3, [r7, #32]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	b29b      	uxth	r3, r3
 8001644:	88ba      	ldrh	r2, [r7, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	b29b      	uxth	r3, r3
 800164a:	3b01      	subs	r3, #1
 800164c:	b29b      	uxth	r3, r3
 800164e:	b21b      	sxth	r3, r3
 8001650:	8c3c      	ldrh	r4, [r7, #32]
 8001652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001654:	9201      	str	r2, [sp, #4]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2302      	movs	r3, #2
 800165a:	4622      	mov	r2, r4
 800165c:	f7ff fe9a 	bl	8001394 <GFX_DrawFillCircleHelper>
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}

08001668 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <EF_SetFont+0x1c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	2000020c 	.word	0x2000020c

08001688 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <EF_GetFontHeight+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	781b      	ldrb	r3, [r3, #0]
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	2000020c 	.word	0x2000020c

080016a0 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <EF_GetFontStartChar+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	785b      	ldrb	r3, [r3, #1]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	2000020c 	.word	0x2000020c

080016b8 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <EF_GetFontEndChar+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	789b      	ldrb	r3, [r3, #2]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	2000020c 	.word	0x2000020c

080016d0 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <EF_GetFontSpaceWidth+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	78db      	ldrb	r3, [r3, #3]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	2000020c 	.word	0x2000020c

080016e8 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	460a      	mov	r2, r1
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	4613      	mov	r3, r2
 80016f6:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2bc5      	cmp	r3, #197	; 0xc5
 80016fc:	d052      	beq.n	80017a4 <EF_DecodePolish+0xbc>
 80016fe:	2bc5      	cmp	r3, #197	; 0xc5
 8001700:	f300 80e7 	bgt.w	80018d2 <EF_DecodePolish+0x1ea>
 8001704:	2bc3      	cmp	r3, #195	; 0xc3
 8001706:	d002      	beq.n	800170e <EF_DecodePolish+0x26>
 8001708:	2bc4      	cmp	r3, #196	; 0xc4
 800170a:	d00a      	beq.n	8001722 <EF_DecodePolish+0x3a>
 800170c:	e0e1      	b.n	80018d2 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b93      	cmp	r3, #147	; 0x93
 8001712:	d002      	beq.n	800171a <EF_DecodePolish+0x32>
 8001714:	2bb3      	cmp	r3, #179	; 0xb3
 8001716:	d002      	beq.n	800171e <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001718:	e0db      	b.n	80018d2 <EF_DecodePolish+0x1ea>
			return 0x84;
 800171a:	2384      	movs	r3, #132	; 0x84
 800171c:	e0da      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			return 0x8D;
 800171e:	238d      	movs	r3, #141	; 0x8d
 8001720:	e0d8      	b.n	80018d4 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	3b84      	subs	r3, #132	; 0x84
 8001726:	2b15      	cmp	r3, #21
 8001728:	f200 80d0 	bhi.w	80018cc <EF_DecodePolish+0x1e4>
 800172c:	a201      	add	r2, pc, #4	; (adr r2, 8001734 <EF_DecodePolish+0x4c>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	0800178d 	.word	0x0800178d
 8001738:	08001799 	.word	0x08001799
 800173c:	08001795 	.word	0x08001795
 8001740:	080017a1 	.word	0x080017a1
 8001744:	080018cd 	.word	0x080018cd
 8001748:	080018cd 	.word	0x080018cd
 800174c:	080018cd 	.word	0x080018cd
 8001750:	080018cd 	.word	0x080018cd
 8001754:	080018cd 	.word	0x080018cd
 8001758:	080018cd 	.word	0x080018cd
 800175c:	080018cd 	.word	0x080018cd
 8001760:	080018cd 	.word	0x080018cd
 8001764:	080018cd 	.word	0x080018cd
 8001768:	080018cd 	.word	0x080018cd
 800176c:	080018cd 	.word	0x080018cd
 8001770:	080018cd 	.word	0x080018cd
 8001774:	080018cd 	.word	0x080018cd
 8001778:	080018cd 	.word	0x080018cd
 800177c:	080018cd 	.word	0x080018cd
 8001780:	080018cd 	.word	0x080018cd
 8001784:	08001791 	.word	0x08001791
 8001788:	0800179d 	.word	0x0800179d
		{
		case 0x84: // Ą
			return 0x7F;
 800178c:	237f      	movs	r3, #127	; 0x7f
 800178e:	e0a1      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001790:	2381      	movs	r3, #129	; 0x81
 8001792:	e09f      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	e09d      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001798:	2388      	movs	r3, #136	; 0x88
 800179a:	e09b      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 800179c:	238a      	movs	r3, #138	; 0x8a
 800179e:	e099      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 80017a0:	2389      	movs	r3, #137	; 0x89
 80017a2:	e097      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	3b81      	subs	r3, #129	; 0x81
 80017a8:	2b3b      	cmp	r3, #59	; 0x3b
 80017aa:	f200 8091 	bhi.w	80018d0 <EF_DecodePolish+0x1e8>
 80017ae:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <EF_DecodePolish+0xcc>)
 80017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b4:	080018a5 	.word	0x080018a5
 80017b8:	080018b9 	.word	0x080018b9
 80017bc:	080018a9 	.word	0x080018a9
 80017c0:	080018bd 	.word	0x080018bd
 80017c4:	080018d1 	.word	0x080018d1
 80017c8:	080018d1 	.word	0x080018d1
 80017cc:	080018d1 	.word	0x080018d1
 80017d0:	080018d1 	.word	0x080018d1
 80017d4:	080018d1 	.word	0x080018d1
 80017d8:	080018d1 	.word	0x080018d1
 80017dc:	080018d1 	.word	0x080018d1
 80017e0:	080018d1 	.word	0x080018d1
 80017e4:	080018d1 	.word	0x080018d1
 80017e8:	080018d1 	.word	0x080018d1
 80017ec:	080018d1 	.word	0x080018d1
 80017f0:	080018d1 	.word	0x080018d1
 80017f4:	080018d1 	.word	0x080018d1
 80017f8:	080018d1 	.word	0x080018d1
 80017fc:	080018d1 	.word	0x080018d1
 8001800:	080018d1 	.word	0x080018d1
 8001804:	080018d1 	.word	0x080018d1
 8001808:	080018d1 	.word	0x080018d1
 800180c:	080018d1 	.word	0x080018d1
 8001810:	080018d1 	.word	0x080018d1
 8001814:	080018d1 	.word	0x080018d1
 8001818:	080018ad 	.word	0x080018ad
 800181c:	080018c1 	.word	0x080018c1
 8001820:	080018d1 	.word	0x080018d1
 8001824:	080018d1 	.word	0x080018d1
 8001828:	080018d1 	.word	0x080018d1
 800182c:	080018d1 	.word	0x080018d1
 8001830:	080018d1 	.word	0x080018d1
 8001834:	080018d1 	.word	0x080018d1
 8001838:	080018d1 	.word	0x080018d1
 800183c:	080018d1 	.word	0x080018d1
 8001840:	080018d1 	.word	0x080018d1
 8001844:	080018d1 	.word	0x080018d1
 8001848:	080018d1 	.word	0x080018d1
 800184c:	080018d1 	.word	0x080018d1
 8001850:	080018d1 	.word	0x080018d1
 8001854:	080018d1 	.word	0x080018d1
 8001858:	080018d1 	.word	0x080018d1
 800185c:	080018d1 	.word	0x080018d1
 8001860:	080018d1 	.word	0x080018d1
 8001864:	080018d1 	.word	0x080018d1
 8001868:	080018d1 	.word	0x080018d1
 800186c:	080018d1 	.word	0x080018d1
 8001870:	080018d1 	.word	0x080018d1
 8001874:	080018d1 	.word	0x080018d1
 8001878:	080018d1 	.word	0x080018d1
 800187c:	080018d1 	.word	0x080018d1
 8001880:	080018d1 	.word	0x080018d1
 8001884:	080018d1 	.word	0x080018d1
 8001888:	080018d1 	.word	0x080018d1
 800188c:	080018d1 	.word	0x080018d1
 8001890:	080018d1 	.word	0x080018d1
 8001894:	080018b1 	.word	0x080018b1
 8001898:	080018c5 	.word	0x080018c5
 800189c:	080018b5 	.word	0x080018b5
 80018a0:	080018c9 	.word	0x080018c9
		{
		case 0x81: // Ł
			return 0x82;
 80018a4:	2382      	movs	r3, #130	; 0x82
 80018a6:	e015      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 80018a8:	2383      	movs	r3, #131	; 0x83
 80018aa:	e013      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 80018ac:	2385      	movs	r3, #133	; 0x85
 80018ae:	e011      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 80018b0:	2386      	movs	r3, #134	; 0x86
 80018b2:	e00f      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 80018b4:	2387      	movs	r3, #135	; 0x87
 80018b6:	e00d      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 80018b8:	238b      	movs	r3, #139	; 0x8b
 80018ba:	e00b      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 80018bc:	238c      	movs	r3, #140	; 0x8c
 80018be:	e009      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 80018c0:	238e      	movs	r3, #142	; 0x8e
 80018c2:	e007      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 80018c4:	238f      	movs	r3, #143	; 0x8f
 80018c6:	e005      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 80018c8:	2390      	movs	r3, #144	; 0x90
 80018ca:	e003      	b.n	80018d4 <EF_DecodePolish+0x1ec>
		break;
 80018cc:	bf00      	nop
 80018ce:	e000      	b.n	80018d2 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 80018d0:	bf00      	nop
	}

	return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	71fb      	strb	r3, [r7, #7]
 80018f2:	4603      	mov	r3, r0
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 80018fe:	f7ff fecf 	bl	80016a0 <EF_GetFontStartChar>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b20      	cmp	r3, #32
 8001910:	d120      	bne.n	8001954 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001912:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001916:	2b01      	cmp	r3, #1
 8001918:	d114      	bne.n	8001944 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 800191a:	88bc      	ldrh	r4, [r7, #4]
 800191c:	887d      	ldrh	r5, [r7, #2]
 800191e:	f7ff fed7 	bl	80016d0 <EF_GetFontSpaceWidth>
 8001922:	4603      	mov	r3, r0
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	0052      	lsls	r2, r2, #1
 800192a:	4413      	add	r3, r2
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b5a      	ldr	r3, [pc, #360]	; (8001a98 <EF_PutChar+0x1b8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b299      	uxth	r1, r3
 8001936:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	460b      	mov	r3, r1
 800193c:	4629      	mov	r1, r5
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff fc26 	bl	8001190 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001944:	f7ff fec4 	bl	80016d0 <EF_GetFontSpaceWidth>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	0052      	lsls	r2, r2, #1
 800194e:	4413      	add	r3, r2
 8001950:	b2db      	uxtb	r3, r3
 8001952:	e09c      	b.n	8001a8e <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001954:	f7ff fea4 	bl	80016a0 <EF_GetFontStartChar>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4293      	cmp	r3, r2
 8001960:	d201      	bcs.n	8001966 <EF_PutChar+0x86>
	{
		return 0;
 8001962:	2300      	movs	r3, #0
 8001964:	e093      	b.n	8001a8e <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001966:	f7ff fea7 	bl	80016b8 <EF_GetFontEndChar>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	7c7b      	ldrb	r3, [r7, #17]
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <EF_PutChar+0x98>
	{
		return 0;
 8001974:	2300      	movs	r3, #0
 8001976:	e08a      	b.n	8001a8e <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001978:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <EF_PutChar+0x1b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	7c7b      	ldrb	r3, [r7, #17]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <EF_PutChar+0x1b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a42      	ldr	r2, [pc, #264]	; (8001a98 <EF_PutChar+0x1b8>)
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	6851      	ldr	r1, [r2, #4]
 8001992:	7c7a      	ldrb	r2, [r7, #17]
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	440a      	add	r2, r1
 8001998:	8852      	ldrh	r2, [r2, #2]
 800199a:	4413      	add	r3, r2
 800199c:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 800199e:	2300      	movs	r3, #0
 80019a0:	83fb      	strh	r3, [r7, #30]
 80019a2:	e066      	b.n	8001a72 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	777b      	strb	r3, [r7, #29]
 80019ae:	e053      	b.n	8001a58 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 80019b6:	7efb      	ldrb	r3, [r7, #27]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d905      	bls.n	80019c8 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 80019bc:	2308      	movs	r3, #8
 80019be:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 80019c0:	7efb      	ldrb	r3, [r7, #27]
 80019c2:	3b08      	subs	r3, #8
 80019c4:	76fb      	strb	r3, [r7, #27]
 80019c6:	e001      	b.n	80019cc <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 80019c8:	7efb      	ldrb	r3, [r7, #27]
 80019ca:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 80019cc:	2300      	movs	r3, #0
 80019ce:	74bb      	strb	r3, [r7, #18]
 80019d0:	e038      	b.n	8001a44 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 80019d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da15      	bge.n	8001a06 <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 80019da:	7f7b      	ldrb	r3, [r7, #29]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	7cbb      	ldrb	r3, [r7, #18]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b218      	sxth	r0, r3
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	8bfb      	ldrh	r3, [r7, #30]
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	883a      	ldrh	r2, [r7, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	f000 f9d8 	bl	8001db4 <ILI9341_WritePixel>
 8001a04:	e018      	b.n	8001a38 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d114      	bne.n	8001a38 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a0e:	7f7b      	ldrb	r3, [r7, #29]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	7cbb      	ldrb	r3, [r7, #18]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b218      	sxth	r0, r3
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	8bfb      	ldrh	r3, [r7, #30]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a32:	4619      	mov	r1, r3
 8001a34:	f000 f9be 	bl	8001db4 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a38:	7cbb      	ldrb	r3, [r7, #18]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	74bb      	strb	r3, [r7, #18]
 8001a3e:	7cfb      	ldrb	r3, [r7, #19]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	74fb      	strb	r3, [r7, #19]
 8001a44:	7cba      	ldrb	r2, [r7, #18]
 8001a46:	7f3b      	ldrb	r3, [r7, #28]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d3c2      	bcc.n	80019d2 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a52:	7f7b      	ldrb	r3, [r7, #29]
 8001a54:	3301      	adds	r3, #1
 8001a56:	777b      	strb	r3, [r7, #29]
 8001a58:	7f7a      	ldrb	r2, [r7, #29]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	da00      	bge.n	8001a66 <EF_PutChar+0x186>
 8001a64:	3307      	adds	r3, #7
 8001a66:	10db      	asrs	r3, r3, #3
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dda1      	ble.n	80019b0 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a6c:	8bfb      	ldrh	r3, [r7, #30]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	83fb      	strh	r3, [r7, #30]
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <EF_PutChar+0x1b8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	8bfa      	ldrh	r2, [r7, #30]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d391      	bcc.n	80019a4 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <EF_PutChar+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bdb0      	pop	{r4, r5, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000020c 	.word	0x2000020c

08001a9c <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	817b      	strh	r3, [r7, #10]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	813b      	strh	r3, [r7, #8]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7fe fb9c 	bl	80001f4 <strlen>
 8001abc:	4603      	mov	r3, r0
 8001abe:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	75fb      	strb	r3, [r7, #23]
 8001ac8:	e05a      	b.n	8001b80 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2bc5      	cmp	r3, #197	; 0xc5
 8001ad4:	d817      	bhi.n	8001b06 <EF_PutString+0x6a>
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2bc2      	cmp	r3, #194	; 0xc2
 8001ae0:	d911      	bls.n	8001b06 <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	7818      	ldrb	r0, [r3, #0]
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
 8001aec:	3301      	adds	r3, #1
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff fdf7 	bl	80016e8 <EF_DecodePolish>
 8001afa:	4603      	mov	r3, r0
 8001afc:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	3301      	adds	r3, #1
 8001b02:	75fb      	strb	r3, [r7, #23]
 8001b04:	e004      	b.n	8001b10 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b10:	897a      	ldrh	r2, [r7, #10]
 8001b12:	8abb      	ldrh	r3, [r7, #20]
 8001b14:	4413      	add	r3, r2
 8001b16:	b299      	uxth	r1, r3
 8001b18:	88fc      	ldrh	r4, [r7, #6]
 8001b1a:	893a      	ldrh	r2, [r7, #8]
 8001b1c:	7cf8      	ldrb	r0, [r7, #19]
 8001b1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4623      	mov	r3, r4
 8001b2a:	f7ff fed9 	bl	80018e0 <EF_PutChar>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001b32:	7c7b      	ldrb	r3, [r7, #17]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	8abb      	ldrh	r3, [r7, #20]
 8001b38:	4413      	add	r3, r2
 8001b3a:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001b3c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d113      	bne.n	8001b6c <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001b44:	897a      	ldrh	r2, [r7, #10]
 8001b46:	8abb      	ldrh	r3, [r7, #20]
 8001b48:	18d4      	adds	r4, r2, r3
 8001b4a:	893d      	ldrh	r5, [r7, #8]
 8001b4c:	f7ff fdc0 	bl	80016d0 <EF_GetFontSpaceWidth>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b29e      	uxth	r6, r3
 8001b54:	f7ff fd98 	bl	8001688 <EF_GetFontHeight>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	4632      	mov	r2, r6
 8001b64:	4629      	mov	r1, r5
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff fb12 	bl	8001190 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001b6c:	f7ff fdb0 	bl	80016d0 <EF_GetFontSpaceWidth>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	8abb      	ldrh	r3, [r7, #20]
 8001b76:	4413      	add	r3, r2
 8001b78:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	75fb      	strb	r3, [r7, #23]
 8001b80:	7dfa      	ldrb	r2, [r7, #23]
 8001b82:	7cbb      	ldrb	r3, [r7, #18]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d3a0      	bcc.n	8001aca <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001b88:	8abb      	ldrh	r3, [r7, #20]
 8001b8a:	b2dc      	uxtb	r4, r3
 8001b8c:	f7ff fda0 	bl	80016d0 <EF_GetFontSpaceWidth>
 8001b90:	4603      	mov	r3, r0
 8001b92:	1ae3      	subs	r3, r4, r3
 8001b94:	b2db      	uxtb	r3, r3
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b9e <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f001 faee 	bl	8003188 <HAL_Delay>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001bbe:	e014      	b.n	8001bea <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <ILI9341_SendToTFT+0x5c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d10c      	bne.n	8001bea <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <ILI9341_SendToTFT+0x5c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	330c      	adds	r3, #12
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3301      	adds	r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e7      	bne.n	8001bc0 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001bf0:	bf00      	nop
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <ILI9341_SendToTFT+0x5c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfe:	2b80      	cmp	r3, #128	; 0x80
 8001c00:	d0f7      	beq.n	8001bf2 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	20000210 	.word	0x20000210

08001c14 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <ILI9341_SendComand+0x40>)
 8001c26:	f002 f96b 	bl	8003f00 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c30:	4808      	ldr	r0, [pc, #32]	; (8001c54 <ILI9341_SendComand+0x40>)
 8001c32:	f002 f965 	bl	8003f00 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001c36:	1dfb      	adds	r3, r7, #7
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ffba 	bl	8001bb4 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c46:	4803      	ldr	r0, [pc, #12]	; (8001c54 <ILI9341_SendComand+0x40>)
 8001c48:	f002 f95a 	bl	8003f00 <HAL_GPIO_WritePin>
#endif
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40020400 	.word	0x40020400

08001c58 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001c66:	2200      	movs	r2, #0
 8001c68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c6c:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <ILI9341_SendCommandAndData+0x5c>)
 8001c6e:	f002 f947 	bl	8003f00 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001c72:	2200      	movs	r2, #0
 8001c74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c78:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <ILI9341_SendCommandAndData+0x5c>)
 8001c7a:	f002 f941 	bl	8003f00 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001c7e:	f107 030f 	add.w	r3, r7, #15
 8001c82:	2101      	movs	r1, #1
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff95 	bl	8001bb4 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c90:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <ILI9341_SendCommandAndData+0x5c>)
 8001c92:	f002 f935 	bl	8003f00 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	68b8      	ldr	r0, [r7, #8]
 8001c9a:	f7ff ff8b 	bl	8001bb4 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <ILI9341_SendCommandAndData+0x5c>)
 8001ca6:	f002 f92b 	bl	8003f00 <HAL_GPIO_WritePin>
#endif

}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40020400 	.word	0x40020400

08001cb8 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d820      	bhi.n	8001d0a <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d816      	bhi.n	8001cfc <ILI9341_SetRotation+0x44>
 8001cce:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <ILI9341_SetRotation+0x1c>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001ce5 	.word	0x08001ce5
 8001cd8:	08001ceb 	.word	0x08001ceb
 8001cdc:	08001cf1 	.word	0x08001cf1
 8001ce0:	08001cf7 	.word	0x08001cf7
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001ce4:	2348      	movs	r3, #72	; 0x48
 8001ce6:	71fb      	strb	r3, [r7, #7]
		break;
 8001ce8:	e008      	b.n	8001cfc <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001cea:	2328      	movs	r3, #40	; 0x28
 8001cec:	71fb      	strb	r3, [r7, #7]
		break;
 8001cee:	e005      	b.n	8001cfc <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001cf0:	2388      	movs	r3, #136	; 0x88
 8001cf2:	71fb      	strb	r3, [r7, #7]
		break;
 8001cf4:	e002      	b.n	8001cfc <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001cf6:	23e8      	movs	r3, #232	; 0xe8
 8001cf8:	71fb      	strb	r3, [r7, #7]
		break;
 8001cfa:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4619      	mov	r1, r3
 8001d02:	2036      	movs	r0, #54	; 0x36
 8001d04:	f7ff ffa8 	bl	8001c58 <ILI9341_SendCommandAndData>
 8001d08:	e000      	b.n	8001d0c <ILI9341_SetRotation+0x54>
		return;
 8001d0a:	bf00      	nop
}
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop

08001d14 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	80fb      	strh	r3, [r7, #6]
 8001d26:	4603      	mov	r3, r0
 8001d28:	80bb      	strh	r3, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	4413      	add	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	81fb      	strh	r3, [r7, #14]
 8001d3e:	88ba      	ldrh	r2, [r7, #4]
 8001d40:	883b      	ldrh	r3, [r7, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001d64:	89fb      	ldrh	r3, [r7, #14]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	2204      	movs	r2, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	202a      	movs	r0, #42	; 0x2a
 8001d74:	f7ff ff70 	bl	8001c58 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001d78:	88bb      	ldrh	r3, [r7, #4]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001d88:	89bb      	ldrh	r3, [r7, #12]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001d92:	89bb      	ldrh	r3, [r7, #12]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001d98:	f107 0308 	add.w	r3, r7, #8
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	202b      	movs	r0, #43	; 0x2b
 8001da2:	f7ff ff59 	bl	8001c58 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001da6:	202c      	movs	r0, #44	; 0x2c
 8001da8:	f7ff ff34 	bl	8001c14 <ILI9341_SendComand>

}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}

08001db4 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	80bb      	strh	r3, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db21      	blt.n	8001e12 <ILI9341_WritePixel+0x5e>
 8001dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001dd6:	da1c      	bge.n	8001e12 <ILI9341_WritePixel+0x5e>
 8001dd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db18      	blt.n	8001e12 <ILI9341_WritePixel+0x5e>
 8001de0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001de4:	2bef      	cmp	r3, #239	; 0xef
 8001de6:	dc14      	bgt.n	8001e12 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001de8:	88f8      	ldrh	r0, [r7, #6]
 8001dea:	88b9      	ldrh	r1, [r7, #4]
 8001dec:	2301      	movs	r3, #1
 8001dee:	2201      	movs	r2, #1
 8001df0:	f7ff ff90 	bl	8001d14 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	202c      	movs	r0, #44	; 0x2c
 8001e0e:	f7ff ff23 	bl	8001c58 <ILI9341_SendCommandAndData>
	}

}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60ba      	str	r2, [r7, #8]
 8001e22:	461a      	mov	r2, r3
 8001e24:	4603      	mov	r3, r0
 8001e26:	81fb      	strh	r3, [r7, #14]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	81bb      	strh	r3, [r7, #12]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001e30:	89fa      	ldrh	r2, [r7, #14]
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	4413      	add	r3, r2
 8001e36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e3a:	dc14      	bgt.n	8001e66 <ILI9341_DrawImage+0x4c>
 8001e3c:	89ba      	ldrh	r2, [r7, #12]
 8001e3e:	8b3b      	ldrh	r3, [r7, #24]
 8001e40:	4413      	add	r3, r2
 8001e42:	2bf0      	cmp	r3, #240	; 0xf0
 8001e44:	dc0f      	bgt.n	8001e66 <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001e46:	8b3b      	ldrh	r3, [r7, #24]
 8001e48:	88fa      	ldrh	r2, [r7, #6]
 8001e4a:	89b9      	ldrh	r1, [r7, #12]
 8001e4c:	89f8      	ldrh	r0, [r7, #14]
 8001e4e:	f7ff ff61 	bl	8001d14 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	8b3a      	ldrh	r2, [r7, #24]
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	202c      	movs	r0, #44	; 0x2c
 8001e62:	f7ff fef9 	bl	8001c58 <ILI9341_SendCommandAndData>
	}
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001e7a:	23f0      	movs	r3, #240	; 0xf0
 8001e7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e80:	2100      	movs	r1, #0
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff ff46 	bl	8001d14 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001e88:	202c      	movs	r0, #44	; 0x2c
 8001e8a:	f7ff fec3 	bl	8001c14 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001e8e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001e92:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e9a:	4822      	ldr	r0, [pc, #136]	; (8001f24 <ILI9341_ClearDisplay+0xb4>)
 8001e9c:	f002 f830 	bl	8003f00 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea6:	481f      	ldr	r0, [pc, #124]	; (8001f24 <ILI9341_ClearDisplay+0xb4>)
 8001ea8:	f002 f82a 	bl	8003f00 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001eac:	e023      	b.n	8001ef6 <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <ILI9341_ClearDisplay+0xb8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d11b      	bne.n	8001ef6 <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <ILI9341_ClearDisplay+0xb8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	330c      	adds	r3, #12
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001ed0:	bf00      	nop
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <ILI9341_ClearDisplay+0xb8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d1f7      	bne.n	8001ed2 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <ILI9341_ClearDisplay+0xb8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	88fa      	ldrh	r2, [r7, #6]
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1d8      	bne.n	8001eae <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001efc:	bf00      	nop
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <ILI9341_ClearDisplay+0xb8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d0f7      	beq.n	8001efe <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4803      	ldr	r0, [pc, #12]	; (8001f24 <ILI9341_ClearDisplay+0xb4>)
 8001f16:	f001 fff3 	bl	8003f00 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40020400 	.word	0x40020400
 8001f28:	20000210 	.word	0x20000210

08001f2c <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001f34:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <ILI9341_Init+0x9c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <ILI9341_Init+0xa0>)
 8001f3c:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4c:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f54:	481e      	ldr	r0, [pc, #120]	; (8001fd0 <ILI9341_Init+0xa4>)
 8001f56:	f001 ffd3 	bl	8003f00 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001f5a:	200a      	movs	r0, #10
 8001f5c:	f7ff fe1f 	bl	8001b9e <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f66:	481a      	ldr	r0, [pc, #104]	; (8001fd0 <ILI9341_Init+0xa4>)
 8001f68:	f001 ffca 	bl	8003f00 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001f6c:	200a      	movs	r0, #10
 8001f6e:	f7ff fe16 	bl	8001b9e <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001f72:	e019      	b.n	8001fa8 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60fa      	str	r2, [r7, #12]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8001f7e:	7abb      	ldrb	r3, [r7, #10]
 8001f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f84:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 8001f86:	7a7a      	ldrb	r2, [r7, #9]
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fe63 	bl	8001c58 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 8001f92:	7a7b      	ldrb	r3, [r7, #9]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8001f9a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da02      	bge.n	8001fa8 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 8001fa2:	2096      	movs	r0, #150	; 0x96
 8001fa4:	f7ff fdfb 	bl	8001b9e <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60fa      	str	r2, [r7, #12]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	72fb      	strb	r3, [r7, #11]
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1dd      	bne.n	8001f74 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f7ff fe7d 	bl	8001cb8 <ILI9341_SetRotation>
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000210 	.word	0x20000210
 8001fcc:	0800c5ac 	.word	0x0800c5ac
 8001fd0:	40020400 	.word	0x40020400

08001fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <MX_DMA_Init+0x4c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <MX_DMA_Init+0x4c>)
 8001fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <MX_DMA_Init+0x4c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2010      	movs	r0, #16
 8001ffc:	f001 f9c3 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002000:	2010      	movs	r0, #16
 8002002:	f001 f9dc 	bl	80033be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	2011      	movs	r0, #17
 800200c:	f001 f9bb 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002010:	2011      	movs	r0, #17
 8002012:	f001 f9d4 	bl	80033be <HAL_NVIC_EnableIRQ>

}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <system_init>:

#include "functions.h"
#include "logo.h"


uint8_t system_init(){
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800202a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800202e:	f7ff ff1f 	bl	8001e70 <ILI9341_ClearDisplay>
	  ILI9341_DrawImage(40, 50, logo, 240, 140);
 8002032:	238c      	movs	r3, #140	; 0x8c
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	23f0      	movs	r3, #240	; 0xf0
 8002038:	4a6a      	ldr	r2, [pc, #424]	; (80021e4 <system_init+0x1c0>)
 800203a:	2132      	movs	r1, #50	; 0x32
 800203c:	2028      	movs	r0, #40	; 0x28
 800203e:	f7ff feec 	bl	8001e1a <ILI9341_DrawImage>
//	  GFX_Image(40, 50, logo, 240, 140); usunieta wolniejsza wersja rysowania

	  HAL_Delay(200); // !!!! TODO
 8002042:	20c8      	movs	r0, #200	; 0xc8
 8002044:	f001 f8a0 	bl	8003188 <HAL_Delay>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002048:	4867      	ldr	r0, [pc, #412]	; (80021e8 <system_init+0x1c4>)
 800204a:	f7ff fb0d 	bl	8001668 <EF_SetFont>
	  uint8_t Len = sprintf((char*)Msg, "Inicjalizacja...");
 800204e:	4967      	ldr	r1, [pc, #412]	; (80021ec <system_init+0x1c8>)
 8002050:	4867      	ldr	r0, [pc, #412]	; (80021f0 <system_init+0x1cc>)
 8002052:	f004 fc53 	bl	80068fc <siprintf>
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800205a:	2300      	movs	r3, #0
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2300      	movs	r3, #0
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	2214      	movs	r2, #20
 8002066:	213c      	movs	r1, #60	; 0x3c
 8002068:	4861      	ldr	r0, [pc, #388]	; (80021f0 <system_init+0x1cc>)
 800206a:	f7ff fd17 	bl	8001a9c <EF_PutString>
	  Len++;
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	3301      	adds	r3, #1
 8002072:	71fb      	strb	r3, [r7, #7]
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 8002074:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	2305      	movs	r3, #5
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2314      	movs	r3, #20
 8002080:	2214      	movs	r2, #20
 8002082:	21c8      	movs	r1, #200	; 0xc8
 8002084:	203c      	movs	r0, #60	; 0x3c
 8002086:	f7ff fa22 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 800208a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2305      	movs	r3, #5
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2314      	movs	r3, #20
 8002096:	2214      	movs	r2, #20
 8002098:	21c8      	movs	r1, #200	; 0xc8
 800209a:	205a      	movs	r0, #90	; 0x5a
 800209c:	f7ff fa17 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 80020a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	2305      	movs	r3, #5
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2314      	movs	r3, #20
 80020ac:	2214      	movs	r2, #20
 80020ae:	21c8      	movs	r1, #200	; 0xc8
 80020b0:	2078      	movs	r0, #120	; 0x78
 80020b2:	f7ff fa0c 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 80020b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	2305      	movs	r3, #5
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2314      	movs	r3, #20
 80020c2:	2214      	movs	r2, #20
 80020c4:	21c8      	movs	r1, #200	; 0xc8
 80020c6:	2096      	movs	r0, #150	; 0x96
 80020c8:	f7ff fa01 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 80020cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	2305      	movs	r3, #5
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2314      	movs	r3, #20
 80020d8:	2214      	movs	r2, #20
 80020da:	21c8      	movs	r1, #200	; 0xc8
 80020dc:	20b4      	movs	r0, #180	; 0xb4
 80020de:	f7ff f9f6 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 80020e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	2305      	movs	r3, #5
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2314      	movs	r3, #20
 80020ee:	2214      	movs	r2, #20
 80020f0:	21c8      	movs	r1, #200	; 0xc8
 80020f2:	20d2      	movs	r0, #210	; 0xd2
 80020f4:	f7ff f9eb 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 80020f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	2305      	movs	r3, #5
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2314      	movs	r3, #20
 8002104:	2214      	movs	r2, #20
 8002106:	21c8      	movs	r1, #200	; 0xc8
 8002108:	20f0      	movs	r0, #240	; 0xf0
 800210a:	f7ff f9e0 	bl	80014ce <GFX_DrawRoundRectangle>

	  HAL_Delay(100); // !!!! TODO
 800210e:	2064      	movs	r0, #100	; 0x64
 8002110:	f001 f83a 	bl	8003188 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 8002114:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	2305      	movs	r3, #5
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2314      	movs	r3, #20
 8002120:	2214      	movs	r2, #20
 8002122:	21c8      	movs	r1, #200	; 0xc8
 8002124:	203c      	movs	r0, #60	; 0x3c
 8002126:	f7ff fa4f 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 800212a:	2064      	movs	r0, #100	; 0x64
 800212c:	f001 f82c 	bl	8003188 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 8002130:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	2305      	movs	r3, #5
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2314      	movs	r3, #20
 800213c:	2214      	movs	r2, #20
 800213e:	21c8      	movs	r1, #200	; 0xc8
 8002140:	205a      	movs	r0, #90	; 0x5a
 8002142:	f7ff fa41 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 8002146:	2064      	movs	r0, #100	; 0x64
 8002148:	f001 f81e 	bl	8003188 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 800214c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	2305      	movs	r3, #5
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2314      	movs	r3, #20
 8002158:	2214      	movs	r2, #20
 800215a:	21c8      	movs	r1, #200	; 0xc8
 800215c:	2078      	movs	r0, #120	; 0x78
 800215e:	f7ff fa33 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 8002162:	2064      	movs	r0, #100	; 0x64
 8002164:	f001 f810 	bl	8003188 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 8002168:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	2305      	movs	r3, #5
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2314      	movs	r3, #20
 8002174:	2214      	movs	r2, #20
 8002176:	21c8      	movs	r1, #200	; 0xc8
 8002178:	2096      	movs	r0, #150	; 0x96
 800217a:	f7ff fa25 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 800217e:	2064      	movs	r0, #100	; 0x64
 8002180:	f001 f802 	bl	8003188 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 8002184:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	2305      	movs	r3, #5
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2314      	movs	r3, #20
 8002190:	2214      	movs	r2, #20
 8002192:	21c8      	movs	r1, #200	; 0xc8
 8002194:	20b4      	movs	r0, #180	; 0xb4
 8002196:	f7ff fa17 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 800219a:	2064      	movs	r0, #100	; 0x64
 800219c:	f000 fff4 	bl	8003188 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 80021a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	2305      	movs	r3, #5
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2314      	movs	r3, #20
 80021ac:	2214      	movs	r2, #20
 80021ae:	21c8      	movs	r1, #200	; 0xc8
 80021b0:	20d2      	movs	r0, #210	; 0xd2
 80021b2:	f7ff fa09 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(100); // !!!! TODO
 80021b6:	2064      	movs	r0, #100	; 0x64
 80021b8:	f000 ffe6 	bl	8003188 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 80021bc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	2305      	movs	r3, #5
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2314      	movs	r3, #20
 80021c8:	2214      	movs	r2, #20
 80021ca:	21c8      	movs	r1, #200	; 0xc8
 80021cc:	20f0      	movs	r0, #240	; 0xf0
 80021ce:	f7ff f9fb 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  HAL_Delay(200); // !!!! TODO
 80021d2:	20c8      	movs	r0, #200	; 0xc8
 80021d4:	f000 ffd8 	bl	8003188 <HAL_Delay>



	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80021d8:	2301      	movs	r3, #1
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	0800c61c 	.word	0x0800c61c
 80021e8:	0800c5a0 	.word	0x0800c5a0
 80021ec:	0800a548 	.word	0x0800a548
 80021f0:	20000214 	.word	0x20000214

080021f4 <showCurrentParameters>:

void showCurrentParameters(uint8_t temp_zew, uint8_t temp_wew, uint8_t time, uint8_t water_lvl, uint8_t humidity)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	4604      	mov	r4, r0
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4623      	mov	r3, r4
 8002204:	71fb      	strb	r3, [r7, #7]
 8002206:	4603      	mov	r3, r0
 8002208:	71bb      	strb	r3, [r7, #6]
 800220a:	460b      	mov	r3, r1
 800220c:	717b      	strb	r3, [r7, #5]
 800220e:	4613      	mov	r3, r2
 8002210:	713b      	strb	r3, [r7, #4]
		// TODO zrobić żeby czytało właściwe wartości
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002212:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002216:	f7ff fe2b 	bl	8001e70 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800221a:	482d      	ldr	r0, [pc, #180]	; (80022d0 <showCurrentParameters+0xdc>)
 800221c:	f7ff fa24 	bl	8001668 <EF_SetFont>
	  uint8_t Len = sprintf((char*)Msg, "Czas: 00:00:00");
 8002220:	492c      	ldr	r1, [pc, #176]	; (80022d4 <showCurrentParameters+0xe0>)
 8002222:	482d      	ldr	r0, [pc, #180]	; (80022d8 <showCurrentParameters+0xe4>)
 8002224:	f004 fb6a 	bl	80068fc <siprintf>
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800222c:	2300      	movs	r3, #0
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	2300      	movs	r3, #0
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2300      	movs	r3, #0
 8002236:	2214      	movs	r2, #20
 8002238:	2114      	movs	r1, #20
 800223a:	4827      	ldr	r0, [pc, #156]	; (80022d8 <showCurrentParameters+0xe4>)
 800223c:	f7ff fc2e 	bl	8001a9c <EF_PutString>
	  Len = sprintf((char*)Msg, "Temp. zewn: 0`C");
 8002240:	4926      	ldr	r1, [pc, #152]	; (80022dc <showCurrentParameters+0xe8>)
 8002242:	4825      	ldr	r0, [pc, #148]	; (80022d8 <showCurrentParameters+0xe4>)
 8002244:	f004 fb5a 	bl	80068fc <siprintf>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 50, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800224c:	2300      	movs	r3, #0
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2300      	movs	r3, #0
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2300      	movs	r3, #0
 8002256:	2232      	movs	r2, #50	; 0x32
 8002258:	2114      	movs	r1, #20
 800225a:	481f      	ldr	r0, [pc, #124]	; (80022d8 <showCurrentParameters+0xe4>)
 800225c:	f7ff fc1e 	bl	8001a9c <EF_PutString>
	  Len = sprintf((char*)Msg, "Temp. wewn: 0`C");
 8002260:	491f      	ldr	r1, [pc, #124]	; (80022e0 <showCurrentParameters+0xec>)
 8002262:	481d      	ldr	r0, [pc, #116]	; (80022d8 <showCurrentParameters+0xe4>)
 8002264:	f004 fb4a 	bl	80068fc <siprintf>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 80, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800226c:	2300      	movs	r3, #0
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	2300      	movs	r3, #0
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2300      	movs	r3, #0
 8002276:	2250      	movs	r2, #80	; 0x50
 8002278:	2114      	movs	r1, #20
 800227a:	4817      	ldr	r0, [pc, #92]	; (80022d8 <showCurrentParameters+0xe4>)
 800227c:	f7ff fc0e 	bl	8001a9c <EF_PutString>
	  Len = sprintf((char*)Msg, "Wilgotność: 0%%");
 8002280:	4918      	ldr	r1, [pc, #96]	; (80022e4 <showCurrentParameters+0xf0>)
 8002282:	4815      	ldr	r0, [pc, #84]	; (80022d8 <showCurrentParameters+0xe4>)
 8002284:	f004 fb3a 	bl	80068fc <siprintf>
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 110, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 800228c:	2300      	movs	r3, #0
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	2300      	movs	r3, #0
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2300      	movs	r3, #0
 8002296:	226e      	movs	r2, #110	; 0x6e
 8002298:	2114      	movs	r1, #20
 800229a:	480f      	ldr	r0, [pc, #60]	; (80022d8 <showCurrentParameters+0xe4>)
 800229c:	f7ff fbfe 	bl	8001a9c <EF_PutString>
	  Len = sprintf((char*)Msg, "Poziom wody: 0%%");
 80022a0:	4911      	ldr	r1, [pc, #68]	; (80022e8 <showCurrentParameters+0xf4>)
 80022a2:	480d      	ldr	r0, [pc, #52]	; (80022d8 <showCurrentParameters+0xe4>)
 80022a4:	f004 fb2a 	bl	80068fc <siprintf>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]
	  EF_PutString(Msg, 20, 140, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2300      	movs	r3, #0
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2300      	movs	r3, #0
 80022b6:	228c      	movs	r2, #140	; 0x8c
 80022b8:	2114      	movs	r1, #20
 80022ba:	4807      	ldr	r0, [pc, #28]	; (80022d8 <showCurrentParameters+0xe4>)
 80022bc:	f7ff fbee 	bl	8001a9c <EF_PutString>
	  Len++;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	3301      	adds	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd90      	pop	{r4, r7, pc}
 80022ce:	bf00      	nop
 80022d0:	0800c5a0 	.word	0x0800c5a0
 80022d4:	0800a55c 	.word	0x0800a55c
 80022d8:	20000214 	.word	0x20000214
 80022dc:	0800a56c 	.word	0x0800a56c
 80022e0:	0800a57c 	.word	0x0800a57c
 80022e4:	0800a58c 	.word	0x0800a58c
 80022e8:	0800a5a0 	.word	0x0800a5a0

080022ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b32      	ldr	r3, [pc, #200]	; (80023d0 <MX_GPIO_Init+0xe4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a31      	ldr	r2, [pc, #196]	; (80023d0 <MX_GPIO_Init+0xe4>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <MX_GPIO_Init+0xe4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <MX_GPIO_Init+0xe4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <MX_GPIO_Init+0xe4>)
 8002328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <MX_GPIO_Init+0xe4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <MX_GPIO_Init+0xe4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <MX_GPIO_Init+0xe4>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <MX_GPIO_Init+0xe4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <MX_GPIO_Init+0xe4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <MX_GPIO_Init+0xe4>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <MX_GPIO_Init+0xe4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002378:	4816      	ldr	r0, [pc, #88]	; (80023d4 <MX_GPIO_Init+0xe8>)
 800237a:	f001 fdc1 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002384:	4814      	ldr	r0, [pc, #80]	; (80023d8 <MX_GPIO_Init+0xec>)
 8002386:	f001 fdbb 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 800238a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800238e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002390:	2301      	movs	r3, #1
 8002392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	4619      	mov	r1, r3
 80023a2:	480c      	ldr	r0, [pc, #48]	; (80023d4 <MX_GPIO_Init+0xe8>)
 80023a4:	f001 fc28 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80023a8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80023ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ae:	2301      	movs	r3, #1
 80023b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_GPIO_Init+0xec>)
 80023c2:	f001 fc19 	bl	8003bf8 <HAL_GPIO_Init>

}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	; 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020400 	.word	0x40020400

080023dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e2:	f000 fe5f 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e6:	f000 f833 	bl	8002450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ea:	f7ff ff7f 	bl	80022ec <MX_GPIO_Init>
  MX_SPI1_Init();
 80023ee:	f000 f9e7 	bl	80027c0 <MX_SPI1_Init>
  MX_DMA_Init();
 80023f2:	f7ff fdef 	bl	8001fd4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80023f6:	f000 fd4d 	bl	8002e94 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1);
 80023fa:	4811      	ldr	r0, [pc, #68]	; (8002440 <main+0x64>)
 80023fc:	f7ff fd96 	bl	8001f2c <ILI9341_Init>

  system_init();
 8002400:	f7ff fe10 	bl	8002024 <system_init>

  showCurrentParameters(0, 0, 0, 0, 0);
 8002404:	2300      	movs	r3, #0
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2300      	movs	r3, #0
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	2000      	movs	r0, #0
 8002410:	f7ff fef0 	bl	80021f4 <showCurrentParameters>

  UARTDMA_Init(&huartdma2, &huart2);
 8002414:	490b      	ldr	r1, [pc, #44]	; (8002444 <main+0x68>)
 8002416:	480c      	ldr	r0, [pc, #48]	; (8002448 <main+0x6c>)
 8002418:	f000 fced 	bl	8002df6 <UARTDMA_Init>
  while (1)
  {

	 // ILI9341_DrawImage(40, 50, logo, 240, 140);

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 800241c:	480a      	ldr	r0, [pc, #40]	; (8002448 <main+0x6c>)
 800241e:	f000 fc9e 	bl	8002d5e <UARTDMA_IsDataReceivedReady>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <main+0x52>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8002428:	4807      	ldr	r0, [pc, #28]	; (8002448 <main+0x6c>)
 800242a:	f000 f87f 	bl	800252c <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 800242e:	4806      	ldr	r0, [pc, #24]	; (8002448 <main+0x6c>)
 8002430:	f000 fca7 	bl	8002d82 <UARTDMA_TransmitEvent>
	  HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 8002434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002438:	4804      	ldr	r0, [pc, #16]	; (800244c <main+0x70>)
 800243a:	f001 fd7a 	bl	8003f32 <HAL_GPIO_TogglePin>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 800243e:	e7ed      	b.n	800241c <main+0x40>
 8002440:	20000384 	.word	0x20000384
 8002444:	2000049c 	.word	0x2000049c
 8002448:	20000234 	.word	0x20000234
 800244c:	40020800 	.word	0x40020800

08002450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b094      	sub	sp, #80	; 0x50
 8002454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002456:	f107 0320 	add.w	r3, r7, #32
 800245a:	2230      	movs	r2, #48	; 0x30
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f003 fbc4 	bl	8005bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <SystemClock_Config+0xc8>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	4a26      	ldr	r2, [pc, #152]	; (8002518 <SystemClock_Config+0xc8>)
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002482:	6413      	str	r3, [r2, #64]	; 0x40
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <SystemClock_Config+0xc8>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002490:	2300      	movs	r3, #0
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <SystemClock_Config+0xcc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a20      	ldr	r2, [pc, #128]	; (800251c <SystemClock_Config+0xcc>)
 800249a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <SystemClock_Config+0xcc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b6:	2302      	movs	r3, #2
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80024c0:	230c      	movs	r3, #12
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80024c4:	2360      	movs	r3, #96	; 0x60
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024c8:	2302      	movs	r3, #2
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024cc:	2304      	movs	r3, #4
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d0:	f107 0320 	add.w	r3, r7, #32
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 fd47 	bl	8003f68 <HAL_RCC_OscConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024e0:	f000 f81e 	bl	8002520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e4:	230f      	movs	r3, #15
 80024e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024e8:	2302      	movs	r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024fa:	f107 030c 	add.w	r3, r7, #12
 80024fe:	2103      	movs	r1, #3
 8002500:	4618      	mov	r0, r3
 8002502:	f001 ffa9 	bl	8004458 <HAL_RCC_ClockConfig>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800250c:	f000 f808 	bl	8002520 <Error_Handler>
  }
}
 8002510:	bf00      	nop
 8002512:	3750      	adds	r7, #80	; 0x50
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	40007000 	.word	0x40007000

08002520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
}
 8002526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002528:	e7fe      	b.n	8002528 <Error_Handler+0x8>
	...

0800252c <UART_ParseLine>:
 * 		CHSTATE=1,0\n	// Zmien stan przekaznika 1 na wylaczony
 * 		CHSTATE=2,1\n	// Zmien stan przekaznika 2 na wlaczony
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b094      	sub	sp, #80	; 0x50
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8002534:	f107 0308 	add.w	r3, r7, #8
 8002538:	4619      	mov	r1, r3
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fbb8 	bl	8002cb0 <UARTDMA_GetLineFromReceiveBuffer>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d12f      	bne.n	80025a6 <UART_ParseLine+0x7a>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8002546:	f107 0308 	add.w	r3, r7, #8
 800254a:	4919      	ldr	r1, [pc, #100]	; (80025b0 <UART_ParseLine+0x84>)
 800254c:	4618      	mov	r0, r3
 800254e:	f005 f82f 	bl	80075b0 <strtok>
 8002552:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8002554:	4917      	ldr	r1, [pc, #92]	; (80025b4 <UART_ParseLine+0x88>)
 8002556:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002558:	f7fd fe42 	bl	80001e0 <strcmp>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8002562:	f000 f831 	bl	80025c8 <UART_ParseLED>
	  {
		  void UART_ParseAnswChangeRelayState();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8002566:	e01e      	b.n	80025a6 <UART_ParseLine+0x7a>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8002568:	4913      	ldr	r1, [pc, #76]	; (80025b8 <UART_ParseLine+0x8c>)
 800256a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800256c:	f7fd fe38 	bl	80001e0 <strcmp>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8002576:	f000 f875 	bl	8002664 <UART_ParseAnswStatus>
}
 800257a:	e014      	b.n	80025a6 <UART_ParseLine+0x7a>
	  else if (strcmp(ParsePointer, "ATEMP") == 0)
 800257c:	490f      	ldr	r1, [pc, #60]	; (80025bc <UART_ParseLine+0x90>)
 800257e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002580:	f7fd fe2e 	bl	80001e0 <strcmp>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 800258a:	f000 f873 	bl	8002674 <UART_ParseAnswTemp>
}
 800258e:	e00a      	b.n	80025a6 <UART_ParseLine+0x7a>
	  else if (strcmp(ParsePointer, "APRES") == 0)
 8002590:	490b      	ldr	r1, [pc, #44]	; (80025c0 <UART_ParseLine+0x94>)
 8002592:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002594:	f7fd fe24 	bl	80001e0 <strcmp>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <UART_ParseLine+0x7a>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0)
 800259e:	4909      	ldr	r1, [pc, #36]	; (80025c4 <UART_ParseLine+0x98>)
 80025a0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80025a2:	f7fd fe1d 	bl	80001e0 <strcmp>
}
 80025a6:	bf00      	nop
 80025a8:	3750      	adds	r7, #80	; 0x50
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	0800a5b4 	.word	0x0800a5b4
 80025b4:	0800a5b8 	.word	0x0800a5b8
 80025b8:	0800a5bc 	.word	0x0800a5bc
 80025bc:	0800a5c4 	.word	0x0800a5c4
 80025c0:	0800a5cc 	.word	0x0800a5cc
 80025c4:	0800a5d4 	.word	0x0800a5d4

080025c8 <UART_ParseLED>:


/////////////////////////////////////////// FUNKCJA PARSOWANIA USER LED ////////////////////////////////////////////////////////////////////////////

void UART_ParseLED()
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80025ce:	491f      	ldr	r1, [pc, #124]	; (800264c <UART_ParseLED+0x84>)
 80025d0:	2000      	movs	r0, #0
 80025d2:	f004 ffed 	bl	80075b0 <strtok>
 80025d6:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d031      	beq.n	8002644 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b2f      	cmp	r3, #47	; 0x2f
 80025e6:	d903      	bls.n	80025f0 <UART_ParseLED+0x28>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b39      	cmp	r3, #57	; 0x39
 80025ee:	d904      	bls.n	80025fa <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 80025f0:	4917      	ldr	r1, [pc, #92]	; (8002650 <UART_ParseLED+0x88>)
 80025f2:	4818      	ldr	r0, [pc, #96]	; (8002654 <UART_ParseLED+0x8c>)
 80025f4:	f000 fb8d 	bl	8002d12 <UARTDMA_Print>
			return;	// And exit parsing
 80025f8:	e024      	b.n	8002644 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f003 fac7 	bl	8005b8e <atoi>
 8002600:	4603      	mov	r3, r0
 8002602:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d10a      	bne.n	8002620 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002610:	4811      	ldr	r0, [pc, #68]	; (8002658 <UART_ParseLED+0x90>)
 8002612:	f001 fc75 	bl	8003f00 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8002616:	4911      	ldr	r1, [pc, #68]	; (800265c <UART_ParseLED+0x94>)
 8002618:	480e      	ldr	r0, [pc, #56]	; (8002654 <UART_ParseLED+0x8c>)
 800261a:	f000 fb7a 	bl	8002d12 <UARTDMA_Print>
 800261e:	e011      	b.n	8002644 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10a      	bne.n	800263c <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 8002626:	2201      	movs	r2, #1
 8002628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800262c:	480a      	ldr	r0, [pc, #40]	; (8002658 <UART_ParseLED+0x90>)
 800262e:	f001 fc67 	bl	8003f00 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8002632:	490b      	ldr	r1, [pc, #44]	; (8002660 <UART_ParseLED+0x98>)
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <UART_ParseLED+0x8c>)
 8002636:	f000 fb6c 	bl	8002d12 <UARTDMA_Print>
 800263a:	e003      	b.n	8002644 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 800263c:	4904      	ldr	r1, [pc, #16]	; (8002650 <UART_ParseLED+0x88>)
 800263e:	4805      	ldr	r0, [pc, #20]	; (8002654 <UART_ParseLED+0x8c>)
 8002640:	f000 fb67 	bl	8002d12 <UARTDMA_Print>
		}
	}
}
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	0800a5e0 	.word	0x0800a5e0
 8002650:	0800a5e4 	.word	0x0800a5e4
 8002654:	20000234 	.word	0x20000234
 8002658:	40020800 	.word	0x40020800
 800265c:	0800a5f4 	.word	0x0800a5f4
 8002660:	0800a600 	.word	0x0800a600

08002664 <UART_ParseAnswStatus>:

void UART_ParseAnswStatus()
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
	//TODO: Dodac obsluge statusu urzadzenia
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <UART_ParseAnswTemp>:


void UART_ParseAnswTemp()
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 800267a:	491c      	ldr	r1, [pc, #112]	; (80026ec <UART_ParseAnswTemp+0x78>)
 800267c:	2000      	movs	r0, #0
 800267e:	f004 ff97 	bl	80075b0 <strtok>
 8002682:	6078      	str	r0, [r7, #4]
	uint8_t Len;
	if(strlen(ParsePointer) > 0) // If string exists
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d02a      	beq.n	80026e2 <UART_ParseAnswTemp+0x6e>
	{

		CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f003 fa7b 	bl	8005b88 <atof>
 8002692:	ec53 2b10 	vmov	r2, r3, d0
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f7fe fabd 	bl	8000c18 <__aeabi_d2f>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <UART_ParseAnswTemp+0x7c>)
 80026a2:	6013      	str	r3, [r2, #0]
		Len = sprintf((char*)Msg, "Temp. zewn: %f`C", CTemp);
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <UART_ParseAnswTemp+0x7c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ff65 	bl	8000578 <__aeabi_f2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4910      	ldr	r1, [pc, #64]	; (80026f4 <UART_ParseAnswTemp+0x80>)
 80026b4:	4810      	ldr	r0, [pc, #64]	; (80026f8 <UART_ParseAnswTemp+0x84>)
 80026b6:	f004 f921 	bl	80068fc <siprintf>
 80026ba:	4603      	mov	r3, r0
 80026bc:	70fb      	strb	r3, [r7, #3]
		EF_PutString(Msg, 20, 50, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80026be:	f24c 6318 	movw	r3, #50712	; 0xc618
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2301      	movs	r3, #1
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	2300      	movs	r3, #0
 80026ca:	2232      	movs	r2, #50	; 0x32
 80026cc:	2114      	movs	r1, #20
 80026ce:	480a      	ldr	r0, [pc, #40]	; (80026f8 <UART_ParseAnswTemp+0x84>)
 80026d0:	f7ff f9e4 	bl	8001a9c <EF_PutString>
		UARTDMA_Print(&huartdma2, "TEMP UPDATED! \r\n");
 80026d4:	4909      	ldr	r1, [pc, #36]	; (80026fc <UART_ParseAnswTemp+0x88>)
 80026d6:	480a      	ldr	r0, [pc, #40]	; (8002700 <UART_ParseAnswTemp+0x8c>)
 80026d8:	f000 fb1b 	bl	8002d12 <UARTDMA_Print>
		Len++;
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	3301      	adds	r3, #1
 80026e0:	70fb      	strb	r3, [r7, #3]
	}
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	0800a5e0 	.word	0x0800a5e0
 80026f0:	200001fc 	.word	0x200001fc
 80026f4:	0800a60c 	.word	0x0800a60c
 80026f8:	20000214 	.word	0x20000214
 80026fc:	0800a620 	.word	0x0800a620
 8002700:	20000234 	.word	0x20000234

08002704 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	429a      	cmp	r2, r3
 8002718:	d101      	bne.n	800271e <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 800271a:	2301      	movs	r3, #1
 800271c:	e018      	b.n	8002750 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	461a      	mov	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	789a      	ldrb	r2, [r3, #2]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	785b      	ldrb	r3, [r3, #1]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <RB_Read+0x58>)
 8002736:	fb83 1302 	smull	r1, r3, r3, r2
 800273a:	1159      	asrs	r1, r3, #5
 800273c:	17d3      	asrs	r3, r2, #31
 800273e:	1ac9      	subs	r1, r1, r3
 8002740:	460b      	mov	r3, r1
 8002742:	019b      	lsls	r3, r3, #6
 8002744:	440b      	add	r3, r1
 8002746:	1ad1      	subs	r1, r2, r3
 8002748:	b2ca      	uxtb	r2, r1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	7e07e07f 	.word	0x7e07e07f

08002760 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <RB_Write+0x5c>)
 8002774:	fb83 1302 	smull	r1, r3, r3, r2
 8002778:	1159      	asrs	r1, r3, #5
 800277a:	17d3      	asrs	r3, r2, #31
 800277c:	1ac9      	subs	r1, r1, r3
 800277e:	460b      	mov	r3, r1
 8002780:	019b      	lsls	r3, r3, #6
 8002782:	440b      	add	r3, r1
 8002784:	1ad1      	subs	r1, r2, r3
 8002786:	460b      	mov	r3, r1
 8002788:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	429a      	cmp	r2, r3
 8002792:	d101      	bne.n	8002798 <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 8002794:	2301      	movs	r3, #1
 8002796:	e00a      	b.n	80027ae <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	7e07e07f 	.word	0x7e07e07f

080027c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <MX_SPI1_Init+0x64>)
 80027c6:	4a18      	ldr	r2, [pc, #96]	; (8002828 <MX_SPI1_Init+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <MX_SPI1_Init+0x64>)
 80027cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <MX_SPI1_Init+0x64>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_SPI1_Init+0x64>)
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <MX_SPI1_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <MX_SPI1_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <MX_SPI1_Init+0x64>)
 80027ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <MX_SPI1_Init+0x64>)
 80027f4:	2210      	movs	r2, #16
 80027f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <MX_SPI1_Init+0x64>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <MX_SPI1_Init+0x64>)
 8002800:	2200      	movs	r2, #0
 8002802:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <MX_SPI1_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_SPI1_Init+0x64>)
 800280c:	220a      	movs	r2, #10
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002810:	4804      	ldr	r0, [pc, #16]	; (8002824 <MX_SPI1_Init+0x64>)
 8002812:	f001 fff1 	bl	80047f8 <HAL_SPI_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800281c:	f7ff fe80 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000384 	.word	0x20000384
 8002828:	40013000 	.word	0x40013000

0800282c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_SPI_MspInit+0x84>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d12b      	bne.n	80028a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002886:	23e0      	movs	r3, #224	; 0xe0
 8002888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002896:	2305      	movs	r3, #5
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <HAL_SPI_MspInit+0x8c>)
 80028a2:	f001 f9a9 	bl	8003bf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028a6:	bf00      	nop
 80028a8:	3728      	adds	r7, #40	; 0x28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40013000 	.word	0x40013000
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020000 	.word	0x40020000

080028bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_MspInit+0x4c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a0f      	ldr	r2, [pc, #60]	; (8002908 <HAL_MspInit+0x4c>)
 80028cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <HAL_MspInit+0x4c>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_MspInit+0x4c>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a08      	ldr	r2, [pc, #32]	; (8002908 <HAL_MspInit+0x4c>)
 80028e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_MspInit+0x4c>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800

0800290c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <NMI_Handler+0x4>

08002912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <HardFault_Handler+0x4>

08002918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <MemManage_Handler+0x4>

0800291e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <BusFault_Handler+0x4>

08002924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002928:	e7fe      	b.n	8002928 <UsageFault_Handler+0x4>

0800292a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002958:	f000 fbf6 	bl	8003148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}

08002960 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <DMA1_Stream5_IRQHandler+0x10>)
 8002966:	f000 f91f 	bl	8002ba8 <UARTDMA_DmaReceiveIrqHandler>
	return;
 800296a:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000234 	.word	0x20000234

08002974 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <DMA1_Stream6_IRQHandler+0x10>)
 800297a:	f000 fed3 	bl	8003724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	2000043c 	.word	0x2000043c

08002988 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 800298c:	4803      	ldr	r0, [pc, #12]	; (800299c <USART2_IRQHandler+0x14>)
 800298e:	f000 f8e1 	bl	8002b54 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002992:	4803      	ldr	r0, [pc, #12]	; (80029a0 <USART2_IRQHandler+0x18>)
 8002994:	f002 f8b4 	bl	8004b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000234 	.word	0x20000234
 80029a0:	2000049c 	.word	0x2000049c

080029a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
	return 1;
 80029a8:	2301      	movs	r3, #1
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <_kill>:

int _kill(int pid, int sig)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029be:	f003 f8eb 	bl	8005b98 <__errno>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2216      	movs	r2, #22
 80029c6:	601a      	str	r2, [r3, #0]
	return -1;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_exit>:

void _exit (int status)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ffe7 	bl	80029b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029e6:	e7fe      	b.n	80029e6 <_exit+0x12>

080029e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	e00a      	b.n	8002a10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029fa:	f3af 8000 	nop.w
 80029fe:	4601      	mov	r1, r0
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	60ba      	str	r2, [r7, #8]
 8002a06:	b2ca      	uxtb	r2, r1
 8002a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	dbf0      	blt.n	80029fa <_read+0x12>
	}

return len;
 8002a18:	687b      	ldr	r3, [r7, #4]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	e009      	b.n	8002a48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	60ba      	str	r2, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3301      	adds	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	dbf1      	blt.n	8002a34 <_write+0x12>
	}
	return len;
 8002a50:	687b      	ldr	r3, [r7, #4]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <_close>:

int _close(int file)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
	return -1;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a82:	605a      	str	r2, [r3, #4]
	return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <_isatty>:

int _isatty(int file)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	return 1;
 8002a9a:	2301      	movs	r3, #1
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <_sbrk+0x5c>)
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <_sbrk+0x60>)
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <_sbrk+0x64>)
 8002ae2:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <_sbrk+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d207      	bcs.n	8002b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af4:	f003 f850 	bl	8005b98 <__errno>
 8002af8:	4603      	mov	r3, r0
 8002afa:	220c      	movs	r2, #12
 8002afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e009      	b.n	8002b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <_sbrk+0x64>)
 8002b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20020000 	.word	0x20020000
 8002b24:	00000400 	.word	0x00000400
 8002b28:	20000200 	.word	0x20000200
 8002b2c:	200004f8 	.word	0x200004f8

08002b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <SystemInit+0x20>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <SystemInit+0x20>)
 8002b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d017      	beq.n	8002b9c <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	60fb      	str	r3, [r7, #12]
	}
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d056      	beq.n	8002c7a <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8002bec:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	82fb      	strh	r3, [r7, #22]
 8002bf8:	e01a      	b.n	8002c30 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f103 0045 	add.w	r0, r3, #69	; 0x45
 8002c00:	8afb      	ldrh	r3, [r7, #22]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4413      	add	r3, r2
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7ff fda9 	bl	8002760 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8002c0e:	8afb      	ldrh	r3, [r7, #22]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	4413      	add	r3, r2
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b0a      	cmp	r3, #10
 8002c18:	d107      	bne.n	8002c2a <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002c20:	3301      	adds	r3, #1
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8002c2a:	8afb      	ldrh	r3, [r7, #22]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	82fb      	strh	r3, [r7, #22]
 8002c30:	8afa      	ldrh	r2, [r7, #22]
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3e0      	bcc.n	8002bfa <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	223f      	movs	r2, #63	; 0x3f
 8002c42:	409a      	lsls	r2, r3
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	1d1a      	adds	r2, r3, #4
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2241      	movs	r2, #65	; 0x41
 8002c60:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
	}
}
 8002c7a:	bf00      	nop
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	33ca      	adds	r3, #202	; 0xca
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fd62 	bl	8002760 <RB_Write>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01f      	beq.n	8002d08 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8002cc8:	e013      	b.n	8002cf2 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b0a      	cmp	r3, #10
 8002cd0:	d10c      	bne.n	8002cec <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e00e      	b.n	8002d0a <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3345      	adds	r3, #69	; 0x45
 8002cf6:	68f9      	ldr	r1, [r7, #12]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fd03 	bl	8002704 <RB_Read>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0e2      	beq.n	8002cca <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8002d08:	2301      	movs	r3, #1
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8002d20:	e012      	b.n	8002d48 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8002d22:	7afb      	ldrb	r3, [r7, #11]
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffab 	bl	8002c82 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	2b0a      	cmp	r3, #10
 8002d36:	d107      	bne.n	8002d48 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	72fb      	strb	r3, [r7, #11]
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e6      	bne.n	8002d22 <UARTDMA_Print+0x10>
		}
	}
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d027      	beq.n	8002dee <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8002d9e:	e013      	b.n	8002dc8 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8002da0:	7b7b      	ldrb	r3, [r7, #13]
 8002da2:	2b0a      	cmp	r3, #10
 8002da4:	d107      	bne.n	8002db6 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8002db6:	89fb      	ldrh	r3, [r7, #14]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	81fa      	strh	r2, [r7, #14]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	7b7a      	ldrb	r2, [r7, #13]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	33ca      	adds	r3, #202	; 0xca
 8002dcc:	f107 020d 	add.w	r2, r7, #13
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fc96 	bl	8002704 <RB_Read>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0e0      	beq.n	8002da0 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3389      	adds	r3, #137	; 0x89
 8002de6:	89fa      	ldrh	r2, [r7, #14]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f001 fddb 	bl	80049a4 <HAL_UART_Transmit_DMA>
	}
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0210 	orr.w	r2, r2, #16
 8002e18:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0210 	orr.w	r2, r2, #16
 8002e30:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0210 	orr.w	r2, r2, #16
 8002e48:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2241      	movs	r2, #65	; 0x41
 8002e54:	4619      	mov	r1, r3
 8002e56:	f001 fe23 	bl	8004aa0 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0208 	bic.w	r2, r2, #8
 8002e70:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0208 	bic.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <MX_USART2_UART_Init+0x4c>)
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <MX_USART2_UART_Init+0x50>)
 8002e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <MX_USART2_UART_Init+0x4c>)
 8002ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <MX_USART2_UART_Init+0x4c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <MX_USART2_UART_Init+0x4c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <MX_USART2_UART_Init+0x4c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <MX_USART2_UART_Init+0x4c>)
 8002eba:	220c      	movs	r2, #12
 8002ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <MX_USART2_UART_Init+0x4c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <MX_USART2_UART_Init+0x4c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eca:	4805      	ldr	r0, [pc, #20]	; (8002ee0 <MX_USART2_UART_Init+0x4c>)
 8002ecc:	f001 fd1d 	bl	800490a <HAL_UART_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ed6:	f7ff fb23 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	2000049c 	.word	0x2000049c
 8002ee4:	40004400 	.word	0x40004400

08002ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a4b      	ldr	r2, [pc, #300]	; (8003034 <HAL_UART_MspInit+0x14c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	f040 8090 	bne.w	800302c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	4b49      	ldr	r3, [pc, #292]	; (8003038 <HAL_UART_MspInit+0x150>)
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	4a48      	ldr	r2, [pc, #288]	; (8003038 <HAL_UART_MspInit+0x150>)
 8002f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1c:	4b46      	ldr	r3, [pc, #280]	; (8003038 <HAL_UART_MspInit+0x150>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	4b42      	ldr	r3, [pc, #264]	; (8003038 <HAL_UART_MspInit+0x150>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	4a41      	ldr	r2, [pc, #260]	; (8003038 <HAL_UART_MspInit+0x150>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6313      	str	r3, [r2, #48]	; 0x30
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <HAL_UART_MspInit+0x150>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f44:	230c      	movs	r3, #12
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f50:	2303      	movs	r3, #3
 8002f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f54:	2307      	movs	r3, #7
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4837      	ldr	r0, [pc, #220]	; (800303c <HAL_UART_MspInit+0x154>)
 8002f60:	f000 fe4a 	bl	8003bf8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002f66:	4a37      	ldr	r2, [pc, #220]	; (8003044 <HAL_UART_MspInit+0x15c>)
 8002f68:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002f6a:	4b35      	ldr	r3, [pc, #212]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002f6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f70:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f72:	4b33      	ldr	r3, [pc, #204]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f84:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f92:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f98:	4b29      	ldr	r3, [pc, #164]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f9e:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fa4:	4826      	ldr	r0, [pc, #152]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002fa6:	f000 fa25 	bl	80033f4 <HAL_DMA_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002fb0:	f7ff fab6 	bl	8002520 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <HAL_UART_MspInit+0x158>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002fc0:	4b21      	ldr	r3, [pc, #132]	; (8003048 <HAL_UART_MspInit+0x160>)
 8002fc2:	4a22      	ldr	r2, [pc, #136]	; (800304c <HAL_UART_MspInit+0x164>)
 8002fc4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_UART_MspInit+0x160>)
 8002fc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fcc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fce:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <HAL_UART_MspInit+0x160>)
 8002fd0:	2240      	movs	r2, #64	; 0x40
 8002fd2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_UART_MspInit+0x160>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_UART_MspInit+0x160>)
 8002fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fe0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_UART_MspInit+0x160>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_UART_MspInit+0x160>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_UART_MspInit+0x160>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_UART_MspInit+0x160>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <HAL_UART_MspInit+0x160>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003000:	4811      	ldr	r0, [pc, #68]	; (8003048 <HAL_UART_MspInit+0x160>)
 8003002:	f000 f9f7 	bl	80033f4 <HAL_DMA_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800300c:	f7ff fa88 	bl	8002520 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <HAL_UART_MspInit+0x160>)
 8003014:	635a      	str	r2, [r3, #52]	; 0x34
 8003016:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <HAL_UART_MspInit+0x160>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800301c:	2200      	movs	r2, #0
 800301e:	2100      	movs	r1, #0
 8003020:	2026      	movs	r0, #38	; 0x26
 8003022:	f000 f9b0 	bl	8003386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003026:	2026      	movs	r0, #38	; 0x26
 8003028:	f000 f9c9 	bl	80033be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800302c:	bf00      	nop
 800302e:	3728      	adds	r7, #40	; 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40004400 	.word	0x40004400
 8003038:	40023800 	.word	0x40023800
 800303c:	40020000 	.word	0x40020000
 8003040:	200003dc 	.word	0x200003dc
 8003044:	40026088 	.word	0x40026088
 8003048:	2000043c 	.word	0x2000043c
 800304c:	400260a0 	.word	0x400260a0

08003050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003056:	490e      	ldr	r1, [pc, #56]	; (8003090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800305c:	e002      	b.n	8003064 <LoopCopyDataInit>

0800305e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003062:	3304      	adds	r3, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003068:	d3f9      	bcc.n	800305e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306a:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800306c:	4c0b      	ldr	r4, [pc, #44]	; (800309c <LoopFillZerobss+0x26>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003070:	e001      	b.n	8003076 <LoopFillZerobss>

08003072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003074:	3204      	adds	r2, #4

08003076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003078:	d3fb      	bcc.n	8003072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800307a:	f7ff fd59 	bl	8002b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800307e:	f002 fd91 	bl	8005ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003082:	f7ff f9ab 	bl	80023dc <main>
  bx  lr    
 8003086:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003094:	0801d1e0 	.word	0x0801d1e0
  ldr r2, =_sbss
 8003098:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800309c:	200004f4 	.word	0x200004f4

080030a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <HAL_Init+0x40>)
 80030ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <HAL_Init+0x40>)
 80030ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_Init+0x40>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f000 f94f 	bl	8003370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f000 f808 	bl	80030e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d8:	f7ff fbf0 	bl	80028bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023c00 	.word	0x40023c00

080030e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_InitTick+0x54>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_InitTick+0x58>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f967 	bl	80033da <HAL_SYSTICK_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e00e      	b.n	8003134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b0f      	cmp	r3, #15
 800311a:	d80a      	bhi.n	8003132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311c:	2200      	movs	r2, #0
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f000 f92f 	bl	8003386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003128:	4a06      	ldr	r2, [pc, #24]	; (8003144 <HAL_InitTick+0x5c>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000000 	.word	0x20000000
 8003140:	20000008 	.word	0x20000008
 8003144:	20000004 	.word	0x20000004

08003148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_IncTick+0x20>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_IncTick+0x24>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4413      	add	r3, r2
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_IncTick+0x24>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000008 	.word	0x20000008
 800316c:	200004e0 	.word	0x200004e0

08003170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return uwTick;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_GetTick+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	200004e0 	.word	0x200004e0

08003188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff ffee 	bl	8003170 <HAL_GetTick>
 8003194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d005      	beq.n	80031ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_Delay+0x44>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ae:	bf00      	nop
 80031b0:	f7ff ffde 	bl	8003170 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d8f7      	bhi.n	80031b0 <HAL_Delay+0x28>
  {
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000008 	.word	0x20000008

080031d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031ec:	4013      	ands	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003202:	4a04      	ldr	r2, [pc, #16]	; (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	60d3      	str	r3, [r2, #12]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <__NVIC_GetPriorityGrouping+0x18>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	f003 0307 	and.w	r3, r3, #7
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	2b00      	cmp	r3, #0
 8003244:	db0b      	blt.n	800325e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	4907      	ldr	r1, [pc, #28]	; (800326c <__NVIC_EnableIRQ+0x38>)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2001      	movs	r0, #1
 8003256:	fa00 f202 	lsl.w	r2, r0, r2
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100

08003270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	2b00      	cmp	r3, #0
 8003282:	db0a      	blt.n	800329a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	490c      	ldr	r1, [pc, #48]	; (80032bc <__NVIC_SetPriority+0x4c>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	440b      	add	r3, r1
 8003294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003298:	e00a      	b.n	80032b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4908      	ldr	r1, [pc, #32]	; (80032c0 <__NVIC_SetPriority+0x50>)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	3b04      	subs	r3, #4
 80032a8:	0112      	lsls	r2, r2, #4
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	440b      	add	r3, r1
 80032ae:	761a      	strb	r2, [r3, #24]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000e100 	.word	0xe000e100
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f1c3 0307 	rsb	r3, r3, #7
 80032de:	2b04      	cmp	r3, #4
 80032e0:	bf28      	it	cs
 80032e2:	2304      	movcs	r3, #4
 80032e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d902      	bls.n	80032f4 <NVIC_EncodePriority+0x30>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3b03      	subs	r3, #3
 80032f2:	e000      	b.n	80032f6 <NVIC_EncodePriority+0x32>
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	401a      	ands	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800330c:	f04f 31ff 	mov.w	r1, #4294967295
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43d9      	mvns	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	4313      	orrs	r3, r2
         );
}
 800331e:	4618      	mov	r0, r3
 8003320:	3724      	adds	r7, #36	; 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800333c:	d301      	bcc.n	8003342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333e:	2301      	movs	r3, #1
 8003340:	e00f      	b.n	8003362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <SysTick_Config+0x40>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800334a:	210f      	movs	r1, #15
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	f7ff ff8e 	bl	8003270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <SysTick_Config+0x40>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <SysTick_Config+0x40>)
 800335c:	2207      	movs	r2, #7
 800335e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	e000e010 	.word	0xe000e010

08003370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff29 	bl	80031d0 <__NVIC_SetPriorityGrouping>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003386:	b580      	push	{r7, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003398:	f7ff ff3e 	bl	8003218 <__NVIC_GetPriorityGrouping>
 800339c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	6978      	ldr	r0, [r7, #20]
 80033a4:	f7ff ff8e 	bl	80032c4 <NVIC_EncodePriority>
 80033a8:	4602      	mov	r2, r0
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff5d 	bl	8003270 <__NVIC_SetPriority>
}
 80033b6:	bf00      	nop
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff31 	bl	8003234 <__NVIC_EnableIRQ>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ffa2 	bl	800332c <SysTick_Config>
 80033e8:	4603      	mov	r3, r0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff feb6 	bl	8003170 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e099      	b.n	8003544 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003430:	e00f      	b.n	8003452 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003432:	f7ff fe9d 	bl	8003170 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b05      	cmp	r3, #5
 800343e:	d908      	bls.n	8003452 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e078      	b.n	8003544 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e8      	bne.n	8003432 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4b38      	ldr	r3, [pc, #224]	; (800354c <HAL_DMA_Init+0x158>)
 800346c:	4013      	ands	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	4313      	orrs	r3, r2
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0307 	bic.w	r3, r3, #7
 80034d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d117      	bne.n	8003516 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fb01 	bl	8003b00 <DMA_CheckFifoParam>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003512:	2301      	movs	r3, #1
 8003514:	e016      	b.n	8003544 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fab8 	bl	8003a94 <DMA_CalcBaseAndBitshift>
 8003524:	4603      	mov	r3, r0
 8003526:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	223f      	movs	r2, #63	; 0x3f
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	f010803f 	.word	0xf010803f

08003550 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_DMA_Start_IT+0x26>
 8003572:	2302      	movs	r3, #2
 8003574:	e040      	b.n	80035f8 <HAL_DMA_Start_IT+0xa8>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d12f      	bne.n	80035ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fa4a 	bl	8003a38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	223f      	movs	r2, #63	; 0x3f
 80035aa:	409a      	lsls	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0216 	orr.w	r2, r2, #22
 80035be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0208 	orr.w	r2, r2, #8
 80035d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e005      	b.n	80035f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
 80035f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800360e:	f7ff fdaf 	bl	8003170 <HAL_GetTick>
 8003612:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d008      	beq.n	8003632 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e052      	b.n	80036d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0216 	bic.w	r2, r2, #22
 8003640:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003650:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d103      	bne.n	8003662 <HAL_DMA_Abort+0x62>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0208 	bic.w	r2, r2, #8
 8003670:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003682:	e013      	b.n	80036ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003684:	f7ff fd74 	bl	8003170 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b05      	cmp	r3, #5
 8003690:	d90c      	bls.n	80036ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2203      	movs	r2, #3
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e015      	b.n	80036d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e4      	bne.n	8003684 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	223f      	movs	r2, #63	; 0x3f
 80036c0:	409a      	lsls	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d004      	beq.n	80036fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e00c      	b.n	8003718 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2205      	movs	r2, #5
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003730:	4b92      	ldr	r3, [pc, #584]	; (800397c <HAL_DMA_IRQHandler+0x258>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a92      	ldr	r2, [pc, #584]	; (8003980 <HAL_DMA_IRQHandler+0x25c>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	0a9b      	lsrs	r3, r3, #10
 800373c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374e:	2208      	movs	r2, #8
 8003750:	409a      	lsls	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01a      	beq.n	8003790 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0204 	bic.w	r2, r2, #4
 8003776:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	2208      	movs	r2, #8
 800377e:	409a      	lsls	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	f043 0201 	orr.w	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	2201      	movs	r2, #1
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d012      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	2201      	movs	r2, #1
 80037b4:	409a      	lsls	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	f043 0202 	orr.w	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	2204      	movs	r2, #4
 80037cc:	409a      	lsls	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d012      	beq.n	80037fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	2204      	movs	r2, #4
 80037ea:	409a      	lsls	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	f043 0204 	orr.w	r2, r3, #4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	2210      	movs	r2, #16
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d043      	beq.n	8003894 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d03c      	beq.n	8003894 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	2210      	movs	r2, #16
 8003820:	409a      	lsls	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d018      	beq.n	8003866 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d108      	bne.n	8003854 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d024      	beq.n	8003894 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
 8003852:	e01f      	b.n	8003894 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
 8003864:	e016      	b.n	8003894 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0208 	bic.w	r2, r2, #8
 8003882:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	2220      	movs	r2, #32
 800389a:	409a      	lsls	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 808e 	beq.w	80039c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8086 	beq.w	80039c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	2220      	movs	r2, #32
 80038bc:	409a      	lsls	r2, r3
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d136      	bne.n	800393c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0216 	bic.w	r2, r2, #22
 80038dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d103      	bne.n	80038fe <HAL_DMA_IRQHandler+0x1da>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0208 	bic.w	r2, r2, #8
 800390c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	223f      	movs	r2, #63	; 0x3f
 8003914:	409a      	lsls	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	2b00      	cmp	r3, #0
 8003930:	d07d      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
        }
        return;
 800393a:	e078      	b.n	8003a2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01c      	beq.n	8003984 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d108      	bne.n	800396a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	2b00      	cmp	r3, #0
 800395e:	d030      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
 8003968:	e02b      	b.n	80039c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d027      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
 800397a:	e022      	b.n	80039c2 <HAL_DMA_IRQHandler+0x29e>
 800397c:	20000000 	.word	0x20000000
 8003980:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0210 	bic.w	r2, r2, #16
 80039a0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d032      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d022      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2205      	movs	r2, #5
 80039da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	3301      	adds	r3, #1
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d307      	bcc.n	8003a0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f2      	bne.n	80039ee <HAL_DMA_IRQHandler+0x2ca>
 8003a08:	e000      	b.n	8003a0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a0a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
 8003a2c:	e000      	b.n	8003a30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a2e:	bf00      	nop
    }
  }
}
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop

08003a38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d108      	bne.n	8003a78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a76:	e007      	b.n	8003a88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	3b10      	subs	r3, #16
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <DMA_CalcBaseAndBitshift+0x64>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <DMA_CalcBaseAndBitshift+0x68>)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d909      	bls.n	8003ad6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	1d1a      	adds	r2, r3, #4
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ad4:	e007      	b.n	8003ae6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	aaaaaaab 	.word	0xaaaaaaab
 8003afc:	0801ccb4 	.word	0x0801ccb4

08003b00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11f      	bne.n	8003b5a <DMA_CheckFifoParam+0x5a>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d856      	bhi.n	8003bce <DMA_CheckFifoParam+0xce>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <DMA_CheckFifoParam+0x28>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b39 	.word	0x08003b39
 8003b2c:	08003b4b 	.word	0x08003b4b
 8003b30:	08003b39 	.word	0x08003b39
 8003b34:	08003bcf 	.word	0x08003bcf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d046      	beq.n	8003bd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b48:	e043      	b.n	8003bd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b52:	d140      	bne.n	8003bd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b58:	e03d      	b.n	8003bd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b62:	d121      	bne.n	8003ba8 <DMA_CheckFifoParam+0xa8>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d837      	bhi.n	8003bda <DMA_CheckFifoParam+0xda>
 8003b6a:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <DMA_CheckFifoParam+0x70>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003b87 	.word	0x08003b87
 8003b78:	08003b81 	.word	0x08003b81
 8003b7c:	08003b99 	.word	0x08003b99
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      break;
 8003b84:	e030      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d025      	beq.n	8003bde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b96:	e022      	b.n	8003bde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ba0:	d11f      	bne.n	8003be2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ba6:	e01c      	b.n	8003be2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d903      	bls.n	8003bb6 <DMA_CheckFifoParam+0xb6>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d003      	beq.n	8003bbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bb4:	e018      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bba:	e015      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00e      	beq.n	8003be6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      break;
 8003bcc:	e00b      	b.n	8003be6 <DMA_CheckFifoParam+0xe6>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e00a      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e008      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e006      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e004      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <DMA_CheckFifoParam+0xe8>
      break;
 8003be6:	bf00      	nop
    }
  } 
  
  return status; 
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop

08003bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e159      	b.n	8003ec8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c14:	2201      	movs	r2, #1
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	f040 8148 	bne.w	8003ec2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d005      	beq.n	8003c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d130      	bne.n	8003cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c80:	2201      	movs	r2, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 0201 	and.w	r2, r3, #1
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d017      	beq.n	8003ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d123      	bne.n	8003d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	08da      	lsrs	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3208      	adds	r2, #8
 8003cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	220f      	movs	r2, #15
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	08da      	lsrs	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3208      	adds	r2, #8
 8003d36:	69b9      	ldr	r1, [r7, #24]
 8003d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	2203      	movs	r2, #3
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0203 	and.w	r2, r3, #3
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80a2 	beq.w	8003ec2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	4b57      	ldr	r3, [pc, #348]	; (8003ee0 <HAL_GPIO_Init+0x2e8>)
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	4a56      	ldr	r2, [pc, #344]	; (8003ee0 <HAL_GPIO_Init+0x2e8>)
 8003d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8e:	4b54      	ldr	r3, [pc, #336]	; (8003ee0 <HAL_GPIO_Init+0x2e8>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d9a:	4a52      	ldr	r2, [pc, #328]	; (8003ee4 <HAL_GPIO_Init+0x2ec>)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	3302      	adds	r3, #2
 8003da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	220f      	movs	r2, #15
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a49      	ldr	r2, [pc, #292]	; (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d019      	beq.n	8003dfa <HAL_GPIO_Init+0x202>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a48      	ldr	r2, [pc, #288]	; (8003eec <HAL_GPIO_Init+0x2f4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_GPIO_Init+0x1fe>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a47      	ldr	r2, [pc, #284]	; (8003ef0 <HAL_GPIO_Init+0x2f8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00d      	beq.n	8003df2 <HAL_GPIO_Init+0x1fa>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a46      	ldr	r2, [pc, #280]	; (8003ef4 <HAL_GPIO_Init+0x2fc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <HAL_GPIO_Init+0x1f6>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a45      	ldr	r2, [pc, #276]	; (8003ef8 <HAL_GPIO_Init+0x300>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <HAL_GPIO_Init+0x1f2>
 8003de6:	2304      	movs	r3, #4
 8003de8:	e008      	b.n	8003dfc <HAL_GPIO_Init+0x204>
 8003dea:	2307      	movs	r3, #7
 8003dec:	e006      	b.n	8003dfc <HAL_GPIO_Init+0x204>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e004      	b.n	8003dfc <HAL_GPIO_Init+0x204>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e002      	b.n	8003dfc <HAL_GPIO_Init+0x204>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_GPIO_Init+0x204>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	f002 0203 	and.w	r2, r2, #3
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	4093      	lsls	r3, r2
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e0c:	4935      	ldr	r1, [pc, #212]	; (8003ee4 <HAL_GPIO_Init+0x2ec>)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	3302      	adds	r3, #2
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e1a:	4b38      	ldr	r3, [pc, #224]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e3e:	4a2f      	ldr	r2, [pc, #188]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e44:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e68:	4a24      	ldr	r2, [pc, #144]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e6e:	4b23      	ldr	r3, [pc, #140]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e92:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e98:	4b18      	ldr	r3, [pc, #96]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	; (8003efc <HAL_GPIO_Init+0x304>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	f67f aea2 	bls.w	8003c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	3724      	adds	r7, #36	; 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40013800 	.word	0x40013800
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	40020400 	.word	0x40020400
 8003ef0:	40020800 	.word	0x40020800
 8003ef4:	40020c00 	.word	0x40020c00
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40013c00 	.word	0x40013c00

08003f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f1c:	e003      	b.n	8003f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f1e:	887b      	ldrh	r3, [r7, #2]
 8003f20:	041a      	lsls	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	619a      	str	r2, [r3, #24]
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	041a      	lsls	r2, r3, #16
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	43d9      	mvns	r1, r3
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	400b      	ands	r3, r1
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	619a      	str	r2, [r3, #24]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e264      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d075      	beq.n	8004072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f86:	4ba3      	ldr	r3, [pc, #652]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d00c      	beq.n	8003fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f92:	4ba0      	ldr	r3, [pc, #640]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d112      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9e:	4b9d      	ldr	r3, [pc, #628]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	4b99      	ldr	r3, [pc, #612]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d05b      	beq.n	8004070 <HAL_RCC_OscConfig+0x108>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d157      	bne.n	8004070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e23f      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCC_OscConfig+0x74>
 8003fce:	4b91      	ldr	r3, [pc, #580]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a90      	ldr	r2, [pc, #576]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e01d      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x98>
 8003fe6:	4b8b      	ldr	r3, [pc, #556]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a8a      	ldr	r2, [pc, #552]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b88      	ldr	r3, [pc, #544]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a87      	ldr	r2, [pc, #540]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8004000:	4b84      	ldr	r3, [pc, #528]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a83      	ldr	r2, [pc, #524]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b81      	ldr	r3, [pc, #516]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a80      	ldr	r2, [pc, #512]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7ff f8a6 	bl	8003170 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004028:	f7ff f8a2 	bl	8003170 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e204      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	4b76      	ldr	r3, [pc, #472]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0xc0>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7ff f892 	bl	8003170 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004050:	f7ff f88e 	bl	8003170 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	; 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e1f0      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004062:	4b6c      	ldr	r3, [pc, #432]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0xe8>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d063      	beq.n	8004146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407e:	4b65      	ldr	r3, [pc, #404]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408a:	4b62      	ldr	r3, [pc, #392]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004092:	2b08      	cmp	r3, #8
 8004094:	d11c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004096:	4b5f      	ldr	r3, [pc, #380]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d116      	bne.n	80040d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a2:	4b5c      	ldr	r3, [pc, #368]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_RCC_OscConfig+0x152>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e1c4      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ba:	4b56      	ldr	r3, [pc, #344]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4952      	ldr	r1, [pc, #328]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	e03a      	b.n	8004146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d020      	beq.n	800411a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d8:	4b4f      	ldr	r3, [pc, #316]	; (8004218 <HAL_RCC_OscConfig+0x2b0>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7ff f847 	bl	8003170 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e6:	f7ff f843 	bl	8003170 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e1a5      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	4b46      	ldr	r3, [pc, #280]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	4b43      	ldr	r3, [pc, #268]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4940      	ldr	r1, [pc, #256]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
 8004118:	e015      	b.n	8004146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCC_OscConfig+0x2b0>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7ff f826 	bl	8003170 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004128:	f7ff f822 	bl	8003170 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e184      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	4b36      	ldr	r3, [pc, #216]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d030      	beq.n	80041b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415a:	4b30      	ldr	r3, [pc, #192]	; (800421c <HAL_RCC_OscConfig+0x2b4>)
 800415c:	2201      	movs	r2, #1
 800415e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7ff f806 	bl	8003170 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004168:	f7ff f802 	bl	8003170 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e164      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417a:	4b26      	ldr	r3, [pc, #152]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x200>
 8004186:	e015      	b.n	80041b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004188:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_RCC_OscConfig+0x2b4>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418e:	f7fe ffef 	bl	8003170 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004196:	f7fe ffeb 	bl	8003170 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e14d      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80a0 	beq.w	8004302 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	4a0e      	ldr	r2, [pc, #56]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6413      	str	r3, [r2, #64]	; 0x40
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_OscConfig+0x2b8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d121      	bne.n	8004242 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <HAL_RCC_OscConfig+0x2b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a07      	ldr	r2, [pc, #28]	; (8004220 <HAL_RCC_OscConfig+0x2b8>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420a:	f7fe ffb1 	bl	8003170 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004210:	e011      	b.n	8004236 <HAL_RCC_OscConfig+0x2ce>
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800
 8004218:	42470000 	.word	0x42470000
 800421c:	42470e80 	.word	0x42470e80
 8004220:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004224:	f7fe ffa4 	bl	8003170 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e106      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004236:	4b85      	ldr	r3, [pc, #532]	; (800444c <HAL_RCC_OscConfig+0x4e4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d106      	bne.n	8004258 <HAL_RCC_OscConfig+0x2f0>
 800424a:	4b81      	ldr	r3, [pc, #516]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a80      	ldr	r2, [pc, #512]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	e01c      	b.n	8004292 <HAL_RCC_OscConfig+0x32a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b05      	cmp	r3, #5
 800425e:	d10c      	bne.n	800427a <HAL_RCC_OscConfig+0x312>
 8004260:	4b7b      	ldr	r3, [pc, #492]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a7a      	ldr	r2, [pc, #488]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004266:	f043 0304 	orr.w	r3, r3, #4
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	4b78      	ldr	r3, [pc, #480]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a77      	ldr	r2, [pc, #476]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
 8004278:	e00b      	b.n	8004292 <HAL_RCC_OscConfig+0x32a>
 800427a:	4b75      	ldr	r3, [pc, #468]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a74      	ldr	r2, [pc, #464]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	4b72      	ldr	r3, [pc, #456]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a71      	ldr	r2, [pc, #452]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d015      	beq.n	80042c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fe ff69 	bl	8003170 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fe ff65 	bl	8003170 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0c5      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	4b65      	ldr	r3, [pc, #404]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ee      	beq.n	80042a2 <HAL_RCC_OscConfig+0x33a>
 80042c4:	e014      	b.n	80042f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fe ff53 	bl	8003170 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fe ff4f 	bl	8003170 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0af      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e4:	4b5a      	ldr	r3, [pc, #360]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1ee      	bne.n	80042ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d105      	bne.n	8004302 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f6:	4b56      	ldr	r3, [pc, #344]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a55      	ldr	r2, [pc, #340]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80042fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 809b 	beq.w	8004442 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800430c:	4b50      	ldr	r3, [pc, #320]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
 8004314:	2b08      	cmp	r3, #8
 8004316:	d05c      	beq.n	80043d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d141      	bne.n	80043a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004320:	4b4c      	ldr	r3, [pc, #304]	; (8004454 <HAL_RCC_OscConfig+0x4ec>)
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004326:	f7fe ff23 	bl	8003170 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432e:	f7fe ff1f 	bl	8003170 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e081      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004340:	4b43      	ldr	r3, [pc, #268]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f0      	bne.n	800432e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	019b      	lsls	r3, r3, #6
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	3b01      	subs	r3, #1
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	061b      	lsls	r3, r3, #24
 8004370:	4937      	ldr	r1, [pc, #220]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004376:	4b37      	ldr	r3, [pc, #220]	; (8004454 <HAL_RCC_OscConfig+0x4ec>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fe fef8 	bl	8003170 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004384:	f7fe fef4 	bl	8003170 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e056      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x41c>
 80043a2:	e04e      	b.n	8004442 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a4:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_RCC_OscConfig+0x4ec>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fe fee1 	bl	8003170 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fe fedd 	bl	8003170 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e03f      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c4:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0x44a>
 80043d0:	e037      	b.n	8004442 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e032      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043de:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <HAL_RCC_OscConfig+0x4e8>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d028      	beq.n	800443e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d121      	bne.n	800443e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d11a      	bne.n	800443e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004414:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004416:	4293      	cmp	r3, r2
 8004418:	d111      	bne.n	800443e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	3b01      	subs	r3, #1
 8004428:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d107      	bne.n	800443e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d001      	beq.n	8004442 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40007000 	.word	0x40007000
 8004450:	40023800 	.word	0x40023800
 8004454:	42470060 	.word	0x42470060

08004458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0cc      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800446c:	4b68      	ldr	r3, [pc, #416]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d90c      	bls.n	8004494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b65      	ldr	r3, [pc, #404]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	4b63      	ldr	r3, [pc, #396]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0b8      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044ac:	4b59      	ldr	r3, [pc, #356]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4a58      	ldr	r2, [pc, #352]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c4:	4b53      	ldr	r3, [pc, #332]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a52      	ldr	r2, [pc, #328]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	494d      	ldr	r1, [pc, #308]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d044      	beq.n	8004578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d107      	bne.n	8004506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	4b47      	ldr	r3, [pc, #284]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d119      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e07f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d003      	beq.n	8004516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004512:	2b03      	cmp	r3, #3
 8004514:	d107      	bne.n	8004526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	4b3f      	ldr	r3, [pc, #252]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e06f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004526:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e067      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004536:	4b37      	ldr	r3, [pc, #220]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f023 0203 	bic.w	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4934      	ldr	r1, [pc, #208]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004548:	f7fe fe12 	bl	8003170 <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	e00a      	b.n	8004566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004550:	f7fe fe0e 	bl	8003170 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e04f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 020c 	and.w	r2, r3, #12
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	429a      	cmp	r2, r3
 8004576:	d1eb      	bne.n	8004550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d20c      	bcs.n	80045a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e032      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ac:	4b19      	ldr	r3, [pc, #100]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4916      	ldr	r1, [pc, #88]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	490e      	ldr	r1, [pc, #56]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045de:	f000 f821 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045e2:	4602      	mov	r2, r0
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	490a      	ldr	r1, [pc, #40]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 80045f0:	5ccb      	ldrb	r3, [r1, r3]
 80045f2:	fa22 f303 	lsr.w	r3, r2, r3
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fd72 	bl	80030e8 <HAL_InitTick>

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40023c00 	.word	0x40023c00
 8004614:	40023800 	.word	0x40023800
 8004618:	0801cc9c 	.word	0x0801cc9c
 800461c:	20000000 	.word	0x20000000
 8004620:	20000004 	.word	0x20000004

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	b5b0      	push	{r4, r5, r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800462a:	2100      	movs	r1, #0
 800462c:	6079      	str	r1, [r7, #4]
 800462e:	2100      	movs	r1, #0
 8004630:	60f9      	str	r1, [r7, #12]
 8004632:	2100      	movs	r1, #0
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004636:	2100      	movs	r1, #0
 8004638:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800463a:	4952      	ldr	r1, [pc, #328]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 800463c:	6889      	ldr	r1, [r1, #8]
 800463e:	f001 010c 	and.w	r1, r1, #12
 8004642:	2908      	cmp	r1, #8
 8004644:	d00d      	beq.n	8004662 <HAL_RCC_GetSysClockFreq+0x3e>
 8004646:	2908      	cmp	r1, #8
 8004648:	f200 8094 	bhi.w	8004774 <HAL_RCC_GetSysClockFreq+0x150>
 800464c:	2900      	cmp	r1, #0
 800464e:	d002      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0x32>
 8004650:	2904      	cmp	r1, #4
 8004652:	d003      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x38>
 8004654:	e08e      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004656:	4b4c      	ldr	r3, [pc, #304]	; (8004788 <HAL_RCC_GetSysClockFreq+0x164>)
 8004658:	60bb      	str	r3, [r7, #8]
       break;
 800465a:	e08e      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465c:	4b4b      	ldr	r3, [pc, #300]	; (800478c <HAL_RCC_GetSysClockFreq+0x168>)
 800465e:	60bb      	str	r3, [r7, #8]
      break;
 8004660:	e08b      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004662:	4948      	ldr	r1, [pc, #288]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 8004664:	6849      	ldr	r1, [r1, #4]
 8004666:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800466a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466c:	4945      	ldr	r1, [pc, #276]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 800466e:	6849      	ldr	r1, [r1, #4]
 8004670:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004674:	2900      	cmp	r1, #0
 8004676:	d024      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004678:	4942      	ldr	r1, [pc, #264]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 800467a:	6849      	ldr	r1, [r1, #4]
 800467c:	0989      	lsrs	r1, r1, #6
 800467e:	4608      	mov	r0, r1
 8004680:	f04f 0100 	mov.w	r1, #0
 8004684:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004688:	f04f 0500 	mov.w	r5, #0
 800468c:	ea00 0204 	and.w	r2, r0, r4
 8004690:	ea01 0305 	and.w	r3, r1, r5
 8004694:	493d      	ldr	r1, [pc, #244]	; (800478c <HAL_RCC_GetSysClockFreq+0x168>)
 8004696:	fb01 f003 	mul.w	r0, r1, r3
 800469a:	2100      	movs	r1, #0
 800469c:	fb01 f102 	mul.w	r1, r1, r2
 80046a0:	1844      	adds	r4, r0, r1
 80046a2:	493a      	ldr	r1, [pc, #232]	; (800478c <HAL_RCC_GetSysClockFreq+0x168>)
 80046a4:	fba2 0101 	umull	r0, r1, r2, r1
 80046a8:	1863      	adds	r3, r4, r1
 80046aa:	4619      	mov	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	f7fc fb00 	bl	8000cb8 <__aeabi_uldivmod>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4613      	mov	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e04a      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c2:	4b30      	ldr	r3, [pc, #192]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	461a      	mov	r2, r3
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	ea02 0400 	and.w	r4, r2, r0
 80046da:	ea03 0501 	and.w	r5, r3, r1
 80046de:	4620      	mov	r0, r4
 80046e0:	4629      	mov	r1, r5
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	014b      	lsls	r3, r1, #5
 80046ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046f0:	0142      	lsls	r2, r0, #5
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	1b00      	subs	r0, r0, r4
 80046f8:	eb61 0105 	sbc.w	r1, r1, r5
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	018b      	lsls	r3, r1, #6
 8004706:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800470a:	0182      	lsls	r2, r0, #6
 800470c:	1a12      	subs	r2, r2, r0
 800470e:	eb63 0301 	sbc.w	r3, r3, r1
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	00d9      	lsls	r1, r3, #3
 800471c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004720:	00d0      	lsls	r0, r2, #3
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	1912      	adds	r2, r2, r4
 8004728:	eb45 0303 	adc.w	r3, r5, r3
 800472c:	f04f 0000 	mov.w	r0, #0
 8004730:	f04f 0100 	mov.w	r1, #0
 8004734:	0299      	lsls	r1, r3, #10
 8004736:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800473a:	0290      	lsls	r0, r2, #10
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4610      	mov	r0, r2
 8004742:	4619      	mov	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	461a      	mov	r2, r3
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f7fc fab4 	bl	8000cb8 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4613      	mov	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_RCC_GetSysClockFreq+0x160>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	3301      	adds	r3, #1
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	60bb      	str	r3, [r7, #8]
      break;
 8004772:	e002      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <HAL_RCC_GetSysClockFreq+0x164>)
 8004776:	60bb      	str	r3, [r7, #8]
      break;
 8004778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477a:	68bb      	ldr	r3, [r7, #8]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bdb0      	pop	{r4, r5, r7, pc}
 8004784:	40023800 	.word	0x40023800
 8004788:	00f42400 	.word	0x00f42400
 800478c:	017d7840 	.word	0x017d7840

08004790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004794:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	4618      	mov	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000000 	.word	0x20000000

080047a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047ac:	f7ff fff0 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0a9b      	lsrs	r3, r3, #10
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4903      	ldr	r1, [pc, #12]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	0801ccac 	.word	0x0801ccac

080047d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047d4:	f7ff ffdc 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0b5b      	lsrs	r3, r3, #13
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4903      	ldr	r1, [pc, #12]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	0801ccac 	.word	0x0801ccac

080047f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e07b      	b.n	8004902 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481a:	d009      	beq.n	8004830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	61da      	str	r2, [r3, #28]
 8004822:	e005      	b.n	8004830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd ffee 	bl	800282c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	ea42 0103 	orr.w	r1, r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0104 	and.w	r1, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f003 0210 	and.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e03f      	b.n	800499c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7fe fad9 	bl	8002ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2224      	movs	r2, #36	; 0x24
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800494c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 ff52 	bl	80057f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004962:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004972:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004982:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	; 0x30
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	4613      	mov	r3, r2
 80049b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b20      	cmp	r3, #32
 80049bc:	d165      	bne.n	8004a8a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_UART_Transmit_DMA+0x26>
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e05e      	b.n	8004a8c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Transmit_DMA+0x38>
 80049d8:	2302      	movs	r3, #2
 80049da:	e057      	b.n	8004a8c <HAL_UART_Transmit_DMA+0xe8>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	88fa      	ldrh	r2, [r7, #6]
 80049ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2221      	movs	r2, #33	; 0x21
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <HAL_UART_Transmit_DMA+0xf0>)
 8004a0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a10:	4a21      	ldr	r2, [pc, #132]	; (8004a98 <HAL_UART_Transmit_DMA+0xf4>)
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	4a20      	ldr	r2, [pc, #128]	; (8004a9c <HAL_UART_Transmit_DMA+0xf8>)
 8004a1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a20:	2200      	movs	r2, #0
 8004a22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004a24:	f107 0308 	add.w	r3, r7, #8
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	6819      	ldr	r1, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3304      	adds	r3, #4
 8004a38:	461a      	mov	r2, r3
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	f7fe fd88 	bl	8003550 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a48:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3314      	adds	r3, #20
 8004a58:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	617b      	str	r3, [r7, #20]
   return(result);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3314      	adds	r3, #20
 8004a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a72:	627a      	str	r2, [r7, #36]	; 0x24
 8004a74:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	6a39      	ldr	r1, [r7, #32]
 8004a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e5      	bne.n	8004a52 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004a8a:	2302      	movs	r3, #2
  }
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3730      	adds	r7, #48	; 0x30
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	08005099 	.word	0x08005099
 8004a98:	08005133 	.word	0x08005133
 8004a9c:	080052ab 	.word	0x080052ab

08004aa0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d11d      	bne.n	8004af6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_Receive_DMA+0x26>
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e016      	b.n	8004af8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Receive_DMA+0x38>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e00f      	b.n	8004af8 <HAL_UART_Receive_DMA+0x58>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fc27 	bl	8005340 <UART_Start_Receive_DMA>
 8004af2:	4603      	mov	r3, r0
 8004af4:	e000      	b.n	8004af8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b0ba      	sub	sp, #232	; 0xe8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10f      	bne.n	8004b66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_UART_IRQHandler+0x66>
 8004b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fd8f 	bl	8005682 <UART_Receive_IT>
      return;
 8004b64:	e256      	b.n	8005014 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 80de 	beq.w	8004d2c <HAL_UART_IRQHandler+0x22c>
 8004b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80d1 	beq.w	8004d2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_UART_IRQHandler+0xae>
 8004b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f043 0201 	orr.w	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_UART_IRQHandler+0xd2>
 8004bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f043 0202 	orr.w	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xf6>
 8004bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f043 0204 	orr.w	r2, r3, #4
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d011      	beq.n	8004c26 <HAL_UART_IRQHandler+0x126>
 8004c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f043 0208 	orr.w	r2, r3, #8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 81ed 	beq.w	800500a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_UART_IRQHandler+0x14e>
 8004c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fd1a 	bl	8005682 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <HAL_UART_IRQHandler+0x17a>
 8004c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d04f      	beq.n	8004d1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fc22 	bl	80054c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	d141      	bne.n	8004d12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3314      	adds	r3, #20
 8004c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1d9      	bne.n	8004c8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d013      	beq.n	8004d0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	4a7d      	ldr	r2, [pc, #500]	; (8004edc <HAL_UART_IRQHandler+0x3dc>)
 8004ce8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fcf6 	bl	80036e0 <HAL_DMA_Abort_IT>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d04:	4610      	mov	r0, r2
 8004d06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	e00e      	b.n	8004d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f9ae 	bl	800506c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	e00a      	b.n	8004d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f9aa 	bl	800506c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	e006      	b.n	8004d28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f9a6 	bl	800506c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d26:	e170      	b.n	800500a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d28:	bf00      	nop
    return;
 8004d2a:	e16e      	b.n	800500a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	f040 814a 	bne.w	8004fca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8143 	beq.w	8004fca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 813c 	beq.w	8004fca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d52:	2300      	movs	r3, #0
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b40      	cmp	r3, #64	; 0x40
 8004d74:	f040 80b4 	bne.w	8004ee0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8140 	beq.w	800500e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d96:	429a      	cmp	r2, r3
 8004d98:	f080 8139 	bcs.w	800500e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004da2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dae:	f000 8088 	beq.w	8004ec2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	330c      	adds	r3, #12
 8004db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004dde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1d9      	bne.n	8004db2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3314      	adds	r3, #20
 8004e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3314      	adds	r3, #20
 8004e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e1      	bne.n	8004dfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3314      	adds	r3, #20
 8004e40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3314      	adds	r3, #20
 8004e5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e3      	bne.n	8004e3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e92:	f023 0310 	bic.w	r3, r3, #16
 8004e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ea4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ea6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e3      	bne.n	8004e80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe fb9f 	bl	8003600 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f8d4 	bl	8005080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ed8:	e099      	b.n	800500e <HAL_UART_IRQHandler+0x50e>
 8004eda:	bf00      	nop
 8004edc:	0800558b 	.word	0x0800558b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 808b 	beq.w	8005012 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004efc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8086 	beq.w	8005012 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f2a:	647a      	str	r2, [r7, #68]	; 0x44
 8004f2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e3      	bne.n	8004f06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3314      	adds	r3, #20
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f62:	633a      	str	r2, [r7, #48]	; 0x30
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e3      	bne.n	8004f3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0310 	bic.w	r3, r3, #16
 8004f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fa8:	61fa      	str	r2, [r7, #28]
 8004faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	69b9      	ldr	r1, [r7, #24]
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e3      	bne.n	8004f84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f85c 	bl	8005080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fc8:	e023      	b.n	8005012 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_UART_IRQHandler+0x4ea>
 8004fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fae5 	bl	80055b2 <UART_Transmit_IT>
    return;
 8004fe8:	e014      	b.n	8005014 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00e      	beq.n	8005014 <HAL_UART_IRQHandler+0x514>
 8004ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d008      	beq.n	8005014 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fb25 	bl	8005652 <UART_EndTransmit_IT>
    return;
 8005008:	e004      	b.n	8005014 <HAL_UART_IRQHandler+0x514>
    return;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <HAL_UART_IRQHandler+0x514>
      return;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <HAL_UART_IRQHandler+0x514>
      return;
 8005012:	bf00      	nop
  }
}
 8005014:	37e8      	adds	r7, #232	; 0xe8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop

0800501c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b090      	sub	sp, #64	; 0x40
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d137      	bne.n	8005124 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80050b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b6:	2200      	movs	r2, #0
 80050b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	623b      	str	r3, [r7, #32]
   return(result);
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3314      	adds	r3, #20
 80050d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050da:	633a      	str	r2, [r7, #48]	; 0x30
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e5      	bne.n	80050ba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
 8005106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800510e:	61fa      	str	r2, [r7, #28]
 8005110:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	617b      	str	r3, [r7, #20]
   return(result);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e5      	bne.n	80050ee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005122:	e002      	b.n	800512a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005124:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005126:	f7ff ff79 	bl	800501c <HAL_UART_TxCpltCallback>
}
 800512a:	bf00      	nop
 800512c:	3740      	adds	r7, #64	; 0x40
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff ff75 	bl	8005030 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b09c      	sub	sp, #112	; 0x70
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d172      	bne.n	8005250 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800516a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516c:	2200      	movs	r2, #0
 800516e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	330c      	adds	r3, #12
 8005176:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005186:	66bb      	str	r3, [r7, #104]	; 0x68
 8005188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	330c      	adds	r3, #12
 800518e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005190:	65ba      	str	r2, [r7, #88]	; 0x58
 8005192:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005196:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800519e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e5      	bne.n	8005170 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3314      	adds	r3, #20
 80051aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	667b      	str	r3, [r7, #100]	; 0x64
 80051bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051c4:	647a      	str	r2, [r7, #68]	; 0x44
 80051c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e5      	bne.n	80051a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3314      	adds	r3, #20
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	623b      	str	r3, [r7, #32]
   return(result);
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ee:	663b      	str	r3, [r7, #96]	; 0x60
 80051f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3314      	adds	r3, #20
 80051f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051f8:	633a      	str	r2, [r7, #48]	; 0x30
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e5      	bne.n	80051d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	2b01      	cmp	r3, #1
 800521a:	d119      	bne.n	8005250 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	60fb      	str	r3, [r7, #12]
   return(result);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0310 	bic.w	r3, r3, #16
 8005232:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800523c:	61fa      	str	r2, [r7, #28]
 800523e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	69b9      	ldr	r1, [r7, #24]
 8005242:	69fa      	ldr	r2, [r7, #28]
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	617b      	str	r3, [r7, #20]
   return(result);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	2b01      	cmp	r3, #1
 8005256:	d106      	bne.n	8005266 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800525c:	4619      	mov	r1, r3
 800525e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005260:	f7ff ff0e 	bl	8005080 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005264:	e002      	b.n	800526c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005266:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005268:	f7ff feec 	bl	8005044 <HAL_UART_RxCpltCallback>
}
 800526c:	bf00      	nop
 800526e:	3770      	adds	r7, #112	; 0x70
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	2b01      	cmp	r3, #1
 8005288:	d108      	bne.n	800529c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	b29b      	uxth	r3, r3
 8005292:	4619      	mov	r1, r3
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff fef3 	bl	8005080 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800529a:	e002      	b.n	80052a2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff fedb 	bl	8005058 <HAL_UART_RxHalfCpltCallback>
}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c6:	2b80      	cmp	r3, #128	; 0x80
 80052c8:	bf0c      	ite	eq
 80052ca:	2301      	moveq	r3, #1
 80052cc:	2300      	movne	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b21      	cmp	r3, #33	; 0x21
 80052dc:	d108      	bne.n	80052f0 <UART_DMAError+0x46>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2200      	movs	r2, #0
 80052e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80052ea:	68b8      	ldr	r0, [r7, #8]
 80052ec:	f000 f8c2 	bl	8005474 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b22      	cmp	r3, #34	; 0x22
 8005310:	d108      	bne.n	8005324 <UART_DMAError+0x7a>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800531e:	68b8      	ldr	r0, [r7, #8]
 8005320:	f000 f8d0 	bl	80054c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f043 0210 	orr.w	r2, r3, #16
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005330:	68b8      	ldr	r0, [r7, #8]
 8005332:	f7ff fe9b 	bl	800506c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b098      	sub	sp, #96	; 0x60
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2222      	movs	r2, #34	; 0x22
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	4a3e      	ldr	r2, [pc, #248]	; (8005468 <UART_Start_Receive_DMA+0x128>)
 800536e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	4a3d      	ldr	r2, [pc, #244]	; (800546c <UART_Start_Receive_DMA+0x12c>)
 8005376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	4a3c      	ldr	r2, [pc, #240]	; (8005470 <UART_Start_Receive_DMA+0x130>)
 800537e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	2200      	movs	r2, #0
 8005386:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3304      	adds	r3, #4
 8005398:	4619      	mov	r1, r3
 800539a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	f7fe f8d6 	bl	8003550 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80053e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80053e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80053f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e5      	bne.n	80053c2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3314      	adds	r3, #20
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	657b      	str	r3, [r7, #84]	; 0x54
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005416:	63ba      	str	r2, [r7, #56]	; 0x38
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800541c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e5      	bne.n	80053f6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3314      	adds	r3, #20
 8005430:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	617b      	str	r3, [r7, #20]
   return(result);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005440:	653b      	str	r3, [r7, #80]	; 0x50
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3314      	adds	r3, #20
 8005448:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800544a:	627a      	str	r2, [r7, #36]	; 0x24
 800544c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6a39      	ldr	r1, [r7, #32]
 8005450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	61fb      	str	r3, [r7, #28]
   return(result);
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3760      	adds	r7, #96	; 0x60
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	0800514f 	.word	0x0800514f
 800546c:	08005275 	.word	0x08005275
 8005470:	080052ab 	.word	0x080052ab

08005474 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b089      	sub	sp, #36	; 0x24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	60bb      	str	r3, [r7, #8]
   return(result);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005492:	61fb      	str	r3, [r7, #28]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	61ba      	str	r2, [r7, #24]
 800549e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6979      	ldr	r1, [r7, #20]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	613b      	str	r3, [r7, #16]
   return(result);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e5      	bne.n	800547c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80054b8:	bf00      	nop
 80054ba:	3724      	adds	r7, #36	; 0x24
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b095      	sub	sp, #84	; 0x54
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054ec:	643a      	str	r2, [r7, #64]	; 0x40
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	64bb      	str	r3, [r7, #72]	; 0x48
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3314      	adds	r3, #20
 800551e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005520:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e5      	bne.n	8005500 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	2b01      	cmp	r3, #1
 800553a:	d119      	bne.n	8005570 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	60bb      	str	r3, [r7, #8]
   return(result);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0310 	bic.w	r3, r3, #16
 8005552:	647b      	str	r3, [r7, #68]	; 0x44
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800555c:	61ba      	str	r2, [r7, #24]
 800555e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	613b      	str	r3, [r7, #16]
   return(result);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e5      	bne.n	800553c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800557e:	bf00      	nop
 8005580:	3754      	adds	r7, #84	; 0x54
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff fd61 	bl	800506c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b21      	cmp	r3, #33	; 0x21
 80055c4:	d13e      	bne.n	8005644 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ce:	d114      	bne.n	80055fa <UART_Transmit_IT+0x48>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d110      	bne.n	80055fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	1c9a      	adds	r2, r3, #2
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	621a      	str	r2, [r3, #32]
 80055f8:	e008      	b.n	800560c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	1c59      	adds	r1, r3, #1
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6211      	str	r1, [r2, #32]
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	b29b      	uxth	r3, r3
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4619      	mov	r1, r3
 800561a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10f      	bne.n	8005640 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800562e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800563e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e000      	b.n	8005646 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005644:	2302      	movs	r3, #2
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005668:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fcd2 	bl	800501c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b08c      	sub	sp, #48	; 0x30
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b22      	cmp	r3, #34	; 0x22
 8005694:	f040 80ab 	bne.w	80057ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a0:	d117      	bne.n	80056d2 <UART_Receive_IT+0x50>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d113      	bne.n	80056d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	1c9a      	adds	r2, r3, #2
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	629a      	str	r2, [r3, #40]	; 0x28
 80056d0:	e026      	b.n	8005720 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e4:	d007      	beq.n	80056f6 <UART_Receive_IT+0x74>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <UART_Receive_IT+0x82>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	e008      	b.n	8005716 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005710:	b2da      	uxtb	r2, r3
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29b      	uxth	r3, r3
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	4619      	mov	r1, r3
 800572e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005730:	2b00      	cmp	r3, #0
 8005732:	d15a      	bne.n	80057ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0220 	bic.w	r2, r2, #32
 8005742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	2b01      	cmp	r3, #1
 8005772:	d135      	bne.n	80057e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	613b      	str	r3, [r7, #16]
   return(result);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f023 0310 	bic.w	r3, r3, #16
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	623a      	str	r2, [r7, #32]
 800579c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	69f9      	ldr	r1, [r7, #28]
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e5      	bne.n	800577a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d10a      	bne.n	80057d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fc51 	bl	8005080 <HAL_UARTEx_RxEventCallback>
 80057de:	e002      	b.n	80057e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fc2f 	bl	8005044 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e002      	b.n	80057f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e000      	b.n	80057f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3730      	adds	r7, #48	; 0x30
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	b09f      	sub	sp, #124	; 0x7c
 80057fe:	af00      	add	r7, sp, #0
 8005800:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800580c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580e:	68d9      	ldr	r1, [r3, #12]
 8005810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	ea40 0301 	orr.w	r3, r0, r1
 8005818:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800581a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	431a      	orrs	r2, r3
 8005824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	431a      	orrs	r2, r3
 800582a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4313      	orrs	r3, r2
 8005830:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800583c:	f021 010c 	bic.w	r1, r1, #12
 8005840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005846:	430b      	orrs	r3, r1
 8005848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800584a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005856:	6999      	ldr	r1, [r3, #24]
 8005858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	ea40 0301 	orr.w	r3, r0, r1
 8005860:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	4bc5      	ldr	r3, [pc, #788]	; (8005b7c <UART_SetConfig+0x384>)
 8005868:	429a      	cmp	r2, r3
 800586a:	d004      	beq.n	8005876 <UART_SetConfig+0x7e>
 800586c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4bc3      	ldr	r3, [pc, #780]	; (8005b80 <UART_SetConfig+0x388>)
 8005872:	429a      	cmp	r2, r3
 8005874:	d103      	bne.n	800587e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005876:	f7fe ffab 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 800587a:	6778      	str	r0, [r7, #116]	; 0x74
 800587c:	e002      	b.n	8005884 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800587e:	f7fe ff93 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 8005882:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588c:	f040 80b6 	bne.w	80059fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005892:	461c      	mov	r4, r3
 8005894:	f04f 0500 	mov.w	r5, #0
 8005898:	4622      	mov	r2, r4
 800589a:	462b      	mov	r3, r5
 800589c:	1891      	adds	r1, r2, r2
 800589e:	6439      	str	r1, [r7, #64]	; 0x40
 80058a0:	415b      	adcs	r3, r3
 80058a2:	647b      	str	r3, [r7, #68]	; 0x44
 80058a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058a8:	1912      	adds	r2, r2, r4
 80058aa:	eb45 0303 	adc.w	r3, r5, r3
 80058ae:	f04f 0000 	mov.w	r0, #0
 80058b2:	f04f 0100 	mov.w	r1, #0
 80058b6:	00d9      	lsls	r1, r3, #3
 80058b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058bc:	00d0      	lsls	r0, r2, #3
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	1911      	adds	r1, r2, r4
 80058c4:	6639      	str	r1, [r7, #96]	; 0x60
 80058c6:	416b      	adcs	r3, r5
 80058c8:	667b      	str	r3, [r7, #100]	; 0x64
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	1891      	adds	r1, r2, r2
 80058d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058d8:	415b      	adcs	r3, r3
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058e4:	f7fb f9e8 	bl	8000cb8 <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4ba5      	ldr	r3, [pc, #660]	; (8005b84 <UART_SetConfig+0x38c>)
 80058ee:	fba3 2302 	umull	r2, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	011e      	lsls	r6, r3, #4
 80058f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f8:	461c      	mov	r4, r3
 80058fa:	f04f 0500 	mov.w	r5, #0
 80058fe:	4622      	mov	r2, r4
 8005900:	462b      	mov	r3, r5
 8005902:	1891      	adds	r1, r2, r2
 8005904:	6339      	str	r1, [r7, #48]	; 0x30
 8005906:	415b      	adcs	r3, r3
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
 800590a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800590e:	1912      	adds	r2, r2, r4
 8005910:	eb45 0303 	adc.w	r3, r5, r3
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f04f 0100 	mov.w	r1, #0
 800591c:	00d9      	lsls	r1, r3, #3
 800591e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005922:	00d0      	lsls	r0, r2, #3
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	1911      	adds	r1, r2, r4
 800592a:	65b9      	str	r1, [r7, #88]	; 0x58
 800592c:	416b      	adcs	r3, r5
 800592e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	461a      	mov	r2, r3
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	1891      	adds	r1, r2, r2
 800593c:	62b9      	str	r1, [r7, #40]	; 0x28
 800593e:	415b      	adcs	r3, r3
 8005940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005946:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800594a:	f7fb f9b5 	bl	8000cb8 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4b8c      	ldr	r3, [pc, #560]	; (8005b84 <UART_SetConfig+0x38c>)
 8005954:	fba3 1302 	umull	r1, r3, r3, r2
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	2164      	movs	r1, #100	; 0x64
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	3332      	adds	r3, #50	; 0x32
 8005966:	4a87      	ldr	r2, [pc, #540]	; (8005b84 <UART_SetConfig+0x38c>)
 8005968:	fba2 2303 	umull	r2, r3, r2, r3
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005974:	441e      	add	r6, r3
 8005976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005978:	4618      	mov	r0, r3
 800597a:	f04f 0100 	mov.w	r1, #0
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	1894      	adds	r4, r2, r2
 8005984:	623c      	str	r4, [r7, #32]
 8005986:	415b      	adcs	r3, r3
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
 800598a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800598e:	1812      	adds	r2, r2, r0
 8005990:	eb41 0303 	adc.w	r3, r1, r3
 8005994:	f04f 0400 	mov.w	r4, #0
 8005998:	f04f 0500 	mov.w	r5, #0
 800599c:	00dd      	lsls	r5, r3, #3
 800599e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059a2:	00d4      	lsls	r4, r2, #3
 80059a4:	4622      	mov	r2, r4
 80059a6:	462b      	mov	r3, r5
 80059a8:	1814      	adds	r4, r2, r0
 80059aa:	653c      	str	r4, [r7, #80]	; 0x50
 80059ac:	414b      	adcs	r3, r1
 80059ae:	657b      	str	r3, [r7, #84]	; 0x54
 80059b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	461a      	mov	r2, r3
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	1891      	adds	r1, r2, r2
 80059bc:	61b9      	str	r1, [r7, #24]
 80059be:	415b      	adcs	r3, r3
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80059ca:	f7fb f975 	bl	8000cb8 <__aeabi_uldivmod>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4b6c      	ldr	r3, [pc, #432]	; (8005b84 <UART_SetConfig+0x38c>)
 80059d4:	fba3 1302 	umull	r1, r3, r3, r2
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	2164      	movs	r1, #100	; 0x64
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	3332      	adds	r3, #50	; 0x32
 80059e6:	4a67      	ldr	r2, [pc, #412]	; (8005b84 <UART_SetConfig+0x38c>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	f003 0207 	and.w	r2, r3, #7
 80059f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4432      	add	r2, r6
 80059f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059fa:	e0b9      	b.n	8005b70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059fe:	461c      	mov	r4, r3
 8005a00:	f04f 0500 	mov.w	r5, #0
 8005a04:	4622      	mov	r2, r4
 8005a06:	462b      	mov	r3, r5
 8005a08:	1891      	adds	r1, r2, r2
 8005a0a:	6139      	str	r1, [r7, #16]
 8005a0c:	415b      	adcs	r3, r3
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a14:	1912      	adds	r2, r2, r4
 8005a16:	eb45 0303 	adc.w	r3, r5, r3
 8005a1a:	f04f 0000 	mov.w	r0, #0
 8005a1e:	f04f 0100 	mov.w	r1, #0
 8005a22:	00d9      	lsls	r1, r3, #3
 8005a24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a28:	00d0      	lsls	r0, r2, #3
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	eb12 0804 	adds.w	r8, r2, r4
 8005a32:	eb43 0905 	adc.w	r9, r3, r5
 8005a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f04f 0100 	mov.w	r1, #0
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	008b      	lsls	r3, r1, #2
 8005a4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a4e:	0082      	lsls	r2, r0, #2
 8005a50:	4640      	mov	r0, r8
 8005a52:	4649      	mov	r1, r9
 8005a54:	f7fb f930 	bl	8000cb8 <__aeabi_uldivmod>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4b49      	ldr	r3, [pc, #292]	; (8005b84 <UART_SetConfig+0x38c>)
 8005a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	011e      	lsls	r6, r3, #4
 8005a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f04f 0100 	mov.w	r1, #0
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	1894      	adds	r4, r2, r2
 8005a74:	60bc      	str	r4, [r7, #8]
 8005a76:	415b      	adcs	r3, r3
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a7e:	1812      	adds	r2, r2, r0
 8005a80:	eb41 0303 	adc.w	r3, r1, r3
 8005a84:	f04f 0400 	mov.w	r4, #0
 8005a88:	f04f 0500 	mov.w	r5, #0
 8005a8c:	00dd      	lsls	r5, r3, #3
 8005a8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a92:	00d4      	lsls	r4, r2, #3
 8005a94:	4622      	mov	r2, r4
 8005a96:	462b      	mov	r3, r5
 8005a98:	1814      	adds	r4, r2, r0
 8005a9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a9c:	414b      	adcs	r3, r1
 8005a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f04f 0100 	mov.w	r1, #0
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	008b      	lsls	r3, r1, #2
 8005ab4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ab8:	0082      	lsls	r2, r0, #2
 8005aba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005abe:	f7fb f8fb 	bl	8000cb8 <__aeabi_uldivmod>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4b2f      	ldr	r3, [pc, #188]	; (8005b84 <UART_SetConfig+0x38c>)
 8005ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	2164      	movs	r1, #100	; 0x64
 8005ad0:	fb01 f303 	mul.w	r3, r1, r3
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	3332      	adds	r3, #50	; 0x32
 8005ada:	4a2a      	ldr	r2, [pc, #168]	; (8005b84 <UART_SetConfig+0x38c>)
 8005adc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ae6:	441e      	add	r6, r3
 8005ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aea:	4618      	mov	r0, r3
 8005aec:	f04f 0100 	mov.w	r1, #0
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	1894      	adds	r4, r2, r2
 8005af6:	603c      	str	r4, [r7, #0]
 8005af8:	415b      	adcs	r3, r3
 8005afa:	607b      	str	r3, [r7, #4]
 8005afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b00:	1812      	adds	r2, r2, r0
 8005b02:	eb41 0303 	adc.w	r3, r1, r3
 8005b06:	f04f 0400 	mov.w	r4, #0
 8005b0a:	f04f 0500 	mov.w	r5, #0
 8005b0e:	00dd      	lsls	r5, r3, #3
 8005b10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b14:	00d4      	lsls	r4, r2, #3
 8005b16:	4622      	mov	r2, r4
 8005b18:	462b      	mov	r3, r5
 8005b1a:	eb12 0a00 	adds.w	sl, r2, r0
 8005b1e:	eb43 0b01 	adc.w	fp, r3, r1
 8005b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	008b      	lsls	r3, r1, #2
 8005b36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b3a:	0082      	lsls	r2, r0, #2
 8005b3c:	4650      	mov	r0, sl
 8005b3e:	4659      	mov	r1, fp
 8005b40:	f7fb f8ba 	bl	8000cb8 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <UART_SetConfig+0x38c>)
 8005b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	2164      	movs	r1, #100	; 0x64
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	3332      	adds	r3, #50	; 0x32
 8005b5c:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <UART_SetConfig+0x38c>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	f003 020f 	and.w	r2, r3, #15
 8005b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4432      	add	r2, r6
 8005b6e:	609a      	str	r2, [r3, #8]
}
 8005b70:	bf00      	nop
 8005b72:	377c      	adds	r7, #124	; 0x7c
 8005b74:	46bd      	mov	sp, r7
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40011000 	.word	0x40011000
 8005b80:	40011400 	.word	0x40011400
 8005b84:	51eb851f 	.word	0x51eb851f

08005b88 <atof>:
 8005b88:	2100      	movs	r1, #0
 8005b8a:	f001 bd05 	b.w	8007598 <strtod>

08005b8e <atoi>:
 8005b8e:	220a      	movs	r2, #10
 8005b90:	2100      	movs	r1, #0
 8005b92:	f001 bdef 	b.w	8007774 <strtol>
	...

08005b98 <__errno>:
 8005b98:	4b01      	ldr	r3, [pc, #4]	; (8005ba0 <__errno+0x8>)
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	2000000c 	.word	0x2000000c

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4d0d      	ldr	r5, [pc, #52]	; (8005bdc <__libc_init_array+0x38>)
 8005ba8:	4c0d      	ldr	r4, [pc, #52]	; (8005be0 <__libc_init_array+0x3c>)
 8005baa:	1b64      	subs	r4, r4, r5
 8005bac:	10a4      	asrs	r4, r4, #2
 8005bae:	2600      	movs	r6, #0
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	4d0b      	ldr	r5, [pc, #44]	; (8005be4 <__libc_init_array+0x40>)
 8005bb6:	4c0c      	ldr	r4, [pc, #48]	; (8005be8 <__libc_init_array+0x44>)
 8005bb8:	f004 fcb8 	bl	800a52c <_init>
 8005bbc:	1b64      	subs	r4, r4, r5
 8005bbe:	10a4      	asrs	r4, r4, #2
 8005bc0:	2600      	movs	r6, #0
 8005bc2:	42a6      	cmp	r6, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bcc:	4798      	blx	r3
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd6:	4798      	blx	r3
 8005bd8:	3601      	adds	r6, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	0801d1d8 	.word	0x0801d1d8
 8005be0:	0801d1d8 	.word	0x0801d1d8
 8005be4:	0801d1d8 	.word	0x0801d1d8
 8005be8:	0801d1dc 	.word	0x0801d1dc

08005bec <memset>:
 8005bec:	4402      	add	r2, r0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d100      	bne.n	8005bf6 <memset+0xa>
 8005bf4:	4770      	bx	lr
 8005bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bfa:	e7f9      	b.n	8005bf0 <memset+0x4>

08005bfc <__cvt>:
 8005bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	ec55 4b10 	vmov	r4, r5, d0
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	460e      	mov	r6, r1
 8005c08:	4619      	mov	r1, r3
 8005c0a:	462b      	mov	r3, r5
 8005c0c:	bfbb      	ittet	lt
 8005c0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c12:	461d      	movlt	r5, r3
 8005c14:	2300      	movge	r3, #0
 8005c16:	232d      	movlt	r3, #45	; 0x2d
 8005c18:	700b      	strb	r3, [r1, #0]
 8005c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c20:	4691      	mov	r9, r2
 8005c22:	f023 0820 	bic.w	r8, r3, #32
 8005c26:	bfbc      	itt	lt
 8005c28:	4622      	movlt	r2, r4
 8005c2a:	4614      	movlt	r4, r2
 8005c2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c30:	d005      	beq.n	8005c3e <__cvt+0x42>
 8005c32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c36:	d100      	bne.n	8005c3a <__cvt+0x3e>
 8005c38:	3601      	adds	r6, #1
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	e000      	b.n	8005c40 <__cvt+0x44>
 8005c3e:	2103      	movs	r1, #3
 8005c40:	ab03      	add	r3, sp, #12
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	ab02      	add	r3, sp, #8
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	ec45 4b10 	vmov	d0, r4, r5
 8005c4c:	4653      	mov	r3, sl
 8005c4e:	4632      	mov	r2, r6
 8005c50:	f001 fe46 	bl	80078e0 <_dtoa_r>
 8005c54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c58:	4607      	mov	r7, r0
 8005c5a:	d102      	bne.n	8005c62 <__cvt+0x66>
 8005c5c:	f019 0f01 	tst.w	r9, #1
 8005c60:	d022      	beq.n	8005ca8 <__cvt+0xac>
 8005c62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c66:	eb07 0906 	add.w	r9, r7, r6
 8005c6a:	d110      	bne.n	8005c8e <__cvt+0x92>
 8005c6c:	783b      	ldrb	r3, [r7, #0]
 8005c6e:	2b30      	cmp	r3, #48	; 0x30
 8005c70:	d10a      	bne.n	8005c88 <__cvt+0x8c>
 8005c72:	2200      	movs	r2, #0
 8005c74:	2300      	movs	r3, #0
 8005c76:	4620      	mov	r0, r4
 8005c78:	4629      	mov	r1, r5
 8005c7a:	f7fa ff3d 	bl	8000af8 <__aeabi_dcmpeq>
 8005c7e:	b918      	cbnz	r0, 8005c88 <__cvt+0x8c>
 8005c80:	f1c6 0601 	rsb	r6, r6, #1
 8005c84:	f8ca 6000 	str.w	r6, [sl]
 8005c88:	f8da 3000 	ldr.w	r3, [sl]
 8005c8c:	4499      	add	r9, r3
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2300      	movs	r3, #0
 8005c92:	4620      	mov	r0, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7fa ff2f 	bl	8000af8 <__aeabi_dcmpeq>
 8005c9a:	b108      	cbz	r0, 8005ca0 <__cvt+0xa4>
 8005c9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ca0:	2230      	movs	r2, #48	; 0x30
 8005ca2:	9b03      	ldr	r3, [sp, #12]
 8005ca4:	454b      	cmp	r3, r9
 8005ca6:	d307      	bcc.n	8005cb8 <__cvt+0xbc>
 8005ca8:	9b03      	ldr	r3, [sp, #12]
 8005caa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cac:	1bdb      	subs	r3, r3, r7
 8005cae:	4638      	mov	r0, r7
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	b004      	add	sp, #16
 8005cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb8:	1c59      	adds	r1, r3, #1
 8005cba:	9103      	str	r1, [sp, #12]
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	e7f0      	b.n	8005ca2 <__cvt+0xa6>

08005cc0 <__exponent>:
 8005cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	bfb8      	it	lt
 8005cc8:	4249      	neglt	r1, r1
 8005cca:	f803 2b02 	strb.w	r2, [r3], #2
 8005cce:	bfb4      	ite	lt
 8005cd0:	222d      	movlt	r2, #45	; 0x2d
 8005cd2:	222b      	movge	r2, #43	; 0x2b
 8005cd4:	2909      	cmp	r1, #9
 8005cd6:	7042      	strb	r2, [r0, #1]
 8005cd8:	dd2a      	ble.n	8005d30 <__exponent+0x70>
 8005cda:	f10d 0407 	add.w	r4, sp, #7
 8005cde:	46a4      	mov	ip, r4
 8005ce0:	270a      	movs	r7, #10
 8005ce2:	46a6      	mov	lr, r4
 8005ce4:	460a      	mov	r2, r1
 8005ce6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005cea:	fb07 1516 	mls	r5, r7, r6, r1
 8005cee:	3530      	adds	r5, #48	; 0x30
 8005cf0:	2a63      	cmp	r2, #99	; 0x63
 8005cf2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005cf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	dcf1      	bgt.n	8005ce2 <__exponent+0x22>
 8005cfe:	3130      	adds	r1, #48	; 0x30
 8005d00:	f1ae 0502 	sub.w	r5, lr, #2
 8005d04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d08:	1c44      	adds	r4, r0, #1
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4561      	cmp	r1, ip
 8005d0e:	d30a      	bcc.n	8005d26 <__exponent+0x66>
 8005d10:	f10d 0209 	add.w	r2, sp, #9
 8005d14:	eba2 020e 	sub.w	r2, r2, lr
 8005d18:	4565      	cmp	r5, ip
 8005d1a:	bf88      	it	hi
 8005d1c:	2200      	movhi	r2, #0
 8005d1e:	4413      	add	r3, r2
 8005d20:	1a18      	subs	r0, r3, r0
 8005d22:	b003      	add	sp, #12
 8005d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d2e:	e7ed      	b.n	8005d0c <__exponent+0x4c>
 8005d30:	2330      	movs	r3, #48	; 0x30
 8005d32:	3130      	adds	r1, #48	; 0x30
 8005d34:	7083      	strb	r3, [r0, #2]
 8005d36:	70c1      	strb	r1, [r0, #3]
 8005d38:	1d03      	adds	r3, r0, #4
 8005d3a:	e7f1      	b.n	8005d20 <__exponent+0x60>

08005d3c <_printf_float>:
 8005d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d40:	ed2d 8b02 	vpush	{d8}
 8005d44:	b08d      	sub	sp, #52	; 0x34
 8005d46:	460c      	mov	r4, r1
 8005d48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d4c:	4616      	mov	r6, r2
 8005d4e:	461f      	mov	r7, r3
 8005d50:	4605      	mov	r5, r0
 8005d52:	f002 ff33 	bl	8008bbc <_localeconv_r>
 8005d56:	f8d0 a000 	ldr.w	sl, [r0]
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	f7fa fa4a 	bl	80001f4 <strlen>
 8005d60:	2300      	movs	r3, #0
 8005d62:	930a      	str	r3, [sp, #40]	; 0x28
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	9305      	str	r3, [sp, #20]
 8005d68:	f8d8 3000 	ldr.w	r3, [r8]
 8005d6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d70:	3307      	adds	r3, #7
 8005d72:	f023 0307 	bic.w	r3, r3, #7
 8005d76:	f103 0208 	add.w	r2, r3, #8
 8005d7a:	f8c8 2000 	str.w	r2, [r8]
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d8e:	9307      	str	r3, [sp, #28]
 8005d90:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d94:	ee08 0a10 	vmov	s16, r0
 8005d98:	4b9f      	ldr	r3, [pc, #636]	; (8006018 <_printf_float+0x2dc>)
 8005d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005da2:	f7fa fedb 	bl	8000b5c <__aeabi_dcmpun>
 8005da6:	bb88      	cbnz	r0, 8005e0c <_printf_float+0xd0>
 8005da8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dac:	4b9a      	ldr	r3, [pc, #616]	; (8006018 <_printf_float+0x2dc>)
 8005dae:	f04f 32ff 	mov.w	r2, #4294967295
 8005db2:	f7fa feb5 	bl	8000b20 <__aeabi_dcmple>
 8005db6:	bb48      	cbnz	r0, 8005e0c <_printf_float+0xd0>
 8005db8:	2200      	movs	r2, #0
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	f7fa fea4 	bl	8000b0c <__aeabi_dcmplt>
 8005dc4:	b110      	cbz	r0, 8005dcc <_printf_float+0x90>
 8005dc6:	232d      	movs	r3, #45	; 0x2d
 8005dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dcc:	4b93      	ldr	r3, [pc, #588]	; (800601c <_printf_float+0x2e0>)
 8005dce:	4894      	ldr	r0, [pc, #592]	; (8006020 <_printf_float+0x2e4>)
 8005dd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005dd4:	bf94      	ite	ls
 8005dd6:	4698      	movls	r8, r3
 8005dd8:	4680      	movhi	r8, r0
 8005dda:	2303      	movs	r3, #3
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	9b05      	ldr	r3, [sp, #20]
 8005de0:	f023 0204 	bic.w	r2, r3, #4
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	f04f 0900 	mov.w	r9, #0
 8005dea:	9700      	str	r7, [sp, #0]
 8005dec:	4633      	mov	r3, r6
 8005dee:	aa0b      	add	r2, sp, #44	; 0x2c
 8005df0:	4621      	mov	r1, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f9d8 	bl	80061a8 <_printf_common>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f040 8090 	bne.w	8005f1e <_printf_float+0x1e2>
 8005dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005e02:	b00d      	add	sp, #52	; 0x34
 8005e04:	ecbd 8b02 	vpop	{d8}
 8005e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	4640      	mov	r0, r8
 8005e12:	4649      	mov	r1, r9
 8005e14:	f7fa fea2 	bl	8000b5c <__aeabi_dcmpun>
 8005e18:	b140      	cbz	r0, 8005e2c <_printf_float+0xf0>
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bfbc      	itt	lt
 8005e20:	232d      	movlt	r3, #45	; 0x2d
 8005e22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e26:	487f      	ldr	r0, [pc, #508]	; (8006024 <_printf_float+0x2e8>)
 8005e28:	4b7f      	ldr	r3, [pc, #508]	; (8006028 <_printf_float+0x2ec>)
 8005e2a:	e7d1      	b.n	8005dd0 <_printf_float+0x94>
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e32:	9206      	str	r2, [sp, #24]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	d13f      	bne.n	8005eb8 <_printf_float+0x17c>
 8005e38:	2306      	movs	r3, #6
 8005e3a:	6063      	str	r3, [r4, #4]
 8005e3c:	9b05      	ldr	r3, [sp, #20]
 8005e3e:	6861      	ldr	r1, [r4, #4]
 8005e40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e44:	2300      	movs	r3, #0
 8005e46:	9303      	str	r3, [sp, #12]
 8005e48:	ab0a      	add	r3, sp, #40	; 0x28
 8005e4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e4e:	ab09      	add	r3, sp, #36	; 0x24
 8005e50:	ec49 8b10 	vmov	d0, r8, r9
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	6022      	str	r2, [r4, #0]
 8005e58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f7ff fecd 	bl	8005bfc <__cvt>
 8005e62:	9b06      	ldr	r3, [sp, #24]
 8005e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e66:	2b47      	cmp	r3, #71	; 0x47
 8005e68:	4680      	mov	r8, r0
 8005e6a:	d108      	bne.n	8005e7e <_printf_float+0x142>
 8005e6c:	1cc8      	adds	r0, r1, #3
 8005e6e:	db02      	blt.n	8005e76 <_printf_float+0x13a>
 8005e70:	6863      	ldr	r3, [r4, #4]
 8005e72:	4299      	cmp	r1, r3
 8005e74:	dd41      	ble.n	8005efa <_printf_float+0x1be>
 8005e76:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e7a:	fa5f fb8b 	uxtb.w	fp, fp
 8005e7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e82:	d820      	bhi.n	8005ec6 <_printf_float+0x18a>
 8005e84:	3901      	subs	r1, #1
 8005e86:	465a      	mov	r2, fp
 8005e88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e8c:	9109      	str	r1, [sp, #36]	; 0x24
 8005e8e:	f7ff ff17 	bl	8005cc0 <__exponent>
 8005e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e94:	1813      	adds	r3, r2, r0
 8005e96:	2a01      	cmp	r2, #1
 8005e98:	4681      	mov	r9, r0
 8005e9a:	6123      	str	r3, [r4, #16]
 8005e9c:	dc02      	bgt.n	8005ea4 <_printf_float+0x168>
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	07d2      	lsls	r2, r2, #31
 8005ea2:	d501      	bpl.n	8005ea8 <_printf_float+0x16c>
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d09c      	beq.n	8005dea <_printf_float+0xae>
 8005eb0:	232d      	movs	r3, #45	; 0x2d
 8005eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb6:	e798      	b.n	8005dea <_printf_float+0xae>
 8005eb8:	9a06      	ldr	r2, [sp, #24]
 8005eba:	2a47      	cmp	r2, #71	; 0x47
 8005ebc:	d1be      	bne.n	8005e3c <_printf_float+0x100>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1bc      	bne.n	8005e3c <_printf_float+0x100>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e7b9      	b.n	8005e3a <_printf_float+0xfe>
 8005ec6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005eca:	d118      	bne.n	8005efe <_printf_float+0x1c2>
 8005ecc:	2900      	cmp	r1, #0
 8005ece:	6863      	ldr	r3, [r4, #4]
 8005ed0:	dd0b      	ble.n	8005eea <_printf_float+0x1ae>
 8005ed2:	6121      	str	r1, [r4, #16]
 8005ed4:	b913      	cbnz	r3, 8005edc <_printf_float+0x1a0>
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	07d0      	lsls	r0, r2, #31
 8005eda:	d502      	bpl.n	8005ee2 <_printf_float+0x1a6>
 8005edc:	3301      	adds	r3, #1
 8005ede:	440b      	add	r3, r1
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ee4:	f04f 0900 	mov.w	r9, #0
 8005ee8:	e7de      	b.n	8005ea8 <_printf_float+0x16c>
 8005eea:	b913      	cbnz	r3, 8005ef2 <_printf_float+0x1b6>
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	07d2      	lsls	r2, r2, #31
 8005ef0:	d501      	bpl.n	8005ef6 <_printf_float+0x1ba>
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	e7f4      	b.n	8005ee0 <_printf_float+0x1a4>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e7f2      	b.n	8005ee0 <_printf_float+0x1a4>
 8005efa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f00:	4299      	cmp	r1, r3
 8005f02:	db05      	blt.n	8005f10 <_printf_float+0x1d4>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	6121      	str	r1, [r4, #16]
 8005f08:	07d8      	lsls	r0, r3, #31
 8005f0a:	d5ea      	bpl.n	8005ee2 <_printf_float+0x1a6>
 8005f0c:	1c4b      	adds	r3, r1, #1
 8005f0e:	e7e7      	b.n	8005ee0 <_printf_float+0x1a4>
 8005f10:	2900      	cmp	r1, #0
 8005f12:	bfd4      	ite	le
 8005f14:	f1c1 0202 	rsble	r2, r1, #2
 8005f18:	2201      	movgt	r2, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	e7e0      	b.n	8005ee0 <_printf_float+0x1a4>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	055a      	lsls	r2, r3, #21
 8005f22:	d407      	bmi.n	8005f34 <_printf_float+0x1f8>
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	4642      	mov	r2, r8
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d12c      	bne.n	8005f8c <_printf_float+0x250>
 8005f32:	e764      	b.n	8005dfe <_printf_float+0xc2>
 8005f34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f38:	f240 80e0 	bls.w	80060fc <_printf_float+0x3c0>
 8005f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f40:	2200      	movs	r2, #0
 8005f42:	2300      	movs	r3, #0
 8005f44:	f7fa fdd8 	bl	8000af8 <__aeabi_dcmpeq>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d034      	beq.n	8005fb6 <_printf_float+0x27a>
 8005f4c:	4a37      	ldr	r2, [pc, #220]	; (800602c <_printf_float+0x2f0>)
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	f43f af51 	beq.w	8005dfe <_printf_float+0xc2>
 8005f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f60:	429a      	cmp	r2, r3
 8005f62:	db02      	blt.n	8005f6a <_printf_float+0x22e>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	07d8      	lsls	r0, r3, #31
 8005f68:	d510      	bpl.n	8005f8c <_printf_float+0x250>
 8005f6a:	ee18 3a10 	vmov	r3, s16
 8005f6e:	4652      	mov	r2, sl
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	f43f af41 	beq.w	8005dfe <_printf_float+0xc2>
 8005f7c:	f04f 0800 	mov.w	r8, #0
 8005f80:	f104 091a 	add.w	r9, r4, #26
 8005f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f86:	3b01      	subs	r3, #1
 8005f88:	4543      	cmp	r3, r8
 8005f8a:	dc09      	bgt.n	8005fa0 <_printf_float+0x264>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	079b      	lsls	r3, r3, #30
 8005f90:	f100 8105 	bmi.w	800619e <_printf_float+0x462>
 8005f94:	68e0      	ldr	r0, [r4, #12]
 8005f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f98:	4298      	cmp	r0, r3
 8005f9a:	bfb8      	it	lt
 8005f9c:	4618      	movlt	r0, r3
 8005f9e:	e730      	b.n	8005e02 <_printf_float+0xc6>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	464a      	mov	r2, r9
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	47b8      	blx	r7
 8005faa:	3001      	adds	r0, #1
 8005fac:	f43f af27 	beq.w	8005dfe <_printf_float+0xc2>
 8005fb0:	f108 0801 	add.w	r8, r8, #1
 8005fb4:	e7e6      	b.n	8005f84 <_printf_float+0x248>
 8005fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	dc39      	bgt.n	8006030 <_printf_float+0x2f4>
 8005fbc:	4a1b      	ldr	r2, [pc, #108]	; (800602c <_printf_float+0x2f0>)
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b8      	blx	r7
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	f43f af19 	beq.w	8005dfe <_printf_float+0xc2>
 8005fcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	d102      	bne.n	8005fda <_printf_float+0x29e>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	07d9      	lsls	r1, r3, #31
 8005fd8:	d5d8      	bpl.n	8005f8c <_printf_float+0x250>
 8005fda:	ee18 3a10 	vmov	r3, s16
 8005fde:	4652      	mov	r2, sl
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	47b8      	blx	r7
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	f43f af09 	beq.w	8005dfe <_printf_float+0xc2>
 8005fec:	f04f 0900 	mov.w	r9, #0
 8005ff0:	f104 0a1a 	add.w	sl, r4, #26
 8005ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff6:	425b      	negs	r3, r3
 8005ff8:	454b      	cmp	r3, r9
 8005ffa:	dc01      	bgt.n	8006000 <_printf_float+0x2c4>
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffe:	e792      	b.n	8005f26 <_printf_float+0x1ea>
 8006000:	2301      	movs	r3, #1
 8006002:	4652      	mov	r2, sl
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	f43f aef7 	beq.w	8005dfe <_printf_float+0xc2>
 8006010:	f109 0901 	add.w	r9, r9, #1
 8006014:	e7ee      	b.n	8005ff4 <_printf_float+0x2b8>
 8006016:	bf00      	nop
 8006018:	7fefffff 	.word	0x7fefffff
 800601c:	0801ccc0 	.word	0x0801ccc0
 8006020:	0801ccc4 	.word	0x0801ccc4
 8006024:	0801cccc 	.word	0x0801cccc
 8006028:	0801ccc8 	.word	0x0801ccc8
 800602c:	0801ccd0 	.word	0x0801ccd0
 8006030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006034:	429a      	cmp	r2, r3
 8006036:	bfa8      	it	ge
 8006038:	461a      	movge	r2, r3
 800603a:	2a00      	cmp	r2, #0
 800603c:	4691      	mov	r9, r2
 800603e:	dc37      	bgt.n	80060b0 <_printf_float+0x374>
 8006040:	f04f 0b00 	mov.w	fp, #0
 8006044:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006048:	f104 021a 	add.w	r2, r4, #26
 800604c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800604e:	9305      	str	r3, [sp, #20]
 8006050:	eba3 0309 	sub.w	r3, r3, r9
 8006054:	455b      	cmp	r3, fp
 8006056:	dc33      	bgt.n	80060c0 <_printf_float+0x384>
 8006058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800605c:	429a      	cmp	r2, r3
 800605e:	db3b      	blt.n	80060d8 <_printf_float+0x39c>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	07da      	lsls	r2, r3, #31
 8006064:	d438      	bmi.n	80060d8 <_printf_float+0x39c>
 8006066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006068:	9b05      	ldr	r3, [sp, #20]
 800606a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	eba2 0901 	sub.w	r9, r2, r1
 8006072:	4599      	cmp	r9, r3
 8006074:	bfa8      	it	ge
 8006076:	4699      	movge	r9, r3
 8006078:	f1b9 0f00 	cmp.w	r9, #0
 800607c:	dc35      	bgt.n	80060ea <_printf_float+0x3ae>
 800607e:	f04f 0800 	mov.w	r8, #0
 8006082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006086:	f104 0a1a 	add.w	sl, r4, #26
 800608a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	eba3 0309 	sub.w	r3, r3, r9
 8006094:	4543      	cmp	r3, r8
 8006096:	f77f af79 	ble.w	8005f8c <_printf_float+0x250>
 800609a:	2301      	movs	r3, #1
 800609c:	4652      	mov	r2, sl
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f aeaa 	beq.w	8005dfe <_printf_float+0xc2>
 80060aa:	f108 0801 	add.w	r8, r8, #1
 80060ae:	e7ec      	b.n	800608a <_printf_float+0x34e>
 80060b0:	4613      	mov	r3, r2
 80060b2:	4631      	mov	r1, r6
 80060b4:	4642      	mov	r2, r8
 80060b6:	4628      	mov	r0, r5
 80060b8:	47b8      	blx	r7
 80060ba:	3001      	adds	r0, #1
 80060bc:	d1c0      	bne.n	8006040 <_printf_float+0x304>
 80060be:	e69e      	b.n	8005dfe <_printf_float+0xc2>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	9205      	str	r2, [sp, #20]
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	f43f ae97 	beq.w	8005dfe <_printf_float+0xc2>
 80060d0:	9a05      	ldr	r2, [sp, #20]
 80060d2:	f10b 0b01 	add.w	fp, fp, #1
 80060d6:	e7b9      	b.n	800604c <_printf_float+0x310>
 80060d8:	ee18 3a10 	vmov	r3, s16
 80060dc:	4652      	mov	r2, sl
 80060de:	4631      	mov	r1, r6
 80060e0:	4628      	mov	r0, r5
 80060e2:	47b8      	blx	r7
 80060e4:	3001      	adds	r0, #1
 80060e6:	d1be      	bne.n	8006066 <_printf_float+0x32a>
 80060e8:	e689      	b.n	8005dfe <_printf_float+0xc2>
 80060ea:	9a05      	ldr	r2, [sp, #20]
 80060ec:	464b      	mov	r3, r9
 80060ee:	4442      	add	r2, r8
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	d1c1      	bne.n	800607e <_printf_float+0x342>
 80060fa:	e680      	b.n	8005dfe <_printf_float+0xc2>
 80060fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060fe:	2a01      	cmp	r2, #1
 8006100:	dc01      	bgt.n	8006106 <_printf_float+0x3ca>
 8006102:	07db      	lsls	r3, r3, #31
 8006104:	d538      	bpl.n	8006178 <_printf_float+0x43c>
 8006106:	2301      	movs	r3, #1
 8006108:	4642      	mov	r2, r8
 800610a:	4631      	mov	r1, r6
 800610c:	4628      	mov	r0, r5
 800610e:	47b8      	blx	r7
 8006110:	3001      	adds	r0, #1
 8006112:	f43f ae74 	beq.w	8005dfe <_printf_float+0xc2>
 8006116:	ee18 3a10 	vmov	r3, s16
 800611a:	4652      	mov	r2, sl
 800611c:	4631      	mov	r1, r6
 800611e:	4628      	mov	r0, r5
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	f43f ae6b 	beq.w	8005dfe <_printf_float+0xc2>
 8006128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800612c:	2200      	movs	r2, #0
 800612e:	2300      	movs	r3, #0
 8006130:	f7fa fce2 	bl	8000af8 <__aeabi_dcmpeq>
 8006134:	b9d8      	cbnz	r0, 800616e <_printf_float+0x432>
 8006136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006138:	f108 0201 	add.w	r2, r8, #1
 800613c:	3b01      	subs	r3, #1
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	47b8      	blx	r7
 8006144:	3001      	adds	r0, #1
 8006146:	d10e      	bne.n	8006166 <_printf_float+0x42a>
 8006148:	e659      	b.n	8005dfe <_printf_float+0xc2>
 800614a:	2301      	movs	r3, #1
 800614c:	4652      	mov	r2, sl
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	f43f ae52 	beq.w	8005dfe <_printf_float+0xc2>
 800615a:	f108 0801 	add.w	r8, r8, #1
 800615e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006160:	3b01      	subs	r3, #1
 8006162:	4543      	cmp	r3, r8
 8006164:	dcf1      	bgt.n	800614a <_printf_float+0x40e>
 8006166:	464b      	mov	r3, r9
 8006168:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800616c:	e6dc      	b.n	8005f28 <_printf_float+0x1ec>
 800616e:	f04f 0800 	mov.w	r8, #0
 8006172:	f104 0a1a 	add.w	sl, r4, #26
 8006176:	e7f2      	b.n	800615e <_printf_float+0x422>
 8006178:	2301      	movs	r3, #1
 800617a:	4642      	mov	r2, r8
 800617c:	e7df      	b.n	800613e <_printf_float+0x402>
 800617e:	2301      	movs	r3, #1
 8006180:	464a      	mov	r2, r9
 8006182:	4631      	mov	r1, r6
 8006184:	4628      	mov	r0, r5
 8006186:	47b8      	blx	r7
 8006188:	3001      	adds	r0, #1
 800618a:	f43f ae38 	beq.w	8005dfe <_printf_float+0xc2>
 800618e:	f108 0801 	add.w	r8, r8, #1
 8006192:	68e3      	ldr	r3, [r4, #12]
 8006194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006196:	1a5b      	subs	r3, r3, r1
 8006198:	4543      	cmp	r3, r8
 800619a:	dcf0      	bgt.n	800617e <_printf_float+0x442>
 800619c:	e6fa      	b.n	8005f94 <_printf_float+0x258>
 800619e:	f04f 0800 	mov.w	r8, #0
 80061a2:	f104 0919 	add.w	r9, r4, #25
 80061a6:	e7f4      	b.n	8006192 <_printf_float+0x456>

080061a8 <_printf_common>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	4616      	mov	r6, r2
 80061ae:	4699      	mov	r9, r3
 80061b0:	688a      	ldr	r2, [r1, #8]
 80061b2:	690b      	ldr	r3, [r1, #16]
 80061b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	bfb8      	it	lt
 80061bc:	4613      	movlt	r3, r2
 80061be:	6033      	str	r3, [r6, #0]
 80061c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061c4:	4607      	mov	r7, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	b10a      	cbz	r2, 80061ce <_printf_common+0x26>
 80061ca:	3301      	adds	r3, #1
 80061cc:	6033      	str	r3, [r6, #0]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	0699      	lsls	r1, r3, #26
 80061d2:	bf42      	ittt	mi
 80061d4:	6833      	ldrmi	r3, [r6, #0]
 80061d6:	3302      	addmi	r3, #2
 80061d8:	6033      	strmi	r3, [r6, #0]
 80061da:	6825      	ldr	r5, [r4, #0]
 80061dc:	f015 0506 	ands.w	r5, r5, #6
 80061e0:	d106      	bne.n	80061f0 <_printf_common+0x48>
 80061e2:	f104 0a19 	add.w	sl, r4, #25
 80061e6:	68e3      	ldr	r3, [r4, #12]
 80061e8:	6832      	ldr	r2, [r6, #0]
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	42ab      	cmp	r3, r5
 80061ee:	dc26      	bgt.n	800623e <_printf_common+0x96>
 80061f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061f4:	1e13      	subs	r3, r2, #0
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	bf18      	it	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	0692      	lsls	r2, r2, #26
 80061fe:	d42b      	bmi.n	8006258 <_printf_common+0xb0>
 8006200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006204:	4649      	mov	r1, r9
 8006206:	4638      	mov	r0, r7
 8006208:	47c0      	blx	r8
 800620a:	3001      	adds	r0, #1
 800620c:	d01e      	beq.n	800624c <_printf_common+0xa4>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	68e5      	ldr	r5, [r4, #12]
 8006212:	6832      	ldr	r2, [r6, #0]
 8006214:	f003 0306 	and.w	r3, r3, #6
 8006218:	2b04      	cmp	r3, #4
 800621a:	bf08      	it	eq
 800621c:	1aad      	subeq	r5, r5, r2
 800621e:	68a3      	ldr	r3, [r4, #8]
 8006220:	6922      	ldr	r2, [r4, #16]
 8006222:	bf0c      	ite	eq
 8006224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006228:	2500      	movne	r5, #0
 800622a:	4293      	cmp	r3, r2
 800622c:	bfc4      	itt	gt
 800622e:	1a9b      	subgt	r3, r3, r2
 8006230:	18ed      	addgt	r5, r5, r3
 8006232:	2600      	movs	r6, #0
 8006234:	341a      	adds	r4, #26
 8006236:	42b5      	cmp	r5, r6
 8006238:	d11a      	bne.n	8006270 <_printf_common+0xc8>
 800623a:	2000      	movs	r0, #0
 800623c:	e008      	b.n	8006250 <_printf_common+0xa8>
 800623e:	2301      	movs	r3, #1
 8006240:	4652      	mov	r2, sl
 8006242:	4649      	mov	r1, r9
 8006244:	4638      	mov	r0, r7
 8006246:	47c0      	blx	r8
 8006248:	3001      	adds	r0, #1
 800624a:	d103      	bne.n	8006254 <_printf_common+0xac>
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006254:	3501      	adds	r5, #1
 8006256:	e7c6      	b.n	80061e6 <_printf_common+0x3e>
 8006258:	18e1      	adds	r1, r4, r3
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	2030      	movs	r0, #48	; 0x30
 800625e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006262:	4422      	add	r2, r4
 8006264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800626c:	3302      	adds	r3, #2
 800626e:	e7c7      	b.n	8006200 <_printf_common+0x58>
 8006270:	2301      	movs	r3, #1
 8006272:	4622      	mov	r2, r4
 8006274:	4649      	mov	r1, r9
 8006276:	4638      	mov	r0, r7
 8006278:	47c0      	blx	r8
 800627a:	3001      	adds	r0, #1
 800627c:	d0e6      	beq.n	800624c <_printf_common+0xa4>
 800627e:	3601      	adds	r6, #1
 8006280:	e7d9      	b.n	8006236 <_printf_common+0x8e>
	...

08006284 <_printf_i>:
 8006284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	460c      	mov	r4, r1
 800628a:	4691      	mov	r9, r2
 800628c:	7e27      	ldrb	r7, [r4, #24]
 800628e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006290:	2f78      	cmp	r7, #120	; 0x78
 8006292:	4680      	mov	r8, r0
 8006294:	469a      	mov	sl, r3
 8006296:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800629a:	d807      	bhi.n	80062ac <_printf_i+0x28>
 800629c:	2f62      	cmp	r7, #98	; 0x62
 800629e:	d80a      	bhi.n	80062b6 <_printf_i+0x32>
 80062a0:	2f00      	cmp	r7, #0
 80062a2:	f000 80d8 	beq.w	8006456 <_printf_i+0x1d2>
 80062a6:	2f58      	cmp	r7, #88	; 0x58
 80062a8:	f000 80a3 	beq.w	80063f2 <_printf_i+0x16e>
 80062ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062b4:	e03a      	b.n	800632c <_printf_i+0xa8>
 80062b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ba:	2b15      	cmp	r3, #21
 80062bc:	d8f6      	bhi.n	80062ac <_printf_i+0x28>
 80062be:	a001      	add	r0, pc, #4	; (adr r0, 80062c4 <_printf_i+0x40>)
 80062c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80062c4:	0800631d 	.word	0x0800631d
 80062c8:	08006331 	.word	0x08006331
 80062cc:	080062ad 	.word	0x080062ad
 80062d0:	080062ad 	.word	0x080062ad
 80062d4:	080062ad 	.word	0x080062ad
 80062d8:	080062ad 	.word	0x080062ad
 80062dc:	08006331 	.word	0x08006331
 80062e0:	080062ad 	.word	0x080062ad
 80062e4:	080062ad 	.word	0x080062ad
 80062e8:	080062ad 	.word	0x080062ad
 80062ec:	080062ad 	.word	0x080062ad
 80062f0:	0800643d 	.word	0x0800643d
 80062f4:	08006361 	.word	0x08006361
 80062f8:	0800641f 	.word	0x0800641f
 80062fc:	080062ad 	.word	0x080062ad
 8006300:	080062ad 	.word	0x080062ad
 8006304:	0800645f 	.word	0x0800645f
 8006308:	080062ad 	.word	0x080062ad
 800630c:	08006361 	.word	0x08006361
 8006310:	080062ad 	.word	0x080062ad
 8006314:	080062ad 	.word	0x080062ad
 8006318:	08006427 	.word	0x08006427
 800631c:	680b      	ldr	r3, [r1, #0]
 800631e:	1d1a      	adds	r2, r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	600a      	str	r2, [r1, #0]
 8006324:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800632c:	2301      	movs	r3, #1
 800632e:	e0a3      	b.n	8006478 <_printf_i+0x1f4>
 8006330:	6825      	ldr	r5, [r4, #0]
 8006332:	6808      	ldr	r0, [r1, #0]
 8006334:	062e      	lsls	r6, r5, #24
 8006336:	f100 0304 	add.w	r3, r0, #4
 800633a:	d50a      	bpl.n	8006352 <_printf_i+0xce>
 800633c:	6805      	ldr	r5, [r0, #0]
 800633e:	600b      	str	r3, [r1, #0]
 8006340:	2d00      	cmp	r5, #0
 8006342:	da03      	bge.n	800634c <_printf_i+0xc8>
 8006344:	232d      	movs	r3, #45	; 0x2d
 8006346:	426d      	negs	r5, r5
 8006348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800634c:	485e      	ldr	r0, [pc, #376]	; (80064c8 <_printf_i+0x244>)
 800634e:	230a      	movs	r3, #10
 8006350:	e019      	b.n	8006386 <_printf_i+0x102>
 8006352:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006356:	6805      	ldr	r5, [r0, #0]
 8006358:	600b      	str	r3, [r1, #0]
 800635a:	bf18      	it	ne
 800635c:	b22d      	sxthne	r5, r5
 800635e:	e7ef      	b.n	8006340 <_printf_i+0xbc>
 8006360:	680b      	ldr	r3, [r1, #0]
 8006362:	6825      	ldr	r5, [r4, #0]
 8006364:	1d18      	adds	r0, r3, #4
 8006366:	6008      	str	r0, [r1, #0]
 8006368:	0628      	lsls	r0, r5, #24
 800636a:	d501      	bpl.n	8006370 <_printf_i+0xec>
 800636c:	681d      	ldr	r5, [r3, #0]
 800636e:	e002      	b.n	8006376 <_printf_i+0xf2>
 8006370:	0669      	lsls	r1, r5, #25
 8006372:	d5fb      	bpl.n	800636c <_printf_i+0xe8>
 8006374:	881d      	ldrh	r5, [r3, #0]
 8006376:	4854      	ldr	r0, [pc, #336]	; (80064c8 <_printf_i+0x244>)
 8006378:	2f6f      	cmp	r7, #111	; 0x6f
 800637a:	bf0c      	ite	eq
 800637c:	2308      	moveq	r3, #8
 800637e:	230a      	movne	r3, #10
 8006380:	2100      	movs	r1, #0
 8006382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006386:	6866      	ldr	r6, [r4, #4]
 8006388:	60a6      	str	r6, [r4, #8]
 800638a:	2e00      	cmp	r6, #0
 800638c:	bfa2      	ittt	ge
 800638e:	6821      	ldrge	r1, [r4, #0]
 8006390:	f021 0104 	bicge.w	r1, r1, #4
 8006394:	6021      	strge	r1, [r4, #0]
 8006396:	b90d      	cbnz	r5, 800639c <_printf_i+0x118>
 8006398:	2e00      	cmp	r6, #0
 800639a:	d04d      	beq.n	8006438 <_printf_i+0x1b4>
 800639c:	4616      	mov	r6, r2
 800639e:	fbb5 f1f3 	udiv	r1, r5, r3
 80063a2:	fb03 5711 	mls	r7, r3, r1, r5
 80063a6:	5dc7      	ldrb	r7, [r0, r7]
 80063a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063ac:	462f      	mov	r7, r5
 80063ae:	42bb      	cmp	r3, r7
 80063b0:	460d      	mov	r5, r1
 80063b2:	d9f4      	bls.n	800639e <_printf_i+0x11a>
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d10b      	bne.n	80063d0 <_printf_i+0x14c>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	07df      	lsls	r7, r3, #31
 80063bc:	d508      	bpl.n	80063d0 <_printf_i+0x14c>
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	6861      	ldr	r1, [r4, #4]
 80063c2:	4299      	cmp	r1, r3
 80063c4:	bfde      	ittt	le
 80063c6:	2330      	movle	r3, #48	; 0x30
 80063c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063d0:	1b92      	subs	r2, r2, r6
 80063d2:	6122      	str	r2, [r4, #16]
 80063d4:	f8cd a000 	str.w	sl, [sp]
 80063d8:	464b      	mov	r3, r9
 80063da:	aa03      	add	r2, sp, #12
 80063dc:	4621      	mov	r1, r4
 80063de:	4640      	mov	r0, r8
 80063e0:	f7ff fee2 	bl	80061a8 <_printf_common>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d14c      	bne.n	8006482 <_printf_i+0x1fe>
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	b004      	add	sp, #16
 80063ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f2:	4835      	ldr	r0, [pc, #212]	; (80064c8 <_printf_i+0x244>)
 80063f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	680e      	ldr	r6, [r1, #0]
 80063fc:	061f      	lsls	r7, r3, #24
 80063fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006402:	600e      	str	r6, [r1, #0]
 8006404:	d514      	bpl.n	8006430 <_printf_i+0x1ac>
 8006406:	07d9      	lsls	r1, r3, #31
 8006408:	bf44      	itt	mi
 800640a:	f043 0320 	orrmi.w	r3, r3, #32
 800640e:	6023      	strmi	r3, [r4, #0]
 8006410:	b91d      	cbnz	r5, 800641a <_printf_i+0x196>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	f023 0320 	bic.w	r3, r3, #32
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	2310      	movs	r3, #16
 800641c:	e7b0      	b.n	8006380 <_printf_i+0xfc>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	f043 0320 	orr.w	r3, r3, #32
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	2378      	movs	r3, #120	; 0x78
 8006428:	4828      	ldr	r0, [pc, #160]	; (80064cc <_printf_i+0x248>)
 800642a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800642e:	e7e3      	b.n	80063f8 <_printf_i+0x174>
 8006430:	065e      	lsls	r6, r3, #25
 8006432:	bf48      	it	mi
 8006434:	b2ad      	uxthmi	r5, r5
 8006436:	e7e6      	b.n	8006406 <_printf_i+0x182>
 8006438:	4616      	mov	r6, r2
 800643a:	e7bb      	b.n	80063b4 <_printf_i+0x130>
 800643c:	680b      	ldr	r3, [r1, #0]
 800643e:	6826      	ldr	r6, [r4, #0]
 8006440:	6960      	ldr	r0, [r4, #20]
 8006442:	1d1d      	adds	r5, r3, #4
 8006444:	600d      	str	r5, [r1, #0]
 8006446:	0635      	lsls	r5, r6, #24
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	d501      	bpl.n	8006450 <_printf_i+0x1cc>
 800644c:	6018      	str	r0, [r3, #0]
 800644e:	e002      	b.n	8006456 <_printf_i+0x1d2>
 8006450:	0671      	lsls	r1, r6, #25
 8006452:	d5fb      	bpl.n	800644c <_printf_i+0x1c8>
 8006454:	8018      	strh	r0, [r3, #0]
 8006456:	2300      	movs	r3, #0
 8006458:	6123      	str	r3, [r4, #16]
 800645a:	4616      	mov	r6, r2
 800645c:	e7ba      	b.n	80063d4 <_printf_i+0x150>
 800645e:	680b      	ldr	r3, [r1, #0]
 8006460:	1d1a      	adds	r2, r3, #4
 8006462:	600a      	str	r2, [r1, #0]
 8006464:	681e      	ldr	r6, [r3, #0]
 8006466:	6862      	ldr	r2, [r4, #4]
 8006468:	2100      	movs	r1, #0
 800646a:	4630      	mov	r0, r6
 800646c:	f7f9 fed0 	bl	8000210 <memchr>
 8006470:	b108      	cbz	r0, 8006476 <_printf_i+0x1f2>
 8006472:	1b80      	subs	r0, r0, r6
 8006474:	6060      	str	r0, [r4, #4]
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	2300      	movs	r3, #0
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006480:	e7a8      	b.n	80063d4 <_printf_i+0x150>
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	4632      	mov	r2, r6
 8006486:	4649      	mov	r1, r9
 8006488:	4640      	mov	r0, r8
 800648a:	47d0      	blx	sl
 800648c:	3001      	adds	r0, #1
 800648e:	d0ab      	beq.n	80063e8 <_printf_i+0x164>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	079b      	lsls	r3, r3, #30
 8006494:	d413      	bmi.n	80064be <_printf_i+0x23a>
 8006496:	68e0      	ldr	r0, [r4, #12]
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	4298      	cmp	r0, r3
 800649c:	bfb8      	it	lt
 800649e:	4618      	movlt	r0, r3
 80064a0:	e7a4      	b.n	80063ec <_printf_i+0x168>
 80064a2:	2301      	movs	r3, #1
 80064a4:	4632      	mov	r2, r6
 80064a6:	4649      	mov	r1, r9
 80064a8:	4640      	mov	r0, r8
 80064aa:	47d0      	blx	sl
 80064ac:	3001      	adds	r0, #1
 80064ae:	d09b      	beq.n	80063e8 <_printf_i+0x164>
 80064b0:	3501      	adds	r5, #1
 80064b2:	68e3      	ldr	r3, [r4, #12]
 80064b4:	9903      	ldr	r1, [sp, #12]
 80064b6:	1a5b      	subs	r3, r3, r1
 80064b8:	42ab      	cmp	r3, r5
 80064ba:	dcf2      	bgt.n	80064a2 <_printf_i+0x21e>
 80064bc:	e7eb      	b.n	8006496 <_printf_i+0x212>
 80064be:	2500      	movs	r5, #0
 80064c0:	f104 0619 	add.w	r6, r4, #25
 80064c4:	e7f5      	b.n	80064b2 <_printf_i+0x22e>
 80064c6:	bf00      	nop
 80064c8:	0801ccd2 	.word	0x0801ccd2
 80064cc:	0801cce3 	.word	0x0801cce3

080064d0 <_scanf_float>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	b087      	sub	sp, #28
 80064d6:	4617      	mov	r7, r2
 80064d8:	9303      	str	r3, [sp, #12]
 80064da:	688b      	ldr	r3, [r1, #8]
 80064dc:	1e5a      	subs	r2, r3, #1
 80064de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80064e2:	bf83      	ittte	hi
 80064e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80064e8:	195b      	addhi	r3, r3, r5
 80064ea:	9302      	strhi	r3, [sp, #8]
 80064ec:	2300      	movls	r3, #0
 80064ee:	bf86      	itte	hi
 80064f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80064f4:	608b      	strhi	r3, [r1, #8]
 80064f6:	9302      	strls	r3, [sp, #8]
 80064f8:	680b      	ldr	r3, [r1, #0]
 80064fa:	468b      	mov	fp, r1
 80064fc:	2500      	movs	r5, #0
 80064fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006502:	f84b 3b1c 	str.w	r3, [fp], #28
 8006506:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800650a:	4680      	mov	r8, r0
 800650c:	460c      	mov	r4, r1
 800650e:	465e      	mov	r6, fp
 8006510:	46aa      	mov	sl, r5
 8006512:	46a9      	mov	r9, r5
 8006514:	9501      	str	r5, [sp, #4]
 8006516:	68a2      	ldr	r2, [r4, #8]
 8006518:	b152      	cbz	r2, 8006530 <_scanf_float+0x60>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b4e      	cmp	r3, #78	; 0x4e
 8006520:	d864      	bhi.n	80065ec <_scanf_float+0x11c>
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d83c      	bhi.n	80065a0 <_scanf_float+0xd0>
 8006526:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800652a:	b2c8      	uxtb	r0, r1
 800652c:	280e      	cmp	r0, #14
 800652e:	d93a      	bls.n	80065a6 <_scanf_float+0xd6>
 8006530:	f1b9 0f00 	cmp.w	r9, #0
 8006534:	d003      	beq.n	800653e <_scanf_float+0x6e>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006542:	f1ba 0f01 	cmp.w	sl, #1
 8006546:	f200 8113 	bhi.w	8006770 <_scanf_float+0x2a0>
 800654a:	455e      	cmp	r6, fp
 800654c:	f200 8105 	bhi.w	800675a <_scanf_float+0x28a>
 8006550:	2501      	movs	r5, #1
 8006552:	4628      	mov	r0, r5
 8006554:	b007      	add	sp, #28
 8006556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800655e:	2a0d      	cmp	r2, #13
 8006560:	d8e6      	bhi.n	8006530 <_scanf_float+0x60>
 8006562:	a101      	add	r1, pc, #4	; (adr r1, 8006568 <_scanf_float+0x98>)
 8006564:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006568:	080066a7 	.word	0x080066a7
 800656c:	08006531 	.word	0x08006531
 8006570:	08006531 	.word	0x08006531
 8006574:	08006531 	.word	0x08006531
 8006578:	08006707 	.word	0x08006707
 800657c:	080066df 	.word	0x080066df
 8006580:	08006531 	.word	0x08006531
 8006584:	08006531 	.word	0x08006531
 8006588:	080066b5 	.word	0x080066b5
 800658c:	08006531 	.word	0x08006531
 8006590:	08006531 	.word	0x08006531
 8006594:	08006531 	.word	0x08006531
 8006598:	08006531 	.word	0x08006531
 800659c:	0800666d 	.word	0x0800666d
 80065a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80065a4:	e7db      	b.n	800655e <_scanf_float+0x8e>
 80065a6:	290e      	cmp	r1, #14
 80065a8:	d8c2      	bhi.n	8006530 <_scanf_float+0x60>
 80065aa:	a001      	add	r0, pc, #4	; (adr r0, 80065b0 <_scanf_float+0xe0>)
 80065ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80065b0:	0800665f 	.word	0x0800665f
 80065b4:	08006531 	.word	0x08006531
 80065b8:	0800665f 	.word	0x0800665f
 80065bc:	080066f3 	.word	0x080066f3
 80065c0:	08006531 	.word	0x08006531
 80065c4:	0800660d 	.word	0x0800660d
 80065c8:	08006649 	.word	0x08006649
 80065cc:	08006649 	.word	0x08006649
 80065d0:	08006649 	.word	0x08006649
 80065d4:	08006649 	.word	0x08006649
 80065d8:	08006649 	.word	0x08006649
 80065dc:	08006649 	.word	0x08006649
 80065e0:	08006649 	.word	0x08006649
 80065e4:	08006649 	.word	0x08006649
 80065e8:	08006649 	.word	0x08006649
 80065ec:	2b6e      	cmp	r3, #110	; 0x6e
 80065ee:	d809      	bhi.n	8006604 <_scanf_float+0x134>
 80065f0:	2b60      	cmp	r3, #96	; 0x60
 80065f2:	d8b2      	bhi.n	800655a <_scanf_float+0x8a>
 80065f4:	2b54      	cmp	r3, #84	; 0x54
 80065f6:	d077      	beq.n	80066e8 <_scanf_float+0x218>
 80065f8:	2b59      	cmp	r3, #89	; 0x59
 80065fa:	d199      	bne.n	8006530 <_scanf_float+0x60>
 80065fc:	2d07      	cmp	r5, #7
 80065fe:	d197      	bne.n	8006530 <_scanf_float+0x60>
 8006600:	2508      	movs	r5, #8
 8006602:	e029      	b.n	8006658 <_scanf_float+0x188>
 8006604:	2b74      	cmp	r3, #116	; 0x74
 8006606:	d06f      	beq.n	80066e8 <_scanf_float+0x218>
 8006608:	2b79      	cmp	r3, #121	; 0x79
 800660a:	e7f6      	b.n	80065fa <_scanf_float+0x12a>
 800660c:	6821      	ldr	r1, [r4, #0]
 800660e:	05c8      	lsls	r0, r1, #23
 8006610:	d51a      	bpl.n	8006648 <_scanf_float+0x178>
 8006612:	9b02      	ldr	r3, [sp, #8]
 8006614:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006618:	6021      	str	r1, [r4, #0]
 800661a:	f109 0901 	add.w	r9, r9, #1
 800661e:	b11b      	cbz	r3, 8006628 <_scanf_float+0x158>
 8006620:	3b01      	subs	r3, #1
 8006622:	3201      	adds	r2, #1
 8006624:	9302      	str	r3, [sp, #8]
 8006626:	60a2      	str	r2, [r4, #8]
 8006628:	68a3      	ldr	r3, [r4, #8]
 800662a:	3b01      	subs	r3, #1
 800662c:	60a3      	str	r3, [r4, #8]
 800662e:	6923      	ldr	r3, [r4, #16]
 8006630:	3301      	adds	r3, #1
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3b01      	subs	r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	607b      	str	r3, [r7, #4]
 800663c:	f340 8084 	ble.w	8006748 <_scanf_float+0x278>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	e766      	b.n	8006516 <_scanf_float+0x46>
 8006648:	eb1a 0f05 	cmn.w	sl, r5
 800664c:	f47f af70 	bne.w	8006530 <_scanf_float+0x60>
 8006650:	6822      	ldr	r2, [r4, #0]
 8006652:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006656:	6022      	str	r2, [r4, #0]
 8006658:	f806 3b01 	strb.w	r3, [r6], #1
 800665c:	e7e4      	b.n	8006628 <_scanf_float+0x158>
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	0610      	lsls	r0, r2, #24
 8006662:	f57f af65 	bpl.w	8006530 <_scanf_float+0x60>
 8006666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800666a:	e7f4      	b.n	8006656 <_scanf_float+0x186>
 800666c:	f1ba 0f00 	cmp.w	sl, #0
 8006670:	d10e      	bne.n	8006690 <_scanf_float+0x1c0>
 8006672:	f1b9 0f00 	cmp.w	r9, #0
 8006676:	d10e      	bne.n	8006696 <_scanf_float+0x1c6>
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800667e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006682:	d108      	bne.n	8006696 <_scanf_float+0x1c6>
 8006684:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006688:	6022      	str	r2, [r4, #0]
 800668a:	f04f 0a01 	mov.w	sl, #1
 800668e:	e7e3      	b.n	8006658 <_scanf_float+0x188>
 8006690:	f1ba 0f02 	cmp.w	sl, #2
 8006694:	d055      	beq.n	8006742 <_scanf_float+0x272>
 8006696:	2d01      	cmp	r5, #1
 8006698:	d002      	beq.n	80066a0 <_scanf_float+0x1d0>
 800669a:	2d04      	cmp	r5, #4
 800669c:	f47f af48 	bne.w	8006530 <_scanf_float+0x60>
 80066a0:	3501      	adds	r5, #1
 80066a2:	b2ed      	uxtb	r5, r5
 80066a4:	e7d8      	b.n	8006658 <_scanf_float+0x188>
 80066a6:	f1ba 0f01 	cmp.w	sl, #1
 80066aa:	f47f af41 	bne.w	8006530 <_scanf_float+0x60>
 80066ae:	f04f 0a02 	mov.w	sl, #2
 80066b2:	e7d1      	b.n	8006658 <_scanf_float+0x188>
 80066b4:	b97d      	cbnz	r5, 80066d6 <_scanf_float+0x206>
 80066b6:	f1b9 0f00 	cmp.w	r9, #0
 80066ba:	f47f af3c 	bne.w	8006536 <_scanf_float+0x66>
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80066c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80066c8:	f47f af39 	bne.w	800653e <_scanf_float+0x6e>
 80066cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	2501      	movs	r5, #1
 80066d4:	e7c0      	b.n	8006658 <_scanf_float+0x188>
 80066d6:	2d03      	cmp	r5, #3
 80066d8:	d0e2      	beq.n	80066a0 <_scanf_float+0x1d0>
 80066da:	2d05      	cmp	r5, #5
 80066dc:	e7de      	b.n	800669c <_scanf_float+0x1cc>
 80066de:	2d02      	cmp	r5, #2
 80066e0:	f47f af26 	bne.w	8006530 <_scanf_float+0x60>
 80066e4:	2503      	movs	r5, #3
 80066e6:	e7b7      	b.n	8006658 <_scanf_float+0x188>
 80066e8:	2d06      	cmp	r5, #6
 80066ea:	f47f af21 	bne.w	8006530 <_scanf_float+0x60>
 80066ee:	2507      	movs	r5, #7
 80066f0:	e7b2      	b.n	8006658 <_scanf_float+0x188>
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	0591      	lsls	r1, r2, #22
 80066f6:	f57f af1b 	bpl.w	8006530 <_scanf_float+0x60>
 80066fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80066fe:	6022      	str	r2, [r4, #0]
 8006700:	f8cd 9004 	str.w	r9, [sp, #4]
 8006704:	e7a8      	b.n	8006658 <_scanf_float+0x188>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800670c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006710:	d006      	beq.n	8006720 <_scanf_float+0x250>
 8006712:	0550      	lsls	r0, r2, #21
 8006714:	f57f af0c 	bpl.w	8006530 <_scanf_float+0x60>
 8006718:	f1b9 0f00 	cmp.w	r9, #0
 800671c:	f43f af0f 	beq.w	800653e <_scanf_float+0x6e>
 8006720:	0591      	lsls	r1, r2, #22
 8006722:	bf58      	it	pl
 8006724:	9901      	ldrpl	r1, [sp, #4]
 8006726:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800672a:	bf58      	it	pl
 800672c:	eba9 0101 	subpl.w	r1, r9, r1
 8006730:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006734:	bf58      	it	pl
 8006736:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800673a:	6022      	str	r2, [r4, #0]
 800673c:	f04f 0900 	mov.w	r9, #0
 8006740:	e78a      	b.n	8006658 <_scanf_float+0x188>
 8006742:	f04f 0a03 	mov.w	sl, #3
 8006746:	e787      	b.n	8006658 <_scanf_float+0x188>
 8006748:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800674c:	4639      	mov	r1, r7
 800674e:	4640      	mov	r0, r8
 8006750:	4798      	blx	r3
 8006752:	2800      	cmp	r0, #0
 8006754:	f43f aedf 	beq.w	8006516 <_scanf_float+0x46>
 8006758:	e6ea      	b.n	8006530 <_scanf_float+0x60>
 800675a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800675e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006762:	463a      	mov	r2, r7
 8006764:	4640      	mov	r0, r8
 8006766:	4798      	blx	r3
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	3b01      	subs	r3, #1
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	e6ec      	b.n	800654a <_scanf_float+0x7a>
 8006770:	1e6b      	subs	r3, r5, #1
 8006772:	2b06      	cmp	r3, #6
 8006774:	d825      	bhi.n	80067c2 <_scanf_float+0x2f2>
 8006776:	2d02      	cmp	r5, #2
 8006778:	d836      	bhi.n	80067e8 <_scanf_float+0x318>
 800677a:	455e      	cmp	r6, fp
 800677c:	f67f aee8 	bls.w	8006550 <_scanf_float+0x80>
 8006780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006784:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006788:	463a      	mov	r2, r7
 800678a:	4640      	mov	r0, r8
 800678c:	4798      	blx	r3
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	3b01      	subs	r3, #1
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	e7f1      	b.n	800677a <_scanf_float+0x2aa>
 8006796:	9802      	ldr	r0, [sp, #8]
 8006798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800679c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80067a0:	9002      	str	r0, [sp, #8]
 80067a2:	463a      	mov	r2, r7
 80067a4:	4640      	mov	r0, r8
 80067a6:	4798      	blx	r3
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	6123      	str	r3, [r4, #16]
 80067ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067b2:	fa5f fa8a 	uxtb.w	sl, sl
 80067b6:	f1ba 0f02 	cmp.w	sl, #2
 80067ba:	d1ec      	bne.n	8006796 <_scanf_float+0x2c6>
 80067bc:	3d03      	subs	r5, #3
 80067be:	b2ed      	uxtb	r5, r5
 80067c0:	1b76      	subs	r6, r6, r5
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	05da      	lsls	r2, r3, #23
 80067c6:	d52f      	bpl.n	8006828 <_scanf_float+0x358>
 80067c8:	055b      	lsls	r3, r3, #21
 80067ca:	d510      	bpl.n	80067ee <_scanf_float+0x31e>
 80067cc:	455e      	cmp	r6, fp
 80067ce:	f67f aebf 	bls.w	8006550 <_scanf_float+0x80>
 80067d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067da:	463a      	mov	r2, r7
 80067dc:	4640      	mov	r0, r8
 80067de:	4798      	blx	r3
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	e7f1      	b.n	80067cc <_scanf_float+0x2fc>
 80067e8:	46aa      	mov	sl, r5
 80067ea:	9602      	str	r6, [sp, #8]
 80067ec:	e7df      	b.n	80067ae <_scanf_float+0x2de>
 80067ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	2965      	cmp	r1, #101	; 0x65
 80067f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80067fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	d00c      	beq.n	800681c <_scanf_float+0x34c>
 8006802:	2945      	cmp	r1, #69	; 0x45
 8006804:	d00a      	beq.n	800681c <_scanf_float+0x34c>
 8006806:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800680a:	463a      	mov	r2, r7
 800680c:	4640      	mov	r0, r8
 800680e:	4798      	blx	r3
 8006810:	6923      	ldr	r3, [r4, #16]
 8006812:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006816:	3b01      	subs	r3, #1
 8006818:	1eb5      	subs	r5, r6, #2
 800681a:	6123      	str	r3, [r4, #16]
 800681c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006820:	463a      	mov	r2, r7
 8006822:	4640      	mov	r0, r8
 8006824:	4798      	blx	r3
 8006826:	462e      	mov	r6, r5
 8006828:	6825      	ldr	r5, [r4, #0]
 800682a:	f015 0510 	ands.w	r5, r5, #16
 800682e:	d158      	bne.n	80068e2 <_scanf_float+0x412>
 8006830:	7035      	strb	r5, [r6, #0]
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683c:	d11c      	bne.n	8006878 <_scanf_float+0x3a8>
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	454b      	cmp	r3, r9
 8006842:	eba3 0209 	sub.w	r2, r3, r9
 8006846:	d124      	bne.n	8006892 <_scanf_float+0x3c2>
 8006848:	2200      	movs	r2, #0
 800684a:	4659      	mov	r1, fp
 800684c:	4640      	mov	r0, r8
 800684e:	f000 fe9d 	bl	800758c <_strtod_r>
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	6821      	ldr	r1, [r4, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f011 0f02 	tst.w	r1, #2
 800685c:	ec57 6b10 	vmov	r6, r7, d0
 8006860:	f103 0204 	add.w	r2, r3, #4
 8006864:	d020      	beq.n	80068a8 <_scanf_float+0x3d8>
 8006866:	9903      	ldr	r1, [sp, #12]
 8006868:	600a      	str	r2, [r1, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	e9c3 6700 	strd	r6, r7, [r3]
 8006870:	68e3      	ldr	r3, [r4, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	60e3      	str	r3, [r4, #12]
 8006876:	e66c      	b.n	8006552 <_scanf_float+0x82>
 8006878:	9b04      	ldr	r3, [sp, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0e4      	beq.n	8006848 <_scanf_float+0x378>
 800687e:	9905      	ldr	r1, [sp, #20]
 8006880:	230a      	movs	r3, #10
 8006882:	462a      	mov	r2, r5
 8006884:	3101      	adds	r1, #1
 8006886:	4640      	mov	r0, r8
 8006888:	f000 ff72 	bl	8007770 <_strtol_r>
 800688c:	9b04      	ldr	r3, [sp, #16]
 800688e:	9e05      	ldr	r6, [sp, #20]
 8006890:	1ac2      	subs	r2, r0, r3
 8006892:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006896:	429e      	cmp	r6, r3
 8006898:	bf28      	it	cs
 800689a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800689e:	4912      	ldr	r1, [pc, #72]	; (80068e8 <_scanf_float+0x418>)
 80068a0:	4630      	mov	r0, r6
 80068a2:	f000 f82b 	bl	80068fc <siprintf>
 80068a6:	e7cf      	b.n	8006848 <_scanf_float+0x378>
 80068a8:	f011 0f04 	tst.w	r1, #4
 80068ac:	9903      	ldr	r1, [sp, #12]
 80068ae:	600a      	str	r2, [r1, #0]
 80068b0:	d1db      	bne.n	800686a <_scanf_float+0x39a>
 80068b2:	f8d3 8000 	ldr.w	r8, [r3]
 80068b6:	ee10 2a10 	vmov	r2, s0
 80068ba:	ee10 0a10 	vmov	r0, s0
 80068be:	463b      	mov	r3, r7
 80068c0:	4639      	mov	r1, r7
 80068c2:	f7fa f94b 	bl	8000b5c <__aeabi_dcmpun>
 80068c6:	b128      	cbz	r0, 80068d4 <_scanf_float+0x404>
 80068c8:	4808      	ldr	r0, [pc, #32]	; (80068ec <_scanf_float+0x41c>)
 80068ca:	f000 f811 	bl	80068f0 <nanf>
 80068ce:	ed88 0a00 	vstr	s0, [r8]
 80068d2:	e7cd      	b.n	8006870 <_scanf_float+0x3a0>
 80068d4:	4630      	mov	r0, r6
 80068d6:	4639      	mov	r1, r7
 80068d8:	f7fa f99e 	bl	8000c18 <__aeabi_d2f>
 80068dc:	f8c8 0000 	str.w	r0, [r8]
 80068e0:	e7c6      	b.n	8006870 <_scanf_float+0x3a0>
 80068e2:	2500      	movs	r5, #0
 80068e4:	e635      	b.n	8006552 <_scanf_float+0x82>
 80068e6:	bf00      	nop
 80068e8:	0801ccf4 	.word	0x0801ccf4
 80068ec:	0801ce03 	.word	0x0801ce03

080068f0 <nanf>:
 80068f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068f8 <nanf+0x8>
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	7fc00000 	.word	0x7fc00000

080068fc <siprintf>:
 80068fc:	b40e      	push	{r1, r2, r3}
 80068fe:	b500      	push	{lr}
 8006900:	b09c      	sub	sp, #112	; 0x70
 8006902:	ab1d      	add	r3, sp, #116	; 0x74
 8006904:	9002      	str	r0, [sp, #8]
 8006906:	9006      	str	r0, [sp, #24]
 8006908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800690c:	4809      	ldr	r0, [pc, #36]	; (8006934 <siprintf+0x38>)
 800690e:	9107      	str	r1, [sp, #28]
 8006910:	9104      	str	r1, [sp, #16]
 8006912:	4909      	ldr	r1, [pc, #36]	; (8006938 <siprintf+0x3c>)
 8006914:	f853 2b04 	ldr.w	r2, [r3], #4
 8006918:	9105      	str	r1, [sp, #20]
 800691a:	6800      	ldr	r0, [r0, #0]
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	a902      	add	r1, sp, #8
 8006920:	f002 ff48 	bl	80097b4 <_svfiprintf_r>
 8006924:	9b02      	ldr	r3, [sp, #8]
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	b01c      	add	sp, #112	; 0x70
 800692c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006930:	b003      	add	sp, #12
 8006932:	4770      	bx	lr
 8006934:	2000000c 	.word	0x2000000c
 8006938:	ffff0208 	.word	0xffff0208

0800693c <sulp>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4604      	mov	r4, r0
 8006940:	460d      	mov	r5, r1
 8006942:	ec45 4b10 	vmov	d0, r4, r5
 8006946:	4616      	mov	r6, r2
 8006948:	f002 fcd0 	bl	80092ec <__ulp>
 800694c:	ec51 0b10 	vmov	r0, r1, d0
 8006950:	b17e      	cbz	r6, 8006972 <sulp+0x36>
 8006952:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006956:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800695a:	2b00      	cmp	r3, #0
 800695c:	dd09      	ble.n	8006972 <sulp+0x36>
 800695e:	051b      	lsls	r3, r3, #20
 8006960:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006964:	2400      	movs	r4, #0
 8006966:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800696a:	4622      	mov	r2, r4
 800696c:	462b      	mov	r3, r5
 800696e:	f7f9 fe5b 	bl	8000628 <__aeabi_dmul>
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	0000      	movs	r0, r0
	...

08006978 <_strtod_l>:
 8006978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	b0a3      	sub	sp, #140	; 0x8c
 800697e:	461f      	mov	r7, r3
 8006980:	2300      	movs	r3, #0
 8006982:	931e      	str	r3, [sp, #120]	; 0x78
 8006984:	4ba4      	ldr	r3, [pc, #656]	; (8006c18 <_strtod_l+0x2a0>)
 8006986:	9219      	str	r2, [sp, #100]	; 0x64
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	9307      	str	r3, [sp, #28]
 800698c:	4604      	mov	r4, r0
 800698e:	4618      	mov	r0, r3
 8006990:	4688      	mov	r8, r1
 8006992:	f7f9 fc2f 	bl	80001f4 <strlen>
 8006996:	f04f 0a00 	mov.w	sl, #0
 800699a:	4605      	mov	r5, r0
 800699c:	f04f 0b00 	mov.w	fp, #0
 80069a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80069a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069a6:	781a      	ldrb	r2, [r3, #0]
 80069a8:	2a2b      	cmp	r2, #43	; 0x2b
 80069aa:	d04c      	beq.n	8006a46 <_strtod_l+0xce>
 80069ac:	d839      	bhi.n	8006a22 <_strtod_l+0xaa>
 80069ae:	2a0d      	cmp	r2, #13
 80069b0:	d832      	bhi.n	8006a18 <_strtod_l+0xa0>
 80069b2:	2a08      	cmp	r2, #8
 80069b4:	d832      	bhi.n	8006a1c <_strtod_l+0xa4>
 80069b6:	2a00      	cmp	r2, #0
 80069b8:	d03c      	beq.n	8006a34 <_strtod_l+0xbc>
 80069ba:	2300      	movs	r3, #0
 80069bc:	930e      	str	r3, [sp, #56]	; 0x38
 80069be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80069c0:	7833      	ldrb	r3, [r6, #0]
 80069c2:	2b30      	cmp	r3, #48	; 0x30
 80069c4:	f040 80b4 	bne.w	8006b30 <_strtod_l+0x1b8>
 80069c8:	7873      	ldrb	r3, [r6, #1]
 80069ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069ce:	2b58      	cmp	r3, #88	; 0x58
 80069d0:	d16c      	bne.n	8006aac <_strtod_l+0x134>
 80069d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	ab1e      	add	r3, sp, #120	; 0x78
 80069d8:	9702      	str	r7, [sp, #8]
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	4a8f      	ldr	r2, [pc, #572]	; (8006c1c <_strtod_l+0x2a4>)
 80069de:	ab1f      	add	r3, sp, #124	; 0x7c
 80069e0:	a91d      	add	r1, sp, #116	; 0x74
 80069e2:	4620      	mov	r0, r4
 80069e4:	f001 fde2 	bl	80085ac <__gethex>
 80069e8:	f010 0707 	ands.w	r7, r0, #7
 80069ec:	4605      	mov	r5, r0
 80069ee:	d005      	beq.n	80069fc <_strtod_l+0x84>
 80069f0:	2f06      	cmp	r7, #6
 80069f2:	d12a      	bne.n	8006a4a <_strtod_l+0xd2>
 80069f4:	3601      	adds	r6, #1
 80069f6:	2300      	movs	r3, #0
 80069f8:	961d      	str	r6, [sp, #116]	; 0x74
 80069fa:	930e      	str	r3, [sp, #56]	; 0x38
 80069fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f040 8596 	bne.w	8007530 <_strtod_l+0xbb8>
 8006a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a06:	b1db      	cbz	r3, 8006a40 <_strtod_l+0xc8>
 8006a08:	4652      	mov	r2, sl
 8006a0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a0e:	ec43 2b10 	vmov	d0, r2, r3
 8006a12:	b023      	add	sp, #140	; 0x8c
 8006a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a18:	2a20      	cmp	r2, #32
 8006a1a:	d1ce      	bne.n	80069ba <_strtod_l+0x42>
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	931d      	str	r3, [sp, #116]	; 0x74
 8006a20:	e7c0      	b.n	80069a4 <_strtod_l+0x2c>
 8006a22:	2a2d      	cmp	r2, #45	; 0x2d
 8006a24:	d1c9      	bne.n	80069ba <_strtod_l+0x42>
 8006a26:	2201      	movs	r2, #1
 8006a28:	920e      	str	r2, [sp, #56]	; 0x38
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	921d      	str	r2, [sp, #116]	; 0x74
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1c4      	bne.n	80069be <_strtod_l+0x46>
 8006a34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f040 8576 	bne.w	800752c <_strtod_l+0xbb4>
 8006a40:	4652      	mov	r2, sl
 8006a42:	465b      	mov	r3, fp
 8006a44:	e7e3      	b.n	8006a0e <_strtod_l+0x96>
 8006a46:	2200      	movs	r2, #0
 8006a48:	e7ee      	b.n	8006a28 <_strtod_l+0xb0>
 8006a4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a4c:	b13a      	cbz	r2, 8006a5e <_strtod_l+0xe6>
 8006a4e:	2135      	movs	r1, #53	; 0x35
 8006a50:	a820      	add	r0, sp, #128	; 0x80
 8006a52:	f002 fd56 	bl	8009502 <__copybits>
 8006a56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f002 f91b 	bl	8008c94 <_Bfree>
 8006a5e:	3f01      	subs	r7, #1
 8006a60:	2f05      	cmp	r7, #5
 8006a62:	d807      	bhi.n	8006a74 <_strtod_l+0xfc>
 8006a64:	e8df f007 	tbb	[pc, r7]
 8006a68:	1d180b0e 	.word	0x1d180b0e
 8006a6c:	030e      	.short	0x030e
 8006a6e:	f04f 0b00 	mov.w	fp, #0
 8006a72:	46da      	mov	sl, fp
 8006a74:	0728      	lsls	r0, r5, #28
 8006a76:	d5c1      	bpl.n	80069fc <_strtod_l+0x84>
 8006a78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006a7c:	e7be      	b.n	80069fc <_strtod_l+0x84>
 8006a7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006a82:	e7f7      	b.n	8006a74 <_strtod_l+0xfc>
 8006a84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006a88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006a8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a96:	e7ed      	b.n	8006a74 <_strtod_l+0xfc>
 8006a98:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006c20 <_strtod_l+0x2a8>
 8006a9c:	f04f 0a00 	mov.w	sl, #0
 8006aa0:	e7e8      	b.n	8006a74 <_strtod_l+0xfc>
 8006aa2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006aa6:	f04f 3aff 	mov.w	sl, #4294967295
 8006aaa:	e7e3      	b.n	8006a74 <_strtod_l+0xfc>
 8006aac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	921d      	str	r2, [sp, #116]	; 0x74
 8006ab2:	785b      	ldrb	r3, [r3, #1]
 8006ab4:	2b30      	cmp	r3, #48	; 0x30
 8006ab6:	d0f9      	beq.n	8006aac <_strtod_l+0x134>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d09f      	beq.n	80069fc <_strtod_l+0x84>
 8006abc:	2301      	movs	r3, #1
 8006abe:	f04f 0900 	mov.w	r9, #0
 8006ac2:	9304      	str	r3, [sp, #16]
 8006ac4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006acc:	464f      	mov	r7, r9
 8006ace:	220a      	movs	r2, #10
 8006ad0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006ad2:	7806      	ldrb	r6, [r0, #0]
 8006ad4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006ad8:	b2d9      	uxtb	r1, r3
 8006ada:	2909      	cmp	r1, #9
 8006adc:	d92a      	bls.n	8006b34 <_strtod_l+0x1bc>
 8006ade:	9907      	ldr	r1, [sp, #28]
 8006ae0:	462a      	mov	r2, r5
 8006ae2:	f003 f8d9 	bl	8009c98 <strncmp>
 8006ae6:	b398      	cbz	r0, 8006b50 <_strtod_l+0x1d8>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	4633      	mov	r3, r6
 8006aec:	463d      	mov	r5, r7
 8006aee:	9007      	str	r0, [sp, #28]
 8006af0:	4602      	mov	r2, r0
 8006af2:	2b65      	cmp	r3, #101	; 0x65
 8006af4:	d001      	beq.n	8006afa <_strtod_l+0x182>
 8006af6:	2b45      	cmp	r3, #69	; 0x45
 8006af8:	d118      	bne.n	8006b2c <_strtod_l+0x1b4>
 8006afa:	b91d      	cbnz	r5, 8006b04 <_strtod_l+0x18c>
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	4303      	orrs	r3, r0
 8006b00:	d098      	beq.n	8006a34 <_strtod_l+0xbc>
 8006b02:	2500      	movs	r5, #0
 8006b04:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006b08:	f108 0301 	add.w	r3, r8, #1
 8006b0c:	931d      	str	r3, [sp, #116]	; 0x74
 8006b0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006b12:	2b2b      	cmp	r3, #43	; 0x2b
 8006b14:	d075      	beq.n	8006c02 <_strtod_l+0x28a>
 8006b16:	2b2d      	cmp	r3, #45	; 0x2d
 8006b18:	d07b      	beq.n	8006c12 <_strtod_l+0x29a>
 8006b1a:	f04f 0c00 	mov.w	ip, #0
 8006b1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b22:	2909      	cmp	r1, #9
 8006b24:	f240 8082 	bls.w	8006c2c <_strtod_l+0x2b4>
 8006b28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006b2c:	2600      	movs	r6, #0
 8006b2e:	e09d      	b.n	8006c6c <_strtod_l+0x2f4>
 8006b30:	2300      	movs	r3, #0
 8006b32:	e7c4      	b.n	8006abe <_strtod_l+0x146>
 8006b34:	2f08      	cmp	r7, #8
 8006b36:	bfd8      	it	le
 8006b38:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006b3a:	f100 0001 	add.w	r0, r0, #1
 8006b3e:	bfda      	itte	le
 8006b40:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b44:	9309      	strle	r3, [sp, #36]	; 0x24
 8006b46:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006b4a:	3701      	adds	r7, #1
 8006b4c:	901d      	str	r0, [sp, #116]	; 0x74
 8006b4e:	e7bf      	b.n	8006ad0 <_strtod_l+0x158>
 8006b50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b52:	195a      	adds	r2, r3, r5
 8006b54:	921d      	str	r2, [sp, #116]	; 0x74
 8006b56:	5d5b      	ldrb	r3, [r3, r5]
 8006b58:	2f00      	cmp	r7, #0
 8006b5a:	d037      	beq.n	8006bcc <_strtod_l+0x254>
 8006b5c:	9007      	str	r0, [sp, #28]
 8006b5e:	463d      	mov	r5, r7
 8006b60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006b64:	2a09      	cmp	r2, #9
 8006b66:	d912      	bls.n	8006b8e <_strtod_l+0x216>
 8006b68:	2201      	movs	r2, #1
 8006b6a:	e7c2      	b.n	8006af2 <_strtod_l+0x17a>
 8006b6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	921d      	str	r2, [sp, #116]	; 0x74
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	3001      	adds	r0, #1
 8006b76:	2b30      	cmp	r3, #48	; 0x30
 8006b78:	d0f8      	beq.n	8006b6c <_strtod_l+0x1f4>
 8006b7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006b7e:	2a08      	cmp	r2, #8
 8006b80:	f200 84db 	bhi.w	800753a <_strtod_l+0xbc2>
 8006b84:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006b86:	9007      	str	r0, [sp, #28]
 8006b88:	2000      	movs	r0, #0
 8006b8a:	920a      	str	r2, [sp, #40]	; 0x28
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	3b30      	subs	r3, #48	; 0x30
 8006b90:	f100 0201 	add.w	r2, r0, #1
 8006b94:	d014      	beq.n	8006bc0 <_strtod_l+0x248>
 8006b96:	9907      	ldr	r1, [sp, #28]
 8006b98:	4411      	add	r1, r2
 8006b9a:	9107      	str	r1, [sp, #28]
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	eb00 0e05 	add.w	lr, r0, r5
 8006ba2:	210a      	movs	r1, #10
 8006ba4:	4572      	cmp	r2, lr
 8006ba6:	d113      	bne.n	8006bd0 <_strtod_l+0x258>
 8006ba8:	182a      	adds	r2, r5, r0
 8006baa:	2a08      	cmp	r2, #8
 8006bac:	f105 0501 	add.w	r5, r5, #1
 8006bb0:	4405      	add	r5, r0
 8006bb2:	dc1c      	bgt.n	8006bee <_strtod_l+0x276>
 8006bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bb6:	220a      	movs	r2, #10
 8006bb8:	fb02 3301 	mla	r3, r2, r1, r3
 8006bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bc2:	1c59      	adds	r1, r3, #1
 8006bc4:	911d      	str	r1, [sp, #116]	; 0x74
 8006bc6:	785b      	ldrb	r3, [r3, #1]
 8006bc8:	4610      	mov	r0, r2
 8006bca:	e7c9      	b.n	8006b60 <_strtod_l+0x1e8>
 8006bcc:	4638      	mov	r0, r7
 8006bce:	e7d2      	b.n	8006b76 <_strtod_l+0x1fe>
 8006bd0:	2a08      	cmp	r2, #8
 8006bd2:	dc04      	bgt.n	8006bde <_strtod_l+0x266>
 8006bd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006bd6:	434e      	muls	r6, r1
 8006bd8:	9609      	str	r6, [sp, #36]	; 0x24
 8006bda:	3201      	adds	r2, #1
 8006bdc:	e7e2      	b.n	8006ba4 <_strtod_l+0x22c>
 8006bde:	f102 0c01 	add.w	ip, r2, #1
 8006be2:	f1bc 0f10 	cmp.w	ip, #16
 8006be6:	bfd8      	it	le
 8006be8:	fb01 f909 	mulle.w	r9, r1, r9
 8006bec:	e7f5      	b.n	8006bda <_strtod_l+0x262>
 8006bee:	2d10      	cmp	r5, #16
 8006bf0:	bfdc      	itt	le
 8006bf2:	220a      	movle	r2, #10
 8006bf4:	fb02 3909 	mlale	r9, r2, r9, r3
 8006bf8:	e7e1      	b.n	8006bbe <_strtod_l+0x246>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9307      	str	r3, [sp, #28]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	e77c      	b.n	8006afc <_strtod_l+0x184>
 8006c02:	f04f 0c00 	mov.w	ip, #0
 8006c06:	f108 0302 	add.w	r3, r8, #2
 8006c0a:	931d      	str	r3, [sp, #116]	; 0x74
 8006c0c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006c10:	e785      	b.n	8006b1e <_strtod_l+0x1a6>
 8006c12:	f04f 0c01 	mov.w	ip, #1
 8006c16:	e7f6      	b.n	8006c06 <_strtod_l+0x28e>
 8006c18:	0801cfec 	.word	0x0801cfec
 8006c1c:	0801ccfc 	.word	0x0801ccfc
 8006c20:	7ff00000 	.word	0x7ff00000
 8006c24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c26:	1c59      	adds	r1, r3, #1
 8006c28:	911d      	str	r1, [sp, #116]	; 0x74
 8006c2a:	785b      	ldrb	r3, [r3, #1]
 8006c2c:	2b30      	cmp	r3, #48	; 0x30
 8006c2e:	d0f9      	beq.n	8006c24 <_strtod_l+0x2ac>
 8006c30:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006c34:	2908      	cmp	r1, #8
 8006c36:	f63f af79 	bhi.w	8006b2c <_strtod_l+0x1b4>
 8006c3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006c3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c40:	9308      	str	r3, [sp, #32]
 8006c42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c44:	1c59      	adds	r1, r3, #1
 8006c46:	911d      	str	r1, [sp, #116]	; 0x74
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006c4e:	2e09      	cmp	r6, #9
 8006c50:	d937      	bls.n	8006cc2 <_strtod_l+0x34a>
 8006c52:	9e08      	ldr	r6, [sp, #32]
 8006c54:	1b89      	subs	r1, r1, r6
 8006c56:	2908      	cmp	r1, #8
 8006c58:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006c5c:	dc02      	bgt.n	8006c64 <_strtod_l+0x2ec>
 8006c5e:	4576      	cmp	r6, lr
 8006c60:	bfa8      	it	ge
 8006c62:	4676      	movge	r6, lr
 8006c64:	f1bc 0f00 	cmp.w	ip, #0
 8006c68:	d000      	beq.n	8006c6c <_strtod_l+0x2f4>
 8006c6a:	4276      	negs	r6, r6
 8006c6c:	2d00      	cmp	r5, #0
 8006c6e:	d14f      	bne.n	8006d10 <_strtod_l+0x398>
 8006c70:	9904      	ldr	r1, [sp, #16]
 8006c72:	4301      	orrs	r1, r0
 8006c74:	f47f aec2 	bne.w	80069fc <_strtod_l+0x84>
 8006c78:	2a00      	cmp	r2, #0
 8006c7a:	f47f aedb 	bne.w	8006a34 <_strtod_l+0xbc>
 8006c7e:	2b69      	cmp	r3, #105	; 0x69
 8006c80:	d027      	beq.n	8006cd2 <_strtod_l+0x35a>
 8006c82:	dc24      	bgt.n	8006cce <_strtod_l+0x356>
 8006c84:	2b49      	cmp	r3, #73	; 0x49
 8006c86:	d024      	beq.n	8006cd2 <_strtod_l+0x35a>
 8006c88:	2b4e      	cmp	r3, #78	; 0x4e
 8006c8a:	f47f aed3 	bne.w	8006a34 <_strtod_l+0xbc>
 8006c8e:	499e      	ldr	r1, [pc, #632]	; (8006f08 <_strtod_l+0x590>)
 8006c90:	a81d      	add	r0, sp, #116	; 0x74
 8006c92:	f001 fee3 	bl	8008a5c <__match>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f43f aecc 	beq.w	8006a34 <_strtod_l+0xbc>
 8006c9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b28      	cmp	r3, #40	; 0x28
 8006ca2:	d12d      	bne.n	8006d00 <_strtod_l+0x388>
 8006ca4:	4999      	ldr	r1, [pc, #612]	; (8006f0c <_strtod_l+0x594>)
 8006ca6:	aa20      	add	r2, sp, #128	; 0x80
 8006ca8:	a81d      	add	r0, sp, #116	; 0x74
 8006caa:	f001 feeb 	bl	8008a84 <__hexnan>
 8006cae:	2805      	cmp	r0, #5
 8006cb0:	d126      	bne.n	8006d00 <_strtod_l+0x388>
 8006cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cb4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006cb8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006cbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006cc0:	e69c      	b.n	80069fc <_strtod_l+0x84>
 8006cc2:	210a      	movs	r1, #10
 8006cc4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006cc8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006ccc:	e7b9      	b.n	8006c42 <_strtod_l+0x2ca>
 8006cce:	2b6e      	cmp	r3, #110	; 0x6e
 8006cd0:	e7db      	b.n	8006c8a <_strtod_l+0x312>
 8006cd2:	498f      	ldr	r1, [pc, #572]	; (8006f10 <_strtod_l+0x598>)
 8006cd4:	a81d      	add	r0, sp, #116	; 0x74
 8006cd6:	f001 fec1 	bl	8008a5c <__match>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	f43f aeaa 	beq.w	8006a34 <_strtod_l+0xbc>
 8006ce0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ce2:	498c      	ldr	r1, [pc, #560]	; (8006f14 <_strtod_l+0x59c>)
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	a81d      	add	r0, sp, #116	; 0x74
 8006ce8:	931d      	str	r3, [sp, #116]	; 0x74
 8006cea:	f001 feb7 	bl	8008a5c <__match>
 8006cee:	b910      	cbnz	r0, 8006cf6 <_strtod_l+0x37e>
 8006cf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	931d      	str	r3, [sp, #116]	; 0x74
 8006cf6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006f24 <_strtod_l+0x5ac>
 8006cfa:	f04f 0a00 	mov.w	sl, #0
 8006cfe:	e67d      	b.n	80069fc <_strtod_l+0x84>
 8006d00:	4885      	ldr	r0, [pc, #532]	; (8006f18 <_strtod_l+0x5a0>)
 8006d02:	f002 ffb1 	bl	8009c68 <nan>
 8006d06:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006d0a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006d0e:	e675      	b.n	80069fc <_strtod_l+0x84>
 8006d10:	9b07      	ldr	r3, [sp, #28]
 8006d12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d14:	1af3      	subs	r3, r6, r3
 8006d16:	2f00      	cmp	r7, #0
 8006d18:	bf08      	it	eq
 8006d1a:	462f      	moveq	r7, r5
 8006d1c:	2d10      	cmp	r5, #16
 8006d1e:	9308      	str	r3, [sp, #32]
 8006d20:	46a8      	mov	r8, r5
 8006d22:	bfa8      	it	ge
 8006d24:	f04f 0810 	movge.w	r8, #16
 8006d28:	f7f9 fc04 	bl	8000534 <__aeabi_ui2d>
 8006d2c:	2d09      	cmp	r5, #9
 8006d2e:	4682      	mov	sl, r0
 8006d30:	468b      	mov	fp, r1
 8006d32:	dd13      	ble.n	8006d5c <_strtod_l+0x3e4>
 8006d34:	4b79      	ldr	r3, [pc, #484]	; (8006f1c <_strtod_l+0x5a4>)
 8006d36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006d3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006d3e:	f7f9 fc73 	bl	8000628 <__aeabi_dmul>
 8006d42:	4682      	mov	sl, r0
 8006d44:	4648      	mov	r0, r9
 8006d46:	468b      	mov	fp, r1
 8006d48:	f7f9 fbf4 	bl	8000534 <__aeabi_ui2d>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4650      	mov	r0, sl
 8006d52:	4659      	mov	r1, fp
 8006d54:	f7f9 fab2 	bl	80002bc <__adddf3>
 8006d58:	4682      	mov	sl, r0
 8006d5a:	468b      	mov	fp, r1
 8006d5c:	2d0f      	cmp	r5, #15
 8006d5e:	dc38      	bgt.n	8006dd2 <_strtod_l+0x45a>
 8006d60:	9b08      	ldr	r3, [sp, #32]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f43f ae4a 	beq.w	80069fc <_strtod_l+0x84>
 8006d68:	dd24      	ble.n	8006db4 <_strtod_l+0x43c>
 8006d6a:	2b16      	cmp	r3, #22
 8006d6c:	dc0b      	bgt.n	8006d86 <_strtod_l+0x40e>
 8006d6e:	4d6b      	ldr	r5, [pc, #428]	; (8006f1c <_strtod_l+0x5a4>)
 8006d70:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006d74:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006d78:	4652      	mov	r2, sl
 8006d7a:	465b      	mov	r3, fp
 8006d7c:	f7f9 fc54 	bl	8000628 <__aeabi_dmul>
 8006d80:	4682      	mov	sl, r0
 8006d82:	468b      	mov	fp, r1
 8006d84:	e63a      	b.n	80069fc <_strtod_l+0x84>
 8006d86:	9a08      	ldr	r2, [sp, #32]
 8006d88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	db20      	blt.n	8006dd2 <_strtod_l+0x45a>
 8006d90:	4c62      	ldr	r4, [pc, #392]	; (8006f1c <_strtod_l+0x5a4>)
 8006d92:	f1c5 050f 	rsb	r5, r5, #15
 8006d96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d9a:	4652      	mov	r2, sl
 8006d9c:	465b      	mov	r3, fp
 8006d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006da2:	f7f9 fc41 	bl	8000628 <__aeabi_dmul>
 8006da6:	9b08      	ldr	r3, [sp, #32]
 8006da8:	1b5d      	subs	r5, r3, r5
 8006daa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006dae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006db2:	e7e3      	b.n	8006d7c <_strtod_l+0x404>
 8006db4:	9b08      	ldr	r3, [sp, #32]
 8006db6:	3316      	adds	r3, #22
 8006db8:	db0b      	blt.n	8006dd2 <_strtod_l+0x45a>
 8006dba:	9b07      	ldr	r3, [sp, #28]
 8006dbc:	4a57      	ldr	r2, [pc, #348]	; (8006f1c <_strtod_l+0x5a4>)
 8006dbe:	1b9e      	subs	r6, r3, r6
 8006dc0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006dc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006dc8:	4650      	mov	r0, sl
 8006dca:	4659      	mov	r1, fp
 8006dcc:	f7f9 fd56 	bl	800087c <__aeabi_ddiv>
 8006dd0:	e7d6      	b.n	8006d80 <_strtod_l+0x408>
 8006dd2:	9b08      	ldr	r3, [sp, #32]
 8006dd4:	eba5 0808 	sub.w	r8, r5, r8
 8006dd8:	4498      	add	r8, r3
 8006dda:	f1b8 0f00 	cmp.w	r8, #0
 8006dde:	dd71      	ble.n	8006ec4 <_strtod_l+0x54c>
 8006de0:	f018 030f 	ands.w	r3, r8, #15
 8006de4:	d00a      	beq.n	8006dfc <_strtod_l+0x484>
 8006de6:	494d      	ldr	r1, [pc, #308]	; (8006f1c <_strtod_l+0x5a4>)
 8006de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006dec:	4652      	mov	r2, sl
 8006dee:	465b      	mov	r3, fp
 8006df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006df4:	f7f9 fc18 	bl	8000628 <__aeabi_dmul>
 8006df8:	4682      	mov	sl, r0
 8006dfa:	468b      	mov	fp, r1
 8006dfc:	f038 080f 	bics.w	r8, r8, #15
 8006e00:	d04d      	beq.n	8006e9e <_strtod_l+0x526>
 8006e02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006e06:	dd22      	ble.n	8006e4e <_strtod_l+0x4d6>
 8006e08:	2500      	movs	r5, #0
 8006e0a:	462e      	mov	r6, r5
 8006e0c:	9509      	str	r5, [sp, #36]	; 0x24
 8006e0e:	9507      	str	r5, [sp, #28]
 8006e10:	2322      	movs	r3, #34	; 0x22
 8006e12:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006f24 <_strtod_l+0x5ac>
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	f04f 0a00 	mov.w	sl, #0
 8006e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f43f adec 	beq.w	80069fc <_strtod_l+0x84>
 8006e24:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e26:	4620      	mov	r0, r4
 8006e28:	f001 ff34 	bl	8008c94 <_Bfree>
 8006e2c:	9907      	ldr	r1, [sp, #28]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f001 ff30 	bl	8008c94 <_Bfree>
 8006e34:	4631      	mov	r1, r6
 8006e36:	4620      	mov	r0, r4
 8006e38:	f001 ff2c 	bl	8008c94 <_Bfree>
 8006e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f001 ff28 	bl	8008c94 <_Bfree>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4620      	mov	r0, r4
 8006e48:	f001 ff24 	bl	8008c94 <_Bfree>
 8006e4c:	e5d6      	b.n	80069fc <_strtod_l+0x84>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006e54:	4650      	mov	r0, sl
 8006e56:	4659      	mov	r1, fp
 8006e58:	4699      	mov	r9, r3
 8006e5a:	f1b8 0f01 	cmp.w	r8, #1
 8006e5e:	dc21      	bgt.n	8006ea4 <_strtod_l+0x52c>
 8006e60:	b10b      	cbz	r3, 8006e66 <_strtod_l+0x4ee>
 8006e62:	4682      	mov	sl, r0
 8006e64:	468b      	mov	fp, r1
 8006e66:	4b2e      	ldr	r3, [pc, #184]	; (8006f20 <_strtod_l+0x5a8>)
 8006e68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006e6c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006e70:	4652      	mov	r2, sl
 8006e72:	465b      	mov	r3, fp
 8006e74:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006e78:	f7f9 fbd6 	bl	8000628 <__aeabi_dmul>
 8006e7c:	4b29      	ldr	r3, [pc, #164]	; (8006f24 <_strtod_l+0x5ac>)
 8006e7e:	460a      	mov	r2, r1
 8006e80:	400b      	ands	r3, r1
 8006e82:	4929      	ldr	r1, [pc, #164]	; (8006f28 <_strtod_l+0x5b0>)
 8006e84:	428b      	cmp	r3, r1
 8006e86:	4682      	mov	sl, r0
 8006e88:	d8be      	bhi.n	8006e08 <_strtod_l+0x490>
 8006e8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006e8e:	428b      	cmp	r3, r1
 8006e90:	bf86      	itte	hi
 8006e92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006f2c <_strtod_l+0x5b4>
 8006e96:	f04f 3aff 	movhi.w	sl, #4294967295
 8006e9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	e081      	b.n	8006fa8 <_strtod_l+0x630>
 8006ea4:	f018 0f01 	tst.w	r8, #1
 8006ea8:	d007      	beq.n	8006eba <_strtod_l+0x542>
 8006eaa:	4b1d      	ldr	r3, [pc, #116]	; (8006f20 <_strtod_l+0x5a8>)
 8006eac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f7f9 fbb8 	bl	8000628 <__aeabi_dmul>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f109 0901 	add.w	r9, r9, #1
 8006ebe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ec2:	e7ca      	b.n	8006e5a <_strtod_l+0x4e2>
 8006ec4:	d0eb      	beq.n	8006e9e <_strtod_l+0x526>
 8006ec6:	f1c8 0800 	rsb	r8, r8, #0
 8006eca:	f018 020f 	ands.w	r2, r8, #15
 8006ece:	d00a      	beq.n	8006ee6 <_strtod_l+0x56e>
 8006ed0:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <_strtod_l+0x5a4>)
 8006ed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ed6:	4650      	mov	r0, sl
 8006ed8:	4659      	mov	r1, fp
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 fccd 	bl	800087c <__aeabi_ddiv>
 8006ee2:	4682      	mov	sl, r0
 8006ee4:	468b      	mov	fp, r1
 8006ee6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006eea:	d0d8      	beq.n	8006e9e <_strtod_l+0x526>
 8006eec:	f1b8 0f1f 	cmp.w	r8, #31
 8006ef0:	dd1e      	ble.n	8006f30 <_strtod_l+0x5b8>
 8006ef2:	2500      	movs	r5, #0
 8006ef4:	462e      	mov	r6, r5
 8006ef6:	9509      	str	r5, [sp, #36]	; 0x24
 8006ef8:	9507      	str	r5, [sp, #28]
 8006efa:	2322      	movs	r3, #34	; 0x22
 8006efc:	f04f 0a00 	mov.w	sl, #0
 8006f00:	f04f 0b00 	mov.w	fp, #0
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	e789      	b.n	8006e1c <_strtod_l+0x4a4>
 8006f08:	0801cccd 	.word	0x0801cccd
 8006f0c:	0801cd10 	.word	0x0801cd10
 8006f10:	0801ccc5 	.word	0x0801ccc5
 8006f14:	0801cf08 	.word	0x0801cf08
 8006f18:	0801ce03 	.word	0x0801ce03
 8006f1c:	0801d088 	.word	0x0801d088
 8006f20:	0801d060 	.word	0x0801d060
 8006f24:	7ff00000 	.word	0x7ff00000
 8006f28:	7ca00000 	.word	0x7ca00000
 8006f2c:	7fefffff 	.word	0x7fefffff
 8006f30:	f018 0310 	ands.w	r3, r8, #16
 8006f34:	bf18      	it	ne
 8006f36:	236a      	movne	r3, #106	; 0x6a
 8006f38:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80072f0 <_strtod_l+0x978>
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	4650      	mov	r0, sl
 8006f40:	4659      	mov	r1, fp
 8006f42:	2300      	movs	r3, #0
 8006f44:	f018 0f01 	tst.w	r8, #1
 8006f48:	d004      	beq.n	8006f54 <_strtod_l+0x5dc>
 8006f4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006f4e:	f7f9 fb6b 	bl	8000628 <__aeabi_dmul>
 8006f52:	2301      	movs	r3, #1
 8006f54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006f58:	f109 0908 	add.w	r9, r9, #8
 8006f5c:	d1f2      	bne.n	8006f44 <_strtod_l+0x5cc>
 8006f5e:	b10b      	cbz	r3, 8006f64 <_strtod_l+0x5ec>
 8006f60:	4682      	mov	sl, r0
 8006f62:	468b      	mov	fp, r1
 8006f64:	9b04      	ldr	r3, [sp, #16]
 8006f66:	b1bb      	cbz	r3, 8006f98 <_strtod_l+0x620>
 8006f68:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006f6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	4659      	mov	r1, fp
 8006f74:	dd10      	ble.n	8006f98 <_strtod_l+0x620>
 8006f76:	2b1f      	cmp	r3, #31
 8006f78:	f340 8128 	ble.w	80071cc <_strtod_l+0x854>
 8006f7c:	2b34      	cmp	r3, #52	; 0x34
 8006f7e:	bfde      	ittt	le
 8006f80:	3b20      	suble	r3, #32
 8006f82:	f04f 32ff 	movle.w	r2, #4294967295
 8006f86:	fa02 f303 	lslle.w	r3, r2, r3
 8006f8a:	f04f 0a00 	mov.w	sl, #0
 8006f8e:	bfcc      	ite	gt
 8006f90:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006f94:	ea03 0b01 	andle.w	fp, r3, r1
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4650      	mov	r0, sl
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	f7f9 fdaa 	bl	8000af8 <__aeabi_dcmpeq>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d1a4      	bne.n	8006ef2 <_strtod_l+0x57a>
 8006fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006fae:	462b      	mov	r3, r5
 8006fb0:	463a      	mov	r2, r7
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f001 feda 	bl	8008d6c <__s2b>
 8006fb8:	9009      	str	r0, [sp, #36]	; 0x24
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	f43f af24 	beq.w	8006e08 <_strtod_l+0x490>
 8006fc0:	9b07      	ldr	r3, [sp, #28]
 8006fc2:	1b9e      	subs	r6, r3, r6
 8006fc4:	9b08      	ldr	r3, [sp, #32]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bfb4      	ite	lt
 8006fca:	4633      	movlt	r3, r6
 8006fcc:	2300      	movge	r3, #0
 8006fce:	9310      	str	r3, [sp, #64]	; 0x40
 8006fd0:	9b08      	ldr	r3, [sp, #32]
 8006fd2:	2500      	movs	r5, #0
 8006fd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006fd8:	9318      	str	r3, [sp, #96]	; 0x60
 8006fda:	462e      	mov	r6, r5
 8006fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fde:	4620      	mov	r0, r4
 8006fe0:	6859      	ldr	r1, [r3, #4]
 8006fe2:	f001 fe17 	bl	8008c14 <_Balloc>
 8006fe6:	9007      	str	r0, [sp, #28]
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f43f af11 	beq.w	8006e10 <_strtod_l+0x498>
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	691a      	ldr	r2, [r3, #16]
 8006ff2:	3202      	adds	r2, #2
 8006ff4:	f103 010c 	add.w	r1, r3, #12
 8006ff8:	0092      	lsls	r2, r2, #2
 8006ffa:	300c      	adds	r0, #12
 8006ffc:	f001 fdfc 	bl	8008bf8 <memcpy>
 8007000:	ec4b ab10 	vmov	d0, sl, fp
 8007004:	aa20      	add	r2, sp, #128	; 0x80
 8007006:	a91f      	add	r1, sp, #124	; 0x7c
 8007008:	4620      	mov	r0, r4
 800700a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800700e:	f002 f9e9 	bl	80093e4 <__d2b>
 8007012:	901e      	str	r0, [sp, #120]	; 0x78
 8007014:	2800      	cmp	r0, #0
 8007016:	f43f aefb 	beq.w	8006e10 <_strtod_l+0x498>
 800701a:	2101      	movs	r1, #1
 800701c:	4620      	mov	r0, r4
 800701e:	f001 ff3f 	bl	8008ea0 <__i2b>
 8007022:	4606      	mov	r6, r0
 8007024:	2800      	cmp	r0, #0
 8007026:	f43f aef3 	beq.w	8006e10 <_strtod_l+0x498>
 800702a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800702c:	9904      	ldr	r1, [sp, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	bfab      	itete	ge
 8007032:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007034:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007036:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007038:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800703c:	bfac      	ite	ge
 800703e:	eb03 0902 	addge.w	r9, r3, r2
 8007042:	1ad7      	sublt	r7, r2, r3
 8007044:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007046:	eba3 0801 	sub.w	r8, r3, r1
 800704a:	4490      	add	r8, r2
 800704c:	4ba3      	ldr	r3, [pc, #652]	; (80072dc <_strtod_l+0x964>)
 800704e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007052:	4598      	cmp	r8, r3
 8007054:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007058:	f280 80cc 	bge.w	80071f4 <_strtod_l+0x87c>
 800705c:	eba3 0308 	sub.w	r3, r3, r8
 8007060:	2b1f      	cmp	r3, #31
 8007062:	eba2 0203 	sub.w	r2, r2, r3
 8007066:	f04f 0101 	mov.w	r1, #1
 800706a:	f300 80b6 	bgt.w	80071da <_strtod_l+0x862>
 800706e:	fa01 f303 	lsl.w	r3, r1, r3
 8007072:	9311      	str	r3, [sp, #68]	; 0x44
 8007074:	2300      	movs	r3, #0
 8007076:	930c      	str	r3, [sp, #48]	; 0x30
 8007078:	eb09 0802 	add.w	r8, r9, r2
 800707c:	9b04      	ldr	r3, [sp, #16]
 800707e:	45c1      	cmp	r9, r8
 8007080:	4417      	add	r7, r2
 8007082:	441f      	add	r7, r3
 8007084:	464b      	mov	r3, r9
 8007086:	bfa8      	it	ge
 8007088:	4643      	movge	r3, r8
 800708a:	42bb      	cmp	r3, r7
 800708c:	bfa8      	it	ge
 800708e:	463b      	movge	r3, r7
 8007090:	2b00      	cmp	r3, #0
 8007092:	bfc2      	ittt	gt
 8007094:	eba8 0803 	subgt.w	r8, r8, r3
 8007098:	1aff      	subgt	r7, r7, r3
 800709a:	eba9 0903 	subgt.w	r9, r9, r3
 800709e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	dd17      	ble.n	80070d4 <_strtod_l+0x75c>
 80070a4:	4631      	mov	r1, r6
 80070a6:	461a      	mov	r2, r3
 80070a8:	4620      	mov	r0, r4
 80070aa:	f001 ffb5 	bl	8009018 <__pow5mult>
 80070ae:	4606      	mov	r6, r0
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f43f aead 	beq.w	8006e10 <_strtod_l+0x498>
 80070b6:	4601      	mov	r1, r0
 80070b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80070ba:	4620      	mov	r0, r4
 80070bc:	f001 ff06 	bl	8008ecc <__multiply>
 80070c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80070c2:	2800      	cmp	r0, #0
 80070c4:	f43f aea4 	beq.w	8006e10 <_strtod_l+0x498>
 80070c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80070ca:	4620      	mov	r0, r4
 80070cc:	f001 fde2 	bl	8008c94 <_Bfree>
 80070d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070d2:	931e      	str	r3, [sp, #120]	; 0x78
 80070d4:	f1b8 0f00 	cmp.w	r8, #0
 80070d8:	f300 8091 	bgt.w	80071fe <_strtod_l+0x886>
 80070dc:	9b08      	ldr	r3, [sp, #32]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	dd08      	ble.n	80070f4 <_strtod_l+0x77c>
 80070e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80070e4:	9907      	ldr	r1, [sp, #28]
 80070e6:	4620      	mov	r0, r4
 80070e8:	f001 ff96 	bl	8009018 <__pow5mult>
 80070ec:	9007      	str	r0, [sp, #28]
 80070ee:	2800      	cmp	r0, #0
 80070f0:	f43f ae8e 	beq.w	8006e10 <_strtod_l+0x498>
 80070f4:	2f00      	cmp	r7, #0
 80070f6:	dd08      	ble.n	800710a <_strtod_l+0x792>
 80070f8:	9907      	ldr	r1, [sp, #28]
 80070fa:	463a      	mov	r2, r7
 80070fc:	4620      	mov	r0, r4
 80070fe:	f001 ffe5 	bl	80090cc <__lshift>
 8007102:	9007      	str	r0, [sp, #28]
 8007104:	2800      	cmp	r0, #0
 8007106:	f43f ae83 	beq.w	8006e10 <_strtod_l+0x498>
 800710a:	f1b9 0f00 	cmp.w	r9, #0
 800710e:	dd08      	ble.n	8007122 <_strtod_l+0x7aa>
 8007110:	4631      	mov	r1, r6
 8007112:	464a      	mov	r2, r9
 8007114:	4620      	mov	r0, r4
 8007116:	f001 ffd9 	bl	80090cc <__lshift>
 800711a:	4606      	mov	r6, r0
 800711c:	2800      	cmp	r0, #0
 800711e:	f43f ae77 	beq.w	8006e10 <_strtod_l+0x498>
 8007122:	9a07      	ldr	r2, [sp, #28]
 8007124:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007126:	4620      	mov	r0, r4
 8007128:	f002 f858 	bl	80091dc <__mdiff>
 800712c:	4605      	mov	r5, r0
 800712e:	2800      	cmp	r0, #0
 8007130:	f43f ae6e 	beq.w	8006e10 <_strtod_l+0x498>
 8007134:	68c3      	ldr	r3, [r0, #12]
 8007136:	930f      	str	r3, [sp, #60]	; 0x3c
 8007138:	2300      	movs	r3, #0
 800713a:	60c3      	str	r3, [r0, #12]
 800713c:	4631      	mov	r1, r6
 800713e:	f002 f831 	bl	80091a4 <__mcmp>
 8007142:	2800      	cmp	r0, #0
 8007144:	da65      	bge.n	8007212 <_strtod_l+0x89a>
 8007146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007148:	ea53 030a 	orrs.w	r3, r3, sl
 800714c:	f040 8087 	bne.w	800725e <_strtod_l+0x8e6>
 8007150:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007154:	2b00      	cmp	r3, #0
 8007156:	f040 8082 	bne.w	800725e <_strtod_l+0x8e6>
 800715a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800715e:	0d1b      	lsrs	r3, r3, #20
 8007160:	051b      	lsls	r3, r3, #20
 8007162:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007166:	d97a      	bls.n	800725e <_strtod_l+0x8e6>
 8007168:	696b      	ldr	r3, [r5, #20]
 800716a:	b913      	cbnz	r3, 8007172 <_strtod_l+0x7fa>
 800716c:	692b      	ldr	r3, [r5, #16]
 800716e:	2b01      	cmp	r3, #1
 8007170:	dd75      	ble.n	800725e <_strtod_l+0x8e6>
 8007172:	4629      	mov	r1, r5
 8007174:	2201      	movs	r2, #1
 8007176:	4620      	mov	r0, r4
 8007178:	f001 ffa8 	bl	80090cc <__lshift>
 800717c:	4631      	mov	r1, r6
 800717e:	4605      	mov	r5, r0
 8007180:	f002 f810 	bl	80091a4 <__mcmp>
 8007184:	2800      	cmp	r0, #0
 8007186:	dd6a      	ble.n	800725e <_strtod_l+0x8e6>
 8007188:	9904      	ldr	r1, [sp, #16]
 800718a:	4a55      	ldr	r2, [pc, #340]	; (80072e0 <_strtod_l+0x968>)
 800718c:	465b      	mov	r3, fp
 800718e:	2900      	cmp	r1, #0
 8007190:	f000 8085 	beq.w	800729e <_strtod_l+0x926>
 8007194:	ea02 010b 	and.w	r1, r2, fp
 8007198:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800719c:	dc7f      	bgt.n	800729e <_strtod_l+0x926>
 800719e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80071a2:	f77f aeaa 	ble.w	8006efa <_strtod_l+0x582>
 80071a6:	4a4f      	ldr	r2, [pc, #316]	; (80072e4 <_strtod_l+0x96c>)
 80071a8:	2300      	movs	r3, #0
 80071aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80071ae:	4650      	mov	r0, sl
 80071b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80071b4:	4659      	mov	r1, fp
 80071b6:	f7f9 fa37 	bl	8000628 <__aeabi_dmul>
 80071ba:	460b      	mov	r3, r1
 80071bc:	4303      	orrs	r3, r0
 80071be:	bf08      	it	eq
 80071c0:	2322      	moveq	r3, #34	; 0x22
 80071c2:	4682      	mov	sl, r0
 80071c4:	468b      	mov	fp, r1
 80071c6:	bf08      	it	eq
 80071c8:	6023      	streq	r3, [r4, #0]
 80071ca:	e62b      	b.n	8006e24 <_strtod_l+0x4ac>
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	fa02 f303 	lsl.w	r3, r2, r3
 80071d4:	ea03 0a0a 	and.w	sl, r3, sl
 80071d8:	e6de      	b.n	8006f98 <_strtod_l+0x620>
 80071da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80071de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80071e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80071e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80071ea:	fa01 f308 	lsl.w	r3, r1, r8
 80071ee:	930c      	str	r3, [sp, #48]	; 0x30
 80071f0:	9111      	str	r1, [sp, #68]	; 0x44
 80071f2:	e741      	b.n	8007078 <_strtod_l+0x700>
 80071f4:	2300      	movs	r3, #0
 80071f6:	930c      	str	r3, [sp, #48]	; 0x30
 80071f8:	2301      	movs	r3, #1
 80071fa:	9311      	str	r3, [sp, #68]	; 0x44
 80071fc:	e73c      	b.n	8007078 <_strtod_l+0x700>
 80071fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007200:	4642      	mov	r2, r8
 8007202:	4620      	mov	r0, r4
 8007204:	f001 ff62 	bl	80090cc <__lshift>
 8007208:	901e      	str	r0, [sp, #120]	; 0x78
 800720a:	2800      	cmp	r0, #0
 800720c:	f47f af66 	bne.w	80070dc <_strtod_l+0x764>
 8007210:	e5fe      	b.n	8006e10 <_strtod_l+0x498>
 8007212:	465f      	mov	r7, fp
 8007214:	d16e      	bne.n	80072f4 <_strtod_l+0x97c>
 8007216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007218:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800721c:	b342      	cbz	r2, 8007270 <_strtod_l+0x8f8>
 800721e:	4a32      	ldr	r2, [pc, #200]	; (80072e8 <_strtod_l+0x970>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d128      	bne.n	8007276 <_strtod_l+0x8fe>
 8007224:	9b04      	ldr	r3, [sp, #16]
 8007226:	4650      	mov	r0, sl
 8007228:	b1eb      	cbz	r3, 8007266 <_strtod_l+0x8ee>
 800722a:	4a2d      	ldr	r2, [pc, #180]	; (80072e0 <_strtod_l+0x968>)
 800722c:	403a      	ands	r2, r7
 800722e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007232:	f04f 31ff 	mov.w	r1, #4294967295
 8007236:	d819      	bhi.n	800726c <_strtod_l+0x8f4>
 8007238:	0d12      	lsrs	r2, r2, #20
 800723a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800723e:	fa01 f303 	lsl.w	r3, r1, r3
 8007242:	4298      	cmp	r0, r3
 8007244:	d117      	bne.n	8007276 <_strtod_l+0x8fe>
 8007246:	4b29      	ldr	r3, [pc, #164]	; (80072ec <_strtod_l+0x974>)
 8007248:	429f      	cmp	r7, r3
 800724a:	d102      	bne.n	8007252 <_strtod_l+0x8da>
 800724c:	3001      	adds	r0, #1
 800724e:	f43f addf 	beq.w	8006e10 <_strtod_l+0x498>
 8007252:	4b23      	ldr	r3, [pc, #140]	; (80072e0 <_strtod_l+0x968>)
 8007254:	403b      	ands	r3, r7
 8007256:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800725a:	f04f 0a00 	mov.w	sl, #0
 800725e:	9b04      	ldr	r3, [sp, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1a0      	bne.n	80071a6 <_strtod_l+0x82e>
 8007264:	e5de      	b.n	8006e24 <_strtod_l+0x4ac>
 8007266:	f04f 33ff 	mov.w	r3, #4294967295
 800726a:	e7ea      	b.n	8007242 <_strtod_l+0x8ca>
 800726c:	460b      	mov	r3, r1
 800726e:	e7e8      	b.n	8007242 <_strtod_l+0x8ca>
 8007270:	ea53 030a 	orrs.w	r3, r3, sl
 8007274:	d088      	beq.n	8007188 <_strtod_l+0x810>
 8007276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007278:	b1db      	cbz	r3, 80072b2 <_strtod_l+0x93a>
 800727a:	423b      	tst	r3, r7
 800727c:	d0ef      	beq.n	800725e <_strtod_l+0x8e6>
 800727e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007280:	9a04      	ldr	r2, [sp, #16]
 8007282:	4650      	mov	r0, sl
 8007284:	4659      	mov	r1, fp
 8007286:	b1c3      	cbz	r3, 80072ba <_strtod_l+0x942>
 8007288:	f7ff fb58 	bl	800693c <sulp>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007294:	f7f9 f812 	bl	80002bc <__adddf3>
 8007298:	4682      	mov	sl, r0
 800729a:	468b      	mov	fp, r1
 800729c:	e7df      	b.n	800725e <_strtod_l+0x8e6>
 800729e:	4013      	ands	r3, r2
 80072a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80072a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80072a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80072ac:	f04f 3aff 	mov.w	sl, #4294967295
 80072b0:	e7d5      	b.n	800725e <_strtod_l+0x8e6>
 80072b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072b4:	ea13 0f0a 	tst.w	r3, sl
 80072b8:	e7e0      	b.n	800727c <_strtod_l+0x904>
 80072ba:	f7ff fb3f 	bl	800693c <sulp>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072c6:	f7f8 fff7 	bl	80002b8 <__aeabi_dsub>
 80072ca:	2200      	movs	r2, #0
 80072cc:	2300      	movs	r3, #0
 80072ce:	4682      	mov	sl, r0
 80072d0:	468b      	mov	fp, r1
 80072d2:	f7f9 fc11 	bl	8000af8 <__aeabi_dcmpeq>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d0c1      	beq.n	800725e <_strtod_l+0x8e6>
 80072da:	e60e      	b.n	8006efa <_strtod_l+0x582>
 80072dc:	fffffc02 	.word	0xfffffc02
 80072e0:	7ff00000 	.word	0x7ff00000
 80072e4:	39500000 	.word	0x39500000
 80072e8:	000fffff 	.word	0x000fffff
 80072ec:	7fefffff 	.word	0x7fefffff
 80072f0:	0801cd28 	.word	0x0801cd28
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	f002 f8d0 	bl	800949c <__ratio>
 80072fc:	ec59 8b10 	vmov	r8, r9, d0
 8007300:	ee10 0a10 	vmov	r0, s0
 8007304:	2200      	movs	r2, #0
 8007306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800730a:	4649      	mov	r1, r9
 800730c:	f7f9 fc08 	bl	8000b20 <__aeabi_dcmple>
 8007310:	2800      	cmp	r0, #0
 8007312:	d07c      	beq.n	800740e <_strtod_l+0xa96>
 8007314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d04c      	beq.n	80073b4 <_strtod_l+0xa3c>
 800731a:	4b95      	ldr	r3, [pc, #596]	; (8007570 <_strtod_l+0xbf8>)
 800731c:	2200      	movs	r2, #0
 800731e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007322:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007570 <_strtod_l+0xbf8>
 8007326:	f04f 0800 	mov.w	r8, #0
 800732a:	4b92      	ldr	r3, [pc, #584]	; (8007574 <_strtod_l+0xbfc>)
 800732c:	403b      	ands	r3, r7
 800732e:	9311      	str	r3, [sp, #68]	; 0x44
 8007330:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007332:	4b91      	ldr	r3, [pc, #580]	; (8007578 <_strtod_l+0xc00>)
 8007334:	429a      	cmp	r2, r3
 8007336:	f040 80b2 	bne.w	800749e <_strtod_l+0xb26>
 800733a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800733e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007342:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007346:	ec4b ab10 	vmov	d0, sl, fp
 800734a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800734e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007352:	f001 ffcb 	bl	80092ec <__ulp>
 8007356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800735a:	ec53 2b10 	vmov	r2, r3, d0
 800735e:	f7f9 f963 	bl	8000628 <__aeabi_dmul>
 8007362:	4652      	mov	r2, sl
 8007364:	465b      	mov	r3, fp
 8007366:	f7f8 ffa9 	bl	80002bc <__adddf3>
 800736a:	460b      	mov	r3, r1
 800736c:	4981      	ldr	r1, [pc, #516]	; (8007574 <_strtod_l+0xbfc>)
 800736e:	4a83      	ldr	r2, [pc, #524]	; (800757c <_strtod_l+0xc04>)
 8007370:	4019      	ands	r1, r3
 8007372:	4291      	cmp	r1, r2
 8007374:	4682      	mov	sl, r0
 8007376:	d95e      	bls.n	8007436 <_strtod_l+0xabe>
 8007378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800737a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800737e:	4293      	cmp	r3, r2
 8007380:	d103      	bne.n	800738a <_strtod_l+0xa12>
 8007382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007384:	3301      	adds	r3, #1
 8007386:	f43f ad43 	beq.w	8006e10 <_strtod_l+0x498>
 800738a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007588 <_strtod_l+0xc10>
 800738e:	f04f 3aff 	mov.w	sl, #4294967295
 8007392:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007394:	4620      	mov	r0, r4
 8007396:	f001 fc7d 	bl	8008c94 <_Bfree>
 800739a:	9907      	ldr	r1, [sp, #28]
 800739c:	4620      	mov	r0, r4
 800739e:	f001 fc79 	bl	8008c94 <_Bfree>
 80073a2:	4631      	mov	r1, r6
 80073a4:	4620      	mov	r0, r4
 80073a6:	f001 fc75 	bl	8008c94 <_Bfree>
 80073aa:	4629      	mov	r1, r5
 80073ac:	4620      	mov	r0, r4
 80073ae:	f001 fc71 	bl	8008c94 <_Bfree>
 80073b2:	e613      	b.n	8006fdc <_strtod_l+0x664>
 80073b4:	f1ba 0f00 	cmp.w	sl, #0
 80073b8:	d11b      	bne.n	80073f2 <_strtod_l+0xa7a>
 80073ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073be:	b9f3      	cbnz	r3, 80073fe <_strtod_l+0xa86>
 80073c0:	4b6b      	ldr	r3, [pc, #428]	; (8007570 <_strtod_l+0xbf8>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	4640      	mov	r0, r8
 80073c6:	4649      	mov	r1, r9
 80073c8:	f7f9 fba0 	bl	8000b0c <__aeabi_dcmplt>
 80073cc:	b9d0      	cbnz	r0, 8007404 <_strtod_l+0xa8c>
 80073ce:	4640      	mov	r0, r8
 80073d0:	4649      	mov	r1, r9
 80073d2:	4b6b      	ldr	r3, [pc, #428]	; (8007580 <_strtod_l+0xc08>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	f7f9 f927 	bl	8000628 <__aeabi_dmul>
 80073da:	4680      	mov	r8, r0
 80073dc:	4689      	mov	r9, r1
 80073de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80073e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80073e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80073e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80073ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80073f0:	e79b      	b.n	800732a <_strtod_l+0x9b2>
 80073f2:	f1ba 0f01 	cmp.w	sl, #1
 80073f6:	d102      	bne.n	80073fe <_strtod_l+0xa86>
 80073f8:	2f00      	cmp	r7, #0
 80073fa:	f43f ad7e 	beq.w	8006efa <_strtod_l+0x582>
 80073fe:	4b61      	ldr	r3, [pc, #388]	; (8007584 <_strtod_l+0xc0c>)
 8007400:	2200      	movs	r2, #0
 8007402:	e78c      	b.n	800731e <_strtod_l+0x9a6>
 8007404:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007580 <_strtod_l+0xc08>
 8007408:	f04f 0800 	mov.w	r8, #0
 800740c:	e7e7      	b.n	80073de <_strtod_l+0xa66>
 800740e:	4b5c      	ldr	r3, [pc, #368]	; (8007580 <_strtod_l+0xc08>)
 8007410:	4640      	mov	r0, r8
 8007412:	4649      	mov	r1, r9
 8007414:	2200      	movs	r2, #0
 8007416:	f7f9 f907 	bl	8000628 <__aeabi_dmul>
 800741a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800741c:	4680      	mov	r8, r0
 800741e:	4689      	mov	r9, r1
 8007420:	b933      	cbnz	r3, 8007430 <_strtod_l+0xab8>
 8007422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007426:	9012      	str	r0, [sp, #72]	; 0x48
 8007428:	9313      	str	r3, [sp, #76]	; 0x4c
 800742a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800742e:	e7dd      	b.n	80073ec <_strtod_l+0xa74>
 8007430:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007434:	e7f9      	b.n	800742a <_strtod_l+0xab2>
 8007436:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800743a:	9b04      	ldr	r3, [sp, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1a8      	bne.n	8007392 <_strtod_l+0xa1a>
 8007440:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007444:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007446:	0d1b      	lsrs	r3, r3, #20
 8007448:	051b      	lsls	r3, r3, #20
 800744a:	429a      	cmp	r2, r3
 800744c:	d1a1      	bne.n	8007392 <_strtod_l+0xa1a>
 800744e:	4640      	mov	r0, r8
 8007450:	4649      	mov	r1, r9
 8007452:	f7f9 fc49 	bl	8000ce8 <__aeabi_d2lz>
 8007456:	f7f9 f8b9 	bl	80005cc <__aeabi_l2d>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4640      	mov	r0, r8
 8007460:	4649      	mov	r1, r9
 8007462:	f7f8 ff29 	bl	80002b8 <__aeabi_dsub>
 8007466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007468:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800746c:	ea43 030a 	orr.w	r3, r3, sl
 8007470:	4313      	orrs	r3, r2
 8007472:	4680      	mov	r8, r0
 8007474:	4689      	mov	r9, r1
 8007476:	d053      	beq.n	8007520 <_strtod_l+0xba8>
 8007478:	a335      	add	r3, pc, #212	; (adr r3, 8007550 <_strtod_l+0xbd8>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f9 fb45 	bl	8000b0c <__aeabi_dcmplt>
 8007482:	2800      	cmp	r0, #0
 8007484:	f47f acce 	bne.w	8006e24 <_strtod_l+0x4ac>
 8007488:	a333      	add	r3, pc, #204	; (adr r3, 8007558 <_strtod_l+0xbe0>)
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	4640      	mov	r0, r8
 8007490:	4649      	mov	r1, r9
 8007492:	f7f9 fb59 	bl	8000b48 <__aeabi_dcmpgt>
 8007496:	2800      	cmp	r0, #0
 8007498:	f43f af7b 	beq.w	8007392 <_strtod_l+0xa1a>
 800749c:	e4c2      	b.n	8006e24 <_strtod_l+0x4ac>
 800749e:	9b04      	ldr	r3, [sp, #16]
 80074a0:	b333      	cbz	r3, 80074f0 <_strtod_l+0xb78>
 80074a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80074a8:	d822      	bhi.n	80074f0 <_strtod_l+0xb78>
 80074aa:	a32d      	add	r3, pc, #180	; (adr r3, 8007560 <_strtod_l+0xbe8>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	4640      	mov	r0, r8
 80074b2:	4649      	mov	r1, r9
 80074b4:	f7f9 fb34 	bl	8000b20 <__aeabi_dcmple>
 80074b8:	b1a0      	cbz	r0, 80074e4 <_strtod_l+0xb6c>
 80074ba:	4649      	mov	r1, r9
 80074bc:	4640      	mov	r0, r8
 80074be:	f7f9 fb8b 	bl	8000bd8 <__aeabi_d2uiz>
 80074c2:	2801      	cmp	r0, #1
 80074c4:	bf38      	it	cc
 80074c6:	2001      	movcc	r0, #1
 80074c8:	f7f9 f834 	bl	8000534 <__aeabi_ui2d>
 80074cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074ce:	4680      	mov	r8, r0
 80074d0:	4689      	mov	r9, r1
 80074d2:	bb13      	cbnz	r3, 800751a <_strtod_l+0xba2>
 80074d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074d8:	9014      	str	r0, [sp, #80]	; 0x50
 80074da:	9315      	str	r3, [sp, #84]	; 0x54
 80074dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80074e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80074e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80074e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80074ec:	1a9b      	subs	r3, r3, r2
 80074ee:	930d      	str	r3, [sp, #52]	; 0x34
 80074f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80074f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074fc:	f001 fef6 	bl	80092ec <__ulp>
 8007500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007504:	ec53 2b10 	vmov	r2, r3, d0
 8007508:	f7f9 f88e 	bl	8000628 <__aeabi_dmul>
 800750c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007510:	f7f8 fed4 	bl	80002bc <__adddf3>
 8007514:	4682      	mov	sl, r0
 8007516:	468b      	mov	fp, r1
 8007518:	e78f      	b.n	800743a <_strtod_l+0xac2>
 800751a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800751e:	e7dd      	b.n	80074dc <_strtod_l+0xb64>
 8007520:	a311      	add	r3, pc, #68	; (adr r3, 8007568 <_strtod_l+0xbf0>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f7f9 faf1 	bl	8000b0c <__aeabi_dcmplt>
 800752a:	e7b4      	b.n	8007496 <_strtod_l+0xb1e>
 800752c:	2300      	movs	r3, #0
 800752e:	930e      	str	r3, [sp, #56]	; 0x38
 8007530:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007532:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	f7ff ba65 	b.w	8006a04 <_strtod_l+0x8c>
 800753a:	2b65      	cmp	r3, #101	; 0x65
 800753c:	f43f ab5d 	beq.w	8006bfa <_strtod_l+0x282>
 8007540:	2b45      	cmp	r3, #69	; 0x45
 8007542:	f43f ab5a 	beq.w	8006bfa <_strtod_l+0x282>
 8007546:	2201      	movs	r2, #1
 8007548:	f7ff bb92 	b.w	8006c70 <_strtod_l+0x2f8>
 800754c:	f3af 8000 	nop.w
 8007550:	94a03595 	.word	0x94a03595
 8007554:	3fdfffff 	.word	0x3fdfffff
 8007558:	35afe535 	.word	0x35afe535
 800755c:	3fe00000 	.word	0x3fe00000
 8007560:	ffc00000 	.word	0xffc00000
 8007564:	41dfffff 	.word	0x41dfffff
 8007568:	94a03595 	.word	0x94a03595
 800756c:	3fcfffff 	.word	0x3fcfffff
 8007570:	3ff00000 	.word	0x3ff00000
 8007574:	7ff00000 	.word	0x7ff00000
 8007578:	7fe00000 	.word	0x7fe00000
 800757c:	7c9fffff 	.word	0x7c9fffff
 8007580:	3fe00000 	.word	0x3fe00000
 8007584:	bff00000 	.word	0xbff00000
 8007588:	7fefffff 	.word	0x7fefffff

0800758c <_strtod_r>:
 800758c:	4b01      	ldr	r3, [pc, #4]	; (8007594 <_strtod_r+0x8>)
 800758e:	f7ff b9f3 	b.w	8006978 <_strtod_l>
 8007592:	bf00      	nop
 8007594:	20000074 	.word	0x20000074

08007598 <strtod>:
 8007598:	460a      	mov	r2, r1
 800759a:	4601      	mov	r1, r0
 800759c:	4802      	ldr	r0, [pc, #8]	; (80075a8 <strtod+0x10>)
 800759e:	4b03      	ldr	r3, [pc, #12]	; (80075ac <strtod+0x14>)
 80075a0:	6800      	ldr	r0, [r0, #0]
 80075a2:	f7ff b9e9 	b.w	8006978 <_strtod_l>
 80075a6:	bf00      	nop
 80075a8:	2000000c 	.word	0x2000000c
 80075ac:	20000074 	.word	0x20000074

080075b0 <strtok>:
 80075b0:	4b16      	ldr	r3, [pc, #88]	; (800760c <strtok+0x5c>)
 80075b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075b4:	681e      	ldr	r6, [r3, #0]
 80075b6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80075b8:	4605      	mov	r5, r0
 80075ba:	b9fc      	cbnz	r4, 80075fc <strtok+0x4c>
 80075bc:	2050      	movs	r0, #80	; 0x50
 80075be:	9101      	str	r1, [sp, #4]
 80075c0:	f001 fb00 	bl	8008bc4 <malloc>
 80075c4:	9901      	ldr	r1, [sp, #4]
 80075c6:	65b0      	str	r0, [r6, #88]	; 0x58
 80075c8:	4602      	mov	r2, r0
 80075ca:	b920      	cbnz	r0, 80075d6 <strtok+0x26>
 80075cc:	4b10      	ldr	r3, [pc, #64]	; (8007610 <strtok+0x60>)
 80075ce:	4811      	ldr	r0, [pc, #68]	; (8007614 <strtok+0x64>)
 80075d0:	2157      	movs	r1, #87	; 0x57
 80075d2:	f000 f8d9 	bl	8007788 <__assert_func>
 80075d6:	e9c0 4400 	strd	r4, r4, [r0]
 80075da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80075de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80075e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80075e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80075ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80075ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80075f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80075f6:	6184      	str	r4, [r0, #24]
 80075f8:	7704      	strb	r4, [r0, #28]
 80075fa:	6244      	str	r4, [r0, #36]	; 0x24
 80075fc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80075fe:	2301      	movs	r3, #1
 8007600:	4628      	mov	r0, r5
 8007602:	b002      	add	sp, #8
 8007604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007608:	f000 b806 	b.w	8007618 <__strtok_r>
 800760c:	2000000c 	.word	0x2000000c
 8007610:	0801cd50 	.word	0x0801cd50
 8007614:	0801cd67 	.word	0x0801cd67

08007618 <__strtok_r>:
 8007618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761a:	b908      	cbnz	r0, 8007620 <__strtok_r+0x8>
 800761c:	6810      	ldr	r0, [r2, #0]
 800761e:	b188      	cbz	r0, 8007644 <__strtok_r+0x2c>
 8007620:	4604      	mov	r4, r0
 8007622:	4620      	mov	r0, r4
 8007624:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007628:	460f      	mov	r7, r1
 800762a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800762e:	b91e      	cbnz	r6, 8007638 <__strtok_r+0x20>
 8007630:	b965      	cbnz	r5, 800764c <__strtok_r+0x34>
 8007632:	6015      	str	r5, [r2, #0]
 8007634:	4628      	mov	r0, r5
 8007636:	e005      	b.n	8007644 <__strtok_r+0x2c>
 8007638:	42b5      	cmp	r5, r6
 800763a:	d1f6      	bne.n	800762a <__strtok_r+0x12>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f0      	bne.n	8007622 <__strtok_r+0xa>
 8007640:	6014      	str	r4, [r2, #0]
 8007642:	7003      	strb	r3, [r0, #0]
 8007644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007646:	461c      	mov	r4, r3
 8007648:	e00c      	b.n	8007664 <__strtok_r+0x4c>
 800764a:	b915      	cbnz	r5, 8007652 <__strtok_r+0x3a>
 800764c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007650:	460e      	mov	r6, r1
 8007652:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007656:	42ab      	cmp	r3, r5
 8007658:	d1f7      	bne.n	800764a <__strtok_r+0x32>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d0f3      	beq.n	8007646 <__strtok_r+0x2e>
 800765e:	2300      	movs	r3, #0
 8007660:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007664:	6014      	str	r4, [r2, #0]
 8007666:	e7ed      	b.n	8007644 <__strtok_r+0x2c>

08007668 <_strtol_l.isra.0>:
 8007668:	2b01      	cmp	r3, #1
 800766a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800766e:	d001      	beq.n	8007674 <_strtol_l.isra.0+0xc>
 8007670:	2b24      	cmp	r3, #36	; 0x24
 8007672:	d906      	bls.n	8007682 <_strtol_l.isra.0+0x1a>
 8007674:	f7fe fa90 	bl	8005b98 <__errno>
 8007678:	2316      	movs	r3, #22
 800767a:	6003      	str	r3, [r0, #0]
 800767c:	2000      	movs	r0, #0
 800767e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007682:	4f3a      	ldr	r7, [pc, #232]	; (800776c <_strtol_l.isra.0+0x104>)
 8007684:	468e      	mov	lr, r1
 8007686:	4676      	mov	r6, lr
 8007688:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800768c:	5de5      	ldrb	r5, [r4, r7]
 800768e:	f015 0508 	ands.w	r5, r5, #8
 8007692:	d1f8      	bne.n	8007686 <_strtol_l.isra.0+0x1e>
 8007694:	2c2d      	cmp	r4, #45	; 0x2d
 8007696:	d134      	bne.n	8007702 <_strtol_l.isra.0+0x9a>
 8007698:	f89e 4000 	ldrb.w	r4, [lr]
 800769c:	f04f 0801 	mov.w	r8, #1
 80076a0:	f106 0e02 	add.w	lr, r6, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d05c      	beq.n	8007762 <_strtol_l.isra.0+0xfa>
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d10c      	bne.n	80076c6 <_strtol_l.isra.0+0x5e>
 80076ac:	2c30      	cmp	r4, #48	; 0x30
 80076ae:	d10a      	bne.n	80076c6 <_strtol_l.isra.0+0x5e>
 80076b0:	f89e 4000 	ldrb.w	r4, [lr]
 80076b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80076b8:	2c58      	cmp	r4, #88	; 0x58
 80076ba:	d14d      	bne.n	8007758 <_strtol_l.isra.0+0xf0>
 80076bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80076c0:	2310      	movs	r3, #16
 80076c2:	f10e 0e02 	add.w	lr, lr, #2
 80076c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80076ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80076ce:	2600      	movs	r6, #0
 80076d0:	fbbc f9f3 	udiv	r9, ip, r3
 80076d4:	4635      	mov	r5, r6
 80076d6:	fb03 ca19 	mls	sl, r3, r9, ip
 80076da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80076de:	2f09      	cmp	r7, #9
 80076e0:	d818      	bhi.n	8007714 <_strtol_l.isra.0+0xac>
 80076e2:	463c      	mov	r4, r7
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	dd24      	ble.n	8007732 <_strtol_l.isra.0+0xca>
 80076e8:	2e00      	cmp	r6, #0
 80076ea:	db1f      	blt.n	800772c <_strtol_l.isra.0+0xc4>
 80076ec:	45a9      	cmp	r9, r5
 80076ee:	d31d      	bcc.n	800772c <_strtol_l.isra.0+0xc4>
 80076f0:	d101      	bne.n	80076f6 <_strtol_l.isra.0+0x8e>
 80076f2:	45a2      	cmp	sl, r4
 80076f4:	db1a      	blt.n	800772c <_strtol_l.isra.0+0xc4>
 80076f6:	fb05 4503 	mla	r5, r5, r3, r4
 80076fa:	2601      	movs	r6, #1
 80076fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007700:	e7eb      	b.n	80076da <_strtol_l.isra.0+0x72>
 8007702:	2c2b      	cmp	r4, #43	; 0x2b
 8007704:	bf08      	it	eq
 8007706:	f89e 4000 	ldrbeq.w	r4, [lr]
 800770a:	46a8      	mov	r8, r5
 800770c:	bf08      	it	eq
 800770e:	f106 0e02 	addeq.w	lr, r6, #2
 8007712:	e7c7      	b.n	80076a4 <_strtol_l.isra.0+0x3c>
 8007714:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007718:	2f19      	cmp	r7, #25
 800771a:	d801      	bhi.n	8007720 <_strtol_l.isra.0+0xb8>
 800771c:	3c37      	subs	r4, #55	; 0x37
 800771e:	e7e1      	b.n	80076e4 <_strtol_l.isra.0+0x7c>
 8007720:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007724:	2f19      	cmp	r7, #25
 8007726:	d804      	bhi.n	8007732 <_strtol_l.isra.0+0xca>
 8007728:	3c57      	subs	r4, #87	; 0x57
 800772a:	e7db      	b.n	80076e4 <_strtol_l.isra.0+0x7c>
 800772c:	f04f 36ff 	mov.w	r6, #4294967295
 8007730:	e7e4      	b.n	80076fc <_strtol_l.isra.0+0x94>
 8007732:	2e00      	cmp	r6, #0
 8007734:	da05      	bge.n	8007742 <_strtol_l.isra.0+0xda>
 8007736:	2322      	movs	r3, #34	; 0x22
 8007738:	6003      	str	r3, [r0, #0]
 800773a:	4665      	mov	r5, ip
 800773c:	b942      	cbnz	r2, 8007750 <_strtol_l.isra.0+0xe8>
 800773e:	4628      	mov	r0, r5
 8007740:	e79d      	b.n	800767e <_strtol_l.isra.0+0x16>
 8007742:	f1b8 0f00 	cmp.w	r8, #0
 8007746:	d000      	beq.n	800774a <_strtol_l.isra.0+0xe2>
 8007748:	426d      	negs	r5, r5
 800774a:	2a00      	cmp	r2, #0
 800774c:	d0f7      	beq.n	800773e <_strtol_l.isra.0+0xd6>
 800774e:	b10e      	cbz	r6, 8007754 <_strtol_l.isra.0+0xec>
 8007750:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007754:	6011      	str	r1, [r2, #0]
 8007756:	e7f2      	b.n	800773e <_strtol_l.isra.0+0xd6>
 8007758:	2430      	movs	r4, #48	; 0x30
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1b3      	bne.n	80076c6 <_strtol_l.isra.0+0x5e>
 800775e:	2308      	movs	r3, #8
 8007760:	e7b1      	b.n	80076c6 <_strtol_l.isra.0+0x5e>
 8007762:	2c30      	cmp	r4, #48	; 0x30
 8007764:	d0a4      	beq.n	80076b0 <_strtol_l.isra.0+0x48>
 8007766:	230a      	movs	r3, #10
 8007768:	e7ad      	b.n	80076c6 <_strtol_l.isra.0+0x5e>
 800776a:	bf00      	nop
 800776c:	0801ce05 	.word	0x0801ce05

08007770 <_strtol_r>:
 8007770:	f7ff bf7a 	b.w	8007668 <_strtol_l.isra.0>

08007774 <strtol>:
 8007774:	4613      	mov	r3, r2
 8007776:	460a      	mov	r2, r1
 8007778:	4601      	mov	r1, r0
 800777a:	4802      	ldr	r0, [pc, #8]	; (8007784 <strtol+0x10>)
 800777c:	6800      	ldr	r0, [r0, #0]
 800777e:	f7ff bf73 	b.w	8007668 <_strtol_l.isra.0>
 8007782:	bf00      	nop
 8007784:	2000000c 	.word	0x2000000c

08007788 <__assert_func>:
 8007788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800778a:	4614      	mov	r4, r2
 800778c:	461a      	mov	r2, r3
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <__assert_func+0x2c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4605      	mov	r5, r0
 8007794:	68d8      	ldr	r0, [r3, #12]
 8007796:	b14c      	cbz	r4, 80077ac <__assert_func+0x24>
 8007798:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <__assert_func+0x30>)
 800779a:	9100      	str	r1, [sp, #0]
 800779c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077a0:	4906      	ldr	r1, [pc, #24]	; (80077bc <__assert_func+0x34>)
 80077a2:	462b      	mov	r3, r5
 80077a4:	f000 fe88 	bl	80084b8 <fiprintf>
 80077a8:	f002 fb56 	bl	8009e58 <abort>
 80077ac:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <__assert_func+0x38>)
 80077ae:	461c      	mov	r4, r3
 80077b0:	e7f3      	b.n	800779a <__assert_func+0x12>
 80077b2:	bf00      	nop
 80077b4:	2000000c 	.word	0x2000000c
 80077b8:	0801cdc8 	.word	0x0801cdc8
 80077bc:	0801cdd5 	.word	0x0801cdd5
 80077c0:	0801ce03 	.word	0x0801ce03

080077c4 <quorem>:
 80077c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	6903      	ldr	r3, [r0, #16]
 80077ca:	690c      	ldr	r4, [r1, #16]
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	4607      	mov	r7, r0
 80077d0:	f2c0 8081 	blt.w	80078d6 <quorem+0x112>
 80077d4:	3c01      	subs	r4, #1
 80077d6:	f101 0814 	add.w	r8, r1, #20
 80077da:	f100 0514 	add.w	r5, r0, #20
 80077de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077ec:	3301      	adds	r3, #1
 80077ee:	429a      	cmp	r2, r3
 80077f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80077fc:	d331      	bcc.n	8007862 <quorem+0x9e>
 80077fe:	f04f 0e00 	mov.w	lr, #0
 8007802:	4640      	mov	r0, r8
 8007804:	46ac      	mov	ip, r5
 8007806:	46f2      	mov	sl, lr
 8007808:	f850 2b04 	ldr.w	r2, [r0], #4
 800780c:	b293      	uxth	r3, r2
 800780e:	fb06 e303 	mla	r3, r6, r3, lr
 8007812:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007816:	b29b      	uxth	r3, r3
 8007818:	ebaa 0303 	sub.w	r3, sl, r3
 800781c:	0c12      	lsrs	r2, r2, #16
 800781e:	f8dc a000 	ldr.w	sl, [ip]
 8007822:	fb06 e202 	mla	r2, r6, r2, lr
 8007826:	fa13 f38a 	uxtah	r3, r3, sl
 800782a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800782e:	fa1f fa82 	uxth.w	sl, r2
 8007832:	f8dc 2000 	ldr.w	r2, [ip]
 8007836:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800783a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800783e:	b29b      	uxth	r3, r3
 8007840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007844:	4581      	cmp	r9, r0
 8007846:	f84c 3b04 	str.w	r3, [ip], #4
 800784a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800784e:	d2db      	bcs.n	8007808 <quorem+0x44>
 8007850:	f855 300b 	ldr.w	r3, [r5, fp]
 8007854:	b92b      	cbnz	r3, 8007862 <quorem+0x9e>
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	3b04      	subs	r3, #4
 800785a:	429d      	cmp	r5, r3
 800785c:	461a      	mov	r2, r3
 800785e:	d32e      	bcc.n	80078be <quorem+0xfa>
 8007860:	613c      	str	r4, [r7, #16]
 8007862:	4638      	mov	r0, r7
 8007864:	f001 fc9e 	bl	80091a4 <__mcmp>
 8007868:	2800      	cmp	r0, #0
 800786a:	db24      	blt.n	80078b6 <quorem+0xf2>
 800786c:	3601      	adds	r6, #1
 800786e:	4628      	mov	r0, r5
 8007870:	f04f 0c00 	mov.w	ip, #0
 8007874:	f858 2b04 	ldr.w	r2, [r8], #4
 8007878:	f8d0 e000 	ldr.w	lr, [r0]
 800787c:	b293      	uxth	r3, r2
 800787e:	ebac 0303 	sub.w	r3, ip, r3
 8007882:	0c12      	lsrs	r2, r2, #16
 8007884:	fa13 f38e 	uxtah	r3, r3, lr
 8007888:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800788c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007890:	b29b      	uxth	r3, r3
 8007892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007896:	45c1      	cmp	r9, r8
 8007898:	f840 3b04 	str.w	r3, [r0], #4
 800789c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80078a0:	d2e8      	bcs.n	8007874 <quorem+0xb0>
 80078a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078aa:	b922      	cbnz	r2, 80078b6 <quorem+0xf2>
 80078ac:	3b04      	subs	r3, #4
 80078ae:	429d      	cmp	r5, r3
 80078b0:	461a      	mov	r2, r3
 80078b2:	d30a      	bcc.n	80078ca <quorem+0x106>
 80078b4:	613c      	str	r4, [r7, #16]
 80078b6:	4630      	mov	r0, r6
 80078b8:	b003      	add	sp, #12
 80078ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	6812      	ldr	r2, [r2, #0]
 80078c0:	3b04      	subs	r3, #4
 80078c2:	2a00      	cmp	r2, #0
 80078c4:	d1cc      	bne.n	8007860 <quorem+0x9c>
 80078c6:	3c01      	subs	r4, #1
 80078c8:	e7c7      	b.n	800785a <quorem+0x96>
 80078ca:	6812      	ldr	r2, [r2, #0]
 80078cc:	3b04      	subs	r3, #4
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	d1f0      	bne.n	80078b4 <quorem+0xf0>
 80078d2:	3c01      	subs	r4, #1
 80078d4:	e7eb      	b.n	80078ae <quorem+0xea>
 80078d6:	2000      	movs	r0, #0
 80078d8:	e7ee      	b.n	80078b8 <quorem+0xf4>
 80078da:	0000      	movs	r0, r0
 80078dc:	0000      	movs	r0, r0
	...

080078e0 <_dtoa_r>:
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	ed2d 8b02 	vpush	{d8}
 80078e8:	ec57 6b10 	vmov	r6, r7, d0
 80078ec:	b095      	sub	sp, #84	; 0x54
 80078ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80078f4:	9105      	str	r1, [sp, #20]
 80078f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80078fa:	4604      	mov	r4, r0
 80078fc:	9209      	str	r2, [sp, #36]	; 0x24
 80078fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007900:	b975      	cbnz	r5, 8007920 <_dtoa_r+0x40>
 8007902:	2010      	movs	r0, #16
 8007904:	f001 f95e 	bl	8008bc4 <malloc>
 8007908:	4602      	mov	r2, r0
 800790a:	6260      	str	r0, [r4, #36]	; 0x24
 800790c:	b920      	cbnz	r0, 8007918 <_dtoa_r+0x38>
 800790e:	4bb2      	ldr	r3, [pc, #712]	; (8007bd8 <_dtoa_r+0x2f8>)
 8007910:	21ea      	movs	r1, #234	; 0xea
 8007912:	48b2      	ldr	r0, [pc, #712]	; (8007bdc <_dtoa_r+0x2fc>)
 8007914:	f7ff ff38 	bl	8007788 <__assert_func>
 8007918:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800791c:	6005      	str	r5, [r0, #0]
 800791e:	60c5      	str	r5, [r0, #12]
 8007920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007922:	6819      	ldr	r1, [r3, #0]
 8007924:	b151      	cbz	r1, 800793c <_dtoa_r+0x5c>
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	604a      	str	r2, [r1, #4]
 800792a:	2301      	movs	r3, #1
 800792c:	4093      	lsls	r3, r2
 800792e:	608b      	str	r3, [r1, #8]
 8007930:	4620      	mov	r0, r4
 8007932:	f001 f9af 	bl	8008c94 <_Bfree>
 8007936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	1e3b      	subs	r3, r7, #0
 800793e:	bfb9      	ittee	lt
 8007940:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007944:	9303      	strlt	r3, [sp, #12]
 8007946:	2300      	movge	r3, #0
 8007948:	f8c8 3000 	strge.w	r3, [r8]
 800794c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007950:	4ba3      	ldr	r3, [pc, #652]	; (8007be0 <_dtoa_r+0x300>)
 8007952:	bfbc      	itt	lt
 8007954:	2201      	movlt	r2, #1
 8007956:	f8c8 2000 	strlt.w	r2, [r8]
 800795a:	ea33 0309 	bics.w	r3, r3, r9
 800795e:	d11b      	bne.n	8007998 <_dtoa_r+0xb8>
 8007960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007962:	f242 730f 	movw	r3, #9999	; 0x270f
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800796c:	4333      	orrs	r3, r6
 800796e:	f000 857a 	beq.w	8008466 <_dtoa_r+0xb86>
 8007972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007974:	b963      	cbnz	r3, 8007990 <_dtoa_r+0xb0>
 8007976:	4b9b      	ldr	r3, [pc, #620]	; (8007be4 <_dtoa_r+0x304>)
 8007978:	e024      	b.n	80079c4 <_dtoa_r+0xe4>
 800797a:	4b9b      	ldr	r3, [pc, #620]	; (8007be8 <_dtoa_r+0x308>)
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	3308      	adds	r3, #8
 8007980:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	9800      	ldr	r0, [sp, #0]
 8007986:	b015      	add	sp, #84	; 0x54
 8007988:	ecbd 8b02 	vpop	{d8}
 800798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007990:	4b94      	ldr	r3, [pc, #592]	; (8007be4 <_dtoa_r+0x304>)
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	3303      	adds	r3, #3
 8007996:	e7f3      	b.n	8007980 <_dtoa_r+0xa0>
 8007998:	ed9d 7b02 	vldr	d7, [sp, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	ec51 0b17 	vmov	r0, r1, d7
 80079a2:	2300      	movs	r3, #0
 80079a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80079a8:	f7f9 f8a6 	bl	8000af8 <__aeabi_dcmpeq>
 80079ac:	4680      	mov	r8, r0
 80079ae:	b158      	cbz	r0, 80079c8 <_dtoa_r+0xe8>
 80079b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079b2:	2301      	movs	r3, #1
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8551 	beq.w	8008460 <_dtoa_r+0xb80>
 80079be:	488b      	ldr	r0, [pc, #556]	; (8007bec <_dtoa_r+0x30c>)
 80079c0:	6018      	str	r0, [r3, #0]
 80079c2:	1e43      	subs	r3, r0, #1
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	e7dd      	b.n	8007984 <_dtoa_r+0xa4>
 80079c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80079cc:	aa12      	add	r2, sp, #72	; 0x48
 80079ce:	a913      	add	r1, sp, #76	; 0x4c
 80079d0:	4620      	mov	r0, r4
 80079d2:	f001 fd07 	bl	80093e4 <__d2b>
 80079d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079da:	4683      	mov	fp, r0
 80079dc:	2d00      	cmp	r5, #0
 80079de:	d07c      	beq.n	8007ada <_dtoa_r+0x1fa>
 80079e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80079e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80079ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80079f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80079f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079fa:	4b7d      	ldr	r3, [pc, #500]	; (8007bf0 <_dtoa_r+0x310>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	4630      	mov	r0, r6
 8007a00:	4639      	mov	r1, r7
 8007a02:	f7f8 fc59 	bl	80002b8 <__aeabi_dsub>
 8007a06:	a36e      	add	r3, pc, #440	; (adr r3, 8007bc0 <_dtoa_r+0x2e0>)
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f7f8 fe0c 	bl	8000628 <__aeabi_dmul>
 8007a10:	a36d      	add	r3, pc, #436	; (adr r3, 8007bc8 <_dtoa_r+0x2e8>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fc51 	bl	80002bc <__adddf3>
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	460f      	mov	r7, r1
 8007a20:	f7f8 fd98 	bl	8000554 <__aeabi_i2d>
 8007a24:	a36a      	add	r3, pc, #424	; (adr r3, 8007bd0 <_dtoa_r+0x2f0>)
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f7f8 fdfd 	bl	8000628 <__aeabi_dmul>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	4630      	mov	r0, r6
 8007a34:	4639      	mov	r1, r7
 8007a36:	f7f8 fc41 	bl	80002bc <__adddf3>
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460f      	mov	r7, r1
 8007a3e:	f7f9 f8a3 	bl	8000b88 <__aeabi_d2iz>
 8007a42:	2200      	movs	r2, #0
 8007a44:	4682      	mov	sl, r0
 8007a46:	2300      	movs	r3, #0
 8007a48:	4630      	mov	r0, r6
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	f7f9 f85e 	bl	8000b0c <__aeabi_dcmplt>
 8007a50:	b148      	cbz	r0, 8007a66 <_dtoa_r+0x186>
 8007a52:	4650      	mov	r0, sl
 8007a54:	f7f8 fd7e 	bl	8000554 <__aeabi_i2d>
 8007a58:	4632      	mov	r2, r6
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	f7f9 f84c 	bl	8000af8 <__aeabi_dcmpeq>
 8007a60:	b908      	cbnz	r0, 8007a66 <_dtoa_r+0x186>
 8007a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a66:	f1ba 0f16 	cmp.w	sl, #22
 8007a6a:	d854      	bhi.n	8007b16 <_dtoa_r+0x236>
 8007a6c:	4b61      	ldr	r3, [pc, #388]	; (8007bf4 <_dtoa_r+0x314>)
 8007a6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a7a:	f7f9 f847 	bl	8000b0c <__aeabi_dcmplt>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d04b      	beq.n	8007b1a <_dtoa_r+0x23a>
 8007a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a86:	2300      	movs	r3, #0
 8007a88:	930e      	str	r3, [sp, #56]	; 0x38
 8007a8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a8c:	1b5d      	subs	r5, r3, r5
 8007a8e:	1e6b      	subs	r3, r5, #1
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	bf43      	ittte	mi
 8007a94:	2300      	movmi	r3, #0
 8007a96:	f1c5 0801 	rsbmi	r8, r5, #1
 8007a9a:	9304      	strmi	r3, [sp, #16]
 8007a9c:	f04f 0800 	movpl.w	r8, #0
 8007aa0:	f1ba 0f00 	cmp.w	sl, #0
 8007aa4:	db3b      	blt.n	8007b1e <_dtoa_r+0x23e>
 8007aa6:	9b04      	ldr	r3, [sp, #16]
 8007aa8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007aac:	4453      	add	r3, sl
 8007aae:	9304      	str	r3, [sp, #16]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	9306      	str	r3, [sp, #24]
 8007ab4:	9b05      	ldr	r3, [sp, #20]
 8007ab6:	2b09      	cmp	r3, #9
 8007ab8:	d869      	bhi.n	8007b8e <_dtoa_r+0x2ae>
 8007aba:	2b05      	cmp	r3, #5
 8007abc:	bfc4      	itt	gt
 8007abe:	3b04      	subgt	r3, #4
 8007ac0:	9305      	strgt	r3, [sp, #20]
 8007ac2:	9b05      	ldr	r3, [sp, #20]
 8007ac4:	f1a3 0302 	sub.w	r3, r3, #2
 8007ac8:	bfcc      	ite	gt
 8007aca:	2500      	movgt	r5, #0
 8007acc:	2501      	movle	r5, #1
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d869      	bhi.n	8007ba6 <_dtoa_r+0x2c6>
 8007ad2:	e8df f003 	tbb	[pc, r3]
 8007ad6:	4e2c      	.short	0x4e2c
 8007ad8:	5a4c      	.short	0x5a4c
 8007ada:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007ade:	441d      	add	r5, r3
 8007ae0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	bfc1      	itttt	gt
 8007ae8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007aec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007af0:	fa09 f303 	lslgt.w	r3, r9, r3
 8007af4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007af8:	bfda      	itte	le
 8007afa:	f1c3 0320 	rsble	r3, r3, #32
 8007afe:	fa06 f003 	lslle.w	r0, r6, r3
 8007b02:	4318      	orrgt	r0, r3
 8007b04:	f7f8 fd16 	bl	8000534 <__aeabi_ui2d>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b10:	3d01      	subs	r5, #1
 8007b12:	9310      	str	r3, [sp, #64]	; 0x40
 8007b14:	e771      	b.n	80079fa <_dtoa_r+0x11a>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e7b6      	b.n	8007a88 <_dtoa_r+0x1a8>
 8007b1a:	900e      	str	r0, [sp, #56]	; 0x38
 8007b1c:	e7b5      	b.n	8007a8a <_dtoa_r+0x1aa>
 8007b1e:	f1ca 0300 	rsb	r3, sl, #0
 8007b22:	9306      	str	r3, [sp, #24]
 8007b24:	2300      	movs	r3, #0
 8007b26:	eba8 080a 	sub.w	r8, r8, sl
 8007b2a:	930d      	str	r3, [sp, #52]	; 0x34
 8007b2c:	e7c2      	b.n	8007ab4 <_dtoa_r+0x1d4>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9308      	str	r3, [sp, #32]
 8007b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dc39      	bgt.n	8007bac <_dtoa_r+0x2cc>
 8007b38:	f04f 0901 	mov.w	r9, #1
 8007b3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b40:	464b      	mov	r3, r9
 8007b42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007b46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b48:	2200      	movs	r2, #0
 8007b4a:	6042      	str	r2, [r0, #4]
 8007b4c:	2204      	movs	r2, #4
 8007b4e:	f102 0614 	add.w	r6, r2, #20
 8007b52:	429e      	cmp	r6, r3
 8007b54:	6841      	ldr	r1, [r0, #4]
 8007b56:	d92f      	bls.n	8007bb8 <_dtoa_r+0x2d8>
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f001 f85b 	bl	8008c14 <_Balloc>
 8007b5e:	9000      	str	r0, [sp, #0]
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d14b      	bne.n	8007bfc <_dtoa_r+0x31c>
 8007b64:	4b24      	ldr	r3, [pc, #144]	; (8007bf8 <_dtoa_r+0x318>)
 8007b66:	4602      	mov	r2, r0
 8007b68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b6c:	e6d1      	b.n	8007912 <_dtoa_r+0x32>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e7de      	b.n	8007b30 <_dtoa_r+0x250>
 8007b72:	2300      	movs	r3, #0
 8007b74:	9308      	str	r3, [sp, #32]
 8007b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b78:	eb0a 0903 	add.w	r9, sl, r3
 8007b7c:	f109 0301 	add.w	r3, r9, #1
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	9301      	str	r3, [sp, #4]
 8007b84:	bfb8      	it	lt
 8007b86:	2301      	movlt	r3, #1
 8007b88:	e7dd      	b.n	8007b46 <_dtoa_r+0x266>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e7f2      	b.n	8007b74 <_dtoa_r+0x294>
 8007b8e:	2501      	movs	r5, #1
 8007b90:	2300      	movs	r3, #0
 8007b92:	9305      	str	r3, [sp, #20]
 8007b94:	9508      	str	r5, [sp, #32]
 8007b96:	f04f 39ff 	mov.w	r9, #4294967295
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ba0:	2312      	movs	r3, #18
 8007ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ba4:	e7cf      	b.n	8007b46 <_dtoa_r+0x266>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	9308      	str	r3, [sp, #32]
 8007baa:	e7f4      	b.n	8007b96 <_dtoa_r+0x2b6>
 8007bac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007bb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007bb4:	464b      	mov	r3, r9
 8007bb6:	e7c6      	b.n	8007b46 <_dtoa_r+0x266>
 8007bb8:	3101      	adds	r1, #1
 8007bba:	6041      	str	r1, [r0, #4]
 8007bbc:	0052      	lsls	r2, r2, #1
 8007bbe:	e7c6      	b.n	8007b4e <_dtoa_r+0x26e>
 8007bc0:	636f4361 	.word	0x636f4361
 8007bc4:	3fd287a7 	.word	0x3fd287a7
 8007bc8:	8b60c8b3 	.word	0x8b60c8b3
 8007bcc:	3fc68a28 	.word	0x3fc68a28
 8007bd0:	509f79fb 	.word	0x509f79fb
 8007bd4:	3fd34413 	.word	0x3fd34413
 8007bd8:	0801cd50 	.word	0x0801cd50
 8007bdc:	0801cf12 	.word	0x0801cf12
 8007be0:	7ff00000 	.word	0x7ff00000
 8007be4:	0801cf0e 	.word	0x0801cf0e
 8007be8:	0801cf05 	.word	0x0801cf05
 8007bec:	0801ccd1 	.word	0x0801ccd1
 8007bf0:	3ff80000 	.word	0x3ff80000
 8007bf4:	0801d088 	.word	0x0801d088
 8007bf8:	0801cf71 	.word	0x0801cf71
 8007bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bfe:	9a00      	ldr	r2, [sp, #0]
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	9b01      	ldr	r3, [sp, #4]
 8007c04:	2b0e      	cmp	r3, #14
 8007c06:	f200 80ad 	bhi.w	8007d64 <_dtoa_r+0x484>
 8007c0a:	2d00      	cmp	r5, #0
 8007c0c:	f000 80aa 	beq.w	8007d64 <_dtoa_r+0x484>
 8007c10:	f1ba 0f00 	cmp.w	sl, #0
 8007c14:	dd36      	ble.n	8007c84 <_dtoa_r+0x3a4>
 8007c16:	4ac3      	ldr	r2, [pc, #780]	; (8007f24 <_dtoa_r+0x644>)
 8007c18:	f00a 030f 	and.w	r3, sl, #15
 8007c1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c20:	ed93 7b00 	vldr	d7, [r3]
 8007c24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007c28:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007c2c:	eeb0 8a47 	vmov.f32	s16, s14
 8007c30:	eef0 8a67 	vmov.f32	s17, s15
 8007c34:	d016      	beq.n	8007c64 <_dtoa_r+0x384>
 8007c36:	4bbc      	ldr	r3, [pc, #752]	; (8007f28 <_dtoa_r+0x648>)
 8007c38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c40:	f7f8 fe1c 	bl	800087c <__aeabi_ddiv>
 8007c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c48:	f007 070f 	and.w	r7, r7, #15
 8007c4c:	2503      	movs	r5, #3
 8007c4e:	4eb6      	ldr	r6, [pc, #728]	; (8007f28 <_dtoa_r+0x648>)
 8007c50:	b957      	cbnz	r7, 8007c68 <_dtoa_r+0x388>
 8007c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c56:	ec53 2b18 	vmov	r2, r3, d8
 8007c5a:	f7f8 fe0f 	bl	800087c <__aeabi_ddiv>
 8007c5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c62:	e029      	b.n	8007cb8 <_dtoa_r+0x3d8>
 8007c64:	2502      	movs	r5, #2
 8007c66:	e7f2      	b.n	8007c4e <_dtoa_r+0x36e>
 8007c68:	07f9      	lsls	r1, r7, #31
 8007c6a:	d508      	bpl.n	8007c7e <_dtoa_r+0x39e>
 8007c6c:	ec51 0b18 	vmov	r0, r1, d8
 8007c70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c74:	f7f8 fcd8 	bl	8000628 <__aeabi_dmul>
 8007c78:	ec41 0b18 	vmov	d8, r0, r1
 8007c7c:	3501      	adds	r5, #1
 8007c7e:	107f      	asrs	r7, r7, #1
 8007c80:	3608      	adds	r6, #8
 8007c82:	e7e5      	b.n	8007c50 <_dtoa_r+0x370>
 8007c84:	f000 80a6 	beq.w	8007dd4 <_dtoa_r+0x4f4>
 8007c88:	f1ca 0600 	rsb	r6, sl, #0
 8007c8c:	4ba5      	ldr	r3, [pc, #660]	; (8007f24 <_dtoa_r+0x644>)
 8007c8e:	4fa6      	ldr	r7, [pc, #664]	; (8007f28 <_dtoa_r+0x648>)
 8007c90:	f006 020f 	and.w	r2, r6, #15
 8007c94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ca0:	f7f8 fcc2 	bl	8000628 <__aeabi_dmul>
 8007ca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ca8:	1136      	asrs	r6, r6, #4
 8007caa:	2300      	movs	r3, #0
 8007cac:	2502      	movs	r5, #2
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	f040 8085 	bne.w	8007dbe <_dtoa_r+0x4de>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1d2      	bne.n	8007c5e <_dtoa_r+0x37e>
 8007cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 808c 	beq.w	8007dd8 <_dtoa_r+0x4f8>
 8007cc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007cc4:	4b99      	ldr	r3, [pc, #612]	; (8007f2c <_dtoa_r+0x64c>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	4630      	mov	r0, r6
 8007cca:	4639      	mov	r1, r7
 8007ccc:	f7f8 ff1e 	bl	8000b0c <__aeabi_dcmplt>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	f000 8081 	beq.w	8007dd8 <_dtoa_r+0x4f8>
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d07d      	beq.n	8007dd8 <_dtoa_r+0x4f8>
 8007cdc:	f1b9 0f00 	cmp.w	r9, #0
 8007ce0:	dd3c      	ble.n	8007d5c <_dtoa_r+0x47c>
 8007ce2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ce6:	9307      	str	r3, [sp, #28]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4b91      	ldr	r3, [pc, #580]	; (8007f30 <_dtoa_r+0x650>)
 8007cec:	4630      	mov	r0, r6
 8007cee:	4639      	mov	r1, r7
 8007cf0:	f7f8 fc9a 	bl	8000628 <__aeabi_dmul>
 8007cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf8:	3501      	adds	r5, #1
 8007cfa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007cfe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d02:	4628      	mov	r0, r5
 8007d04:	f7f8 fc26 	bl	8000554 <__aeabi_i2d>
 8007d08:	4632      	mov	r2, r6
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	f7f8 fc8c 	bl	8000628 <__aeabi_dmul>
 8007d10:	4b88      	ldr	r3, [pc, #544]	; (8007f34 <_dtoa_r+0x654>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	f7f8 fad2 	bl	80002bc <__adddf3>
 8007d18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d20:	9303      	str	r3, [sp, #12]
 8007d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d15c      	bne.n	8007de2 <_dtoa_r+0x502>
 8007d28:	4b83      	ldr	r3, [pc, #524]	; (8007f38 <_dtoa_r+0x658>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4639      	mov	r1, r7
 8007d30:	f7f8 fac2 	bl	80002b8 <__aeabi_dsub>
 8007d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d38:	4606      	mov	r6, r0
 8007d3a:	460f      	mov	r7, r1
 8007d3c:	f7f8 ff04 	bl	8000b48 <__aeabi_dcmpgt>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	f040 8296 	bne.w	8008272 <_dtoa_r+0x992>
 8007d46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d50:	4639      	mov	r1, r7
 8007d52:	f7f8 fedb 	bl	8000b0c <__aeabi_dcmplt>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f040 8288 	bne.w	800826c <_dtoa_r+0x98c>
 8007d5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f2c0 8158 	blt.w	800801c <_dtoa_r+0x73c>
 8007d6c:	f1ba 0f0e 	cmp.w	sl, #14
 8007d70:	f300 8154 	bgt.w	800801c <_dtoa_r+0x73c>
 8007d74:	4b6b      	ldr	r3, [pc, #428]	; (8007f24 <_dtoa_r+0x644>)
 8007d76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f280 80e3 	bge.w	8007f4c <_dtoa_r+0x66c>
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f300 80df 	bgt.w	8007f4c <_dtoa_r+0x66c>
 8007d8e:	f040 826d 	bne.w	800826c <_dtoa_r+0x98c>
 8007d92:	4b69      	ldr	r3, [pc, #420]	; (8007f38 <_dtoa_r+0x658>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	f7f8 fc45 	bl	8000628 <__aeabi_dmul>
 8007d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007da2:	f7f8 fec7 	bl	8000b34 <__aeabi_dcmpge>
 8007da6:	9e01      	ldr	r6, [sp, #4]
 8007da8:	4637      	mov	r7, r6
 8007daa:	2800      	cmp	r0, #0
 8007dac:	f040 8243 	bne.w	8008236 <_dtoa_r+0x956>
 8007db0:	9d00      	ldr	r5, [sp, #0]
 8007db2:	2331      	movs	r3, #49	; 0x31
 8007db4:	f805 3b01 	strb.w	r3, [r5], #1
 8007db8:	f10a 0a01 	add.w	sl, sl, #1
 8007dbc:	e23f      	b.n	800823e <_dtoa_r+0x95e>
 8007dbe:	07f2      	lsls	r2, r6, #31
 8007dc0:	d505      	bpl.n	8007dce <_dtoa_r+0x4ee>
 8007dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc6:	f7f8 fc2f 	bl	8000628 <__aeabi_dmul>
 8007dca:	3501      	adds	r5, #1
 8007dcc:	2301      	movs	r3, #1
 8007dce:	1076      	asrs	r6, r6, #1
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	e76c      	b.n	8007cae <_dtoa_r+0x3ce>
 8007dd4:	2502      	movs	r5, #2
 8007dd6:	e76f      	b.n	8007cb8 <_dtoa_r+0x3d8>
 8007dd8:	9b01      	ldr	r3, [sp, #4]
 8007dda:	f8cd a01c 	str.w	sl, [sp, #28]
 8007dde:	930c      	str	r3, [sp, #48]	; 0x30
 8007de0:	e78d      	b.n	8007cfe <_dtoa_r+0x41e>
 8007de2:	9900      	ldr	r1, [sp, #0]
 8007de4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007de8:	4b4e      	ldr	r3, [pc, #312]	; (8007f24 <_dtoa_r+0x644>)
 8007dea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dee:	4401      	add	r1, r0
 8007df0:	9102      	str	r1, [sp, #8]
 8007df2:	9908      	ldr	r1, [sp, #32]
 8007df4:	eeb0 8a47 	vmov.f32	s16, s14
 8007df8:	eef0 8a67 	vmov.f32	s17, s15
 8007dfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e04:	2900      	cmp	r1, #0
 8007e06:	d045      	beq.n	8007e94 <_dtoa_r+0x5b4>
 8007e08:	494c      	ldr	r1, [pc, #304]	; (8007f3c <_dtoa_r+0x65c>)
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	f7f8 fd36 	bl	800087c <__aeabi_ddiv>
 8007e10:	ec53 2b18 	vmov	r2, r3, d8
 8007e14:	f7f8 fa50 	bl	80002b8 <__aeabi_dsub>
 8007e18:	9d00      	ldr	r5, [sp, #0]
 8007e1a:	ec41 0b18 	vmov	d8, r0, r1
 8007e1e:	4639      	mov	r1, r7
 8007e20:	4630      	mov	r0, r6
 8007e22:	f7f8 feb1 	bl	8000b88 <__aeabi_d2iz>
 8007e26:	900c      	str	r0, [sp, #48]	; 0x30
 8007e28:	f7f8 fb94 	bl	8000554 <__aeabi_i2d>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4630      	mov	r0, r6
 8007e32:	4639      	mov	r1, r7
 8007e34:	f7f8 fa40 	bl	80002b8 <__aeabi_dsub>
 8007e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e3a:	3330      	adds	r3, #48	; 0x30
 8007e3c:	f805 3b01 	strb.w	r3, [r5], #1
 8007e40:	ec53 2b18 	vmov	r2, r3, d8
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	f7f8 fe60 	bl	8000b0c <__aeabi_dcmplt>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d165      	bne.n	8007f1c <_dtoa_r+0x63c>
 8007e50:	4632      	mov	r2, r6
 8007e52:	463b      	mov	r3, r7
 8007e54:	4935      	ldr	r1, [pc, #212]	; (8007f2c <_dtoa_r+0x64c>)
 8007e56:	2000      	movs	r0, #0
 8007e58:	f7f8 fa2e 	bl	80002b8 <__aeabi_dsub>
 8007e5c:	ec53 2b18 	vmov	r2, r3, d8
 8007e60:	f7f8 fe54 	bl	8000b0c <__aeabi_dcmplt>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	f040 80b9 	bne.w	8007fdc <_dtoa_r+0x6fc>
 8007e6a:	9b02      	ldr	r3, [sp, #8]
 8007e6c:	429d      	cmp	r5, r3
 8007e6e:	f43f af75 	beq.w	8007d5c <_dtoa_r+0x47c>
 8007e72:	4b2f      	ldr	r3, [pc, #188]	; (8007f30 <_dtoa_r+0x650>)
 8007e74:	ec51 0b18 	vmov	r0, r1, d8
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f7f8 fbd5 	bl	8000628 <__aeabi_dmul>
 8007e7e:	4b2c      	ldr	r3, [pc, #176]	; (8007f30 <_dtoa_r+0x650>)
 8007e80:	ec41 0b18 	vmov	d8, r0, r1
 8007e84:	2200      	movs	r2, #0
 8007e86:	4630      	mov	r0, r6
 8007e88:	4639      	mov	r1, r7
 8007e8a:	f7f8 fbcd 	bl	8000628 <__aeabi_dmul>
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	e7c4      	b.n	8007e1e <_dtoa_r+0x53e>
 8007e94:	ec51 0b17 	vmov	r0, r1, d7
 8007e98:	f7f8 fbc6 	bl	8000628 <__aeabi_dmul>
 8007e9c:	9b02      	ldr	r3, [sp, #8]
 8007e9e:	9d00      	ldr	r5, [sp, #0]
 8007ea0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ea2:	ec41 0b18 	vmov	d8, r0, r1
 8007ea6:	4639      	mov	r1, r7
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7f8 fe6d 	bl	8000b88 <__aeabi_d2iz>
 8007eae:	9011      	str	r0, [sp, #68]	; 0x44
 8007eb0:	f7f8 fb50 	bl	8000554 <__aeabi_i2d>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4630      	mov	r0, r6
 8007eba:	4639      	mov	r1, r7
 8007ebc:	f7f8 f9fc 	bl	80002b8 <__aeabi_dsub>
 8007ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ec2:	3330      	adds	r3, #48	; 0x30
 8007ec4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ec8:	9b02      	ldr	r3, [sp, #8]
 8007eca:	429d      	cmp	r5, r3
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	f04f 0200 	mov.w	r2, #0
 8007ed4:	d134      	bne.n	8007f40 <_dtoa_r+0x660>
 8007ed6:	4b19      	ldr	r3, [pc, #100]	; (8007f3c <_dtoa_r+0x65c>)
 8007ed8:	ec51 0b18 	vmov	r0, r1, d8
 8007edc:	f7f8 f9ee 	bl	80002bc <__adddf3>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	f7f8 fe2e 	bl	8000b48 <__aeabi_dcmpgt>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d175      	bne.n	8007fdc <_dtoa_r+0x6fc>
 8007ef0:	ec53 2b18 	vmov	r2, r3, d8
 8007ef4:	4911      	ldr	r1, [pc, #68]	; (8007f3c <_dtoa_r+0x65c>)
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	f7f8 f9de 	bl	80002b8 <__aeabi_dsub>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4630      	mov	r0, r6
 8007f02:	4639      	mov	r1, r7
 8007f04:	f7f8 fe02 	bl	8000b0c <__aeabi_dcmplt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f43f af27 	beq.w	8007d5c <_dtoa_r+0x47c>
 8007f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f10:	1e6b      	subs	r3, r5, #1
 8007f12:	930c      	str	r3, [sp, #48]	; 0x30
 8007f14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f18:	2b30      	cmp	r3, #48	; 0x30
 8007f1a:	d0f8      	beq.n	8007f0e <_dtoa_r+0x62e>
 8007f1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007f20:	e04a      	b.n	8007fb8 <_dtoa_r+0x6d8>
 8007f22:	bf00      	nop
 8007f24:	0801d088 	.word	0x0801d088
 8007f28:	0801d060 	.word	0x0801d060
 8007f2c:	3ff00000 	.word	0x3ff00000
 8007f30:	40240000 	.word	0x40240000
 8007f34:	401c0000 	.word	0x401c0000
 8007f38:	40140000 	.word	0x40140000
 8007f3c:	3fe00000 	.word	0x3fe00000
 8007f40:	4baf      	ldr	r3, [pc, #700]	; (8008200 <_dtoa_r+0x920>)
 8007f42:	f7f8 fb71 	bl	8000628 <__aeabi_dmul>
 8007f46:	4606      	mov	r6, r0
 8007f48:	460f      	mov	r7, r1
 8007f4a:	e7ac      	b.n	8007ea6 <_dtoa_r+0x5c6>
 8007f4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f50:	9d00      	ldr	r5, [sp, #0]
 8007f52:	4642      	mov	r2, r8
 8007f54:	464b      	mov	r3, r9
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	f7f8 fc8f 	bl	800087c <__aeabi_ddiv>
 8007f5e:	f7f8 fe13 	bl	8000b88 <__aeabi_d2iz>
 8007f62:	9002      	str	r0, [sp, #8]
 8007f64:	f7f8 faf6 	bl	8000554 <__aeabi_i2d>
 8007f68:	4642      	mov	r2, r8
 8007f6a:	464b      	mov	r3, r9
 8007f6c:	f7f8 fb5c 	bl	8000628 <__aeabi_dmul>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 f99e 	bl	80002b8 <__aeabi_dsub>
 8007f7c:	9e02      	ldr	r6, [sp, #8]
 8007f7e:	9f01      	ldr	r7, [sp, #4]
 8007f80:	3630      	adds	r6, #48	; 0x30
 8007f82:	f805 6b01 	strb.w	r6, [r5], #1
 8007f86:	9e00      	ldr	r6, [sp, #0]
 8007f88:	1bae      	subs	r6, r5, r6
 8007f8a:	42b7      	cmp	r7, r6
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	d137      	bne.n	8008002 <_dtoa_r+0x722>
 8007f92:	f7f8 f993 	bl	80002bc <__adddf3>
 8007f96:	4642      	mov	r2, r8
 8007f98:	464b      	mov	r3, r9
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460f      	mov	r7, r1
 8007f9e:	f7f8 fdd3 	bl	8000b48 <__aeabi_dcmpgt>
 8007fa2:	b9c8      	cbnz	r0, 8007fd8 <_dtoa_r+0x6f8>
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 fda4 	bl	8000af8 <__aeabi_dcmpeq>
 8007fb0:	b110      	cbz	r0, 8007fb8 <_dtoa_r+0x6d8>
 8007fb2:	9b02      	ldr	r3, [sp, #8]
 8007fb4:	07d9      	lsls	r1, r3, #31
 8007fb6:	d40f      	bmi.n	8007fd8 <_dtoa_r+0x6f8>
 8007fb8:	4620      	mov	r0, r4
 8007fba:	4659      	mov	r1, fp
 8007fbc:	f000 fe6a 	bl	8008c94 <_Bfree>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	702b      	strb	r3, [r5, #0]
 8007fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fc6:	f10a 0001 	add.w	r0, sl, #1
 8007fca:	6018      	str	r0, [r3, #0]
 8007fcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f43f acd8 	beq.w	8007984 <_dtoa_r+0xa4>
 8007fd4:	601d      	str	r5, [r3, #0]
 8007fd6:	e4d5      	b.n	8007984 <_dtoa_r+0xa4>
 8007fd8:	f8cd a01c 	str.w	sl, [sp, #28]
 8007fdc:	462b      	mov	r3, r5
 8007fde:	461d      	mov	r5, r3
 8007fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fe4:	2a39      	cmp	r2, #57	; 0x39
 8007fe6:	d108      	bne.n	8007ffa <_dtoa_r+0x71a>
 8007fe8:	9a00      	ldr	r2, [sp, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d1f7      	bne.n	8007fde <_dtoa_r+0x6fe>
 8007fee:	9a07      	ldr	r2, [sp, #28]
 8007ff0:	9900      	ldr	r1, [sp, #0]
 8007ff2:	3201      	adds	r2, #1
 8007ff4:	9207      	str	r2, [sp, #28]
 8007ff6:	2230      	movs	r2, #48	; 0x30
 8007ff8:	700a      	strb	r2, [r1, #0]
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	3201      	adds	r2, #1
 8007ffe:	701a      	strb	r2, [r3, #0]
 8008000:	e78c      	b.n	8007f1c <_dtoa_r+0x63c>
 8008002:	4b7f      	ldr	r3, [pc, #508]	; (8008200 <_dtoa_r+0x920>)
 8008004:	2200      	movs	r2, #0
 8008006:	f7f8 fb0f 	bl	8000628 <__aeabi_dmul>
 800800a:	2200      	movs	r2, #0
 800800c:	2300      	movs	r3, #0
 800800e:	4606      	mov	r6, r0
 8008010:	460f      	mov	r7, r1
 8008012:	f7f8 fd71 	bl	8000af8 <__aeabi_dcmpeq>
 8008016:	2800      	cmp	r0, #0
 8008018:	d09b      	beq.n	8007f52 <_dtoa_r+0x672>
 800801a:	e7cd      	b.n	8007fb8 <_dtoa_r+0x6d8>
 800801c:	9a08      	ldr	r2, [sp, #32]
 800801e:	2a00      	cmp	r2, #0
 8008020:	f000 80c4 	beq.w	80081ac <_dtoa_r+0x8cc>
 8008024:	9a05      	ldr	r2, [sp, #20]
 8008026:	2a01      	cmp	r2, #1
 8008028:	f300 80a8 	bgt.w	800817c <_dtoa_r+0x89c>
 800802c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800802e:	2a00      	cmp	r2, #0
 8008030:	f000 80a0 	beq.w	8008174 <_dtoa_r+0x894>
 8008034:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008038:	9e06      	ldr	r6, [sp, #24]
 800803a:	4645      	mov	r5, r8
 800803c:	9a04      	ldr	r2, [sp, #16]
 800803e:	2101      	movs	r1, #1
 8008040:	441a      	add	r2, r3
 8008042:	4620      	mov	r0, r4
 8008044:	4498      	add	r8, r3
 8008046:	9204      	str	r2, [sp, #16]
 8008048:	f000 ff2a 	bl	8008ea0 <__i2b>
 800804c:	4607      	mov	r7, r0
 800804e:	2d00      	cmp	r5, #0
 8008050:	dd0b      	ble.n	800806a <_dtoa_r+0x78a>
 8008052:	9b04      	ldr	r3, [sp, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	dd08      	ble.n	800806a <_dtoa_r+0x78a>
 8008058:	42ab      	cmp	r3, r5
 800805a:	9a04      	ldr	r2, [sp, #16]
 800805c:	bfa8      	it	ge
 800805e:	462b      	movge	r3, r5
 8008060:	eba8 0803 	sub.w	r8, r8, r3
 8008064:	1aed      	subs	r5, r5, r3
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	9304      	str	r3, [sp, #16]
 800806a:	9b06      	ldr	r3, [sp, #24]
 800806c:	b1fb      	cbz	r3, 80080ae <_dtoa_r+0x7ce>
 800806e:	9b08      	ldr	r3, [sp, #32]
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 809f 	beq.w	80081b4 <_dtoa_r+0x8d4>
 8008076:	2e00      	cmp	r6, #0
 8008078:	dd11      	ble.n	800809e <_dtoa_r+0x7be>
 800807a:	4639      	mov	r1, r7
 800807c:	4632      	mov	r2, r6
 800807e:	4620      	mov	r0, r4
 8008080:	f000 ffca 	bl	8009018 <__pow5mult>
 8008084:	465a      	mov	r2, fp
 8008086:	4601      	mov	r1, r0
 8008088:	4607      	mov	r7, r0
 800808a:	4620      	mov	r0, r4
 800808c:	f000 ff1e 	bl	8008ecc <__multiply>
 8008090:	4659      	mov	r1, fp
 8008092:	9007      	str	r0, [sp, #28]
 8008094:	4620      	mov	r0, r4
 8008096:	f000 fdfd 	bl	8008c94 <_Bfree>
 800809a:	9b07      	ldr	r3, [sp, #28]
 800809c:	469b      	mov	fp, r3
 800809e:	9b06      	ldr	r3, [sp, #24]
 80080a0:	1b9a      	subs	r2, r3, r6
 80080a2:	d004      	beq.n	80080ae <_dtoa_r+0x7ce>
 80080a4:	4659      	mov	r1, fp
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 ffb6 	bl	8009018 <__pow5mult>
 80080ac:	4683      	mov	fp, r0
 80080ae:	2101      	movs	r1, #1
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fef5 	bl	8008ea0 <__i2b>
 80080b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	4606      	mov	r6, r0
 80080bc:	dd7c      	ble.n	80081b8 <_dtoa_r+0x8d8>
 80080be:	461a      	mov	r2, r3
 80080c0:	4601      	mov	r1, r0
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 ffa8 	bl	8009018 <__pow5mult>
 80080c8:	9b05      	ldr	r3, [sp, #20]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	4606      	mov	r6, r0
 80080ce:	dd76      	ble.n	80081be <_dtoa_r+0x8de>
 80080d0:	2300      	movs	r3, #0
 80080d2:	9306      	str	r3, [sp, #24]
 80080d4:	6933      	ldr	r3, [r6, #16]
 80080d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80080da:	6918      	ldr	r0, [r3, #16]
 80080dc:	f000 fe90 	bl	8008e00 <__hi0bits>
 80080e0:	f1c0 0020 	rsb	r0, r0, #32
 80080e4:	9b04      	ldr	r3, [sp, #16]
 80080e6:	4418      	add	r0, r3
 80080e8:	f010 001f 	ands.w	r0, r0, #31
 80080ec:	f000 8086 	beq.w	80081fc <_dtoa_r+0x91c>
 80080f0:	f1c0 0320 	rsb	r3, r0, #32
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	dd7f      	ble.n	80081f8 <_dtoa_r+0x918>
 80080f8:	f1c0 001c 	rsb	r0, r0, #28
 80080fc:	9b04      	ldr	r3, [sp, #16]
 80080fe:	4403      	add	r3, r0
 8008100:	4480      	add	r8, r0
 8008102:	4405      	add	r5, r0
 8008104:	9304      	str	r3, [sp, #16]
 8008106:	f1b8 0f00 	cmp.w	r8, #0
 800810a:	dd05      	ble.n	8008118 <_dtoa_r+0x838>
 800810c:	4659      	mov	r1, fp
 800810e:	4642      	mov	r2, r8
 8008110:	4620      	mov	r0, r4
 8008112:	f000 ffdb 	bl	80090cc <__lshift>
 8008116:	4683      	mov	fp, r0
 8008118:	9b04      	ldr	r3, [sp, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	dd05      	ble.n	800812a <_dtoa_r+0x84a>
 800811e:	4631      	mov	r1, r6
 8008120:	461a      	mov	r2, r3
 8008122:	4620      	mov	r0, r4
 8008124:	f000 ffd2 	bl	80090cc <__lshift>
 8008128:	4606      	mov	r6, r0
 800812a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800812c:	2b00      	cmp	r3, #0
 800812e:	d069      	beq.n	8008204 <_dtoa_r+0x924>
 8008130:	4631      	mov	r1, r6
 8008132:	4658      	mov	r0, fp
 8008134:	f001 f836 	bl	80091a4 <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	da63      	bge.n	8008204 <_dtoa_r+0x924>
 800813c:	2300      	movs	r3, #0
 800813e:	4659      	mov	r1, fp
 8008140:	220a      	movs	r2, #10
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fdc8 	bl	8008cd8 <__multadd>
 8008148:	9b08      	ldr	r3, [sp, #32]
 800814a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800814e:	4683      	mov	fp, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 818f 	beq.w	8008474 <_dtoa_r+0xb94>
 8008156:	4639      	mov	r1, r7
 8008158:	2300      	movs	r3, #0
 800815a:	220a      	movs	r2, #10
 800815c:	4620      	mov	r0, r4
 800815e:	f000 fdbb 	bl	8008cd8 <__multadd>
 8008162:	f1b9 0f00 	cmp.w	r9, #0
 8008166:	4607      	mov	r7, r0
 8008168:	f300 808e 	bgt.w	8008288 <_dtoa_r+0x9a8>
 800816c:	9b05      	ldr	r3, [sp, #20]
 800816e:	2b02      	cmp	r3, #2
 8008170:	dc50      	bgt.n	8008214 <_dtoa_r+0x934>
 8008172:	e089      	b.n	8008288 <_dtoa_r+0x9a8>
 8008174:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008176:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800817a:	e75d      	b.n	8008038 <_dtoa_r+0x758>
 800817c:	9b01      	ldr	r3, [sp, #4]
 800817e:	1e5e      	subs	r6, r3, #1
 8008180:	9b06      	ldr	r3, [sp, #24]
 8008182:	42b3      	cmp	r3, r6
 8008184:	bfbf      	itttt	lt
 8008186:	9b06      	ldrlt	r3, [sp, #24]
 8008188:	9606      	strlt	r6, [sp, #24]
 800818a:	1af2      	sublt	r2, r6, r3
 800818c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800818e:	bfb6      	itet	lt
 8008190:	189b      	addlt	r3, r3, r2
 8008192:	1b9e      	subge	r6, r3, r6
 8008194:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008196:	9b01      	ldr	r3, [sp, #4]
 8008198:	bfb8      	it	lt
 800819a:	2600      	movlt	r6, #0
 800819c:	2b00      	cmp	r3, #0
 800819e:	bfb5      	itete	lt
 80081a0:	eba8 0503 	sublt.w	r5, r8, r3
 80081a4:	9b01      	ldrge	r3, [sp, #4]
 80081a6:	2300      	movlt	r3, #0
 80081a8:	4645      	movge	r5, r8
 80081aa:	e747      	b.n	800803c <_dtoa_r+0x75c>
 80081ac:	9e06      	ldr	r6, [sp, #24]
 80081ae:	9f08      	ldr	r7, [sp, #32]
 80081b0:	4645      	mov	r5, r8
 80081b2:	e74c      	b.n	800804e <_dtoa_r+0x76e>
 80081b4:	9a06      	ldr	r2, [sp, #24]
 80081b6:	e775      	b.n	80080a4 <_dtoa_r+0x7c4>
 80081b8:	9b05      	ldr	r3, [sp, #20]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	dc18      	bgt.n	80081f0 <_dtoa_r+0x910>
 80081be:	9b02      	ldr	r3, [sp, #8]
 80081c0:	b9b3      	cbnz	r3, 80081f0 <_dtoa_r+0x910>
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081c8:	b9a3      	cbnz	r3, 80081f4 <_dtoa_r+0x914>
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081d0:	0d1b      	lsrs	r3, r3, #20
 80081d2:	051b      	lsls	r3, r3, #20
 80081d4:	b12b      	cbz	r3, 80081e2 <_dtoa_r+0x902>
 80081d6:	9b04      	ldr	r3, [sp, #16]
 80081d8:	3301      	adds	r3, #1
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	f108 0801 	add.w	r8, r8, #1
 80081e0:	2301      	movs	r3, #1
 80081e2:	9306      	str	r3, [sp, #24]
 80081e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f47f af74 	bne.w	80080d4 <_dtoa_r+0x7f4>
 80081ec:	2001      	movs	r0, #1
 80081ee:	e779      	b.n	80080e4 <_dtoa_r+0x804>
 80081f0:	2300      	movs	r3, #0
 80081f2:	e7f6      	b.n	80081e2 <_dtoa_r+0x902>
 80081f4:	9b02      	ldr	r3, [sp, #8]
 80081f6:	e7f4      	b.n	80081e2 <_dtoa_r+0x902>
 80081f8:	d085      	beq.n	8008106 <_dtoa_r+0x826>
 80081fa:	4618      	mov	r0, r3
 80081fc:	301c      	adds	r0, #28
 80081fe:	e77d      	b.n	80080fc <_dtoa_r+0x81c>
 8008200:	40240000 	.word	0x40240000
 8008204:	9b01      	ldr	r3, [sp, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	dc38      	bgt.n	800827c <_dtoa_r+0x99c>
 800820a:	9b05      	ldr	r3, [sp, #20]
 800820c:	2b02      	cmp	r3, #2
 800820e:	dd35      	ble.n	800827c <_dtoa_r+0x99c>
 8008210:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008214:	f1b9 0f00 	cmp.w	r9, #0
 8008218:	d10d      	bne.n	8008236 <_dtoa_r+0x956>
 800821a:	4631      	mov	r1, r6
 800821c:	464b      	mov	r3, r9
 800821e:	2205      	movs	r2, #5
 8008220:	4620      	mov	r0, r4
 8008222:	f000 fd59 	bl	8008cd8 <__multadd>
 8008226:	4601      	mov	r1, r0
 8008228:	4606      	mov	r6, r0
 800822a:	4658      	mov	r0, fp
 800822c:	f000 ffba 	bl	80091a4 <__mcmp>
 8008230:	2800      	cmp	r0, #0
 8008232:	f73f adbd 	bgt.w	8007db0 <_dtoa_r+0x4d0>
 8008236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008238:	9d00      	ldr	r5, [sp, #0]
 800823a:	ea6f 0a03 	mvn.w	sl, r3
 800823e:	f04f 0800 	mov.w	r8, #0
 8008242:	4631      	mov	r1, r6
 8008244:	4620      	mov	r0, r4
 8008246:	f000 fd25 	bl	8008c94 <_Bfree>
 800824a:	2f00      	cmp	r7, #0
 800824c:	f43f aeb4 	beq.w	8007fb8 <_dtoa_r+0x6d8>
 8008250:	f1b8 0f00 	cmp.w	r8, #0
 8008254:	d005      	beq.n	8008262 <_dtoa_r+0x982>
 8008256:	45b8      	cmp	r8, r7
 8008258:	d003      	beq.n	8008262 <_dtoa_r+0x982>
 800825a:	4641      	mov	r1, r8
 800825c:	4620      	mov	r0, r4
 800825e:	f000 fd19 	bl	8008c94 <_Bfree>
 8008262:	4639      	mov	r1, r7
 8008264:	4620      	mov	r0, r4
 8008266:	f000 fd15 	bl	8008c94 <_Bfree>
 800826a:	e6a5      	b.n	8007fb8 <_dtoa_r+0x6d8>
 800826c:	2600      	movs	r6, #0
 800826e:	4637      	mov	r7, r6
 8008270:	e7e1      	b.n	8008236 <_dtoa_r+0x956>
 8008272:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008274:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008278:	4637      	mov	r7, r6
 800827a:	e599      	b.n	8007db0 <_dtoa_r+0x4d0>
 800827c:	9b08      	ldr	r3, [sp, #32]
 800827e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 80fd 	beq.w	8008482 <_dtoa_r+0xba2>
 8008288:	2d00      	cmp	r5, #0
 800828a:	dd05      	ble.n	8008298 <_dtoa_r+0x9b8>
 800828c:	4639      	mov	r1, r7
 800828e:	462a      	mov	r2, r5
 8008290:	4620      	mov	r0, r4
 8008292:	f000 ff1b 	bl	80090cc <__lshift>
 8008296:	4607      	mov	r7, r0
 8008298:	9b06      	ldr	r3, [sp, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d05c      	beq.n	8008358 <_dtoa_r+0xa78>
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 fcb7 	bl	8008c14 <_Balloc>
 80082a6:	4605      	mov	r5, r0
 80082a8:	b928      	cbnz	r0, 80082b6 <_dtoa_r+0x9d6>
 80082aa:	4b80      	ldr	r3, [pc, #512]	; (80084ac <_dtoa_r+0xbcc>)
 80082ac:	4602      	mov	r2, r0
 80082ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80082b2:	f7ff bb2e 	b.w	8007912 <_dtoa_r+0x32>
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	3202      	adds	r2, #2
 80082ba:	0092      	lsls	r2, r2, #2
 80082bc:	f107 010c 	add.w	r1, r7, #12
 80082c0:	300c      	adds	r0, #12
 80082c2:	f000 fc99 	bl	8008bf8 <memcpy>
 80082c6:	2201      	movs	r2, #1
 80082c8:	4629      	mov	r1, r5
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 fefe 	bl	80090cc <__lshift>
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	3301      	adds	r3, #1
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	9b00      	ldr	r3, [sp, #0]
 80082d8:	444b      	add	r3, r9
 80082da:	9307      	str	r3, [sp, #28]
 80082dc:	9b02      	ldr	r3, [sp, #8]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	46b8      	mov	r8, r7
 80082e4:	9306      	str	r3, [sp, #24]
 80082e6:	4607      	mov	r7, r0
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	4631      	mov	r1, r6
 80082ec:	3b01      	subs	r3, #1
 80082ee:	4658      	mov	r0, fp
 80082f0:	9302      	str	r3, [sp, #8]
 80082f2:	f7ff fa67 	bl	80077c4 <quorem>
 80082f6:	4603      	mov	r3, r0
 80082f8:	3330      	adds	r3, #48	; 0x30
 80082fa:	9004      	str	r0, [sp, #16]
 80082fc:	4641      	mov	r1, r8
 80082fe:	4658      	mov	r0, fp
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	f000 ff4f 	bl	80091a4 <__mcmp>
 8008306:	463a      	mov	r2, r7
 8008308:	4681      	mov	r9, r0
 800830a:	4631      	mov	r1, r6
 800830c:	4620      	mov	r0, r4
 800830e:	f000 ff65 	bl	80091dc <__mdiff>
 8008312:	68c2      	ldr	r2, [r0, #12]
 8008314:	9b08      	ldr	r3, [sp, #32]
 8008316:	4605      	mov	r5, r0
 8008318:	bb02      	cbnz	r2, 800835c <_dtoa_r+0xa7c>
 800831a:	4601      	mov	r1, r0
 800831c:	4658      	mov	r0, fp
 800831e:	f000 ff41 	bl	80091a4 <__mcmp>
 8008322:	9b08      	ldr	r3, [sp, #32]
 8008324:	4602      	mov	r2, r0
 8008326:	4629      	mov	r1, r5
 8008328:	4620      	mov	r0, r4
 800832a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800832e:	f000 fcb1 	bl	8008c94 <_Bfree>
 8008332:	9b05      	ldr	r3, [sp, #20]
 8008334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008336:	9d01      	ldr	r5, [sp, #4]
 8008338:	ea43 0102 	orr.w	r1, r3, r2
 800833c:	9b06      	ldr	r3, [sp, #24]
 800833e:	430b      	orrs	r3, r1
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	d10d      	bne.n	8008360 <_dtoa_r+0xa80>
 8008344:	2b39      	cmp	r3, #57	; 0x39
 8008346:	d029      	beq.n	800839c <_dtoa_r+0xabc>
 8008348:	f1b9 0f00 	cmp.w	r9, #0
 800834c:	dd01      	ble.n	8008352 <_dtoa_r+0xa72>
 800834e:	9b04      	ldr	r3, [sp, #16]
 8008350:	3331      	adds	r3, #49	; 0x31
 8008352:	9a02      	ldr	r2, [sp, #8]
 8008354:	7013      	strb	r3, [r2, #0]
 8008356:	e774      	b.n	8008242 <_dtoa_r+0x962>
 8008358:	4638      	mov	r0, r7
 800835a:	e7b9      	b.n	80082d0 <_dtoa_r+0x9f0>
 800835c:	2201      	movs	r2, #1
 800835e:	e7e2      	b.n	8008326 <_dtoa_r+0xa46>
 8008360:	f1b9 0f00 	cmp.w	r9, #0
 8008364:	db06      	blt.n	8008374 <_dtoa_r+0xa94>
 8008366:	9905      	ldr	r1, [sp, #20]
 8008368:	ea41 0909 	orr.w	r9, r1, r9
 800836c:	9906      	ldr	r1, [sp, #24]
 800836e:	ea59 0101 	orrs.w	r1, r9, r1
 8008372:	d120      	bne.n	80083b6 <_dtoa_r+0xad6>
 8008374:	2a00      	cmp	r2, #0
 8008376:	ddec      	ble.n	8008352 <_dtoa_r+0xa72>
 8008378:	4659      	mov	r1, fp
 800837a:	2201      	movs	r2, #1
 800837c:	4620      	mov	r0, r4
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	f000 fea4 	bl	80090cc <__lshift>
 8008384:	4631      	mov	r1, r6
 8008386:	4683      	mov	fp, r0
 8008388:	f000 ff0c 	bl	80091a4 <__mcmp>
 800838c:	2800      	cmp	r0, #0
 800838e:	9b01      	ldr	r3, [sp, #4]
 8008390:	dc02      	bgt.n	8008398 <_dtoa_r+0xab8>
 8008392:	d1de      	bne.n	8008352 <_dtoa_r+0xa72>
 8008394:	07da      	lsls	r2, r3, #31
 8008396:	d5dc      	bpl.n	8008352 <_dtoa_r+0xa72>
 8008398:	2b39      	cmp	r3, #57	; 0x39
 800839a:	d1d8      	bne.n	800834e <_dtoa_r+0xa6e>
 800839c:	9a02      	ldr	r2, [sp, #8]
 800839e:	2339      	movs	r3, #57	; 0x39
 80083a0:	7013      	strb	r3, [r2, #0]
 80083a2:	462b      	mov	r3, r5
 80083a4:	461d      	mov	r5, r3
 80083a6:	3b01      	subs	r3, #1
 80083a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80083ac:	2a39      	cmp	r2, #57	; 0x39
 80083ae:	d050      	beq.n	8008452 <_dtoa_r+0xb72>
 80083b0:	3201      	adds	r2, #1
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	e745      	b.n	8008242 <_dtoa_r+0x962>
 80083b6:	2a00      	cmp	r2, #0
 80083b8:	dd03      	ble.n	80083c2 <_dtoa_r+0xae2>
 80083ba:	2b39      	cmp	r3, #57	; 0x39
 80083bc:	d0ee      	beq.n	800839c <_dtoa_r+0xabc>
 80083be:	3301      	adds	r3, #1
 80083c0:	e7c7      	b.n	8008352 <_dtoa_r+0xa72>
 80083c2:	9a01      	ldr	r2, [sp, #4]
 80083c4:	9907      	ldr	r1, [sp, #28]
 80083c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80083ca:	428a      	cmp	r2, r1
 80083cc:	d02a      	beq.n	8008424 <_dtoa_r+0xb44>
 80083ce:	4659      	mov	r1, fp
 80083d0:	2300      	movs	r3, #0
 80083d2:	220a      	movs	r2, #10
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 fc7f 	bl	8008cd8 <__multadd>
 80083da:	45b8      	cmp	r8, r7
 80083dc:	4683      	mov	fp, r0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	f04f 020a 	mov.w	r2, #10
 80083e6:	4641      	mov	r1, r8
 80083e8:	4620      	mov	r0, r4
 80083ea:	d107      	bne.n	80083fc <_dtoa_r+0xb1c>
 80083ec:	f000 fc74 	bl	8008cd8 <__multadd>
 80083f0:	4680      	mov	r8, r0
 80083f2:	4607      	mov	r7, r0
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	3301      	adds	r3, #1
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	e775      	b.n	80082e8 <_dtoa_r+0xa08>
 80083fc:	f000 fc6c 	bl	8008cd8 <__multadd>
 8008400:	4639      	mov	r1, r7
 8008402:	4680      	mov	r8, r0
 8008404:	2300      	movs	r3, #0
 8008406:	220a      	movs	r2, #10
 8008408:	4620      	mov	r0, r4
 800840a:	f000 fc65 	bl	8008cd8 <__multadd>
 800840e:	4607      	mov	r7, r0
 8008410:	e7f0      	b.n	80083f4 <_dtoa_r+0xb14>
 8008412:	f1b9 0f00 	cmp.w	r9, #0
 8008416:	9a00      	ldr	r2, [sp, #0]
 8008418:	bfcc      	ite	gt
 800841a:	464d      	movgt	r5, r9
 800841c:	2501      	movle	r5, #1
 800841e:	4415      	add	r5, r2
 8008420:	f04f 0800 	mov.w	r8, #0
 8008424:	4659      	mov	r1, fp
 8008426:	2201      	movs	r2, #1
 8008428:	4620      	mov	r0, r4
 800842a:	9301      	str	r3, [sp, #4]
 800842c:	f000 fe4e 	bl	80090cc <__lshift>
 8008430:	4631      	mov	r1, r6
 8008432:	4683      	mov	fp, r0
 8008434:	f000 feb6 	bl	80091a4 <__mcmp>
 8008438:	2800      	cmp	r0, #0
 800843a:	dcb2      	bgt.n	80083a2 <_dtoa_r+0xac2>
 800843c:	d102      	bne.n	8008444 <_dtoa_r+0xb64>
 800843e:	9b01      	ldr	r3, [sp, #4]
 8008440:	07db      	lsls	r3, r3, #31
 8008442:	d4ae      	bmi.n	80083a2 <_dtoa_r+0xac2>
 8008444:	462b      	mov	r3, r5
 8008446:	461d      	mov	r5, r3
 8008448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800844c:	2a30      	cmp	r2, #48	; 0x30
 800844e:	d0fa      	beq.n	8008446 <_dtoa_r+0xb66>
 8008450:	e6f7      	b.n	8008242 <_dtoa_r+0x962>
 8008452:	9a00      	ldr	r2, [sp, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d1a5      	bne.n	80083a4 <_dtoa_r+0xac4>
 8008458:	f10a 0a01 	add.w	sl, sl, #1
 800845c:	2331      	movs	r3, #49	; 0x31
 800845e:	e779      	b.n	8008354 <_dtoa_r+0xa74>
 8008460:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <_dtoa_r+0xbd0>)
 8008462:	f7ff baaf 	b.w	80079c4 <_dtoa_r+0xe4>
 8008466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008468:	2b00      	cmp	r3, #0
 800846a:	f47f aa86 	bne.w	800797a <_dtoa_r+0x9a>
 800846e:	4b11      	ldr	r3, [pc, #68]	; (80084b4 <_dtoa_r+0xbd4>)
 8008470:	f7ff baa8 	b.w	80079c4 <_dtoa_r+0xe4>
 8008474:	f1b9 0f00 	cmp.w	r9, #0
 8008478:	dc03      	bgt.n	8008482 <_dtoa_r+0xba2>
 800847a:	9b05      	ldr	r3, [sp, #20]
 800847c:	2b02      	cmp	r3, #2
 800847e:	f73f aec9 	bgt.w	8008214 <_dtoa_r+0x934>
 8008482:	9d00      	ldr	r5, [sp, #0]
 8008484:	4631      	mov	r1, r6
 8008486:	4658      	mov	r0, fp
 8008488:	f7ff f99c 	bl	80077c4 <quorem>
 800848c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008490:	f805 3b01 	strb.w	r3, [r5], #1
 8008494:	9a00      	ldr	r2, [sp, #0]
 8008496:	1aaa      	subs	r2, r5, r2
 8008498:	4591      	cmp	r9, r2
 800849a:	ddba      	ble.n	8008412 <_dtoa_r+0xb32>
 800849c:	4659      	mov	r1, fp
 800849e:	2300      	movs	r3, #0
 80084a0:	220a      	movs	r2, #10
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 fc18 	bl	8008cd8 <__multadd>
 80084a8:	4683      	mov	fp, r0
 80084aa:	e7eb      	b.n	8008484 <_dtoa_r+0xba4>
 80084ac:	0801cf71 	.word	0x0801cf71
 80084b0:	0801ccd0 	.word	0x0801ccd0
 80084b4:	0801cf05 	.word	0x0801cf05

080084b8 <fiprintf>:
 80084b8:	b40e      	push	{r1, r2, r3}
 80084ba:	b503      	push	{r0, r1, lr}
 80084bc:	4601      	mov	r1, r0
 80084be:	ab03      	add	r3, sp, #12
 80084c0:	4805      	ldr	r0, [pc, #20]	; (80084d8 <fiprintf+0x20>)
 80084c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c6:	6800      	ldr	r0, [r0, #0]
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	f001 fa9d 	bl	8009a08 <_vfiprintf_r>
 80084ce:	b002      	add	sp, #8
 80084d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084d4:	b003      	add	sp, #12
 80084d6:	4770      	bx	lr
 80084d8:	2000000c 	.word	0x2000000c

080084dc <rshift>:
 80084dc:	6903      	ldr	r3, [r0, #16]
 80084de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80084e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80084ea:	f100 0414 	add.w	r4, r0, #20
 80084ee:	dd45      	ble.n	800857c <rshift+0xa0>
 80084f0:	f011 011f 	ands.w	r1, r1, #31
 80084f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80084f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80084fc:	d10c      	bne.n	8008518 <rshift+0x3c>
 80084fe:	f100 0710 	add.w	r7, r0, #16
 8008502:	4629      	mov	r1, r5
 8008504:	42b1      	cmp	r1, r6
 8008506:	d334      	bcc.n	8008572 <rshift+0x96>
 8008508:	1a9b      	subs	r3, r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	1eea      	subs	r2, r5, #3
 800850e:	4296      	cmp	r6, r2
 8008510:	bf38      	it	cc
 8008512:	2300      	movcc	r3, #0
 8008514:	4423      	add	r3, r4
 8008516:	e015      	b.n	8008544 <rshift+0x68>
 8008518:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800851c:	f1c1 0820 	rsb	r8, r1, #32
 8008520:	40cf      	lsrs	r7, r1
 8008522:	f105 0e04 	add.w	lr, r5, #4
 8008526:	46a1      	mov	r9, r4
 8008528:	4576      	cmp	r6, lr
 800852a:	46f4      	mov	ip, lr
 800852c:	d815      	bhi.n	800855a <rshift+0x7e>
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	009a      	lsls	r2, r3, #2
 8008532:	3a04      	subs	r2, #4
 8008534:	3501      	adds	r5, #1
 8008536:	42ae      	cmp	r6, r5
 8008538:	bf38      	it	cc
 800853a:	2200      	movcc	r2, #0
 800853c:	18a3      	adds	r3, r4, r2
 800853e:	50a7      	str	r7, [r4, r2]
 8008540:	b107      	cbz	r7, 8008544 <rshift+0x68>
 8008542:	3304      	adds	r3, #4
 8008544:	1b1a      	subs	r2, r3, r4
 8008546:	42a3      	cmp	r3, r4
 8008548:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800854c:	bf08      	it	eq
 800854e:	2300      	moveq	r3, #0
 8008550:	6102      	str	r2, [r0, #16]
 8008552:	bf08      	it	eq
 8008554:	6143      	streq	r3, [r0, #20]
 8008556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800855a:	f8dc c000 	ldr.w	ip, [ip]
 800855e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008562:	ea4c 0707 	orr.w	r7, ip, r7
 8008566:	f849 7b04 	str.w	r7, [r9], #4
 800856a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800856e:	40cf      	lsrs	r7, r1
 8008570:	e7da      	b.n	8008528 <rshift+0x4c>
 8008572:	f851 cb04 	ldr.w	ip, [r1], #4
 8008576:	f847 cf04 	str.w	ip, [r7, #4]!
 800857a:	e7c3      	b.n	8008504 <rshift+0x28>
 800857c:	4623      	mov	r3, r4
 800857e:	e7e1      	b.n	8008544 <rshift+0x68>

08008580 <__hexdig_fun>:
 8008580:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008584:	2b09      	cmp	r3, #9
 8008586:	d802      	bhi.n	800858e <__hexdig_fun+0xe>
 8008588:	3820      	subs	r0, #32
 800858a:	b2c0      	uxtb	r0, r0
 800858c:	4770      	bx	lr
 800858e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008592:	2b05      	cmp	r3, #5
 8008594:	d801      	bhi.n	800859a <__hexdig_fun+0x1a>
 8008596:	3847      	subs	r0, #71	; 0x47
 8008598:	e7f7      	b.n	800858a <__hexdig_fun+0xa>
 800859a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800859e:	2b05      	cmp	r3, #5
 80085a0:	d801      	bhi.n	80085a6 <__hexdig_fun+0x26>
 80085a2:	3827      	subs	r0, #39	; 0x27
 80085a4:	e7f1      	b.n	800858a <__hexdig_fun+0xa>
 80085a6:	2000      	movs	r0, #0
 80085a8:	4770      	bx	lr
	...

080085ac <__gethex>:
 80085ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	ed2d 8b02 	vpush	{d8}
 80085b4:	b089      	sub	sp, #36	; 0x24
 80085b6:	ee08 0a10 	vmov	s16, r0
 80085ba:	9304      	str	r3, [sp, #16]
 80085bc:	4bbc      	ldr	r3, [pc, #752]	; (80088b0 <__gethex+0x304>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	4618      	mov	r0, r3
 80085c4:	468b      	mov	fp, r1
 80085c6:	4690      	mov	r8, r2
 80085c8:	f7f7 fe14 	bl	80001f4 <strlen>
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	f8db 2000 	ldr.w	r2, [fp]
 80085d2:	4403      	add	r3, r0
 80085d4:	4682      	mov	sl, r0
 80085d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80085da:	9305      	str	r3, [sp, #20]
 80085dc:	1c93      	adds	r3, r2, #2
 80085de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80085e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80085e6:	32fe      	adds	r2, #254	; 0xfe
 80085e8:	18d1      	adds	r1, r2, r3
 80085ea:	461f      	mov	r7, r3
 80085ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80085f0:	9100      	str	r1, [sp, #0]
 80085f2:	2830      	cmp	r0, #48	; 0x30
 80085f4:	d0f8      	beq.n	80085e8 <__gethex+0x3c>
 80085f6:	f7ff ffc3 	bl	8008580 <__hexdig_fun>
 80085fa:	4604      	mov	r4, r0
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d13a      	bne.n	8008676 <__gethex+0xca>
 8008600:	9901      	ldr	r1, [sp, #4]
 8008602:	4652      	mov	r2, sl
 8008604:	4638      	mov	r0, r7
 8008606:	f001 fb47 	bl	8009c98 <strncmp>
 800860a:	4605      	mov	r5, r0
 800860c:	2800      	cmp	r0, #0
 800860e:	d168      	bne.n	80086e2 <__gethex+0x136>
 8008610:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008614:	eb07 060a 	add.w	r6, r7, sl
 8008618:	f7ff ffb2 	bl	8008580 <__hexdig_fun>
 800861c:	2800      	cmp	r0, #0
 800861e:	d062      	beq.n	80086e6 <__gethex+0x13a>
 8008620:	4633      	mov	r3, r6
 8008622:	7818      	ldrb	r0, [r3, #0]
 8008624:	2830      	cmp	r0, #48	; 0x30
 8008626:	461f      	mov	r7, r3
 8008628:	f103 0301 	add.w	r3, r3, #1
 800862c:	d0f9      	beq.n	8008622 <__gethex+0x76>
 800862e:	f7ff ffa7 	bl	8008580 <__hexdig_fun>
 8008632:	2301      	movs	r3, #1
 8008634:	fab0 f480 	clz	r4, r0
 8008638:	0964      	lsrs	r4, r4, #5
 800863a:	4635      	mov	r5, r6
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	463a      	mov	r2, r7
 8008640:	4616      	mov	r6, r2
 8008642:	3201      	adds	r2, #1
 8008644:	7830      	ldrb	r0, [r6, #0]
 8008646:	f7ff ff9b 	bl	8008580 <__hexdig_fun>
 800864a:	2800      	cmp	r0, #0
 800864c:	d1f8      	bne.n	8008640 <__gethex+0x94>
 800864e:	9901      	ldr	r1, [sp, #4]
 8008650:	4652      	mov	r2, sl
 8008652:	4630      	mov	r0, r6
 8008654:	f001 fb20 	bl	8009c98 <strncmp>
 8008658:	b980      	cbnz	r0, 800867c <__gethex+0xd0>
 800865a:	b94d      	cbnz	r5, 8008670 <__gethex+0xc4>
 800865c:	eb06 050a 	add.w	r5, r6, sl
 8008660:	462a      	mov	r2, r5
 8008662:	4616      	mov	r6, r2
 8008664:	3201      	adds	r2, #1
 8008666:	7830      	ldrb	r0, [r6, #0]
 8008668:	f7ff ff8a 	bl	8008580 <__hexdig_fun>
 800866c:	2800      	cmp	r0, #0
 800866e:	d1f8      	bne.n	8008662 <__gethex+0xb6>
 8008670:	1bad      	subs	r5, r5, r6
 8008672:	00ad      	lsls	r5, r5, #2
 8008674:	e004      	b.n	8008680 <__gethex+0xd4>
 8008676:	2400      	movs	r4, #0
 8008678:	4625      	mov	r5, r4
 800867a:	e7e0      	b.n	800863e <__gethex+0x92>
 800867c:	2d00      	cmp	r5, #0
 800867e:	d1f7      	bne.n	8008670 <__gethex+0xc4>
 8008680:	7833      	ldrb	r3, [r6, #0]
 8008682:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008686:	2b50      	cmp	r3, #80	; 0x50
 8008688:	d13b      	bne.n	8008702 <__gethex+0x156>
 800868a:	7873      	ldrb	r3, [r6, #1]
 800868c:	2b2b      	cmp	r3, #43	; 0x2b
 800868e:	d02c      	beq.n	80086ea <__gethex+0x13e>
 8008690:	2b2d      	cmp	r3, #45	; 0x2d
 8008692:	d02e      	beq.n	80086f2 <__gethex+0x146>
 8008694:	1c71      	adds	r1, r6, #1
 8008696:	f04f 0900 	mov.w	r9, #0
 800869a:	7808      	ldrb	r0, [r1, #0]
 800869c:	f7ff ff70 	bl	8008580 <__hexdig_fun>
 80086a0:	1e43      	subs	r3, r0, #1
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b18      	cmp	r3, #24
 80086a6:	d82c      	bhi.n	8008702 <__gethex+0x156>
 80086a8:	f1a0 0210 	sub.w	r2, r0, #16
 80086ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80086b0:	f7ff ff66 	bl	8008580 <__hexdig_fun>
 80086b4:	1e43      	subs	r3, r0, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b18      	cmp	r3, #24
 80086ba:	d91d      	bls.n	80086f8 <__gethex+0x14c>
 80086bc:	f1b9 0f00 	cmp.w	r9, #0
 80086c0:	d000      	beq.n	80086c4 <__gethex+0x118>
 80086c2:	4252      	negs	r2, r2
 80086c4:	4415      	add	r5, r2
 80086c6:	f8cb 1000 	str.w	r1, [fp]
 80086ca:	b1e4      	cbz	r4, 8008706 <__gethex+0x15a>
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	bf14      	ite	ne
 80086d2:	2700      	movne	r7, #0
 80086d4:	2706      	moveq	r7, #6
 80086d6:	4638      	mov	r0, r7
 80086d8:	b009      	add	sp, #36	; 0x24
 80086da:	ecbd 8b02 	vpop	{d8}
 80086de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e2:	463e      	mov	r6, r7
 80086e4:	4625      	mov	r5, r4
 80086e6:	2401      	movs	r4, #1
 80086e8:	e7ca      	b.n	8008680 <__gethex+0xd4>
 80086ea:	f04f 0900 	mov.w	r9, #0
 80086ee:	1cb1      	adds	r1, r6, #2
 80086f0:	e7d3      	b.n	800869a <__gethex+0xee>
 80086f2:	f04f 0901 	mov.w	r9, #1
 80086f6:	e7fa      	b.n	80086ee <__gethex+0x142>
 80086f8:	230a      	movs	r3, #10
 80086fa:	fb03 0202 	mla	r2, r3, r2, r0
 80086fe:	3a10      	subs	r2, #16
 8008700:	e7d4      	b.n	80086ac <__gethex+0x100>
 8008702:	4631      	mov	r1, r6
 8008704:	e7df      	b.n	80086c6 <__gethex+0x11a>
 8008706:	1bf3      	subs	r3, r6, r7
 8008708:	3b01      	subs	r3, #1
 800870a:	4621      	mov	r1, r4
 800870c:	2b07      	cmp	r3, #7
 800870e:	dc0b      	bgt.n	8008728 <__gethex+0x17c>
 8008710:	ee18 0a10 	vmov	r0, s16
 8008714:	f000 fa7e 	bl	8008c14 <_Balloc>
 8008718:	4604      	mov	r4, r0
 800871a:	b940      	cbnz	r0, 800872e <__gethex+0x182>
 800871c:	4b65      	ldr	r3, [pc, #404]	; (80088b4 <__gethex+0x308>)
 800871e:	4602      	mov	r2, r0
 8008720:	21de      	movs	r1, #222	; 0xde
 8008722:	4865      	ldr	r0, [pc, #404]	; (80088b8 <__gethex+0x30c>)
 8008724:	f7ff f830 	bl	8007788 <__assert_func>
 8008728:	3101      	adds	r1, #1
 800872a:	105b      	asrs	r3, r3, #1
 800872c:	e7ee      	b.n	800870c <__gethex+0x160>
 800872e:	f100 0914 	add.w	r9, r0, #20
 8008732:	f04f 0b00 	mov.w	fp, #0
 8008736:	f1ca 0301 	rsb	r3, sl, #1
 800873a:	f8cd 9008 	str.w	r9, [sp, #8]
 800873e:	f8cd b000 	str.w	fp, [sp]
 8008742:	9306      	str	r3, [sp, #24]
 8008744:	42b7      	cmp	r7, r6
 8008746:	d340      	bcc.n	80087ca <__gethex+0x21e>
 8008748:	9802      	ldr	r0, [sp, #8]
 800874a:	9b00      	ldr	r3, [sp, #0]
 800874c:	f840 3b04 	str.w	r3, [r0], #4
 8008750:	eba0 0009 	sub.w	r0, r0, r9
 8008754:	1080      	asrs	r0, r0, #2
 8008756:	0146      	lsls	r6, r0, #5
 8008758:	6120      	str	r0, [r4, #16]
 800875a:	4618      	mov	r0, r3
 800875c:	f000 fb50 	bl	8008e00 <__hi0bits>
 8008760:	1a30      	subs	r0, r6, r0
 8008762:	f8d8 6000 	ldr.w	r6, [r8]
 8008766:	42b0      	cmp	r0, r6
 8008768:	dd63      	ble.n	8008832 <__gethex+0x286>
 800876a:	1b87      	subs	r7, r0, r6
 800876c:	4639      	mov	r1, r7
 800876e:	4620      	mov	r0, r4
 8008770:	f000 feea 	bl	8009548 <__any_on>
 8008774:	4682      	mov	sl, r0
 8008776:	b1a8      	cbz	r0, 80087a4 <__gethex+0x1f8>
 8008778:	1e7b      	subs	r3, r7, #1
 800877a:	1159      	asrs	r1, r3, #5
 800877c:	f003 021f 	and.w	r2, r3, #31
 8008780:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008784:	f04f 0a01 	mov.w	sl, #1
 8008788:	fa0a f202 	lsl.w	r2, sl, r2
 800878c:	420a      	tst	r2, r1
 800878e:	d009      	beq.n	80087a4 <__gethex+0x1f8>
 8008790:	4553      	cmp	r3, sl
 8008792:	dd05      	ble.n	80087a0 <__gethex+0x1f4>
 8008794:	1eb9      	subs	r1, r7, #2
 8008796:	4620      	mov	r0, r4
 8008798:	f000 fed6 	bl	8009548 <__any_on>
 800879c:	2800      	cmp	r0, #0
 800879e:	d145      	bne.n	800882c <__gethex+0x280>
 80087a0:	f04f 0a02 	mov.w	sl, #2
 80087a4:	4639      	mov	r1, r7
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7ff fe98 	bl	80084dc <rshift>
 80087ac:	443d      	add	r5, r7
 80087ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087b2:	42ab      	cmp	r3, r5
 80087b4:	da4c      	bge.n	8008850 <__gethex+0x2a4>
 80087b6:	ee18 0a10 	vmov	r0, s16
 80087ba:	4621      	mov	r1, r4
 80087bc:	f000 fa6a 	bl	8008c94 <_Bfree>
 80087c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087c2:	2300      	movs	r3, #0
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	27a3      	movs	r7, #163	; 0xa3
 80087c8:	e785      	b.n	80086d6 <__gethex+0x12a>
 80087ca:	1e73      	subs	r3, r6, #1
 80087cc:	9a05      	ldr	r2, [sp, #20]
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d019      	beq.n	800880c <__gethex+0x260>
 80087d8:	f1bb 0f20 	cmp.w	fp, #32
 80087dc:	d107      	bne.n	80087ee <__gethex+0x242>
 80087de:	9b02      	ldr	r3, [sp, #8]
 80087e0:	9a00      	ldr	r2, [sp, #0]
 80087e2:	f843 2b04 	str.w	r2, [r3], #4
 80087e6:	9302      	str	r3, [sp, #8]
 80087e8:	2300      	movs	r3, #0
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	469b      	mov	fp, r3
 80087ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80087f2:	f7ff fec5 	bl	8008580 <__hexdig_fun>
 80087f6:	9b00      	ldr	r3, [sp, #0]
 80087f8:	f000 000f 	and.w	r0, r0, #15
 80087fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8008800:	4303      	orrs	r3, r0
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	f10b 0b04 	add.w	fp, fp, #4
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	e00d      	b.n	8008828 <__gethex+0x27c>
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	9a06      	ldr	r2, [sp, #24]
 8008810:	4413      	add	r3, r2
 8008812:	42bb      	cmp	r3, r7
 8008814:	d3e0      	bcc.n	80087d8 <__gethex+0x22c>
 8008816:	4618      	mov	r0, r3
 8008818:	9901      	ldr	r1, [sp, #4]
 800881a:	9307      	str	r3, [sp, #28]
 800881c:	4652      	mov	r2, sl
 800881e:	f001 fa3b 	bl	8009c98 <strncmp>
 8008822:	9b07      	ldr	r3, [sp, #28]
 8008824:	2800      	cmp	r0, #0
 8008826:	d1d7      	bne.n	80087d8 <__gethex+0x22c>
 8008828:	461e      	mov	r6, r3
 800882a:	e78b      	b.n	8008744 <__gethex+0x198>
 800882c:	f04f 0a03 	mov.w	sl, #3
 8008830:	e7b8      	b.n	80087a4 <__gethex+0x1f8>
 8008832:	da0a      	bge.n	800884a <__gethex+0x29e>
 8008834:	1a37      	subs	r7, r6, r0
 8008836:	4621      	mov	r1, r4
 8008838:	ee18 0a10 	vmov	r0, s16
 800883c:	463a      	mov	r2, r7
 800883e:	f000 fc45 	bl	80090cc <__lshift>
 8008842:	1bed      	subs	r5, r5, r7
 8008844:	4604      	mov	r4, r0
 8008846:	f100 0914 	add.w	r9, r0, #20
 800884a:	f04f 0a00 	mov.w	sl, #0
 800884e:	e7ae      	b.n	80087ae <__gethex+0x202>
 8008850:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008854:	42a8      	cmp	r0, r5
 8008856:	dd72      	ble.n	800893e <__gethex+0x392>
 8008858:	1b45      	subs	r5, r0, r5
 800885a:	42ae      	cmp	r6, r5
 800885c:	dc36      	bgt.n	80088cc <__gethex+0x320>
 800885e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008862:	2b02      	cmp	r3, #2
 8008864:	d02a      	beq.n	80088bc <__gethex+0x310>
 8008866:	2b03      	cmp	r3, #3
 8008868:	d02c      	beq.n	80088c4 <__gethex+0x318>
 800886a:	2b01      	cmp	r3, #1
 800886c:	d115      	bne.n	800889a <__gethex+0x2ee>
 800886e:	42ae      	cmp	r6, r5
 8008870:	d113      	bne.n	800889a <__gethex+0x2ee>
 8008872:	2e01      	cmp	r6, #1
 8008874:	d10b      	bne.n	800888e <__gethex+0x2e2>
 8008876:	9a04      	ldr	r2, [sp, #16]
 8008878:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	2301      	movs	r3, #1
 8008880:	6123      	str	r3, [r4, #16]
 8008882:	f8c9 3000 	str.w	r3, [r9]
 8008886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008888:	2762      	movs	r7, #98	; 0x62
 800888a:	601c      	str	r4, [r3, #0]
 800888c:	e723      	b.n	80086d6 <__gethex+0x12a>
 800888e:	1e71      	subs	r1, r6, #1
 8008890:	4620      	mov	r0, r4
 8008892:	f000 fe59 	bl	8009548 <__any_on>
 8008896:	2800      	cmp	r0, #0
 8008898:	d1ed      	bne.n	8008876 <__gethex+0x2ca>
 800889a:	ee18 0a10 	vmov	r0, s16
 800889e:	4621      	mov	r1, r4
 80088a0:	f000 f9f8 	bl	8008c94 <_Bfree>
 80088a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088a6:	2300      	movs	r3, #0
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	2750      	movs	r7, #80	; 0x50
 80088ac:	e713      	b.n	80086d6 <__gethex+0x12a>
 80088ae:	bf00      	nop
 80088b0:	0801cfec 	.word	0x0801cfec
 80088b4:	0801cf71 	.word	0x0801cf71
 80088b8:	0801cf82 	.word	0x0801cf82
 80088bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1eb      	bne.n	800889a <__gethex+0x2ee>
 80088c2:	e7d8      	b.n	8008876 <__gethex+0x2ca>
 80088c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1d5      	bne.n	8008876 <__gethex+0x2ca>
 80088ca:	e7e6      	b.n	800889a <__gethex+0x2ee>
 80088cc:	1e6f      	subs	r7, r5, #1
 80088ce:	f1ba 0f00 	cmp.w	sl, #0
 80088d2:	d131      	bne.n	8008938 <__gethex+0x38c>
 80088d4:	b127      	cbz	r7, 80088e0 <__gethex+0x334>
 80088d6:	4639      	mov	r1, r7
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fe35 	bl	8009548 <__any_on>
 80088de:	4682      	mov	sl, r0
 80088e0:	117b      	asrs	r3, r7, #5
 80088e2:	2101      	movs	r1, #1
 80088e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80088e8:	f007 071f 	and.w	r7, r7, #31
 80088ec:	fa01 f707 	lsl.w	r7, r1, r7
 80088f0:	421f      	tst	r7, r3
 80088f2:	4629      	mov	r1, r5
 80088f4:	4620      	mov	r0, r4
 80088f6:	bf18      	it	ne
 80088f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80088fc:	1b76      	subs	r6, r6, r5
 80088fe:	f7ff fded 	bl	80084dc <rshift>
 8008902:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008906:	2702      	movs	r7, #2
 8008908:	f1ba 0f00 	cmp.w	sl, #0
 800890c:	d048      	beq.n	80089a0 <__gethex+0x3f4>
 800890e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008912:	2b02      	cmp	r3, #2
 8008914:	d015      	beq.n	8008942 <__gethex+0x396>
 8008916:	2b03      	cmp	r3, #3
 8008918:	d017      	beq.n	800894a <__gethex+0x39e>
 800891a:	2b01      	cmp	r3, #1
 800891c:	d109      	bne.n	8008932 <__gethex+0x386>
 800891e:	f01a 0f02 	tst.w	sl, #2
 8008922:	d006      	beq.n	8008932 <__gethex+0x386>
 8008924:	f8d9 0000 	ldr.w	r0, [r9]
 8008928:	ea4a 0a00 	orr.w	sl, sl, r0
 800892c:	f01a 0f01 	tst.w	sl, #1
 8008930:	d10e      	bne.n	8008950 <__gethex+0x3a4>
 8008932:	f047 0710 	orr.w	r7, r7, #16
 8008936:	e033      	b.n	80089a0 <__gethex+0x3f4>
 8008938:	f04f 0a01 	mov.w	sl, #1
 800893c:	e7d0      	b.n	80088e0 <__gethex+0x334>
 800893e:	2701      	movs	r7, #1
 8008940:	e7e2      	b.n	8008908 <__gethex+0x35c>
 8008942:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008944:	f1c3 0301 	rsb	r3, r3, #1
 8008948:	9315      	str	r3, [sp, #84]	; 0x54
 800894a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0f0      	beq.n	8008932 <__gethex+0x386>
 8008950:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008954:	f104 0314 	add.w	r3, r4, #20
 8008958:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800895c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008960:	f04f 0c00 	mov.w	ip, #0
 8008964:	4618      	mov	r0, r3
 8008966:	f853 2b04 	ldr.w	r2, [r3], #4
 800896a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800896e:	d01c      	beq.n	80089aa <__gethex+0x3fe>
 8008970:	3201      	adds	r2, #1
 8008972:	6002      	str	r2, [r0, #0]
 8008974:	2f02      	cmp	r7, #2
 8008976:	f104 0314 	add.w	r3, r4, #20
 800897a:	d13f      	bne.n	80089fc <__gethex+0x450>
 800897c:	f8d8 2000 	ldr.w	r2, [r8]
 8008980:	3a01      	subs	r2, #1
 8008982:	42b2      	cmp	r2, r6
 8008984:	d10a      	bne.n	800899c <__gethex+0x3f0>
 8008986:	1171      	asrs	r1, r6, #5
 8008988:	2201      	movs	r2, #1
 800898a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800898e:	f006 061f 	and.w	r6, r6, #31
 8008992:	fa02 f606 	lsl.w	r6, r2, r6
 8008996:	421e      	tst	r6, r3
 8008998:	bf18      	it	ne
 800899a:	4617      	movne	r7, r2
 800899c:	f047 0720 	orr.w	r7, r7, #32
 80089a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089a2:	601c      	str	r4, [r3, #0]
 80089a4:	9b04      	ldr	r3, [sp, #16]
 80089a6:	601d      	str	r5, [r3, #0]
 80089a8:	e695      	b.n	80086d6 <__gethex+0x12a>
 80089aa:	4299      	cmp	r1, r3
 80089ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80089b0:	d8d8      	bhi.n	8008964 <__gethex+0x3b8>
 80089b2:	68a3      	ldr	r3, [r4, #8]
 80089b4:	459b      	cmp	fp, r3
 80089b6:	db19      	blt.n	80089ec <__gethex+0x440>
 80089b8:	6861      	ldr	r1, [r4, #4]
 80089ba:	ee18 0a10 	vmov	r0, s16
 80089be:	3101      	adds	r1, #1
 80089c0:	f000 f928 	bl	8008c14 <_Balloc>
 80089c4:	4681      	mov	r9, r0
 80089c6:	b918      	cbnz	r0, 80089d0 <__gethex+0x424>
 80089c8:	4b1a      	ldr	r3, [pc, #104]	; (8008a34 <__gethex+0x488>)
 80089ca:	4602      	mov	r2, r0
 80089cc:	2184      	movs	r1, #132	; 0x84
 80089ce:	e6a8      	b.n	8008722 <__gethex+0x176>
 80089d0:	6922      	ldr	r2, [r4, #16]
 80089d2:	3202      	adds	r2, #2
 80089d4:	f104 010c 	add.w	r1, r4, #12
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	300c      	adds	r0, #12
 80089dc:	f000 f90c 	bl	8008bf8 <memcpy>
 80089e0:	4621      	mov	r1, r4
 80089e2:	ee18 0a10 	vmov	r0, s16
 80089e6:	f000 f955 	bl	8008c94 <_Bfree>
 80089ea:	464c      	mov	r4, r9
 80089ec:	6923      	ldr	r3, [r4, #16]
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089f4:	6122      	str	r2, [r4, #16]
 80089f6:	2201      	movs	r2, #1
 80089f8:	615a      	str	r2, [r3, #20]
 80089fa:	e7bb      	b.n	8008974 <__gethex+0x3c8>
 80089fc:	6922      	ldr	r2, [r4, #16]
 80089fe:	455a      	cmp	r2, fp
 8008a00:	dd0b      	ble.n	8008a1a <__gethex+0x46e>
 8008a02:	2101      	movs	r1, #1
 8008a04:	4620      	mov	r0, r4
 8008a06:	f7ff fd69 	bl	80084dc <rshift>
 8008a0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a0e:	3501      	adds	r5, #1
 8008a10:	42ab      	cmp	r3, r5
 8008a12:	f6ff aed0 	blt.w	80087b6 <__gethex+0x20a>
 8008a16:	2701      	movs	r7, #1
 8008a18:	e7c0      	b.n	800899c <__gethex+0x3f0>
 8008a1a:	f016 061f 	ands.w	r6, r6, #31
 8008a1e:	d0fa      	beq.n	8008a16 <__gethex+0x46a>
 8008a20:	449a      	add	sl, r3
 8008a22:	f1c6 0620 	rsb	r6, r6, #32
 8008a26:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008a2a:	f000 f9e9 	bl	8008e00 <__hi0bits>
 8008a2e:	42b0      	cmp	r0, r6
 8008a30:	dbe7      	blt.n	8008a02 <__gethex+0x456>
 8008a32:	e7f0      	b.n	8008a16 <__gethex+0x46a>
 8008a34:	0801cf71 	.word	0x0801cf71

08008a38 <L_shift>:
 8008a38:	f1c2 0208 	rsb	r2, r2, #8
 8008a3c:	0092      	lsls	r2, r2, #2
 8008a3e:	b570      	push	{r4, r5, r6, lr}
 8008a40:	f1c2 0620 	rsb	r6, r2, #32
 8008a44:	6843      	ldr	r3, [r0, #4]
 8008a46:	6804      	ldr	r4, [r0, #0]
 8008a48:	fa03 f506 	lsl.w	r5, r3, r6
 8008a4c:	432c      	orrs	r4, r5
 8008a4e:	40d3      	lsrs	r3, r2
 8008a50:	6004      	str	r4, [r0, #0]
 8008a52:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a56:	4288      	cmp	r0, r1
 8008a58:	d3f4      	bcc.n	8008a44 <L_shift+0xc>
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}

08008a5c <__match>:
 8008a5c:	b530      	push	{r4, r5, lr}
 8008a5e:	6803      	ldr	r3, [r0, #0]
 8008a60:	3301      	adds	r3, #1
 8008a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a66:	b914      	cbnz	r4, 8008a6e <__match+0x12>
 8008a68:	6003      	str	r3, [r0, #0]
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	bd30      	pop	{r4, r5, pc}
 8008a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008a76:	2d19      	cmp	r5, #25
 8008a78:	bf98      	it	ls
 8008a7a:	3220      	addls	r2, #32
 8008a7c:	42a2      	cmp	r2, r4
 8008a7e:	d0f0      	beq.n	8008a62 <__match+0x6>
 8008a80:	2000      	movs	r0, #0
 8008a82:	e7f3      	b.n	8008a6c <__match+0x10>

08008a84 <__hexnan>:
 8008a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a88:	680b      	ldr	r3, [r1, #0]
 8008a8a:	6801      	ldr	r1, [r0, #0]
 8008a8c:	115e      	asrs	r6, r3, #5
 8008a8e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a92:	f013 031f 	ands.w	r3, r3, #31
 8008a96:	b087      	sub	sp, #28
 8008a98:	bf18      	it	ne
 8008a9a:	3604      	addne	r6, #4
 8008a9c:	2500      	movs	r5, #0
 8008a9e:	1f37      	subs	r7, r6, #4
 8008aa0:	4682      	mov	sl, r0
 8008aa2:	4690      	mov	r8, r2
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008aaa:	46b9      	mov	r9, r7
 8008aac:	463c      	mov	r4, r7
 8008aae:	9502      	str	r5, [sp, #8]
 8008ab0:	46ab      	mov	fp, r5
 8008ab2:	784a      	ldrb	r2, [r1, #1]
 8008ab4:	1c4b      	adds	r3, r1, #1
 8008ab6:	9303      	str	r3, [sp, #12]
 8008ab8:	b342      	cbz	r2, 8008b0c <__hexnan+0x88>
 8008aba:	4610      	mov	r0, r2
 8008abc:	9105      	str	r1, [sp, #20]
 8008abe:	9204      	str	r2, [sp, #16]
 8008ac0:	f7ff fd5e 	bl	8008580 <__hexdig_fun>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d14f      	bne.n	8008b68 <__hexnan+0xe4>
 8008ac8:	9a04      	ldr	r2, [sp, #16]
 8008aca:	9905      	ldr	r1, [sp, #20]
 8008acc:	2a20      	cmp	r2, #32
 8008ace:	d818      	bhi.n	8008b02 <__hexnan+0x7e>
 8008ad0:	9b02      	ldr	r3, [sp, #8]
 8008ad2:	459b      	cmp	fp, r3
 8008ad4:	dd13      	ble.n	8008afe <__hexnan+0x7a>
 8008ad6:	454c      	cmp	r4, r9
 8008ad8:	d206      	bcs.n	8008ae8 <__hexnan+0x64>
 8008ada:	2d07      	cmp	r5, #7
 8008adc:	dc04      	bgt.n	8008ae8 <__hexnan+0x64>
 8008ade:	462a      	mov	r2, r5
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f7ff ffa8 	bl	8008a38 <L_shift>
 8008ae8:	4544      	cmp	r4, r8
 8008aea:	d950      	bls.n	8008b8e <__hexnan+0x10a>
 8008aec:	2300      	movs	r3, #0
 8008aee:	f1a4 0904 	sub.w	r9, r4, #4
 8008af2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008af6:	f8cd b008 	str.w	fp, [sp, #8]
 8008afa:	464c      	mov	r4, r9
 8008afc:	461d      	mov	r5, r3
 8008afe:	9903      	ldr	r1, [sp, #12]
 8008b00:	e7d7      	b.n	8008ab2 <__hexnan+0x2e>
 8008b02:	2a29      	cmp	r2, #41	; 0x29
 8008b04:	d156      	bne.n	8008bb4 <__hexnan+0x130>
 8008b06:	3102      	adds	r1, #2
 8008b08:	f8ca 1000 	str.w	r1, [sl]
 8008b0c:	f1bb 0f00 	cmp.w	fp, #0
 8008b10:	d050      	beq.n	8008bb4 <__hexnan+0x130>
 8008b12:	454c      	cmp	r4, r9
 8008b14:	d206      	bcs.n	8008b24 <__hexnan+0xa0>
 8008b16:	2d07      	cmp	r5, #7
 8008b18:	dc04      	bgt.n	8008b24 <__hexnan+0xa0>
 8008b1a:	462a      	mov	r2, r5
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f7ff ff8a 	bl	8008a38 <L_shift>
 8008b24:	4544      	cmp	r4, r8
 8008b26:	d934      	bls.n	8008b92 <__hexnan+0x10e>
 8008b28:	f1a8 0204 	sub.w	r2, r8, #4
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b32:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b36:	429f      	cmp	r7, r3
 8008b38:	d2f9      	bcs.n	8008b2e <__hexnan+0xaa>
 8008b3a:	1b3b      	subs	r3, r7, r4
 8008b3c:	f023 0303 	bic.w	r3, r3, #3
 8008b40:	3304      	adds	r3, #4
 8008b42:	3401      	adds	r4, #1
 8008b44:	3e03      	subs	r6, #3
 8008b46:	42b4      	cmp	r4, r6
 8008b48:	bf88      	it	hi
 8008b4a:	2304      	movhi	r3, #4
 8008b4c:	4443      	add	r3, r8
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f843 2b04 	str.w	r2, [r3], #4
 8008b54:	429f      	cmp	r7, r3
 8008b56:	d2fb      	bcs.n	8008b50 <__hexnan+0xcc>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	b91b      	cbnz	r3, 8008b64 <__hexnan+0xe0>
 8008b5c:	4547      	cmp	r7, r8
 8008b5e:	d127      	bne.n	8008bb0 <__hexnan+0x12c>
 8008b60:	2301      	movs	r3, #1
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	2005      	movs	r0, #5
 8008b66:	e026      	b.n	8008bb6 <__hexnan+0x132>
 8008b68:	3501      	adds	r5, #1
 8008b6a:	2d08      	cmp	r5, #8
 8008b6c:	f10b 0b01 	add.w	fp, fp, #1
 8008b70:	dd06      	ble.n	8008b80 <__hexnan+0xfc>
 8008b72:	4544      	cmp	r4, r8
 8008b74:	d9c3      	bls.n	8008afe <__hexnan+0x7a>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b7c:	2501      	movs	r5, #1
 8008b7e:	3c04      	subs	r4, #4
 8008b80:	6822      	ldr	r2, [r4, #0]
 8008b82:	f000 000f 	and.w	r0, r0, #15
 8008b86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008b8a:	6022      	str	r2, [r4, #0]
 8008b8c:	e7b7      	b.n	8008afe <__hexnan+0x7a>
 8008b8e:	2508      	movs	r5, #8
 8008b90:	e7b5      	b.n	8008afe <__hexnan+0x7a>
 8008b92:	9b01      	ldr	r3, [sp, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0df      	beq.n	8008b58 <__hexnan+0xd4>
 8008b98:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9c:	f1c3 0320 	rsb	r3, r3, #32
 8008ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ba8:	401a      	ands	r2, r3
 8008baa:	f846 2c04 	str.w	r2, [r6, #-4]
 8008bae:	e7d3      	b.n	8008b58 <__hexnan+0xd4>
 8008bb0:	3f04      	subs	r7, #4
 8008bb2:	e7d1      	b.n	8008b58 <__hexnan+0xd4>
 8008bb4:	2004      	movs	r0, #4
 8008bb6:	b007      	add	sp, #28
 8008bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bbc <_localeconv_r>:
 8008bbc:	4800      	ldr	r0, [pc, #0]	; (8008bc0 <_localeconv_r+0x4>)
 8008bbe:	4770      	bx	lr
 8008bc0:	20000164 	.word	0x20000164

08008bc4 <malloc>:
 8008bc4:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <malloc+0xc>)
 8008bc6:	4601      	mov	r1, r0
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	f000 bd3d 	b.w	8009648 <_malloc_r>
 8008bce:	bf00      	nop
 8008bd0:	2000000c 	.word	0x2000000c

08008bd4 <__ascii_mbtowc>:
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	b901      	cbnz	r1, 8008bda <__ascii_mbtowc+0x6>
 8008bd8:	a901      	add	r1, sp, #4
 8008bda:	b142      	cbz	r2, 8008bee <__ascii_mbtowc+0x1a>
 8008bdc:	b14b      	cbz	r3, 8008bf2 <__ascii_mbtowc+0x1e>
 8008bde:	7813      	ldrb	r3, [r2, #0]
 8008be0:	600b      	str	r3, [r1, #0]
 8008be2:	7812      	ldrb	r2, [r2, #0]
 8008be4:	1e10      	subs	r0, r2, #0
 8008be6:	bf18      	it	ne
 8008be8:	2001      	movne	r0, #1
 8008bea:	b002      	add	sp, #8
 8008bec:	4770      	bx	lr
 8008bee:	4610      	mov	r0, r2
 8008bf0:	e7fb      	b.n	8008bea <__ascii_mbtowc+0x16>
 8008bf2:	f06f 0001 	mvn.w	r0, #1
 8008bf6:	e7f8      	b.n	8008bea <__ascii_mbtowc+0x16>

08008bf8 <memcpy>:
 8008bf8:	440a      	add	r2, r1
 8008bfa:	4291      	cmp	r1, r2
 8008bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c00:	d100      	bne.n	8008c04 <memcpy+0xc>
 8008c02:	4770      	bx	lr
 8008c04:	b510      	push	{r4, lr}
 8008c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c0e:	4291      	cmp	r1, r2
 8008c10:	d1f9      	bne.n	8008c06 <memcpy+0xe>
 8008c12:	bd10      	pop	{r4, pc}

08008c14 <_Balloc>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c18:	4604      	mov	r4, r0
 8008c1a:	460d      	mov	r5, r1
 8008c1c:	b976      	cbnz	r6, 8008c3c <_Balloc+0x28>
 8008c1e:	2010      	movs	r0, #16
 8008c20:	f7ff ffd0 	bl	8008bc4 <malloc>
 8008c24:	4602      	mov	r2, r0
 8008c26:	6260      	str	r0, [r4, #36]	; 0x24
 8008c28:	b920      	cbnz	r0, 8008c34 <_Balloc+0x20>
 8008c2a:	4b18      	ldr	r3, [pc, #96]	; (8008c8c <_Balloc+0x78>)
 8008c2c:	4818      	ldr	r0, [pc, #96]	; (8008c90 <_Balloc+0x7c>)
 8008c2e:	2166      	movs	r1, #102	; 0x66
 8008c30:	f7fe fdaa 	bl	8007788 <__assert_func>
 8008c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c38:	6006      	str	r6, [r0, #0]
 8008c3a:	60c6      	str	r6, [r0, #12]
 8008c3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c3e:	68f3      	ldr	r3, [r6, #12]
 8008c40:	b183      	cbz	r3, 8008c64 <_Balloc+0x50>
 8008c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c4a:	b9b8      	cbnz	r0, 8008c7c <_Balloc+0x68>
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	fa01 f605 	lsl.w	r6, r1, r5
 8008c52:	1d72      	adds	r2, r6, #5
 8008c54:	0092      	lsls	r2, r2, #2
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 fc97 	bl	800958a <_calloc_r>
 8008c5c:	b160      	cbz	r0, 8008c78 <_Balloc+0x64>
 8008c5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c62:	e00e      	b.n	8008c82 <_Balloc+0x6e>
 8008c64:	2221      	movs	r2, #33	; 0x21
 8008c66:	2104      	movs	r1, #4
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fc8e 	bl	800958a <_calloc_r>
 8008c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c70:	60f0      	str	r0, [r6, #12]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e4      	bne.n	8008c42 <_Balloc+0x2e>
 8008c78:	2000      	movs	r0, #0
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}
 8008c7c:	6802      	ldr	r2, [r0, #0]
 8008c7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c82:	2300      	movs	r3, #0
 8008c84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c88:	e7f7      	b.n	8008c7a <_Balloc+0x66>
 8008c8a:	bf00      	nop
 8008c8c:	0801cd50 	.word	0x0801cd50
 8008c90:	0801d000 	.word	0x0801d000

08008c94 <_Bfree>:
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c98:	4605      	mov	r5, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	b976      	cbnz	r6, 8008cbc <_Bfree+0x28>
 8008c9e:	2010      	movs	r0, #16
 8008ca0:	f7ff ff90 	bl	8008bc4 <malloc>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	6268      	str	r0, [r5, #36]	; 0x24
 8008ca8:	b920      	cbnz	r0, 8008cb4 <_Bfree+0x20>
 8008caa:	4b09      	ldr	r3, [pc, #36]	; (8008cd0 <_Bfree+0x3c>)
 8008cac:	4809      	ldr	r0, [pc, #36]	; (8008cd4 <_Bfree+0x40>)
 8008cae:	218a      	movs	r1, #138	; 0x8a
 8008cb0:	f7fe fd6a 	bl	8007788 <__assert_func>
 8008cb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cb8:	6006      	str	r6, [r0, #0]
 8008cba:	60c6      	str	r6, [r0, #12]
 8008cbc:	b13c      	cbz	r4, 8008cce <_Bfree+0x3a>
 8008cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cc0:	6862      	ldr	r2, [r4, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cc8:	6021      	str	r1, [r4, #0]
 8008cca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
 8008cd0:	0801cd50 	.word	0x0801cd50
 8008cd4:	0801d000 	.word	0x0801d000

08008cd8 <__multadd>:
 8008cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cdc:	690e      	ldr	r6, [r1, #16]
 8008cde:	4607      	mov	r7, r0
 8008ce0:	4698      	mov	r8, r3
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	f101 0014 	add.w	r0, r1, #20
 8008ce8:	2300      	movs	r3, #0
 8008cea:	6805      	ldr	r5, [r0, #0]
 8008cec:	b2a9      	uxth	r1, r5
 8008cee:	fb02 8101 	mla	r1, r2, r1, r8
 8008cf2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008cf6:	0c2d      	lsrs	r5, r5, #16
 8008cf8:	fb02 c505 	mla	r5, r2, r5, ip
 8008cfc:	b289      	uxth	r1, r1
 8008cfe:	3301      	adds	r3, #1
 8008d00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008d04:	429e      	cmp	r6, r3
 8008d06:	f840 1b04 	str.w	r1, [r0], #4
 8008d0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008d0e:	dcec      	bgt.n	8008cea <__multadd+0x12>
 8008d10:	f1b8 0f00 	cmp.w	r8, #0
 8008d14:	d022      	beq.n	8008d5c <__multadd+0x84>
 8008d16:	68a3      	ldr	r3, [r4, #8]
 8008d18:	42b3      	cmp	r3, r6
 8008d1a:	dc19      	bgt.n	8008d50 <__multadd+0x78>
 8008d1c:	6861      	ldr	r1, [r4, #4]
 8008d1e:	4638      	mov	r0, r7
 8008d20:	3101      	adds	r1, #1
 8008d22:	f7ff ff77 	bl	8008c14 <_Balloc>
 8008d26:	4605      	mov	r5, r0
 8008d28:	b928      	cbnz	r0, 8008d36 <__multadd+0x5e>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <__multadd+0x8c>)
 8008d2e:	480e      	ldr	r0, [pc, #56]	; (8008d68 <__multadd+0x90>)
 8008d30:	21b5      	movs	r1, #181	; 0xb5
 8008d32:	f7fe fd29 	bl	8007788 <__assert_func>
 8008d36:	6922      	ldr	r2, [r4, #16]
 8008d38:	3202      	adds	r2, #2
 8008d3a:	f104 010c 	add.w	r1, r4, #12
 8008d3e:	0092      	lsls	r2, r2, #2
 8008d40:	300c      	adds	r0, #12
 8008d42:	f7ff ff59 	bl	8008bf8 <memcpy>
 8008d46:	4621      	mov	r1, r4
 8008d48:	4638      	mov	r0, r7
 8008d4a:	f7ff ffa3 	bl	8008c94 <_Bfree>
 8008d4e:	462c      	mov	r4, r5
 8008d50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008d54:	3601      	adds	r6, #1
 8008d56:	f8c3 8014 	str.w	r8, [r3, #20]
 8008d5a:	6126      	str	r6, [r4, #16]
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d62:	bf00      	nop
 8008d64:	0801cf71 	.word	0x0801cf71
 8008d68:	0801d000 	.word	0x0801d000

08008d6c <__s2b>:
 8008d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d70:	460c      	mov	r4, r1
 8008d72:	4615      	mov	r5, r2
 8008d74:	461f      	mov	r7, r3
 8008d76:	2209      	movs	r2, #9
 8008d78:	3308      	adds	r3, #8
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d80:	2100      	movs	r1, #0
 8008d82:	2201      	movs	r2, #1
 8008d84:	429a      	cmp	r2, r3
 8008d86:	db09      	blt.n	8008d9c <__s2b+0x30>
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f7ff ff43 	bl	8008c14 <_Balloc>
 8008d8e:	b940      	cbnz	r0, 8008da2 <__s2b+0x36>
 8008d90:	4602      	mov	r2, r0
 8008d92:	4b19      	ldr	r3, [pc, #100]	; (8008df8 <__s2b+0x8c>)
 8008d94:	4819      	ldr	r0, [pc, #100]	; (8008dfc <__s2b+0x90>)
 8008d96:	21ce      	movs	r1, #206	; 0xce
 8008d98:	f7fe fcf6 	bl	8007788 <__assert_func>
 8008d9c:	0052      	lsls	r2, r2, #1
 8008d9e:	3101      	adds	r1, #1
 8008da0:	e7f0      	b.n	8008d84 <__s2b+0x18>
 8008da2:	9b08      	ldr	r3, [sp, #32]
 8008da4:	6143      	str	r3, [r0, #20]
 8008da6:	2d09      	cmp	r5, #9
 8008da8:	f04f 0301 	mov.w	r3, #1
 8008dac:	6103      	str	r3, [r0, #16]
 8008dae:	dd16      	ble.n	8008dde <__s2b+0x72>
 8008db0:	f104 0909 	add.w	r9, r4, #9
 8008db4:	46c8      	mov	r8, r9
 8008db6:	442c      	add	r4, r5
 8008db8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008dbc:	4601      	mov	r1, r0
 8008dbe:	3b30      	subs	r3, #48	; 0x30
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7ff ff88 	bl	8008cd8 <__multadd>
 8008dc8:	45a0      	cmp	r8, r4
 8008dca:	d1f5      	bne.n	8008db8 <__s2b+0x4c>
 8008dcc:	f1a5 0408 	sub.w	r4, r5, #8
 8008dd0:	444c      	add	r4, r9
 8008dd2:	1b2d      	subs	r5, r5, r4
 8008dd4:	1963      	adds	r3, r4, r5
 8008dd6:	42bb      	cmp	r3, r7
 8008dd8:	db04      	blt.n	8008de4 <__s2b+0x78>
 8008dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dde:	340a      	adds	r4, #10
 8008de0:	2509      	movs	r5, #9
 8008de2:	e7f6      	b.n	8008dd2 <__s2b+0x66>
 8008de4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008de8:	4601      	mov	r1, r0
 8008dea:	3b30      	subs	r3, #48	; 0x30
 8008dec:	220a      	movs	r2, #10
 8008dee:	4630      	mov	r0, r6
 8008df0:	f7ff ff72 	bl	8008cd8 <__multadd>
 8008df4:	e7ee      	b.n	8008dd4 <__s2b+0x68>
 8008df6:	bf00      	nop
 8008df8:	0801cf71 	.word	0x0801cf71
 8008dfc:	0801d000 	.word	0x0801d000

08008e00 <__hi0bits>:
 8008e00:	0c03      	lsrs	r3, r0, #16
 8008e02:	041b      	lsls	r3, r3, #16
 8008e04:	b9d3      	cbnz	r3, 8008e3c <__hi0bits+0x3c>
 8008e06:	0400      	lsls	r0, r0, #16
 8008e08:	2310      	movs	r3, #16
 8008e0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e0e:	bf04      	itt	eq
 8008e10:	0200      	lsleq	r0, r0, #8
 8008e12:	3308      	addeq	r3, #8
 8008e14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e18:	bf04      	itt	eq
 8008e1a:	0100      	lsleq	r0, r0, #4
 8008e1c:	3304      	addeq	r3, #4
 8008e1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e22:	bf04      	itt	eq
 8008e24:	0080      	lsleq	r0, r0, #2
 8008e26:	3302      	addeq	r3, #2
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	db05      	blt.n	8008e38 <__hi0bits+0x38>
 8008e2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e30:	f103 0301 	add.w	r3, r3, #1
 8008e34:	bf08      	it	eq
 8008e36:	2320      	moveq	r3, #32
 8008e38:	4618      	mov	r0, r3
 8008e3a:	4770      	bx	lr
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	e7e4      	b.n	8008e0a <__hi0bits+0xa>

08008e40 <__lo0bits>:
 8008e40:	6803      	ldr	r3, [r0, #0]
 8008e42:	f013 0207 	ands.w	r2, r3, #7
 8008e46:	4601      	mov	r1, r0
 8008e48:	d00b      	beq.n	8008e62 <__lo0bits+0x22>
 8008e4a:	07da      	lsls	r2, r3, #31
 8008e4c:	d424      	bmi.n	8008e98 <__lo0bits+0x58>
 8008e4e:	0798      	lsls	r0, r3, #30
 8008e50:	bf49      	itett	mi
 8008e52:	085b      	lsrmi	r3, r3, #1
 8008e54:	089b      	lsrpl	r3, r3, #2
 8008e56:	2001      	movmi	r0, #1
 8008e58:	600b      	strmi	r3, [r1, #0]
 8008e5a:	bf5c      	itt	pl
 8008e5c:	600b      	strpl	r3, [r1, #0]
 8008e5e:	2002      	movpl	r0, #2
 8008e60:	4770      	bx	lr
 8008e62:	b298      	uxth	r0, r3
 8008e64:	b9b0      	cbnz	r0, 8008e94 <__lo0bits+0x54>
 8008e66:	0c1b      	lsrs	r3, r3, #16
 8008e68:	2010      	movs	r0, #16
 8008e6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e6e:	bf04      	itt	eq
 8008e70:	0a1b      	lsreq	r3, r3, #8
 8008e72:	3008      	addeq	r0, #8
 8008e74:	071a      	lsls	r2, r3, #28
 8008e76:	bf04      	itt	eq
 8008e78:	091b      	lsreq	r3, r3, #4
 8008e7a:	3004      	addeq	r0, #4
 8008e7c:	079a      	lsls	r2, r3, #30
 8008e7e:	bf04      	itt	eq
 8008e80:	089b      	lsreq	r3, r3, #2
 8008e82:	3002      	addeq	r0, #2
 8008e84:	07da      	lsls	r2, r3, #31
 8008e86:	d403      	bmi.n	8008e90 <__lo0bits+0x50>
 8008e88:	085b      	lsrs	r3, r3, #1
 8008e8a:	f100 0001 	add.w	r0, r0, #1
 8008e8e:	d005      	beq.n	8008e9c <__lo0bits+0x5c>
 8008e90:	600b      	str	r3, [r1, #0]
 8008e92:	4770      	bx	lr
 8008e94:	4610      	mov	r0, r2
 8008e96:	e7e8      	b.n	8008e6a <__lo0bits+0x2a>
 8008e98:	2000      	movs	r0, #0
 8008e9a:	4770      	bx	lr
 8008e9c:	2020      	movs	r0, #32
 8008e9e:	4770      	bx	lr

08008ea0 <__i2b>:
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	f7ff feb5 	bl	8008c14 <_Balloc>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	b928      	cbnz	r0, 8008eba <__i2b+0x1a>
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <__i2b+0x24>)
 8008eb0:	4805      	ldr	r0, [pc, #20]	; (8008ec8 <__i2b+0x28>)
 8008eb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008eb6:	f7fe fc67 	bl	8007788 <__assert_func>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	6144      	str	r4, [r0, #20]
 8008ebe:	6103      	str	r3, [r0, #16]
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	bf00      	nop
 8008ec4:	0801cf71 	.word	0x0801cf71
 8008ec8:	0801d000 	.word	0x0801d000

08008ecc <__multiply>:
 8008ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	690a      	ldr	r2, [r1, #16]
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	bfb8      	it	lt
 8008eda:	460b      	movlt	r3, r1
 8008edc:	460d      	mov	r5, r1
 8008ede:	bfbc      	itt	lt
 8008ee0:	4625      	movlt	r5, r4
 8008ee2:	461c      	movlt	r4, r3
 8008ee4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008ee8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008eec:	68ab      	ldr	r3, [r5, #8]
 8008eee:	6869      	ldr	r1, [r5, #4]
 8008ef0:	eb0a 0709 	add.w	r7, sl, r9
 8008ef4:	42bb      	cmp	r3, r7
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	bfb8      	it	lt
 8008efa:	3101      	addlt	r1, #1
 8008efc:	f7ff fe8a 	bl	8008c14 <_Balloc>
 8008f00:	b930      	cbnz	r0, 8008f10 <__multiply+0x44>
 8008f02:	4602      	mov	r2, r0
 8008f04:	4b42      	ldr	r3, [pc, #264]	; (8009010 <__multiply+0x144>)
 8008f06:	4843      	ldr	r0, [pc, #268]	; (8009014 <__multiply+0x148>)
 8008f08:	f240 115d 	movw	r1, #349	; 0x15d
 8008f0c:	f7fe fc3c 	bl	8007788 <__assert_func>
 8008f10:	f100 0614 	add.w	r6, r0, #20
 8008f14:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008f18:	4633      	mov	r3, r6
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	4543      	cmp	r3, r8
 8008f1e:	d31e      	bcc.n	8008f5e <__multiply+0x92>
 8008f20:	f105 0c14 	add.w	ip, r5, #20
 8008f24:	f104 0314 	add.w	r3, r4, #20
 8008f28:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008f2c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008f30:	9202      	str	r2, [sp, #8]
 8008f32:	ebac 0205 	sub.w	r2, ip, r5
 8008f36:	3a15      	subs	r2, #21
 8008f38:	f022 0203 	bic.w	r2, r2, #3
 8008f3c:	3204      	adds	r2, #4
 8008f3e:	f105 0115 	add.w	r1, r5, #21
 8008f42:	458c      	cmp	ip, r1
 8008f44:	bf38      	it	cc
 8008f46:	2204      	movcc	r2, #4
 8008f48:	9201      	str	r2, [sp, #4]
 8008f4a:	9a02      	ldr	r2, [sp, #8]
 8008f4c:	9303      	str	r3, [sp, #12]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d808      	bhi.n	8008f64 <__multiply+0x98>
 8008f52:	2f00      	cmp	r7, #0
 8008f54:	dc55      	bgt.n	8009002 <__multiply+0x136>
 8008f56:	6107      	str	r7, [r0, #16]
 8008f58:	b005      	add	sp, #20
 8008f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5e:	f843 2b04 	str.w	r2, [r3], #4
 8008f62:	e7db      	b.n	8008f1c <__multiply+0x50>
 8008f64:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f68:	f1ba 0f00 	cmp.w	sl, #0
 8008f6c:	d020      	beq.n	8008fb0 <__multiply+0xe4>
 8008f6e:	f105 0e14 	add.w	lr, r5, #20
 8008f72:	46b1      	mov	r9, r6
 8008f74:	2200      	movs	r2, #0
 8008f76:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008f7a:	f8d9 b000 	ldr.w	fp, [r9]
 8008f7e:	b2a1      	uxth	r1, r4
 8008f80:	fa1f fb8b 	uxth.w	fp, fp
 8008f84:	fb0a b101 	mla	r1, sl, r1, fp
 8008f88:	4411      	add	r1, r2
 8008f8a:	f8d9 2000 	ldr.w	r2, [r9]
 8008f8e:	0c24      	lsrs	r4, r4, #16
 8008f90:	0c12      	lsrs	r2, r2, #16
 8008f92:	fb0a 2404 	mla	r4, sl, r4, r2
 8008f96:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008f9a:	b289      	uxth	r1, r1
 8008f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008fa0:	45f4      	cmp	ip, lr
 8008fa2:	f849 1b04 	str.w	r1, [r9], #4
 8008fa6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008faa:	d8e4      	bhi.n	8008f76 <__multiply+0xaa>
 8008fac:	9901      	ldr	r1, [sp, #4]
 8008fae:	5072      	str	r2, [r6, r1]
 8008fb0:	9a03      	ldr	r2, [sp, #12]
 8008fb2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	f1b9 0f00 	cmp.w	r9, #0
 8008fbc:	d01f      	beq.n	8008ffe <__multiply+0x132>
 8008fbe:	6834      	ldr	r4, [r6, #0]
 8008fc0:	f105 0114 	add.w	r1, r5, #20
 8008fc4:	46b6      	mov	lr, r6
 8008fc6:	f04f 0a00 	mov.w	sl, #0
 8008fca:	880a      	ldrh	r2, [r1, #0]
 8008fcc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008fd0:	fb09 b202 	mla	r2, r9, r2, fp
 8008fd4:	4492      	add	sl, r2
 8008fd6:	b2a4      	uxth	r4, r4
 8008fd8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008fdc:	f84e 4b04 	str.w	r4, [lr], #4
 8008fe0:	f851 4b04 	ldr.w	r4, [r1], #4
 8008fe4:	f8be 2000 	ldrh.w	r2, [lr]
 8008fe8:	0c24      	lsrs	r4, r4, #16
 8008fea:	fb09 2404 	mla	r4, r9, r4, r2
 8008fee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008ff2:	458c      	cmp	ip, r1
 8008ff4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ff8:	d8e7      	bhi.n	8008fca <__multiply+0xfe>
 8008ffa:	9a01      	ldr	r2, [sp, #4]
 8008ffc:	50b4      	str	r4, [r6, r2]
 8008ffe:	3604      	adds	r6, #4
 8009000:	e7a3      	b.n	8008f4a <__multiply+0x7e>
 8009002:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1a5      	bne.n	8008f56 <__multiply+0x8a>
 800900a:	3f01      	subs	r7, #1
 800900c:	e7a1      	b.n	8008f52 <__multiply+0x86>
 800900e:	bf00      	nop
 8009010:	0801cf71 	.word	0x0801cf71
 8009014:	0801d000 	.word	0x0801d000

08009018 <__pow5mult>:
 8009018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800901c:	4615      	mov	r5, r2
 800901e:	f012 0203 	ands.w	r2, r2, #3
 8009022:	4606      	mov	r6, r0
 8009024:	460f      	mov	r7, r1
 8009026:	d007      	beq.n	8009038 <__pow5mult+0x20>
 8009028:	4c25      	ldr	r4, [pc, #148]	; (80090c0 <__pow5mult+0xa8>)
 800902a:	3a01      	subs	r2, #1
 800902c:	2300      	movs	r3, #0
 800902e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009032:	f7ff fe51 	bl	8008cd8 <__multadd>
 8009036:	4607      	mov	r7, r0
 8009038:	10ad      	asrs	r5, r5, #2
 800903a:	d03d      	beq.n	80090b8 <__pow5mult+0xa0>
 800903c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800903e:	b97c      	cbnz	r4, 8009060 <__pow5mult+0x48>
 8009040:	2010      	movs	r0, #16
 8009042:	f7ff fdbf 	bl	8008bc4 <malloc>
 8009046:	4602      	mov	r2, r0
 8009048:	6270      	str	r0, [r6, #36]	; 0x24
 800904a:	b928      	cbnz	r0, 8009058 <__pow5mult+0x40>
 800904c:	4b1d      	ldr	r3, [pc, #116]	; (80090c4 <__pow5mult+0xac>)
 800904e:	481e      	ldr	r0, [pc, #120]	; (80090c8 <__pow5mult+0xb0>)
 8009050:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009054:	f7fe fb98 	bl	8007788 <__assert_func>
 8009058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800905c:	6004      	str	r4, [r0, #0]
 800905e:	60c4      	str	r4, [r0, #12]
 8009060:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009068:	b94c      	cbnz	r4, 800907e <__pow5mult+0x66>
 800906a:	f240 2171 	movw	r1, #625	; 0x271
 800906e:	4630      	mov	r0, r6
 8009070:	f7ff ff16 	bl	8008ea0 <__i2b>
 8009074:	2300      	movs	r3, #0
 8009076:	f8c8 0008 	str.w	r0, [r8, #8]
 800907a:	4604      	mov	r4, r0
 800907c:	6003      	str	r3, [r0, #0]
 800907e:	f04f 0900 	mov.w	r9, #0
 8009082:	07eb      	lsls	r3, r5, #31
 8009084:	d50a      	bpl.n	800909c <__pow5mult+0x84>
 8009086:	4639      	mov	r1, r7
 8009088:	4622      	mov	r2, r4
 800908a:	4630      	mov	r0, r6
 800908c:	f7ff ff1e 	bl	8008ecc <__multiply>
 8009090:	4639      	mov	r1, r7
 8009092:	4680      	mov	r8, r0
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff fdfd 	bl	8008c94 <_Bfree>
 800909a:	4647      	mov	r7, r8
 800909c:	106d      	asrs	r5, r5, #1
 800909e:	d00b      	beq.n	80090b8 <__pow5mult+0xa0>
 80090a0:	6820      	ldr	r0, [r4, #0]
 80090a2:	b938      	cbnz	r0, 80090b4 <__pow5mult+0x9c>
 80090a4:	4622      	mov	r2, r4
 80090a6:	4621      	mov	r1, r4
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7ff ff0f 	bl	8008ecc <__multiply>
 80090ae:	6020      	str	r0, [r4, #0]
 80090b0:	f8c0 9000 	str.w	r9, [r0]
 80090b4:	4604      	mov	r4, r0
 80090b6:	e7e4      	b.n	8009082 <__pow5mult+0x6a>
 80090b8:	4638      	mov	r0, r7
 80090ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090be:	bf00      	nop
 80090c0:	0801d150 	.word	0x0801d150
 80090c4:	0801cd50 	.word	0x0801cd50
 80090c8:	0801d000 	.word	0x0801d000

080090cc <__lshift>:
 80090cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	460c      	mov	r4, r1
 80090d2:	6849      	ldr	r1, [r1, #4]
 80090d4:	6923      	ldr	r3, [r4, #16]
 80090d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090da:	68a3      	ldr	r3, [r4, #8]
 80090dc:	4607      	mov	r7, r0
 80090de:	4691      	mov	r9, r2
 80090e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090e4:	f108 0601 	add.w	r6, r8, #1
 80090e8:	42b3      	cmp	r3, r6
 80090ea:	db0b      	blt.n	8009104 <__lshift+0x38>
 80090ec:	4638      	mov	r0, r7
 80090ee:	f7ff fd91 	bl	8008c14 <_Balloc>
 80090f2:	4605      	mov	r5, r0
 80090f4:	b948      	cbnz	r0, 800910a <__lshift+0x3e>
 80090f6:	4602      	mov	r2, r0
 80090f8:	4b28      	ldr	r3, [pc, #160]	; (800919c <__lshift+0xd0>)
 80090fa:	4829      	ldr	r0, [pc, #164]	; (80091a0 <__lshift+0xd4>)
 80090fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009100:	f7fe fb42 	bl	8007788 <__assert_func>
 8009104:	3101      	adds	r1, #1
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	e7ee      	b.n	80090e8 <__lshift+0x1c>
 800910a:	2300      	movs	r3, #0
 800910c:	f100 0114 	add.w	r1, r0, #20
 8009110:	f100 0210 	add.w	r2, r0, #16
 8009114:	4618      	mov	r0, r3
 8009116:	4553      	cmp	r3, sl
 8009118:	db33      	blt.n	8009182 <__lshift+0xb6>
 800911a:	6920      	ldr	r0, [r4, #16]
 800911c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009120:	f104 0314 	add.w	r3, r4, #20
 8009124:	f019 091f 	ands.w	r9, r9, #31
 8009128:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800912c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009130:	d02b      	beq.n	800918a <__lshift+0xbe>
 8009132:	f1c9 0e20 	rsb	lr, r9, #32
 8009136:	468a      	mov	sl, r1
 8009138:	2200      	movs	r2, #0
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	fa00 f009 	lsl.w	r0, r0, r9
 8009140:	4302      	orrs	r2, r0
 8009142:	f84a 2b04 	str.w	r2, [sl], #4
 8009146:	f853 2b04 	ldr.w	r2, [r3], #4
 800914a:	459c      	cmp	ip, r3
 800914c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009150:	d8f3      	bhi.n	800913a <__lshift+0x6e>
 8009152:	ebac 0304 	sub.w	r3, ip, r4
 8009156:	3b15      	subs	r3, #21
 8009158:	f023 0303 	bic.w	r3, r3, #3
 800915c:	3304      	adds	r3, #4
 800915e:	f104 0015 	add.w	r0, r4, #21
 8009162:	4584      	cmp	ip, r0
 8009164:	bf38      	it	cc
 8009166:	2304      	movcc	r3, #4
 8009168:	50ca      	str	r2, [r1, r3]
 800916a:	b10a      	cbz	r2, 8009170 <__lshift+0xa4>
 800916c:	f108 0602 	add.w	r6, r8, #2
 8009170:	3e01      	subs	r6, #1
 8009172:	4638      	mov	r0, r7
 8009174:	612e      	str	r6, [r5, #16]
 8009176:	4621      	mov	r1, r4
 8009178:	f7ff fd8c 	bl	8008c94 <_Bfree>
 800917c:	4628      	mov	r0, r5
 800917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009182:	f842 0f04 	str.w	r0, [r2, #4]!
 8009186:	3301      	adds	r3, #1
 8009188:	e7c5      	b.n	8009116 <__lshift+0x4a>
 800918a:	3904      	subs	r1, #4
 800918c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009190:	f841 2f04 	str.w	r2, [r1, #4]!
 8009194:	459c      	cmp	ip, r3
 8009196:	d8f9      	bhi.n	800918c <__lshift+0xc0>
 8009198:	e7ea      	b.n	8009170 <__lshift+0xa4>
 800919a:	bf00      	nop
 800919c:	0801cf71 	.word	0x0801cf71
 80091a0:	0801d000 	.word	0x0801d000

080091a4 <__mcmp>:
 80091a4:	b530      	push	{r4, r5, lr}
 80091a6:	6902      	ldr	r2, [r0, #16]
 80091a8:	690c      	ldr	r4, [r1, #16]
 80091aa:	1b12      	subs	r2, r2, r4
 80091ac:	d10e      	bne.n	80091cc <__mcmp+0x28>
 80091ae:	f100 0314 	add.w	r3, r0, #20
 80091b2:	3114      	adds	r1, #20
 80091b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091c4:	42a5      	cmp	r5, r4
 80091c6:	d003      	beq.n	80091d0 <__mcmp+0x2c>
 80091c8:	d305      	bcc.n	80091d6 <__mcmp+0x32>
 80091ca:	2201      	movs	r2, #1
 80091cc:	4610      	mov	r0, r2
 80091ce:	bd30      	pop	{r4, r5, pc}
 80091d0:	4283      	cmp	r3, r0
 80091d2:	d3f3      	bcc.n	80091bc <__mcmp+0x18>
 80091d4:	e7fa      	b.n	80091cc <__mcmp+0x28>
 80091d6:	f04f 32ff 	mov.w	r2, #4294967295
 80091da:	e7f7      	b.n	80091cc <__mcmp+0x28>

080091dc <__mdiff>:
 80091dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	460c      	mov	r4, r1
 80091e2:	4606      	mov	r6, r0
 80091e4:	4611      	mov	r1, r2
 80091e6:	4620      	mov	r0, r4
 80091e8:	4617      	mov	r7, r2
 80091ea:	f7ff ffdb 	bl	80091a4 <__mcmp>
 80091ee:	1e05      	subs	r5, r0, #0
 80091f0:	d110      	bne.n	8009214 <__mdiff+0x38>
 80091f2:	4629      	mov	r1, r5
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff fd0d 	bl	8008c14 <_Balloc>
 80091fa:	b930      	cbnz	r0, 800920a <__mdiff+0x2e>
 80091fc:	4b39      	ldr	r3, [pc, #228]	; (80092e4 <__mdiff+0x108>)
 80091fe:	4602      	mov	r2, r0
 8009200:	f240 2132 	movw	r1, #562	; 0x232
 8009204:	4838      	ldr	r0, [pc, #224]	; (80092e8 <__mdiff+0x10c>)
 8009206:	f7fe fabf 	bl	8007788 <__assert_func>
 800920a:	2301      	movs	r3, #1
 800920c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009210:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009214:	bfa4      	itt	ge
 8009216:	463b      	movge	r3, r7
 8009218:	4627      	movge	r7, r4
 800921a:	4630      	mov	r0, r6
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	bfa6      	itte	ge
 8009220:	461c      	movge	r4, r3
 8009222:	2500      	movge	r5, #0
 8009224:	2501      	movlt	r5, #1
 8009226:	f7ff fcf5 	bl	8008c14 <_Balloc>
 800922a:	b920      	cbnz	r0, 8009236 <__mdiff+0x5a>
 800922c:	4b2d      	ldr	r3, [pc, #180]	; (80092e4 <__mdiff+0x108>)
 800922e:	4602      	mov	r2, r0
 8009230:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009234:	e7e6      	b.n	8009204 <__mdiff+0x28>
 8009236:	693e      	ldr	r6, [r7, #16]
 8009238:	60c5      	str	r5, [r0, #12]
 800923a:	6925      	ldr	r5, [r4, #16]
 800923c:	f107 0114 	add.w	r1, r7, #20
 8009240:	f104 0914 	add.w	r9, r4, #20
 8009244:	f100 0e14 	add.w	lr, r0, #20
 8009248:	f107 0210 	add.w	r2, r7, #16
 800924c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009250:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009254:	46f2      	mov	sl, lr
 8009256:	2700      	movs	r7, #0
 8009258:	f859 3b04 	ldr.w	r3, [r9], #4
 800925c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009260:	fa1f f883 	uxth.w	r8, r3
 8009264:	fa17 f78b 	uxtah	r7, r7, fp
 8009268:	0c1b      	lsrs	r3, r3, #16
 800926a:	eba7 0808 	sub.w	r8, r7, r8
 800926e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009272:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009276:	fa1f f888 	uxth.w	r8, r8
 800927a:	141f      	asrs	r7, r3, #16
 800927c:	454d      	cmp	r5, r9
 800927e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009282:	f84a 3b04 	str.w	r3, [sl], #4
 8009286:	d8e7      	bhi.n	8009258 <__mdiff+0x7c>
 8009288:	1b2b      	subs	r3, r5, r4
 800928a:	3b15      	subs	r3, #21
 800928c:	f023 0303 	bic.w	r3, r3, #3
 8009290:	3304      	adds	r3, #4
 8009292:	3415      	adds	r4, #21
 8009294:	42a5      	cmp	r5, r4
 8009296:	bf38      	it	cc
 8009298:	2304      	movcc	r3, #4
 800929a:	4419      	add	r1, r3
 800929c:	4473      	add	r3, lr
 800929e:	469e      	mov	lr, r3
 80092a0:	460d      	mov	r5, r1
 80092a2:	4565      	cmp	r5, ip
 80092a4:	d30e      	bcc.n	80092c4 <__mdiff+0xe8>
 80092a6:	f10c 0203 	add.w	r2, ip, #3
 80092aa:	1a52      	subs	r2, r2, r1
 80092ac:	f022 0203 	bic.w	r2, r2, #3
 80092b0:	3903      	subs	r1, #3
 80092b2:	458c      	cmp	ip, r1
 80092b4:	bf38      	it	cc
 80092b6:	2200      	movcc	r2, #0
 80092b8:	441a      	add	r2, r3
 80092ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092be:	b17b      	cbz	r3, 80092e0 <__mdiff+0x104>
 80092c0:	6106      	str	r6, [r0, #16]
 80092c2:	e7a5      	b.n	8009210 <__mdiff+0x34>
 80092c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80092c8:	fa17 f488 	uxtah	r4, r7, r8
 80092cc:	1422      	asrs	r2, r4, #16
 80092ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80092d2:	b2a4      	uxth	r4, r4
 80092d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80092d8:	f84e 4b04 	str.w	r4, [lr], #4
 80092dc:	1417      	asrs	r7, r2, #16
 80092de:	e7e0      	b.n	80092a2 <__mdiff+0xc6>
 80092e0:	3e01      	subs	r6, #1
 80092e2:	e7ea      	b.n	80092ba <__mdiff+0xde>
 80092e4:	0801cf71 	.word	0x0801cf71
 80092e8:	0801d000 	.word	0x0801d000

080092ec <__ulp>:
 80092ec:	b082      	sub	sp, #8
 80092ee:	ed8d 0b00 	vstr	d0, [sp]
 80092f2:	9b01      	ldr	r3, [sp, #4]
 80092f4:	4912      	ldr	r1, [pc, #72]	; (8009340 <__ulp+0x54>)
 80092f6:	4019      	ands	r1, r3
 80092f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80092fc:	2900      	cmp	r1, #0
 80092fe:	dd05      	ble.n	800930c <__ulp+0x20>
 8009300:	2200      	movs	r2, #0
 8009302:	460b      	mov	r3, r1
 8009304:	ec43 2b10 	vmov	d0, r2, r3
 8009308:	b002      	add	sp, #8
 800930a:	4770      	bx	lr
 800930c:	4249      	negs	r1, r1
 800930e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009312:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009316:	f04f 0200 	mov.w	r2, #0
 800931a:	f04f 0300 	mov.w	r3, #0
 800931e:	da04      	bge.n	800932a <__ulp+0x3e>
 8009320:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009324:	fa41 f300 	asr.w	r3, r1, r0
 8009328:	e7ec      	b.n	8009304 <__ulp+0x18>
 800932a:	f1a0 0114 	sub.w	r1, r0, #20
 800932e:	291e      	cmp	r1, #30
 8009330:	bfda      	itte	le
 8009332:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009336:	fa20 f101 	lsrle.w	r1, r0, r1
 800933a:	2101      	movgt	r1, #1
 800933c:	460a      	mov	r2, r1
 800933e:	e7e1      	b.n	8009304 <__ulp+0x18>
 8009340:	7ff00000 	.word	0x7ff00000

08009344 <__b2d>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	6905      	ldr	r5, [r0, #16]
 8009348:	f100 0714 	add.w	r7, r0, #20
 800934c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009350:	1f2e      	subs	r6, r5, #4
 8009352:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009356:	4620      	mov	r0, r4
 8009358:	f7ff fd52 	bl	8008e00 <__hi0bits>
 800935c:	f1c0 0320 	rsb	r3, r0, #32
 8009360:	280a      	cmp	r0, #10
 8009362:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80093e0 <__b2d+0x9c>
 8009366:	600b      	str	r3, [r1, #0]
 8009368:	dc14      	bgt.n	8009394 <__b2d+0x50>
 800936a:	f1c0 0e0b 	rsb	lr, r0, #11
 800936e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009372:	42b7      	cmp	r7, r6
 8009374:	ea41 030c 	orr.w	r3, r1, ip
 8009378:	bf34      	ite	cc
 800937a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800937e:	2100      	movcs	r1, #0
 8009380:	3015      	adds	r0, #21
 8009382:	fa04 f000 	lsl.w	r0, r4, r0
 8009386:	fa21 f10e 	lsr.w	r1, r1, lr
 800938a:	ea40 0201 	orr.w	r2, r0, r1
 800938e:	ec43 2b10 	vmov	d0, r2, r3
 8009392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009394:	42b7      	cmp	r7, r6
 8009396:	bf3a      	itte	cc
 8009398:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800939c:	f1a5 0608 	subcc.w	r6, r5, #8
 80093a0:	2100      	movcs	r1, #0
 80093a2:	380b      	subs	r0, #11
 80093a4:	d017      	beq.n	80093d6 <__b2d+0x92>
 80093a6:	f1c0 0c20 	rsb	ip, r0, #32
 80093aa:	fa04 f500 	lsl.w	r5, r4, r0
 80093ae:	42be      	cmp	r6, r7
 80093b0:	fa21 f40c 	lsr.w	r4, r1, ip
 80093b4:	ea45 0504 	orr.w	r5, r5, r4
 80093b8:	bf8c      	ite	hi
 80093ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80093be:	2400      	movls	r4, #0
 80093c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80093c4:	fa01 f000 	lsl.w	r0, r1, r0
 80093c8:	fa24 f40c 	lsr.w	r4, r4, ip
 80093cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093d0:	ea40 0204 	orr.w	r2, r0, r4
 80093d4:	e7db      	b.n	800938e <__b2d+0x4a>
 80093d6:	ea44 030c 	orr.w	r3, r4, ip
 80093da:	460a      	mov	r2, r1
 80093dc:	e7d7      	b.n	800938e <__b2d+0x4a>
 80093de:	bf00      	nop
 80093e0:	3ff00000 	.word	0x3ff00000

080093e4 <__d2b>:
 80093e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093e8:	4689      	mov	r9, r1
 80093ea:	2101      	movs	r1, #1
 80093ec:	ec57 6b10 	vmov	r6, r7, d0
 80093f0:	4690      	mov	r8, r2
 80093f2:	f7ff fc0f 	bl	8008c14 <_Balloc>
 80093f6:	4604      	mov	r4, r0
 80093f8:	b930      	cbnz	r0, 8009408 <__d2b+0x24>
 80093fa:	4602      	mov	r2, r0
 80093fc:	4b25      	ldr	r3, [pc, #148]	; (8009494 <__d2b+0xb0>)
 80093fe:	4826      	ldr	r0, [pc, #152]	; (8009498 <__d2b+0xb4>)
 8009400:	f240 310a 	movw	r1, #778	; 0x30a
 8009404:	f7fe f9c0 	bl	8007788 <__assert_func>
 8009408:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800940c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009410:	bb35      	cbnz	r5, 8009460 <__d2b+0x7c>
 8009412:	2e00      	cmp	r6, #0
 8009414:	9301      	str	r3, [sp, #4]
 8009416:	d028      	beq.n	800946a <__d2b+0x86>
 8009418:	4668      	mov	r0, sp
 800941a:	9600      	str	r6, [sp, #0]
 800941c:	f7ff fd10 	bl	8008e40 <__lo0bits>
 8009420:	9900      	ldr	r1, [sp, #0]
 8009422:	b300      	cbz	r0, 8009466 <__d2b+0x82>
 8009424:	9a01      	ldr	r2, [sp, #4]
 8009426:	f1c0 0320 	rsb	r3, r0, #32
 800942a:	fa02 f303 	lsl.w	r3, r2, r3
 800942e:	430b      	orrs	r3, r1
 8009430:	40c2      	lsrs	r2, r0
 8009432:	6163      	str	r3, [r4, #20]
 8009434:	9201      	str	r2, [sp, #4]
 8009436:	9b01      	ldr	r3, [sp, #4]
 8009438:	61a3      	str	r3, [r4, #24]
 800943a:	2b00      	cmp	r3, #0
 800943c:	bf14      	ite	ne
 800943e:	2202      	movne	r2, #2
 8009440:	2201      	moveq	r2, #1
 8009442:	6122      	str	r2, [r4, #16]
 8009444:	b1d5      	cbz	r5, 800947c <__d2b+0x98>
 8009446:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800944a:	4405      	add	r5, r0
 800944c:	f8c9 5000 	str.w	r5, [r9]
 8009450:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009454:	f8c8 0000 	str.w	r0, [r8]
 8009458:	4620      	mov	r0, r4
 800945a:	b003      	add	sp, #12
 800945c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009464:	e7d5      	b.n	8009412 <__d2b+0x2e>
 8009466:	6161      	str	r1, [r4, #20]
 8009468:	e7e5      	b.n	8009436 <__d2b+0x52>
 800946a:	a801      	add	r0, sp, #4
 800946c:	f7ff fce8 	bl	8008e40 <__lo0bits>
 8009470:	9b01      	ldr	r3, [sp, #4]
 8009472:	6163      	str	r3, [r4, #20]
 8009474:	2201      	movs	r2, #1
 8009476:	6122      	str	r2, [r4, #16]
 8009478:	3020      	adds	r0, #32
 800947a:	e7e3      	b.n	8009444 <__d2b+0x60>
 800947c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009480:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009484:	f8c9 0000 	str.w	r0, [r9]
 8009488:	6918      	ldr	r0, [r3, #16]
 800948a:	f7ff fcb9 	bl	8008e00 <__hi0bits>
 800948e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009492:	e7df      	b.n	8009454 <__d2b+0x70>
 8009494:	0801cf71 	.word	0x0801cf71
 8009498:	0801d000 	.word	0x0801d000

0800949c <__ratio>:
 800949c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	4688      	mov	r8, r1
 80094a2:	4669      	mov	r1, sp
 80094a4:	4681      	mov	r9, r0
 80094a6:	f7ff ff4d 	bl	8009344 <__b2d>
 80094aa:	a901      	add	r1, sp, #4
 80094ac:	4640      	mov	r0, r8
 80094ae:	ec55 4b10 	vmov	r4, r5, d0
 80094b2:	f7ff ff47 	bl	8009344 <__b2d>
 80094b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80094be:	eba3 0c02 	sub.w	ip, r3, r2
 80094c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80094cc:	ec51 0b10 	vmov	r0, r1, d0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	bfd6      	itet	le
 80094d4:	460a      	movle	r2, r1
 80094d6:	462a      	movgt	r2, r5
 80094d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80094dc:	468b      	mov	fp, r1
 80094de:	462f      	mov	r7, r5
 80094e0:	bfd4      	ite	le
 80094e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80094e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80094ea:	4620      	mov	r0, r4
 80094ec:	ee10 2a10 	vmov	r2, s0
 80094f0:	465b      	mov	r3, fp
 80094f2:	4639      	mov	r1, r7
 80094f4:	f7f7 f9c2 	bl	800087c <__aeabi_ddiv>
 80094f8:	ec41 0b10 	vmov	d0, r0, r1
 80094fc:	b003      	add	sp, #12
 80094fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009502 <__copybits>:
 8009502:	3901      	subs	r1, #1
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	1149      	asrs	r1, r1, #5
 8009508:	6914      	ldr	r4, [r2, #16]
 800950a:	3101      	adds	r1, #1
 800950c:	f102 0314 	add.w	r3, r2, #20
 8009510:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009514:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009518:	1f05      	subs	r5, r0, #4
 800951a:	42a3      	cmp	r3, r4
 800951c:	d30c      	bcc.n	8009538 <__copybits+0x36>
 800951e:	1aa3      	subs	r3, r4, r2
 8009520:	3b11      	subs	r3, #17
 8009522:	f023 0303 	bic.w	r3, r3, #3
 8009526:	3211      	adds	r2, #17
 8009528:	42a2      	cmp	r2, r4
 800952a:	bf88      	it	hi
 800952c:	2300      	movhi	r3, #0
 800952e:	4418      	add	r0, r3
 8009530:	2300      	movs	r3, #0
 8009532:	4288      	cmp	r0, r1
 8009534:	d305      	bcc.n	8009542 <__copybits+0x40>
 8009536:	bd70      	pop	{r4, r5, r6, pc}
 8009538:	f853 6b04 	ldr.w	r6, [r3], #4
 800953c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009540:	e7eb      	b.n	800951a <__copybits+0x18>
 8009542:	f840 3b04 	str.w	r3, [r0], #4
 8009546:	e7f4      	b.n	8009532 <__copybits+0x30>

08009548 <__any_on>:
 8009548:	f100 0214 	add.w	r2, r0, #20
 800954c:	6900      	ldr	r0, [r0, #16]
 800954e:	114b      	asrs	r3, r1, #5
 8009550:	4298      	cmp	r0, r3
 8009552:	b510      	push	{r4, lr}
 8009554:	db11      	blt.n	800957a <__any_on+0x32>
 8009556:	dd0a      	ble.n	800956e <__any_on+0x26>
 8009558:	f011 011f 	ands.w	r1, r1, #31
 800955c:	d007      	beq.n	800956e <__any_on+0x26>
 800955e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009562:	fa24 f001 	lsr.w	r0, r4, r1
 8009566:	fa00 f101 	lsl.w	r1, r0, r1
 800956a:	428c      	cmp	r4, r1
 800956c:	d10b      	bne.n	8009586 <__any_on+0x3e>
 800956e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009572:	4293      	cmp	r3, r2
 8009574:	d803      	bhi.n	800957e <__any_on+0x36>
 8009576:	2000      	movs	r0, #0
 8009578:	bd10      	pop	{r4, pc}
 800957a:	4603      	mov	r3, r0
 800957c:	e7f7      	b.n	800956e <__any_on+0x26>
 800957e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009582:	2900      	cmp	r1, #0
 8009584:	d0f5      	beq.n	8009572 <__any_on+0x2a>
 8009586:	2001      	movs	r0, #1
 8009588:	e7f6      	b.n	8009578 <__any_on+0x30>

0800958a <_calloc_r>:
 800958a:	b513      	push	{r0, r1, r4, lr}
 800958c:	434a      	muls	r2, r1
 800958e:	4611      	mov	r1, r2
 8009590:	9201      	str	r2, [sp, #4]
 8009592:	f000 f859 	bl	8009648 <_malloc_r>
 8009596:	4604      	mov	r4, r0
 8009598:	b118      	cbz	r0, 80095a2 <_calloc_r+0x18>
 800959a:	9a01      	ldr	r2, [sp, #4]
 800959c:	2100      	movs	r1, #0
 800959e:	f7fc fb25 	bl	8005bec <memset>
 80095a2:	4620      	mov	r0, r4
 80095a4:	b002      	add	sp, #8
 80095a6:	bd10      	pop	{r4, pc}

080095a8 <_free_r>:
 80095a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095aa:	2900      	cmp	r1, #0
 80095ac:	d048      	beq.n	8009640 <_free_r+0x98>
 80095ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b2:	9001      	str	r0, [sp, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f1a1 0404 	sub.w	r4, r1, #4
 80095ba:	bfb8      	it	lt
 80095bc:	18e4      	addlt	r4, r4, r3
 80095be:	f000 fe8b 	bl	800a2d8 <__malloc_lock>
 80095c2:	4a20      	ldr	r2, [pc, #128]	; (8009644 <_free_r+0x9c>)
 80095c4:	9801      	ldr	r0, [sp, #4]
 80095c6:	6813      	ldr	r3, [r2, #0]
 80095c8:	4615      	mov	r5, r2
 80095ca:	b933      	cbnz	r3, 80095da <_free_r+0x32>
 80095cc:	6063      	str	r3, [r4, #4]
 80095ce:	6014      	str	r4, [r2, #0]
 80095d0:	b003      	add	sp, #12
 80095d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095d6:	f000 be85 	b.w	800a2e4 <__malloc_unlock>
 80095da:	42a3      	cmp	r3, r4
 80095dc:	d90b      	bls.n	80095f6 <_free_r+0x4e>
 80095de:	6821      	ldr	r1, [r4, #0]
 80095e0:	1862      	adds	r2, r4, r1
 80095e2:	4293      	cmp	r3, r2
 80095e4:	bf04      	itt	eq
 80095e6:	681a      	ldreq	r2, [r3, #0]
 80095e8:	685b      	ldreq	r3, [r3, #4]
 80095ea:	6063      	str	r3, [r4, #4]
 80095ec:	bf04      	itt	eq
 80095ee:	1852      	addeq	r2, r2, r1
 80095f0:	6022      	streq	r2, [r4, #0]
 80095f2:	602c      	str	r4, [r5, #0]
 80095f4:	e7ec      	b.n	80095d0 <_free_r+0x28>
 80095f6:	461a      	mov	r2, r3
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	b10b      	cbz	r3, 8009600 <_free_r+0x58>
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	d9fa      	bls.n	80095f6 <_free_r+0x4e>
 8009600:	6811      	ldr	r1, [r2, #0]
 8009602:	1855      	adds	r5, r2, r1
 8009604:	42a5      	cmp	r5, r4
 8009606:	d10b      	bne.n	8009620 <_free_r+0x78>
 8009608:	6824      	ldr	r4, [r4, #0]
 800960a:	4421      	add	r1, r4
 800960c:	1854      	adds	r4, r2, r1
 800960e:	42a3      	cmp	r3, r4
 8009610:	6011      	str	r1, [r2, #0]
 8009612:	d1dd      	bne.n	80095d0 <_free_r+0x28>
 8009614:	681c      	ldr	r4, [r3, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	6053      	str	r3, [r2, #4]
 800961a:	4421      	add	r1, r4
 800961c:	6011      	str	r1, [r2, #0]
 800961e:	e7d7      	b.n	80095d0 <_free_r+0x28>
 8009620:	d902      	bls.n	8009628 <_free_r+0x80>
 8009622:	230c      	movs	r3, #12
 8009624:	6003      	str	r3, [r0, #0]
 8009626:	e7d3      	b.n	80095d0 <_free_r+0x28>
 8009628:	6825      	ldr	r5, [r4, #0]
 800962a:	1961      	adds	r1, r4, r5
 800962c:	428b      	cmp	r3, r1
 800962e:	bf04      	itt	eq
 8009630:	6819      	ldreq	r1, [r3, #0]
 8009632:	685b      	ldreq	r3, [r3, #4]
 8009634:	6063      	str	r3, [r4, #4]
 8009636:	bf04      	itt	eq
 8009638:	1949      	addeq	r1, r1, r5
 800963a:	6021      	streq	r1, [r4, #0]
 800963c:	6054      	str	r4, [r2, #4]
 800963e:	e7c7      	b.n	80095d0 <_free_r+0x28>
 8009640:	b003      	add	sp, #12
 8009642:	bd30      	pop	{r4, r5, pc}
 8009644:	20000204 	.word	0x20000204

08009648 <_malloc_r>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	1ccd      	adds	r5, r1, #3
 800964c:	f025 0503 	bic.w	r5, r5, #3
 8009650:	3508      	adds	r5, #8
 8009652:	2d0c      	cmp	r5, #12
 8009654:	bf38      	it	cc
 8009656:	250c      	movcc	r5, #12
 8009658:	2d00      	cmp	r5, #0
 800965a:	4606      	mov	r6, r0
 800965c:	db01      	blt.n	8009662 <_malloc_r+0x1a>
 800965e:	42a9      	cmp	r1, r5
 8009660:	d903      	bls.n	800966a <_malloc_r+0x22>
 8009662:	230c      	movs	r3, #12
 8009664:	6033      	str	r3, [r6, #0]
 8009666:	2000      	movs	r0, #0
 8009668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800966a:	f000 fe35 	bl	800a2d8 <__malloc_lock>
 800966e:	4921      	ldr	r1, [pc, #132]	; (80096f4 <_malloc_r+0xac>)
 8009670:	680a      	ldr	r2, [r1, #0]
 8009672:	4614      	mov	r4, r2
 8009674:	b99c      	cbnz	r4, 800969e <_malloc_r+0x56>
 8009676:	4f20      	ldr	r7, [pc, #128]	; (80096f8 <_malloc_r+0xb0>)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	b923      	cbnz	r3, 8009686 <_malloc_r+0x3e>
 800967c:	4621      	mov	r1, r4
 800967e:	4630      	mov	r0, r6
 8009680:	f000 fafa 	bl	8009c78 <_sbrk_r>
 8009684:	6038      	str	r0, [r7, #0]
 8009686:	4629      	mov	r1, r5
 8009688:	4630      	mov	r0, r6
 800968a:	f000 faf5 	bl	8009c78 <_sbrk_r>
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	d123      	bne.n	80096da <_malloc_r+0x92>
 8009692:	230c      	movs	r3, #12
 8009694:	6033      	str	r3, [r6, #0]
 8009696:	4630      	mov	r0, r6
 8009698:	f000 fe24 	bl	800a2e4 <__malloc_unlock>
 800969c:	e7e3      	b.n	8009666 <_malloc_r+0x1e>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	1b5b      	subs	r3, r3, r5
 80096a2:	d417      	bmi.n	80096d4 <_malloc_r+0x8c>
 80096a4:	2b0b      	cmp	r3, #11
 80096a6:	d903      	bls.n	80096b0 <_malloc_r+0x68>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	441c      	add	r4, r3
 80096ac:	6025      	str	r5, [r4, #0]
 80096ae:	e004      	b.n	80096ba <_malloc_r+0x72>
 80096b0:	6863      	ldr	r3, [r4, #4]
 80096b2:	42a2      	cmp	r2, r4
 80096b4:	bf0c      	ite	eq
 80096b6:	600b      	streq	r3, [r1, #0]
 80096b8:	6053      	strne	r3, [r2, #4]
 80096ba:	4630      	mov	r0, r6
 80096bc:	f000 fe12 	bl	800a2e4 <__malloc_unlock>
 80096c0:	f104 000b 	add.w	r0, r4, #11
 80096c4:	1d23      	adds	r3, r4, #4
 80096c6:	f020 0007 	bic.w	r0, r0, #7
 80096ca:	1ac2      	subs	r2, r0, r3
 80096cc:	d0cc      	beq.n	8009668 <_malloc_r+0x20>
 80096ce:	1a1b      	subs	r3, r3, r0
 80096d0:	50a3      	str	r3, [r4, r2]
 80096d2:	e7c9      	b.n	8009668 <_malloc_r+0x20>
 80096d4:	4622      	mov	r2, r4
 80096d6:	6864      	ldr	r4, [r4, #4]
 80096d8:	e7cc      	b.n	8009674 <_malloc_r+0x2c>
 80096da:	1cc4      	adds	r4, r0, #3
 80096dc:	f024 0403 	bic.w	r4, r4, #3
 80096e0:	42a0      	cmp	r0, r4
 80096e2:	d0e3      	beq.n	80096ac <_malloc_r+0x64>
 80096e4:	1a21      	subs	r1, r4, r0
 80096e6:	4630      	mov	r0, r6
 80096e8:	f000 fac6 	bl	8009c78 <_sbrk_r>
 80096ec:	3001      	adds	r0, #1
 80096ee:	d1dd      	bne.n	80096ac <_malloc_r+0x64>
 80096f0:	e7cf      	b.n	8009692 <_malloc_r+0x4a>
 80096f2:	bf00      	nop
 80096f4:	20000204 	.word	0x20000204
 80096f8:	20000208 	.word	0x20000208

080096fc <__ssputs_r>:
 80096fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009700:	688e      	ldr	r6, [r1, #8]
 8009702:	429e      	cmp	r6, r3
 8009704:	4682      	mov	sl, r0
 8009706:	460c      	mov	r4, r1
 8009708:	4690      	mov	r8, r2
 800970a:	461f      	mov	r7, r3
 800970c:	d838      	bhi.n	8009780 <__ssputs_r+0x84>
 800970e:	898a      	ldrh	r2, [r1, #12]
 8009710:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009714:	d032      	beq.n	800977c <__ssputs_r+0x80>
 8009716:	6825      	ldr	r5, [r4, #0]
 8009718:	6909      	ldr	r1, [r1, #16]
 800971a:	eba5 0901 	sub.w	r9, r5, r1
 800971e:	6965      	ldr	r5, [r4, #20]
 8009720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009728:	3301      	adds	r3, #1
 800972a:	444b      	add	r3, r9
 800972c:	106d      	asrs	r5, r5, #1
 800972e:	429d      	cmp	r5, r3
 8009730:	bf38      	it	cc
 8009732:	461d      	movcc	r5, r3
 8009734:	0553      	lsls	r3, r2, #21
 8009736:	d531      	bpl.n	800979c <__ssputs_r+0xa0>
 8009738:	4629      	mov	r1, r5
 800973a:	f7ff ff85 	bl	8009648 <_malloc_r>
 800973e:	4606      	mov	r6, r0
 8009740:	b950      	cbnz	r0, 8009758 <__ssputs_r+0x5c>
 8009742:	230c      	movs	r3, #12
 8009744:	f8ca 3000 	str.w	r3, [sl]
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800974e:	81a3      	strh	r3, [r4, #12]
 8009750:	f04f 30ff 	mov.w	r0, #4294967295
 8009754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009758:	6921      	ldr	r1, [r4, #16]
 800975a:	464a      	mov	r2, r9
 800975c:	f7ff fa4c 	bl	8008bf8 <memcpy>
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800976a:	81a3      	strh	r3, [r4, #12]
 800976c:	6126      	str	r6, [r4, #16]
 800976e:	6165      	str	r5, [r4, #20]
 8009770:	444e      	add	r6, r9
 8009772:	eba5 0509 	sub.w	r5, r5, r9
 8009776:	6026      	str	r6, [r4, #0]
 8009778:	60a5      	str	r5, [r4, #8]
 800977a:	463e      	mov	r6, r7
 800977c:	42be      	cmp	r6, r7
 800977e:	d900      	bls.n	8009782 <__ssputs_r+0x86>
 8009780:	463e      	mov	r6, r7
 8009782:	4632      	mov	r2, r6
 8009784:	6820      	ldr	r0, [r4, #0]
 8009786:	4641      	mov	r1, r8
 8009788:	f000 fd8c 	bl	800a2a4 <memmove>
 800978c:	68a3      	ldr	r3, [r4, #8]
 800978e:	6822      	ldr	r2, [r4, #0]
 8009790:	1b9b      	subs	r3, r3, r6
 8009792:	4432      	add	r2, r6
 8009794:	60a3      	str	r3, [r4, #8]
 8009796:	6022      	str	r2, [r4, #0]
 8009798:	2000      	movs	r0, #0
 800979a:	e7db      	b.n	8009754 <__ssputs_r+0x58>
 800979c:	462a      	mov	r2, r5
 800979e:	f000 fda7 	bl	800a2f0 <_realloc_r>
 80097a2:	4606      	mov	r6, r0
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d1e1      	bne.n	800976c <__ssputs_r+0x70>
 80097a8:	6921      	ldr	r1, [r4, #16]
 80097aa:	4650      	mov	r0, sl
 80097ac:	f7ff fefc 	bl	80095a8 <_free_r>
 80097b0:	e7c7      	b.n	8009742 <__ssputs_r+0x46>
	...

080097b4 <_svfiprintf_r>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	4698      	mov	r8, r3
 80097ba:	898b      	ldrh	r3, [r1, #12]
 80097bc:	061b      	lsls	r3, r3, #24
 80097be:	b09d      	sub	sp, #116	; 0x74
 80097c0:	4607      	mov	r7, r0
 80097c2:	460d      	mov	r5, r1
 80097c4:	4614      	mov	r4, r2
 80097c6:	d50e      	bpl.n	80097e6 <_svfiprintf_r+0x32>
 80097c8:	690b      	ldr	r3, [r1, #16]
 80097ca:	b963      	cbnz	r3, 80097e6 <_svfiprintf_r+0x32>
 80097cc:	2140      	movs	r1, #64	; 0x40
 80097ce:	f7ff ff3b 	bl	8009648 <_malloc_r>
 80097d2:	6028      	str	r0, [r5, #0]
 80097d4:	6128      	str	r0, [r5, #16]
 80097d6:	b920      	cbnz	r0, 80097e2 <_svfiprintf_r+0x2e>
 80097d8:	230c      	movs	r3, #12
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	f04f 30ff 	mov.w	r0, #4294967295
 80097e0:	e0d1      	b.n	8009986 <_svfiprintf_r+0x1d2>
 80097e2:	2340      	movs	r3, #64	; 0x40
 80097e4:	616b      	str	r3, [r5, #20]
 80097e6:	2300      	movs	r3, #0
 80097e8:	9309      	str	r3, [sp, #36]	; 0x24
 80097ea:	2320      	movs	r3, #32
 80097ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80097f4:	2330      	movs	r3, #48	; 0x30
 80097f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099a0 <_svfiprintf_r+0x1ec>
 80097fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097fe:	f04f 0901 	mov.w	r9, #1
 8009802:	4623      	mov	r3, r4
 8009804:	469a      	mov	sl, r3
 8009806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800980a:	b10a      	cbz	r2, 8009810 <_svfiprintf_r+0x5c>
 800980c:	2a25      	cmp	r2, #37	; 0x25
 800980e:	d1f9      	bne.n	8009804 <_svfiprintf_r+0x50>
 8009810:	ebba 0b04 	subs.w	fp, sl, r4
 8009814:	d00b      	beq.n	800982e <_svfiprintf_r+0x7a>
 8009816:	465b      	mov	r3, fp
 8009818:	4622      	mov	r2, r4
 800981a:	4629      	mov	r1, r5
 800981c:	4638      	mov	r0, r7
 800981e:	f7ff ff6d 	bl	80096fc <__ssputs_r>
 8009822:	3001      	adds	r0, #1
 8009824:	f000 80aa 	beq.w	800997c <_svfiprintf_r+0x1c8>
 8009828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800982a:	445a      	add	r2, fp
 800982c:	9209      	str	r2, [sp, #36]	; 0x24
 800982e:	f89a 3000 	ldrb.w	r3, [sl]
 8009832:	2b00      	cmp	r3, #0
 8009834:	f000 80a2 	beq.w	800997c <_svfiprintf_r+0x1c8>
 8009838:	2300      	movs	r3, #0
 800983a:	f04f 32ff 	mov.w	r2, #4294967295
 800983e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009842:	f10a 0a01 	add.w	sl, sl, #1
 8009846:	9304      	str	r3, [sp, #16]
 8009848:	9307      	str	r3, [sp, #28]
 800984a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800984e:	931a      	str	r3, [sp, #104]	; 0x68
 8009850:	4654      	mov	r4, sl
 8009852:	2205      	movs	r2, #5
 8009854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009858:	4851      	ldr	r0, [pc, #324]	; (80099a0 <_svfiprintf_r+0x1ec>)
 800985a:	f7f6 fcd9 	bl	8000210 <memchr>
 800985e:	9a04      	ldr	r2, [sp, #16]
 8009860:	b9d8      	cbnz	r0, 800989a <_svfiprintf_r+0xe6>
 8009862:	06d0      	lsls	r0, r2, #27
 8009864:	bf44      	itt	mi
 8009866:	2320      	movmi	r3, #32
 8009868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800986c:	0711      	lsls	r1, r2, #28
 800986e:	bf44      	itt	mi
 8009870:	232b      	movmi	r3, #43	; 0x2b
 8009872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009876:	f89a 3000 	ldrb.w	r3, [sl]
 800987a:	2b2a      	cmp	r3, #42	; 0x2a
 800987c:	d015      	beq.n	80098aa <_svfiprintf_r+0xf6>
 800987e:	9a07      	ldr	r2, [sp, #28]
 8009880:	4654      	mov	r4, sl
 8009882:	2000      	movs	r0, #0
 8009884:	f04f 0c0a 	mov.w	ip, #10
 8009888:	4621      	mov	r1, r4
 800988a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800988e:	3b30      	subs	r3, #48	; 0x30
 8009890:	2b09      	cmp	r3, #9
 8009892:	d94e      	bls.n	8009932 <_svfiprintf_r+0x17e>
 8009894:	b1b0      	cbz	r0, 80098c4 <_svfiprintf_r+0x110>
 8009896:	9207      	str	r2, [sp, #28]
 8009898:	e014      	b.n	80098c4 <_svfiprintf_r+0x110>
 800989a:	eba0 0308 	sub.w	r3, r0, r8
 800989e:	fa09 f303 	lsl.w	r3, r9, r3
 80098a2:	4313      	orrs	r3, r2
 80098a4:	9304      	str	r3, [sp, #16]
 80098a6:	46a2      	mov	sl, r4
 80098a8:	e7d2      	b.n	8009850 <_svfiprintf_r+0x9c>
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	1d19      	adds	r1, r3, #4
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	9103      	str	r1, [sp, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	bfbb      	ittet	lt
 80098b6:	425b      	neglt	r3, r3
 80098b8:	f042 0202 	orrlt.w	r2, r2, #2
 80098bc:	9307      	strge	r3, [sp, #28]
 80098be:	9307      	strlt	r3, [sp, #28]
 80098c0:	bfb8      	it	lt
 80098c2:	9204      	strlt	r2, [sp, #16]
 80098c4:	7823      	ldrb	r3, [r4, #0]
 80098c6:	2b2e      	cmp	r3, #46	; 0x2e
 80098c8:	d10c      	bne.n	80098e4 <_svfiprintf_r+0x130>
 80098ca:	7863      	ldrb	r3, [r4, #1]
 80098cc:	2b2a      	cmp	r3, #42	; 0x2a
 80098ce:	d135      	bne.n	800993c <_svfiprintf_r+0x188>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	1d1a      	adds	r2, r3, #4
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	9203      	str	r2, [sp, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bfb8      	it	lt
 80098dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80098e0:	3402      	adds	r4, #2
 80098e2:	9305      	str	r3, [sp, #20]
 80098e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099b0 <_svfiprintf_r+0x1fc>
 80098e8:	7821      	ldrb	r1, [r4, #0]
 80098ea:	2203      	movs	r2, #3
 80098ec:	4650      	mov	r0, sl
 80098ee:	f7f6 fc8f 	bl	8000210 <memchr>
 80098f2:	b140      	cbz	r0, 8009906 <_svfiprintf_r+0x152>
 80098f4:	2340      	movs	r3, #64	; 0x40
 80098f6:	eba0 000a 	sub.w	r0, r0, sl
 80098fa:	fa03 f000 	lsl.w	r0, r3, r0
 80098fe:	9b04      	ldr	r3, [sp, #16]
 8009900:	4303      	orrs	r3, r0
 8009902:	3401      	adds	r4, #1
 8009904:	9304      	str	r3, [sp, #16]
 8009906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990a:	4826      	ldr	r0, [pc, #152]	; (80099a4 <_svfiprintf_r+0x1f0>)
 800990c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009910:	2206      	movs	r2, #6
 8009912:	f7f6 fc7d 	bl	8000210 <memchr>
 8009916:	2800      	cmp	r0, #0
 8009918:	d038      	beq.n	800998c <_svfiprintf_r+0x1d8>
 800991a:	4b23      	ldr	r3, [pc, #140]	; (80099a8 <_svfiprintf_r+0x1f4>)
 800991c:	bb1b      	cbnz	r3, 8009966 <_svfiprintf_r+0x1b2>
 800991e:	9b03      	ldr	r3, [sp, #12]
 8009920:	3307      	adds	r3, #7
 8009922:	f023 0307 	bic.w	r3, r3, #7
 8009926:	3308      	adds	r3, #8
 8009928:	9303      	str	r3, [sp, #12]
 800992a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800992c:	4433      	add	r3, r6
 800992e:	9309      	str	r3, [sp, #36]	; 0x24
 8009930:	e767      	b.n	8009802 <_svfiprintf_r+0x4e>
 8009932:	fb0c 3202 	mla	r2, ip, r2, r3
 8009936:	460c      	mov	r4, r1
 8009938:	2001      	movs	r0, #1
 800993a:	e7a5      	b.n	8009888 <_svfiprintf_r+0xd4>
 800993c:	2300      	movs	r3, #0
 800993e:	3401      	adds	r4, #1
 8009940:	9305      	str	r3, [sp, #20]
 8009942:	4619      	mov	r1, r3
 8009944:	f04f 0c0a 	mov.w	ip, #10
 8009948:	4620      	mov	r0, r4
 800994a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800994e:	3a30      	subs	r2, #48	; 0x30
 8009950:	2a09      	cmp	r2, #9
 8009952:	d903      	bls.n	800995c <_svfiprintf_r+0x1a8>
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0c5      	beq.n	80098e4 <_svfiprintf_r+0x130>
 8009958:	9105      	str	r1, [sp, #20]
 800995a:	e7c3      	b.n	80098e4 <_svfiprintf_r+0x130>
 800995c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009960:	4604      	mov	r4, r0
 8009962:	2301      	movs	r3, #1
 8009964:	e7f0      	b.n	8009948 <_svfiprintf_r+0x194>
 8009966:	ab03      	add	r3, sp, #12
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	462a      	mov	r2, r5
 800996c:	4b0f      	ldr	r3, [pc, #60]	; (80099ac <_svfiprintf_r+0x1f8>)
 800996e:	a904      	add	r1, sp, #16
 8009970:	4638      	mov	r0, r7
 8009972:	f7fc f9e3 	bl	8005d3c <_printf_float>
 8009976:	1c42      	adds	r2, r0, #1
 8009978:	4606      	mov	r6, r0
 800997a:	d1d6      	bne.n	800992a <_svfiprintf_r+0x176>
 800997c:	89ab      	ldrh	r3, [r5, #12]
 800997e:	065b      	lsls	r3, r3, #25
 8009980:	f53f af2c 	bmi.w	80097dc <_svfiprintf_r+0x28>
 8009984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009986:	b01d      	add	sp, #116	; 0x74
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998c:	ab03      	add	r3, sp, #12
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	462a      	mov	r2, r5
 8009992:	4b06      	ldr	r3, [pc, #24]	; (80099ac <_svfiprintf_r+0x1f8>)
 8009994:	a904      	add	r1, sp, #16
 8009996:	4638      	mov	r0, r7
 8009998:	f7fc fc74 	bl	8006284 <_printf_i>
 800999c:	e7eb      	b.n	8009976 <_svfiprintf_r+0x1c2>
 800999e:	bf00      	nop
 80099a0:	0801d15c 	.word	0x0801d15c
 80099a4:	0801d166 	.word	0x0801d166
 80099a8:	08005d3d 	.word	0x08005d3d
 80099ac:	080096fd 	.word	0x080096fd
 80099b0:	0801d162 	.word	0x0801d162

080099b4 <__sfputc_r>:
 80099b4:	6893      	ldr	r3, [r2, #8]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	b410      	push	{r4}
 80099bc:	6093      	str	r3, [r2, #8]
 80099be:	da08      	bge.n	80099d2 <__sfputc_r+0x1e>
 80099c0:	6994      	ldr	r4, [r2, #24]
 80099c2:	42a3      	cmp	r3, r4
 80099c4:	db01      	blt.n	80099ca <__sfputc_r+0x16>
 80099c6:	290a      	cmp	r1, #10
 80099c8:	d103      	bne.n	80099d2 <__sfputc_r+0x1e>
 80099ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099ce:	f000 b975 	b.w	8009cbc <__swbuf_r>
 80099d2:	6813      	ldr	r3, [r2, #0]
 80099d4:	1c58      	adds	r0, r3, #1
 80099d6:	6010      	str	r0, [r2, #0]
 80099d8:	7019      	strb	r1, [r3, #0]
 80099da:	4608      	mov	r0, r1
 80099dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <__sfputs_r>:
 80099e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e4:	4606      	mov	r6, r0
 80099e6:	460f      	mov	r7, r1
 80099e8:	4614      	mov	r4, r2
 80099ea:	18d5      	adds	r5, r2, r3
 80099ec:	42ac      	cmp	r4, r5
 80099ee:	d101      	bne.n	80099f4 <__sfputs_r+0x12>
 80099f0:	2000      	movs	r0, #0
 80099f2:	e007      	b.n	8009a04 <__sfputs_r+0x22>
 80099f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f8:	463a      	mov	r2, r7
 80099fa:	4630      	mov	r0, r6
 80099fc:	f7ff ffda 	bl	80099b4 <__sfputc_r>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d1f3      	bne.n	80099ec <__sfputs_r+0xa>
 8009a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a08 <_vfiprintf_r>:
 8009a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	460d      	mov	r5, r1
 8009a0e:	b09d      	sub	sp, #116	; 0x74
 8009a10:	4614      	mov	r4, r2
 8009a12:	4698      	mov	r8, r3
 8009a14:	4606      	mov	r6, r0
 8009a16:	b118      	cbz	r0, 8009a20 <_vfiprintf_r+0x18>
 8009a18:	6983      	ldr	r3, [r0, #24]
 8009a1a:	b90b      	cbnz	r3, 8009a20 <_vfiprintf_r+0x18>
 8009a1c:	f000 fb3e 	bl	800a09c <__sinit>
 8009a20:	4b89      	ldr	r3, [pc, #548]	; (8009c48 <_vfiprintf_r+0x240>)
 8009a22:	429d      	cmp	r5, r3
 8009a24:	d11b      	bne.n	8009a5e <_vfiprintf_r+0x56>
 8009a26:	6875      	ldr	r5, [r6, #4]
 8009a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a2a:	07d9      	lsls	r1, r3, #31
 8009a2c:	d405      	bmi.n	8009a3a <_vfiprintf_r+0x32>
 8009a2e:	89ab      	ldrh	r3, [r5, #12]
 8009a30:	059a      	lsls	r2, r3, #22
 8009a32:	d402      	bmi.n	8009a3a <_vfiprintf_r+0x32>
 8009a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a36:	f000 fbcf 	bl	800a1d8 <__retarget_lock_acquire_recursive>
 8009a3a:	89ab      	ldrh	r3, [r5, #12]
 8009a3c:	071b      	lsls	r3, r3, #28
 8009a3e:	d501      	bpl.n	8009a44 <_vfiprintf_r+0x3c>
 8009a40:	692b      	ldr	r3, [r5, #16]
 8009a42:	b9eb      	cbnz	r3, 8009a80 <_vfiprintf_r+0x78>
 8009a44:	4629      	mov	r1, r5
 8009a46:	4630      	mov	r0, r6
 8009a48:	f000 f998 	bl	8009d7c <__swsetup_r>
 8009a4c:	b1c0      	cbz	r0, 8009a80 <_vfiprintf_r+0x78>
 8009a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a50:	07dc      	lsls	r4, r3, #31
 8009a52:	d50e      	bpl.n	8009a72 <_vfiprintf_r+0x6a>
 8009a54:	f04f 30ff 	mov.w	r0, #4294967295
 8009a58:	b01d      	add	sp, #116	; 0x74
 8009a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5e:	4b7b      	ldr	r3, [pc, #492]	; (8009c4c <_vfiprintf_r+0x244>)
 8009a60:	429d      	cmp	r5, r3
 8009a62:	d101      	bne.n	8009a68 <_vfiprintf_r+0x60>
 8009a64:	68b5      	ldr	r5, [r6, #8]
 8009a66:	e7df      	b.n	8009a28 <_vfiprintf_r+0x20>
 8009a68:	4b79      	ldr	r3, [pc, #484]	; (8009c50 <_vfiprintf_r+0x248>)
 8009a6a:	429d      	cmp	r5, r3
 8009a6c:	bf08      	it	eq
 8009a6e:	68f5      	ldreq	r5, [r6, #12]
 8009a70:	e7da      	b.n	8009a28 <_vfiprintf_r+0x20>
 8009a72:	89ab      	ldrh	r3, [r5, #12]
 8009a74:	0598      	lsls	r0, r3, #22
 8009a76:	d4ed      	bmi.n	8009a54 <_vfiprintf_r+0x4c>
 8009a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a7a:	f000 fbae 	bl	800a1da <__retarget_lock_release_recursive>
 8009a7e:	e7e9      	b.n	8009a54 <_vfiprintf_r+0x4c>
 8009a80:	2300      	movs	r3, #0
 8009a82:	9309      	str	r3, [sp, #36]	; 0x24
 8009a84:	2320      	movs	r3, #32
 8009a86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a8e:	2330      	movs	r3, #48	; 0x30
 8009a90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c54 <_vfiprintf_r+0x24c>
 8009a94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a98:	f04f 0901 	mov.w	r9, #1
 8009a9c:	4623      	mov	r3, r4
 8009a9e:	469a      	mov	sl, r3
 8009aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa4:	b10a      	cbz	r2, 8009aaa <_vfiprintf_r+0xa2>
 8009aa6:	2a25      	cmp	r2, #37	; 0x25
 8009aa8:	d1f9      	bne.n	8009a9e <_vfiprintf_r+0x96>
 8009aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8009aae:	d00b      	beq.n	8009ac8 <_vfiprintf_r+0xc0>
 8009ab0:	465b      	mov	r3, fp
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f7ff ff93 	bl	80099e2 <__sfputs_r>
 8009abc:	3001      	adds	r0, #1
 8009abe:	f000 80aa 	beq.w	8009c16 <_vfiprintf_r+0x20e>
 8009ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ac4:	445a      	add	r2, fp
 8009ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 80a2 	beq.w	8009c16 <_vfiprintf_r+0x20e>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009adc:	f10a 0a01 	add.w	sl, sl, #1
 8009ae0:	9304      	str	r3, [sp, #16]
 8009ae2:	9307      	str	r3, [sp, #28]
 8009ae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ae8:	931a      	str	r3, [sp, #104]	; 0x68
 8009aea:	4654      	mov	r4, sl
 8009aec:	2205      	movs	r2, #5
 8009aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af2:	4858      	ldr	r0, [pc, #352]	; (8009c54 <_vfiprintf_r+0x24c>)
 8009af4:	f7f6 fb8c 	bl	8000210 <memchr>
 8009af8:	9a04      	ldr	r2, [sp, #16]
 8009afa:	b9d8      	cbnz	r0, 8009b34 <_vfiprintf_r+0x12c>
 8009afc:	06d1      	lsls	r1, r2, #27
 8009afe:	bf44      	itt	mi
 8009b00:	2320      	movmi	r3, #32
 8009b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b06:	0713      	lsls	r3, r2, #28
 8009b08:	bf44      	itt	mi
 8009b0a:	232b      	movmi	r3, #43	; 0x2b
 8009b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b10:	f89a 3000 	ldrb.w	r3, [sl]
 8009b14:	2b2a      	cmp	r3, #42	; 0x2a
 8009b16:	d015      	beq.n	8009b44 <_vfiprintf_r+0x13c>
 8009b18:	9a07      	ldr	r2, [sp, #28]
 8009b1a:	4654      	mov	r4, sl
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	f04f 0c0a 	mov.w	ip, #10
 8009b22:	4621      	mov	r1, r4
 8009b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b28:	3b30      	subs	r3, #48	; 0x30
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	d94e      	bls.n	8009bcc <_vfiprintf_r+0x1c4>
 8009b2e:	b1b0      	cbz	r0, 8009b5e <_vfiprintf_r+0x156>
 8009b30:	9207      	str	r2, [sp, #28]
 8009b32:	e014      	b.n	8009b5e <_vfiprintf_r+0x156>
 8009b34:	eba0 0308 	sub.w	r3, r0, r8
 8009b38:	fa09 f303 	lsl.w	r3, r9, r3
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	9304      	str	r3, [sp, #16]
 8009b40:	46a2      	mov	sl, r4
 8009b42:	e7d2      	b.n	8009aea <_vfiprintf_r+0xe2>
 8009b44:	9b03      	ldr	r3, [sp, #12]
 8009b46:	1d19      	adds	r1, r3, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	9103      	str	r1, [sp, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	bfbb      	ittet	lt
 8009b50:	425b      	neglt	r3, r3
 8009b52:	f042 0202 	orrlt.w	r2, r2, #2
 8009b56:	9307      	strge	r3, [sp, #28]
 8009b58:	9307      	strlt	r3, [sp, #28]
 8009b5a:	bfb8      	it	lt
 8009b5c:	9204      	strlt	r2, [sp, #16]
 8009b5e:	7823      	ldrb	r3, [r4, #0]
 8009b60:	2b2e      	cmp	r3, #46	; 0x2e
 8009b62:	d10c      	bne.n	8009b7e <_vfiprintf_r+0x176>
 8009b64:	7863      	ldrb	r3, [r4, #1]
 8009b66:	2b2a      	cmp	r3, #42	; 0x2a
 8009b68:	d135      	bne.n	8009bd6 <_vfiprintf_r+0x1ce>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	1d1a      	adds	r2, r3, #4
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	9203      	str	r2, [sp, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bfb8      	it	lt
 8009b76:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b7a:	3402      	adds	r4, #2
 8009b7c:	9305      	str	r3, [sp, #20]
 8009b7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c64 <_vfiprintf_r+0x25c>
 8009b82:	7821      	ldrb	r1, [r4, #0]
 8009b84:	2203      	movs	r2, #3
 8009b86:	4650      	mov	r0, sl
 8009b88:	f7f6 fb42 	bl	8000210 <memchr>
 8009b8c:	b140      	cbz	r0, 8009ba0 <_vfiprintf_r+0x198>
 8009b8e:	2340      	movs	r3, #64	; 0x40
 8009b90:	eba0 000a 	sub.w	r0, r0, sl
 8009b94:	fa03 f000 	lsl.w	r0, r3, r0
 8009b98:	9b04      	ldr	r3, [sp, #16]
 8009b9a:	4303      	orrs	r3, r0
 8009b9c:	3401      	adds	r4, #1
 8009b9e:	9304      	str	r3, [sp, #16]
 8009ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba4:	482c      	ldr	r0, [pc, #176]	; (8009c58 <_vfiprintf_r+0x250>)
 8009ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009baa:	2206      	movs	r2, #6
 8009bac:	f7f6 fb30 	bl	8000210 <memchr>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d03f      	beq.n	8009c34 <_vfiprintf_r+0x22c>
 8009bb4:	4b29      	ldr	r3, [pc, #164]	; (8009c5c <_vfiprintf_r+0x254>)
 8009bb6:	bb1b      	cbnz	r3, 8009c00 <_vfiprintf_r+0x1f8>
 8009bb8:	9b03      	ldr	r3, [sp, #12]
 8009bba:	3307      	adds	r3, #7
 8009bbc:	f023 0307 	bic.w	r3, r3, #7
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	9303      	str	r3, [sp, #12]
 8009bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc6:	443b      	add	r3, r7
 8009bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bca:	e767      	b.n	8009a9c <_vfiprintf_r+0x94>
 8009bcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	2001      	movs	r0, #1
 8009bd4:	e7a5      	b.n	8009b22 <_vfiprintf_r+0x11a>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	3401      	adds	r4, #1
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	f04f 0c0a 	mov.w	ip, #10
 8009be2:	4620      	mov	r0, r4
 8009be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be8:	3a30      	subs	r2, #48	; 0x30
 8009bea:	2a09      	cmp	r2, #9
 8009bec:	d903      	bls.n	8009bf6 <_vfiprintf_r+0x1ee>
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0c5      	beq.n	8009b7e <_vfiprintf_r+0x176>
 8009bf2:	9105      	str	r1, [sp, #20]
 8009bf4:	e7c3      	b.n	8009b7e <_vfiprintf_r+0x176>
 8009bf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e7f0      	b.n	8009be2 <_vfiprintf_r+0x1da>
 8009c00:	ab03      	add	r3, sp, #12
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	462a      	mov	r2, r5
 8009c06:	4b16      	ldr	r3, [pc, #88]	; (8009c60 <_vfiprintf_r+0x258>)
 8009c08:	a904      	add	r1, sp, #16
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7fc f896 	bl	8005d3c <_printf_float>
 8009c10:	4607      	mov	r7, r0
 8009c12:	1c78      	adds	r0, r7, #1
 8009c14:	d1d6      	bne.n	8009bc4 <_vfiprintf_r+0x1bc>
 8009c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c18:	07d9      	lsls	r1, r3, #31
 8009c1a:	d405      	bmi.n	8009c28 <_vfiprintf_r+0x220>
 8009c1c:	89ab      	ldrh	r3, [r5, #12]
 8009c1e:	059a      	lsls	r2, r3, #22
 8009c20:	d402      	bmi.n	8009c28 <_vfiprintf_r+0x220>
 8009c22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c24:	f000 fad9 	bl	800a1da <__retarget_lock_release_recursive>
 8009c28:	89ab      	ldrh	r3, [r5, #12]
 8009c2a:	065b      	lsls	r3, r3, #25
 8009c2c:	f53f af12 	bmi.w	8009a54 <_vfiprintf_r+0x4c>
 8009c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c32:	e711      	b.n	8009a58 <_vfiprintf_r+0x50>
 8009c34:	ab03      	add	r3, sp, #12
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	462a      	mov	r2, r5
 8009c3a:	4b09      	ldr	r3, [pc, #36]	; (8009c60 <_vfiprintf_r+0x258>)
 8009c3c:	a904      	add	r1, sp, #16
 8009c3e:	4630      	mov	r0, r6
 8009c40:	f7fc fb20 	bl	8006284 <_printf_i>
 8009c44:	e7e4      	b.n	8009c10 <_vfiprintf_r+0x208>
 8009c46:	bf00      	nop
 8009c48:	0801d190 	.word	0x0801d190
 8009c4c:	0801d1b0 	.word	0x0801d1b0
 8009c50:	0801d170 	.word	0x0801d170
 8009c54:	0801d15c 	.word	0x0801d15c
 8009c58:	0801d166 	.word	0x0801d166
 8009c5c:	08005d3d 	.word	0x08005d3d
 8009c60:	080099e3 	.word	0x080099e3
 8009c64:	0801d162 	.word	0x0801d162

08009c68 <nan>:
 8009c68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c70 <nan+0x8>
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	00000000 	.word	0x00000000
 8009c74:	7ff80000 	.word	0x7ff80000

08009c78 <_sbrk_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4d06      	ldr	r5, [pc, #24]	; (8009c94 <_sbrk_r+0x1c>)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4604      	mov	r4, r0
 8009c80:	4608      	mov	r0, r1
 8009c82:	602b      	str	r3, [r5, #0]
 8009c84:	f7f8 ff1e 	bl	8002ac4 <_sbrk>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_sbrk_r+0x1a>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_sbrk_r+0x1a>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	200004f0 	.word	0x200004f0

08009c98 <strncmp>:
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	b16a      	cbz	r2, 8009cb8 <strncmp+0x20>
 8009c9c:	3901      	subs	r1, #1
 8009c9e:	1884      	adds	r4, r0, r2
 8009ca0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009ca4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d103      	bne.n	8009cb4 <strncmp+0x1c>
 8009cac:	42a0      	cmp	r0, r4
 8009cae:	d001      	beq.n	8009cb4 <strncmp+0x1c>
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1f5      	bne.n	8009ca0 <strncmp+0x8>
 8009cb4:	1a98      	subs	r0, r3, r2
 8009cb6:	bd10      	pop	{r4, pc}
 8009cb8:	4610      	mov	r0, r2
 8009cba:	e7fc      	b.n	8009cb6 <strncmp+0x1e>

08009cbc <__swbuf_r>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	460e      	mov	r6, r1
 8009cc0:	4614      	mov	r4, r2
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	b118      	cbz	r0, 8009cce <__swbuf_r+0x12>
 8009cc6:	6983      	ldr	r3, [r0, #24]
 8009cc8:	b90b      	cbnz	r3, 8009cce <__swbuf_r+0x12>
 8009cca:	f000 f9e7 	bl	800a09c <__sinit>
 8009cce:	4b21      	ldr	r3, [pc, #132]	; (8009d54 <__swbuf_r+0x98>)
 8009cd0:	429c      	cmp	r4, r3
 8009cd2:	d12b      	bne.n	8009d2c <__swbuf_r+0x70>
 8009cd4:	686c      	ldr	r4, [r5, #4]
 8009cd6:	69a3      	ldr	r3, [r4, #24]
 8009cd8:	60a3      	str	r3, [r4, #8]
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	071a      	lsls	r2, r3, #28
 8009cde:	d52f      	bpl.n	8009d40 <__swbuf_r+0x84>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	b36b      	cbz	r3, 8009d40 <__swbuf_r+0x84>
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	6820      	ldr	r0, [r4, #0]
 8009ce8:	1ac0      	subs	r0, r0, r3
 8009cea:	6963      	ldr	r3, [r4, #20]
 8009cec:	b2f6      	uxtb	r6, r6
 8009cee:	4283      	cmp	r3, r0
 8009cf0:	4637      	mov	r7, r6
 8009cf2:	dc04      	bgt.n	8009cfe <__swbuf_r+0x42>
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f000 f93c 	bl	8009f74 <_fflush_r>
 8009cfc:	bb30      	cbnz	r0, 8009d4c <__swbuf_r+0x90>
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	60a3      	str	r3, [r4, #8]
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	6022      	str	r2, [r4, #0]
 8009d0a:	701e      	strb	r6, [r3, #0]
 8009d0c:	6963      	ldr	r3, [r4, #20]
 8009d0e:	3001      	adds	r0, #1
 8009d10:	4283      	cmp	r3, r0
 8009d12:	d004      	beq.n	8009d1e <__swbuf_r+0x62>
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	07db      	lsls	r3, r3, #31
 8009d18:	d506      	bpl.n	8009d28 <__swbuf_r+0x6c>
 8009d1a:	2e0a      	cmp	r6, #10
 8009d1c:	d104      	bne.n	8009d28 <__swbuf_r+0x6c>
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4628      	mov	r0, r5
 8009d22:	f000 f927 	bl	8009f74 <_fflush_r>
 8009d26:	b988      	cbnz	r0, 8009d4c <__swbuf_r+0x90>
 8009d28:	4638      	mov	r0, r7
 8009d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d2c:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <__swbuf_r+0x9c>)
 8009d2e:	429c      	cmp	r4, r3
 8009d30:	d101      	bne.n	8009d36 <__swbuf_r+0x7a>
 8009d32:	68ac      	ldr	r4, [r5, #8]
 8009d34:	e7cf      	b.n	8009cd6 <__swbuf_r+0x1a>
 8009d36:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <__swbuf_r+0xa0>)
 8009d38:	429c      	cmp	r4, r3
 8009d3a:	bf08      	it	eq
 8009d3c:	68ec      	ldreq	r4, [r5, #12]
 8009d3e:	e7ca      	b.n	8009cd6 <__swbuf_r+0x1a>
 8009d40:	4621      	mov	r1, r4
 8009d42:	4628      	mov	r0, r5
 8009d44:	f000 f81a 	bl	8009d7c <__swsetup_r>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d0cb      	beq.n	8009ce4 <__swbuf_r+0x28>
 8009d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8009d50:	e7ea      	b.n	8009d28 <__swbuf_r+0x6c>
 8009d52:	bf00      	nop
 8009d54:	0801d190 	.word	0x0801d190
 8009d58:	0801d1b0 	.word	0x0801d1b0
 8009d5c:	0801d170 	.word	0x0801d170

08009d60 <__ascii_wctomb>:
 8009d60:	b149      	cbz	r1, 8009d76 <__ascii_wctomb+0x16>
 8009d62:	2aff      	cmp	r2, #255	; 0xff
 8009d64:	bf85      	ittet	hi
 8009d66:	238a      	movhi	r3, #138	; 0x8a
 8009d68:	6003      	strhi	r3, [r0, #0]
 8009d6a:	700a      	strbls	r2, [r1, #0]
 8009d6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d70:	bf98      	it	ls
 8009d72:	2001      	movls	r0, #1
 8009d74:	4770      	bx	lr
 8009d76:	4608      	mov	r0, r1
 8009d78:	4770      	bx	lr
	...

08009d7c <__swsetup_r>:
 8009d7c:	4b32      	ldr	r3, [pc, #200]	; (8009e48 <__swsetup_r+0xcc>)
 8009d7e:	b570      	push	{r4, r5, r6, lr}
 8009d80:	681d      	ldr	r5, [r3, #0]
 8009d82:	4606      	mov	r6, r0
 8009d84:	460c      	mov	r4, r1
 8009d86:	b125      	cbz	r5, 8009d92 <__swsetup_r+0x16>
 8009d88:	69ab      	ldr	r3, [r5, #24]
 8009d8a:	b913      	cbnz	r3, 8009d92 <__swsetup_r+0x16>
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 f985 	bl	800a09c <__sinit>
 8009d92:	4b2e      	ldr	r3, [pc, #184]	; (8009e4c <__swsetup_r+0xd0>)
 8009d94:	429c      	cmp	r4, r3
 8009d96:	d10f      	bne.n	8009db8 <__swsetup_r+0x3c>
 8009d98:	686c      	ldr	r4, [r5, #4]
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009da0:	0719      	lsls	r1, r3, #28
 8009da2:	d42c      	bmi.n	8009dfe <__swsetup_r+0x82>
 8009da4:	06dd      	lsls	r5, r3, #27
 8009da6:	d411      	bmi.n	8009dcc <__swsetup_r+0x50>
 8009da8:	2309      	movs	r3, #9
 8009daa:	6033      	str	r3, [r6, #0]
 8009dac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295
 8009db6:	e03e      	b.n	8009e36 <__swsetup_r+0xba>
 8009db8:	4b25      	ldr	r3, [pc, #148]	; (8009e50 <__swsetup_r+0xd4>)
 8009dba:	429c      	cmp	r4, r3
 8009dbc:	d101      	bne.n	8009dc2 <__swsetup_r+0x46>
 8009dbe:	68ac      	ldr	r4, [r5, #8]
 8009dc0:	e7eb      	b.n	8009d9a <__swsetup_r+0x1e>
 8009dc2:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <__swsetup_r+0xd8>)
 8009dc4:	429c      	cmp	r4, r3
 8009dc6:	bf08      	it	eq
 8009dc8:	68ec      	ldreq	r4, [r5, #12]
 8009dca:	e7e6      	b.n	8009d9a <__swsetup_r+0x1e>
 8009dcc:	0758      	lsls	r0, r3, #29
 8009dce:	d512      	bpl.n	8009df6 <__swsetup_r+0x7a>
 8009dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dd2:	b141      	cbz	r1, 8009de6 <__swsetup_r+0x6a>
 8009dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd8:	4299      	cmp	r1, r3
 8009dda:	d002      	beq.n	8009de2 <__swsetup_r+0x66>
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f7ff fbe3 	bl	80095a8 <_free_r>
 8009de2:	2300      	movs	r3, #0
 8009de4:	6363      	str	r3, [r4, #52]	; 0x34
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	2300      	movs	r3, #0
 8009df0:	6063      	str	r3, [r4, #4]
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	f043 0308 	orr.w	r3, r3, #8
 8009dfc:	81a3      	strh	r3, [r4, #12]
 8009dfe:	6923      	ldr	r3, [r4, #16]
 8009e00:	b94b      	cbnz	r3, 8009e16 <__swsetup_r+0x9a>
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e0c:	d003      	beq.n	8009e16 <__swsetup_r+0x9a>
 8009e0e:	4621      	mov	r1, r4
 8009e10:	4630      	mov	r0, r6
 8009e12:	f000 fa07 	bl	800a224 <__smakebuf_r>
 8009e16:	89a0      	ldrh	r0, [r4, #12]
 8009e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e1c:	f010 0301 	ands.w	r3, r0, #1
 8009e20:	d00a      	beq.n	8009e38 <__swsetup_r+0xbc>
 8009e22:	2300      	movs	r3, #0
 8009e24:	60a3      	str	r3, [r4, #8]
 8009e26:	6963      	ldr	r3, [r4, #20]
 8009e28:	425b      	negs	r3, r3
 8009e2a:	61a3      	str	r3, [r4, #24]
 8009e2c:	6923      	ldr	r3, [r4, #16]
 8009e2e:	b943      	cbnz	r3, 8009e42 <__swsetup_r+0xc6>
 8009e30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e34:	d1ba      	bne.n	8009dac <__swsetup_r+0x30>
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	0781      	lsls	r1, r0, #30
 8009e3a:	bf58      	it	pl
 8009e3c:	6963      	ldrpl	r3, [r4, #20]
 8009e3e:	60a3      	str	r3, [r4, #8]
 8009e40:	e7f4      	b.n	8009e2c <__swsetup_r+0xb0>
 8009e42:	2000      	movs	r0, #0
 8009e44:	e7f7      	b.n	8009e36 <__swsetup_r+0xba>
 8009e46:	bf00      	nop
 8009e48:	2000000c 	.word	0x2000000c
 8009e4c:	0801d190 	.word	0x0801d190
 8009e50:	0801d1b0 	.word	0x0801d1b0
 8009e54:	0801d170 	.word	0x0801d170

08009e58 <abort>:
 8009e58:	b508      	push	{r3, lr}
 8009e5a:	2006      	movs	r0, #6
 8009e5c:	f000 fa96 	bl	800a38c <raise>
 8009e60:	2001      	movs	r0, #1
 8009e62:	f7f8 fdb7 	bl	80029d4 <_exit>
	...

08009e68 <__sflush_r>:
 8009e68:	898a      	ldrh	r2, [r1, #12]
 8009e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6e:	4605      	mov	r5, r0
 8009e70:	0710      	lsls	r0, r2, #28
 8009e72:	460c      	mov	r4, r1
 8009e74:	d458      	bmi.n	8009f28 <__sflush_r+0xc0>
 8009e76:	684b      	ldr	r3, [r1, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc05      	bgt.n	8009e88 <__sflush_r+0x20>
 8009e7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	dc02      	bgt.n	8009e88 <__sflush_r+0x20>
 8009e82:	2000      	movs	r0, #0
 8009e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	d0f9      	beq.n	8009e82 <__sflush_r+0x1a>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e94:	682f      	ldr	r7, [r5, #0]
 8009e96:	602b      	str	r3, [r5, #0]
 8009e98:	d032      	beq.n	8009f00 <__sflush_r+0x98>
 8009e9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	075a      	lsls	r2, r3, #29
 8009ea0:	d505      	bpl.n	8009eae <__sflush_r+0x46>
 8009ea2:	6863      	ldr	r3, [r4, #4]
 8009ea4:	1ac0      	subs	r0, r0, r3
 8009ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ea8:	b10b      	cbz	r3, 8009eae <__sflush_r+0x46>
 8009eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009eac:	1ac0      	subs	r0, r0, r3
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eb4:	6a21      	ldr	r1, [r4, #32]
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	47b0      	blx	r6
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	d106      	bne.n	8009ece <__sflush_r+0x66>
 8009ec0:	6829      	ldr	r1, [r5, #0]
 8009ec2:	291d      	cmp	r1, #29
 8009ec4:	d82c      	bhi.n	8009f20 <__sflush_r+0xb8>
 8009ec6:	4a2a      	ldr	r2, [pc, #168]	; (8009f70 <__sflush_r+0x108>)
 8009ec8:	40ca      	lsrs	r2, r1
 8009eca:	07d6      	lsls	r6, r2, #31
 8009ecc:	d528      	bpl.n	8009f20 <__sflush_r+0xb8>
 8009ece:	2200      	movs	r2, #0
 8009ed0:	6062      	str	r2, [r4, #4]
 8009ed2:	04d9      	lsls	r1, r3, #19
 8009ed4:	6922      	ldr	r2, [r4, #16]
 8009ed6:	6022      	str	r2, [r4, #0]
 8009ed8:	d504      	bpl.n	8009ee4 <__sflush_r+0x7c>
 8009eda:	1c42      	adds	r2, r0, #1
 8009edc:	d101      	bne.n	8009ee2 <__sflush_r+0x7a>
 8009ede:	682b      	ldr	r3, [r5, #0]
 8009ee0:	b903      	cbnz	r3, 8009ee4 <__sflush_r+0x7c>
 8009ee2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ee6:	602f      	str	r7, [r5, #0]
 8009ee8:	2900      	cmp	r1, #0
 8009eea:	d0ca      	beq.n	8009e82 <__sflush_r+0x1a>
 8009eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ef0:	4299      	cmp	r1, r3
 8009ef2:	d002      	beq.n	8009efa <__sflush_r+0x92>
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f7ff fb57 	bl	80095a8 <_free_r>
 8009efa:	2000      	movs	r0, #0
 8009efc:	6360      	str	r0, [r4, #52]	; 0x34
 8009efe:	e7c1      	b.n	8009e84 <__sflush_r+0x1c>
 8009f00:	6a21      	ldr	r1, [r4, #32]
 8009f02:	2301      	movs	r3, #1
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b0      	blx	r6
 8009f08:	1c41      	adds	r1, r0, #1
 8009f0a:	d1c7      	bne.n	8009e9c <__sflush_r+0x34>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0c4      	beq.n	8009e9c <__sflush_r+0x34>
 8009f12:	2b1d      	cmp	r3, #29
 8009f14:	d001      	beq.n	8009f1a <__sflush_r+0xb2>
 8009f16:	2b16      	cmp	r3, #22
 8009f18:	d101      	bne.n	8009f1e <__sflush_r+0xb6>
 8009f1a:	602f      	str	r7, [r5, #0]
 8009f1c:	e7b1      	b.n	8009e82 <__sflush_r+0x1a>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	e7ad      	b.n	8009e84 <__sflush_r+0x1c>
 8009f28:	690f      	ldr	r7, [r1, #16]
 8009f2a:	2f00      	cmp	r7, #0
 8009f2c:	d0a9      	beq.n	8009e82 <__sflush_r+0x1a>
 8009f2e:	0793      	lsls	r3, r2, #30
 8009f30:	680e      	ldr	r6, [r1, #0]
 8009f32:	bf08      	it	eq
 8009f34:	694b      	ldreq	r3, [r1, #20]
 8009f36:	600f      	str	r7, [r1, #0]
 8009f38:	bf18      	it	ne
 8009f3a:	2300      	movne	r3, #0
 8009f3c:	eba6 0807 	sub.w	r8, r6, r7
 8009f40:	608b      	str	r3, [r1, #8]
 8009f42:	f1b8 0f00 	cmp.w	r8, #0
 8009f46:	dd9c      	ble.n	8009e82 <__sflush_r+0x1a>
 8009f48:	6a21      	ldr	r1, [r4, #32]
 8009f4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f4c:	4643      	mov	r3, r8
 8009f4e:	463a      	mov	r2, r7
 8009f50:	4628      	mov	r0, r5
 8009f52:	47b0      	blx	r6
 8009f54:	2800      	cmp	r0, #0
 8009f56:	dc06      	bgt.n	8009f66 <__sflush_r+0xfe>
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5e:	81a3      	strh	r3, [r4, #12]
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	e78e      	b.n	8009e84 <__sflush_r+0x1c>
 8009f66:	4407      	add	r7, r0
 8009f68:	eba8 0800 	sub.w	r8, r8, r0
 8009f6c:	e7e9      	b.n	8009f42 <__sflush_r+0xda>
 8009f6e:	bf00      	nop
 8009f70:	20400001 	.word	0x20400001

08009f74 <_fflush_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	690b      	ldr	r3, [r1, #16]
 8009f78:	4605      	mov	r5, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	b913      	cbnz	r3, 8009f84 <_fflush_r+0x10>
 8009f7e:	2500      	movs	r5, #0
 8009f80:	4628      	mov	r0, r5
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	b118      	cbz	r0, 8009f8e <_fflush_r+0x1a>
 8009f86:	6983      	ldr	r3, [r0, #24]
 8009f88:	b90b      	cbnz	r3, 8009f8e <_fflush_r+0x1a>
 8009f8a:	f000 f887 	bl	800a09c <__sinit>
 8009f8e:	4b14      	ldr	r3, [pc, #80]	; (8009fe0 <_fflush_r+0x6c>)
 8009f90:	429c      	cmp	r4, r3
 8009f92:	d11b      	bne.n	8009fcc <_fflush_r+0x58>
 8009f94:	686c      	ldr	r4, [r5, #4]
 8009f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0ef      	beq.n	8009f7e <_fflush_r+0xa>
 8009f9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fa0:	07d0      	lsls	r0, r2, #31
 8009fa2:	d404      	bmi.n	8009fae <_fflush_r+0x3a>
 8009fa4:	0599      	lsls	r1, r3, #22
 8009fa6:	d402      	bmi.n	8009fae <_fflush_r+0x3a>
 8009fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009faa:	f000 f915 	bl	800a1d8 <__retarget_lock_acquire_recursive>
 8009fae:	4628      	mov	r0, r5
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	f7ff ff59 	bl	8009e68 <__sflush_r>
 8009fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fb8:	07da      	lsls	r2, r3, #31
 8009fba:	4605      	mov	r5, r0
 8009fbc:	d4e0      	bmi.n	8009f80 <_fflush_r+0xc>
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	059b      	lsls	r3, r3, #22
 8009fc2:	d4dd      	bmi.n	8009f80 <_fflush_r+0xc>
 8009fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fc6:	f000 f908 	bl	800a1da <__retarget_lock_release_recursive>
 8009fca:	e7d9      	b.n	8009f80 <_fflush_r+0xc>
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <_fflush_r+0x70>)
 8009fce:	429c      	cmp	r4, r3
 8009fd0:	d101      	bne.n	8009fd6 <_fflush_r+0x62>
 8009fd2:	68ac      	ldr	r4, [r5, #8]
 8009fd4:	e7df      	b.n	8009f96 <_fflush_r+0x22>
 8009fd6:	4b04      	ldr	r3, [pc, #16]	; (8009fe8 <_fflush_r+0x74>)
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	bf08      	it	eq
 8009fdc:	68ec      	ldreq	r4, [r5, #12]
 8009fde:	e7da      	b.n	8009f96 <_fflush_r+0x22>
 8009fe0:	0801d190 	.word	0x0801d190
 8009fe4:	0801d1b0 	.word	0x0801d1b0
 8009fe8:	0801d170 	.word	0x0801d170

08009fec <std>:
 8009fec:	2300      	movs	r3, #0
 8009fee:	b510      	push	{r4, lr}
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ffa:	6083      	str	r3, [r0, #8]
 8009ffc:	8181      	strh	r1, [r0, #12]
 8009ffe:	6643      	str	r3, [r0, #100]	; 0x64
 800a000:	81c2      	strh	r2, [r0, #14]
 800a002:	6183      	str	r3, [r0, #24]
 800a004:	4619      	mov	r1, r3
 800a006:	2208      	movs	r2, #8
 800a008:	305c      	adds	r0, #92	; 0x5c
 800a00a:	f7fb fdef 	bl	8005bec <memset>
 800a00e:	4b05      	ldr	r3, [pc, #20]	; (800a024 <std+0x38>)
 800a010:	6263      	str	r3, [r4, #36]	; 0x24
 800a012:	4b05      	ldr	r3, [pc, #20]	; (800a028 <std+0x3c>)
 800a014:	62a3      	str	r3, [r4, #40]	; 0x28
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <std+0x40>)
 800a018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a01a:	4b05      	ldr	r3, [pc, #20]	; (800a030 <std+0x44>)
 800a01c:	6224      	str	r4, [r4, #32]
 800a01e:	6323      	str	r3, [r4, #48]	; 0x30
 800a020:	bd10      	pop	{r4, pc}
 800a022:	bf00      	nop
 800a024:	0800a3c5 	.word	0x0800a3c5
 800a028:	0800a3e7 	.word	0x0800a3e7
 800a02c:	0800a41f 	.word	0x0800a41f
 800a030:	0800a443 	.word	0x0800a443

0800a034 <_cleanup_r>:
 800a034:	4901      	ldr	r1, [pc, #4]	; (800a03c <_cleanup_r+0x8>)
 800a036:	f000 b8af 	b.w	800a198 <_fwalk_reent>
 800a03a:	bf00      	nop
 800a03c:	08009f75 	.word	0x08009f75

0800a040 <__sfmoreglue>:
 800a040:	b570      	push	{r4, r5, r6, lr}
 800a042:	1e4a      	subs	r2, r1, #1
 800a044:	2568      	movs	r5, #104	; 0x68
 800a046:	4355      	muls	r5, r2
 800a048:	460e      	mov	r6, r1
 800a04a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a04e:	f7ff fafb 	bl	8009648 <_malloc_r>
 800a052:	4604      	mov	r4, r0
 800a054:	b140      	cbz	r0, 800a068 <__sfmoreglue+0x28>
 800a056:	2100      	movs	r1, #0
 800a058:	e9c0 1600 	strd	r1, r6, [r0]
 800a05c:	300c      	adds	r0, #12
 800a05e:	60a0      	str	r0, [r4, #8]
 800a060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a064:	f7fb fdc2 	bl	8005bec <memset>
 800a068:	4620      	mov	r0, r4
 800a06a:	bd70      	pop	{r4, r5, r6, pc}

0800a06c <__sfp_lock_acquire>:
 800a06c:	4801      	ldr	r0, [pc, #4]	; (800a074 <__sfp_lock_acquire+0x8>)
 800a06e:	f000 b8b3 	b.w	800a1d8 <__retarget_lock_acquire_recursive>
 800a072:	bf00      	nop
 800a074:	200004ec 	.word	0x200004ec

0800a078 <__sfp_lock_release>:
 800a078:	4801      	ldr	r0, [pc, #4]	; (800a080 <__sfp_lock_release+0x8>)
 800a07a:	f000 b8ae 	b.w	800a1da <__retarget_lock_release_recursive>
 800a07e:	bf00      	nop
 800a080:	200004ec 	.word	0x200004ec

0800a084 <__sinit_lock_acquire>:
 800a084:	4801      	ldr	r0, [pc, #4]	; (800a08c <__sinit_lock_acquire+0x8>)
 800a086:	f000 b8a7 	b.w	800a1d8 <__retarget_lock_acquire_recursive>
 800a08a:	bf00      	nop
 800a08c:	200004e7 	.word	0x200004e7

0800a090 <__sinit_lock_release>:
 800a090:	4801      	ldr	r0, [pc, #4]	; (800a098 <__sinit_lock_release+0x8>)
 800a092:	f000 b8a2 	b.w	800a1da <__retarget_lock_release_recursive>
 800a096:	bf00      	nop
 800a098:	200004e7 	.word	0x200004e7

0800a09c <__sinit>:
 800a09c:	b510      	push	{r4, lr}
 800a09e:	4604      	mov	r4, r0
 800a0a0:	f7ff fff0 	bl	800a084 <__sinit_lock_acquire>
 800a0a4:	69a3      	ldr	r3, [r4, #24]
 800a0a6:	b11b      	cbz	r3, 800a0b0 <__sinit+0x14>
 800a0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ac:	f7ff bff0 	b.w	800a090 <__sinit_lock_release>
 800a0b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0b4:	6523      	str	r3, [r4, #80]	; 0x50
 800a0b6:	4b13      	ldr	r3, [pc, #76]	; (800a104 <__sinit+0x68>)
 800a0b8:	4a13      	ldr	r2, [pc, #76]	; (800a108 <__sinit+0x6c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0be:	42a3      	cmp	r3, r4
 800a0c0:	bf04      	itt	eq
 800a0c2:	2301      	moveq	r3, #1
 800a0c4:	61a3      	streq	r3, [r4, #24]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 f820 	bl	800a10c <__sfp>
 800a0cc:	6060      	str	r0, [r4, #4]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 f81c 	bl	800a10c <__sfp>
 800a0d4:	60a0      	str	r0, [r4, #8]
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f000 f818 	bl	800a10c <__sfp>
 800a0dc:	2200      	movs	r2, #0
 800a0de:	60e0      	str	r0, [r4, #12]
 800a0e0:	2104      	movs	r1, #4
 800a0e2:	6860      	ldr	r0, [r4, #4]
 800a0e4:	f7ff ff82 	bl	8009fec <std>
 800a0e8:	68a0      	ldr	r0, [r4, #8]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	2109      	movs	r1, #9
 800a0ee:	f7ff ff7d 	bl	8009fec <std>
 800a0f2:	68e0      	ldr	r0, [r4, #12]
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	2112      	movs	r1, #18
 800a0f8:	f7ff ff78 	bl	8009fec <std>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	61a3      	str	r3, [r4, #24]
 800a100:	e7d2      	b.n	800a0a8 <__sinit+0xc>
 800a102:	bf00      	nop
 800a104:	0801ccbc 	.word	0x0801ccbc
 800a108:	0800a035 	.word	0x0800a035

0800a10c <__sfp>:
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	4607      	mov	r7, r0
 800a110:	f7ff ffac 	bl	800a06c <__sfp_lock_acquire>
 800a114:	4b1e      	ldr	r3, [pc, #120]	; (800a190 <__sfp+0x84>)
 800a116:	681e      	ldr	r6, [r3, #0]
 800a118:	69b3      	ldr	r3, [r6, #24]
 800a11a:	b913      	cbnz	r3, 800a122 <__sfp+0x16>
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7ff ffbd 	bl	800a09c <__sinit>
 800a122:	3648      	adds	r6, #72	; 0x48
 800a124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a128:	3b01      	subs	r3, #1
 800a12a:	d503      	bpl.n	800a134 <__sfp+0x28>
 800a12c:	6833      	ldr	r3, [r6, #0]
 800a12e:	b30b      	cbz	r3, 800a174 <__sfp+0x68>
 800a130:	6836      	ldr	r6, [r6, #0]
 800a132:	e7f7      	b.n	800a124 <__sfp+0x18>
 800a134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a138:	b9d5      	cbnz	r5, 800a170 <__sfp+0x64>
 800a13a:	4b16      	ldr	r3, [pc, #88]	; (800a194 <__sfp+0x88>)
 800a13c:	60e3      	str	r3, [r4, #12]
 800a13e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a142:	6665      	str	r5, [r4, #100]	; 0x64
 800a144:	f000 f847 	bl	800a1d6 <__retarget_lock_init_recursive>
 800a148:	f7ff ff96 	bl	800a078 <__sfp_lock_release>
 800a14c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a150:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a154:	6025      	str	r5, [r4, #0]
 800a156:	61a5      	str	r5, [r4, #24]
 800a158:	2208      	movs	r2, #8
 800a15a:	4629      	mov	r1, r5
 800a15c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a160:	f7fb fd44 	bl	8005bec <memset>
 800a164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a16c:	4620      	mov	r0, r4
 800a16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a170:	3468      	adds	r4, #104	; 0x68
 800a172:	e7d9      	b.n	800a128 <__sfp+0x1c>
 800a174:	2104      	movs	r1, #4
 800a176:	4638      	mov	r0, r7
 800a178:	f7ff ff62 	bl	800a040 <__sfmoreglue>
 800a17c:	4604      	mov	r4, r0
 800a17e:	6030      	str	r0, [r6, #0]
 800a180:	2800      	cmp	r0, #0
 800a182:	d1d5      	bne.n	800a130 <__sfp+0x24>
 800a184:	f7ff ff78 	bl	800a078 <__sfp_lock_release>
 800a188:	230c      	movs	r3, #12
 800a18a:	603b      	str	r3, [r7, #0]
 800a18c:	e7ee      	b.n	800a16c <__sfp+0x60>
 800a18e:	bf00      	nop
 800a190:	0801ccbc 	.word	0x0801ccbc
 800a194:	ffff0001 	.word	0xffff0001

0800a198 <_fwalk_reent>:
 800a198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a19c:	4606      	mov	r6, r0
 800a19e:	4688      	mov	r8, r1
 800a1a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1a4:	2700      	movs	r7, #0
 800a1a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1aa:	f1b9 0901 	subs.w	r9, r9, #1
 800a1ae:	d505      	bpl.n	800a1bc <_fwalk_reent+0x24>
 800a1b0:	6824      	ldr	r4, [r4, #0]
 800a1b2:	2c00      	cmp	r4, #0
 800a1b4:	d1f7      	bne.n	800a1a6 <_fwalk_reent+0xe>
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1bc:	89ab      	ldrh	r3, [r5, #12]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d907      	bls.n	800a1d2 <_fwalk_reent+0x3a>
 800a1c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	d003      	beq.n	800a1d2 <_fwalk_reent+0x3a>
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	47c0      	blx	r8
 800a1d0:	4307      	orrs	r7, r0
 800a1d2:	3568      	adds	r5, #104	; 0x68
 800a1d4:	e7e9      	b.n	800a1aa <_fwalk_reent+0x12>

0800a1d6 <__retarget_lock_init_recursive>:
 800a1d6:	4770      	bx	lr

0800a1d8 <__retarget_lock_acquire_recursive>:
 800a1d8:	4770      	bx	lr

0800a1da <__retarget_lock_release_recursive>:
 800a1da:	4770      	bx	lr

0800a1dc <__swhatbuf_r>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	460e      	mov	r6, r1
 800a1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e4:	2900      	cmp	r1, #0
 800a1e6:	b096      	sub	sp, #88	; 0x58
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	461d      	mov	r5, r3
 800a1ec:	da07      	bge.n	800a1fe <__swhatbuf_r+0x22>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	602b      	str	r3, [r5, #0]
 800a1f2:	89b3      	ldrh	r3, [r6, #12]
 800a1f4:	061a      	lsls	r2, r3, #24
 800a1f6:	d410      	bmi.n	800a21a <__swhatbuf_r+0x3e>
 800a1f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1fc:	e00e      	b.n	800a21c <__swhatbuf_r+0x40>
 800a1fe:	466a      	mov	r2, sp
 800a200:	f000 f946 	bl	800a490 <_fstat_r>
 800a204:	2800      	cmp	r0, #0
 800a206:	dbf2      	blt.n	800a1ee <__swhatbuf_r+0x12>
 800a208:	9a01      	ldr	r2, [sp, #4]
 800a20a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a20e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a212:	425a      	negs	r2, r3
 800a214:	415a      	adcs	r2, r3
 800a216:	602a      	str	r2, [r5, #0]
 800a218:	e7ee      	b.n	800a1f8 <__swhatbuf_r+0x1c>
 800a21a:	2340      	movs	r3, #64	; 0x40
 800a21c:	2000      	movs	r0, #0
 800a21e:	6023      	str	r3, [r4, #0]
 800a220:	b016      	add	sp, #88	; 0x58
 800a222:	bd70      	pop	{r4, r5, r6, pc}

0800a224 <__smakebuf_r>:
 800a224:	898b      	ldrh	r3, [r1, #12]
 800a226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a228:	079d      	lsls	r5, r3, #30
 800a22a:	4606      	mov	r6, r0
 800a22c:	460c      	mov	r4, r1
 800a22e:	d507      	bpl.n	800a240 <__smakebuf_r+0x1c>
 800a230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	6123      	str	r3, [r4, #16]
 800a238:	2301      	movs	r3, #1
 800a23a:	6163      	str	r3, [r4, #20]
 800a23c:	b002      	add	sp, #8
 800a23e:	bd70      	pop	{r4, r5, r6, pc}
 800a240:	ab01      	add	r3, sp, #4
 800a242:	466a      	mov	r2, sp
 800a244:	f7ff ffca 	bl	800a1dc <__swhatbuf_r>
 800a248:	9900      	ldr	r1, [sp, #0]
 800a24a:	4605      	mov	r5, r0
 800a24c:	4630      	mov	r0, r6
 800a24e:	f7ff f9fb 	bl	8009648 <_malloc_r>
 800a252:	b948      	cbnz	r0, 800a268 <__smakebuf_r+0x44>
 800a254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a258:	059a      	lsls	r2, r3, #22
 800a25a:	d4ef      	bmi.n	800a23c <__smakebuf_r+0x18>
 800a25c:	f023 0303 	bic.w	r3, r3, #3
 800a260:	f043 0302 	orr.w	r3, r3, #2
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	e7e3      	b.n	800a230 <__smakebuf_r+0xc>
 800a268:	4b0d      	ldr	r3, [pc, #52]	; (800a2a0 <__smakebuf_r+0x7c>)
 800a26a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	6020      	str	r0, [r4, #0]
 800a270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a274:	81a3      	strh	r3, [r4, #12]
 800a276:	9b00      	ldr	r3, [sp, #0]
 800a278:	6163      	str	r3, [r4, #20]
 800a27a:	9b01      	ldr	r3, [sp, #4]
 800a27c:	6120      	str	r0, [r4, #16]
 800a27e:	b15b      	cbz	r3, 800a298 <__smakebuf_r+0x74>
 800a280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a284:	4630      	mov	r0, r6
 800a286:	f000 f915 	bl	800a4b4 <_isatty_r>
 800a28a:	b128      	cbz	r0, 800a298 <__smakebuf_r+0x74>
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	f023 0303 	bic.w	r3, r3, #3
 800a292:	f043 0301 	orr.w	r3, r3, #1
 800a296:	81a3      	strh	r3, [r4, #12]
 800a298:	89a0      	ldrh	r0, [r4, #12]
 800a29a:	4305      	orrs	r5, r0
 800a29c:	81a5      	strh	r5, [r4, #12]
 800a29e:	e7cd      	b.n	800a23c <__smakebuf_r+0x18>
 800a2a0:	0800a035 	.word	0x0800a035

0800a2a4 <memmove>:
 800a2a4:	4288      	cmp	r0, r1
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	eb01 0402 	add.w	r4, r1, r2
 800a2ac:	d902      	bls.n	800a2b4 <memmove+0x10>
 800a2ae:	4284      	cmp	r4, r0
 800a2b0:	4623      	mov	r3, r4
 800a2b2:	d807      	bhi.n	800a2c4 <memmove+0x20>
 800a2b4:	1e43      	subs	r3, r0, #1
 800a2b6:	42a1      	cmp	r1, r4
 800a2b8:	d008      	beq.n	800a2cc <memmove+0x28>
 800a2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2c2:	e7f8      	b.n	800a2b6 <memmove+0x12>
 800a2c4:	4402      	add	r2, r0
 800a2c6:	4601      	mov	r1, r0
 800a2c8:	428a      	cmp	r2, r1
 800a2ca:	d100      	bne.n	800a2ce <memmove+0x2a>
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2d6:	e7f7      	b.n	800a2c8 <memmove+0x24>

0800a2d8 <__malloc_lock>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	; (800a2e0 <__malloc_lock+0x8>)
 800a2da:	f7ff bf7d 	b.w	800a1d8 <__retarget_lock_acquire_recursive>
 800a2de:	bf00      	nop
 800a2e0:	200004e8 	.word	0x200004e8

0800a2e4 <__malloc_unlock>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	; (800a2ec <__malloc_unlock+0x8>)
 800a2e6:	f7ff bf78 	b.w	800a1da <__retarget_lock_release_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	200004e8 	.word	0x200004e8

0800a2f0 <_realloc_r>:
 800a2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f2:	4607      	mov	r7, r0
 800a2f4:	4614      	mov	r4, r2
 800a2f6:	460e      	mov	r6, r1
 800a2f8:	b921      	cbnz	r1, 800a304 <_realloc_r+0x14>
 800a2fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2fe:	4611      	mov	r1, r2
 800a300:	f7ff b9a2 	b.w	8009648 <_malloc_r>
 800a304:	b922      	cbnz	r2, 800a310 <_realloc_r+0x20>
 800a306:	f7ff f94f 	bl	80095a8 <_free_r>
 800a30a:	4625      	mov	r5, r4
 800a30c:	4628      	mov	r0, r5
 800a30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a310:	f000 f8f2 	bl	800a4f8 <_malloc_usable_size_r>
 800a314:	42a0      	cmp	r0, r4
 800a316:	d20f      	bcs.n	800a338 <_realloc_r+0x48>
 800a318:	4621      	mov	r1, r4
 800a31a:	4638      	mov	r0, r7
 800a31c:	f7ff f994 	bl	8009648 <_malloc_r>
 800a320:	4605      	mov	r5, r0
 800a322:	2800      	cmp	r0, #0
 800a324:	d0f2      	beq.n	800a30c <_realloc_r+0x1c>
 800a326:	4631      	mov	r1, r6
 800a328:	4622      	mov	r2, r4
 800a32a:	f7fe fc65 	bl	8008bf8 <memcpy>
 800a32e:	4631      	mov	r1, r6
 800a330:	4638      	mov	r0, r7
 800a332:	f7ff f939 	bl	80095a8 <_free_r>
 800a336:	e7e9      	b.n	800a30c <_realloc_r+0x1c>
 800a338:	4635      	mov	r5, r6
 800a33a:	e7e7      	b.n	800a30c <_realloc_r+0x1c>

0800a33c <_raise_r>:
 800a33c:	291f      	cmp	r1, #31
 800a33e:	b538      	push	{r3, r4, r5, lr}
 800a340:	4604      	mov	r4, r0
 800a342:	460d      	mov	r5, r1
 800a344:	d904      	bls.n	800a350 <_raise_r+0x14>
 800a346:	2316      	movs	r3, #22
 800a348:	6003      	str	r3, [r0, #0]
 800a34a:	f04f 30ff 	mov.w	r0, #4294967295
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a352:	b112      	cbz	r2, 800a35a <_raise_r+0x1e>
 800a354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a358:	b94b      	cbnz	r3, 800a36e <_raise_r+0x32>
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 f830 	bl	800a3c0 <_getpid_r>
 800a360:	462a      	mov	r2, r5
 800a362:	4601      	mov	r1, r0
 800a364:	4620      	mov	r0, r4
 800a366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a36a:	f000 b817 	b.w	800a39c <_kill_r>
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d00a      	beq.n	800a388 <_raise_r+0x4c>
 800a372:	1c59      	adds	r1, r3, #1
 800a374:	d103      	bne.n	800a37e <_raise_r+0x42>
 800a376:	2316      	movs	r3, #22
 800a378:	6003      	str	r3, [r0, #0]
 800a37a:	2001      	movs	r0, #1
 800a37c:	e7e7      	b.n	800a34e <_raise_r+0x12>
 800a37e:	2400      	movs	r4, #0
 800a380:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a384:	4628      	mov	r0, r5
 800a386:	4798      	blx	r3
 800a388:	2000      	movs	r0, #0
 800a38a:	e7e0      	b.n	800a34e <_raise_r+0x12>

0800a38c <raise>:
 800a38c:	4b02      	ldr	r3, [pc, #8]	; (800a398 <raise+0xc>)
 800a38e:	4601      	mov	r1, r0
 800a390:	6818      	ldr	r0, [r3, #0]
 800a392:	f7ff bfd3 	b.w	800a33c <_raise_r>
 800a396:	bf00      	nop
 800a398:	2000000c 	.word	0x2000000c

0800a39c <_kill_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4d07      	ldr	r5, [pc, #28]	; (800a3bc <_kill_r+0x20>)
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	602b      	str	r3, [r5, #0]
 800a3aa:	f7f8 fb03 	bl	80029b4 <_kill>
 800a3ae:	1c43      	adds	r3, r0, #1
 800a3b0:	d102      	bne.n	800a3b8 <_kill_r+0x1c>
 800a3b2:	682b      	ldr	r3, [r5, #0]
 800a3b4:	b103      	cbz	r3, 800a3b8 <_kill_r+0x1c>
 800a3b6:	6023      	str	r3, [r4, #0]
 800a3b8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ba:	bf00      	nop
 800a3bc:	200004f0 	.word	0x200004f0

0800a3c0 <_getpid_r>:
 800a3c0:	f7f8 baf0 	b.w	80029a4 <_getpid>

0800a3c4 <__sread>:
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3cc:	f000 f89c 	bl	800a508 <_read_r>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	bfab      	itete	ge
 800a3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a3d8:	181b      	addge	r3, r3, r0
 800a3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3de:	bfac      	ite	ge
 800a3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3e2:	81a3      	strhlt	r3, [r4, #12]
 800a3e4:	bd10      	pop	{r4, pc}

0800a3e6 <__swrite>:
 800a3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ea:	461f      	mov	r7, r3
 800a3ec:	898b      	ldrh	r3, [r1, #12]
 800a3ee:	05db      	lsls	r3, r3, #23
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	4616      	mov	r6, r2
 800a3f6:	d505      	bpl.n	800a404 <__swrite+0x1e>
 800a3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	2200      	movs	r2, #0
 800a400:	f000 f868 	bl	800a4d4 <_lseek_r>
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a40a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a40e:	81a3      	strh	r3, [r4, #12]
 800a410:	4632      	mov	r2, r6
 800a412:	463b      	mov	r3, r7
 800a414:	4628      	mov	r0, r5
 800a416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a41a:	f000 b817 	b.w	800a44c <_write_r>

0800a41e <__sseek>:
 800a41e:	b510      	push	{r4, lr}
 800a420:	460c      	mov	r4, r1
 800a422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a426:	f000 f855 	bl	800a4d4 <_lseek_r>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	bf15      	itete	ne
 800a430:	6560      	strne	r0, [r4, #84]	; 0x54
 800a432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a43a:	81a3      	strheq	r3, [r4, #12]
 800a43c:	bf18      	it	ne
 800a43e:	81a3      	strhne	r3, [r4, #12]
 800a440:	bd10      	pop	{r4, pc}

0800a442 <__sclose>:
 800a442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a446:	f000 b813 	b.w	800a470 <_close_r>
	...

0800a44c <_write_r>:
 800a44c:	b538      	push	{r3, r4, r5, lr}
 800a44e:	4d07      	ldr	r5, [pc, #28]	; (800a46c <_write_r+0x20>)
 800a450:	4604      	mov	r4, r0
 800a452:	4608      	mov	r0, r1
 800a454:	4611      	mov	r1, r2
 800a456:	2200      	movs	r2, #0
 800a458:	602a      	str	r2, [r5, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	f7f8 fae1 	bl	8002a22 <_write>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d102      	bne.n	800a46a <_write_r+0x1e>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	b103      	cbz	r3, 800a46a <_write_r+0x1e>
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	200004f0 	.word	0x200004f0

0800a470 <_close_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4d06      	ldr	r5, [pc, #24]	; (800a48c <_close_r+0x1c>)
 800a474:	2300      	movs	r3, #0
 800a476:	4604      	mov	r4, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	602b      	str	r3, [r5, #0]
 800a47c:	f7f8 faed 	bl	8002a5a <_close>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d102      	bne.n	800a48a <_close_r+0x1a>
 800a484:	682b      	ldr	r3, [r5, #0]
 800a486:	b103      	cbz	r3, 800a48a <_close_r+0x1a>
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	200004f0 	.word	0x200004f0

0800a490 <_fstat_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d07      	ldr	r5, [pc, #28]	; (800a4b0 <_fstat_r+0x20>)
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	4611      	mov	r1, r2
 800a49c:	602b      	str	r3, [r5, #0]
 800a49e:	f7f8 fae8 	bl	8002a72 <_fstat>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	d102      	bne.n	800a4ac <_fstat_r+0x1c>
 800a4a6:	682b      	ldr	r3, [r5, #0]
 800a4a8:	b103      	cbz	r3, 800a4ac <_fstat_r+0x1c>
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	bd38      	pop	{r3, r4, r5, pc}
 800a4ae:	bf00      	nop
 800a4b0:	200004f0 	.word	0x200004f0

0800a4b4 <_isatty_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4d06      	ldr	r5, [pc, #24]	; (800a4d0 <_isatty_r+0x1c>)
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4608      	mov	r0, r1
 800a4be:	602b      	str	r3, [r5, #0]
 800a4c0:	f7f8 fae7 	bl	8002a92 <_isatty>
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	d102      	bne.n	800a4ce <_isatty_r+0x1a>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	b103      	cbz	r3, 800a4ce <_isatty_r+0x1a>
 800a4cc:	6023      	str	r3, [r4, #0]
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
 800a4d0:	200004f0 	.word	0x200004f0

0800a4d4 <_lseek_r>:
 800a4d4:	b538      	push	{r3, r4, r5, lr}
 800a4d6:	4d07      	ldr	r5, [pc, #28]	; (800a4f4 <_lseek_r+0x20>)
 800a4d8:	4604      	mov	r4, r0
 800a4da:	4608      	mov	r0, r1
 800a4dc:	4611      	mov	r1, r2
 800a4de:	2200      	movs	r2, #0
 800a4e0:	602a      	str	r2, [r5, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f7f8 fae0 	bl	8002aa8 <_lseek>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_lseek_r+0x1e>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_lseek_r+0x1e>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	200004f0 	.word	0x200004f0

0800a4f8 <_malloc_usable_size_r>:
 800a4f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4fc:	1f18      	subs	r0, r3, #4
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	bfbc      	itt	lt
 800a502:	580b      	ldrlt	r3, [r1, r0]
 800a504:	18c0      	addlt	r0, r0, r3
 800a506:	4770      	bx	lr

0800a508 <_read_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4d07      	ldr	r5, [pc, #28]	; (800a528 <_read_r+0x20>)
 800a50c:	4604      	mov	r4, r0
 800a50e:	4608      	mov	r0, r1
 800a510:	4611      	mov	r1, r2
 800a512:	2200      	movs	r2, #0
 800a514:	602a      	str	r2, [r5, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	f7f8 fa66 	bl	80029e8 <_read>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_read_r+0x1e>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_read_r+0x1e>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	200004f0 	.word	0x200004f0

0800a52c <_init>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	bf00      	nop
 800a530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a532:	bc08      	pop	{r3}
 800a534:	469e      	mov	lr, r3
 800a536:	4770      	bx	lr

0800a538 <_fini>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	bf00      	nop
 800a53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53e:	bc08      	pop	{r3}
 800a540:	469e      	mov	lr, r3
 800a542:	4770      	bx	lr
