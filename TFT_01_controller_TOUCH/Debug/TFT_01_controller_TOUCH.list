
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ea4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013bc0  08011048  08011048  00021048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024c08  08024c08  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08024c08  08024c08  00034c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024c10  08024c10  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024c10  08024c10  00034c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024c14  08024c14  00034c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08024c18  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000214  08024e2c  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  08024e2c  000407a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021488  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000485e  00000000  00000000  000616cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  00065f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00007002  00000000  00000000  00067708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000235ca  00000000  00000000  0006e70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009744f  00000000  00000000  00091cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00129123  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001640  00000000  00000000  00129178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007734  00000000  00000000  0012a7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801102c 	.word	0x0801102c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	0801102c 	.word	0x0801102c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000280 	.word	0x20000280

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	20000280 	.word	0x20000280

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	20000280 	.word	0x20000280

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	20000280 	.word	0x20000280

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000280 	.word	0x20000280

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000280 	.word	0x20000280

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f004 fcc8 	bl	80065c4 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000284 	.word	0x20000284

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f005 fbf9 	bl	80074a4 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f005 fbf3 	bl	80074a4 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f005 fbe8 	bl	80074a4 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f005 fbd5 	bl	80074a4 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f005 fbcf 	bl	80074a4 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f005 fbc3 	bl	80074a4 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f005 fbb9 	bl	80074a4 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f005 fabe 	bl	80074a4 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f005 fab8 	bl	80074a4 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f005 fa81 	bl	80074a4 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	20000284 	.word	0x20000284

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f005 fa61 	bl	80074a4 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f005 fa58 	bl	80074a4 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000284 	.word	0x20000284
 8002054:	08013fe4 	.word	0x08013fe4
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f005 fa1b 	bl	80074a4 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f008 fb94 	bl	800a7aa <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f005 fa0b 	bl	80074a4 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000288 	.word	0x20000288
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002b1 	.word	0x200002b1

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f004 f968 	bl	80065ac <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f005 f89f 	bl	8007474 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f004 f933 	bl	80065ac <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f004 f92d 	bl	80065ac <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f005 f861 	bl	8007474 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f004 f8f5 	bl	80065ac <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 faa2 	bl	8006930 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fa8d 	bl	8006912 <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f004 fa5c 	bl	80068c2 <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002b1 	.word	0x200002b1
 8002420:	200002b4 	.word	0x200002b4
 8002424:	200002b0 	.word	0x200002b0
 8002428:	20000288 	.word	0x20000288
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f004 fa4c 	bl	80068de <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002b1 	.word	0x200002b1

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f005 f813 	bl	80074a4 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f004 f895 	bl	80065c4 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002b1 	.word	0x200002b1
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f004 f9b5 	bl	800688a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f004 f9ce 	bl	80068c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f004 f9ad 	bl	800688a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f004 f9c6 	bl	80068c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f004 f9a5 	bl	800688a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f004 f9be 	bl	80068c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f004 f99d 	bl	800688a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f004 f9b6 	bl	80068c2 <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002b8 	.word	0x200002b8

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f005 f8ff 	bl	80077c4 <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002b8 	.word	0x200002b8

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f005 f8e9 	bl	80077c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f005 f9dc 	bl	80079c0 <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002b8 	.word	0x200002b8

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002780:	2002      	movs	r0, #2
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f848 	bl	800281e <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002798:	2001      	movs	r0, #1
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f83c 	bl	800281e <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f846 	bl	8002850 <DS3231_EncodeBCD>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4619      	mov	r1, r3
 80027c8:	2002      	movs	r0, #2
 80027ca:	f7ff fee5 	bl	8002598 <DS3231_SetRegByte>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f834 	bl	8002850 <DS3231_EncodeBCD>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4619      	mov	r1, r3
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff fed3 	bl	8002598 <DS3231_SetRegByte>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f822 	bl	8002850 <DS3231_EncodeBCD>
 800280c:	4603      	mov	r3, r0
 800280e:	4619      	mov	r1, r3
 8002810:	2000      	movs	r0, #0
 8002812:	f7ff fec1 	bl	8002598 <DS3231_SetRegByte>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	b2da      	uxtb	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4413      	add	r3, r2
 8002842:	b2db      	uxtb	r3, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800285a:	79fa      	ldrb	r2, [r7, #7]
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <DS3231_EncodeBCD+0x40>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	08d9      	lsrs	r1, r3, #3
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	b2da      	uxtb	r2, r3
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	4907      	ldr	r1, [pc, #28]	; (8002890 <DS3231_EncodeBCD+0x40>)
 8002874:	fba1 1303 	umull	r1, r3, r1, r3
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4413      	add	r3, r2
 8002882:	b2db      	uxtb	r3, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	cccccccd 	.word	0xcccccccd

08002894 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800289a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800289e:	f7ff fb2b 	bl	8001ef8 <ILI9341_ClearDisplay>
	  ILI9341_DrawImage(40, 50, logo, 240, 140);
 80028a2:	238c      	movs	r3, #140	; 0x8c
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	23f0      	movs	r3, #240	; 0xf0
 80028a8:	4a6d      	ldr	r2, [pc, #436]	; (8002a60 <system_init+0x1cc>)
 80028aa:	2132      	movs	r1, #50	; 0x32
 80028ac:	2028      	movs	r0, #40	; 0x28
 80028ae:	f7ff faf8 	bl	8001ea2 <ILI9341_DrawImage>
//	  GFX_Image(40, 50, logo, 240, 140); //usunieta wolniejsza wersja rysowania

	  EF_SetFont(&arialBlack_20ptFontInfo);
 80028b2:	486c      	ldr	r0, [pc, #432]	; (8002a64 <system_init+0x1d0>)
 80028b4:	f7fe ff1c 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 80028b8:	496b      	ldr	r1, [pc, #428]	; (8002a68 <system_init+0x1d4>)
 80028ba:	486c      	ldr	r0, [pc, #432]	; (8002a6c <system_init+0x1d8>)
 80028bc:	f00a fda0 	bl	800d400 <siprintf>
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80028c0:	2300      	movs	r3, #0
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	2300      	movs	r3, #0
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2300      	movs	r3, #0
 80028ca:	2214      	movs	r2, #20
 80028cc:	213c      	movs	r1, #60	; 0x3c
 80028ce:	4867      	ldr	r0, [pc, #412]	; (8002a6c <system_init+0x1d8>)
 80028d0:	f7ff f928 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 80028d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2305      	movs	r3, #5
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2314      	movs	r3, #20
 80028e0:	2214      	movs	r2, #20
 80028e2:	21c8      	movs	r1, #200	; 0xc8
 80028e4:	203c      	movs	r0, #60	; 0x3c
 80028e6:	f7fe fe35 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 80028ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	2305      	movs	r3, #5
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2314      	movs	r3, #20
 80028f6:	2214      	movs	r2, #20
 80028f8:	21c8      	movs	r1, #200	; 0xc8
 80028fa:	205a      	movs	r0, #90	; 0x5a
 80028fc:	f7fe fe2a 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 8002900:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2305      	movs	r3, #5
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2314      	movs	r3, #20
 800290c:	2214      	movs	r2, #20
 800290e:	21c8      	movs	r1, #200	; 0xc8
 8002910:	2078      	movs	r0, #120	; 0x78
 8002912:	f7fe fe1f 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 8002916:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	2305      	movs	r3, #5
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2314      	movs	r3, #20
 8002922:	2214      	movs	r2, #20
 8002924:	21c8      	movs	r1, #200	; 0xc8
 8002926:	2096      	movs	r0, #150	; 0x96
 8002928:	f7fe fe14 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 800292c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2305      	movs	r3, #5
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2314      	movs	r3, #20
 8002938:	2214      	movs	r2, #20
 800293a:	21c8      	movs	r1, #200	; 0xc8
 800293c:	20b4      	movs	r0, #180	; 0xb4
 800293e:	f7fe fe09 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 8002942:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	2305      	movs	r3, #5
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2314      	movs	r3, #20
 800294e:	2214      	movs	r2, #20
 8002950:	21c8      	movs	r1, #200	; 0xc8
 8002952:	20d2      	movs	r0, #210	; 0xd2
 8002954:	f7fe fdfe 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 8002958:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	2305      	movs	r3, #5
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	2314      	movs	r3, #20
 8002964:	2214      	movs	r2, #20
 8002966:	21c8      	movs	r1, #200	; 0xc8
 8002968:	20f0      	movs	r0, #240	; 0xf0
 800296a:	f7fe fdf3 	bl	8001554 <GFX_DrawRoundRectangle>
	  	  HAL_Delay(200);
 800296e:	20c8      	movs	r0, #200	; 0xc8
 8002970:	f003 fe28 	bl	80065c4 <HAL_Delay>

	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 8002974:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2305      	movs	r3, #5
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2314      	movs	r3, #20
 8002980:	2214      	movs	r2, #20
 8002982:	21c8      	movs	r1, #200	; 0xc8
 8002984:	203c      	movs	r0, #60	; 0x3c
 8002986:	f7fe fe62 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100);
 800298a:	2064      	movs	r0, #100	; 0x64
 800298c:	f003 fe1a 	bl	80065c4 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 8002990:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	2305      	movs	r3, #5
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2314      	movs	r3, #20
 800299c:	2214      	movs	r2, #20
 800299e:	21c8      	movs	r1, #200	; 0xc8
 80029a0:	205a      	movs	r0, #90	; 0x5a
 80029a2:	f7fe fe54 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_TEMP_1);	// ASK for current temperature
 80029a6:	2003      	movs	r0, #3
 80029a8:	f002 fe6e 	bl	8005688 <SendComand>
	  	  HAL_Delay(100);
 80029ac:	2064      	movs	r0, #100	; 0x64
 80029ae:	f003 fe09 	bl	80065c4 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 80029b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2305      	movs	r3, #5
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2314      	movs	r3, #20
 80029be:	2214      	movs	r2, #20
 80029c0:	21c8      	movs	r1, #200	; 0xc8
 80029c2:	2078      	movs	r0, #120	; 0x78
 80029c4:	f7fe fe43 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80029c8:	2004      	movs	r0, #4
 80029ca:	f002 fe5d 	bl	8005688 <SendComand>
	  	  HAL_Delay(100);
 80029ce:	2064      	movs	r0, #100	; 0x64
 80029d0:	f003 fdf8 	bl	80065c4 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 80029d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2305      	movs	r3, #5
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2314      	movs	r3, #20
 80029e0:	2214      	movs	r2, #20
 80029e2:	21c8      	movs	r1, #200	; 0xc8
 80029e4:	2096      	movs	r0, #150	; 0x96
 80029e6:	f7fe fe32 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80029ea:	2015      	movs	r0, #21
 80029ec:	f002 fe4c 	bl	8005688 <SendComand>
	  	  HAL_Delay(100);
 80029f0:	2064      	movs	r0, #100	; 0x64
 80029f2:	f003 fde7 	bl	80065c4 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 80029f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	2305      	movs	r3, #5
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2314      	movs	r3, #20
 8002a02:	2214      	movs	r2, #20
 8002a04:	21c8      	movs	r1, #200	; 0xc8
 8002a06:	20b4      	movs	r0, #180	; 0xb4
 8002a08:	f7fe fe21 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002a0c:	2016      	movs	r0, #22
 8002a0e:	f002 fe3b 	bl	8005688 <SendComand>
	  	  HAL_Delay(100);
 8002a12:	2064      	movs	r0, #100	; 0x64
 8002a14:	f003 fdd6 	bl	80065c4 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 8002a18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	2305      	movs	r3, #5
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2314      	movs	r3, #20
 8002a24:	2214      	movs	r2, #20
 8002a26:	21c8      	movs	r1, #200	; 0xc8
 8002a28:	20d2      	movs	r0, #210	; 0xd2
 8002a2a:	f7fe fe10 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);
 8002a2e:	201b      	movs	r0, #27
 8002a30:	f002 fe2a 	bl	8005688 <SendComand>
	  	  HAL_Delay(100);
 8002a34:	2064      	movs	r0, #100	; 0x64
 8002a36:	f003 fdc5 	bl	80065c4 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 8002a3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	2305      	movs	r3, #5
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2314      	movs	r3, #20
 8002a46:	2214      	movs	r2, #20
 8002a48:	21c8      	movs	r1, #200	; 0xc8
 8002a4a:	20f0      	movs	r0, #240	; 0xf0
 8002a4c:	f7fe fdff 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(200);
 8002a50:	20c8      	movs	r0, #200	; 0xc8
 8002a52:	f003 fdb7 	bl	80065c4 <HAL_Delay>

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	08014054 	.word	0x08014054
 8002a64:	08013fd8 	.word	0x08013fd8
 8002a68:	08011048 	.word	0x08011048
 8002a6c:	200002bc 	.word	0x200002bc

08002a70 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a7a:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	460b      	mov	r3, r1
 8002a82:	ed87 1a01 	vstr	s2, [r7, #4]
 8002a86:	72fb      	strb	r3, [r7, #11]
	  SendComand(UCMD_TEMP_1);
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f002 fdfd 	bl	8005688 <SendComand>
	  SendComand(UCMD_PRES_1);
 8002a8e:	2004      	movs	r0, #4
 8002a90:	f002 fdfa 	bl	8005688 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8002a94:	201b      	movs	r0, #27
 8002a96:	f002 fdf7 	bl	8005688 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8002a9a:	f7ff fe6f 	bl	800277c <DS3231_GetHour>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8002aa2:	f7ff fe77 	bl	8002794 <DS3231_GetMinute>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	77bb      	strb	r3, [r7, #30]

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002aaa:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002aae:	f7ff fa23 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002ab2:	4881      	ldr	r0, [pc, #516]	; (8002cb8 <showCurrentParameters+0x248>)
 8002ab4:	f7fe fe1c 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8002ab8:	4980      	ldr	r1, [pc, #512]	; (8002cbc <showCurrentParameters+0x24c>)
 8002aba:	4881      	ldr	r0, [pc, #516]	; (8002cc0 <showCurrentParameters+0x250>)
 8002abc:	f00a fca0 	bl	800d400 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002ac0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002ace:	220a      	movs	r2, #10
 8002ad0:	212f      	movs	r1, #47	; 0x2f
 8002ad2:	487b      	ldr	r0, [pc, #492]	; (8002cc0 <showCurrentParameters+0x250>)
 8002ad4:	f7ff f826 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002ad8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2329      	movs	r3, #41	; 0x29
 8002ae0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ae4:	2129      	movs	r1, #41	; 0x29
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe fb52 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002aec:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	232b      	movs	r3, #43	; 0x2b
 8002af4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002af8:	212b      	movs	r1, #43	; 0x2b
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe fb48 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8002b00:	7ffb      	ldrb	r3, [r7, #31]
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	d809      	bhi.n	8002b1a <showCurrentParameters+0xaa>
 8002b06:	7fbb      	ldrb	r3, [r7, #30]
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d806      	bhi.n	8002b1a <showCurrentParameters+0xaa>
 8002b0c:	7ffa      	ldrb	r2, [r7, #31]
 8002b0e:	7fbb      	ldrb	r3, [r7, #30]
 8002b10:	496c      	ldr	r1, [pc, #432]	; (8002cc4 <showCurrentParameters+0x254>)
 8002b12:	486b      	ldr	r0, [pc, #428]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b14:	f00a fc74 	bl	800d400 <siprintf>
 8002b18:	e019      	b.n	8002b4e <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
 8002b1c:	2b09      	cmp	r3, #9
 8002b1e:	d806      	bhi.n	8002b2e <showCurrentParameters+0xbe>
 8002b20:	7ffa      	ldrb	r2, [r7, #31]
 8002b22:	7fbb      	ldrb	r3, [r7, #30]
 8002b24:	4968      	ldr	r1, [pc, #416]	; (8002cc8 <showCurrentParameters+0x258>)
 8002b26:	4866      	ldr	r0, [pc, #408]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b28:	f00a fc6a 	bl	800d400 <siprintf>
 8002b2c:	e00f      	b.n	8002b4e <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8002b2e:	7fbb      	ldrb	r3, [r7, #30]
 8002b30:	2b09      	cmp	r3, #9
 8002b32:	d806      	bhi.n	8002b42 <showCurrentParameters+0xd2>
 8002b34:	7ffa      	ldrb	r2, [r7, #31]
 8002b36:	7fbb      	ldrb	r3, [r7, #30]
 8002b38:	4964      	ldr	r1, [pc, #400]	; (8002ccc <showCurrentParameters+0x25c>)
 8002b3a:	4861      	ldr	r0, [pc, #388]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b3c:	f00a fc60 	bl	800d400 <siprintf>
 8002b40:	e005      	b.n	8002b4e <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8002b42:	7ffa      	ldrb	r2, [r7, #31]
 8002b44:	7fbb      	ldrb	r3, [r7, #30]
 8002b46:	4962      	ldr	r1, [pc, #392]	; (8002cd0 <showCurrentParameters+0x260>)
 8002b48:	485d      	ldr	r0, [pc, #372]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b4a:	f00a fc59 	bl	800d400 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002b4e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2232      	movs	r2, #50	; 0x32
 8002b5c:	2114      	movs	r1, #20
 8002b5e:	4858      	ldr	r0, [pc, #352]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b60:	f7fe ffe0 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8002b64:	4b5b      	ldr	r3, [pc, #364]	; (8002cd4 <showCurrentParameters+0x264>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fd05 	bl	8000578 <__aeabi_f2d>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4959      	ldr	r1, [pc, #356]	; (8002cd8 <showCurrentParameters+0x268>)
 8002b74:	4852      	ldr	r0, [pc, #328]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b76:	f00a fc43 	bl	800d400 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002b7a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	2301      	movs	r3, #1
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2300      	movs	r3, #0
 8002b86:	2250      	movs	r2, #80	; 0x50
 8002b88:	2114      	movs	r1, #20
 8002b8a:	484d      	ldr	r0, [pc, #308]	; (8002cc0 <showCurrentParameters+0x250>)
 8002b8c:	f7fe ffca 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8002b90:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <showCurrentParameters+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fcef 	bl	8000578 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4950      	ldr	r1, [pc, #320]	; (8002ce0 <showCurrentParameters+0x270>)
 8002ba0:	4847      	ldr	r0, [pc, #284]	; (8002cc0 <showCurrentParameters+0x250>)
 8002ba2:	f00a fc2d 	bl	800d400 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002ba6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	2300      	movs	r3, #0
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	226e      	movs	r2, #110	; 0x6e
 8002bb4:	2114      	movs	r1, #20
 8002bb6:	4842      	ldr	r0, [pc, #264]	; (8002cc0 <showCurrentParameters+0x250>)
 8002bb8:	f7fe ffb4 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: %d", CWaterLvl);
 8002bbc:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <showCurrentParameters+0x274>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4949      	ldr	r1, [pc, #292]	; (8002ce8 <showCurrentParameters+0x278>)
 8002bc4:	483e      	ldr	r0, [pc, #248]	; (8002cc0 <showCurrentParameters+0x250>)
 8002bc6:	f00a fc1b 	bl	800d400 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002bca:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	228c      	movs	r2, #140	; 0x8c
 8002bd8:	2114      	movs	r1, #20
 8002bda:	4839      	ldr	r0, [pc, #228]	; (8002cc0 <showCurrentParameters+0x250>)
 8002bdc:	f7fe ffa2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8002be0:	4b42      	ldr	r3, [pc, #264]	; (8002cec <showCurrentParameters+0x27c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fcc7 	bl	8000578 <__aeabi_f2d>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4940      	ldr	r1, [pc, #256]	; (8002cf0 <showCurrentParameters+0x280>)
 8002bf0:	4833      	ldr	r0, [pc, #204]	; (8002cc0 <showCurrentParameters+0x250>)
 8002bf2:	f00a fc05 	bl	800d400 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002bf6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	22aa      	movs	r2, #170	; 0xaa
 8002c04:	2114      	movs	r1, #20
 8002c06:	482e      	ldr	r0, [pc, #184]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c08:	f7fe ff8c 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002c0c:	4839      	ldr	r0, [pc, #228]	; (8002cf4 <showCurrentParameters+0x284>)
 8002c0e:	f7fe fd6f 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002c12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	2305      	movs	r3, #5
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2314      	movs	r3, #20
 8002c1e:	225f      	movs	r2, #95	; 0x5f
 8002c20:	21d8      	movs	r1, #216	; 0xd8
 8002c22:	20dc      	movs	r0, #220	; 0xdc
 8002c24:	f7fe fd13 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8002c28:	4933      	ldr	r1, [pc, #204]	; (8002cf8 <showCurrentParameters+0x288>)
 8002c2a:	4825      	ldr	r0, [pc, #148]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c2c:	f00a fbe8 	bl	800d400 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002c30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	22da      	movs	r2, #218	; 0xda
 8002c3e:	21df      	movs	r1, #223	; 0xdf
 8002c40:	481f      	ldr	r0, [pc, #124]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c42:	f7fe ff6f 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002c46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2314      	movs	r3, #20
 8002c52:	2264      	movs	r2, #100	; 0x64
 8002c54:	21d8      	movs	r1, #216	; 0xd8
 8002c56:	200a      	movs	r0, #10
 8002c58:	f7fe fcf9 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 8002c5c:	4927      	ldr	r1, [pc, #156]	; (8002cfc <showCurrentParameters+0x28c>)
 8002c5e:	4818      	ldr	r0, [pc, #96]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c60:	f00a fbce 	bl	800d400 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002c64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	22da      	movs	r2, #218	; 0xda
 8002c72:	2114      	movs	r1, #20
 8002c74:	4812      	ldr	r0, [pc, #72]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c76:	f7fe ff55 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002c7a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	2305      	movs	r3, #5
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2314      	movs	r3, #20
 8002c86:	225a      	movs	r2, #90	; 0x5a
 8002c88:	21d8      	movs	r1, #216	; 0xd8
 8002c8a:	2078      	movs	r0, #120	; 0x78
 8002c8c:	f7fe fcdf 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8002c90:	491b      	ldr	r1, [pc, #108]	; (8002d00 <showCurrentParameters+0x290>)
 8002c92:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <showCurrentParameters+0x250>)
 8002c94:	f00a fbb4 	bl	800d400 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002c98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	22da      	movs	r2, #218	; 0xda
 8002ca6:	2184      	movs	r1, #132	; 0x84
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <showCurrentParameters+0x250>)
 8002caa:	f7fe ff3b 	bl	8001b24 <EF_PutString>
}
 8002cae:	bf00      	nop
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	08013fd8 	.word	0x08013fd8
 8002cbc:	0801105c 	.word	0x0801105c
 8002cc0:	200002bc 	.word	0x200002bc
 8002cc4:	0801106c 	.word	0x0801106c
 8002cc8:	0801107c 	.word	0x0801107c
 8002ccc:	0801108c 	.word	0x0801108c
 8002cd0:	0801109c 	.word	0x0801109c
 8002cd4:	20000254 	.word	0x20000254
 8002cd8:	080110ac 	.word	0x080110ac
 8002cdc:	20000260 	.word	0x20000260
 8002ce0:	080110c0 	.word	0x080110c0
 8002ce4:	20000264 	.word	0x20000264
 8002ce8:	080110d4 	.word	0x080110d4
 8002cec:	2000025c 	.word	0x2000025c
 8002cf0:	080110e4 	.word	0x080110e4
 8002cf4:	08012060 	.word	0x08012060
 8002cf8:	080110fc 	.word	0x080110fc
 8002cfc:	08011108 	.word	0x08011108
 8002d00:	08011114 	.word	0x08011114

08002d04 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002d0a:	2015      	movs	r0, #21
 8002d0c:	f002 fcbc 	bl	8005688 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002d10:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002d14:	f7ff f8f0 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002d18:	485c      	ldr	r0, [pc, #368]	; (8002e8c <showControlPanel+0x188>)
 8002d1a:	f7fe fce9 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8002d1e:	495c      	ldr	r1, [pc, #368]	; (8002e90 <showControlPanel+0x18c>)
 8002d20:	485c      	ldr	r0, [pc, #368]	; (8002e94 <showControlPanel+0x190>)
 8002d22:	f00a fb6d 	bl	800d400 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d26:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	231f      	movs	r3, #31
 8002d32:	220a      	movs	r2, #10
 8002d34:	2123      	movs	r1, #35	; 0x23
 8002d36:	4857      	ldr	r0, [pc, #348]	; (8002e94 <showControlPanel+0x190>)
 8002d38:	f7fe fef4 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002d3c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2329      	movs	r3, #41	; 0x29
 8002d44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d48:	2129      	movs	r1, #41	; 0x29
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7fe fa20 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002d50:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	232b      	movs	r3, #43	; 0x2b
 8002d58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d5c:	212b      	movs	r1, #43	; 0x2b
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fe fa16 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8002d64:	494c      	ldr	r1, [pc, #304]	; (8002e98 <showControlPanel+0x194>)
 8002d66:	484b      	ldr	r0, [pc, #300]	; (8002e94 <showControlPanel+0x190>)
 8002d68:	f00a fb4a 	bl	800d400 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	223c      	movs	r2, #60	; 0x3c
 8002d7a:	2114      	movs	r1, #20
 8002d7c:	4845      	ldr	r0, [pc, #276]	; (8002e94 <showControlPanel+0x190>)
 8002d7e:	f7fe fed1 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8002d82:	4946      	ldr	r1, [pc, #280]	; (8002e9c <showControlPanel+0x198>)
 8002d84:	4843      	ldr	r0, [pc, #268]	; (8002e94 <showControlPanel+0x190>)
 8002d86:	f00a fb3b 	bl	800d400 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002d8a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2301      	movs	r3, #1
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2300      	movs	r3, #0
 8002d96:	225a      	movs	r2, #90	; 0x5a
 8002d98:	2114      	movs	r1, #20
 8002d9a:	483e      	ldr	r0, [pc, #248]	; (8002e94 <showControlPanel+0x190>)
 8002d9c:	f7fe fec2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8002da0:	493f      	ldr	r1, [pc, #252]	; (8002ea0 <showControlPanel+0x19c>)
 8002da2:	483c      	ldr	r0, [pc, #240]	; (8002e94 <showControlPanel+0x190>)
 8002da4:	f00a fb2c 	bl	800d400 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002da8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	2278      	movs	r2, #120	; 0x78
 8002db6:	2114      	movs	r1, #20
 8002db8:	4836      	ldr	r0, [pc, #216]	; (8002e94 <showControlPanel+0x190>)
 8002dba:	f7fe feb3 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8002dbe:	4939      	ldr	r1, [pc, #228]	; (8002ea4 <showControlPanel+0x1a0>)
 8002dc0:	4834      	ldr	r0, [pc, #208]	; (8002e94 <showControlPanel+0x190>)
 8002dc2:	f00a fb1d 	bl	800d400 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002dc6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2296      	movs	r2, #150	; 0x96
 8002dd4:	2114      	movs	r1, #20
 8002dd6:	482f      	ldr	r0, [pc, #188]	; (8002e94 <showControlPanel+0x190>)
 8002dd8:	f7fe fea4 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002ddc:	4832      	ldr	r0, [pc, #200]	; (8002ea8 <showControlPanel+0x1a4>)
 8002dde:	f7fe fc87 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002de2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	2305      	movs	r3, #5
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2314      	movs	r3, #20
 8002dee:	225f      	movs	r2, #95	; 0x5f
 8002df0:	21d8      	movs	r1, #216	; 0xd8
 8002df2:	20dc      	movs	r0, #220	; 0xdc
 8002df4:	f7fe fc2b 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8002df8:	492c      	ldr	r1, [pc, #176]	; (8002eac <showControlPanel+0x1a8>)
 8002dfa:	4826      	ldr	r0, [pc, #152]	; (8002e94 <showControlPanel+0x190>)
 8002dfc:	f00a fb00 	bl	800d400 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e00:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	2300      	movs	r3, #0
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	22da      	movs	r2, #218	; 0xda
 8002e0e:	21df      	movs	r1, #223	; 0xdf
 8002e10:	4820      	ldr	r0, [pc, #128]	; (8002e94 <showControlPanel+0x190>)
 8002e12:	f7fe fe87 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002e16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	2305      	movs	r3, #5
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2314      	movs	r3, #20
 8002e22:	2264      	movs	r2, #100	; 0x64
 8002e24:	21d8      	movs	r1, #216	; 0xd8
 8002e26:	200a      	movs	r0, #10
 8002e28:	f7fe fc11 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8002e2c:	4920      	ldr	r1, [pc, #128]	; (8002eb0 <showControlPanel+0x1ac>)
 8002e2e:	4819      	ldr	r0, [pc, #100]	; (8002e94 <showControlPanel+0x190>)
 8002e30:	f00a fae6 	bl	800d400 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e34:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	22da      	movs	r2, #218	; 0xda
 8002e42:	2114      	movs	r1, #20
 8002e44:	4813      	ldr	r0, [pc, #76]	; (8002e94 <showControlPanel+0x190>)
 8002e46:	f7fe fe6d 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002e4a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	2305      	movs	r3, #5
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2314      	movs	r3, #20
 8002e56:	225a      	movs	r2, #90	; 0x5a
 8002e58:	21d8      	movs	r1, #216	; 0xd8
 8002e5a:	2078      	movs	r0, #120	; 0x78
 8002e5c:	f7fe fbf7 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8002e60:	4914      	ldr	r1, [pc, #80]	; (8002eb4 <showControlPanel+0x1b0>)
 8002e62:	480c      	ldr	r0, [pc, #48]	; (8002e94 <showControlPanel+0x190>)
 8002e64:	f00a facc 	bl	800d400 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	22da      	movs	r2, #218	; 0xda
 8002e76:	217e      	movs	r1, #126	; 0x7e
 8002e78:	4806      	ldr	r0, [pc, #24]	; (8002e94 <showControlPanel+0x190>)
 8002e7a:	f7fe fe53 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002e7e:	4803      	ldr	r0, [pc, #12]	; (8002e8c <showControlPanel+0x188>)
 8002e80:	f7fe fc36 	bl	80016f0 <EF_SetFont>


}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	08013fd8 	.word	0x08013fd8
 8002e90:	0801111c 	.word	0x0801111c
 8002e94:	200002bc 	.word	0x200002bc
 8002e98:	08011130 	.word	0x08011130
 8002e9c:	08011144 	.word	0x08011144
 8002ea0:	08011158 	.word	0x08011158
 8002ea4:	0801116c 	.word	0x0801116c
 8002ea8:	08012060 	.word	0x08012060
 8002eac:	08011180 	.word	0x08011180
 8002eb0:	0801118c 	.word	0x0801118c
 8002eb4:	08011194 	.word	0x08011194

08002eb8 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002ebe:	2016      	movs	r0, #22
 8002ec0:	f002 fbe2 	bl	8005688 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002ec4:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002ec8:	f7ff f816 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002ecc:	485b      	ldr	r0, [pc, #364]	; (800303c <showLightsControlPanel+0x184>)
 8002ece:	f7fe fc0f 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8002ed2:	495b      	ldr	r1, [pc, #364]	; (8003040 <showLightsControlPanel+0x188>)
 8002ed4:	485b      	ldr	r0, [pc, #364]	; (8003044 <showLightsControlPanel+0x18c>)
 8002ed6:	f00a fa93 	bl	800d400 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002eda:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002ee8:	220a      	movs	r2, #10
 8002eea:	2146      	movs	r1, #70	; 0x46
 8002eec:	4855      	ldr	r0, [pc, #340]	; (8003044 <showLightsControlPanel+0x18c>)
 8002eee:	f7fe fe19 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002ef2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2329      	movs	r3, #41	; 0x29
 8002efa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002efe:	2129      	movs	r1, #41	; 0x29
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fe f945 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002f06:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	232b      	movs	r3, #43	; 0x2b
 8002f0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f12:	212b      	movs	r1, #43	; 0x2b
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fe f93b 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 8002f1a:	494b      	ldr	r1, [pc, #300]	; (8003048 <showLightsControlPanel+0x190>)
 8002f1c:	4849      	ldr	r0, [pc, #292]	; (8003044 <showLightsControlPanel+0x18c>)
 8002f1e:	f00a fa6f 	bl	800d400 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f22:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	223c      	movs	r2, #60	; 0x3c
 8002f30:	2114      	movs	r1, #20
 8002f32:	4844      	ldr	r0, [pc, #272]	; (8003044 <showLightsControlPanel+0x18c>)
 8002f34:	f7fe fdf6 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 8002f38:	4944      	ldr	r1, [pc, #272]	; (800304c <showLightsControlPanel+0x194>)
 8002f3a:	4842      	ldr	r0, [pc, #264]	; (8003044 <showLightsControlPanel+0x18c>)
 8002f3c:	f00a fa60 	bl	800d400 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002f40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2301      	movs	r3, #1
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	225a      	movs	r2, #90	; 0x5a
 8002f4e:	2114      	movs	r1, #20
 8002f50:	483c      	ldr	r0, [pc, #240]	; (8003044 <showLightsControlPanel+0x18c>)
 8002f52:	f7fe fde7 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 8002f56:	493e      	ldr	r1, [pc, #248]	; (8003050 <showLightsControlPanel+0x198>)
 8002f58:	483a      	ldr	r0, [pc, #232]	; (8003044 <showLightsControlPanel+0x18c>)
 8002f5a:	f00a fa51 	bl	800d400 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f5e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	2300      	movs	r3, #0
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2278      	movs	r2, #120	; 0x78
 8002f6c:	2114      	movs	r1, #20
 8002f6e:	4835      	ldr	r0, [pc, #212]	; (8003044 <showLightsControlPanel+0x18c>)
 8002f70:	f7fe fdd8 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8002f74:	4937      	ldr	r1, [pc, #220]	; (8003054 <showLightsControlPanel+0x19c>)
 8002f76:	4833      	ldr	r0, [pc, #204]	; (8003044 <showLightsControlPanel+0x18c>)
 8002f78:	f00a fa42 	bl	800d400 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2300      	movs	r3, #0
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2300      	movs	r3, #0
 8002f88:	2296      	movs	r2, #150	; 0x96
 8002f8a:	2114      	movs	r1, #20
 8002f8c:	482d      	ldr	r0, [pc, #180]	; (8003044 <showLightsControlPanel+0x18c>)
 8002f8e:	f7fe fdc9 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002f92:	4831      	ldr	r0, [pc, #196]	; (8003058 <showLightsControlPanel+0x1a0>)
 8002f94:	f7fe fbac 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002f98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2314      	movs	r3, #20
 8002fa4:	225f      	movs	r2, #95	; 0x5f
 8002fa6:	21d8      	movs	r1, #216	; 0xd8
 8002fa8:	20dc      	movs	r0, #220	; 0xdc
 8002faa:	f7fe fb50 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8002fae:	492b      	ldr	r1, [pc, #172]	; (800305c <showLightsControlPanel+0x1a4>)
 8002fb0:	4824      	ldr	r0, [pc, #144]	; (8003044 <showLightsControlPanel+0x18c>)
 8002fb2:	f00a fa25 	bl	800d400 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002fb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	22da      	movs	r2, #218	; 0xda
 8002fc4:	21e6      	movs	r1, #230	; 0xe6
 8002fc6:	481f      	ldr	r0, [pc, #124]	; (8003044 <showLightsControlPanel+0x18c>)
 8002fc8:	f7fe fdac 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002fcc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	2305      	movs	r3, #5
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2314      	movs	r3, #20
 8002fd8:	225a      	movs	r2, #90	; 0x5a
 8002fda:	21d8      	movs	r1, #216	; 0xd8
 8002fdc:	2078      	movs	r0, #120	; 0x78
 8002fde:	f7fe fb36 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8002fe2:	491f      	ldr	r1, [pc, #124]	; (8003060 <showLightsControlPanel+0x1a8>)
 8002fe4:	4817      	ldr	r0, [pc, #92]	; (8003044 <showLightsControlPanel+0x18c>)
 8002fe6:	f00a fa0b 	bl	800d400 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002fea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	22da      	movs	r2, #218	; 0xda
 8002ff8:	217e      	movs	r1, #126	; 0x7e
 8002ffa:	4812      	ldr	r0, [pc, #72]	; (8003044 <showLightsControlPanel+0x18c>)
 8002ffc:	f7fe fd92 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003000:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	2305      	movs	r3, #5
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2314      	movs	r3, #20
 800300c:	2264      	movs	r2, #100	; 0x64
 800300e:	21d8      	movs	r1, #216	; 0xd8
 8003010:	200a      	movs	r0, #10
 8003012:	f7fe fb1c 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003016:	4913      	ldr	r1, [pc, #76]	; (8003064 <showLightsControlPanel+0x1ac>)
 8003018:	480a      	ldr	r0, [pc, #40]	; (8003044 <showLightsControlPanel+0x18c>)
 800301a:	f00a f9f1 	bl	800d400 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800301e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	2300      	movs	r3, #0
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2300      	movs	r3, #0
 800302a:	22da      	movs	r2, #218	; 0xda
 800302c:	210d      	movs	r1, #13
 800302e:	4805      	ldr	r0, [pc, #20]	; (8003044 <showLightsControlPanel+0x18c>)
 8003030:	f7fe fd78 	bl	8001b24 <EF_PutString>


}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	08013fd8 	.word	0x08013fd8
 8003040:	080111a0 	.word	0x080111a0
 8003044:	200002bc 	.word	0x200002bc
 8003048:	080111b0 	.word	0x080111b0
 800304c:	080111c0 	.word	0x080111c0
 8003050:	080111d0 	.word	0x080111d0
 8003054:	080111e0 	.word	0x080111e0
 8003058:	08012060 	.word	0x08012060
 800305c:	080111f0 	.word	0x080111f0
 8003060:	080111f8 	.word	0x080111f8
 8003064:	08011204 	.word	0x08011204

08003068 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800306e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003072:	f7fe ff41 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003076:	487d      	ldr	r0, [pc, #500]	; (800326c <showClockSetPanel+0x204>)
 8003078:	f7fe fb3a 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 800307c:	f7ff fb7e 	bl	800277c <DS3231_GetHour>
 8003080:	4603      	mov	r3, r0
 8003082:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003084:	f7ff fb86 	bl	8002794 <DS3231_GetMinute>
 8003088:	4603      	mov	r3, r0
 800308a:	71bb      	strb	r3, [r7, #6]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 800308c:	4978      	ldr	r1, [pc, #480]	; (8003270 <showClockSetPanel+0x208>)
 800308e:	4879      	ldr	r0, [pc, #484]	; (8003274 <showClockSetPanel+0x20c>)
 8003090:	f00a f9b6 	bl	800d400 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003094:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	2300      	movs	r3, #0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80030a2:	220a      	movs	r2, #10
 80030a4:	212f      	movs	r1, #47	; 0x2f
 80030a6:	4873      	ldr	r0, [pc, #460]	; (8003274 <showClockSetPanel+0x20c>)
 80030a8:	f7fe fd3c 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80030ac:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2329      	movs	r3, #41	; 0x29
 80030b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030b8:	2129      	movs	r1, #41	; 0x29
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fe f868 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80030c0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	232b      	movs	r3, #43	; 0x2b
 80030c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030cc:	212b      	movs	r1, #43	; 0x2b
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7fe f85e 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	461a      	mov	r2, r3
 80030d8:	4967      	ldr	r1, [pc, #412]	; (8003278 <showClockSetPanel+0x210>)
 80030da:	4866      	ldr	r0, [pc, #408]	; (8003274 <showClockSetPanel+0x20c>)
 80030dc:	f00a f990 	bl	800d400 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80030e0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	2246      	movs	r2, #70	; 0x46
 80030ee:	2114      	movs	r1, #20
 80030f0:	4860      	ldr	r0, [pc, #384]	; (8003274 <showClockSetPanel+0x20c>)
 80030f2:	f7fe fd17 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 80030f6:	79bb      	ldrb	r3, [r7, #6]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4960      	ldr	r1, [pc, #384]	; (800327c <showClockSetPanel+0x214>)
 80030fc:	485d      	ldr	r0, [pc, #372]	; (8003274 <showClockSetPanel+0x20c>)
 80030fe:	f00a f97f 	bl	800d400 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003102:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	2301      	movs	r3, #1
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2300      	movs	r3, #0
 800310e:	226e      	movs	r2, #110	; 0x6e
 8003110:	2114      	movs	r1, #20
 8003112:	4858      	ldr	r0, [pc, #352]	; (8003274 <showClockSetPanel+0x20c>)
 8003114:	f7fe fd06 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003118:	4859      	ldr	r0, [pc, #356]	; (8003280 <showClockSetPanel+0x218>)
 800311a:	f7fe fae9 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800311e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	2305      	movs	r3, #5
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2315      	movs	r3, #21
 800312a:	221e      	movs	r2, #30
 800312c:	214b      	movs	r1, #75	; 0x4b
 800312e:	20f0      	movs	r0, #240	; 0xf0
 8003130:	f7fe fa8d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003134:	4953      	ldr	r1, [pc, #332]	; (8003284 <showClockSetPanel+0x21c>)
 8003136:	484f      	ldr	r0, [pc, #316]	; (8003274 <showClockSetPanel+0x20c>)
 8003138:	f00a f962 	bl	800d400 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 800313c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	2300      	movs	r3, #0
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	224d      	movs	r2, #77	; 0x4d
 800314a:	21f3      	movs	r1, #243	; 0xf3
 800314c:	4849      	ldr	r0, [pc, #292]	; (8003274 <showClockSetPanel+0x20c>)
 800314e:	f7fe fce9 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003152:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	2305      	movs	r3, #5
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2315      	movs	r3, #21
 800315e:	221e      	movs	r2, #30
 8003160:	214b      	movs	r1, #75	; 0x4b
 8003162:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003166:	f7fe fa72 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 800316a:	4947      	ldr	r1, [pc, #284]	; (8003288 <showClockSetPanel+0x220>)
 800316c:	4841      	ldr	r0, [pc, #260]	; (8003274 <showClockSetPanel+0x20c>)
 800316e:	f00a f947 	bl	800d400 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003172:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	2300      	movs	r3, #0
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	224d      	movs	r2, #77	; 0x4d
 8003180:	f240 111d 	movw	r1, #285	; 0x11d
 8003184:	483b      	ldr	r0, [pc, #236]	; (8003274 <showClockSetPanel+0x20c>)
 8003186:	f7fe fccd 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800318a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	2305      	movs	r3, #5
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2315      	movs	r3, #21
 8003196:	221e      	movs	r2, #30
 8003198:	2173      	movs	r1, #115	; 0x73
 800319a:	20f0      	movs	r0, #240	; 0xf0
 800319c:	f7fe fa57 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80031a0:	4938      	ldr	r1, [pc, #224]	; (8003284 <showClockSetPanel+0x21c>)
 80031a2:	4834      	ldr	r0, [pc, #208]	; (8003274 <showClockSetPanel+0x20c>)
 80031a4:	f00a f92c 	bl	800d400 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80031a8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2300      	movs	r3, #0
 80031b4:	2275      	movs	r2, #117	; 0x75
 80031b6:	21f5      	movs	r1, #245	; 0xf5
 80031b8:	482e      	ldr	r0, [pc, #184]	; (8003274 <showClockSetPanel+0x20c>)
 80031ba:	f7fe fcb3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80031be:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	2305      	movs	r3, #5
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2315      	movs	r3, #21
 80031ca:	221e      	movs	r2, #30
 80031cc:	2173      	movs	r1, #115	; 0x73
 80031ce:	f44f 708c 	mov.w	r0, #280	; 0x118
 80031d2:	f7fe fa3c 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 80031d6:	492d      	ldr	r1, [pc, #180]	; (800328c <showClockSetPanel+0x224>)
 80031d8:	4826      	ldr	r0, [pc, #152]	; (8003274 <showClockSetPanel+0x20c>)
 80031da:	f00a f911 	bl	800d400 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80031de:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2300      	movs	r3, #0
 80031ea:	2275      	movs	r2, #117	; 0x75
 80031ec:	f240 111b 	movw	r1, #283	; 0x11b
 80031f0:	4820      	ldr	r0, [pc, #128]	; (8003274 <showClockSetPanel+0x20c>)
 80031f2:	f7fe fc97 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80031f6:	4822      	ldr	r0, [pc, #136]	; (8003280 <showClockSetPanel+0x218>)
 80031f8:	f7fe fa7a 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80031fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	2305      	movs	r3, #5
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2314      	movs	r3, #20
 8003208:	225f      	movs	r2, #95	; 0x5f
 800320a:	21d8      	movs	r1, #216	; 0xd8
 800320c:	20dc      	movs	r0, #220	; 0xdc
 800320e:	f7fe fa1e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003212:	491f      	ldr	r1, [pc, #124]	; (8003290 <showClockSetPanel+0x228>)
 8003214:	4817      	ldr	r0, [pc, #92]	; (8003274 <showClockSetPanel+0x20c>)
 8003216:	f00a f8f3 	bl	800d400 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800321a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	2300      	movs	r3, #0
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2300      	movs	r3, #0
 8003226:	22da      	movs	r2, #218	; 0xda
 8003228:	21e6      	movs	r1, #230	; 0xe6
 800322a:	4812      	ldr	r0, [pc, #72]	; (8003274 <showClockSetPanel+0x20c>)
 800322c:	f7fe fc7a 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003230:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	2305      	movs	r3, #5
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	2314      	movs	r3, #20
 800323c:	2264      	movs	r2, #100	; 0x64
 800323e:	21d8      	movs	r1, #216	; 0xd8
 8003240:	200a      	movs	r0, #10
 8003242:	f7fe fa04 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003246:	4913      	ldr	r1, [pc, #76]	; (8003294 <showClockSetPanel+0x22c>)
 8003248:	480a      	ldr	r0, [pc, #40]	; (8003274 <showClockSetPanel+0x20c>)
 800324a:	f00a f8d9 	bl	800d400 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800324e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2300      	movs	r3, #0
 800325a:	22da      	movs	r2, #218	; 0xda
 800325c:	210d      	movs	r1, #13
 800325e:	4805      	ldr	r0, [pc, #20]	; (8003274 <showClockSetPanel+0x20c>)
 8003260:	f7fe fc60 	bl	8001b24 <EF_PutString>
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	08013fd8 	.word	0x08013fd8
 8003270:	08011210 	.word	0x08011210
 8003274:	200002bc 	.word	0x200002bc
 8003278:	08011220 	.word	0x08011220
 800327c:	0801122c 	.word	0x0801122c
 8003280:	08012060 	.word	0x08012060
 8003284:	0801123c 	.word	0x0801123c
 8003288:	08011240 	.word	0x08011240
 800328c:	08011244 	.word	0x08011244
 8003290:	08011248 	.word	0x08011248
 8003294:	08011250 	.word	0x08011250

08003298 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800329e:	f24c 6018 	movw	r0, #50712	; 0xc618
 80032a2:	f7fe fe29 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80032a6:	487a      	ldr	r0, [pc, #488]	; (8003490 <showPreparedActivitiesPanel+0x1f8>)
 80032a8:	f7fe fa22 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 80032ac:	4979      	ldr	r1, [pc, #484]	; (8003494 <showPreparedActivitiesPanel+0x1fc>)
 80032ae:	487a      	ldr	r0, [pc, #488]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 80032b0:	f00a f8a6 	bl	800d400 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80032b4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	2300      	movs	r3, #0
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	231f      	movs	r3, #31
 80032c0:	220a      	movs	r2, #10
 80032c2:	212f      	movs	r1, #47	; 0x2f
 80032c4:	4874      	ldr	r0, [pc, #464]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 80032c6:	f7fe fc2d 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80032ca:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2329      	movs	r3, #41	; 0x29
 80032d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032d6:	2129      	movs	r1, #41	; 0x29
 80032d8:	2000      	movs	r0, #0
 80032da:	f7fd ff59 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80032de:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	232b      	movs	r3, #43	; 0x2b
 80032e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032ea:	212b      	movs	r1, #43	; 0x2b
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fd ff4f 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80032f2:	486a      	ldr	r0, [pc, #424]	; (800349c <showPreparedActivitiesPanel+0x204>)
 80032f4:	f7fe f9fc 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80032f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2305      	movs	r3, #5
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2314      	movs	r3, #20
 8003304:	2264      	movs	r2, #100	; 0x64
 8003306:	21d8      	movs	r1, #216	; 0xd8
 8003308:	200a      	movs	r0, #10
 800330a:	f7fe f9a0 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800330e:	4964      	ldr	r1, [pc, #400]	; (80034a0 <showPreparedActivitiesPanel+0x208>)
 8003310:	4861      	ldr	r0, [pc, #388]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 8003312:	f00a f875 	bl	800d400 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003316:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	2300      	movs	r3, #0
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2300      	movs	r3, #0
 8003322:	22da      	movs	r2, #218	; 0xda
 8003324:	210d      	movs	r1, #13
 8003326:	485c      	ldr	r0, [pc, #368]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 8003328:	f7fe fbfc 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 800332c:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <showPreparedActivitiesPanel+0x20c>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d029      	beq.n	8003388 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003334:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	230a      	movs	r3, #10
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2328      	movs	r3, #40	; 0x28
 8003340:	2278      	movs	r2, #120	; 0x78
 8003342:	213c      	movs	r1, #60	; 0x3c
 8003344:	2064      	movs	r0, #100	; 0x64
 8003346:	f7fe f982 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 800334a:	4957      	ldr	r1, [pc, #348]	; (80034a8 <showPreparedActivitiesPanel+0x210>)
 800334c:	4852      	ldr	r0, [pc, #328]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 800334e:	f00a f857 	bl	800d400 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003352:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	2300      	movs	r3, #0
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2300      	movs	r3, #0
 800335e:	223e      	movs	r2, #62	; 0x3e
 8003360:	2177      	movs	r1, #119	; 0x77
 8003362:	484d      	ldr	r0, [pc, #308]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 8003364:	f7fe fbde 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003368:	4950      	ldr	r1, [pc, #320]	; (80034ac <showPreparedActivitiesPanel+0x214>)
 800336a:	484b      	ldr	r0, [pc, #300]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 800336c:	f00a f848 	bl	800d400 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003370:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	2300      	movs	r3, #0
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2300      	movs	r3, #0
 800337c:	2250      	movs	r2, #80	; 0x50
 800337e:	2193      	movs	r1, #147	; 0x93
 8003380:	4845      	ldr	r0, [pc, #276]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 8003382:	f7fe fbcf 	bl	8001b24 <EF_PutString>
 8003386:	e028      	b.n	80033da <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003388:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	230a      	movs	r3, #10
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2328      	movs	r3, #40	; 0x28
 8003394:	2278      	movs	r2, #120	; 0x78
 8003396:	213c      	movs	r1, #60	; 0x3c
 8003398:	2064      	movs	r0, #100	; 0x64
 800339a:	f7fe f958 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 800339e:	4942      	ldr	r1, [pc, #264]	; (80034a8 <showPreparedActivitiesPanel+0x210>)
 80033a0:	483d      	ldr	r0, [pc, #244]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 80033a2:	f00a f82d 	bl	800d400 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80033a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	2300      	movs	r3, #0
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2300      	movs	r3, #0
 80033b2:	223e      	movs	r2, #62	; 0x3e
 80033b4:	2177      	movs	r1, #119	; 0x77
 80033b6:	4838      	ldr	r0, [pc, #224]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 80033b8:	f7fe fbb4 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80033bc:	493c      	ldr	r1, [pc, #240]	; (80034b0 <showPreparedActivitiesPanel+0x218>)
 80033be:	4836      	ldr	r0, [pc, #216]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 80033c0:	f00a f81e 	bl	800d400 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80033c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	2250      	movs	r2, #80	; 0x50
 80033d2:	2193      	movs	r1, #147	; 0x93
 80033d4:	4830      	ldr	r0, [pc, #192]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 80033d6:	f7fe fba5 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 80033da:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <showPreparedActivitiesPanel+0x20c>)
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d029      	beq.n	8003436 <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80033e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	230a      	movs	r3, #10
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2328      	movs	r3, #40	; 0x28
 80033ee:	2278      	movs	r2, #120	; 0x78
 80033f0:	2178      	movs	r1, #120	; 0x78
 80033f2:	2064      	movs	r0, #100	; 0x64
 80033f4:	f7fe f92b 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 80033f8:	492e      	ldr	r1, [pc, #184]	; (80034b4 <showPreparedActivitiesPanel+0x21c>)
 80033fa:	4827      	ldr	r0, [pc, #156]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 80033fc:	f00a f800 	bl	800d400 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003400:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	2300      	movs	r3, #0
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2300      	movs	r3, #0
 800340c:	227a      	movs	r2, #122	; 0x7a
 800340e:	2169      	movs	r1, #105	; 0x69
 8003410:	4821      	ldr	r0, [pc, #132]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 8003412:	f7fe fb87 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003416:	4925      	ldr	r1, [pc, #148]	; (80034ac <showPreparedActivitiesPanel+0x214>)
 8003418:	481f      	ldr	r0, [pc, #124]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 800341a:	f009 fff1 	bl	800d400 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800341e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	2300      	movs	r3, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2300      	movs	r3, #0
 800342a:	228c      	movs	r2, #140	; 0x8c
 800342c:	2193      	movs	r1, #147	; 0x93
 800342e:	481a      	ldr	r0, [pc, #104]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 8003430:	f7fe fb78 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003434:	e028      	b.n	8003488 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003436:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	230a      	movs	r3, #10
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2328      	movs	r3, #40	; 0x28
 8003442:	2278      	movs	r2, #120	; 0x78
 8003444:	2178      	movs	r1, #120	; 0x78
 8003446:	2064      	movs	r0, #100	; 0x64
 8003448:	f7fe f901 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 800344c:	4919      	ldr	r1, [pc, #100]	; (80034b4 <showPreparedActivitiesPanel+0x21c>)
 800344e:	4812      	ldr	r0, [pc, #72]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 8003450:	f009 ffd6 	bl	800d400 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003454:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	2300      	movs	r3, #0
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2300      	movs	r3, #0
 8003460:	227a      	movs	r2, #122	; 0x7a
 8003462:	2169      	movs	r1, #105	; 0x69
 8003464:	480c      	ldr	r0, [pc, #48]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 8003466:	f7fe fb5d 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 800346a:	4911      	ldr	r1, [pc, #68]	; (80034b0 <showPreparedActivitiesPanel+0x218>)
 800346c:	480a      	ldr	r0, [pc, #40]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 800346e:	f009 ffc7 	bl	800d400 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003472:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2300      	movs	r3, #0
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2300      	movs	r3, #0
 800347e:	228c      	movs	r2, #140	; 0x8c
 8003480:	2193      	movs	r1, #147	; 0x93
 8003482:	4805      	ldr	r0, [pc, #20]	; (8003498 <showPreparedActivitiesPanel+0x200>)
 8003484:	f7fe fb4e 	bl	8001b24 <EF_PutString>
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	08013fd8 	.word	0x08013fd8
 8003494:	08011258 	.word	0x08011258
 8003498:	200002bc 	.word	0x200002bc
 800349c:	08012060 	.word	0x08012060
 80034a0:	08011250 	.word	0x08011250
 80034a4:	20000270 	.word	0x20000270
 80034a8:	08011268 	.word	0x08011268
 80034ac:	08011274 	.word	0x08011274
 80034b0:	08011278 	.word	0x08011278
 80034b4:	0801127c 	.word	0x0801127c

080034b8 <showWSLedPanel>:
//
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showWSLedPanel()
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80034be:	f24c 6018 	movw	r0, #50712	; 0xc618
 80034c2:	f7fe fd19 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80034c6:	48c8      	ldr	r0, [pc, #800]	; (80037e8 <showWSLedPanel+0x330>)
 80034c8:	f7fe f912 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 80034cc:	49c7      	ldr	r1, [pc, #796]	; (80037ec <showWSLedPanel+0x334>)
 80034ce:	48c8      	ldr	r0, [pc, #800]	; (80037f0 <showWSLedPanel+0x338>)
 80034d0:	f009 ff96 	bl	800d400 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80034d4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	231f      	movs	r3, #31
 80034e0:	220a      	movs	r2, #10
 80034e2:	2146      	movs	r1, #70	; 0x46
 80034e4:	48c2      	ldr	r0, [pc, #776]	; (80037f0 <showWSLedPanel+0x338>)
 80034e6:	f7fe fb1d 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80034ea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2329      	movs	r3, #41	; 0x29
 80034f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034f6:	2129      	movs	r1, #41	; 0x29
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fd fe49 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80034fe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	232b      	movs	r3, #43	; 0x2b
 8003506:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800350a:	212b      	movs	r1, #43	; 0x2b
 800350c:	2000      	movs	r0, #0
 800350e:	f7fd fe3f 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: 10");
 8003512:	49b8      	ldr	r1, [pc, #736]	; (80037f4 <showWSLedPanel+0x33c>)
 8003514:	48b6      	ldr	r0, [pc, #728]	; (80037f0 <showWSLedPanel+0x338>)
 8003516:	f009 ff73 	bl	800d400 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800351a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	2300      	movs	r3, #0
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2300      	movs	r3, #0
 8003526:	223c      	movs	r2, #60	; 0x3c
 8003528:	2114      	movs	r1, #20
 800352a:	48b1      	ldr	r0, [pc, #708]	; (80037f0 <showWSLedPanel+0x338>)
 800352c:	f7fe fafa 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8003530:	49b1      	ldr	r1, [pc, #708]	; (80037f8 <showWSLedPanel+0x340>)
 8003532:	48af      	ldr	r0, [pc, #700]	; (80037f0 <showWSLedPanel+0x338>)
 8003534:	f009 ff64 	bl	800d400 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003538:	f24c 6318 	movw	r3, #50712	; 0xc618
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	2300      	movs	r3, #0
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	225a      	movs	r2, #90	; 0x5a
 8003546:	2114      	movs	r1, #20
 8003548:	48a9      	ldr	r0, [pc, #676]	; (80037f0 <showWSLedPanel+0x338>)
 800354a:	f7fe faeb 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 800354e:	49ab      	ldr	r1, [pc, #684]	; (80037fc <showWSLedPanel+0x344>)
 8003550:	48a7      	ldr	r0, [pc, #668]	; (80037f0 <showWSLedPanel+0x338>)
 8003552:	f009 ff55 	bl	800d400 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003556:	f24c 6318 	movw	r3, #50712	; 0xc618
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2300      	movs	r3, #0
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	2278      	movs	r2, #120	; 0x78
 8003564:	2114      	movs	r1, #20
 8003566:	48a2      	ldr	r0, [pc, #648]	; (80037f0 <showWSLedPanel+0x338>)
 8003568:	f7fe fadc 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 800356c:	48a4      	ldr	r0, [pc, #656]	; (8003800 <showWSLedPanel+0x348>)
 800356e:	f7fe f8bf 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003572:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	2305      	movs	r3, #5
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	2315      	movs	r3, #21
 800357e:	221e      	movs	r2, #30
 8003580:	2141      	movs	r1, #65	; 0x41
 8003582:	20d9      	movs	r0, #217	; 0xd9
 8003584:	f7fe f863 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003588:	499e      	ldr	r1, [pc, #632]	; (8003804 <showWSLedPanel+0x34c>)
 800358a:	4899      	ldr	r0, [pc, #612]	; (80037f0 <showWSLedPanel+0x338>)
 800358c:	f009 ff38 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003590:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	2300      	movs	r3, #0
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2300      	movs	r3, #0
 800359c:	2243      	movs	r2, #67	; 0x43
 800359e:	21df      	movs	r1, #223	; 0xdf
 80035a0:	4893      	ldr	r0, [pc, #588]	; (80037f0 <showWSLedPanel+0x338>)
 80035a2:	f7fe fabf 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80035a6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	2305      	movs	r3, #5
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	2315      	movs	r3, #21
 80035b2:	221e      	movs	r2, #30
 80035b4:	2141      	movs	r1, #65	; 0x41
 80035b6:	20fc      	movs	r0, #252	; 0xfc
 80035b8:	f7fe f849 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 80035bc:	4992      	ldr	r1, [pc, #584]	; (8003808 <showWSLedPanel+0x350>)
 80035be:	488c      	ldr	r0, [pc, #560]	; (80037f0 <showWSLedPanel+0x338>)
 80035c0:	f009 ff1e 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80035c4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	2300      	movs	r3, #0
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2300      	movs	r3, #0
 80035d0:	2243      	movs	r2, #67	; 0x43
 80035d2:	f240 1101 	movw	r1, #257	; 0x101
 80035d6:	4886      	ldr	r0, [pc, #536]	; (80037f0 <showWSLedPanel+0x338>)
 80035d8:	f7fe faa4 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80035dc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2305      	movs	r3, #5
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2315      	movs	r3, #21
 80035e8:	221e      	movs	r2, #30
 80035ea:	2141      	movs	r1, #65	; 0x41
 80035ec:	f240 101f 	movw	r0, #287	; 0x11f
 80035f0:	f7fe f82d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 80035f4:	4985      	ldr	r1, [pc, #532]	; (800380c <showWSLedPanel+0x354>)
 80035f6:	487e      	ldr	r0, [pc, #504]	; (80037f0 <showWSLedPanel+0x338>)
 80035f8:	f009 ff02 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80035fc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	2300      	movs	r3, #0
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2300      	movs	r3, #0
 8003608:	2243      	movs	r2, #67	; 0x43
 800360a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800360e:	4878      	ldr	r0, [pc, #480]	; (80037f0 <showWSLedPanel+0x338>)
 8003610:	f7fe fa88 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	2305      	movs	r3, #5
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2315      	movs	r3, #21
 8003620:	2228      	movs	r2, #40	; 0x28
 8003622:	215f      	movs	r1, #95	; 0x5f
 8003624:	2096      	movs	r0, #150	; 0x96
 8003626:	f7fe f812 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 800362a:	4979      	ldr	r1, [pc, #484]	; (8003810 <showWSLedPanel+0x358>)
 800362c:	4870      	ldr	r0, [pc, #448]	; (80037f0 <showWSLedPanel+0x338>)
 800362e:	f009 fee7 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	2300      	movs	r3, #0
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2300      	movs	r3, #0
 800363e:	2261      	movs	r2, #97	; 0x61
 8003640:	219b      	movs	r1, #155	; 0x9b
 8003642:	486b      	ldr	r0, [pc, #428]	; (80037f0 <showWSLedPanel+0x338>)
 8003644:	f7fe fa6e 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	2305      	movs	r3, #5
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2315      	movs	r3, #21
 8003654:	2228      	movs	r2, #40	; 0x28
 8003656:	215f      	movs	r1, #95	; 0x5f
 8003658:	20ca      	movs	r0, #202	; 0xca
 800365a:	f7fd fff8 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 800365e:	496d      	ldr	r1, [pc, #436]	; (8003814 <showWSLedPanel+0x35c>)
 8003660:	4863      	ldr	r0, [pc, #396]	; (80037f0 <showWSLedPanel+0x338>)
 8003662:	f009 fecd 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	2300      	movs	r3, #0
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2300      	movs	r3, #0
 8003672:	2261      	movs	r2, #97	; 0x61
 8003674:	21d2      	movs	r1, #210	; 0xd2
 8003676:	485e      	ldr	r0, [pc, #376]	; (80037f0 <showWSLedPanel+0x338>)
 8003678:	f7fe fa54 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800367c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	2305      	movs	r3, #5
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2315      	movs	r3, #21
 8003688:	2228      	movs	r2, #40	; 0x28
 800368a:	215f      	movs	r1, #95	; 0x5f
 800368c:	20fe      	movs	r0, #254	; 0xfe
 800368e:	f7fd ffde 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003692:	4961      	ldr	r1, [pc, #388]	; (8003818 <showWSLedPanel+0x360>)
 8003694:	4856      	ldr	r0, [pc, #344]	; (80037f0 <showWSLedPanel+0x338>)
 8003696:	f009 feb3 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 800369a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	2300      	movs	r3, #0
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2300      	movs	r3, #0
 80036a6:	2261      	movs	r2, #97	; 0x61
 80036a8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80036ac:	4850      	ldr	r0, [pc, #320]	; (80037f0 <showWSLedPanel+0x338>)
 80036ae:	f7fe fa39 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80036b2:	231f      	movs	r3, #31
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	2305      	movs	r3, #5
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	2315      	movs	r3, #21
 80036bc:	2228      	movs	r2, #40	; 0x28
 80036be:	217d      	movs	r1, #125	; 0x7d
 80036c0:	2096      	movs	r0, #150	; 0x96
 80036c2:	f7fd ffc4 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80036c6:	4952      	ldr	r1, [pc, #328]	; (8003810 <showWSLedPanel+0x358>)
 80036c8:	4849      	ldr	r0, [pc, #292]	; (80037f0 <showWSLedPanel+0x338>)
 80036ca:	f009 fe99 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80036ce:	231f      	movs	r3, #31
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	2300      	movs	r3, #0
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2300      	movs	r3, #0
 80036d8:	227f      	movs	r2, #127	; 0x7f
 80036da:	219b      	movs	r1, #155	; 0x9b
 80036dc:	4844      	ldr	r0, [pc, #272]	; (80037f0 <showWSLedPanel+0x338>)
 80036de:	f7fe fa21 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80036e2:	231f      	movs	r3, #31
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2305      	movs	r3, #5
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2315      	movs	r3, #21
 80036ec:	2228      	movs	r2, #40	; 0x28
 80036ee:	217d      	movs	r1, #125	; 0x7d
 80036f0:	20ca      	movs	r0, #202	; 0xca
 80036f2:	f7fd ffac 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 80036f6:	4947      	ldr	r1, [pc, #284]	; (8003814 <showWSLedPanel+0x35c>)
 80036f8:	483d      	ldr	r0, [pc, #244]	; (80037f0 <showWSLedPanel+0x338>)
 80036fa:	f009 fe81 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80036fe:	231f      	movs	r3, #31
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2300      	movs	r3, #0
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2300      	movs	r3, #0
 8003708:	227f      	movs	r2, #127	; 0x7f
 800370a:	21d2      	movs	r1, #210	; 0xd2
 800370c:	4838      	ldr	r0, [pc, #224]	; (80037f0 <showWSLedPanel+0x338>)
 800370e:	f7fe fa09 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003712:	231f      	movs	r3, #31
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	2305      	movs	r3, #5
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	2315      	movs	r3, #21
 800371c:	2228      	movs	r2, #40	; 0x28
 800371e:	217d      	movs	r1, #125	; 0x7d
 8003720:	20fe      	movs	r0, #254	; 0xfe
 8003722:	f7fd ff94 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003726:	493c      	ldr	r1, [pc, #240]	; (8003818 <showWSLedPanel+0x360>)
 8003728:	4831      	ldr	r0, [pc, #196]	; (80037f0 <showWSLedPanel+0x338>)
 800372a:	f009 fe69 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800372e:	231f      	movs	r3, #31
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	2300      	movs	r3, #0
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2300      	movs	r3, #0
 8003738:	227f      	movs	r2, #127	; 0x7f
 800373a:	f44f 7183 	mov.w	r1, #262	; 0x106
 800373e:	482c      	ldr	r0, [pc, #176]	; (80037f0 <showWSLedPanel+0x338>)
 8003740:	f7fe f9f0 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8003744:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	2305      	movs	r3, #5
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2315      	movs	r3, #21
 8003750:	2250      	movs	r2, #80	; 0x50
 8003752:	219c      	movs	r1, #156	; 0x9c
 8003754:	2014      	movs	r0, #20
 8003756:	f7fd ff7a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 800375a:	4930      	ldr	r1, [pc, #192]	; (800381c <showWSLedPanel+0x364>)
 800375c:	4824      	ldr	r0, [pc, #144]	; (80037f0 <showWSLedPanel+0x338>)
 800375e:	f009 fe4f 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8003762:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	2300      	movs	r3, #0
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2300      	movs	r3, #0
 800376e:	229e      	movs	r2, #158	; 0x9e
 8003770:	211c      	movs	r1, #28
 8003772:	481f      	ldr	r0, [pc, #124]	; (80037f0 <showWSLedPanel+0x338>)
 8003774:	f7fe f9d6 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003778:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	2305      	movs	r3, #5
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2315      	movs	r3, #21
 8003784:	2250      	movs	r2, #80	; 0x50
 8003786:	219c      	movs	r1, #156	; 0x9c
 8003788:	2078      	movs	r0, #120	; 0x78
 800378a:	f7fd ff60 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 800378e:	4924      	ldr	r1, [pc, #144]	; (8003820 <showWSLedPanel+0x368>)
 8003790:	4817      	ldr	r0, [pc, #92]	; (80037f0 <showWSLedPanel+0x338>)
 8003792:	f009 fe35 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003796:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2300      	movs	r3, #0
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	229e      	movs	r2, #158	; 0x9e
 80037a4:	2187      	movs	r1, #135	; 0x87
 80037a6:	4812      	ldr	r0, [pc, #72]	; (80037f0 <showWSLedPanel+0x338>)
 80037a8:	f7fe f9bc 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80037ac:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	2305      	movs	r3, #5
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	2315      	movs	r3, #21
 80037b8:	2250      	movs	r2, #80	; 0x50
 80037ba:	219c      	movs	r1, #156	; 0x9c
 80037bc:	20dc      	movs	r0, #220	; 0xdc
 80037be:	f7fd ff46 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80037c2:	4918      	ldr	r1, [pc, #96]	; (8003824 <showWSLedPanel+0x36c>)
 80037c4:	480a      	ldr	r0, [pc, #40]	; (80037f0 <showWSLedPanel+0x338>)
 80037c6:	f009 fe1b 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80037ca:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2300      	movs	r3, #0
 80037d6:	229e      	movs	r2, #158	; 0x9e
 80037d8:	21e9      	movs	r1, #233	; 0xe9
 80037da:	4805      	ldr	r0, [pc, #20]	; (80037f0 <showWSLedPanel+0x338>)
 80037dc:	f7fe f9a2 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 80037e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80037e4:	e020      	b.n	8003828 <showWSLedPanel+0x370>
 80037e6:	bf00      	nop
 80037e8:	08013fd8 	.word	0x08013fd8
 80037ec:	08011288 	.word	0x08011288
 80037f0:	200002bc 	.word	0x200002bc
 80037f4:	08011294 	.word	0x08011294
 80037f8:	080112a4 	.word	0x080112a4
 80037fc:	080112ac 	.word	0x080112ac
 8003800:	08012060 	.word	0x08012060
 8003804:	0801123c 	.word	0x0801123c
 8003808:	08011244 	.word	0x08011244
 800380c:	080112b4 	.word	0x080112b4
 8003810:	080112b8 	.word	0x080112b8
 8003814:	080112bc 	.word	0x080112bc
 8003818:	080112c0 	.word	0x080112c0
 800381c:	080112c4 	.word	0x080112c4
 8003820:	08011278 	.word	0x08011278
 8003824:	080112cc 	.word	0x080112cc
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	2305      	movs	r3, #5
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	2315      	movs	r3, #21
 8003830:	2250      	movs	r2, #80	; 0x50
 8003832:	21bb      	movs	r1, #187	; 0xbb
 8003834:	2046      	movs	r0, #70	; 0x46
 8003836:	f7fd ff0a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 800383a:	4924      	ldr	r1, [pc, #144]	; (80038cc <showWSLedPanel+0x414>)
 800383c:	4824      	ldr	r0, [pc, #144]	; (80038d0 <showWSLedPanel+0x418>)
 800383e:	f009 fddf 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8003842:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	2300      	movs	r3, #0
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	22bd      	movs	r2, #189	; 0xbd
 8003850:	214e      	movs	r1, #78	; 0x4e
 8003852:	481f      	ldr	r0, [pc, #124]	; (80038d0 <showWSLedPanel+0x418>)
 8003854:	f7fe f966 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8003858:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	2305      	movs	r3, #5
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2315      	movs	r3, #21
 8003864:	2250      	movs	r2, #80	; 0x50
 8003866:	21bb      	movs	r1, #187	; 0xbb
 8003868:	20aa      	movs	r0, #170	; 0xaa
 800386a:	f7fd fef0 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 800386e:	4919      	ldr	r1, [pc, #100]	; (80038d4 <showWSLedPanel+0x41c>)
 8003870:	4817      	ldr	r0, [pc, #92]	; (80038d0 <showWSLedPanel+0x418>)
 8003872:	f009 fdc5 	bl	800d400 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8003876:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	2300      	movs	r3, #0
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	2300      	movs	r3, #0
 8003882:	22bd      	movs	r2, #189	; 0xbd
 8003884:	21b5      	movs	r1, #181	; 0xb5
 8003886:	4812      	ldr	r0, [pc, #72]	; (80038d0 <showWSLedPanel+0x418>)
 8003888:	f7fe f94c 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800388c:	4812      	ldr	r0, [pc, #72]	; (80038d8 <showWSLedPanel+0x420>)
 800388e:	f7fd ff2f 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003892:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	2305      	movs	r3, #5
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2314      	movs	r3, #20
 800389e:	2264      	movs	r2, #100	; 0x64
 80038a0:	21d8      	movs	r1, #216	; 0xd8
 80038a2:	200a      	movs	r0, #10
 80038a4:	f7fd fed3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80038a8:	490c      	ldr	r1, [pc, #48]	; (80038dc <showWSLedPanel+0x424>)
 80038aa:	4809      	ldr	r0, [pc, #36]	; (80038d0 <showWSLedPanel+0x418>)
 80038ac:	f009 fda8 	bl	800d400 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80038b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	2300      	movs	r3, #0
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	2300      	movs	r3, #0
 80038bc:	22da      	movs	r2, #218	; 0xda
 80038be:	210d      	movs	r1, #13
 80038c0:	4803      	ldr	r0, [pc, #12]	; (80038d0 <showWSLedPanel+0x418>)
 80038c2:	f7fe f92f 	bl	8001b24 <EF_PutString>


}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	080112d4 	.word	0x080112d4
 80038d0:	200002bc 	.word	0x200002bc
 80038d4:	080112dc 	.word	0x080112dc
 80038d8:	08012060 	.word	0x08012060
 80038dc:	08011250 	.word	0x08011250

080038e0 <ChangeHourOnScreen>:
//
// Change displayed time, if is other than current time
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ChangeHourOnScreen()
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 80038e6:	f7fe ff49 	bl	800277c <DS3231_GetHour>
 80038ea:	4603      	mov	r3, r0
 80038ec:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 80038ee:	f7fe ff51 	bl	8002794 <DS3231_GetMinute>
 80038f2:	4603      	mov	r3, r0
 80038f4:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80038f6:	482a      	ldr	r0, [pc, #168]	; (80039a0 <ChangeHourOnScreen+0xc0>)
 80038f8:	f7fd fefa 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <ChangeHourOnScreen+0xc4>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	79fa      	ldrb	r2, [r7, #7]
 8003902:	429a      	cmp	r2, r3
 8003904:	d021      	beq.n	800394a <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8003906:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <ChangeHourOnScreen+0xc8>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d11d      	bne.n	800394a <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	2b09      	cmp	r3, #9
 8003912:	d806      	bhi.n	8003922 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	461a      	mov	r2, r3
 8003918:	4924      	ldr	r1, [pc, #144]	; (80039ac <ChangeHourOnScreen+0xcc>)
 800391a:	4825      	ldr	r0, [pc, #148]	; (80039b0 <ChangeHourOnScreen+0xd0>)
 800391c:	f009 fd70 	bl	800d400 <siprintf>
 8003920:	e005      	b.n	800392e <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	461a      	mov	r2, r3
 8003926:	4923      	ldr	r1, [pc, #140]	; (80039b4 <ChangeHourOnScreen+0xd4>)
 8003928:	4821      	ldr	r0, [pc, #132]	; (80039b0 <ChangeHourOnScreen+0xd0>)
 800392a:	f009 fd69 	bl	800d400 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800392e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	2301      	movs	r3, #1
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2300      	movs	r3, #0
 800393a:	2232      	movs	r2, #50	; 0x32
 800393c:	2161      	movs	r1, #97	; 0x61
 800393e:	481c      	ldr	r0, [pc, #112]	; (80039b0 <ChangeHourOnScreen+0xd0>)
 8003940:	f7fe f8f0 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8003944:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <ChangeHourOnScreen+0xc4>)
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 800394a:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <ChangeHourOnScreen+0xd8>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	79ba      	ldrb	r2, [r7, #6]
 8003950:	429a      	cmp	r2, r3
 8003952:	d021      	beq.n	8003998 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <ChangeHourOnScreen+0xc8>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d11d      	bne.n	8003998 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 800395c:	79bb      	ldrb	r3, [r7, #6]
 800395e:	2b09      	cmp	r3, #9
 8003960:	d806      	bhi.n	8003970 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8003962:	79bb      	ldrb	r3, [r7, #6]
 8003964:	461a      	mov	r2, r3
 8003966:	4915      	ldr	r1, [pc, #84]	; (80039bc <ChangeHourOnScreen+0xdc>)
 8003968:	4811      	ldr	r0, [pc, #68]	; (80039b0 <ChangeHourOnScreen+0xd0>)
 800396a:	f009 fd49 	bl	800d400 <siprintf>
 800396e:	e005      	b.n	800397c <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8003970:	79bb      	ldrb	r3, [r7, #6]
 8003972:	461a      	mov	r2, r3
 8003974:	4912      	ldr	r1, [pc, #72]	; (80039c0 <ChangeHourOnScreen+0xe0>)
 8003976:	480e      	ldr	r0, [pc, #56]	; (80039b0 <ChangeHourOnScreen+0xd0>)
 8003978:	f009 fd42 	bl	800d400 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800397c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	2301      	movs	r3, #1
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	2300      	movs	r3, #0
 8003988:	2232      	movs	r2, #50	; 0x32
 800398a:	2196      	movs	r1, #150	; 0x96
 800398c:	4808      	ldr	r0, [pc, #32]	; (80039b0 <ChangeHourOnScreen+0xd0>)
 800398e:	f7fe f8c9 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8003992:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <ChangeHourOnScreen+0xd8>)
 8003994:	79bb      	ldrb	r3, [r7, #6]
 8003996:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	08013fd8 	.word	0x08013fd8
 80039a4:	20000246 	.word	0x20000246
 80039a8:	20000250 	.word	0x20000250
 80039ac:	080112e4 	.word	0x080112e4
 80039b0:	200002bc 	.word	0x200002bc
 80039b4:	080112ec 	.word	0x080112ec
 80039b8:	20000247 	.word	0x20000247
 80039bc:	080112f0 	.word	0x080112f0
 80039c0:	080112f8 	.word	0x080112f8

080039c4 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <predefinedActivityCzyszczenie+0x1c>
	{
		SendComand(UCMD_RELAY_ALL_ON);
 80039d8:	2017      	movs	r0, #23
 80039da:	f001 fe55 	bl	8005688 <SendComand>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 80039de:	e005      	b.n	80039ec <predefinedActivityCzyszczenie+0x28>
		SendComand(UCMD_RELAY_ALL_OFF);
 80039e0:	2018      	movs	r0, #24
 80039e2:	f001 fe51 	bl	8005688 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 80039e6:	2019      	movs	r0, #25
 80039e8:	f001 fe4e 	bl	8005688 <SendComand>
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d12f      	bne.n	8003a68 <predefinedActivityKarmienie+0x74>
	{
		SendComand(UCMD_RELAY_ALL_ON);
 8003a08:	2017      	movs	r0, #23
 8003a0a:	f001 fe3d 	bl	8005688 <SendComand>
		EF_SetFont(&arial_11ptFontInfo);
 8003a0e:	481b      	ldr	r0, [pc, #108]	; (8003a7c <predefinedActivityKarmienie+0x88>)
 8003a10:	f7fd fe6e 	bl	80016f0 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003a14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	230a      	movs	r3, #10
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2328      	movs	r3, #40	; 0x28
 8003a20:	2278      	movs	r2, #120	; 0x78
 8003a22:	213c      	movs	r1, #60	; 0x3c
 8003a24:	2064      	movs	r0, #100	; 0x64
 8003a26:	f7fd fe12 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003a2a:	4915      	ldr	r1, [pc, #84]	; (8003a80 <predefinedActivityKarmienie+0x8c>)
 8003a2c:	4815      	ldr	r0, [pc, #84]	; (8003a84 <predefinedActivityKarmienie+0x90>)
 8003a2e:	f009 fce7 	bl	800d400 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003a32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	223e      	movs	r2, #62	; 0x3e
 8003a40:	2177      	movs	r1, #119	; 0x77
 8003a42:	4810      	ldr	r0, [pc, #64]	; (8003a84 <predefinedActivityKarmienie+0x90>)
 8003a44:	f7fe f86e 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003a48:	490f      	ldr	r1, [pc, #60]	; (8003a88 <predefinedActivityKarmienie+0x94>)
 8003a4a:	480e      	ldr	r0, [pc, #56]	; (8003a84 <predefinedActivityKarmienie+0x90>)
 8003a4c:	f009 fcd8 	bl	800d400 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003a50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	2300      	movs	r3, #0
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2250      	movs	r2, #80	; 0x50
 8003a5e:	2193      	movs	r1, #147	; 0x93
 8003a60:	4808      	ldr	r0, [pc, #32]	; (8003a84 <predefinedActivityKarmienie+0x90>)
 8003a62:	f7fe f85f 	bl	8001b24 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8003a66:	e005      	b.n	8003a74 <predefinedActivityKarmienie+0x80>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003a68:	2018      	movs	r0, #24
 8003a6a:	f001 fe0d 	bl	8005688 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8003a6e:	4807      	ldr	r0, [pc, #28]	; (8003a8c <predefinedActivityKarmienie+0x98>)
 8003a70:	f007 fa76 	bl	800af60 <HAL_TIM_Base_Start_IT>
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	08012060 	.word	0x08012060
 8003a80:	08011268 	.word	0x08011268
 8003a84:	200002bc 	.word	0x200002bc
 8003a88:	08011278 	.word	0x08011278
 8003a8c:	200005f8 	.word	0x200005f8

08003a90 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003a96:	487d      	ldr	r0, [pc, #500]	; (8003c8c <drawCurrentStateOfSwitches+0x1fc>)
 8003a98:	f7fd fe2a 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8003a9c:	4b7c      	ldr	r3, [pc, #496]	; (8003c90 <drawCurrentStateOfSwitches+0x200>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01c      	beq.n	8003ade <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003aa4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	2305      	movs	r3, #5
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2315      	movs	r3, #21
 8003ab0:	2221      	movs	r2, #33	; 0x21
 8003ab2:	2141      	movs	r1, #65	; 0x41
 8003ab4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003ab8:	f7fd fdc9 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003abc:	4975      	ldr	r1, [pc, #468]	; (8003c94 <drawCurrentStateOfSwitches+0x204>)
 8003abe:	4876      	ldr	r0, [pc, #472]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003ac0:	f009 fc9e 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003ac4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	2300      	movs	r3, #0
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	2243      	movs	r2, #67	; 0x43
 8003ad2:	f240 1111 	movw	r1, #273	; 0x111
 8003ad6:	4870      	ldr	r0, [pc, #448]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003ad8:	f7fe f824 	bl	8001b24 <EF_PutString>
 8003adc:	e01b      	b.n	8003b16 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003ade:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2305      	movs	r3, #5
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2315      	movs	r3, #21
 8003aea:	2221      	movs	r2, #33	; 0x21
 8003aec:	2141      	movs	r1, #65	; 0x41
 8003aee:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003af2:	f7fd fdac 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003af6:	4969      	ldr	r1, [pc, #420]	; (8003c9c <drawCurrentStateOfSwitches+0x20c>)
 8003af8:	4867      	ldr	r0, [pc, #412]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003afa:	f009 fc81 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003afe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	2300      	movs	r3, #0
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2243      	movs	r2, #67	; 0x43
 8003b0c:	f240 1111 	movw	r1, #273	; 0x111
 8003b10:	4861      	ldr	r0, [pc, #388]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003b12:	f7fe f807 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8003b16:	4b5e      	ldr	r3, [pc, #376]	; (8003c90 <drawCurrentStateOfSwitches+0x200>)
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01c      	beq.n	8003b58 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003b1e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	2305      	movs	r3, #5
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2315      	movs	r3, #21
 8003b2a:	2221      	movs	r2, #33	; 0x21
 8003b2c:	215f      	movs	r1, #95	; 0x5f
 8003b2e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003b32:	f7fd fd8c 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003b36:	4957      	ldr	r1, [pc, #348]	; (8003c94 <drawCurrentStateOfSwitches+0x204>)
 8003b38:	4857      	ldr	r0, [pc, #348]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003b3a:	f009 fc61 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003b3e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2300      	movs	r3, #0
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2261      	movs	r2, #97	; 0x61
 8003b4c:	f240 1111 	movw	r1, #273	; 0x111
 8003b50:	4851      	ldr	r0, [pc, #324]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003b52:	f7fd ffe7 	bl	8001b24 <EF_PutString>
 8003b56:	e01b      	b.n	8003b90 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003b58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	2305      	movs	r3, #5
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2315      	movs	r3, #21
 8003b64:	2221      	movs	r2, #33	; 0x21
 8003b66:	215f      	movs	r1, #95	; 0x5f
 8003b68:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003b6c:	f7fd fd6f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003b70:	494a      	ldr	r1, [pc, #296]	; (8003c9c <drawCurrentStateOfSwitches+0x20c>)
 8003b72:	4849      	ldr	r0, [pc, #292]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003b74:	f009 fc44 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003b78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2300      	movs	r3, #0
 8003b84:	2261      	movs	r2, #97	; 0x61
 8003b86:	f240 1111 	movw	r1, #273	; 0x111
 8003b8a:	4843      	ldr	r0, [pc, #268]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003b8c:	f7fd ffca 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8003b90:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <drawCurrentStateOfSwitches+0x200>)
 8003b92:	789b      	ldrb	r3, [r3, #2]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01c      	beq.n	8003bd2 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003b98:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2315      	movs	r3, #21
 8003ba4:	2221      	movs	r2, #33	; 0x21
 8003ba6:	217d      	movs	r1, #125	; 0x7d
 8003ba8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003bac:	f7fd fd4f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003bb0:	4938      	ldr	r1, [pc, #224]	; (8003c94 <drawCurrentStateOfSwitches+0x204>)
 8003bb2:	4839      	ldr	r0, [pc, #228]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003bb4:	f009 fc24 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003bb8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	227f      	movs	r2, #127	; 0x7f
 8003bc6:	f240 1111 	movw	r1, #273	; 0x111
 8003bca:	4833      	ldr	r0, [pc, #204]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003bcc:	f7fd ffaa 	bl	8001b24 <EF_PutString>
 8003bd0:	e01b      	b.n	8003c0a <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003bd2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	2305      	movs	r3, #5
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2315      	movs	r3, #21
 8003bde:	2221      	movs	r2, #33	; 0x21
 8003be0:	217d      	movs	r1, #125	; 0x7d
 8003be2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003be6:	f7fd fd32 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003bea:	492c      	ldr	r1, [pc, #176]	; (8003c9c <drawCurrentStateOfSwitches+0x20c>)
 8003bec:	482a      	ldr	r0, [pc, #168]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003bee:	f009 fc07 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003bf2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	227f      	movs	r2, #127	; 0x7f
 8003c00:	f240 1111 	movw	r1, #273	; 0x111
 8003c04:	4824      	ldr	r0, [pc, #144]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003c06:	f7fd ff8d 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8003c0a:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <drawCurrentStateOfSwitches+0x200>)
 8003c0c:	78db      	ldrb	r3, [r3, #3]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01c      	beq.n	8003c4c <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003c12:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	2305      	movs	r3, #5
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2315      	movs	r3, #21
 8003c1e:	2221      	movs	r2, #33	; 0x21
 8003c20:	219b      	movs	r1, #155	; 0x9b
 8003c22:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003c26:	f7fd fd12 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003c2a:	491a      	ldr	r1, [pc, #104]	; (8003c94 <drawCurrentStateOfSwitches+0x204>)
 8003c2c:	481a      	ldr	r0, [pc, #104]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003c2e:	f009 fbe7 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003c32:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	229d      	movs	r2, #157	; 0x9d
 8003c40:	f240 1111 	movw	r1, #273	; 0x111
 8003c44:	4814      	ldr	r0, [pc, #80]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003c46:	f7fd ff6d 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8003c4a:	e01b      	b.n	8003c84 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003c4c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	2305      	movs	r3, #5
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2315      	movs	r3, #21
 8003c58:	2221      	movs	r2, #33	; 0x21
 8003c5a:	219b      	movs	r1, #155	; 0x9b
 8003c5c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003c60:	f7fd fcf5 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003c64:	490d      	ldr	r1, [pc, #52]	; (8003c9c <drawCurrentStateOfSwitches+0x20c>)
 8003c66:	480c      	ldr	r0, [pc, #48]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003c68:	f009 fbca 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003c6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2300      	movs	r3, #0
 8003c78:	229d      	movs	r2, #157	; 0x9d
 8003c7a:	f240 1111 	movw	r1, #273	; 0x111
 8003c7e:	4806      	ldr	r0, [pc, #24]	; (8003c98 <drawCurrentStateOfSwitches+0x208>)
 8003c80:	f7fd ff50 	bl	8001b24 <EF_PutString>
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	08012060 	.word	0x08012060
 8003c90:	20000268 	.word	0x20000268
 8003c94:	08011274 	.word	0x08011274
 8003c98:	200002bc 	.word	0x200002bc
 8003c9c:	08011278 	.word	0x08011278

08003ca0 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003ca6:	4875      	ldr	r0, [pc, #468]	; (8003e7c <drawCurrentStateOfLights+0x1dc>)
 8003ca8:	f7fd fd22 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8003cac:	4b74      	ldr	r3, [pc, #464]	; (8003e80 <drawCurrentStateOfLights+0x1e0>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01a      	beq.n	8003cea <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003cb4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	2305      	movs	r3, #5
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	2315      	movs	r3, #21
 8003cc0:	2221      	movs	r2, #33	; 0x21
 8003cc2:	2141      	movs	r1, #65	; 0x41
 8003cc4:	20c8      	movs	r0, #200	; 0xc8
 8003cc6:	f7fd fcc2 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003cca:	496e      	ldr	r1, [pc, #440]	; (8003e84 <drawCurrentStateOfLights+0x1e4>)
 8003ccc:	486e      	ldr	r0, [pc, #440]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003cce:	f009 fb97 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003cd2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2243      	movs	r2, #67	; 0x43
 8003ce0:	21cb      	movs	r1, #203	; 0xcb
 8003ce2:	4869      	ldr	r0, [pc, #420]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003ce4:	f7fd ff1e 	bl	8001b24 <EF_PutString>
 8003ce8:	e019      	b.n	8003d1e <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003cea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	2305      	movs	r3, #5
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2315      	movs	r3, #21
 8003cf6:	2221      	movs	r2, #33	; 0x21
 8003cf8:	2141      	movs	r1, #65	; 0x41
 8003cfa:	20c8      	movs	r0, #200	; 0xc8
 8003cfc:	f7fd fca7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003d00:	4962      	ldr	r1, [pc, #392]	; (8003e8c <drawCurrentStateOfLights+0x1ec>)
 8003d02:	4861      	ldr	r0, [pc, #388]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003d04:	f009 fb7c 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003d08:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	2243      	movs	r2, #67	; 0x43
 8003d16:	21cb      	movs	r1, #203	; 0xcb
 8003d18:	485b      	ldr	r0, [pc, #364]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003d1a:	f7fd ff03 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8003d1e:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <drawCurrentStateOfLights+0x1e0>)
 8003d20:	785b      	ldrb	r3, [r3, #1]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01a      	beq.n	8003d5c <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003d26:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2315      	movs	r3, #21
 8003d32:	2221      	movs	r2, #33	; 0x21
 8003d34:	215f      	movs	r1, #95	; 0x5f
 8003d36:	20c8      	movs	r0, #200	; 0xc8
 8003d38:	f7fd fc89 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003d3c:	4951      	ldr	r1, [pc, #324]	; (8003e84 <drawCurrentStateOfLights+0x1e4>)
 8003d3e:	4852      	ldr	r0, [pc, #328]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003d40:	f009 fb5e 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003d44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2261      	movs	r2, #97	; 0x61
 8003d52:	21cb      	movs	r1, #203	; 0xcb
 8003d54:	484c      	ldr	r0, [pc, #304]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003d56:	f7fd fee5 	bl	8001b24 <EF_PutString>
 8003d5a:	e019      	b.n	8003d90 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003d5c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	2305      	movs	r3, #5
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2315      	movs	r3, #21
 8003d68:	2221      	movs	r2, #33	; 0x21
 8003d6a:	215f      	movs	r1, #95	; 0x5f
 8003d6c:	20c8      	movs	r0, #200	; 0xc8
 8003d6e:	f7fd fc6e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003d72:	4946      	ldr	r1, [pc, #280]	; (8003e8c <drawCurrentStateOfLights+0x1ec>)
 8003d74:	4844      	ldr	r0, [pc, #272]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003d76:	f009 fb43 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003d7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	2300      	movs	r3, #0
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	2261      	movs	r2, #97	; 0x61
 8003d88:	21cb      	movs	r1, #203	; 0xcb
 8003d8a:	483f      	ldr	r0, [pc, #252]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003d8c:	f7fd feca 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8003d90:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <drawCurrentStateOfLights+0x1e0>)
 8003d92:	789b      	ldrb	r3, [r3, #2]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d01a      	beq.n	8003dce <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003d98:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	2305      	movs	r3, #5
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2315      	movs	r3, #21
 8003da4:	2221      	movs	r2, #33	; 0x21
 8003da6:	217d      	movs	r1, #125	; 0x7d
 8003da8:	20c8      	movs	r0, #200	; 0xc8
 8003daa:	f7fd fc50 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003dae:	4935      	ldr	r1, [pc, #212]	; (8003e84 <drawCurrentStateOfLights+0x1e4>)
 8003db0:	4835      	ldr	r0, [pc, #212]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003db2:	f009 fb25 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003db6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	227f      	movs	r2, #127	; 0x7f
 8003dc4:	21cb      	movs	r1, #203	; 0xcb
 8003dc6:	4830      	ldr	r0, [pc, #192]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003dc8:	f7fd feac 	bl	8001b24 <EF_PutString>
 8003dcc:	e019      	b.n	8003e02 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003dce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	2305      	movs	r3, #5
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2315      	movs	r3, #21
 8003dda:	2221      	movs	r2, #33	; 0x21
 8003ddc:	217d      	movs	r1, #125	; 0x7d
 8003dde:	20c8      	movs	r0, #200	; 0xc8
 8003de0:	f7fd fc35 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003de4:	4929      	ldr	r1, [pc, #164]	; (8003e8c <drawCurrentStateOfLights+0x1ec>)
 8003de6:	4828      	ldr	r0, [pc, #160]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003de8:	f009 fb0a 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003dec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2300      	movs	r3, #0
 8003df8:	227f      	movs	r2, #127	; 0x7f
 8003dfa:	21cb      	movs	r1, #203	; 0xcb
 8003dfc:	4822      	ldr	r0, [pc, #136]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003dfe:	f7fd fe91 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8003e02:	4b1f      	ldr	r3, [pc, #124]	; (8003e80 <drawCurrentStateOfLights+0x1e0>)
 8003e04:	78db      	ldrb	r3, [r3, #3]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01a      	beq.n	8003e40 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003e0a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	2305      	movs	r3, #5
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2315      	movs	r3, #21
 8003e16:	2221      	movs	r2, #33	; 0x21
 8003e18:	219b      	movs	r1, #155	; 0x9b
 8003e1a:	20c8      	movs	r0, #200	; 0xc8
 8003e1c:	f7fd fc17 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003e20:	4918      	ldr	r1, [pc, #96]	; (8003e84 <drawCurrentStateOfLights+0x1e4>)
 8003e22:	4819      	ldr	r0, [pc, #100]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003e24:	f009 faec 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2300      	movs	r3, #0
 8003e34:	229d      	movs	r2, #157	; 0x9d
 8003e36:	21cb      	movs	r1, #203	; 0xcb
 8003e38:	4813      	ldr	r0, [pc, #76]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003e3a:	f7fd fe73 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8003e3e:	e019      	b.n	8003e74 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	2305      	movs	r3, #5
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	2315      	movs	r3, #21
 8003e4c:	2221      	movs	r2, #33	; 0x21
 8003e4e:	219b      	movs	r1, #155	; 0x9b
 8003e50:	20c8      	movs	r0, #200	; 0xc8
 8003e52:	f7fd fbfc 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003e56:	490d      	ldr	r1, [pc, #52]	; (8003e8c <drawCurrentStateOfLights+0x1ec>)
 8003e58:	480b      	ldr	r0, [pc, #44]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003e5a:	f009 fad1 	bl	800d400 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	2300      	movs	r3, #0
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	229d      	movs	r2, #157	; 0x9d
 8003e6c:	21cb      	movs	r1, #203	; 0xcb
 8003e6e:	4806      	ldr	r0, [pc, #24]	; (8003e88 <drawCurrentStateOfLights+0x1e8>)
 8003e70:	f7fd fe58 	bl	8001b24 <EF_PutString>
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	08012060 	.word	0x08012060
 8003e80:	2000026c 	.word	0x2000026c
 8003e84:	08011274 	.word	0x08011274
 8003e88:	200002bc 	.word	0x200002bc
 8003e8c:	08011278 	.word	0x08011278

08003e90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e96:	f107 0314 	add.w	r3, r7, #20
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	609a      	str	r2, [r3, #8]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	4a3e      	ldr	r2, [pc, #248]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003eb0:	f043 0304 	orr.w	r3, r3, #4
 8003eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb6:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	4b38      	ldr	r3, [pc, #224]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a37      	ldr	r2, [pc, #220]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	4a30      	ldr	r2, [pc, #192]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	6313      	str	r3, [r2, #48]	; 0x30
 8003eee:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003f04:	f043 0302 	orr.w	r3, r3, #2
 8003f08:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0a:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <MX_GPIO_Init+0x118>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8003f16:	2200      	movs	r2, #0
 8003f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f1c:	4823      	ldr	r0, [pc, #140]	; (8003fac <MX_GPIO_Init+0x11c>)
 8003f1e:	f003 fac1 	bl	80074a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8003f22:	2200      	movs	r2, #0
 8003f24:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8003f28:	4821      	ldr	r0, [pc, #132]	; (8003fb0 <MX_GPIO_Init+0x120>)
 8003f2a:	f003 fabb 	bl	80074a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 8003f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f34:	2301      	movs	r3, #1
 8003f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8003f40:	f107 0314 	add.w	r3, r7, #20
 8003f44:	4619      	mov	r1, r3
 8003f46:	4819      	ldr	r0, [pc, #100]	; (8003fac <MX_GPIO_Init+0x11c>)
 8003f48:	f003 f910 	bl	800716c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f50:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f56:	2301      	movs	r3, #1
 8003f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4814      	ldr	r0, [pc, #80]	; (8003fb4 <MX_GPIO_Init+0x124>)
 8003f62:	f003 f903 	bl	800716c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8003f66:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f74:	2300      	movs	r3, #0
 8003f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f78:	f107 0314 	add.w	r3, r7, #20
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	480c      	ldr	r0, [pc, #48]	; (8003fb0 <MX_GPIO_Init+0x120>)
 8003f80:	f003 f8f4 	bl	800716c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4806      	ldr	r0, [pc, #24]	; (8003fb4 <MX_GPIO_Init+0x124>)
 8003f9c:	f003 f8e6 	bl	800716c <HAL_GPIO_Init>

}
 8003fa0:	bf00      	nop
 8003fa2:	3728      	adds	r7, #40	; 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40020800 	.word	0x40020800
 8003fb0:	40020400 	.word	0x40020400
 8003fb4:	40020000 	.word	0x40020000

08003fb8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fbc:	4b12      	ldr	r3, [pc, #72]	; (8004008 <MX_I2C1_Init+0x50>)
 8003fbe:	4a13      	ldr	r2, [pc, #76]	; (800400c <MX_I2C1_Init+0x54>)
 8003fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <MX_I2C1_Init+0x50>)
 8003fc4:	4a12      	ldr	r2, [pc, #72]	; (8004010 <MX_I2C1_Init+0x58>)
 8003fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <MX_I2C1_Init+0x50>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <MX_I2C1_Init+0x50>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <MX_I2C1_Init+0x50>)
 8003fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <MX_I2C1_Init+0x50>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <MX_I2C1_Init+0x50>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fe8:	4b07      	ldr	r3, [pc, #28]	; (8004008 <MX_I2C1_Init+0x50>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <MX_I2C1_Init+0x50>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ff4:	4804      	ldr	r0, [pc, #16]	; (8004008 <MX_I2C1_Init+0x50>)
 8003ff6:	f003 faa1 	bl	800753c <HAL_I2C_Init>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004000:	f000 f9e6 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004004:	bf00      	nop
 8004006:	bd80      	pop	{r7, pc}
 8004008:	2000033c 	.word	0x2000033c
 800400c:	40005400 	.word	0x40005400
 8004010:	00061a80 	.word	0x00061a80

08004014 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a4b      	ldr	r2, [pc, #300]	; (8004160 <HAL_I2C_MspInit+0x14c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	f040 808f 	bne.w	8004156 <HAL_I2C_MspInit+0x142>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	4b49      	ldr	r3, [pc, #292]	; (8004164 <HAL_I2C_MspInit+0x150>)
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	4a48      	ldr	r2, [pc, #288]	; (8004164 <HAL_I2C_MspInit+0x150>)
 8004042:	f043 0302 	orr.w	r3, r3, #2
 8004046:	6313      	str	r3, [r2, #48]	; 0x30
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_I2C_MspInit+0x150>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004054:	23c0      	movs	r3, #192	; 0xc0
 8004056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004058:	2312      	movs	r3, #18
 800405a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004060:	2303      	movs	r3, #3
 8004062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004064:	2304      	movs	r3, #4
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	4619      	mov	r1, r3
 800406e:	483e      	ldr	r0, [pc, #248]	; (8004168 <HAL_I2C_MspInit+0x154>)
 8004070:	f003 f87c 	bl	800716c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <HAL_I2C_MspInit+0x150>)
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	4a39      	ldr	r2, [pc, #228]	; (8004164 <HAL_I2C_MspInit+0x150>)
 800407e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004082:	6413      	str	r3, [r2, #64]	; 0x40
 8004084:	4b37      	ldr	r3, [pc, #220]	; (8004164 <HAL_I2C_MspInit+0x150>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004090:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_I2C_MspInit+0x158>)
 8004092:	4a37      	ldr	r2, [pc, #220]	; (8004170 <HAL_I2C_MspInit+0x15c>)
 8004094:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004096:	4b35      	ldr	r3, [pc, #212]	; (800416c <HAL_I2C_MspInit+0x158>)
 8004098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800409c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800409e:	4b33      	ldr	r3, [pc, #204]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a4:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040b2:	4b2e      	ldr	r3, [pc, #184]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040b8:	4b2c      	ldr	r3, [pc, #176]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80040be:	4b2b      	ldr	r3, [pc, #172]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040c4:	4b29      	ldr	r3, [pc, #164]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040ca:	4b28      	ldr	r3, [pc, #160]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80040d0:	4826      	ldr	r0, [pc, #152]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040d2:	f002 fc3b 	bl	800694c <HAL_DMA_Init>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80040dc:	f000 f978 	bl	80043d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a22      	ldr	r2, [pc, #136]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
 80040e6:	4a21      	ldr	r2, [pc, #132]	; (800416c <HAL_I2C_MspInit+0x158>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <HAL_I2C_MspInit+0x160>)
 80040ee:	4a22      	ldr	r2, [pc, #136]	; (8004178 <HAL_I2C_MspInit+0x164>)
 80040f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <HAL_I2C_MspInit+0x160>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040f8:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <HAL_I2C_MspInit+0x160>)
 80040fa:	2240      	movs	r2, #64	; 0x40
 80040fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_I2C_MspInit+0x160>)
 8004100:	2200      	movs	r2, #0
 8004102:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <HAL_I2C_MspInit+0x160>)
 8004106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800410a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_I2C_MspInit+0x160>)
 800410e:	2200      	movs	r2, #0
 8004110:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004112:	4b18      	ldr	r3, [pc, #96]	; (8004174 <HAL_I2C_MspInit+0x160>)
 8004114:	2200      	movs	r2, #0
 8004116:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004118:	4b16      	ldr	r3, [pc, #88]	; (8004174 <HAL_I2C_MspInit+0x160>)
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_I2C_MspInit+0x160>)
 8004120:	2200      	movs	r2, #0
 8004122:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004124:	4b13      	ldr	r3, [pc, #76]	; (8004174 <HAL_I2C_MspInit+0x160>)
 8004126:	2200      	movs	r2, #0
 8004128:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800412a:	4812      	ldr	r0, [pc, #72]	; (8004174 <HAL_I2C_MspInit+0x160>)
 800412c:	f002 fc0e 	bl	800694c <HAL_DMA_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8004136:	f000 f94b 	bl	80043d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a0d      	ldr	r2, [pc, #52]	; (8004174 <HAL_I2C_MspInit+0x160>)
 800413e:	635a      	str	r2, [r3, #52]	; 0x34
 8004140:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <HAL_I2C_MspInit+0x160>)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2100      	movs	r1, #0
 800414a:	2020      	movs	r0, #32
 800414c:	f002 fb9d 	bl	800688a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004150:	2020      	movs	r0, #32
 8004152:	f002 fbb6 	bl	80068c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004156:	bf00      	nop
 8004158:	3728      	adds	r7, #40	; 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40005400 	.word	0x40005400
 8004164:	40023800 	.word	0x40023800
 8004168:	40020400 	.word	0x40020400
 800416c:	20000390 	.word	0x20000390
 8004170:	40026010 	.word	0x40026010
 8004174:	200002dc 	.word	0x200002dc
 8004178:	40026028 	.word	0x40026028

0800417c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004180:	f002 f9ae 	bl	80064e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004184:	f000 f846 	bl	8004214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004188:	f7ff fe82 	bl	8003e90 <MX_GPIO_Init>
  MX_SPI1_Init();
 800418c:	f001 fbec 	bl	8005968 <MX_SPI1_Init>
  MX_DMA_Init();
 8004190:	f7fe f9b0 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004194:	f002 f8a4 	bl	80062e0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8004198:	f001 fc1c 	bl	80059d4 <MX_SPI3_Init>
  MX_I2C1_Init();
 800419c:	f7ff ff0c 	bl	8003fb8 <MX_I2C1_Init>
  MX_TIM11_Init();
 80041a0:	f001 fe92 	bl	8005ec8 <MX_TIM11_Init>
  MX_TIM10_Init();
 80041a4:	f001 fe6c 	bl	8005e80 <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80041a8:	f000 f89c 	bl	80042e4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 80041ac:	4813      	ldr	r0, [pc, #76]	; (80041fc <main+0x80>)
 80041ae:	f006 fed7 	bl	800af60 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 80041b2:	4813      	ldr	r0, [pc, #76]	; (8004200 <main+0x84>)
 80041b4:	f7fd fefe 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 80041b8:	4912      	ldr	r1, [pc, #72]	; (8004204 <main+0x88>)
 80041ba:	4813      	ldr	r0, [pc, #76]	; (8004208 <main+0x8c>)
 80041bc:	f002 f841 	bl	8006242 <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 80041c0:	2117      	movs	r1, #23
 80041c2:	4812      	ldr	r0, [pc, #72]	; (800420c <main+0x90>)
 80041c4:	f7fe f946 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 80041c8:	4811      	ldr	r0, [pc, #68]	; (8004210 <main+0x94>)
 80041ca:	f7fe f9cb 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80041ce:	2001      	movs	r0, #1
 80041d0:	f7fe fa22 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 80041d4:	2001      	movs	r0, #1
 80041d6:	f7fe fa3f 	bl	8002658 <DS3231_EnableOscillator>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80041da:	480b      	ldr	r0, [pc, #44]	; (8004208 <main+0x8c>)
 80041dc:	f001 ffe5 	bl	80061aa <UARTDMA_IsDataReceivedReady>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <main+0x70>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 80041e6:	4808      	ldr	r0, [pc, #32]	; (8004208 <main+0x8c>)
 80041e8:	f000 ffba 	bl	8005160 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 80041ec:	4806      	ldr	r0, [pc, #24]	; (8004208 <main+0x8c>)
 80041ee:	f001 ffee 	bl	80061ce <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 80041f2:	f7fe f85d 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  MenuTFT();
 80041f6:	f000 f8f1 	bl	80043dc <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80041fa:	e7ee      	b.n	80041da <main+0x5e>
 80041fc:	20000640 	.word	0x20000640
 8004200:	200005a0 	.word	0x200005a0
 8004204:	20000748 	.word	0x20000748
 8004208:	200003f0 	.word	0x200003f0
 800420c:	20000548 	.word	0x20000548
 8004210:	2000033c 	.word	0x2000033c

08004214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b094      	sub	sp, #80	; 0x50
 8004218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800421a:	f107 0320 	add.w	r3, r7, #32
 800421e:	2230      	movs	r2, #48	; 0x30
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f008 fa64 	bl	800c6f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <SystemClock_Config+0xc8>)
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	4a26      	ldr	r2, [pc, #152]	; (80042dc <SystemClock_Config+0xc8>)
 8004242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004246:	6413      	str	r3, [r2, #64]	; 0x40
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <SystemClock_Config+0xc8>)
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004254:	2300      	movs	r3, #0
 8004256:	607b      	str	r3, [r7, #4]
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <SystemClock_Config+0xcc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <SystemClock_Config+0xcc>)
 800425e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <SystemClock_Config+0xcc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800426c:	607b      	str	r3, [r7, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004270:	2301      	movs	r3, #1
 8004272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800427a:	2302      	movs	r3, #2
 800427c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800427e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8004284:	230c      	movs	r3, #12
 8004286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8004288:	2360      	movs	r3, #96	; 0x60
 800428a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800428c:	2302      	movs	r3, #2
 800428e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004290:	2304      	movs	r3, #4
 8004292:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004294:	f107 0320 	add.w	r3, r7, #32
 8004298:	4618      	mov	r0, r3
 800429a:	f005 fdb5 	bl	8009e08 <HAL_RCC_OscConfig>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80042a4:	f000 f894 	bl	80043d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042a8:	230f      	movs	r3, #15
 80042aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042ac:	2302      	movs	r3, #2
 80042ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80042be:	f107 030c 	add.w	r3, r7, #12
 80042c2:	2103      	movs	r1, #3
 80042c4:	4618      	mov	r0, r3
 80042c6:	f006 f817 	bl	800a2f8 <HAL_RCC_ClockConfig>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80042d0:	f000 f87e 	bl	80043d0 <Error_Handler>
  }
}
 80042d4:	bf00      	nop
 80042d6:	3750      	adds	r7, #80	; 0x50
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40007000 	.word	0x40007000

080042e4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80042e8:	2200      	movs	r2, #0
 80042ea:	2100      	movs	r1, #0
 80042ec:	200a      	movs	r0, #10
 80042ee:	f002 facc 	bl	800688a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80042f2:	200a      	movs	r0, #10
 80042f4:	f002 fae5 	bl	80068c2 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80042f8:	2200      	movs	r2, #0
 80042fa:	2100      	movs	r1, #0
 80042fc:	2017      	movs	r0, #23
 80042fe:	f002 fac4 	bl	800688a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004302:	2017      	movs	r0, #23
 8004304:	f002 fadd 	bl	80068c2 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004308:	2200      	movs	r2, #0
 800430a:	2100      	movs	r1, #0
 800430c:	201f      	movs	r0, #31
 800430e:	f002 fabc 	bl	800688a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004312:	201f      	movs	r0, #31
 8004314:	f002 fad5 	bl	80068c2 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004318:	2200      	movs	r2, #0
 800431a:	2100      	movs	r1, #0
 800431c:	2026      	movs	r0, #38	; 0x26
 800431e:	f002 fab4 	bl	800688a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004322:	2026      	movs	r0, #38	; 0x26
 8004324:	f002 facd 	bl	80068c2 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004328:	2200      	movs	r2, #0
 800432a:	2100      	movs	r1, #0
 800432c:	2033      	movs	r0, #51	; 0x33
 800432e:	f002 faac 	bl	800688a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004332:	2033      	movs	r0, #51	; 0x33
 8004334:	f002 fac5 	bl	80068c2 <HAL_NVIC_EnableIRQ>
}
 8004338:	bf00      	nop
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a12      	ldr	r2, [pc, #72]	; (8004394 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen();
 800434e:	f7ff fac7 	bl	80038e0 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a10      	ldr	r2, [pc, #64]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d117      	bne.n	800438c <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S)
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b04      	cmp	r3, #4
 8004362:	d90d      	bls.n	8004380 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 8004364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004368:	480d      	ldr	r0, [pc, #52]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800436a:	f003 f8b4 	bl	80074d6 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 800436e:	2000      	movs	r0, #0
 8004370:	f7ff fb40 	bl	80039f4 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 800437a:	480a      	ldr	r0, [pc, #40]	; (80043a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800437c:	f006 fe52 	bl	800b024 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800438a:	701a      	strb	r2, [r3, #0]
	}
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40014800 	.word	0x40014800
 8004398:	40014400 	.word	0x40014400
 800439c:	20000248 	.word	0x20000248
 80043a0:	40020800 	.word	0x40020800
 80043a4:	200005f8 	.word	0x200005f8

080043a8 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b8:	d101      	bne.n	80043be <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 80043ba:	f7fe f83f 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d101      	bne.n	80043c8 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 80043c4:	f7fe f98c 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 80043c8:	bf00      	nop
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043d4:	b672      	cpsid	i
}
 80043d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043d8:	e7fe      	b.n	80043d8 <Error_Handler+0x8>
	...

080043dc <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
	switch(State)
 80043e0:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <MenuTFT+0xf4>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b06      	cmp	r3, #6
 80043e6:	d871      	bhi.n	80044cc <MenuTFT+0xf0>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <MenuTFT+0x14>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	0800441f 	.word	0x0800441f
 80043f8:	08004453 	.word	0x08004453
 80043fc:	08004483 	.word	0x08004483
 8004400:	080044a1 	.word	0x080044a1
 8004404:	0800446b 	.word	0x0800446b
 8004408:	080044b9 	.word	0x080044b9
	{
	case MENUTFT_INIT:
		system_init();
 800440c:	f7fe fa42 	bl	8002894 <system_init>
		State = MENUTFT_PARAMETERS;
 8004410:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <MenuTFT+0xf4>)
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8004416:	4b2f      	ldr	r3, [pc, #188]	; (80044d4 <MenuTFT+0xf8>)
 8004418:	2201      	movs	r2, #1
 800441a:	701a      	strb	r2, [r3, #0]
		break;
 800441c:	e056      	b.n	80044cc <MenuTFT+0xf0>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 800441e:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <MenuTFT+0xf8>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d112      	bne.n	800444c <MenuTFT+0x70>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8004426:	4b2c      	ldr	r3, [pc, #176]	; (80044d8 <MenuTFT+0xfc>)
 8004428:	edd3 7a00 	vldr	s15, [r3]
 800442c:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <MenuTFT+0x100>)
 800442e:	ed93 7a00 	vldr	s14, [r3]
 8004432:	eeb0 1a47 	vmov.f32	s2, s14
 8004436:	2100      	movs	r1, #0
 8004438:	2000      	movs	r0, #0
 800443a:	eddf 0a29 	vldr	s1, [pc, #164]	; 80044e0 <MenuTFT+0x104>
 800443e:	eeb0 0a67 	vmov.f32	s0, s15
 8004442:	f7fe fb15 	bl	8002a70 <showCurrentParameters>
			StateChangeFlag = 0;
 8004446:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <MenuTFT+0xf8>)
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 800444c:	f000 f84c 	bl	80044e8 <TouchParametersActivity>
		break;
 8004450:	e03c      	b.n	80044cc <MenuTFT+0xf0>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8004452:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <MenuTFT+0xf8>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d104      	bne.n	8004464 <MenuTFT+0x88>
		{
			showControlPanel();
 800445a:	f7fe fc53 	bl	8002d04 <showControlPanel>
			StateChangeFlag = 0;
 800445e:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <MenuTFT+0xf8>)
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8004464:	f000 f8a0 	bl	80045a8 <TouchSwitchActivity>
		break;
 8004468:	e030      	b.n	80044cc <MenuTFT+0xf0>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 800446a:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <MenuTFT+0xf8>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d104      	bne.n	800447c <MenuTFT+0xa0>
		{
			showLightsControlPanel();
 8004472:	f7fe fd21 	bl	8002eb8 <showLightsControlPanel>
			StateChangeFlag = 0;
 8004476:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <MenuTFT+0xf8>)
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 800447c:	f000 fa5a 	bl	8004934 <TouchLightsActivity>
		break;
 8004480:	e024      	b.n	80044cc <MenuTFT+0xf0>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8004482:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <MenuTFT+0xf8>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d107      	bne.n	800449a <MenuTFT+0xbe>
		{
			showClockSetPanel();
 800448a:	f7fe fded 	bl	8003068 <showClockSetPanel>
			ClockChangeFlag = 1;
 800448e:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <MenuTFT+0x108>)
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <MenuTFT+0xf8>)
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 800449a:	f000 fbff 	bl	8004c9c <TouchClockActivity>
		break;
 800449e:	e015      	b.n	80044cc <MenuTFT+0xf0>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <MenuTFT+0xf8>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d104      	bne.n	80044b2 <MenuTFT+0xd6>
		{
			showPreparedActivitiesPanel();
 80044a8:	f7fe fef6 	bl	8003298 <showPreparedActivitiesPanel>
			StateChangeFlag =0;
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <MenuTFT+0xf8>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 80044b2:	f000 fd2d 	bl	8004f10 <TouchPredefinedActivityActivity>
		break;
 80044b6:	e009      	b.n	80044cc <MenuTFT+0xf0>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <MenuTFT+0xf8>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d104      	bne.n	80044ca <MenuTFT+0xee>
		{
			showWSLedPanel();
 80044c0:	f7fe fffa 	bl	80034b8 <showWSLedPanel>
			StateChangeFlag =0;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <MenuTFT+0xf8>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
		}

		break;
 80044ca:	bf00      	nop
	}
}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000250 	.word	0x20000250
 80044d4:	20000249 	.word	0x20000249
 80044d8:	20000254 	.word	0x20000254
 80044dc:	2000025c 	.word	0x2000025c
 80044e0:	00000000 	.word	0x00000000
 80044e4:	2000024a 	.word	0x2000024a

080044e8 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80044ee:	f7fd fecd 	bl	800228c <XPT2046_IsTouched>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d04c      	beq.n	8004592 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80044f8:	f002 f858 	bl	80065ac <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b27      	ldr	r3, [pc, #156]	; (800459c <TouchParametersActivity+0xb4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004508:	d343      	bcc.n	8004592 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800450a:	1d3a      	adds	r2, r7, #4
 800450c:	1dbb      	adds	r3, r7, #6
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f7fd fe7d 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	2b09      	cmp	r3, #9
 800451a:	d90f      	bls.n	800453c <TouchParametersActivity+0x54>
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	2b6e      	cmp	r3, #110	; 0x6e
 8004520:	d80c      	bhi.n	800453c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004522:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004524:	2bd7      	cmp	r3, #215	; 0xd7
 8004526:	d909      	bls.n	800453c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004528:	88bb      	ldrh	r3, [r7, #4]
 800452a:	2bec      	cmp	r3, #236	; 0xec
 800452c:	d806      	bhi.n	800453c <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <TouchParametersActivity+0xb8>)
 8004530:	2205      	movs	r2, #5
 8004532:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004534:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <TouchParametersActivity+0xbc>)
 8004536:	2201      	movs	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e025      	b.n	8004588 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	2bdb      	cmp	r3, #219	; 0xdb
 8004540:	d910      	bls.n	8004564 <TouchParametersActivity+0x7c>
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004548:	d20c      	bcs.n	8004564 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800454a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800454c:	2bd7      	cmp	r3, #215	; 0xd7
 800454e:	d909      	bls.n	8004564 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004550:	88bb      	ldrh	r3, [r7, #4]
 8004552:	2bec      	cmp	r3, #236	; 0xec
 8004554:	d806      	bhi.n	8004564 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <TouchParametersActivity+0xb8>)
 8004558:	2202      	movs	r2, #2
 800455a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <TouchParametersActivity+0xbc>)
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e011      	b.n	8004588 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	2b77      	cmp	r3, #119	; 0x77
 8004568:	d90e      	bls.n	8004588 <TouchParametersActivity+0xa0>
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	2bd2      	cmp	r3, #210	; 0xd2
 800456e:	d80b      	bhi.n	8004588 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004570:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004572:	2bd7      	cmp	r3, #215	; 0xd7
 8004574:	d908      	bls.n	8004588 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004576:	88bb      	ldrh	r3, [r7, #4]
 8004578:	2bec      	cmp	r3, #236	; 0xec
 800457a:	d805      	bhi.n	8004588 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <TouchParametersActivity+0xb8>)
 800457e:	2203      	movs	r2, #3
 8004580:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004582:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <TouchParametersActivity+0xbc>)
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8004588:	f002 f810 	bl	80065ac <HAL_GetTick>
 800458c:	4603      	mov	r3, r0
 800458e:	4a03      	ldr	r2, [pc, #12]	; (800459c <TouchParametersActivity+0xb4>)
 8004590:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2000024c 	.word	0x2000024c
 80045a0:	20000250 	.word	0x20000250
 80045a4:	20000249 	.word	0x20000249

080045a8 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80045ae:	f7fd fe6d 	bl	800228c <XPT2046_IsTouched>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 81af 	beq.w	8004918 <TouchSwitchActivity+0x370>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80045ba:	f001 fff7 	bl	80065ac <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	4bb8      	ldr	r3, [pc, #736]	; (80048a4 <TouchSwitchActivity+0x2fc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ca:	f0c0 81a5 	bcc.w	8004918 <TouchSwitchActivity+0x370>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80045ce:	1d3a      	adds	r2, r7, #4
 80045d0:	1dbb      	adds	r3, r7, #6
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd fe1b 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	2b09      	cmp	r3, #9
 80045de:	d90f      	bls.n	8004600 <TouchSwitchActivity+0x58>
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	2b6e      	cmp	r3, #110	; 0x6e
 80045e4:	d80c      	bhi.n	8004600 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80045e6:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80045e8:	2bd7      	cmp	r3, #215	; 0xd7
 80045ea:	d909      	bls.n	8004600 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80045ec:	88bb      	ldrh	r3, [r7, #4]
 80045ee:	2bec      	cmp	r3, #236	; 0xec
 80045f0:	d806      	bhi.n	8004600 <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 80045f2:	4bad      	ldr	r3, [pc, #692]	; (80048a8 <TouchSwitchActivity+0x300>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80045f8:	4bac      	ldr	r3, [pc, #688]	; (80048ac <TouchSwitchActivity+0x304>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e186      	b.n	800490e <TouchSwitchActivity+0x366>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	2bdb      	cmp	r3, #219	; 0xdb
 8004604:	d910      	bls.n	8004628 <TouchSwitchActivity+0x80>
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800460c:	d20c      	bcs.n	8004628 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800460e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004610:	2bd7      	cmp	r3, #215	; 0xd7
 8004612:	d909      	bls.n	8004628 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004614:	88bb      	ldrh	r3, [r7, #4]
 8004616:	2bec      	cmp	r3, #236	; 0xec
 8004618:	d806      	bhi.n	8004628 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 800461a:	4ba3      	ldr	r3, [pc, #652]	; (80048a8 <TouchSwitchActivity+0x300>)
 800461c:	2205      	movs	r2, #5
 800461e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004620:	4ba2      	ldr	r3, [pc, #648]	; (80048ac <TouchSwitchActivity+0x304>)
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	e172      	b.n	800490e <TouchSwitchActivity+0x366>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	2b77      	cmp	r3, #119	; 0x77
 800462c:	d90f      	bls.n	800464e <TouchSwitchActivity+0xa6>
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	2bd2      	cmp	r3, #210	; 0xd2
 8004632:	d80c      	bhi.n	800464e <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004634:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004636:	2bd7      	cmp	r3, #215	; 0xd7
 8004638:	d909      	bls.n	800464e <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800463a:	88bb      	ldrh	r3, [r7, #4]
 800463c:	2bec      	cmp	r3, #236	; 0xec
 800463e:	d806      	bhi.n	800464e <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 8004640:	4b99      	ldr	r3, [pc, #612]	; (80048a8 <TouchSwitchActivity+0x300>)
 8004642:	2204      	movs	r2, #4
 8004644:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004646:	4b99      	ldr	r3, [pc, #612]	; (80048ac <TouchSwitchActivity+0x304>)
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e15f      	b.n	800490e <TouchSwitchActivity+0x366>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004654:	f0c0 815b 	bcc.w	800490e <TouchSwitchActivity+0x366>
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800465e:	f080 8156 	bcs.w	800490e <TouchSwitchActivity+0x366>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8004662:	4893      	ldr	r0, [pc, #588]	; (80048b0 <TouchSwitchActivity+0x308>)
 8004664:	f7fd f844 	bl	80016f0 <EF_SetFont>
				//
				// FIRST SWITCH
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8004668:	88bb      	ldrh	r3, [r7, #4]
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d94c      	bls.n	8004708 <TouchSwitchActivity+0x160>
 800466e:	88bb      	ldrh	r3, [r7, #4]
 8004670:	2b56      	cmp	r3, #86	; 0x56
 8004672:	d849      	bhi.n	8004708 <TouchSwitchActivity+0x160>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004674:	4b8f      	ldr	r3, [pc, #572]	; (80048b4 <TouchSwitchActivity+0x30c>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d022      	beq.n	80046c2 <TouchSwitchActivity+0x11a>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 800467c:	2006      	movs	r0, #6
 800467e:	f001 f803 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004682:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	2305      	movs	r3, #5
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2315      	movs	r3, #21
 800468e:	2221      	movs	r2, #33	; 0x21
 8004690:	2141      	movs	r1, #65	; 0x41
 8004692:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004696:	f7fc ffda 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 800469a:	4987      	ldr	r1, [pc, #540]	; (80048b8 <TouchSwitchActivity+0x310>)
 800469c:	4887      	ldr	r0, [pc, #540]	; (80048bc <TouchSwitchActivity+0x314>)
 800469e:	f008 feaf 	bl	800d400 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80046a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	2300      	movs	r3, #0
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	2300      	movs	r3, #0
 80046ae:	2243      	movs	r2, #67	; 0x43
 80046b0:	f240 1111 	movw	r1, #273	; 0x111
 80046b4:	4881      	ldr	r0, [pc, #516]	; (80048bc <TouchSwitchActivity+0x314>)
 80046b6:	f7fd fa35 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 80046ba:	4b7e      	ldr	r3, [pc, #504]	; (80048b4 <TouchSwitchActivity+0x30c>)
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
					if(SwitchesButtonState[0] >= 1) // if is ON
 80046c0:	e122      	b.n	8004908 <TouchSwitchActivity+0x360>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80046c2:	2005      	movs	r0, #5
 80046c4:	f000 ffe0 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80046c8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	2305      	movs	r3, #5
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2315      	movs	r3, #21
 80046d4:	2221      	movs	r2, #33	; 0x21
 80046d6:	2141      	movs	r1, #65	; 0x41
 80046d8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80046dc:	f7fc ffb7 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80046e0:	4977      	ldr	r1, [pc, #476]	; (80048c0 <TouchSwitchActivity+0x318>)
 80046e2:	4876      	ldr	r0, [pc, #472]	; (80048bc <TouchSwitchActivity+0x314>)
 80046e4:	f008 fe8c 	bl	800d400 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80046e8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	2300      	movs	r3, #0
 80046f4:	2243      	movs	r2, #67	; 0x43
 80046f6:	f240 1111 	movw	r1, #273	; 0x111
 80046fa:	4870      	ldr	r0, [pc, #448]	; (80048bc <TouchSwitchActivity+0x314>)
 80046fc:	f7fd fa12 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 8004700:	4b6c      	ldr	r3, [pc, #432]	; (80048b4 <TouchSwitchActivity+0x30c>)
 8004702:	2201      	movs	r2, #1
 8004704:	701a      	strb	r2, [r3, #0]
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004706:	e0ff      	b.n	8004908 <TouchSwitchActivity+0x360>
					}

				}
				//
				// SECOND SWITCH
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8004708:	88bb      	ldrh	r3, [r7, #4]
 800470a:	2b5e      	cmp	r3, #94	; 0x5e
 800470c:	d94c      	bls.n	80047a8 <TouchSwitchActivity+0x200>
 800470e:	88bb      	ldrh	r3, [r7, #4]
 8004710:	2b74      	cmp	r3, #116	; 0x74
 8004712:	d849      	bhi.n	80047a8 <TouchSwitchActivity+0x200>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004714:	4b67      	ldr	r3, [pc, #412]	; (80048b4 <TouchSwitchActivity+0x30c>)
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d022      	beq.n	8004762 <TouchSwitchActivity+0x1ba>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 800471c:	2008      	movs	r0, #8
 800471e:	f000 ffb3 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004722:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004726:	9301      	str	r3, [sp, #4]
 8004728:	2305      	movs	r3, #5
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	2315      	movs	r3, #21
 800472e:	2221      	movs	r2, #33	; 0x21
 8004730:	215f      	movs	r1, #95	; 0x5f
 8004732:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004736:	f7fc ff8a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 800473a:	495f      	ldr	r1, [pc, #380]	; (80048b8 <TouchSwitchActivity+0x310>)
 800473c:	485f      	ldr	r0, [pc, #380]	; (80048bc <TouchSwitchActivity+0x314>)
 800473e:	f008 fe5f 	bl	800d400 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004742:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	2300      	movs	r3, #0
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	2300      	movs	r3, #0
 800474e:	2261      	movs	r2, #97	; 0x61
 8004750:	f240 1111 	movw	r1, #273	; 0x111
 8004754:	4859      	ldr	r0, [pc, #356]	; (80048bc <TouchSwitchActivity+0x314>)
 8004756:	f7fd f9e5 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 800475a:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <TouchSwitchActivity+0x30c>)
 800475c:	2200      	movs	r2, #0
 800475e:	705a      	strb	r2, [r3, #1]
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004760:	e0d2      	b.n	8004908 <TouchSwitchActivity+0x360>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8004762:	2007      	movs	r0, #7
 8004764:	f000 ff90 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004768:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	2305      	movs	r3, #5
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	2315      	movs	r3, #21
 8004774:	2221      	movs	r2, #33	; 0x21
 8004776:	215f      	movs	r1, #95	; 0x5f
 8004778:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800477c:	f7fc ff67 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004780:	494f      	ldr	r1, [pc, #316]	; (80048c0 <TouchSwitchActivity+0x318>)
 8004782:	484e      	ldr	r0, [pc, #312]	; (80048bc <TouchSwitchActivity+0x314>)
 8004784:	f008 fe3c 	bl	800d400 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004788:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	2300      	movs	r3, #0
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	2300      	movs	r3, #0
 8004794:	2261      	movs	r2, #97	; 0x61
 8004796:	f240 1111 	movw	r1, #273	; 0x111
 800479a:	4848      	ldr	r0, [pc, #288]	; (80048bc <TouchSwitchActivity+0x314>)
 800479c:	f7fd f9c2 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 80047a0:	4b44      	ldr	r3, [pc, #272]	; (80048b4 <TouchSwitchActivity+0x30c>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	705a      	strb	r2, [r3, #1]
					if(SwitchesButtonState[1] >= 1) // if is ON
 80047a6:	e0af      	b.n	8004908 <TouchSwitchActivity+0x360>
					}
				}
				//
				// THIRD SWITCH
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 80047a8:	88bb      	ldrh	r3, [r7, #4]
 80047aa:	2b7c      	cmp	r3, #124	; 0x7c
 80047ac:	d94c      	bls.n	8004848 <TouchSwitchActivity+0x2a0>
 80047ae:	88bb      	ldrh	r3, [r7, #4]
 80047b0:	2b92      	cmp	r3, #146	; 0x92
 80047b2:	d849      	bhi.n	8004848 <TouchSwitchActivity+0x2a0>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 80047b4:	4b3f      	ldr	r3, [pc, #252]	; (80048b4 <TouchSwitchActivity+0x30c>)
 80047b6:	789b      	ldrb	r3, [r3, #2]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d022      	beq.n	8004802 <TouchSwitchActivity+0x25a>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 80047bc:	200a      	movs	r0, #10
 80047be:	f000 ff63 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80047c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	2305      	movs	r3, #5
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2315      	movs	r3, #21
 80047ce:	2221      	movs	r2, #33	; 0x21
 80047d0:	217d      	movs	r1, #125	; 0x7d
 80047d2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80047d6:	f7fc ff3a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80047da:	4937      	ldr	r1, [pc, #220]	; (80048b8 <TouchSwitchActivity+0x310>)
 80047dc:	4837      	ldr	r0, [pc, #220]	; (80048bc <TouchSwitchActivity+0x314>)
 80047de:	f008 fe0f 	bl	800d400 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80047e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	2300      	movs	r3, #0
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2300      	movs	r3, #0
 80047ee:	227f      	movs	r2, #127	; 0x7f
 80047f0:	f240 1111 	movw	r1, #273	; 0x111
 80047f4:	4831      	ldr	r0, [pc, #196]	; (80048bc <TouchSwitchActivity+0x314>)
 80047f6:	f7fd f995 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 80047fa:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <TouchSwitchActivity+0x30c>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	709a      	strb	r2, [r3, #2]
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004800:	e082      	b.n	8004908 <TouchSwitchActivity+0x360>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8004802:	2009      	movs	r0, #9
 8004804:	f000 ff40 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004808:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	2305      	movs	r3, #5
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2315      	movs	r3, #21
 8004814:	2221      	movs	r2, #33	; 0x21
 8004816:	217d      	movs	r1, #125	; 0x7d
 8004818:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800481c:	f7fc ff17 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004820:	4927      	ldr	r1, [pc, #156]	; (80048c0 <TouchSwitchActivity+0x318>)
 8004822:	4826      	ldr	r0, [pc, #152]	; (80048bc <TouchSwitchActivity+0x314>)
 8004824:	f008 fdec 	bl	800d400 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004828:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	2300      	movs	r3, #0
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	2300      	movs	r3, #0
 8004834:	227f      	movs	r2, #127	; 0x7f
 8004836:	f240 1111 	movw	r1, #273	; 0x111
 800483a:	4820      	ldr	r0, [pc, #128]	; (80048bc <TouchSwitchActivity+0x314>)
 800483c:	f7fd f972 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <TouchSwitchActivity+0x30c>)
 8004842:	2201      	movs	r2, #1
 8004844:	709a      	strb	r2, [r3, #2]
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004846:	e05f      	b.n	8004908 <TouchSwitchActivity+0x360>
					}
				}
				//
				// FOURTH SWITCH
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8004848:	88bb      	ldrh	r3, [r7, #4]
 800484a:	2b9a      	cmp	r3, #154	; 0x9a
 800484c:	d95c      	bls.n	8004908 <TouchSwitchActivity+0x360>
 800484e:	88bb      	ldrh	r3, [r7, #4]
 8004850:	2bb0      	cmp	r3, #176	; 0xb0
 8004852:	d859      	bhi.n	8004908 <TouchSwitchActivity+0x360>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8004854:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <TouchSwitchActivity+0x30c>)
 8004856:	78db      	ldrb	r3, [r3, #3]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d033      	beq.n	80048c4 <TouchSwitchActivity+0x31c>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 800485c:	200c      	movs	r0, #12
 800485e:	f000 ff13 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004862:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	2305      	movs	r3, #5
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2315      	movs	r3, #21
 800486e:	2221      	movs	r2, #33	; 0x21
 8004870:	219b      	movs	r1, #155	; 0x9b
 8004872:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004876:	f7fc feea 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 800487a:	490f      	ldr	r1, [pc, #60]	; (80048b8 <TouchSwitchActivity+0x310>)
 800487c:	480f      	ldr	r0, [pc, #60]	; (80048bc <TouchSwitchActivity+0x314>)
 800487e:	f008 fdbf 	bl	800d400 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004882:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	2300      	movs	r3, #0
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	2300      	movs	r3, #0
 800488e:	229d      	movs	r2, #157	; 0x9d
 8004890:	f240 1111 	movw	r1, #273	; 0x111
 8004894:	4809      	ldr	r0, [pc, #36]	; (80048bc <TouchSwitchActivity+0x314>)
 8004896:	f7fd f945 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <TouchSwitchActivity+0x30c>)
 800489c:	2200      	movs	r2, #0
 800489e:	70da      	strb	r2, [r3, #3]
 80048a0:	e032      	b.n	8004908 <TouchSwitchActivity+0x360>
 80048a2:	bf00      	nop
 80048a4:	2000024c 	.word	0x2000024c
 80048a8:	20000250 	.word	0x20000250
 80048ac:	20000249 	.word	0x20000249
 80048b0:	08012060 	.word	0x08012060
 80048b4:	20000268 	.word	0x20000268
 80048b8:	08011300 	.word	0x08011300
 80048bc:	200002bc 	.word	0x200002bc
 80048c0:	08011304 	.word	0x08011304
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 80048c4:	200b      	movs	r0, #11
 80048c6:	f000 fedf 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80048ca:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	2305      	movs	r3, #5
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	2315      	movs	r3, #21
 80048d6:	2221      	movs	r2, #33	; 0x21
 80048d8:	219b      	movs	r1, #155	; 0x9b
 80048da:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80048de:	f7fc feb6 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80048e2:	490f      	ldr	r1, [pc, #60]	; (8004920 <TouchSwitchActivity+0x378>)
 80048e4:	480f      	ldr	r0, [pc, #60]	; (8004924 <TouchSwitchActivity+0x37c>)
 80048e6:	f008 fd8b 	bl	800d400 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80048ea:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	2300      	movs	r3, #0
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	229d      	movs	r2, #157	; 0x9d
 80048f8:	f240 1111 	movw	r1, #273	; 0x111
 80048fc:	4809      	ldr	r0, [pc, #36]	; (8004924 <TouchSwitchActivity+0x37c>)
 80048fe:	f7fd f911 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <TouchSwitchActivity+0x380>)
 8004904:	2201      	movs	r2, #1
 8004906:	70da      	strb	r2, [r3, #3]
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004908:	4808      	ldr	r0, [pc, #32]	; (800492c <TouchSwitchActivity+0x384>)
 800490a:	f7fc fef1 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 800490e:	f001 fe4d 	bl	80065ac <HAL_GetTick>
 8004912:	4603      	mov	r3, r0
 8004914:	4a06      	ldr	r2, [pc, #24]	; (8004930 <TouchSwitchActivity+0x388>)
 8004916:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	08011304 	.word	0x08011304
 8004924:	200002bc 	.word	0x200002bc
 8004928:	20000268 	.word	0x20000268
 800492c:	08013fd8 	.word	0x08013fd8
 8004930:	2000024c 	.word	0x2000024c

08004934 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800493a:	f7fd fca7 	bl	800228c <XPT2046_IsTouched>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 819d 	beq.w	8004c80 <TouchLightsActivity+0x34c>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004946:	f001 fe31 	bl	80065ac <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	4bb0      	ldr	r3, [pc, #704]	; (8004c10 <TouchLightsActivity+0x2dc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004956:	f0c0 8193 	bcc.w	8004c80 <TouchLightsActivity+0x34c>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800495a:	1d3a      	adds	r2, r7, #4
 800495c:	1dbb      	adds	r3, r7, #6
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7fd fc55 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	2b09      	cmp	r3, #9
 800496a:	d90f      	bls.n	800498c <TouchLightsActivity+0x58>
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	2b6e      	cmp	r3, #110	; 0x6e
 8004970:	d80c      	bhi.n	800498c <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004972:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004974:	2bd7      	cmp	r3, #215	; 0xd7
 8004976:	d909      	bls.n	800498c <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004978:	88bb      	ldrh	r3, [r7, #4]
 800497a:	2bec      	cmp	r3, #236	; 0xec
 800497c:	d806      	bhi.n	800498c <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 800497e:	4ba5      	ldr	r3, [pc, #660]	; (8004c14 <TouchLightsActivity+0x2e0>)
 8004980:	2202      	movs	r2, #2
 8004982:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004984:	4ba4      	ldr	r3, [pc, #656]	; (8004c18 <TouchLightsActivity+0x2e4>)
 8004986:	2201      	movs	r2, #1
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e174      	b.n	8004c76 <TouchLightsActivity+0x342>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	2bdb      	cmp	r3, #219	; 0xdb
 8004990:	d910      	bls.n	80049b4 <TouchLightsActivity+0x80>
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004998:	d20c      	bcs.n	80049b4 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800499a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800499c:	2bd7      	cmp	r3, #215	; 0xd7
 800499e:	d909      	bls.n	80049b4 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80049a0:	88bb      	ldrh	r3, [r7, #4]
 80049a2:	2bec      	cmp	r3, #236	; 0xec
 80049a4:	d806      	bhi.n	80049b4 <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 80049a6:	4b9b      	ldr	r3, [pc, #620]	; (8004c14 <TouchLightsActivity+0x2e0>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80049ac:	4b9a      	ldr	r3, [pc, #616]	; (8004c18 <TouchLightsActivity+0x2e4>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e160      	b.n	8004c76 <TouchLightsActivity+0x342>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	2b77      	cmp	r3, #119	; 0x77
 80049b8:	d90f      	bls.n	80049da <TouchLightsActivity+0xa6>
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	2bd2      	cmp	r3, #210	; 0xd2
 80049be:	d80c      	bhi.n	80049da <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80049c0:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80049c2:	2bd7      	cmp	r3, #215	; 0xd7
 80049c4:	d909      	bls.n	80049da <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80049c6:	88bb      	ldrh	r3, [r7, #4]
 80049c8:	2bec      	cmp	r3, #236	; 0xec
 80049ca:	d806      	bhi.n	80049da <TouchLightsActivity+0xa6>
			{
				State = MENUTFT_WS_LED;
 80049cc:	4b91      	ldr	r3, [pc, #580]	; (8004c14 <TouchLightsActivity+0x2e0>)
 80049ce:	2206      	movs	r2, #6
 80049d0:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80049d2:	4b91      	ldr	r3, [pc, #580]	; (8004c18 <TouchLightsActivity+0x2e4>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e14d      	b.n	8004c76 <TouchLightsActivity+0x342>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	2bc7      	cmp	r3, #199	; 0xc7
 80049de:	f240 814a 	bls.w	8004c76 <TouchLightsActivity+0x342>
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2be9      	cmp	r3, #233	; 0xe9
 80049e6:	f200 8146 	bhi.w	8004c76 <TouchLightsActivity+0x342>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80049ea:	488c      	ldr	r0, [pc, #560]	; (8004c1c <TouchLightsActivity+0x2e8>)
 80049ec:	f7fc fe80 	bl	80016f0 <EF_SetFont>

				//
				// FIRST LIGHT
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 80049f0:	88bb      	ldrh	r3, [r7, #4]
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d948      	bls.n	8004a88 <TouchLightsActivity+0x154>
 80049f6:	88bb      	ldrh	r3, [r7, #4]
 80049f8:	2b56      	cmp	r3, #86	; 0x56
 80049fa:	d845      	bhi.n	8004a88 <TouchLightsActivity+0x154>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 80049fc:	4b88      	ldr	r3, [pc, #544]	; (8004c20 <TouchLightsActivity+0x2ec>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d020      	beq.n	8004a46 <TouchLightsActivity+0x112>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8004a04:	200e      	movs	r0, #14
 8004a06:	f000 fe3f 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004a0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	2305      	movs	r3, #5
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	2315      	movs	r3, #21
 8004a16:	2221      	movs	r2, #33	; 0x21
 8004a18:	2141      	movs	r1, #65	; 0x41
 8004a1a:	20c8      	movs	r0, #200	; 0xc8
 8004a1c:	f7fc fe17 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004a20:	4980      	ldr	r1, [pc, #512]	; (8004c24 <TouchLightsActivity+0x2f0>)
 8004a22:	4881      	ldr	r0, [pc, #516]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004a24:	f008 fcec 	bl	800d400 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004a28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	2300      	movs	r3, #0
 8004a34:	2243      	movs	r2, #67	; 0x43
 8004a36:	21cb      	movs	r1, #203	; 0xcb
 8004a38:	487b      	ldr	r0, [pc, #492]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004a3a:	f7fd f873 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 8004a3e:	4b78      	ldr	r3, [pc, #480]	; (8004c20 <TouchLightsActivity+0x2ec>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004a44:	e114      	b.n	8004c70 <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8004a46:	200d      	movs	r0, #13
 8004a48:	f000 fe1e 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004a4c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	2305      	movs	r3, #5
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2315      	movs	r3, #21
 8004a58:	2221      	movs	r2, #33	; 0x21
 8004a5a:	2141      	movs	r1, #65	; 0x41
 8004a5c:	20c8      	movs	r0, #200	; 0xc8
 8004a5e:	f7fc fdf6 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004a62:	4972      	ldr	r1, [pc, #456]	; (8004c2c <TouchLightsActivity+0x2f8>)
 8004a64:	4870      	ldr	r0, [pc, #448]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004a66:	f008 fccb 	bl	800d400 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004a6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	2300      	movs	r3, #0
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	2300      	movs	r3, #0
 8004a76:	2243      	movs	r2, #67	; 0x43
 8004a78:	21cb      	movs	r1, #203	; 0xcb
 8004a7a:	486b      	ldr	r0, [pc, #428]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004a7c:	f7fd f852 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 8004a80:	4b67      	ldr	r3, [pc, #412]	; (8004c20 <TouchLightsActivity+0x2ec>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004a86:	e0f3      	b.n	8004c70 <TouchLightsActivity+0x33c>
					}
				}
				//
				// SECOND LIGHT
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8004a88:	88bb      	ldrh	r3, [r7, #4]
 8004a8a:	2b5e      	cmp	r3, #94	; 0x5e
 8004a8c:	d948      	bls.n	8004b20 <TouchLightsActivity+0x1ec>
 8004a8e:	88bb      	ldrh	r3, [r7, #4]
 8004a90:	2b74      	cmp	r3, #116	; 0x74
 8004a92:	d845      	bhi.n	8004b20 <TouchLightsActivity+0x1ec>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 8004a94:	4b62      	ldr	r3, [pc, #392]	; (8004c20 <TouchLightsActivity+0x2ec>)
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <TouchLightsActivity+0x1aa>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8004a9c:	2010      	movs	r0, #16
 8004a9e:	f000 fdf3 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004aa2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	2305      	movs	r3, #5
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	2315      	movs	r3, #21
 8004aae:	2221      	movs	r2, #33	; 0x21
 8004ab0:	215f      	movs	r1, #95	; 0x5f
 8004ab2:	20c8      	movs	r0, #200	; 0xc8
 8004ab4:	f7fc fdcb 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004ab8:	495a      	ldr	r1, [pc, #360]	; (8004c24 <TouchLightsActivity+0x2f0>)
 8004aba:	485b      	ldr	r0, [pc, #364]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004abc:	f008 fca0 	bl	800d400 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004ac0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	2300      	movs	r3, #0
 8004acc:	2261      	movs	r2, #97	; 0x61
 8004ace:	21cb      	movs	r1, #203	; 0xcb
 8004ad0:	4855      	ldr	r0, [pc, #340]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004ad2:	f7fd f827 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 8004ad6:	4b52      	ldr	r3, [pc, #328]	; (8004c20 <TouchLightsActivity+0x2ec>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 8004adc:	e0c8      	b.n	8004c70 <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8004ade:	200f      	movs	r0, #15
 8004ae0:	f000 fdd2 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ae4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	2305      	movs	r3, #5
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2315      	movs	r3, #21
 8004af0:	2221      	movs	r2, #33	; 0x21
 8004af2:	215f      	movs	r1, #95	; 0x5f
 8004af4:	20c8      	movs	r0, #200	; 0xc8
 8004af6:	f7fc fdaa 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004afa:	494c      	ldr	r1, [pc, #304]	; (8004c2c <TouchLightsActivity+0x2f8>)
 8004afc:	484a      	ldr	r0, [pc, #296]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004afe:	f008 fc7f 	bl	800d400 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004b02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2261      	movs	r2, #97	; 0x61
 8004b10:	21cb      	movs	r1, #203	; 0xcb
 8004b12:	4845      	ldr	r0, [pc, #276]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004b14:	f7fd f806 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 8004b18:	4b41      	ldr	r3, [pc, #260]	; (8004c20 <TouchLightsActivity+0x2ec>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 8004b1e:	e0a7      	b.n	8004c70 <TouchLightsActivity+0x33c>
					}
				}

				//
				// THIRD LIGHT
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8004b20:	88bb      	ldrh	r3, [r7, #4]
 8004b22:	2b7c      	cmp	r3, #124	; 0x7c
 8004b24:	d948      	bls.n	8004bb8 <TouchLightsActivity+0x284>
 8004b26:	88bb      	ldrh	r3, [r7, #4]
 8004b28:	2b92      	cmp	r3, #146	; 0x92
 8004b2a:	d845      	bhi.n	8004bb8 <TouchLightsActivity+0x284>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 8004b2c:	4b3c      	ldr	r3, [pc, #240]	; (8004c20 <TouchLightsActivity+0x2ec>)
 8004b2e:	789b      	ldrb	r3, [r3, #2]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d020      	beq.n	8004b76 <TouchLightsActivity+0x242>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8004b34:	2012      	movs	r0, #18
 8004b36:	f000 fda7 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004b3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	2305      	movs	r3, #5
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2315      	movs	r3, #21
 8004b46:	2221      	movs	r2, #33	; 0x21
 8004b48:	217d      	movs	r1, #125	; 0x7d
 8004b4a:	20c8      	movs	r0, #200	; 0xc8
 8004b4c:	f7fc fd7f 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004b50:	4934      	ldr	r1, [pc, #208]	; (8004c24 <TouchLightsActivity+0x2f0>)
 8004b52:	4835      	ldr	r0, [pc, #212]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004b54:	f008 fc54 	bl	800d400 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004b58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2300      	movs	r3, #0
 8004b64:	227f      	movs	r2, #127	; 0x7f
 8004b66:	21cb      	movs	r1, #203	; 0xcb
 8004b68:	482f      	ldr	r0, [pc, #188]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004b6a:	f7fc ffdb 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 8004b6e:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <TouchLightsActivity+0x2ec>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004b74:	e07c      	b.n	8004c70 <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8004b76:	2011      	movs	r0, #17
 8004b78:	f000 fd86 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004b7c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	2305      	movs	r3, #5
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	2315      	movs	r3, #21
 8004b88:	2221      	movs	r2, #33	; 0x21
 8004b8a:	217d      	movs	r1, #125	; 0x7d
 8004b8c:	20c8      	movs	r0, #200	; 0xc8
 8004b8e:	f7fc fd5e 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004b92:	4926      	ldr	r1, [pc, #152]	; (8004c2c <TouchLightsActivity+0x2f8>)
 8004b94:	4824      	ldr	r0, [pc, #144]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004b96:	f008 fc33 	bl	800d400 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004b9a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	227f      	movs	r2, #127	; 0x7f
 8004ba8:	21cb      	movs	r1, #203	; 0xcb
 8004baa:	481f      	ldr	r0, [pc, #124]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004bac:	f7fc ffba 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <TouchLightsActivity+0x2ec>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004bb6:	e05b      	b.n	8004c70 <TouchLightsActivity+0x33c>
					}
				}

				//
				// FOURTH LIGHT
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8004bb8:	88bb      	ldrh	r3, [r7, #4]
 8004bba:	2b9a      	cmp	r3, #154	; 0x9a
 8004bbc:	d958      	bls.n	8004c70 <TouchLightsActivity+0x33c>
 8004bbe:	88bb      	ldrh	r3, [r7, #4]
 8004bc0:	2bb0      	cmp	r3, #176	; 0xb0
 8004bc2:	d855      	bhi.n	8004c70 <TouchLightsActivity+0x33c>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 8004bc4:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <TouchLightsActivity+0x2ec>)
 8004bc6:	78db      	ldrb	r3, [r3, #3]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d031      	beq.n	8004c30 <TouchLightsActivity+0x2fc>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8004bcc:	2014      	movs	r0, #20
 8004bce:	f000 fd5b 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004bd2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	2305      	movs	r3, #5
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2315      	movs	r3, #21
 8004bde:	2221      	movs	r2, #33	; 0x21
 8004be0:	219b      	movs	r1, #155	; 0x9b
 8004be2:	20c8      	movs	r0, #200	; 0xc8
 8004be4:	f7fc fd33 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004be8:	490e      	ldr	r1, [pc, #56]	; (8004c24 <TouchLightsActivity+0x2f0>)
 8004bea:	480f      	ldr	r0, [pc, #60]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004bec:	f008 fc08 	bl	800d400 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004bf0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	229d      	movs	r2, #157	; 0x9d
 8004bfe:	21cb      	movs	r1, #203	; 0xcb
 8004c00:	4809      	ldr	r0, [pc, #36]	; (8004c28 <TouchLightsActivity+0x2f4>)
 8004c02:	f7fc ff8f 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <TouchLightsActivity+0x2ec>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	70da      	strb	r2, [r3, #3]
 8004c0c:	e030      	b.n	8004c70 <TouchLightsActivity+0x33c>
 8004c0e:	bf00      	nop
 8004c10:	2000024c 	.word	0x2000024c
 8004c14:	20000250 	.word	0x20000250
 8004c18:	20000249 	.word	0x20000249
 8004c1c:	08012060 	.word	0x08012060
 8004c20:	2000026c 	.word	0x2000026c
 8004c24:	08011300 	.word	0x08011300
 8004c28:	200002bc 	.word	0x200002bc
 8004c2c:	08011304 	.word	0x08011304
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8004c30:	2013      	movs	r0, #19
 8004c32:	f000 fd29 	bl	8005688 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004c36:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	2305      	movs	r3, #5
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	2315      	movs	r3, #21
 8004c42:	2221      	movs	r2, #33	; 0x21
 8004c44:	219b      	movs	r1, #155	; 0x9b
 8004c46:	20c8      	movs	r0, #200	; 0xc8
 8004c48:	f7fc fd01 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004c4c:	490e      	ldr	r1, [pc, #56]	; (8004c88 <TouchLightsActivity+0x354>)
 8004c4e:	480f      	ldr	r0, [pc, #60]	; (8004c8c <TouchLightsActivity+0x358>)
 8004c50:	f008 fbd6 	bl	800d400 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004c54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	229d      	movs	r2, #157	; 0x9d
 8004c62:	21cb      	movs	r1, #203	; 0xcb
 8004c64:	4809      	ldr	r0, [pc, #36]	; (8004c8c <TouchLightsActivity+0x358>)
 8004c66:	f7fc ff5d 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <TouchLightsActivity+0x35c>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	70da      	strb	r2, [r3, #3]
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004c70:	4808      	ldr	r0, [pc, #32]	; (8004c94 <TouchLightsActivity+0x360>)
 8004c72:	f7fc fd3d 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 8004c76:	f001 fc99 	bl	80065ac <HAL_GetTick>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4a06      	ldr	r2, [pc, #24]	; (8004c98 <TouchLightsActivity+0x364>)
 8004c7e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	08011304 	.word	0x08011304
 8004c8c:	200002bc 	.word	0x200002bc
 8004c90:	2000026c 	.word	0x2000026c
 8004c94:	08013fd8 	.word	0x08013fd8
 8004c98:	2000024c 	.word	0x2000024c

08004c9c <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 8004ca2:	f7fd faf3 	bl	800228c <XPT2046_IsTouched>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8118 	beq.w	8004ede <TouchClockActivity+0x242>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8004cae:	488e      	ldr	r0, [pc, #568]	; (8004ee8 <TouchClockActivity+0x24c>)
 8004cb0:	f7fc fd1e 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004cb4:	f001 fc7a 	bl	80065ac <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b8c      	ldr	r3, [pc, #560]	; (8004eec <TouchClockActivity+0x250>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cc4:	f0c0 810b 	bcc.w	8004ede <TouchClockActivity+0x242>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004cc8:	1d3a      	adds	r2, r7, #4
 8004cca:	1dbb      	adds	r3, r7, #6
 8004ccc:	4611      	mov	r1, r2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fd fa9e 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8004cd4:	4b86      	ldr	r3, [pc, #536]	; (8004ef0 <TouchClockActivity+0x254>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d10e      	bne.n	8004cfa <TouchClockActivity+0x5e>
				{
					Hours = DS3231_GetHour();
 8004cdc:	f7fd fd4e 	bl	800277c <DS3231_GetHour>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4b83      	ldr	r3, [pc, #524]	; (8004ef4 <TouchClockActivity+0x258>)
 8004ce6:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8004ce8:	f7fd fd54 	bl	8002794 <DS3231_GetMinute>
 8004cec:	4603      	mov	r3, r0
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4b81      	ldr	r3, [pc, #516]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004cf2:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8004cf4:	4b7e      	ldr	r3, [pc, #504]	; (8004ef0 <TouchClockActivity+0x254>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	2b09      	cmp	r3, #9
 8004cfe:	d90f      	bls.n	8004d20 <TouchClockActivity+0x84>
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	2b6e      	cmp	r3, #110	; 0x6e
 8004d04:	d80c      	bhi.n	8004d20 <TouchClockActivity+0x84>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004d06:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004d08:	2bd7      	cmp	r3, #215	; 0xd7
 8004d0a:	d909      	bls.n	8004d20 <TouchClockActivity+0x84>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004d0c:	88bb      	ldrh	r3, [r7, #4]
 8004d0e:	2bec      	cmp	r3, #236	; 0xec
 8004d10:	d806      	bhi.n	8004d20 <TouchClockActivity+0x84>
				{
					State = MENUTFT_PARAMETERS;
 8004d12:	4b7a      	ldr	r3, [pc, #488]	; (8004efc <TouchClockActivity+0x260>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8004d18:	4b79      	ldr	r3, [pc, #484]	; (8004f00 <TouchClockActivity+0x264>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e0d9      	b.n	8004ed4 <TouchClockActivity+0x238>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	2bdb      	cmp	r3, #219	; 0xdb
 8004d24:	d927      	bls.n	8004d76 <TouchClockActivity+0xda>
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004d2c:	d223      	bcs.n	8004d76 <TouchClockActivity+0xda>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004d2e:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004d30:	2bd7      	cmp	r3, #215	; 0xd7
 8004d32:	d920      	bls.n	8004d76 <TouchClockActivity+0xda>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004d34:	88bb      	ldrh	r3, [r7, #4]
 8004d36:	2bec      	cmp	r3, #236	; 0xec
 8004d38:	d81d      	bhi.n	8004d76 <TouchClockActivity+0xda>
				{
					DS3231_SetHour(Hours);
 8004d3a:	4b6e      	ldr	r3, [pc, #440]	; (8004ef4 <TouchClockActivity+0x258>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fd fd34 	bl	80027ac <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8004d44:	4b6c      	ldr	r3, [pc, #432]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd fd44 	bl	80027d6 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 8004d4e:	2032      	movs	r0, #50	; 0x32
 8004d50:	f7fd fd53 	bl	80027fa <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8004d54:	496b      	ldr	r1, [pc, #428]	; (8004f04 <TouchClockActivity+0x268>)
 8004d56:	486c      	ldr	r0, [pc, #432]	; (8004f08 <TouchClockActivity+0x26c>)
 8004d58:	f008 fb52 	bl	800d400 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8004d5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	2301      	movs	r3, #1
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d6a:	220a      	movs	r2, #10
 8004d6c:	212f      	movs	r1, #47	; 0x2f
 8004d6e:	4866      	ldr	r0, [pc, #408]	; (8004f08 <TouchClockActivity+0x26c>)
 8004d70:	f7fc fed8 	bl	8001b24 <EF_PutString>
 8004d74:	e0ae      	b.n	8004ed4 <TouchClockActivity+0x238>
				}

				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2bef      	cmp	r3, #239	; 0xef
 8004d7a:	d951      	bls.n	8004e20 <TouchClockActivity+0x184>
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004d82:	d84d      	bhi.n	8004e20 <TouchClockActivity+0x184>
				{

					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8004d84:	88bb      	ldrh	r3, [r7, #4]
 8004d86:	2b4a      	cmp	r3, #74	; 0x4a
 8004d88:	d923      	bls.n	8004dd2 <TouchClockActivity+0x136>
 8004d8a:	88bb      	ldrh	r3, [r7, #4]
 8004d8c:	2b60      	cmp	r3, #96	; 0x60
 8004d8e:	d820      	bhi.n	8004dd2 <TouchClockActivity+0x136>
					{
						if(Hours < 24)
 8004d90:	4b58      	ldr	r3, [pc, #352]	; (8004ef4 <TouchClockActivity+0x258>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b17      	cmp	r3, #23
 8004d96:	d806      	bhi.n	8004da6 <TouchClockActivity+0x10a>
						{
							Hours++;
 8004d98:	4b56      	ldr	r3, [pc, #344]	; (8004ef4 <TouchClockActivity+0x258>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	4b54      	ldr	r3, [pc, #336]	; (8004ef4 <TouchClockActivity+0x258>)
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e002      	b.n	8004dac <TouchClockActivity+0x110>
						}
						else
						{
							Hours = 1;
 8004da6:	4b53      	ldr	r3, [pc, #332]	; (8004ef4 <TouchClockActivity+0x258>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 8004dac:	4b51      	ldr	r3, [pc, #324]	; (8004ef4 <TouchClockActivity+0x258>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	4956      	ldr	r1, [pc, #344]	; (8004f0c <TouchClockActivity+0x270>)
 8004db4:	4854      	ldr	r0, [pc, #336]	; (8004f08 <TouchClockActivity+0x26c>)
 8004db6:	f008 fb23 	bl	800d400 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004dba:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2246      	movs	r2, #70	; 0x46
 8004dc8:	21a0      	movs	r1, #160	; 0xa0
 8004dca:	484f      	ldr	r0, [pc, #316]	; (8004f08 <TouchClockActivity+0x26c>)
 8004dcc:	f7fc feaa 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8004dd0:	e07f      	b.n	8004ed2 <TouchClockActivity+0x236>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8004dd2:	88bb      	ldrh	r3, [r7, #4]
 8004dd4:	2b72      	cmp	r3, #114	; 0x72
 8004dd6:	d97c      	bls.n	8004ed2 <TouchClockActivity+0x236>
 8004dd8:	88bb      	ldrh	r3, [r7, #4]
 8004dda:	2b88      	cmp	r3, #136	; 0x88
 8004ddc:	d879      	bhi.n	8004ed2 <TouchClockActivity+0x236>
					{
						if(Minutes < 59)
 8004dde:	4b46      	ldr	r3, [pc, #280]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b3a      	cmp	r3, #58	; 0x3a
 8004de4:	d806      	bhi.n	8004df4 <TouchClockActivity+0x158>
						{
							Minutes++;
 8004de6:	4b44      	ldr	r3, [pc, #272]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	3301      	adds	r3, #1
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b42      	ldr	r3, [pc, #264]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	e002      	b.n	8004dfa <TouchClockActivity+0x15e>
						}
						else
						{
							Minutes = 0;
 8004df4:	4b40      	ldr	r3, [pc, #256]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 8004dfa:	4b3f      	ldr	r3, [pc, #252]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4942      	ldr	r1, [pc, #264]	; (8004f0c <TouchClockActivity+0x270>)
 8004e02:	4841      	ldr	r0, [pc, #260]	; (8004f08 <TouchClockActivity+0x26c>)
 8004e04:	f008 fafc 	bl	800d400 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004e08:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	2301      	movs	r3, #1
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	2300      	movs	r3, #0
 8004e14:	226e      	movs	r2, #110	; 0x6e
 8004e16:	21a0      	movs	r1, #160	; 0xa0
 8004e18:	483b      	ldr	r0, [pc, #236]	; (8004f08 <TouchClockActivity+0x26c>)
 8004e1a:	f7fc fe83 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8004e1e:	e058      	b.n	8004ed2 <TouchClockActivity+0x236>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8004e26:	d355      	bcc.n	8004ed4 <TouchClockActivity+0x238>
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8004e2e:	d851      	bhi.n	8004ed4 <TouchClockActivity+0x238>
				{
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8004e30:	88bb      	ldrh	r3, [r7, #4]
 8004e32:	2b4a      	cmp	r3, #74	; 0x4a
 8004e34:	d923      	bls.n	8004e7e <TouchClockActivity+0x1e2>
 8004e36:	88bb      	ldrh	r3, [r7, #4]
 8004e38:	2b60      	cmp	r3, #96	; 0x60
 8004e3a:	d820      	bhi.n	8004e7e <TouchClockActivity+0x1e2>
					{

						if(Hours < 19)
 8004e3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <TouchClockActivity+0x258>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b12      	cmp	r3, #18
 8004e42:	d806      	bhi.n	8004e52 <TouchClockActivity+0x1b6>
						{
							Hours = Hours + 6;
 8004e44:	4b2b      	ldr	r3, [pc, #172]	; (8004ef4 <TouchClockActivity+0x258>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	3306      	adds	r3, #6
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <TouchClockActivity+0x258>)
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e002      	b.n	8004e58 <TouchClockActivity+0x1bc>
						}
						else
						{
							Hours = 1;
 8004e52:	4b28      	ldr	r3, [pc, #160]	; (8004ef4 <TouchClockActivity+0x258>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 8004e58:	4b26      	ldr	r3, [pc, #152]	; (8004ef4 <TouchClockActivity+0x258>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	492b      	ldr	r1, [pc, #172]	; (8004f0c <TouchClockActivity+0x270>)
 8004e60:	4829      	ldr	r0, [pc, #164]	; (8004f08 <TouchClockActivity+0x26c>)
 8004e62:	f008 facd 	bl	800d400 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004e66:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	2300      	movs	r3, #0
 8004e72:	2246      	movs	r2, #70	; 0x46
 8004e74:	219d      	movs	r1, #157	; 0x9d
 8004e76:	4824      	ldr	r0, [pc, #144]	; (8004f08 <TouchClockActivity+0x26c>)
 8004e78:	f7fc fe54 	bl	8001b24 <EF_PutString>
 8004e7c:	e025      	b.n	8004eca <TouchClockActivity+0x22e>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8004e7e:	88bb      	ldrh	r3, [r7, #4]
 8004e80:	2b72      	cmp	r3, #114	; 0x72
 8004e82:	d922      	bls.n	8004eca <TouchClockActivity+0x22e>
 8004e84:	88bb      	ldrh	r3, [r7, #4]
 8004e86:	2b88      	cmp	r3, #136	; 0x88
 8004e88:	d81f      	bhi.n	8004eca <TouchClockActivity+0x22e>
					{
						if(Minutes < 49)
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b30      	cmp	r3, #48	; 0x30
 8004e90:	d806      	bhi.n	8004ea0 <TouchClockActivity+0x204>
						{
							Minutes = Minutes +10;
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	330a      	adds	r3, #10
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	4b17      	ldr	r3, [pc, #92]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e002      	b.n	8004ea6 <TouchClockActivity+0x20a>
						}
						else
						{
							Minutes = 0;
 8004ea0:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <TouchClockActivity+0x25c>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4917      	ldr	r1, [pc, #92]	; (8004f0c <TouchClockActivity+0x270>)
 8004eae:	4816      	ldr	r0, [pc, #88]	; (8004f08 <TouchClockActivity+0x26c>)
 8004eb0:	f008 faa6 	bl	800d400 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004eb4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004eb8:	9301      	str	r3, [sp, #4]
 8004eba:	2301      	movs	r3, #1
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	226e      	movs	r2, #110	; 0x6e
 8004ec2:	219c      	movs	r1, #156	; 0x9c
 8004ec4:	4810      	ldr	r0, [pc, #64]	; (8004f08 <TouchClockActivity+0x26c>)
 8004ec6:	f7fc fe2d 	bl	8001b24 <EF_PutString>

					}
					EF_SetFont(&arialBlack_20ptFontInfo);
 8004eca:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <TouchClockActivity+0x24c>)
 8004ecc:	f7fc fc10 	bl	80016f0 <EF_SetFont>
 8004ed0:	e000      	b.n	8004ed4 <TouchClockActivity+0x238>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8004ed2:	bf00      	nop
				}
				TimerTouch = HAL_GetTick();
 8004ed4:	f001 fb6a 	bl	80065ac <HAL_GetTick>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4a04      	ldr	r2, [pc, #16]	; (8004eec <TouchClockActivity+0x250>)
 8004edc:	6013      	str	r3, [r2, #0]
			}
		}
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	08013fd8 	.word	0x08013fd8
 8004eec:	2000024c 	.word	0x2000024c
 8004ef0:	2000024a 	.word	0x2000024a
 8004ef4:	20000030 	.word	0x20000030
 8004ef8:	20000031 	.word	0x20000031
 8004efc:	20000250 	.word	0x20000250
 8004f00:	20000249 	.word	0x20000249
 8004f04:	08011308 	.word	0x08011308
 8004f08:	200002bc 	.word	0x200002bc
 8004f0c:	08011318 	.word	0x08011318

08004f10 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 8004f16:	f7fd f9b9 	bl	800228c <XPT2046_IsTouched>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8106 	beq.w	800512e <TouchPredefinedActivityActivity+0x21e>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004f22:	f001 fb43 	bl	80065ac <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	4b83      	ldr	r3, [pc, #524]	; (8005138 <TouchPredefinedActivityActivity+0x228>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f32:	f0c0 80fc 	bcc.w	800512e <TouchPredefinedActivityActivity+0x21e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004f36:	1d3a      	adds	r2, r7, #4
 8004f38:	1dbb      	adds	r3, r7, #6
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fd f967 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 8004f42:	487e      	ldr	r0, [pc, #504]	; (800513c <TouchPredefinedActivityActivity+0x22c>)
 8004f44:	f7fc fbd4 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	2b09      	cmp	r3, #9
 8004f4c:	d90f      	bls.n	8004f6e <TouchPredefinedActivityActivity+0x5e>
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	2b6e      	cmp	r3, #110	; 0x6e
 8004f52:	d80c      	bhi.n	8004f6e <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004f54:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004f56:	2bd7      	cmp	r3, #215	; 0xd7
 8004f58:	d909      	bls.n	8004f6e <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004f5a:	88bb      	ldrh	r3, [r7, #4]
 8004f5c:	2bec      	cmp	r3, #236	; 0xec
 8004f5e:	d806      	bhi.n	8004f6e <TouchPredefinedActivityActivity+0x5e>
			{
				State = MENUTFT_SWITCH;
 8004f60:	4b77      	ldr	r3, [pc, #476]	; (8005140 <TouchPredefinedActivityActivity+0x230>)
 8004f62:	2202      	movs	r2, #2
 8004f64:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004f66:	4b77      	ldr	r3, [pc, #476]	; (8005144 <TouchPredefinedActivityActivity+0x234>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e0da      	b.n	8005124 <TouchPredefinedActivityActivity+0x214>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	2b63      	cmp	r3, #99	; 0x63
 8004f72:	f240 80d7 	bls.w	8005124 <TouchPredefinedActivityActivity+0x214>
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	2bdc      	cmp	r3, #220	; 0xdc
 8004f7a:	f200 80d3 	bhi.w	8005124 <TouchPredefinedActivityActivity+0x214>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8004f7e:	88bb      	ldrh	r3, [r7, #4]
 8004f80:	2b3b      	cmp	r3, #59	; 0x3b
 8004f82:	d966      	bls.n	8005052 <TouchPredefinedActivityActivity+0x142>
 8004f84:	88bb      	ldrh	r3, [r7, #4]
 8004f86:	2b64      	cmp	r3, #100	; 0x64
 8004f88:	d863      	bhi.n	8005052 <TouchPredefinedActivityActivity+0x142>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 8004f8a:	4b6f      	ldr	r3, [pc, #444]	; (8005148 <TouchPredefinedActivityActivity+0x238>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d02f      	beq.n	8004ff2 <TouchPredefinedActivityActivity+0xe2>
					{
						ActivityButtonState[0] = 0;
 8004f92:	4b6d      	ldr	r3, [pc, #436]	; (8005148 <TouchPredefinedActivityActivity+0x238>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	2328      	movs	r3, #40	; 0x28
 8004fa4:	2278      	movs	r2, #120	; 0x78
 8004fa6:	213c      	movs	r1, #60	; 0x3c
 8004fa8:	2064      	movs	r0, #100	; 0x64
 8004faa:	f7fc fb50 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8004fae:	4967      	ldr	r1, [pc, #412]	; (800514c <TouchPredefinedActivityActivity+0x23c>)
 8004fb0:	4867      	ldr	r0, [pc, #412]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 8004fb2:	f008 fa25 	bl	800d400 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fb6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	223e      	movs	r2, #62	; 0x3e
 8004fc4:	2177      	movs	r1, #119	; 0x77
 8004fc6:	4862      	ldr	r0, [pc, #392]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 8004fc8:	f7fc fdac 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8004fcc:	4961      	ldr	r1, [pc, #388]	; (8005154 <TouchPredefinedActivityActivity+0x244>)
 8004fce:	4860      	ldr	r0, [pc, #384]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 8004fd0:	f008 fa16 	bl	800d400 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2250      	movs	r2, #80	; 0x50
 8004fe2:	2193      	movs	r1, #147	; 0x93
 8004fe4:	485a      	ldr	r0, [pc, #360]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 8004fe6:	f7fc fd9d 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 8004fea:	2000      	movs	r0, #0
 8004fec:	f7fe fd02 	bl	80039f4 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8004ff0:	e098      	b.n	8005124 <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 8004ff2:	4b55      	ldr	r3, [pc, #340]	; (8005148 <TouchPredefinedActivityActivity+0x238>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004ff8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	230a      	movs	r3, #10
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2328      	movs	r3, #40	; 0x28
 8005004:	2278      	movs	r2, #120	; 0x78
 8005006:	213c      	movs	r1, #60	; 0x3c
 8005008:	2064      	movs	r0, #100	; 0x64
 800500a:	f7fc fb20 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 800500e:	494f      	ldr	r1, [pc, #316]	; (800514c <TouchPredefinedActivityActivity+0x23c>)
 8005010:	484f      	ldr	r0, [pc, #316]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 8005012:	f008 f9f5 	bl	800d400 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005016:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800501a:	9301      	str	r3, [sp, #4]
 800501c:	2300      	movs	r3, #0
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2300      	movs	r3, #0
 8005022:	223e      	movs	r2, #62	; 0x3e
 8005024:	2177      	movs	r1, #119	; 0x77
 8005026:	484a      	ldr	r0, [pc, #296]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 8005028:	f7fc fd7c 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 800502c:	494a      	ldr	r1, [pc, #296]	; (8005158 <TouchPredefinedActivityActivity+0x248>)
 800502e:	4848      	ldr	r0, [pc, #288]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 8005030:	f008 f9e6 	bl	800d400 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005034:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	2300      	movs	r3, #0
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2300      	movs	r3, #0
 8005040:	2250      	movs	r2, #80	; 0x50
 8005042:	2193      	movs	r1, #147	; 0x93
 8005044:	4842      	ldr	r0, [pc, #264]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 8005046:	f7fc fd6d 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 800504a:	2001      	movs	r0, #1
 800504c:	f7fe fcd2 	bl	80039f4 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8005050:	e068      	b.n	8005124 <TouchPredefinedActivityActivity+0x214>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8005052:	88bb      	ldrh	r3, [r7, #4]
 8005054:	2b77      	cmp	r3, #119	; 0x77
 8005056:	d965      	bls.n	8005124 <TouchPredefinedActivityActivity+0x214>
 8005058:	88bb      	ldrh	r3, [r7, #4]
 800505a:	2ba0      	cmp	r3, #160	; 0xa0
 800505c:	d862      	bhi.n	8005124 <TouchPredefinedActivityActivity+0x214>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 800505e:	4b3a      	ldr	r3, [pc, #232]	; (8005148 <TouchPredefinedActivityActivity+0x238>)
 8005060:	785b      	ldrb	r3, [r3, #1]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d02f      	beq.n	80050c6 <TouchPredefinedActivityActivity+0x1b6>
					{
						ActivityButtonState[1] = 0;
 8005066:	4b38      	ldr	r3, [pc, #224]	; (8005148 <TouchPredefinedActivityActivity+0x238>)
 8005068:	2200      	movs	r2, #0
 800506a:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800506c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	230a      	movs	r3, #10
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2328      	movs	r3, #40	; 0x28
 8005078:	2278      	movs	r2, #120	; 0x78
 800507a:	2178      	movs	r1, #120	; 0x78
 800507c:	2064      	movs	r0, #100	; 0x64
 800507e:	f7fc fae6 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 8005082:	4936      	ldr	r1, [pc, #216]	; (800515c <TouchPredefinedActivityActivity+0x24c>)
 8005084:	4832      	ldr	r0, [pc, #200]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 8005086:	f008 f9bb 	bl	800d400 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800508a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	2300      	movs	r3, #0
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	227a      	movs	r2, #122	; 0x7a
 8005098:	2169      	movs	r1, #105	; 0x69
 800509a:	482d      	ldr	r0, [pc, #180]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 800509c:	f7fc fd42 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 80050a0:	492c      	ldr	r1, [pc, #176]	; (8005154 <TouchPredefinedActivityActivity+0x244>)
 80050a2:	482b      	ldr	r0, [pc, #172]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 80050a4:	f008 f9ac 	bl	800d400 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	2300      	movs	r3, #0
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	2300      	movs	r3, #0
 80050b4:	228c      	movs	r2, #140	; 0x8c
 80050b6:	2193      	movs	r1, #147	; 0x93
 80050b8:	4825      	ldr	r0, [pc, #148]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 80050ba:	f7fc fd33 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 80050be:	2000      	movs	r0, #0
 80050c0:	f7fe fc80 	bl	80039c4 <predefinedActivityCzyszczenie>
 80050c4:	e02e      	b.n	8005124 <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 80050c6:	4b20      	ldr	r3, [pc, #128]	; (8005148 <TouchPredefinedActivityActivity+0x238>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80050cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	230a      	movs	r3, #10
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	2328      	movs	r3, #40	; 0x28
 80050d8:	2278      	movs	r2, #120	; 0x78
 80050da:	2178      	movs	r1, #120	; 0x78
 80050dc:	2064      	movs	r0, #100	; 0x64
 80050de:	f7fc fab6 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 80050e2:	491e      	ldr	r1, [pc, #120]	; (800515c <TouchPredefinedActivityActivity+0x24c>)
 80050e4:	481a      	ldr	r0, [pc, #104]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 80050e6:	f008 f98b 	bl	800d400 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80050ea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	2300      	movs	r3, #0
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	2300      	movs	r3, #0
 80050f6:	227a      	movs	r2, #122	; 0x7a
 80050f8:	2169      	movs	r1, #105	; 0x69
 80050fa:	4815      	ldr	r0, [pc, #84]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 80050fc:	f7fc fd12 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8005100:	4915      	ldr	r1, [pc, #84]	; (8005158 <TouchPredefinedActivityActivity+0x248>)
 8005102:	4813      	ldr	r0, [pc, #76]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 8005104:	f008 f97c 	bl	800d400 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005108:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	2300      	movs	r3, #0
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	2300      	movs	r3, #0
 8005114:	228c      	movs	r2, #140	; 0x8c
 8005116:	2193      	movs	r1, #147	; 0x93
 8005118:	480d      	ldr	r0, [pc, #52]	; (8005150 <TouchPredefinedActivityActivity+0x240>)
 800511a:	f7fc fd03 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 800511e:	2001      	movs	r0, #1
 8005120:	f7fe fc50 	bl	80039c4 <predefinedActivityCzyszczenie>
					}
				}
			}
			TimerTouch = HAL_GetTick();
 8005124:	f001 fa42 	bl	80065ac <HAL_GetTick>
 8005128:	4603      	mov	r3, r0
 800512a:	4a03      	ldr	r2, [pc, #12]	; (8005138 <TouchPredefinedActivityActivity+0x228>)
 800512c:	6013      	str	r3, [r2, #0]
		}
	}


}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	2000024c 	.word	0x2000024c
 800513c:	08012060 	.word	0x08012060
 8005140:	20000250 	.word	0x20000250
 8005144:	20000249 	.word	0x20000249
 8005148:	20000270 	.word	0x20000270
 800514c:	08011320 	.word	0x08011320
 8005150:	200002bc 	.word	0x200002bc
 8005154:	08011300 	.word	0x08011300
 8005158:	08011304 	.word	0x08011304
 800515c:	0801132c 	.word	0x0801132c

08005160 <UART_ParseLine>:
 * 	22	=>	LIGHTSSTATUS=?\n	// Podaj stan wszytskich swiatel
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b094      	sub	sp, #80	; 0x50
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8005168:	f107 0308 	add.w	r3, r7, #8
 800516c:	4619      	mov	r1, r3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 ffc4 	bl	80060fc <UARTDMA_GetLineFromReceiveBuffer>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d155      	bne.n	8005226 <UART_ParseLine+0xc6>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 800517a:	f107 0308 	add.w	r3, r7, #8
 800517e:	492c      	ldr	r1, [pc, #176]	; (8005230 <UART_ParseLine+0xd0>)
 8005180:	4618      	mov	r0, r3
 8005182:	f008 ff95 	bl	800e0b0 <strtok>
 8005186:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8005188:	492a      	ldr	r1, [pc, #168]	; (8005234 <UART_ParseLine+0xd4>)
 800518a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800518c:	f7fb f828 	bl	80001e0 <strcmp>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8005196:	f000 f85d 	bl	8005254 <UART_ParseLED>
	  {
		  UART_ParseAnswLightsStateStatus();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 800519a:	e044      	b.n	8005226 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 800519c:	4926      	ldr	r1, [pc, #152]	; (8005238 <UART_ParseLine+0xd8>)
 800519e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80051a0:	f7fb f81e 	bl	80001e0 <strcmp>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 80051aa:	f000 f8a1 	bl	80052f0 <UART_ParseAnswStatus>
}
 80051ae:	e03a      	b.n	8005226 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 80051b0:	4922      	ldr	r1, [pc, #136]	; (800523c <UART_ParseLine+0xdc>)
 80051b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80051b4:	f7fb f814 	bl	80001e0 <strcmp>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 80051be:	f000 f89f 	bl	8005300 <UART_ParseAnswTemp>
}
 80051c2:	e030      	b.n	8005226 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 80051c4:	491e      	ldr	r1, [pc, #120]	; (8005240 <UART_ParseLine+0xe0>)
 80051c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80051c8:	f7fb f80a 	bl	80001e0 <strcmp>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 80051d2:	f000 f939 	bl	8005448 <UART_ParseAnswPres>
}
 80051d6:	e026      	b.n	8005226 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 80051d8:	491a      	ldr	r1, [pc, #104]	; (8005244 <UART_ParseLine+0xe4>)
 80051da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80051dc:	f7fb f800 	bl	80001e0 <strcmp>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 80051e6:	f000 f975 	bl	80054d4 <UART_ParseAnswChangeRelayState>
}
 80051ea:	e01c      	b.n	8005226 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 80051ec:	4916      	ldr	r1, [pc, #88]	; (8005248 <UART_ParseLine+0xe8>)
 80051ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80051f0:	f7fa fff6 	bl	80001e0 <strcmp>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 80051fa:	f000 f972 	bl	80054e2 <UART_ParseAnswChangeLightState>
}
 80051fe:	e012      	b.n	8005226 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8005200:	4912      	ldr	r1, [pc, #72]	; (800524c <UART_ParseLine+0xec>)
 8005202:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005204:	f7fa ffec 	bl	80001e0 <strcmp>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d102      	bne.n	8005214 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 800520e:	f000 f96f 	bl	80054f0 <UART_ParseAnswRelayStateStatus>
}
 8005212:	e008      	b.n	8005226 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8005214:	490e      	ldr	r1, [pc, #56]	; (8005250 <UART_ParseLine+0xf0>)
 8005216:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005218:	f7fa ffe2 	bl	80001e0 <strcmp>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <UART_ParseLine+0xc6>
		  UART_ParseAnswLightsStateStatus();
 8005222:	f000 f9cb 	bl	80055bc <UART_ParseAnswLightsStateStatus>
}
 8005226:	bf00      	nop
 8005228:	3750      	adds	r7, #80	; 0x50
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	08011338 	.word	0x08011338
 8005234:	0801133c 	.word	0x0801133c
 8005238:	08011340 	.word	0x08011340
 800523c:	08011348 	.word	0x08011348
 8005240:	08011350 	.word	0x08011350
 8005244:	08011358 	.word	0x08011358
 8005248:	08011364 	.word	0x08011364
 800524c:	08011370 	.word	0x08011370
 8005250:	0801137c 	.word	0x0801137c

08005254 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800525a:	491f      	ldr	r1, [pc, #124]	; (80052d8 <UART_ParseLED+0x84>)
 800525c:	2000      	movs	r0, #0
 800525e:	f008 ff27 	bl	800e0b0 <strtok>
 8005262:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d031      	beq.n	80052d0 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b2f      	cmp	r3, #47	; 0x2f
 8005272:	d903      	bls.n	800527c <UART_ParseLED+0x28>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b39      	cmp	r3, #57	; 0x39
 800527a:	d904      	bls.n	8005286 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 800527c:	4917      	ldr	r1, [pc, #92]	; (80052dc <UART_ParseLED+0x88>)
 800527e:	4818      	ldr	r0, [pc, #96]	; (80052e0 <UART_ParseLED+0x8c>)
 8005280:	f000 ff6d 	bl	800615e <UARTDMA_Print>
			return;	// And exit parsing
 8005284:	e024      	b.n	80052d0 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f007 fa03 	bl	800c692 <atoi>
 800528c:	4603      	mov	r3, r0
 800528e:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d10a      	bne.n	80052ac <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8005296:	2200      	movs	r2, #0
 8005298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800529c:	4811      	ldr	r0, [pc, #68]	; (80052e4 <UART_ParseLED+0x90>)
 800529e:	f002 f901 	bl	80074a4 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 80052a2:	4911      	ldr	r1, [pc, #68]	; (80052e8 <UART_ParseLED+0x94>)
 80052a4:	480e      	ldr	r0, [pc, #56]	; (80052e0 <UART_ParseLED+0x8c>)
 80052a6:	f000 ff5a 	bl	800615e <UARTDMA_Print>
 80052aa:	e011      	b.n	80052d0 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 80052b2:	2201      	movs	r2, #1
 80052b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052b8:	480a      	ldr	r0, [pc, #40]	; (80052e4 <UART_ParseLED+0x90>)
 80052ba:	f002 f8f3 	bl	80074a4 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 80052be:	490b      	ldr	r1, [pc, #44]	; (80052ec <UART_ParseLED+0x98>)
 80052c0:	4807      	ldr	r0, [pc, #28]	; (80052e0 <UART_ParseLED+0x8c>)
 80052c2:	f000 ff4c 	bl	800615e <UARTDMA_Print>
 80052c6:	e003      	b.n	80052d0 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 80052c8:	4904      	ldr	r1, [pc, #16]	; (80052dc <UART_ParseLED+0x88>)
 80052ca:	4805      	ldr	r0, [pc, #20]	; (80052e0 <UART_ParseLED+0x8c>)
 80052cc:	f000 ff47 	bl	800615e <UARTDMA_Print>
		}
	}
}
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	08011388 	.word	0x08011388
 80052dc:	0801138c 	.word	0x0801138c
 80052e0:	200003f0 	.word	0x200003f0
 80052e4:	40020800 	.word	0x40020800
 80052e8:	0801139c 	.word	0x0801139c
 80052ec:	080113a8 	.word	0x080113a8

080052f0 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 800530a:	4947      	ldr	r1, [pc, #284]	; (8005428 <UART_ParseAnswTemp+0x128>)
 800530c:	2000      	movs	r0, #0
 800530e:	f008 fecf 	bl	800e0b0 <strtok>
 8005312:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8081 	beq.w	8005420 <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 800531e:	68b8      	ldr	r0, [r7, #8]
 8005320:	f007 f9b7 	bl	800c692 <atoi>
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d010      	beq.n	8005352 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005330:	493d      	ldr	r1, [pc, #244]	; (8005428 <UART_ParseAnswTemp+0x128>)
 8005332:	2000      	movs	r0, #0
 8005334:	f008 febc 	bl	800e0b0 <strtok>
 8005338:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f007 f9a6 	bl	800c68c <atof>
 8005340:	ec53 2b10 	vmov	r2, r3, d0
 8005344:	4610      	mov	r0, r2
 8005346:	4619      	mov	r1, r3
 8005348:	f7fb fc66 	bl	8000c18 <__aeabi_d2f>
 800534c:	4603      	mov	r3, r0
 800534e:	4a37      	ldr	r2, [pc, #220]	; (800542c <UART_ParseAnswTemp+0x12c>)
 8005350:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8005352:	4b37      	ldr	r3, [pc, #220]	; (8005430 <UART_ParseAnswTemp+0x130>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d162      	bne.n	8005420 <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d119      	bne.n	8005394 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8005360:	4834      	ldr	r0, [pc, #208]	; (8005434 <UART_ParseAnswTemp+0x134>)
 8005362:	f7fc f9c5 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8005366:	4b31      	ldr	r3, [pc, #196]	; (800542c <UART_ParseAnswTemp+0x12c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fb f904 	bl	8000578 <__aeabi_f2d>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4930      	ldr	r1, [pc, #192]	; (8005438 <UART_ParseAnswTemp+0x138>)
 8005376:	4831      	ldr	r0, [pc, #196]	; (800543c <UART_ParseAnswTemp+0x13c>)
 8005378:	f008 f842 	bl	800d400 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800537c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	2301      	movs	r3, #1
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	2250      	movs	r2, #80	; 0x50
 800538a:	2114      	movs	r1, #20
 800538c:	482b      	ldr	r0, [pc, #172]	; (800543c <UART_ParseAnswTemp+0x13c>)
 800538e:	f7fc fbc9 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8005392:	e045      	b.n	8005420 <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d142      	bne.n	8005420 <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <UART_ParseAnswTemp+0x12c>)
 800539c:	edd3 7a00 	vldr	s15, [r3]
 80053a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	d11d      	bne.n	80053e6 <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 80053aa:	4b25      	ldr	r3, [pc, #148]	; (8005440 <UART_ParseAnswTemp+0x140>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1f      	ldr	r2, [pc, #124]	; (800542c <UART_ParseAnswTemp+0x12c>)
 80053b0:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 80053b2:	4820      	ldr	r0, [pc, #128]	; (8005434 <UART_ParseAnswTemp+0x134>)
 80053b4:	f7fc f99c 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 80053b8:	4b1c      	ldr	r3, [pc, #112]	; (800542c <UART_ParseAnswTemp+0x12c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fb f8db 	bl	8000578 <__aeabi_f2d>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	491f      	ldr	r1, [pc, #124]	; (8005444 <UART_ParseAnswTemp+0x144>)
 80053c8:	481c      	ldr	r0, [pc, #112]	; (800543c <UART_ParseAnswTemp+0x13c>)
 80053ca:	f008 f819 	bl	800d400 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80053ce:	f24c 6318 	movw	r3, #50712	; 0xc618
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	2301      	movs	r3, #1
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2300      	movs	r3, #0
 80053da:	226e      	movs	r2, #110	; 0x6e
 80053dc:	2114      	movs	r1, #20
 80053de:	4817      	ldr	r0, [pc, #92]	; (800543c <UART_ParseAnswTemp+0x13c>)
 80053e0:	f7fc fba0 	bl	8001b24 <EF_PutString>
	}
 80053e4:	e01c      	b.n	8005420 <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 80053e6:	4813      	ldr	r0, [pc, #76]	; (8005434 <UART_ParseAnswTemp+0x134>)
 80053e8:	f7fc f982 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 80053ec:	4b0f      	ldr	r3, [pc, #60]	; (800542c <UART_ParseAnswTemp+0x12c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fb f8c1 	bl	8000578 <__aeabi_f2d>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4912      	ldr	r1, [pc, #72]	; (8005444 <UART_ParseAnswTemp+0x144>)
 80053fc:	480f      	ldr	r0, [pc, #60]	; (800543c <UART_ParseAnswTemp+0x13c>)
 80053fe:	f007 ffff 	bl	800d400 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005402:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	2301      	movs	r3, #1
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2300      	movs	r3, #0
 800540e:	226e      	movs	r2, #110	; 0x6e
 8005410:	2114      	movs	r1, #20
 8005412:	480a      	ldr	r0, [pc, #40]	; (800543c <UART_ParseAnswTemp+0x13c>)
 8005414:	f7fc fb86 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <UART_ParseAnswTemp+0x12c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a08      	ldr	r2, [pc, #32]	; (8005440 <UART_ParseAnswTemp+0x140>)
 800541e:	6013      	str	r3, [r2, #0]
	}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	08011388 	.word	0x08011388
 800542c:	20000254 	.word	0x20000254
 8005430:	20000250 	.word	0x20000250
 8005434:	08013fd8 	.word	0x08013fd8
 8005438:	080113b4 	.word	0x080113b4
 800543c:	200002bc 	.word	0x200002bc
 8005440:	20000258 	.word	0x20000258
 8005444:	080113c8 	.word	0x080113c8

08005448 <UART_ParseAnswPres>:

//
// Parsing information about current presure
//"APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 800544e:	491b      	ldr	r1, [pc, #108]	; (80054bc <UART_ParseAnswPres+0x74>)
 8005450:	2000      	movs	r0, #0
 8005452:	f008 fe2d 	bl	800e0b0 <strtok>
 8005456:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d028      	beq.n	80054b2 <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f007 f913 	bl	800c68c <atof>
 8005466:	ec53 2b10 	vmov	r2, r3, d0
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	f7fb fbd3 	bl	8000c18 <__aeabi_d2f>
 8005472:	4603      	mov	r3, r0
 8005474:	4a12      	ldr	r2, [pc, #72]	; (80054c0 <UART_ParseAnswPres+0x78>)
 8005476:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8005478:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <UART_ParseAnswPres+0x7c>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d118      	bne.n	80054b2 <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005480:	4811      	ldr	r0, [pc, #68]	; (80054c8 <UART_ParseAnswPres+0x80>)
 8005482:	f7fc f935 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8005486:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <UART_ParseAnswPres+0x78>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7fb f874 	bl	8000578 <__aeabi_f2d>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	490d      	ldr	r1, [pc, #52]	; (80054cc <UART_ParseAnswPres+0x84>)
 8005496:	480e      	ldr	r0, [pc, #56]	; (80054d0 <UART_ParseAnswPres+0x88>)
 8005498:	f007 ffb2 	bl	800d400 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800549c:	f24c 6318 	movw	r3, #50712	; 0xc618
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	2301      	movs	r3, #1
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	2300      	movs	r3, #0
 80054a8:	22aa      	movs	r2, #170	; 0xaa
 80054aa:	2114      	movs	r1, #20
 80054ac:	4808      	ldr	r0, [pc, #32]	; (80054d0 <UART_ParseAnswPres+0x88>)
 80054ae:	f7fc fb39 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	08011388 	.word	0x08011388
 80054c0:	2000025c 	.word	0x2000025c
 80054c4:	20000250 	.word	0x20000250
 80054c8:	08013fd8 	.word	0x08013fd8
 80054cc:	080113dc 	.word	0x080113dc
 80054d0:	200002bc 	.word	0x200002bc

080054d4 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
	//TODO!
}
 80054d8:	bf00      	nop
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 80054e2:	b480      	push	{r7}
 80054e4:	af00      	add	r7, sp, #0
	//TODO!
}
 80054e6:	bf00      	nop
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 80054f6:	2300      	movs	r3, #0
 80054f8:	71fb      	strb	r3, [r7, #7]
 80054fa:	e04a      	b.n	8005592 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80054fc:	4928      	ldr	r1, [pc, #160]	; (80055a0 <UART_ParseAnswRelayStateStatus+0xb0>)
 80054fe:	2000      	movs	r0, #0
 8005500:	f008 fdd6 	bl	800e0b0 <strtok>
 8005504:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d02f      	beq.n	800556e <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800550e:	2300      	movs	r3, #0
 8005510:	71bb      	strb	r3, [r7, #6]
 8005512:	e025      	b.n	8005560 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8005514:	79bb      	ldrb	r3, [r7, #6]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	4413      	add	r3, r2
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b2f      	cmp	r3, #47	; 0x2f
 800551e:	d905      	bls.n	800552c <UART_ParseAnswRelayStateStatus+0x3c>
 8005520:	79bb      	ldrb	r3, [r7, #6]
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	4413      	add	r3, r2
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b39      	cmp	r3, #57	; 0x39
 800552a:	d90e      	bls.n	800554a <UART_ParseAnswRelayStateStatus+0x5a>
 800552c:	79bb      	ldrb	r3, [r7, #6]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	4413      	add	r3, r2
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b2e      	cmp	r3, #46	; 0x2e
 8005536:	d008      	beq.n	800554a <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8005538:	491a      	ldr	r1, [pc, #104]	; (80055a4 <UART_ParseAnswRelayStateStatus+0xb4>)
 800553a:	481b      	ldr	r0, [pc, #108]	; (80055a8 <UART_ParseAnswRelayStateStatus+0xb8>)
 800553c:	f007 ff60 	bl	800d400 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8005540:	4919      	ldr	r1, [pc, #100]	; (80055a8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005542:	481a      	ldr	r0, [pc, #104]	; (80055ac <UART_ParseAnswRelayStateStatus+0xbc>)
 8005544:	f000 fe0b 	bl	800615e <UARTDMA_Print>
					return;	// And exit parsing
 8005548:	e026      	b.n	8005598 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800554a:	6838      	ldr	r0, [r7, #0]
 800554c:	f007 f8a1 	bl	800c692 <atoi>
 8005550:	4602      	mov	r2, r0
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	b2d1      	uxtb	r1, r2
 8005556:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <UART_ParseAnswRelayStateStatus+0xc0>)
 8005558:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800555a:	79bb      	ldrb	r3, [r7, #6]
 800555c:	3301      	adds	r3, #1
 800555e:	71bb      	strb	r3, [r7, #6]
 8005560:	79bb      	ldrb	r3, [r7, #6]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	4413      	add	r3, r2
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1d3      	bne.n	8005514 <UART_ParseAnswRelayStateStatus+0x24>
 800556c:	e008      	b.n	8005580 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800556e:	4911      	ldr	r1, [pc, #68]	; (80055b4 <UART_ParseAnswRelayStateStatus+0xc4>)
 8005570:	480d      	ldr	r0, [pc, #52]	; (80055a8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005572:	f007 ff45 	bl	800d400 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005576:	490c      	ldr	r1, [pc, #48]	; (80055a8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005578:	480c      	ldr	r0, [pc, #48]	; (80055ac <UART_ParseAnswRelayStateStatus+0xbc>)
 800557a:	f000 fdf0 	bl	800615e <UARTDMA_Print>
			return;	// And exit parsing
 800557e:	e00b      	b.n	8005598 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <UART_ParseAnswRelayStateStatus+0xc8>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d101      	bne.n	800558c <UART_ParseAnswRelayStateStatus+0x9c>
 8005588:	f7fe fa82 	bl	8003a90 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	3301      	adds	r3, #1
 8005590:	71fb      	strb	r3, [r7, #7]
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d9b1      	bls.n	80054fc <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	08011388 	.word	0x08011388
 80055a4:	080113f4 	.word	0x080113f4
 80055a8:	20000504 	.word	0x20000504
 80055ac:	200003f0 	.word	0x200003f0
 80055b0:	20000268 	.word	0x20000268
 80055b4:	08011408 	.word	0x08011408
 80055b8:	20000250 	.word	0x20000250

080055bc <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 80055c2:	2300      	movs	r3, #0
 80055c4:	71fb      	strb	r3, [r7, #7]
 80055c6:	e04a      	b.n	800565e <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80055c8:	4928      	ldr	r1, [pc, #160]	; (800566c <UART_ParseAnswLightsStateStatus+0xb0>)
 80055ca:	2000      	movs	r0, #0
 80055cc:	f008 fd70 	bl	800e0b0 <strtok>
 80055d0:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d02f      	beq.n	800563a <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80055da:	2300      	movs	r3, #0
 80055dc:	71bb      	strb	r3, [r7, #6]
 80055de:	e025      	b.n	800562c <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80055e0:	79bb      	ldrb	r3, [r7, #6]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	4413      	add	r3, r2
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b2f      	cmp	r3, #47	; 0x2f
 80055ea:	d905      	bls.n	80055f8 <UART_ParseAnswLightsStateStatus+0x3c>
 80055ec:	79bb      	ldrb	r3, [r7, #6]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b39      	cmp	r3, #57	; 0x39
 80055f6:	d90e      	bls.n	8005616 <UART_ParseAnswLightsStateStatus+0x5a>
 80055f8:	79bb      	ldrb	r3, [r7, #6]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	4413      	add	r3, r2
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b2e      	cmp	r3, #46	; 0x2e
 8005602:	d008      	beq.n	8005616 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8005604:	491a      	ldr	r1, [pc, #104]	; (8005670 <UART_ParseAnswLightsStateStatus+0xb4>)
 8005606:	481b      	ldr	r0, [pc, #108]	; (8005674 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005608:	f007 fefa 	bl	800d400 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 800560c:	4919      	ldr	r1, [pc, #100]	; (8005674 <UART_ParseAnswLightsStateStatus+0xb8>)
 800560e:	481a      	ldr	r0, [pc, #104]	; (8005678 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005610:	f000 fda5 	bl	800615e <UARTDMA_Print>
					return;	// And exit parsing
 8005614:	e026      	b.n	8005664 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8005616:	6838      	ldr	r0, [r7, #0]
 8005618:	f007 f83b 	bl	800c692 <atoi>
 800561c:	4602      	mov	r2, r0
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	b2d1      	uxtb	r1, r2
 8005622:	4a16      	ldr	r2, [pc, #88]	; (800567c <UART_ParseAnswLightsStateStatus+0xc0>)
 8005624:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005626:	79bb      	ldrb	r3, [r7, #6]
 8005628:	3301      	adds	r3, #1
 800562a:	71bb      	strb	r3, [r7, #6]
 800562c:	79bb      	ldrb	r3, [r7, #6]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	4413      	add	r3, r2
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1d3      	bne.n	80055e0 <UART_ParseAnswLightsStateStatus+0x24>
 8005638:	e008      	b.n	800564c <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800563a:	4911      	ldr	r1, [pc, #68]	; (8005680 <UART_ParseAnswLightsStateStatus+0xc4>)
 800563c:	480d      	ldr	r0, [pc, #52]	; (8005674 <UART_ParseAnswLightsStateStatus+0xb8>)
 800563e:	f007 fedf 	bl	800d400 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005642:	490c      	ldr	r1, [pc, #48]	; (8005674 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005644:	480c      	ldr	r0, [pc, #48]	; (8005678 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005646:	f000 fd8a 	bl	800615e <UARTDMA_Print>
			return;	// And exit parsing
 800564a:	e00b      	b.n	8005664 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <UART_ParseAnswLightsStateStatus+0xc8>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b05      	cmp	r3, #5
 8005652:	d101      	bne.n	8005658 <UART_ParseAnswLightsStateStatus+0x9c>
 8005654:	f7fe fb24 	bl	8003ca0 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	3301      	adds	r3, #1
 800565c:	71fb      	strb	r3, [r7, #7]
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d9b1      	bls.n	80055c8 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	08011388 	.word	0x08011388
 8005670:	080113f4 	.word	0x080113f4
 8005674:	20000504 	.word	0x20000504
 8005678:	200003f0 	.word	0x200003f0
 800567c:	2000026c 	.word	0x2000026c
 8005680:	08011408 	.word	0x08011408
 8005684:	20000250 	.word	0x20000250

08005688 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	2b1b      	cmp	r3, #27
 800569a:	f200 80c7 	bhi.w	800582c <SendComand+0x1a4>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <SendComand+0x1c>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	08005715 	.word	0x08005715
 80056a8:	0800571f 	.word	0x0800571f
 80056ac:	08005729 	.word	0x08005729
 80056b0:	08005733 	.word	0x08005733
 80056b4:	08005747 	.word	0x08005747
 80056b8:	08005751 	.word	0x08005751
 80056bc:	0800575b 	.word	0x0800575b
 80056c0:	08005765 	.word	0x08005765
 80056c4:	0800576f 	.word	0x0800576f
 80056c8:	08005779 	.word	0x08005779
 80056cc:	08005783 	.word	0x08005783
 80056d0:	0800578d 	.word	0x0800578d
 80056d4:	08005797 	.word	0x08005797
 80056d8:	080057bf 	.word	0x080057bf
 80056dc:	080057c9 	.word	0x080057c9
 80056e0:	080057d3 	.word	0x080057d3
 80056e4:	080057dd 	.word	0x080057dd
 80056e8:	080057e7 	.word	0x080057e7
 80056ec:	080057f1 	.word	0x080057f1
 80056f0:	080057fb 	.word	0x080057fb
 80056f4:	08005805 	.word	0x08005805
 80056f8:	080057b5 	.word	0x080057b5
 80056fc:	08005823 	.word	0x08005823
 8005700:	080057a1 	.word	0x080057a1
 8005704:	080057ab 	.word	0x080057ab
 8005708:	0800580f 	.word	0x0800580f
 800570c:	08005819 	.word	0x08005819
 8005710:	0800573d 	.word	0x0800573d
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8005714:	4948      	ldr	r1, [pc, #288]	; (8005838 <SendComand+0x1b0>)
 8005716:	4849      	ldr	r0, [pc, #292]	; (800583c <SendComand+0x1b4>)
 8005718:	f000 fd21 	bl	800615e <UARTDMA_Print>
			break;
 800571c:	e086      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 800571e:	4948      	ldr	r1, [pc, #288]	; (8005840 <SendComand+0x1b8>)
 8005720:	4846      	ldr	r0, [pc, #280]	; (800583c <SendComand+0x1b4>)
 8005722:	f000 fd1c 	bl	800615e <UARTDMA_Print>
			break;
 8005726:	e081      	b.n	800582c <SendComand+0x1a4>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8005728:	4946      	ldr	r1, [pc, #280]	; (8005844 <SendComand+0x1bc>)
 800572a:	4844      	ldr	r0, [pc, #272]	; (800583c <SendComand+0x1b4>)
 800572c:	f000 fd17 	bl	800615e <UARTDMA_Print>
			break;
 8005730:	e07c      	b.n	800582c <SendComand+0x1a4>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8005732:	4945      	ldr	r1, [pc, #276]	; (8005848 <SendComand+0x1c0>)
 8005734:	4841      	ldr	r0, [pc, #260]	; (800583c <SendComand+0x1b4>)
 8005736:	f000 fd12 	bl	800615e <UARTDMA_Print>
			break;
 800573a:	e077      	b.n	800582c <SendComand+0x1a4>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 800573c:	4943      	ldr	r1, [pc, #268]	; (800584c <SendComand+0x1c4>)
 800573e:	483f      	ldr	r0, [pc, #252]	; (800583c <SendComand+0x1b4>)
 8005740:	f000 fd0d 	bl	800615e <UARTDMA_Print>
			break;
 8005744:	e072      	b.n	800582c <SendComand+0x1a4>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8005746:	4942      	ldr	r1, [pc, #264]	; (8005850 <SendComand+0x1c8>)
 8005748:	483c      	ldr	r0, [pc, #240]	; (800583c <SendComand+0x1b4>)
 800574a:	f000 fd08 	bl	800615e <UARTDMA_Print>
			break;
 800574e:	e06d      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8005750:	4940      	ldr	r1, [pc, #256]	; (8005854 <SendComand+0x1cc>)
 8005752:	483a      	ldr	r0, [pc, #232]	; (800583c <SendComand+0x1b4>)
 8005754:	f000 fd03 	bl	800615e <UARTDMA_Print>
			break;
 8005758:	e068      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 800575a:	493f      	ldr	r1, [pc, #252]	; (8005858 <SendComand+0x1d0>)
 800575c:	4837      	ldr	r0, [pc, #220]	; (800583c <SendComand+0x1b4>)
 800575e:	f000 fcfe 	bl	800615e <UARTDMA_Print>
			break;
 8005762:	e063      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8005764:	493d      	ldr	r1, [pc, #244]	; (800585c <SendComand+0x1d4>)
 8005766:	4835      	ldr	r0, [pc, #212]	; (800583c <SendComand+0x1b4>)
 8005768:	f000 fcf9 	bl	800615e <UARTDMA_Print>
			break;
 800576c:	e05e      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 800576e:	493c      	ldr	r1, [pc, #240]	; (8005860 <SendComand+0x1d8>)
 8005770:	4832      	ldr	r0, [pc, #200]	; (800583c <SendComand+0x1b4>)
 8005772:	f000 fcf4 	bl	800615e <UARTDMA_Print>
			break;
 8005776:	e059      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8005778:	493a      	ldr	r1, [pc, #232]	; (8005864 <SendComand+0x1dc>)
 800577a:	4830      	ldr	r0, [pc, #192]	; (800583c <SendComand+0x1b4>)
 800577c:	f000 fcef 	bl	800615e <UARTDMA_Print>
			break;
 8005780:	e054      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8005782:	4939      	ldr	r1, [pc, #228]	; (8005868 <SendComand+0x1e0>)
 8005784:	482d      	ldr	r0, [pc, #180]	; (800583c <SendComand+0x1b4>)
 8005786:	f000 fcea 	bl	800615e <UARTDMA_Print>
			break;
 800578a:	e04f      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 800578c:	4937      	ldr	r1, [pc, #220]	; (800586c <SendComand+0x1e4>)
 800578e:	482b      	ldr	r0, [pc, #172]	; (800583c <SendComand+0x1b4>)
 8005790:	f000 fce5 	bl	800615e <UARTDMA_Print>
			break;
 8005794:	e04a      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8005796:	4936      	ldr	r1, [pc, #216]	; (8005870 <SendComand+0x1e8>)
 8005798:	4828      	ldr	r0, [pc, #160]	; (800583c <SendComand+0x1b4>)
 800579a:	f000 fce0 	bl	800615e <UARTDMA_Print>
			break;
 800579e:	e045      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 80057a0:	4934      	ldr	r1, [pc, #208]	; (8005874 <SendComand+0x1ec>)
 80057a2:	4826      	ldr	r0, [pc, #152]	; (800583c <SendComand+0x1b4>)
 80057a4:	f000 fcdb 	bl	800615e <UARTDMA_Print>
			break;
 80057a8:	e040      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 80057aa:	4933      	ldr	r1, [pc, #204]	; (8005878 <SendComand+0x1f0>)
 80057ac:	4823      	ldr	r0, [pc, #140]	; (800583c <SendComand+0x1b4>)
 80057ae:	f000 fcd6 	bl	800615e <UARTDMA_Print>
			break;
 80057b2:	e03b      	b.n	800582c <SendComand+0x1a4>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 80057b4:	4931      	ldr	r1, [pc, #196]	; (800587c <SendComand+0x1f4>)
 80057b6:	4821      	ldr	r0, [pc, #132]	; (800583c <SendComand+0x1b4>)
 80057b8:	f000 fcd1 	bl	800615e <UARTDMA_Print>
			break;
 80057bc:	e036      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 80057be:	4930      	ldr	r1, [pc, #192]	; (8005880 <SendComand+0x1f8>)
 80057c0:	481e      	ldr	r0, [pc, #120]	; (800583c <SendComand+0x1b4>)
 80057c2:	f000 fccc 	bl	800615e <UARTDMA_Print>
			break;
 80057c6:	e031      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 80057c8:	492e      	ldr	r1, [pc, #184]	; (8005884 <SendComand+0x1fc>)
 80057ca:	481c      	ldr	r0, [pc, #112]	; (800583c <SendComand+0x1b4>)
 80057cc:	f000 fcc7 	bl	800615e <UARTDMA_Print>
			break;
 80057d0:	e02c      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 80057d2:	492d      	ldr	r1, [pc, #180]	; (8005888 <SendComand+0x200>)
 80057d4:	4819      	ldr	r0, [pc, #100]	; (800583c <SendComand+0x1b4>)
 80057d6:	f000 fcc2 	bl	800615e <UARTDMA_Print>
			break;
 80057da:	e027      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 80057dc:	492b      	ldr	r1, [pc, #172]	; (800588c <SendComand+0x204>)
 80057de:	4817      	ldr	r0, [pc, #92]	; (800583c <SendComand+0x1b4>)
 80057e0:	f000 fcbd 	bl	800615e <UARTDMA_Print>
			break;
 80057e4:	e022      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 80057e6:	492a      	ldr	r1, [pc, #168]	; (8005890 <SendComand+0x208>)
 80057e8:	4814      	ldr	r0, [pc, #80]	; (800583c <SendComand+0x1b4>)
 80057ea:	f000 fcb8 	bl	800615e <UARTDMA_Print>
			break;
 80057ee:	e01d      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 80057f0:	4928      	ldr	r1, [pc, #160]	; (8005894 <SendComand+0x20c>)
 80057f2:	4812      	ldr	r0, [pc, #72]	; (800583c <SendComand+0x1b4>)
 80057f4:	f000 fcb3 	bl	800615e <UARTDMA_Print>
			break;
 80057f8:	e018      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 80057fa:	4927      	ldr	r1, [pc, #156]	; (8005898 <SendComand+0x210>)
 80057fc:	480f      	ldr	r0, [pc, #60]	; (800583c <SendComand+0x1b4>)
 80057fe:	f000 fcae 	bl	800615e <UARTDMA_Print>
			break;
 8005802:	e013      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8005804:	4925      	ldr	r1, [pc, #148]	; (800589c <SendComand+0x214>)
 8005806:	480d      	ldr	r0, [pc, #52]	; (800583c <SendComand+0x1b4>)
 8005808:	f000 fca9 	bl	800615e <UARTDMA_Print>
			break;
 800580c:	e00e      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 800580e:	4924      	ldr	r1, [pc, #144]	; (80058a0 <SendComand+0x218>)
 8005810:	480a      	ldr	r0, [pc, #40]	; (800583c <SendComand+0x1b4>)
 8005812:	f000 fca4 	bl	800615e <UARTDMA_Print>
			break;
 8005816:	e009      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8005818:	4922      	ldr	r1, [pc, #136]	; (80058a4 <SendComand+0x21c>)
 800581a:	4808      	ldr	r0, [pc, #32]	; (800583c <SendComand+0x1b4>)
 800581c:	f000 fc9f 	bl	800615e <UARTDMA_Print>
			break;
 8005820:	e004      	b.n	800582c <SendComand+0x1a4>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8005822:	4921      	ldr	r1, [pc, #132]	; (80058a8 <SendComand+0x220>)
 8005824:	4805      	ldr	r0, [pc, #20]	; (800583c <SendComand+0x1b4>)
 8005826:	f000 fc9a 	bl	800615e <UARTDMA_Print>
			break;
 800582a:	bf00      	nop
		}
	return 1;
 800582c:	2301      	movs	r3, #1
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	08011424 	.word	0x08011424
 800583c:	200003f0 	.word	0x200003f0
 8005840:	0801142c 	.word	0x0801142c
 8005844:	08011434 	.word	0x08011434
 8005848:	08011440 	.word	0x08011440
 800584c:	08011448 	.word	0x08011448
 8005850:	08011450 	.word	0x08011450
 8005854:	08011458 	.word	0x08011458
 8005858:	08011468 	.word	0x08011468
 800585c:	08011478 	.word	0x08011478
 8005860:	08011488 	.word	0x08011488
 8005864:	08011498 	.word	0x08011498
 8005868:	080114a8 	.word	0x080114a8
 800586c:	080114b8 	.word	0x080114b8
 8005870:	080114c8 	.word	0x080114c8
 8005874:	080114d8 	.word	0x080114d8
 8005878:	080114e8 	.word	0x080114e8
 800587c:	080114f8 	.word	0x080114f8
 8005880:	08011508 	.word	0x08011508
 8005884:	08011518 	.word	0x08011518
 8005888:	08011528 	.word	0x08011528
 800588c:	08011538 	.word	0x08011538
 8005890:	08011548 	.word	0x08011548
 8005894:	08011558 	.word	0x08011558
 8005898:	08011568 	.word	0x08011568
 800589c:	08011578 	.word	0x08011578
 80058a0:	08011588 	.word	0x08011588
 80058a4:	08011598 	.word	0x08011598
 80058a8:	080115a8 	.word	0x080115a8

080058ac <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d101      	bne.n	80058c6 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 80058c2:	2301      	movs	r3, #1
 80058c4:	e018      	b.n	80058f8 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	461a      	mov	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4413      	add	r3, r2
 80058d0:	789a      	ldrb	r2, [r3, #2]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	4b09      	ldr	r3, [pc, #36]	; (8005904 <RB_Read+0x58>)
 80058de:	fb83 1302 	smull	r1, r3, r3, r2
 80058e2:	1159      	asrs	r1, r3, #5
 80058e4:	17d3      	asrs	r3, r2, #31
 80058e6:	1ac9      	subs	r1, r1, r3
 80058e8:	460b      	mov	r3, r1
 80058ea:	019b      	lsls	r3, r3, #6
 80058ec:	440b      	add	r3, r1
 80058ee:	1ad1      	subs	r1, r2, r3
 80058f0:	b2ca      	uxtb	r2, r1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	7e07e07f 	.word	0x7e07e07f

08005908 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <RB_Write+0x5c>)
 800591c:	fb83 1302 	smull	r1, r3, r3, r2
 8005920:	1159      	asrs	r1, r3, #5
 8005922:	17d3      	asrs	r3, r2, #31
 8005924:	1ac9      	subs	r1, r1, r3
 8005926:	460b      	mov	r3, r1
 8005928:	019b      	lsls	r3, r3, #6
 800592a:	440b      	add	r3, r1
 800592c:	1ad1      	subs	r1, r2, r3
 800592e:	460b      	mov	r3, r1
 8005930:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	7bfa      	ldrb	r2, [r7, #15]
 8005938:	429a      	cmp	r2, r3
 800593a:	d101      	bne.n	8005940 <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 800593c:	2301      	movs	r3, #1
 800593e:	e00a      	b.n	8005956 <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4413      	add	r3, r2
 800594a:	78fa      	ldrb	r2, [r7, #3]
 800594c:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7bfa      	ldrb	r2, [r7, #15]
 8005952:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	7e07e07f 	.word	0x7e07e07f

08005968 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800596c:	4b17      	ldr	r3, [pc, #92]	; (80059cc <MX_SPI1_Init+0x64>)
 800596e:	4a18      	ldr	r2, [pc, #96]	; (80059d0 <MX_SPI1_Init+0x68>)
 8005970:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005972:	4b16      	ldr	r3, [pc, #88]	; (80059cc <MX_SPI1_Init+0x64>)
 8005974:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005978:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800597a:	4b14      	ldr	r3, [pc, #80]	; (80059cc <MX_SPI1_Init+0x64>)
 800597c:	2200      	movs	r2, #0
 800597e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005980:	4b12      	ldr	r3, [pc, #72]	; (80059cc <MX_SPI1_Init+0x64>)
 8005982:	2200      	movs	r2, #0
 8005984:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005986:	4b11      	ldr	r3, [pc, #68]	; (80059cc <MX_SPI1_Init+0x64>)
 8005988:	2200      	movs	r2, #0
 800598a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800598c:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <MX_SPI1_Init+0x64>)
 800598e:	2200      	movs	r2, #0
 8005990:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005992:	4b0e      	ldr	r3, [pc, #56]	; (80059cc <MX_SPI1_Init+0x64>)
 8005994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005998:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800599a:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <MX_SPI1_Init+0x64>)
 800599c:	2210      	movs	r2, #16
 800599e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <MX_SPI1_Init+0x64>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80059a6:	4b09      	ldr	r3, [pc, #36]	; (80059cc <MX_SPI1_Init+0x64>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ac:	4b07      	ldr	r3, [pc, #28]	; (80059cc <MX_SPI1_Init+0x64>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80059b2:	4b06      	ldr	r3, [pc, #24]	; (80059cc <MX_SPI1_Init+0x64>)
 80059b4:	220a      	movs	r2, #10
 80059b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80059b8:	4804      	ldr	r0, [pc, #16]	; (80059cc <MX_SPI1_Init+0x64>)
 80059ba:	f004 fe6d 	bl	800a698 <HAL_SPI_Init>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80059c4:	f7fe fd04 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80059c8:	bf00      	nop
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	200005a0 	.word	0x200005a0
 80059d0:	40013000 	.word	0x40013000

080059d4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80059d8:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <MX_SPI3_Init+0x64>)
 80059da:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <MX_SPI3_Init+0x68>)
 80059dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80059de:	4b16      	ldr	r3, [pc, #88]	; (8005a38 <MX_SPI3_Init+0x64>)
 80059e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80059e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80059e6:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <MX_SPI3_Init+0x64>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80059ec:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <MX_SPI3_Init+0x64>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80059f2:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <MX_SPI3_Init+0x64>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80059f8:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <MX_SPI3_Init+0x64>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80059fe:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <MX_SPI3_Init+0x64>)
 8005a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a04:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <MX_SPI3_Init+0x64>)
 8005a08:	2220      	movs	r2, #32
 8005a0a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <MX_SPI3_Init+0x64>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a12:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <MX_SPI3_Init+0x64>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a18:	4b07      	ldr	r3, [pc, #28]	; (8005a38 <MX_SPI3_Init+0x64>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <MX_SPI3_Init+0x64>)
 8005a20:	220a      	movs	r2, #10
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005a24:	4804      	ldr	r0, [pc, #16]	; (8005a38 <MX_SPI3_Init+0x64>)
 8005a26:	f004 fe37 	bl	800a698 <HAL_SPI_Init>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8005a30:	f7fe fcce 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005a34:	bf00      	nop
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20000548 	.word	0x20000548
 8005a3c:	40003c00 	.word	0x40003c00

08005a40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08c      	sub	sp, #48	; 0x30
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a48:	f107 031c 	add.w	r3, r7, #28
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	60da      	str	r2, [r3, #12]
 8005a56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a32      	ldr	r2, [pc, #200]	; (8005b28 <HAL_SPI_MspInit+0xe8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d12c      	bne.n	8005abc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	4b31      	ldr	r3, [pc, #196]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	4a30      	ldr	r2, [pc, #192]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a70:	6453      	str	r3, [r2, #68]	; 0x44
 8005a72:	4b2e      	ldr	r3, [pc, #184]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a7a:	61bb      	str	r3, [r7, #24]
 8005a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	4b2a      	ldr	r3, [pc, #168]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	4a29      	ldr	r2, [pc, #164]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8e:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005a9a:	23e0      	movs	r3, #224	; 0xe0
 8005a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005aaa:	2305      	movs	r3, #5
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aae:	f107 031c 	add.w	r3, r7, #28
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	481e      	ldr	r0, [pc, #120]	; (8005b30 <HAL_SPI_MspInit+0xf0>)
 8005ab6:	f001 fb59 	bl	800716c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005aba:	e030      	b.n	8005b1e <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1c      	ldr	r2, [pc, #112]	; (8005b34 <HAL_SPI_MspInit+0xf4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d12b      	bne.n	8005b1e <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad6:	4b15      	ldr	r3, [pc, #84]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	4a10      	ldr	r2, [pc, #64]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	6313      	str	r3, [r2, #48]	; 0x30
 8005af2:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <HAL_SPI_MspInit+0xec>)
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005afe:	2338      	movs	r3, #56	; 0x38
 8005b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b02:	2302      	movs	r3, #2
 8005b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005b0e:	2306      	movs	r3, #6
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b12:	f107 031c 	add.w	r3, r7, #28
 8005b16:	4619      	mov	r1, r3
 8005b18:	4807      	ldr	r0, [pc, #28]	; (8005b38 <HAL_SPI_MspInit+0xf8>)
 8005b1a:	f001 fb27 	bl	800716c <HAL_GPIO_Init>
}
 8005b1e:	bf00      	nop
 8005b20:	3730      	adds	r7, #48	; 0x30
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40013000 	.word	0x40013000
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40020000 	.word	0x40020000
 8005b34:	40003c00 	.word	0x40003c00
 8005b38:	40020400 	.word	0x40020400

08005b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <HAL_MspInit+0x4c>)
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	4a0f      	ldr	r2, [pc, #60]	; (8005b88 <HAL_MspInit+0x4c>)
 8005b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b50:	6453      	str	r3, [r2, #68]	; 0x44
 8005b52:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <HAL_MspInit+0x4c>)
 8005b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <HAL_MspInit+0x4c>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	4a08      	ldr	r2, [pc, #32]	; (8005b88 <HAL_MspInit+0x4c>)
 8005b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b6e:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <HAL_MspInit+0x4c>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800

08005b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b90:	e7fe      	b.n	8005b90 <NMI_Handler+0x4>

08005b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b92:	b480      	push	{r7}
 8005b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b96:	e7fe      	b.n	8005b96 <HardFault_Handler+0x4>

08005b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b9c:	e7fe      	b.n	8005b9c <MemManage_Handler+0x4>

08005b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ba2:	e7fe      	b.n	8005ba2 <BusFault_Handler+0x4>

08005ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ba8:	e7fe      	b.n	8005ba8 <UsageFault_Handler+0x4>

08005baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005baa:	b480      	push	{r7}
 8005bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bae:	bf00      	nop
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bbc:	bf00      	nop
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005bca:	bf00      	nop
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005bd8:	f000 fcd4 	bl	8006584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bdc:	bf00      	nop
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 8005be4:	2010      	movs	r0, #16
 8005be6:	f001 fc91 	bl	800750c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005bea:	bf00      	nop
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005bf4:	4802      	ldr	r0, [pc, #8]	; (8005c00 <DMA1_Stream0_IRQHandler+0x10>)
 8005bf6:	f001 f841 	bl	8006c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005bfa:	bf00      	nop
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000390 	.word	0x20000390

08005c04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005c08:	4802      	ldr	r0, [pc, #8]	; (8005c14 <DMA1_Stream1_IRQHandler+0x10>)
 8005c0a:	f001 f837 	bl	8006c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	200002dc 	.word	0x200002dc

08005c18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8005c1c:	4802      	ldr	r0, [pc, #8]	; (8005c28 <DMA1_Stream5_IRQHandler+0x10>)
 8005c1e:	f000 f9e9 	bl	8005ff4 <UARTDMA_DmaReceiveIrqHandler>
	return;
 8005c22:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	200003f0 	.word	0x200003f0

08005c2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005c30:	4802      	ldr	r0, [pc, #8]	; (8005c3c <DMA1_Stream6_IRQHandler+0x10>)
 8005c32:	f001 f823 	bl	8006c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	200006e8 	.word	0x200006e8

08005c40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8005c44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005c48:	f001 fc60 	bl	800750c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005c4c:	bf00      	nop
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005c54:	4802      	ldr	r0, [pc, #8]	; (8005c60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005c56:	f005 fa14 	bl	800b082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005c5a:	bf00      	nop
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200005f8 	.word	0x200005f8

08005c64 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005c68:	4802      	ldr	r0, [pc, #8]	; (8005c74 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005c6a:	f005 fa0a 	bl	800b082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005c6e:	bf00      	nop
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000640 	.word	0x20000640

08005c78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005c7c:	4802      	ldr	r0, [pc, #8]	; (8005c88 <I2C1_EV_IRQHandler+0x10>)
 8005c7e:	f002 f8c5 	bl	8007e0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005c82:	bf00      	nop
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	2000033c 	.word	0x2000033c

08005c8c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005c90:	4802      	ldr	r0, [pc, #8]	; (8005c9c <I2C1_ER_IRQHandler+0x10>)
 8005c92:	f002 fa2c 	bl	80080ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005c96:	bf00      	nop
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000033c 	.word	0x2000033c

08005ca0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 8005ca4:	4803      	ldr	r0, [pc, #12]	; (8005cb4 <USART2_IRQHandler+0x14>)
 8005ca6:	f000 f97b 	bl	8005fa0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005caa:	4803      	ldr	r0, [pc, #12]	; (8005cb8 <USART2_IRQHandler+0x18>)
 8005cac:	f005 fcaa 	bl	800b604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200003f0 	.word	0x200003f0
 8005cb8:	20000748 	.word	0x20000748

08005cbc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005cc0:	4802      	ldr	r0, [pc, #8]	; (8005ccc <SPI3_IRQHandler+0x10>)
 8005cc2:	f004 ff15 	bl	800aaf0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005cc6:	bf00      	nop
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000548 	.word	0x20000548

08005cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
	return 1;
 8005cd4:	2301      	movs	r3, #1
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <_kill>:

int _kill(int pid, int sig)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005cea:	f006 fcd7 	bl	800c69c <__errno>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2216      	movs	r2, #22
 8005cf2:	601a      	str	r2, [r3, #0]
	return -1;
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <_exit>:

void _exit (int status)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005d08:	f04f 31ff 	mov.w	r1, #4294967295
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ffe7 	bl	8005ce0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005d12:	e7fe      	b.n	8005d12 <_exit+0x12>

08005d14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	e00a      	b.n	8005d3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d26:	f3af 8000 	nop.w
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	60ba      	str	r2, [r7, #8]
 8005d32:	b2ca      	uxtb	r2, r1
 8005d34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	dbf0      	blt.n	8005d26 <_read+0x12>
	}

return len;
 8005d44:	687b      	ldr	r3, [r7, #4]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	e009      	b.n	8005d74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	60ba      	str	r2, [r7, #8]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	3301      	adds	r3, #1
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	dbf1      	blt.n	8005d60 <_write+0x12>
	}
	return len;
 8005d7c:	687b      	ldr	r3, [r7, #4]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <_close>:

int _close(int file)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
	return -1;
 8005d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005dae:	605a      	str	r2, [r3, #4]
	return 0;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <_isatty>:

int _isatty(int file)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
	return 1;
 8005dc6:	2301      	movs	r3, #1
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
	return 0;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005df8:	4a14      	ldr	r2, [pc, #80]	; (8005e4c <_sbrk+0x5c>)
 8005dfa:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <_sbrk+0x60>)
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e04:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <_sbrk+0x64>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e0c:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <_sbrk+0x64>)
 8005e0e:	4a12      	ldr	r2, [pc, #72]	; (8005e58 <_sbrk+0x68>)
 8005e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e12:	4b10      	ldr	r3, [pc, #64]	; (8005e54 <_sbrk+0x64>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4413      	add	r3, r2
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d207      	bcs.n	8005e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e20:	f006 fc3c 	bl	800c69c <__errno>
 8005e24:	4603      	mov	r3, r0
 8005e26:	220c      	movs	r2, #12
 8005e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2e:	e009      	b.n	8005e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e30:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <_sbrk+0x64>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e36:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <_sbrk+0x64>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	4a05      	ldr	r2, [pc, #20]	; (8005e54 <_sbrk+0x64>)
 8005e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e42:	68fb      	ldr	r3, [r7, #12]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20020000 	.word	0x20020000
 8005e50:	00000400 	.word	0x00000400
 8005e54:	20000274 	.word	0x20000274
 8005e58:	200007a0 	.word	0x200007a0

08005e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <SystemInit+0x20>)
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e66:	4a05      	ldr	r2, [pc, #20]	; (8005e7c <SystemInit+0x20>)
 8005e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e70:	bf00      	nop
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	e000ed00 	.word	0xe000ed00

08005e80 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <MX_TIM10_Init+0x40>)
 8005e86:	4a0f      	ldr	r2, [pc, #60]	; (8005ec4 <MX_TIM10_Init+0x44>)
 8005e88:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <MX_TIM10_Init+0x40>)
 8005e8c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005e90:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <MX_TIM10_Init+0x40>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8005e98:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <MX_TIM10_Init+0x40>)
 8005e9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8005e9e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <MX_TIM10_Init+0x40>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ea6:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <MX_TIM10_Init+0x40>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005eac:	4804      	ldr	r0, [pc, #16]	; (8005ec0 <MX_TIM10_Init+0x40>)
 8005eae:	f005 f807 	bl	800aec0 <HAL_TIM_Base_Init>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8005eb8:	f7fe fa8a 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005ebc:	bf00      	nop
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	200005f8 	.word	0x200005f8
 8005ec4:	40014400 	.word	0x40014400

08005ec8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <MX_TIM11_Init+0x44>)
 8005ece:	4a10      	ldr	r2, [pc, #64]	; (8005f10 <MX_TIM11_Init+0x48>)
 8005ed0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <MX_TIM11_Init+0x44>)
 8005ed4:	f643 2297 	movw	r2, #14999	; 0x3a97
 8005ed8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eda:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <MX_TIM11_Init+0x44>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <MX_TIM11_Init+0x44>)
 8005ee2:	f247 522f 	movw	r2, #29999	; 0x752f
 8005ee6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005ee8:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <MX_TIM11_Init+0x44>)
 8005eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <MX_TIM11_Init+0x44>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005ef6:	4805      	ldr	r0, [pc, #20]	; (8005f0c <MX_TIM11_Init+0x44>)
 8005ef8:	f004 ffe2 	bl	800aec0 <HAL_TIM_Base_Init>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 8005f02:	f7fe fa65 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005f06:	bf00      	nop
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000640 	.word	0x20000640
 8005f10:	40014800 	.word	0x40014800

08005f14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <HAL_TIM_Base_MspInit+0x80>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d116      	bne.n	8005f54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <HAL_TIM_Base_MspInit+0x84>)
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	4a1a      	ldr	r2, [pc, #104]	; (8005f98 <HAL_TIM_Base_MspInit+0x84>)
 8005f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f34:	6453      	str	r3, [r2, #68]	; 0x44
 8005f36:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <HAL_TIM_Base_MspInit+0x84>)
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005f42:	2200      	movs	r2, #0
 8005f44:	2100      	movs	r1, #0
 8005f46:	2019      	movs	r0, #25
 8005f48:	f000 fc9f 	bl	800688a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005f4c:	2019      	movs	r0, #25
 8005f4e:	f000 fcb8 	bl	80068c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8005f52:	e01a      	b.n	8005f8a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a10      	ldr	r2, [pc, #64]	; (8005f9c <HAL_TIM_Base_MspInit+0x88>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d115      	bne.n	8005f8a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <HAL_TIM_Base_MspInit+0x84>)
 8005f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f66:	4a0c      	ldr	r2, [pc, #48]	; (8005f98 <HAL_TIM_Base_MspInit+0x84>)
 8005f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <HAL_TIM_Base_MspInit+0x84>)
 8005f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f76:	60bb      	str	r3, [r7, #8]
 8005f78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	201a      	movs	r0, #26
 8005f80:	f000 fc83 	bl	800688a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005f84:	201a      	movs	r0, #26
 8005f86:	f000 fc9c 	bl	80068c2 <HAL_NVIC_EnableIRQ>
}
 8005f8a:	bf00      	nop
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40014400 	.word	0x40014400
 8005f98:	40023800 	.word	0x40023800
 8005f9c:	40014800 	.word	0x40014800

08005fa0 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d017      	beq.n	8005fe8 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	60fb      	str	r3, [r7, #12]
	}
}
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006004:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	d056      	beq.n	80060c6 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006020:	2220      	movs	r2, #32
 8006022:	409a      	lsls	r2, r3
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8006038:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3304      	adds	r3, #4
 800603e:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8006040:	2300      	movs	r3, #0
 8006042:	82fb      	strh	r3, [r7, #22]
 8006044:	e01a      	b.n	800607c <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f103 0045 	add.w	r0, r3, #69	; 0x45
 800604c:	8afb      	ldrh	r3, [r7, #22]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	4413      	add	r3, r2
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	4619      	mov	r1, r3
 8006056:	f7ff fc57 	bl	8005908 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 800605a:	8afb      	ldrh	r3, [r7, #22]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	4413      	add	r3, r2
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b0a      	cmp	r3, #10
 8006064:	d107      	bne.n	8006076 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800606c:	3301      	adds	r3, #1
 800606e:	b2da      	uxtb	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8006076:	8afb      	ldrh	r3, [r7, #22]
 8006078:	3301      	adds	r3, #1
 800607a:	82fb      	strh	r3, [r7, #22]
 800607c:	8afa      	ldrh	r2, [r7, #22]
 800607e:	89fb      	ldrh	r3, [r7, #14]
 8006080:	429a      	cmp	r2, r3
 8006082:	d3e0      	bcc.n	8006046 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608c:	223f      	movs	r2, #63	; 0x3f
 800608e:	409a      	lsls	r2, r3
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	1d1a      	adds	r2, r3, #4
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2241      	movs	r2, #65	; 0x41
 80060ac:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0201 	orr.w	r2, r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
	}
}
 80060c6:	bf00      	nop
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	460b      	mov	r3, r1
 80060d8:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	33ca      	adds	r3, #202	; 0xca
 80060de:	78fa      	ldrb	r2, [r7, #3]
 80060e0:	4611      	mov	r1, r2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fc10 	bl	8005908 <RB_Write>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01f      	beq.n	8006154 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8006114:	e013      	b.n	800613e <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b0a      	cmp	r3, #10
 800611c:	d10c      	bne.n	8006138 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800612a:	3b01      	subs	r3, #1
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 8006134:	2300      	movs	r3, #0
 8006136:	e00e      	b.n	8006156 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3301      	adds	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3345      	adds	r3, #69	; 0x45
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fbb1 	bl	80058ac <RB_Read>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0e2      	beq.n	8006116 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8006150:	2300      	movs	r3, #0
 8006152:	e000      	b.n	8006156 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8006154:	2301      	movs	r3, #1
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800616c:	e012      	b.n	8006194 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 800616e:	7afb      	ldrb	r3, [r7, #11]
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff ffab 	bl	80060ce <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 800617e:	7afb      	ldrb	r3, [r7, #11]
 8006180:	2b0a      	cmp	r3, #10
 8006182:	d107      	bne.n	8006194 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 800618a:	3301      	adds	r3, #1
 800618c:	b2da      	uxtb	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	72fb      	strb	r3, [r7, #11]
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e6      	bne.n	800616e <UARTDMA_Print+0x10>
		}
	}
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 80061d6:	2300      	movs	r3, #0
 80061d8:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d027      	beq.n	800623a <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80061ea:	e013      	b.n	8006214 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 80061ec:	7b7b      	ldrb	r3, [r7, #13]
 80061ee:	2b0a      	cmp	r3, #10
 80061f0:	d107      	bne.n	8006202 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8006202:	89fb      	ldrh	r3, [r7, #14]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	81fa      	strh	r2, [r7, #14]
 8006208:	4619      	mov	r1, r3
 800620a:	7b7a      	ldrb	r2, [r7, #13]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	440b      	add	r3, r1
 8006210:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	33ca      	adds	r3, #202	; 0xca
 8006218:	f107 020d 	add.w	r2, r7, #13
 800621c:	4611      	mov	r1, r2
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff fb44 	bl	80058ac <RB_Read>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0e0      	beq.n	80061ec <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3389      	adds	r3, #137	; 0x89
 8006232:	89fa      	ldrh	r2, [r7, #14]
 8006234:	4619      	mov	r1, r3
 8006236:	f005 f937 	bl	800b4a8 <HAL_UART_Transmit_DMA>
	}
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0210 	orr.w	r2, r2, #16
 8006264:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0210 	orr.w	r2, r2, #16
 800627c:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f042 0210 	orr.w	r2, r2, #16
 8006294:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3304      	adds	r3, #4
 800629e:	2241      	movs	r2, #65	; 0x41
 80062a0:	4619      	mov	r1, r3
 80062a2:	f005 f97f 	bl	800b5a4 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0208 	bic.w	r2, r2, #8
 80062bc:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0208 	bic.w	r2, r2, #8
 80062d4:	601a      	str	r2, [r3, #0]
}
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062e4:	4b11      	ldr	r3, [pc, #68]	; (800632c <MX_USART2_UART_Init+0x4c>)
 80062e6:	4a12      	ldr	r2, [pc, #72]	; (8006330 <MX_USART2_UART_Init+0x50>)
 80062e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80062ea:	4b10      	ldr	r3, [pc, #64]	; (800632c <MX_USART2_UART_Init+0x4c>)
 80062ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062f2:	4b0e      	ldr	r3, [pc, #56]	; (800632c <MX_USART2_UART_Init+0x4c>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062f8:	4b0c      	ldr	r3, [pc, #48]	; (800632c <MX_USART2_UART_Init+0x4c>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80062fe:	4b0b      	ldr	r3, [pc, #44]	; (800632c <MX_USART2_UART_Init+0x4c>)
 8006300:	2200      	movs	r2, #0
 8006302:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006304:	4b09      	ldr	r3, [pc, #36]	; (800632c <MX_USART2_UART_Init+0x4c>)
 8006306:	220c      	movs	r2, #12
 8006308:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800630a:	4b08      	ldr	r3, [pc, #32]	; (800632c <MX_USART2_UART_Init+0x4c>)
 800630c:	2200      	movs	r2, #0
 800630e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <MX_USART2_UART_Init+0x4c>)
 8006312:	2200      	movs	r2, #0
 8006314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006316:	4805      	ldr	r0, [pc, #20]	; (800632c <MX_USART2_UART_Init+0x4c>)
 8006318:	f005 f878 	bl	800b40c <HAL_UART_Init>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006322:	f7fe f855 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006326:	bf00      	nop
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000748 	.word	0x20000748
 8006330:	40004400 	.word	0x40004400

08006334 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	; 0x28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800633c:	f107 0314 	add.w	r3, r7, #20
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	609a      	str	r2, [r3, #8]
 8006348:	60da      	str	r2, [r3, #12]
 800634a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a47      	ldr	r2, [pc, #284]	; (8006470 <HAL_UART_MspInit+0x13c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	f040 8088 	bne.w	8006468 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	4b45      	ldr	r3, [pc, #276]	; (8006474 <HAL_UART_MspInit+0x140>)
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	4a44      	ldr	r2, [pc, #272]	; (8006474 <HAL_UART_MspInit+0x140>)
 8006362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006366:	6413      	str	r3, [r2, #64]	; 0x40
 8006368:	4b42      	ldr	r3, [pc, #264]	; (8006474 <HAL_UART_MspInit+0x140>)
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	4b3e      	ldr	r3, [pc, #248]	; (8006474 <HAL_UART_MspInit+0x140>)
 800637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637c:	4a3d      	ldr	r2, [pc, #244]	; (8006474 <HAL_UART_MspInit+0x140>)
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	6313      	str	r3, [r2, #48]	; 0x30
 8006384:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <HAL_UART_MspInit+0x140>)
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006390:	230c      	movs	r3, #12
 8006392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006394:	2302      	movs	r3, #2
 8006396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006398:	2300      	movs	r3, #0
 800639a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800639c:	2303      	movs	r3, #3
 800639e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063a0:	2307      	movs	r3, #7
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063a4:	f107 0314 	add.w	r3, r7, #20
 80063a8:	4619      	mov	r1, r3
 80063aa:	4833      	ldr	r0, [pc, #204]	; (8006478 <HAL_UART_MspInit+0x144>)
 80063ac:	f000 fede 	bl	800716c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80063b0:	4b32      	ldr	r3, [pc, #200]	; (800647c <HAL_UART_MspInit+0x148>)
 80063b2:	4a33      	ldr	r2, [pc, #204]	; (8006480 <HAL_UART_MspInit+0x14c>)
 80063b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80063b6:	4b31      	ldr	r3, [pc, #196]	; (800647c <HAL_UART_MspInit+0x148>)
 80063b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063be:	4b2f      	ldr	r3, [pc, #188]	; (800647c <HAL_UART_MspInit+0x148>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063c4:	4b2d      	ldr	r3, [pc, #180]	; (800647c <HAL_UART_MspInit+0x148>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063ca:	4b2c      	ldr	r3, [pc, #176]	; (800647c <HAL_UART_MspInit+0x148>)
 80063cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063d2:	4b2a      	ldr	r3, [pc, #168]	; (800647c <HAL_UART_MspInit+0x148>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063d8:	4b28      	ldr	r3, [pc, #160]	; (800647c <HAL_UART_MspInit+0x148>)
 80063da:	2200      	movs	r2, #0
 80063dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80063de:	4b27      	ldr	r3, [pc, #156]	; (800647c <HAL_UART_MspInit+0x148>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80063e4:	4b25      	ldr	r3, [pc, #148]	; (800647c <HAL_UART_MspInit+0x148>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063ea:	4b24      	ldr	r3, [pc, #144]	; (800647c <HAL_UART_MspInit+0x148>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80063f0:	4822      	ldr	r0, [pc, #136]	; (800647c <HAL_UART_MspInit+0x148>)
 80063f2:	f000 faab 	bl	800694c <HAL_DMA_Init>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80063fc:	f7fd ffe8 	bl	80043d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a1e      	ldr	r2, [pc, #120]	; (800647c <HAL_UART_MspInit+0x148>)
 8006404:	639a      	str	r2, [r3, #56]	; 0x38
 8006406:	4a1d      	ldr	r2, [pc, #116]	; (800647c <HAL_UART_MspInit+0x148>)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800640c:	4b1d      	ldr	r3, [pc, #116]	; (8006484 <HAL_UART_MspInit+0x150>)
 800640e:	4a1e      	ldr	r2, [pc, #120]	; (8006488 <HAL_UART_MspInit+0x154>)
 8006410:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006412:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <HAL_UART_MspInit+0x150>)
 8006414:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006418:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800641a:	4b1a      	ldr	r3, [pc, #104]	; (8006484 <HAL_UART_MspInit+0x150>)
 800641c:	2240      	movs	r2, #64	; 0x40
 800641e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006420:	4b18      	ldr	r3, [pc, #96]	; (8006484 <HAL_UART_MspInit+0x150>)
 8006422:	2200      	movs	r2, #0
 8006424:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006426:	4b17      	ldr	r3, [pc, #92]	; (8006484 <HAL_UART_MspInit+0x150>)
 8006428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800642c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800642e:	4b15      	ldr	r3, [pc, #84]	; (8006484 <HAL_UART_MspInit+0x150>)
 8006430:	2200      	movs	r2, #0
 8006432:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006434:	4b13      	ldr	r3, [pc, #76]	; (8006484 <HAL_UART_MspInit+0x150>)
 8006436:	2200      	movs	r2, #0
 8006438:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <HAL_UART_MspInit+0x150>)
 800643c:	2200      	movs	r2, #0
 800643e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006440:	4b10      	ldr	r3, [pc, #64]	; (8006484 <HAL_UART_MspInit+0x150>)
 8006442:	2200      	movs	r2, #0
 8006444:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006446:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <HAL_UART_MspInit+0x150>)
 8006448:	2200      	movs	r2, #0
 800644a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800644c:	480d      	ldr	r0, [pc, #52]	; (8006484 <HAL_UART_MspInit+0x150>)
 800644e:	f000 fa7d 	bl	800694c <HAL_DMA_Init>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8006458:	f7fd ffba 	bl	80043d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a09      	ldr	r2, [pc, #36]	; (8006484 <HAL_UART_MspInit+0x150>)
 8006460:	635a      	str	r2, [r3, #52]	; 0x34
 8006462:	4a08      	ldr	r2, [pc, #32]	; (8006484 <HAL_UART_MspInit+0x150>)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006468:	bf00      	nop
 800646a:	3728      	adds	r7, #40	; 0x28
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40004400 	.word	0x40004400
 8006474:	40023800 	.word	0x40023800
 8006478:	40020000 	.word	0x40020000
 800647c:	20000688 	.word	0x20000688
 8006480:	40026088 	.word	0x40026088
 8006484:	200006e8 	.word	0x200006e8
 8006488:	400260a0 	.word	0x400260a0

0800648c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800648c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006490:	480d      	ldr	r0, [pc, #52]	; (80064c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006492:	490e      	ldr	r1, [pc, #56]	; (80064cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006494:	4a0e      	ldr	r2, [pc, #56]	; (80064d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006498:	e002      	b.n	80064a0 <LoopCopyDataInit>

0800649a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800649a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800649c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800649e:	3304      	adds	r3, #4

080064a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064a4:	d3f9      	bcc.n	800649a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064a6:	4a0b      	ldr	r2, [pc, #44]	; (80064d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80064a8:	4c0b      	ldr	r4, [pc, #44]	; (80064d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80064aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064ac:	e001      	b.n	80064b2 <LoopFillZerobss>

080064ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064b0:	3204      	adds	r2, #4

080064b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064b4:	d3fb      	bcc.n	80064ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80064b6:	f7ff fcd1 	bl	8005e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064ba:	f006 f8f5 	bl	800c6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80064be:	f7fd fe5d 	bl	800417c <main>
  bx  lr    
 80064c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80064c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80064c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064cc:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80064d0:	08024c18 	.word	0x08024c18
  ldr r2, =_sbss
 80064d4:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80064d8:	200007a0 	.word	0x200007a0

080064dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064dc:	e7fe      	b.n	80064dc <ADC_IRQHandler>
	...

080064e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064e4:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <HAL_Init+0x40>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a0d      	ldr	r2, [pc, #52]	; (8006520 <HAL_Init+0x40>)
 80064ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_Init+0x40>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <HAL_Init+0x40>)
 80064f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064fc:	4b08      	ldr	r3, [pc, #32]	; (8006520 <HAL_Init+0x40>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a07      	ldr	r2, [pc, #28]	; (8006520 <HAL_Init+0x40>)
 8006502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006508:	2003      	movs	r0, #3
 800650a:	f000 f9b3 	bl	8006874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800650e:	2000      	movs	r0, #0
 8006510:	f000 f808 	bl	8006524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006514:	f7ff fb12 	bl	8005b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40023c00 	.word	0x40023c00

08006524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <HAL_InitTick+0x54>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	4b12      	ldr	r3, [pc, #72]	; (800657c <HAL_InitTick+0x58>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800653a:	fbb3 f3f1 	udiv	r3, r3, r1
 800653e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006542:	4618      	mov	r0, r3
 8006544:	f000 f9d9 	bl	80068fa <HAL_SYSTICK_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e00e      	b.n	8006570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b0f      	cmp	r3, #15
 8006556:	d80a      	bhi.n	800656e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006558:	2200      	movs	r2, #0
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	f000 f993 	bl	800688a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006564:	4a06      	ldr	r2, [pc, #24]	; (8006580 <HAL_InitTick+0x5c>)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
}
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	20000034 	.word	0x20000034
 800657c:	2000003c 	.word	0x2000003c
 8006580:	20000038 	.word	0x20000038

08006584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006588:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <HAL_IncTick+0x20>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <HAL_IncTick+0x24>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4413      	add	r3, r2
 8006594:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <HAL_IncTick+0x24>)
 8006596:	6013      	str	r3, [r2, #0]
}
 8006598:	bf00      	nop
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	2000003c 	.word	0x2000003c
 80065a8:	2000078c 	.word	0x2000078c

080065ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
  return uwTick;
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <HAL_GetTick+0x14>)
 80065b2:	681b      	ldr	r3, [r3, #0]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	2000078c 	.word	0x2000078c

080065c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065cc:	f7ff ffee 	bl	80065ac <HAL_GetTick>
 80065d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d005      	beq.n	80065ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065de:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <HAL_Delay+0x44>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065ea:	bf00      	nop
 80065ec:	f7ff ffde 	bl	80065ac <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d8f7      	bhi.n	80065ec <HAL_Delay+0x28>
  {
  }
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	2000003c 	.word	0x2000003c

0800660c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800661c:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <__NVIC_SetPriorityGrouping+0x44>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006628:	4013      	ands	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800663e:	4a04      	ldr	r2, [pc, #16]	; (8006650 <__NVIC_SetPriorityGrouping+0x44>)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	60d3      	str	r3, [r2, #12]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	e000ed00 	.word	0xe000ed00

08006654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006658:	4b04      	ldr	r3, [pc, #16]	; (800666c <__NVIC_GetPriorityGrouping+0x18>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	0a1b      	lsrs	r3, r3, #8
 800665e:	f003 0307 	and.w	r3, r3, #7
}
 8006662:	4618      	mov	r0, r3
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	e000ed00 	.word	0xe000ed00

08006670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800667a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667e:	2b00      	cmp	r3, #0
 8006680:	db0b      	blt.n	800669a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	f003 021f 	and.w	r2, r3, #31
 8006688:	4907      	ldr	r1, [pc, #28]	; (80066a8 <__NVIC_EnableIRQ+0x38>)
 800668a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	2001      	movs	r0, #1
 8006692:	fa00 f202 	lsl.w	r2, r0, r2
 8006696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	e000e100 	.word	0xe000e100

080066ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	db12      	blt.n	80066e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	f003 021f 	and.w	r2, r3, #31
 80066c4:	490a      	ldr	r1, [pc, #40]	; (80066f0 <__NVIC_DisableIRQ+0x44>)
 80066c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	2001      	movs	r0, #1
 80066ce:	fa00 f202 	lsl.w	r2, r0, r2
 80066d2:	3320      	adds	r3, #32
 80066d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80066d8:	f3bf 8f4f 	dsb	sy
}
 80066dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066de:	f3bf 8f6f 	isb	sy
}
 80066e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	e000e100 	.word	0xe000e100

080066f4 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006702:	2b00      	cmp	r3, #0
 8006704:	db0e      	blt.n	8006724 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006706:	4a0b      	ldr	r2, [pc, #44]	; (8006734 <__NVIC_GetPendingIRQ+0x40>)
 8006708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	3340      	adds	r3, #64	; 0x40
 8006710:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	e000      	b.n	8006726 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8006724:	2300      	movs	r3, #0
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	e000e100 	.word	0xe000e100

08006738 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006746:	2b00      	cmp	r3, #0
 8006748:	db0c      	blt.n	8006764 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	f003 021f 	and.w	r2, r3, #31
 8006750:	4907      	ldr	r1, [pc, #28]	; (8006770 <__NVIC_ClearPendingIRQ+0x38>)
 8006752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006756:	095b      	lsrs	r3, r3, #5
 8006758:	2001      	movs	r0, #1
 800675a:	fa00 f202 	lsl.w	r2, r0, r2
 800675e:	3360      	adds	r3, #96	; 0x60
 8006760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	e000e100 	.word	0xe000e100

08006774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	6039      	str	r1, [r7, #0]
 800677e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006784:	2b00      	cmp	r3, #0
 8006786:	db0a      	blt.n	800679e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	490c      	ldr	r1, [pc, #48]	; (80067c0 <__NVIC_SetPriority+0x4c>)
 800678e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006792:	0112      	lsls	r2, r2, #4
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	440b      	add	r3, r1
 8006798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800679c:	e00a      	b.n	80067b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	4908      	ldr	r1, [pc, #32]	; (80067c4 <__NVIC_SetPriority+0x50>)
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	3b04      	subs	r3, #4
 80067ac:	0112      	lsls	r2, r2, #4
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	440b      	add	r3, r1
 80067b2:	761a      	strb	r2, [r3, #24]
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	e000e100 	.word	0xe000e100
 80067c4:	e000ed00 	.word	0xe000ed00

080067c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b089      	sub	sp, #36	; 0x24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f1c3 0307 	rsb	r3, r3, #7
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	bf28      	it	cs
 80067e6:	2304      	movcs	r3, #4
 80067e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	3304      	adds	r3, #4
 80067ee:	2b06      	cmp	r3, #6
 80067f0:	d902      	bls.n	80067f8 <NVIC_EncodePriority+0x30>
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	3b03      	subs	r3, #3
 80067f6:	e000      	b.n	80067fa <NVIC_EncodePriority+0x32>
 80067f8:	2300      	movs	r3, #0
 80067fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	43da      	mvns	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	401a      	ands	r2, r3
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006810:	f04f 31ff 	mov.w	r1, #4294967295
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	fa01 f303 	lsl.w	r3, r1, r3
 800681a:	43d9      	mvns	r1, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006820:	4313      	orrs	r3, r2
         );
}
 8006822:	4618      	mov	r0, r3
 8006824:	3724      	adds	r7, #36	; 0x24
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3b01      	subs	r3, #1
 800683c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006840:	d301      	bcc.n	8006846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006842:	2301      	movs	r3, #1
 8006844:	e00f      	b.n	8006866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006846:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <SysTick_Config+0x40>)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3b01      	subs	r3, #1
 800684c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800684e:	210f      	movs	r1, #15
 8006850:	f04f 30ff 	mov.w	r0, #4294967295
 8006854:	f7ff ff8e 	bl	8006774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006858:	4b05      	ldr	r3, [pc, #20]	; (8006870 <SysTick_Config+0x40>)
 800685a:	2200      	movs	r2, #0
 800685c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800685e:	4b04      	ldr	r3, [pc, #16]	; (8006870 <SysTick_Config+0x40>)
 8006860:	2207      	movs	r2, #7
 8006862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	e000e010 	.word	0xe000e010

08006874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fec5 	bl	800660c <__NVIC_SetPriorityGrouping>
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af00      	add	r7, sp, #0
 8006890:	4603      	mov	r3, r0
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
 8006896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006898:	2300      	movs	r3, #0
 800689a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800689c:	f7ff feda 	bl	8006654 <__NVIC_GetPriorityGrouping>
 80068a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	6978      	ldr	r0, [r7, #20]
 80068a8:	f7ff ff8e 	bl	80067c8 <NVIC_EncodePriority>
 80068ac:	4602      	mov	r2, r0
 80068ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068b2:	4611      	mov	r1, r2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff ff5d 	bl	8006774 <__NVIC_SetPriority>
}
 80068ba:	bf00      	nop
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	4603      	mov	r3, r0
 80068ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff fecd 	bl	8006670 <__NVIC_EnableIRQ>
}
 80068d6:	bf00      	nop
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	4603      	mov	r3, r0
 80068e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80068e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff fedd 	bl	80066ac <__NVIC_DisableIRQ>
}
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff ff94 	bl	8006830 <SysTick_Config>
 8006908:	4603      	mov	r3, r0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	4603      	mov	r3, r0
 800691a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800691c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fee7 	bl	80066f4 <__NVIC_GetPendingIRQ>
 8006926:	4603      	mov	r3, r0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800693a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fefa 	bl	8006738 <__NVIC_ClearPendingIRQ>
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006958:	f7ff fe28 	bl	80065ac <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e099      	b.n	8006a9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006988:	e00f      	b.n	80069aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800698a:	f7ff fe0f 	bl	80065ac <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b05      	cmp	r3, #5
 8006996:	d908      	bls.n	80069aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2203      	movs	r2, #3
 80069a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e078      	b.n	8006a9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e8      	bne.n	800698a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4b38      	ldr	r3, [pc, #224]	; (8006aa4 <HAL_DMA_Init+0x158>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d107      	bne.n	8006a14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f023 0307 	bic.w	r3, r3, #7
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d117      	bne.n	8006a6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00e      	beq.n	8006a6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fb0f 	bl	8007074 <DMA_CheckFifoParam>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d008      	beq.n	8006a6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2240      	movs	r2, #64	; 0x40
 8006a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e016      	b.n	8006a9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fac6 	bl	8007008 <DMA_CalcBaseAndBitshift>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a84:	223f      	movs	r2, #63	; 0x3f
 8006a86:	409a      	lsls	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	f010803f 	.word	0xf010803f

08006aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006abe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_DMA_Start_IT+0x26>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e040      	b.n	8006b50 <HAL_DMA_Start_IT+0xa8>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d12f      	bne.n	8006b42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 fa58 	bl	8006fac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b00:	223f      	movs	r2, #63	; 0x3f
 8006b02:	409a      	lsls	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0216 	orr.w	r2, r2, #22
 8006b16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0208 	orr.w	r2, r2, #8
 8006b2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e005      	b.n	8006b4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006b66:	f7ff fd21 	bl	80065ac <HAL_GetTick>
 8006b6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d008      	beq.n	8006b8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2280      	movs	r2, #128	; 0x80
 8006b7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e052      	b.n	8006c30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0216 	bic.w	r2, r2, #22
 8006b98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695a      	ldr	r2, [r3, #20]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ba8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <HAL_DMA_Abort+0x62>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0208 	bic.w	r2, r2, #8
 8006bc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0201 	bic.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bda:	e013      	b.n	8006c04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bdc:	f7ff fce6 	bl	80065ac <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	d90c      	bls.n	8006c04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e015      	b.n	8006c30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e4      	bne.n	8006bdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c16:	223f      	movs	r2, #63	; 0x3f
 8006c18:	409a      	lsls	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d004      	beq.n	8006c56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2280      	movs	r2, #128	; 0x80
 8006c50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e00c      	b.n	8006c70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2205      	movs	r2, #5
 8006c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0201 	bic.w	r2, r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c88:	4b92      	ldr	r3, [pc, #584]	; (8006ed4 <HAL_DMA_IRQHandler+0x258>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a92      	ldr	r2, [pc, #584]	; (8006ed8 <HAL_DMA_IRQHandler+0x25c>)
 8006c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c92:	0a9b      	lsrs	r3, r3, #10
 8006c94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca6:	2208      	movs	r2, #8
 8006ca8:	409a      	lsls	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01a      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d013      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0204 	bic.w	r2, r2, #4
 8006cce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	f043 0201 	orr.w	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cec:	2201      	movs	r2, #1
 8006cee:	409a      	lsls	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d012      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00b      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	409a      	lsls	r2, r3
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d16:	f043 0202 	orr.w	r2, r3, #2
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d22:	2204      	movs	r2, #4
 8006d24:	409a      	lsls	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d012      	beq.n	8006d54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d40:	2204      	movs	r2, #4
 8006d42:	409a      	lsls	r2, r3
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4c:	f043 0204 	orr.w	r2, r3, #4
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d58:	2210      	movs	r2, #16
 8006d5a:	409a      	lsls	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d043      	beq.n	8006dec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0308 	and.w	r3, r3, #8
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d03c      	beq.n	8006dec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d76:	2210      	movs	r2, #16
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d018      	beq.n	8006dbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d108      	bne.n	8006dac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d024      	beq.n	8006dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	4798      	blx	r3
 8006daa:	e01f      	b.n	8006dec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01b      	beq.n	8006dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
 8006dbc:	e016      	b.n	8006dec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d107      	bne.n	8006ddc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0208 	bic.w	r2, r2, #8
 8006dda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df0:	2220      	movs	r2, #32
 8006df2:	409a      	lsls	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4013      	ands	r3, r2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 808e 	beq.w	8006f1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8086 	beq.w	8006f1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e12:	2220      	movs	r2, #32
 8006e14:	409a      	lsls	r2, r3
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b05      	cmp	r3, #5
 8006e24:	d136      	bne.n	8006e94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0216 	bic.w	r2, r2, #22
 8006e34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	695a      	ldr	r2, [r3, #20]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <HAL_DMA_IRQHandler+0x1da>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d007      	beq.n	8006e66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0208 	bic.w	r2, r2, #8
 8006e64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6a:	223f      	movs	r2, #63	; 0x3f
 8006e6c:	409a      	lsls	r2, r3
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d07d      	beq.n	8006f86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
        }
        return;
 8006e92:	e078      	b.n	8006f86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01c      	beq.n	8006edc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d108      	bne.n	8006ec2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d030      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3
 8006ec0:	e02b      	b.n	8006f1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d027      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
 8006ed2:	e022      	b.n	8006f1a <HAL_DMA_IRQHandler+0x29e>
 8006ed4:	20000034 	.word	0x20000034
 8006ed8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10f      	bne.n	8006f0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0210 	bic.w	r2, r2, #16
 8006ef8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d032      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d022      	beq.n	8006f74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2205      	movs	r2, #5
 8006f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d307      	bcc.n	8006f62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1f2      	bne.n	8006f46 <HAL_DMA_IRQHandler+0x2ca>
 8006f60:	e000      	b.n	8006f64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006f62:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	4798      	blx	r3
 8006f84:	e000      	b.n	8006f88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006f86:	bf00      	nop
    }
  }
}
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop

08006f90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f9e:	b2db      	uxtb	r3, r3
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b40      	cmp	r3, #64	; 0x40
 8006fd8:	d108      	bne.n	8006fec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006fea:	e007      	b.n	8006ffc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	60da      	str	r2, [r3, #12]
}
 8006ffc:	bf00      	nop
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	3b10      	subs	r3, #16
 8007018:	4a14      	ldr	r2, [pc, #80]	; (800706c <DMA_CalcBaseAndBitshift+0x64>)
 800701a:	fba2 2303 	umull	r2, r3, r2, r3
 800701e:	091b      	lsrs	r3, r3, #4
 8007020:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007022:	4a13      	ldr	r2, [pc, #76]	; (8007070 <DMA_CalcBaseAndBitshift+0x68>)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b03      	cmp	r3, #3
 8007034:	d909      	bls.n	800704a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800703e:	f023 0303 	bic.w	r3, r3, #3
 8007042:	1d1a      	adds	r2, r3, #4
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	659a      	str	r2, [r3, #88]	; 0x58
 8007048:	e007      	b.n	800705a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007052:	f023 0303 	bic.w	r3, r3, #3
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	aaaaaaab 	.word	0xaaaaaaab
 8007070:	080246ec 	.word	0x080246ec

08007074 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d11f      	bne.n	80070ce <DMA_CheckFifoParam+0x5a>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b03      	cmp	r3, #3
 8007092:	d856      	bhi.n	8007142 <DMA_CheckFifoParam+0xce>
 8007094:	a201      	add	r2, pc, #4	; (adr r2, 800709c <DMA_CheckFifoParam+0x28>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	080070ad 	.word	0x080070ad
 80070a0:	080070bf 	.word	0x080070bf
 80070a4:	080070ad 	.word	0x080070ad
 80070a8:	08007143 	.word	0x08007143
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d046      	beq.n	8007146 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070bc:	e043      	b.n	8007146 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070c6:	d140      	bne.n	800714a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070cc:	e03d      	b.n	800714a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d6:	d121      	bne.n	800711c <DMA_CheckFifoParam+0xa8>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d837      	bhi.n	800714e <DMA_CheckFifoParam+0xda>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <DMA_CheckFifoParam+0x70>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070f5 	.word	0x080070f5
 80070e8:	080070fb 	.word	0x080070fb
 80070ec:	080070f5 	.word	0x080070f5
 80070f0:	0800710d 	.word	0x0800710d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	73fb      	strb	r3, [r7, #15]
      break;
 80070f8:	e030      	b.n	800715c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d025      	beq.n	8007152 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800710a:	e022      	b.n	8007152 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007114:	d11f      	bne.n	8007156 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800711a:	e01c      	b.n	8007156 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b02      	cmp	r3, #2
 8007120:	d903      	bls.n	800712a <DMA_CheckFifoParam+0xb6>
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b03      	cmp	r3, #3
 8007126:	d003      	beq.n	8007130 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007128:	e018      	b.n	800715c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	73fb      	strb	r3, [r7, #15]
      break;
 800712e:	e015      	b.n	800715c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00e      	beq.n	800715a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]
      break;
 8007140:	e00b      	b.n	800715a <DMA_CheckFifoParam+0xe6>
      break;
 8007142:	bf00      	nop
 8007144:	e00a      	b.n	800715c <DMA_CheckFifoParam+0xe8>
      break;
 8007146:	bf00      	nop
 8007148:	e008      	b.n	800715c <DMA_CheckFifoParam+0xe8>
      break;
 800714a:	bf00      	nop
 800714c:	e006      	b.n	800715c <DMA_CheckFifoParam+0xe8>
      break;
 800714e:	bf00      	nop
 8007150:	e004      	b.n	800715c <DMA_CheckFifoParam+0xe8>
      break;
 8007152:	bf00      	nop
 8007154:	e002      	b.n	800715c <DMA_CheckFifoParam+0xe8>
      break;   
 8007156:	bf00      	nop
 8007158:	e000      	b.n	800715c <DMA_CheckFifoParam+0xe8>
      break;
 800715a:	bf00      	nop
    }
  } 
  
  return status; 
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop

0800716c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800716c:	b480      	push	{r7}
 800716e:	b089      	sub	sp, #36	; 0x24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800717a:	2300      	movs	r3, #0
 800717c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800717e:	2300      	movs	r3, #0
 8007180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007182:	2300      	movs	r3, #0
 8007184:	61fb      	str	r3, [r7, #28]
 8007186:	e159      	b.n	800743c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007188:	2201      	movs	r2, #1
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4013      	ands	r3, r2
 800719a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	f040 8148 	bne.w	8007436 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d005      	beq.n	80071be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d130      	bne.n	8007220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	2203      	movs	r2, #3
 80071ca:	fa02 f303 	lsl.w	r3, r2, r3
 80071ce:	43db      	mvns	r3, r3
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	4013      	ands	r3, r2
 80071d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	fa02 f303 	lsl.w	r3, r2, r3
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80071f4:	2201      	movs	r2, #1
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	fa02 f303 	lsl.w	r3, r2, r3
 80071fc:	43db      	mvns	r3, r3
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	4013      	ands	r3, r2
 8007202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	091b      	lsrs	r3, r3, #4
 800720a:	f003 0201 	and.w	r2, r3, #1
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	fa02 f303 	lsl.w	r3, r2, r3
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	4313      	orrs	r3, r2
 8007218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	2b03      	cmp	r3, #3
 800722a:	d017      	beq.n	800725c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	2203      	movs	r2, #3
 8007238:	fa02 f303 	lsl.w	r3, r2, r3
 800723c:	43db      	mvns	r3, r3
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	4013      	ands	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	fa02 f303 	lsl.w	r3, r2, r3
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	4313      	orrs	r3, r2
 8007254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f003 0303 	and.w	r3, r3, #3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d123      	bne.n	80072b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	08da      	lsrs	r2, r3, #3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3208      	adds	r2, #8
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	220f      	movs	r2, #15
 8007280:	fa02 f303 	lsl.w	r3, r2, r3
 8007284:	43db      	mvns	r3, r3
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	4013      	ands	r3, r2
 800728a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	4313      	orrs	r3, r2
 80072a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	08da      	lsrs	r2, r3, #3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3208      	adds	r2, #8
 80072aa:	69b9      	ldr	r1, [r7, #24]
 80072ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	2203      	movs	r2, #3
 80072bc:	fa02 f303 	lsl.w	r3, r2, r3
 80072c0:	43db      	mvns	r3, r3
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	4013      	ands	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f003 0203 	and.w	r2, r3, #3
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	4313      	orrs	r3, r2
 80072dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80a2 	beq.w	8007436 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	4b57      	ldr	r3, [pc, #348]	; (8007454 <HAL_GPIO_Init+0x2e8>)
 80072f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fa:	4a56      	ldr	r2, [pc, #344]	; (8007454 <HAL_GPIO_Init+0x2e8>)
 80072fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007300:	6453      	str	r3, [r2, #68]	; 0x44
 8007302:	4b54      	ldr	r3, [pc, #336]	; (8007454 <HAL_GPIO_Init+0x2e8>)
 8007304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800730e:	4a52      	ldr	r2, [pc, #328]	; (8007458 <HAL_GPIO_Init+0x2ec>)
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	089b      	lsrs	r3, r3, #2
 8007314:	3302      	adds	r3, #2
 8007316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800731a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f003 0303 	and.w	r3, r3, #3
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	220f      	movs	r2, #15
 8007326:	fa02 f303 	lsl.w	r3, r2, r3
 800732a:	43db      	mvns	r3, r3
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	4013      	ands	r3, r2
 8007330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a49      	ldr	r2, [pc, #292]	; (800745c <HAL_GPIO_Init+0x2f0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d019      	beq.n	800736e <HAL_GPIO_Init+0x202>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a48      	ldr	r2, [pc, #288]	; (8007460 <HAL_GPIO_Init+0x2f4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d013      	beq.n	800736a <HAL_GPIO_Init+0x1fe>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a47      	ldr	r2, [pc, #284]	; (8007464 <HAL_GPIO_Init+0x2f8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00d      	beq.n	8007366 <HAL_GPIO_Init+0x1fa>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a46      	ldr	r2, [pc, #280]	; (8007468 <HAL_GPIO_Init+0x2fc>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d007      	beq.n	8007362 <HAL_GPIO_Init+0x1f6>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a45      	ldr	r2, [pc, #276]	; (800746c <HAL_GPIO_Init+0x300>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d101      	bne.n	800735e <HAL_GPIO_Init+0x1f2>
 800735a:	2304      	movs	r3, #4
 800735c:	e008      	b.n	8007370 <HAL_GPIO_Init+0x204>
 800735e:	2307      	movs	r3, #7
 8007360:	e006      	b.n	8007370 <HAL_GPIO_Init+0x204>
 8007362:	2303      	movs	r3, #3
 8007364:	e004      	b.n	8007370 <HAL_GPIO_Init+0x204>
 8007366:	2302      	movs	r3, #2
 8007368:	e002      	b.n	8007370 <HAL_GPIO_Init+0x204>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <HAL_GPIO_Init+0x204>
 800736e:	2300      	movs	r3, #0
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	f002 0203 	and.w	r2, r2, #3
 8007376:	0092      	lsls	r2, r2, #2
 8007378:	4093      	lsls	r3, r2
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	4313      	orrs	r3, r2
 800737e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007380:	4935      	ldr	r1, [pc, #212]	; (8007458 <HAL_GPIO_Init+0x2ec>)
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	089b      	lsrs	r3, r3, #2
 8007386:	3302      	adds	r3, #2
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800738e:	4b38      	ldr	r3, [pc, #224]	; (8007470 <HAL_GPIO_Init+0x304>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	43db      	mvns	r3, r3
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	4013      	ands	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80073b2:	4a2f      	ldr	r2, [pc, #188]	; (8007470 <HAL_GPIO_Init+0x304>)
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80073b8:	4b2d      	ldr	r3, [pc, #180]	; (8007470 <HAL_GPIO_Init+0x304>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	43db      	mvns	r3, r3
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	4013      	ands	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80073dc:	4a24      	ldr	r2, [pc, #144]	; (8007470 <HAL_GPIO_Init+0x304>)
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073e2:	4b23      	ldr	r3, [pc, #140]	; (8007470 <HAL_GPIO_Init+0x304>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	43db      	mvns	r3, r3
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	4013      	ands	r3, r2
 80073f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007406:	4a1a      	ldr	r2, [pc, #104]	; (8007470 <HAL_GPIO_Init+0x304>)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800740c:	4b18      	ldr	r3, [pc, #96]	; (8007470 <HAL_GPIO_Init+0x304>)
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	43db      	mvns	r3, r3
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	4013      	ands	r3, r2
 800741a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007430:	4a0f      	ldr	r2, [pc, #60]	; (8007470 <HAL_GPIO_Init+0x304>)
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	3301      	adds	r3, #1
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	2b0f      	cmp	r3, #15
 8007440:	f67f aea2 	bls.w	8007188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	3724      	adds	r7, #36	; 0x24
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	40023800 	.word	0x40023800
 8007458:	40013800 	.word	0x40013800
 800745c:	40020000 	.word	0x40020000
 8007460:	40020400 	.word	0x40020400
 8007464:	40020800 	.word	0x40020800
 8007468:	40020c00 	.word	0x40020c00
 800746c:	40021000 	.word	0x40021000
 8007470:	40013c00 	.word	0x40013c00

08007474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	887b      	ldrh	r3, [r7, #2]
 8007486:	4013      	ands	r3, r2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
 8007490:	e001      	b.n	8007496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	807b      	strh	r3, [r7, #2]
 80074b0:	4613      	mov	r3, r2
 80074b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074b4:	787b      	ldrb	r3, [r7, #1]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074ba:	887a      	ldrh	r2, [r7, #2]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074c0:	e003      	b.n	80074ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074c2:	887b      	ldrh	r3, [r7, #2]
 80074c4:	041a      	lsls	r2, r3, #16
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	619a      	str	r2, [r3, #24]
}
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b085      	sub	sp, #20
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074e8:	887a      	ldrh	r2, [r7, #2]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4013      	ands	r3, r2
 80074ee:	041a      	lsls	r2, r3, #16
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	43d9      	mvns	r1, r3
 80074f4:	887b      	ldrh	r3, [r7, #2]
 80074f6:	400b      	ands	r3, r1
 80074f8:	431a      	orrs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	619a      	str	r2, [r3, #24]
}
 80074fe:	bf00      	nop
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007516:	4b08      	ldr	r3, [pc, #32]	; (8007538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007518:	695a      	ldr	r2, [r3, #20]
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	4013      	ands	r3, r2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d006      	beq.n	8007530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007522:	4a05      	ldr	r2, [pc, #20]	; (8007538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	4618      	mov	r0, r3
 800752c:	f7fc ff3c 	bl	80043a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40013c00 	.word	0x40013c00

0800753c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e12b      	b.n	80077a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7fc fd56 	bl	8004014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2224      	movs	r2, #36	; 0x24
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800758e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800759e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80075a0:	f003 f852 	bl	800a648 <HAL_RCC_GetPCLK1Freq>
 80075a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	4a81      	ldr	r2, [pc, #516]	; (80077b0 <HAL_I2C_Init+0x274>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d807      	bhi.n	80075c0 <HAL_I2C_Init+0x84>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4a80      	ldr	r2, [pc, #512]	; (80077b4 <HAL_I2C_Init+0x278>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	bf94      	ite	ls
 80075b8:	2301      	movls	r3, #1
 80075ba:	2300      	movhi	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	e006      	b.n	80075ce <HAL_I2C_Init+0x92>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4a7d      	ldr	r2, [pc, #500]	; (80077b8 <HAL_I2C_Init+0x27c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	bf94      	ite	ls
 80075c8:	2301      	movls	r3, #1
 80075ca:	2300      	movhi	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e0e7      	b.n	80077a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4a78      	ldr	r2, [pc, #480]	; (80077bc <HAL_I2C_Init+0x280>)
 80075da:	fba2 2303 	umull	r2, r3, r2, r3
 80075de:	0c9b      	lsrs	r3, r3, #18
 80075e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4a6a      	ldr	r2, [pc, #424]	; (80077b0 <HAL_I2C_Init+0x274>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d802      	bhi.n	8007610 <HAL_I2C_Init+0xd4>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	3301      	adds	r3, #1
 800760e:	e009      	b.n	8007624 <HAL_I2C_Init+0xe8>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007616:	fb02 f303 	mul.w	r3, r2, r3
 800761a:	4a69      	ldr	r2, [pc, #420]	; (80077c0 <HAL_I2C_Init+0x284>)
 800761c:	fba2 2303 	umull	r2, r3, r2, r3
 8007620:	099b      	lsrs	r3, r3, #6
 8007622:	3301      	adds	r3, #1
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6812      	ldr	r2, [r2, #0]
 8007628:	430b      	orrs	r3, r1
 800762a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	495c      	ldr	r1, [pc, #368]	; (80077b0 <HAL_I2C_Init+0x274>)
 8007640:	428b      	cmp	r3, r1
 8007642:	d819      	bhi.n	8007678 <HAL_I2C_Init+0x13c>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	1e59      	subs	r1, r3, #1
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007652:	1c59      	adds	r1, r3, #1
 8007654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007658:	400b      	ands	r3, r1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <HAL_I2C_Init+0x138>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	1e59      	subs	r1, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	fbb1 f3f3 	udiv	r3, r1, r3
 800766c:	3301      	adds	r3, #1
 800766e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007672:	e051      	b.n	8007718 <HAL_I2C_Init+0x1dc>
 8007674:	2304      	movs	r3, #4
 8007676:	e04f      	b.n	8007718 <HAL_I2C_Init+0x1dc>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d111      	bne.n	80076a4 <HAL_I2C_Init+0x168>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	1e58      	subs	r0, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6859      	ldr	r1, [r3, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	440b      	add	r3, r1
 800768e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007692:	3301      	adds	r3, #1
 8007694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007698:	2b00      	cmp	r3, #0
 800769a:	bf0c      	ite	eq
 800769c:	2301      	moveq	r3, #1
 800769e:	2300      	movne	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	e012      	b.n	80076ca <HAL_I2C_Init+0x18e>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	1e58      	subs	r0, r3, #1
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6859      	ldr	r1, [r3, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	0099      	lsls	r1, r3, #2
 80076b4:	440b      	add	r3, r1
 80076b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ba:	3301      	adds	r3, #1
 80076bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bf0c      	ite	eq
 80076c4:	2301      	moveq	r3, #1
 80076c6:	2300      	movne	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <HAL_I2C_Init+0x196>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e022      	b.n	8007718 <HAL_I2C_Init+0x1dc>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10e      	bne.n	80076f8 <HAL_I2C_Init+0x1bc>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	1e58      	subs	r0, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6859      	ldr	r1, [r3, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	440b      	add	r3, r1
 80076e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ec:	3301      	adds	r3, #1
 80076ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f6:	e00f      	b.n	8007718 <HAL_I2C_Init+0x1dc>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	1e58      	subs	r0, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6859      	ldr	r1, [r3, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	440b      	add	r3, r1
 8007706:	0099      	lsls	r1, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	fbb0 f3f3 	udiv	r3, r0, r3
 800770e:	3301      	adds	r3, #1
 8007710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	6809      	ldr	r1, [r1, #0]
 800771c:	4313      	orrs	r3, r2
 800771e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69da      	ldr	r2, [r3, #28]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6911      	ldr	r1, [r2, #16]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	68d2      	ldr	r2, [r2, #12]
 8007752:	4311      	orrs	r1, r2
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	430b      	orrs	r3, r1
 800775a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695a      	ldr	r2, [r3, #20]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	431a      	orrs	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	000186a0 	.word	0x000186a0
 80077b4:	001e847f 	.word	0x001e847f
 80077b8:	003d08ff 	.word	0x003d08ff
 80077bc:	431bde83 	.word	0x431bde83
 80077c0:	10624dd3 	.word	0x10624dd3

080077c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af02      	add	r7, sp, #8
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	607a      	str	r2, [r7, #4]
 80077ce:	461a      	mov	r2, r3
 80077d0:	460b      	mov	r3, r1
 80077d2:	817b      	strh	r3, [r7, #10]
 80077d4:	4613      	mov	r3, r2
 80077d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077d8:	f7fe fee8 	bl	80065ac <HAL_GetTick>
 80077dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	f040 80e0 	bne.w	80079ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	2319      	movs	r3, #25
 80077f2:	2201      	movs	r2, #1
 80077f4:	4970      	ldr	r1, [pc, #448]	; (80079b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f002 f8dc 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007802:	2302      	movs	r3, #2
 8007804:	e0d3      	b.n	80079ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_I2C_Master_Transmit+0x50>
 8007810:	2302      	movs	r3, #2
 8007812:	e0cc      	b.n	80079ae <HAL_I2C_Master_Transmit+0x1ea>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b01      	cmp	r3, #1
 8007828:	d007      	beq.n	800783a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 0201 	orr.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007848:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2221      	movs	r2, #33	; 0x21
 800784e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2210      	movs	r2, #16
 8007856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	893a      	ldrh	r2, [r7, #8]
 800786a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4a50      	ldr	r2, [pc, #320]	; (80079bc <HAL_I2C_Master_Transmit+0x1f8>)
 800787a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800787c:	8979      	ldrh	r1, [r7, #10]
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	6a3a      	ldr	r2, [r7, #32]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f001 fe9e 	bl	80095c4 <I2C_MasterRequestWrite>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e08d      	b.n	80079ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007892:	2300      	movs	r3, #0
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80078a8:	e066      	b.n	8007978 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	6a39      	ldr	r1, [r7, #32]
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f002 f956 	bl	8009b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00d      	beq.n	80078d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d107      	bne.n	80078d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e06b      	b.n	80079ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	781a      	ldrb	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b04      	cmp	r3, #4
 8007912:	d11b      	bne.n	800794c <HAL_I2C_Master_Transmit+0x188>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007918:	2b00      	cmp	r3, #0
 800791a:	d017      	beq.n	800794c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	6a39      	ldr	r1, [r7, #32]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f002 f946 	bl	8009be2 <I2C_WaitOnBTFFlagUntilTimeout>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00d      	beq.n	8007978 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	2b04      	cmp	r3, #4
 8007962:	d107      	bne.n	8007974 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007972:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e01a      	b.n	80079ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800797c:	2b00      	cmp	r3, #0
 800797e:	d194      	bne.n	80078aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800798e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	e000      	b.n	80079ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80079ac:	2302      	movs	r3, #2
  }
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	00100002 	.word	0x00100002
 80079bc:	ffff0000 	.word	0xffff0000

080079c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08c      	sub	sp, #48	; 0x30
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	607a      	str	r2, [r7, #4]
 80079ca:	461a      	mov	r2, r3
 80079cc:	460b      	mov	r3, r1
 80079ce:	817b      	strh	r3, [r7, #10]
 80079d0:	4613      	mov	r3, r2
 80079d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079d4:	f7fe fdea 	bl	80065ac <HAL_GetTick>
 80079d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	f040 820b 	bne.w	8007dfe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	2319      	movs	r3, #25
 80079ee:	2201      	movs	r2, #1
 80079f0:	497c      	ldr	r1, [pc, #496]	; (8007be4 <HAL_I2C_Master_Receive+0x224>)
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f001 ffde 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80079fe:	2302      	movs	r3, #2
 8007a00:	e1fe      	b.n	8007e00 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d101      	bne.n	8007a10 <HAL_I2C_Master_Receive+0x50>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e1f7      	b.n	8007e00 <HAL_I2C_Master_Receive+0x440>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d007      	beq.n	8007a36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0201 	orr.w	r2, r2, #1
 8007a34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2222      	movs	r2, #34	; 0x22
 8007a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2210      	movs	r2, #16
 8007a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	893a      	ldrh	r2, [r7, #8]
 8007a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4a5c      	ldr	r2, [pc, #368]	; (8007be8 <HAL_I2C_Master_Receive+0x228>)
 8007a76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007a78:	8979      	ldrh	r1, [r7, #10]
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f001 fe22 	bl	80096c8 <I2C_MasterRequestRead>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e1b8      	b.n	8007e00 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d113      	bne.n	8007abe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a96:	2300      	movs	r3, #0
 8007a98:	623b      	str	r3, [r7, #32]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	623b      	str	r3, [r7, #32]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	623b      	str	r3, [r7, #32]
 8007aaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	e18c      	b.n	8007dd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d11b      	bne.n	8007afe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	61fb      	str	r3, [r7, #28]
 8007aea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	e16c      	b.n	8007dd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d11b      	bne.n	8007b3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b26:	2300      	movs	r3, #0
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	e14c      	b.n	8007dd8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007b64:	e138      	b.n	8007dd8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	f200 80f1 	bhi.w	8007d52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d123      	bne.n	8007bc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f002 f8a3 	bl	8009cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e139      	b.n	8007e00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	b2d2      	uxtb	r2, r2
 8007b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bbe:	e10b      	b.n	8007dd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d14e      	bne.n	8007c66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4906      	ldr	r1, [pc, #24]	; (8007bec <HAL_I2C_Master_Receive+0x22c>)
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f001 feee 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d008      	beq.n	8007bf0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e10e      	b.n	8007e00 <HAL_I2C_Master_Receive+0x440>
 8007be2:	bf00      	nop
 8007be4:	00100002 	.word	0x00100002
 8007be8:	ffff0000 	.word	0xffff0000
 8007bec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691a      	ldr	r2, [r3, #16]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	b2d2      	uxtb	r2, r2
 8007c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c64:	e0b8      	b.n	8007dd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4966      	ldr	r1, [pc, #408]	; (8007e08 <HAL_I2C_Master_Receive+0x448>)
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f001 fe9f 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e0bf      	b.n	8007e00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691a      	ldr	r2, [r3, #16]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cac:	3b01      	subs	r3, #1
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	2200      	movs	r2, #0
 8007cca:	494f      	ldr	r1, [pc, #316]	; (8007e08 <HAL_I2C_Master_Receive+0x448>)
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f001 fe71 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e091      	b.n	8007e00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d50:	e042      	b.n	8007dd8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f001 ffb6 	bl	8009cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e04c      	b.n	8007e00 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	3b01      	subs	r3, #1
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	f003 0304 	and.w	r3, r3, #4
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d118      	bne.n	8007dd8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691a      	ldr	r2, [r3, #16]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	b2d2      	uxtb	r2, r2
 8007db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f47f aec2 	bne.w	8007b66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e000      	b.n	8007e00 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007dfe:	2302      	movs	r3, #2
  }
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3728      	adds	r7, #40	; 0x28
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	00010004 	.word	0x00010004

08007e0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d003      	beq.n	8007e44 <HAL_I2C_EV_IRQHandler+0x38>
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	f040 80c1 	bne.w	8007fc6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10d      	bne.n	8007e7a <HAL_I2C_EV_IRQHandler+0x6e>
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007e64:	d003      	beq.n	8007e6e <HAL_I2C_EV_IRQHandler+0x62>
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007e6c:	d101      	bne.n	8007e72 <HAL_I2C_EV_IRQHandler+0x66>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e000      	b.n	8007e74 <HAL_I2C_EV_IRQHandler+0x68>
 8007e72:	2300      	movs	r3, #0
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	f000 8132 	beq.w	80080de <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00c      	beq.n	8007e9e <HAL_I2C_EV_IRQHandler+0x92>
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	0a5b      	lsrs	r3, r3, #9
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d006      	beq.n	8007e9e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 ff9e 	bl	8009dd2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fd79 	bl	800898e <I2C_Master_SB>
 8007e9c:	e092      	b.n	8007fc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	08db      	lsrs	r3, r3, #3
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d009      	beq.n	8007ebe <HAL_I2C_EV_IRQHandler+0xb2>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	0a5b      	lsrs	r3, r3, #9
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fdef 	bl	8008a9a <I2C_Master_ADD10>
 8007ebc:	e082      	b.n	8007fc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	085b      	lsrs	r3, r3, #1
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d009      	beq.n	8007ede <HAL_I2C_EV_IRQHandler+0xd2>
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	0a5b      	lsrs	r3, r3, #9
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fe09 	bl	8008aee <I2C_Master_ADDR>
 8007edc:	e072      	b.n	8007fc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	089b      	lsrs	r3, r3, #2
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d03b      	beq.n	8007f62 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef8:	f000 80f3 	beq.w	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	09db      	lsrs	r3, r3, #7
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00f      	beq.n	8007f28 <HAL_I2C_EV_IRQHandler+0x11c>
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	0a9b      	lsrs	r3, r3, #10
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <HAL_I2C_EV_IRQHandler+0x11c>
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	089b      	lsrs	r3, r3, #2
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d103      	bne.n	8007f28 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f9f3 	bl	800830c <I2C_MasterTransmit_TXE>
 8007f26:	e04d      	b.n	8007fc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	089b      	lsrs	r3, r3, #2
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 80d6 	beq.w	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	0a5b      	lsrs	r3, r3, #9
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 80cf 	beq.w	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b21      	cmp	r3, #33	; 0x21
 8007f48:	d103      	bne.n	8007f52 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa7a 	bl	8008444 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f50:	e0c7      	b.n	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	f040 80c4 	bne.w	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fae8 	bl	8008530 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f60:	e0bf      	b.n	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f70:	f000 80b7 	beq.w	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	099b      	lsrs	r3, r3, #6
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00f      	beq.n	8007fa0 <HAL_I2C_EV_IRQHandler+0x194>
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	0a9b      	lsrs	r3, r3, #10
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d009      	beq.n	8007fa0 <HAL_I2C_EV_IRQHandler+0x194>
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	089b      	lsrs	r3, r3, #2
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fb5d 	bl	8008658 <I2C_MasterReceive_RXNE>
 8007f9e:	e011      	b.n	8007fc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	089b      	lsrs	r3, r3, #2
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 809a 	beq.w	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	0a5b      	lsrs	r3, r3, #9
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 8093 	beq.w	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fbfc 	bl	80087ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fc2:	e08e      	b.n	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007fc4:	e08d      	b.n	80080e2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d004      	beq.n	8007fd8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	e007      	b.n	8007fe8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d012      	beq.n	800801a <HAL_I2C_EV_IRQHandler+0x20e>
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	0a5b      	lsrs	r3, r3, #9
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00c      	beq.n	800801a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008010:	69b9      	ldr	r1, [r7, #24]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 ffba 	bl	8008f8c <I2C_Slave_ADDR>
 8008018:	e066      	b.n	80080e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	091b      	lsrs	r3, r3, #4
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d009      	beq.n	800803a <HAL_I2C_EV_IRQHandler+0x22e>
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	0a5b      	lsrs	r3, r3, #9
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fff4 	bl	8009020 <I2C_Slave_STOPF>
 8008038:	e056      	b.n	80080e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b21      	cmp	r3, #33	; 0x21
 800803e:	d002      	beq.n	8008046 <HAL_I2C_EV_IRQHandler+0x23a>
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	2b29      	cmp	r3, #41	; 0x29
 8008044:	d125      	bne.n	8008092 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	09db      	lsrs	r3, r3, #7
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00f      	beq.n	8008072 <HAL_I2C_EV_IRQHandler+0x266>
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	0a9b      	lsrs	r3, r3, #10
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d009      	beq.n	8008072 <HAL_I2C_EV_IRQHandler+0x266>
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	089b      	lsrs	r3, r3, #2
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d103      	bne.n	8008072 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fed0 	bl	8008e10 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008070:	e039      	b.n	80080e6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	089b      	lsrs	r3, r3, #2
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d033      	beq.n	80080e6 <HAL_I2C_EV_IRQHandler+0x2da>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	0a5b      	lsrs	r3, r3, #9
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d02d      	beq.n	80080e6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fefd 	bl	8008e8a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008090:	e029      	b.n	80080e6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	099b      	lsrs	r3, r3, #6
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00f      	beq.n	80080be <HAL_I2C_EV_IRQHandler+0x2b2>
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	0a9b      	lsrs	r3, r3, #10
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <HAL_I2C_EV_IRQHandler+0x2b2>
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	089b      	lsrs	r3, r3, #2
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d103      	bne.n	80080be <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 ff08 	bl	8008ecc <I2C_SlaveReceive_RXNE>
 80080bc:	e014      	b.n	80080e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	089b      	lsrs	r3, r3, #2
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00e      	beq.n	80080e8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	0a5b      	lsrs	r3, r3, #9
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 ff36 	bl	8008f48 <I2C_SlaveReceive_BTF>
 80080dc:	e004      	b.n	80080e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80080de:	bf00      	nop
 80080e0:	e002      	b.n	80080e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080e2:	bf00      	nop
 80080e4:	e000      	b.n	80080e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80080e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b08a      	sub	sp, #40	; 0x28
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008106:	2300      	movs	r3, #0
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008110:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	0a1b      	lsrs	r3, r3, #8
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00e      	beq.n	800813c <HAL_I2C_ER_IRQHandler+0x4e>
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	0a1b      	lsrs	r3, r3, #8
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d008      	beq.n	800813c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800813a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	0a5b      	lsrs	r3, r3, #9
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00e      	beq.n	8008166 <HAL_I2C_ER_IRQHandler+0x78>
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	0a1b      	lsrs	r3, r3, #8
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d008      	beq.n	8008166 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	f043 0302 	orr.w	r3, r3, #2
 800815a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008164:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	0a9b      	lsrs	r3, r3, #10
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d03f      	beq.n	80081f2 <HAL_I2C_ER_IRQHandler+0x104>
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	0a1b      	lsrs	r3, r3, #8
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d039      	beq.n	80081f2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800817e:	7efb      	ldrb	r3, [r7, #27]
 8008180:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008186:	b29b      	uxth	r3, r3
 8008188:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008190:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008196:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008198:	7ebb      	ldrb	r3, [r7, #26]
 800819a:	2b20      	cmp	r3, #32
 800819c:	d112      	bne.n	80081c4 <HAL_I2C_ER_IRQHandler+0xd6>
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10f      	bne.n	80081c4 <HAL_I2C_ER_IRQHandler+0xd6>
 80081a4:	7cfb      	ldrb	r3, [r7, #19]
 80081a6:	2b21      	cmp	r3, #33	; 0x21
 80081a8:	d008      	beq.n	80081bc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80081aa:	7cfb      	ldrb	r3, [r7, #19]
 80081ac:	2b29      	cmp	r3, #41	; 0x29
 80081ae:	d005      	beq.n	80081bc <HAL_I2C_ER_IRQHandler+0xce>
 80081b0:	7cfb      	ldrb	r3, [r7, #19]
 80081b2:	2b28      	cmp	r3, #40	; 0x28
 80081b4:	d106      	bne.n	80081c4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b21      	cmp	r3, #33	; 0x21
 80081ba:	d103      	bne.n	80081c4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 f85f 	bl	8009280 <I2C_Slave_AF>
 80081c2:	e016      	b.n	80081f2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	f043 0304 	orr.w	r3, r3, #4
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80081d6:	7efb      	ldrb	r3, [r7, #27]
 80081d8:	2b10      	cmp	r3, #16
 80081da:	d002      	beq.n	80081e2 <HAL_I2C_ER_IRQHandler+0xf4>
 80081dc:	7efb      	ldrb	r3, [r7, #27]
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d107      	bne.n	80081f2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	0adb      	lsrs	r3, r3, #11
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00e      	beq.n	800821c <HAL_I2C_ER_IRQHandler+0x12e>
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	0a1b      	lsrs	r3, r3, #8
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d008      	beq.n	800821c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	f043 0308 	orr.w	r3, r3, #8
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800821a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	2b00      	cmp	r3, #0
 8008220:	d008      	beq.n	8008234 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	431a      	orrs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 f896 	bl	8009360 <I2C_ITError>
  }
}
 8008234:	bf00      	nop
 8008236:	3728      	adds	r7, #40	; 0x28
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
 8008298:	4613      	mov	r3, r2
 800829a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008322:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832e:	2b00      	cmp	r3, #0
 8008330:	d150      	bne.n	80083d4 <I2C_MasterTransmit_TXE+0xc8>
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	2b21      	cmp	r3, #33	; 0x21
 8008336:	d14d      	bne.n	80083d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b08      	cmp	r3, #8
 800833c:	d01d      	beq.n	800837a <I2C_MasterTransmit_TXE+0x6e>
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2b20      	cmp	r3, #32
 8008342:	d01a      	beq.n	800837a <I2C_MasterTransmit_TXE+0x6e>
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800834a:	d016      	beq.n	800837a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800835a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2211      	movs	r2, #17
 8008360:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff ff62 	bl	800823c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008378:	e060      	b.n	800843c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008388:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008398:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	d107      	bne.n	80083c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff ff7d 	bl	80082bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80083c2:	e03b      	b.n	800843c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff ff35 	bl	800823c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80083d2:	e033      	b.n	800843c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	2b21      	cmp	r3, #33	; 0x21
 80083d8:	d005      	beq.n	80083e6 <I2C_MasterTransmit_TXE+0xda>
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	2b40      	cmp	r3, #64	; 0x40
 80083de:	d12d      	bne.n	800843c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	2b22      	cmp	r3, #34	; 0x22
 80083e4:	d12a      	bne.n	800843c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d108      	bne.n	8008402 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008400:	e01c      	b.n	800843c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b40      	cmp	r3, #64	; 0x40
 800840c:	d103      	bne.n	8008416 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f88e 	bl	8008530 <I2C_MemoryTransmit_TXE_BTF>
}
 8008414:	e012      	b.n	800843c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	781a      	ldrb	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008430:	b29b      	uxth	r3, r3
 8008432:	3b01      	subs	r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800843a:	e7ff      	b.n	800843c <I2C_MasterTransmit_TXE+0x130>
 800843c:	bf00      	nop
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b21      	cmp	r3, #33	; 0x21
 800845c:	d164      	bne.n	8008528 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008462:	b29b      	uxth	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d012      	beq.n	800848e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	781a      	ldrb	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008482:	b29b      	uxth	r3, r3
 8008484:	3b01      	subs	r3, #1
 8008486:	b29a      	uxth	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800848c:	e04c      	b.n	8008528 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b08      	cmp	r3, #8
 8008492:	d01d      	beq.n	80084d0 <I2C_MasterTransmit_BTF+0x8c>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b20      	cmp	r3, #32
 8008498:	d01a      	beq.n	80084d0 <I2C_MasterTransmit_BTF+0x8c>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084a0:	d016      	beq.n	80084d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2211      	movs	r2, #17
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff feb7 	bl	800823c <HAL_I2C_MasterTxCpltCallback>
}
 80084ce:	e02b      	b.n	8008528 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b40      	cmp	r3, #64	; 0x40
 8008508:	d107      	bne.n	800851a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff fed2 	bl	80082bc <HAL_I2C_MemTxCpltCallback>
}
 8008518:	e006      	b.n	8008528 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff fe8a 	bl	800823c <HAL_I2C_MasterTxCpltCallback>
}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11d      	bne.n	8008584 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854c:	2b01      	cmp	r3, #1
 800854e:	d10b      	bne.n	8008568 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008554:	b2da      	uxtb	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008560:	1c9a      	adds	r2, r3, #2
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008566:	e073      	b.n	8008650 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800856c:	b29b      	uxth	r3, r3
 800856e:	121b      	asrs	r3, r3, #8
 8008570:	b2da      	uxtb	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008582:	e065      	b.n	8008650 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008588:	2b01      	cmp	r3, #1
 800858a:	d10b      	bne.n	80085a4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008590:	b2da      	uxtb	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80085a2:	e055      	b.n	8008650 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d151      	bne.n	8008650 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2b22      	cmp	r3, #34	; 0x22
 80085b0:	d10d      	bne.n	80085ce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085c0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80085cc:	e040      	b.n	8008650 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d015      	beq.n	8008604 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	2b21      	cmp	r3, #33	; 0x21
 80085dc:	d112      	bne.n	8008604 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	3b01      	subs	r3, #1
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008602:	e025      	b.n	8008650 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d120      	bne.n	8008650 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	2b21      	cmp	r3, #33	; 0x21
 8008612:	d11d      	bne.n	8008650 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008622:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008632:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2220      	movs	r2, #32
 800863e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff fe36 	bl	80082bc <HAL_I2C_MemTxCpltCallback>
}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b22      	cmp	r3, #34	; 0x22
 800866a:	f040 80a2 	bne.w	80087b2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008672:	b29b      	uxth	r3, r3
 8008674:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b03      	cmp	r3, #3
 800867a:	d921      	bls.n	80086c0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691a      	ldr	r2, [r3, #16]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008698:	b29b      	uxth	r3, r3
 800869a:	3b01      	subs	r3, #1
 800869c:	b29a      	uxth	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	f040 8082 	bne.w	80087b2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086bc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80086be:	e078      	b.n	80087b2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d074      	beq.n	80087b2 <I2C_MasterReceive_RXNE+0x15a>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d002      	beq.n	80086d4 <I2C_MasterReceive_RXNE+0x7c>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d16e      	bne.n	80087b2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 fac5 	bl	8009c64 <I2C_WaitOnSTOPRequestThroughIT>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d142      	bne.n	8008766 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	691a      	ldr	r2, [r3, #16]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800871c:	b29b      	uxth	r3, r3
 800871e:	3b01      	subs	r3, #1
 8008720:	b29a      	uxth	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2220      	movs	r2, #32
 800872a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b40      	cmp	r3, #64	; 0x40
 8008738:	d10a      	bne.n	8008750 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fdc1 	bl	80082d0 <HAL_I2C_MemRxCpltCallback>
}
 800874e:	e030      	b.n	80087b2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2212      	movs	r2, #18
 800875c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff fd76 	bl	8008250 <HAL_I2C_MasterRxCpltCallback>
}
 8008764:	e025      	b.n	80087b2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008774:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	691a      	ldr	r2, [r3, #16]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008792:	b29b      	uxth	r3, r3
 8008794:	3b01      	subs	r3, #1
 8008796:	b29a      	uxth	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff fd99 	bl	80082e4 <HAL_I2C_ErrorCallback>
}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d11b      	bne.n	800880a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087fe:	b29b      	uxth	r3, r3
 8008800:	3b01      	subs	r3, #1
 8008802:	b29a      	uxth	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008808:	e0bd      	b.n	8008986 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800880e:	b29b      	uxth	r3, r3
 8008810:	2b03      	cmp	r3, #3
 8008812:	d129      	bne.n	8008868 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008822:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b04      	cmp	r3, #4
 8008828:	d00a      	beq.n	8008840 <I2C_MasterReceive_BTF+0x86>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d007      	beq.n	8008840 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800883e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	691a      	ldr	r2, [r3, #16]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	b2d2      	uxtb	r2, r2
 800884c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885c:	b29b      	uxth	r3, r3
 800885e:	3b01      	subs	r3, #1
 8008860:	b29a      	uxth	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008866:	e08e      	b.n	8008986 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d176      	bne.n	8008960 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d002      	beq.n	800887e <I2C_MasterReceive_BTF+0xc4>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b10      	cmp	r3, #16
 800887c:	d108      	bne.n	8008890 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	e019      	b.n	80088c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b04      	cmp	r3, #4
 8008894:	d002      	beq.n	800889c <I2C_MasterReceive_BTF+0xe2>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d108      	bne.n	80088ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	e00a      	b.n	80088c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d007      	beq.n	80088c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	691a      	ldr	r2, [r3, #16]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	b2d2      	uxtb	r2, r2
 80088d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	3b01      	subs	r3, #1
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	b2d2      	uxtb	r2, r2
 80088f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008906:	b29b      	uxth	r3, r3
 8008908:	3b01      	subs	r3, #1
 800890a:	b29a      	uxth	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800891e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2220      	movs	r2, #32
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b40      	cmp	r3, #64	; 0x40
 8008932:	d10a      	bne.n	800894a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff fcc4 	bl	80082d0 <HAL_I2C_MemRxCpltCallback>
}
 8008948:	e01d      	b.n	8008986 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2212      	movs	r2, #18
 8008956:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff fc79 	bl	8008250 <HAL_I2C_MasterRxCpltCallback>
}
 800895e:	e012      	b.n	8008986 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	b2d2      	uxtb	r2, r2
 800896c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b40      	cmp	r3, #64	; 0x40
 80089a0:	d117      	bne.n	80089d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d109      	bne.n	80089be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80089bc:	e067      	b.n	8008a8e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	f043 0301 	orr.w	r3, r3, #1
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	611a      	str	r2, [r3, #16]
}
 80089d0:	e05d      	b.n	8008a8e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089da:	d133      	bne.n	8008a44 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b21      	cmp	r3, #33	; 0x21
 80089e6:	d109      	bne.n	80089fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	461a      	mov	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089f8:	611a      	str	r2, [r3, #16]
 80089fa:	e008      	b.n	8008a0e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	f043 0301 	orr.w	r3, r3, #1
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d004      	beq.n	8008a20 <I2C_Master_SB+0x92>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d108      	bne.n	8008a32 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d032      	beq.n	8008a8e <I2C_Master_SB+0x100>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d02d      	beq.n	8008a8e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a40:	605a      	str	r2, [r3, #4]
}
 8008a42:	e024      	b.n	8008a8e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10e      	bne.n	8008a6a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	11db      	asrs	r3, r3, #7
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 0306 	and.w	r3, r3, #6
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	f063 030f 	orn	r3, r3, #15
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	611a      	str	r2, [r3, #16]
}
 8008a68:	e011      	b.n	8008a8e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d10d      	bne.n	8008a8e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	11db      	asrs	r3, r3, #7
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 0306 	and.w	r3, r3, #6
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f063 030e 	orn	r3, r3, #14
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	611a      	str	r2, [r3, #16]
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d004      	beq.n	8008ac0 <I2C_Master_ADD10+0x26>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d108      	bne.n	8008ad2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00c      	beq.n	8008ae2 <I2C_Master_ADD10+0x48>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d007      	beq.n	8008ae2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ae0:	605a      	str	r2, [r3, #4]
  }
}
 8008ae2:	bf00      	nop
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b091      	sub	sp, #68	; 0x44
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008afc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b22      	cmp	r3, #34	; 0x22
 8008b16:	f040 8169 	bne.w	8008dec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10f      	bne.n	8008b42 <I2C_Master_ADDR+0x54>
 8008b22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b26:	2b40      	cmp	r3, #64	; 0x40
 8008b28:	d10b      	bne.n	8008b42 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	633b      	str	r3, [r7, #48]	; 0x30
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	e160      	b.n	8008e04 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d11d      	bne.n	8008b86 <I2C_Master_ADDR+0x98>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008b52:	d118      	bne.n	8008b86 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b54:	2300      	movs	r3, #0
 8008b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b78:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	651a      	str	r2, [r3, #80]	; 0x50
 8008b84:	e13e      	b.n	8008e04 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d113      	bne.n	8008bb8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b90:	2300      	movs	r3, #0
 8008b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	e115      	b.n	8008de4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	f040 808a 	bne.w	8008cd8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008bca:	d137      	bne.n	8008c3c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bda:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bea:	d113      	bne.n	8008c14 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bfa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	e0e7      	b.n	8008de4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c14:	2300      	movs	r3, #0
 8008c16:	623b      	str	r3, [r7, #32]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	623b      	str	r3, [r7, #32]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	623b      	str	r3, [r7, #32]
 8008c28:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e0d3      	b.n	8008de4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	2b08      	cmp	r3, #8
 8008c40:	d02e      	beq.n	8008ca0 <I2C_Master_ADDR+0x1b2>
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	d02b      	beq.n	8008ca0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4a:	2b12      	cmp	r3, #18
 8008c4c:	d102      	bne.n	8008c54 <I2C_Master_ADDR+0x166>
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d125      	bne.n	8008ca0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d00e      	beq.n	8008c78 <I2C_Master_ADDR+0x18a>
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d00b      	beq.n	8008c78 <I2C_Master_ADDR+0x18a>
 8008c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c62:	2b10      	cmp	r3, #16
 8008c64:	d008      	beq.n	8008c78 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	e007      	b.n	8008c88 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c86:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c88:	2300      	movs	r3, #0
 8008c8a:	61fb      	str	r3, [r7, #28]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	61fb      	str	r3, [r7, #28]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	61fb      	str	r3, [r7, #28]
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	e0a1      	b.n	8008de4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	61bb      	str	r3, [r7, #24]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	61bb      	str	r3, [r7, #24]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	61bb      	str	r3, [r7, #24]
 8008cc4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	e085      	b.n	8008de4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d14d      	bne.n	8008d7e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	2b04      	cmp	r3, #4
 8008ce6:	d016      	beq.n	8008d16 <I2C_Master_ADDR+0x228>
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d013      	beq.n	8008d16 <I2C_Master_ADDR+0x228>
 8008cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf0:	2b10      	cmp	r3, #16
 8008cf2:	d010      	beq.n	8008d16 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d02:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	e007      	b.n	8008d26 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d24:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d34:	d117      	bne.n	8008d66 <I2C_Master_ADDR+0x278>
 8008d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d3c:	d00b      	beq.n	8008d56 <I2C_Master_ADDR+0x268>
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d008      	beq.n	8008d56 <I2C_Master_ADDR+0x268>
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	2b08      	cmp	r3, #8
 8008d48:	d005      	beq.n	8008d56 <I2C_Master_ADDR+0x268>
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	2b10      	cmp	r3, #16
 8008d4e:	d002      	beq.n	8008d56 <I2C_Master_ADDR+0x268>
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	d107      	bne.n	8008d66 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d66:	2300      	movs	r3, #0
 8008d68:	617b      	str	r3, [r7, #20]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	617b      	str	r3, [r7, #20]
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	e032      	b.n	8008de4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d8c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d9c:	d117      	bne.n	8008dce <I2C_Master_ADDR+0x2e0>
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008da4:	d00b      	beq.n	8008dbe <I2C_Master_ADDR+0x2d0>
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d008      	beq.n	8008dbe <I2C_Master_ADDR+0x2d0>
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	2b08      	cmp	r3, #8
 8008db0:	d005      	beq.n	8008dbe <I2C_Master_ADDR+0x2d0>
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db4:	2b10      	cmp	r3, #16
 8008db6:	d002      	beq.n	8008dbe <I2C_Master_ADDR+0x2d0>
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	2b20      	cmp	r3, #32
 8008dbc:	d107      	bne.n	8008dce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008dcc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	613b      	str	r3, [r7, #16]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	613b      	str	r3, [r7, #16]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	613b      	str	r3, [r7, #16]
 8008de2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008dea:	e00b      	b.n	8008e04 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
}
 8008e02:	e7ff      	b.n	8008e04 <I2C_Master_ADDR+0x316>
 8008e04:	bf00      	nop
 8008e06:	3744      	adds	r7, #68	; 0x44
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d02b      	beq.n	8008e82 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	781a      	ldrb	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	1c5a      	adds	r2, r3, #1
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d114      	bne.n	8008e82 <I2C_SlaveTransmit_TXE+0x72>
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	2b29      	cmp	r3, #41	; 0x29
 8008e5c:	d111      	bne.n	8008e82 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2221      	movs	r2, #33	; 0x21
 8008e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2228      	movs	r2, #40	; 0x28
 8008e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff f9f1 	bl	8008264 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008e82:	bf00      	nop
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d011      	beq.n	8008ec0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d02c      	beq.n	8008f40 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	b2d2      	uxtb	r2, r2
 8008ef2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	1c5a      	adds	r2, r3, #1
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	3b01      	subs	r3, #1
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d114      	bne.n	8008f40 <I2C_SlaveReceive_RXNE+0x74>
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	2b2a      	cmp	r3, #42	; 0x2a
 8008f1a:	d111      	bne.n	8008f40 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2222      	movs	r2, #34	; 0x22
 8008f30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2228      	movs	r2, #40	; 0x28
 8008f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7ff f99c 	bl	8008278 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d012      	beq.n	8008f80 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	691a      	ldr	r2, [r3, #16]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	b2d2      	uxtb	r2, r2
 8008f66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008fa6:	2b28      	cmp	r3, #40	; 0x28
 8008fa8:	d127      	bne.n	8008ffa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fb8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	089b      	lsrs	r3, r3, #2
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	09db      	lsrs	r3, r3, #7
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d103      	bne.n	8008fde <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	81bb      	strh	r3, [r7, #12]
 8008fdc:	e002      	b.n	8008fe4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008fec:	89ba      	ldrh	r2, [r7, #12]
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7ff f94a 	bl	800828c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ff8:	e00e      	b.n	8009018 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60bb      	str	r3, [r7, #8]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	60bb      	str	r3, [r7, #8]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	60bb      	str	r3, [r7, #8]
 800900e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009018:	bf00      	nop
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800902e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800903e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009040:	2300      	movs	r3, #0
 8009042:	60bb      	str	r3, [r7, #8]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	60bb      	str	r3, [r7, #8]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f042 0201 	orr.w	r2, r2, #1
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800906c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800907c:	d172      	bne.n	8009164 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800907e:	7bfb      	ldrb	r3, [r7, #15]
 8009080:	2b22      	cmp	r3, #34	; 0x22
 8009082:	d002      	beq.n	800908a <I2C_Slave_STOPF+0x6a>
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	2b2a      	cmp	r3, #42	; 0x2a
 8009088:	d135      	bne.n	80090f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	b29a      	uxth	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f043 0204 	orr.w	r2, r3, #4
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fd ff64 	bl	8006f90 <HAL_DMA_GetState>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d049      	beq.n	8009162 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d2:	4a69      	ldr	r2, [pc, #420]	; (8009278 <I2C_Slave_STOPF+0x258>)
 80090d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fd fdac 	bl	8006c38 <HAL_DMA_Abort_IT>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d03d      	beq.n	8009162 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80090f4:	e035      	b.n	8009162 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	b29a      	uxth	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	f043 0204 	orr.w	r2, r3, #4
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009128:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912e:	4618      	mov	r0, r3
 8009130:	f7fd ff2e 	bl	8006f90 <HAL_DMA_GetState>
 8009134:	4603      	mov	r3, r0
 8009136:	2b01      	cmp	r3, #1
 8009138:	d014      	beq.n	8009164 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913e:	4a4e      	ldr	r2, [pc, #312]	; (8009278 <I2C_Slave_STOPF+0x258>)
 8009140:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009146:	4618      	mov	r0, r3
 8009148:	f7fd fd76 	bl	8006c38 <HAL_DMA_Abort_IT>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d008      	beq.n	8009164 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800915c:	4610      	mov	r0, r2
 800915e:	4798      	blx	r3
 8009160:	e000      	b.n	8009164 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009162:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009168:	b29b      	uxth	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d03e      	beq.n	80091ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	f003 0304 	and.w	r3, r3, #4
 8009178:	2b04      	cmp	r3, #4
 800917a:	d112      	bne.n	80091a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	691a      	ldr	r2, [r3, #16]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	b2d2      	uxtb	r2, r2
 8009188:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	b29a      	uxth	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ac:	2b40      	cmp	r3, #64	; 0x40
 80091ae:	d112      	bne.n	80091d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691a      	ldr	r2, [r3, #16]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ba:	b2d2      	uxtb	r2, r2
 80091bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	3b01      	subs	r3, #1
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091da:	b29b      	uxth	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e4:	f043 0204 	orr.w	r2, r3, #4
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f8b3 	bl	8009360 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80091fa:	e039      	b.n	8009270 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009200:	d109      	bne.n	8009216 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2228      	movs	r2, #40	; 0x28
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7ff f831 	bl	8008278 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b28      	cmp	r3, #40	; 0x28
 8009220:	d111      	bne.n	8009246 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a15      	ldr	r2, [pc, #84]	; (800927c <I2C_Slave_STOPF+0x25c>)
 8009226:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2220      	movs	r2, #32
 8009232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7ff f832 	bl	80082a8 <HAL_I2C_ListenCpltCallback>
}
 8009244:	e014      	b.n	8009270 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924a:	2b22      	cmp	r3, #34	; 0x22
 800924c:	d002      	beq.n	8009254 <I2C_Slave_STOPF+0x234>
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	2b22      	cmp	r3, #34	; 0x22
 8009252:	d10d      	bne.n	8009270 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff f804 	bl	8008278 <HAL_I2C_SlaveRxCpltCallback>
}
 8009270:	bf00      	nop
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	08009865 	.word	0x08009865
 800927c:	ffff0000 	.word	0xffff0000

08009280 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800928e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2b08      	cmp	r3, #8
 800929a:	d002      	beq.n	80092a2 <I2C_Slave_AF+0x22>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d129      	bne.n	80092f6 <I2C_Slave_AF+0x76>
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	2b28      	cmp	r3, #40	; 0x28
 80092a6:	d126      	bne.n	80092f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a2c      	ldr	r2, [pc, #176]	; (800935c <I2C_Slave_AF+0xdc>)
 80092ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2220      	movs	r2, #32
 80092e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7fe ffda 	bl	80082a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80092f4:	e02e      	b.n	8009354 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	2b21      	cmp	r3, #33	; 0x21
 80092fa:	d126      	bne.n	800934a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a17      	ldr	r2, [pc, #92]	; (800935c <I2C_Slave_AF+0xdc>)
 8009300:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2221      	movs	r2, #33	; 0x21
 8009306:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2220      	movs	r2, #32
 800930c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009326:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009330:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009340:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7fe ff8e 	bl	8008264 <HAL_I2C_SlaveTxCpltCallback>
}
 8009348:	e004      	b.n	8009354 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009352:	615a      	str	r2, [r3, #20]
}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	ffff0000 	.word	0xffff0000

08009360 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800936e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009376:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	2b10      	cmp	r3, #16
 800937c:	d002      	beq.n	8009384 <I2C_ITError+0x24>
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b40      	cmp	r3, #64	; 0x40
 8009382:	d10a      	bne.n	800939a <I2C_ITError+0x3a>
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	2b22      	cmp	r3, #34	; 0x22
 8009388:	d107      	bne.n	800939a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009398:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80093a0:	2b28      	cmp	r3, #40	; 0x28
 80093a2:	d107      	bne.n	80093b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2228      	movs	r2, #40	; 0x28
 80093ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80093b2:	e015      	b.n	80093e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093c2:	d00a      	beq.n	80093da <I2C_ITError+0x7a>
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	2b60      	cmp	r3, #96	; 0x60
 80093c8:	d007      	beq.n	80093da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ee:	d162      	bne.n	80094b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b01      	cmp	r3, #1
 800940c:	d020      	beq.n	8009450 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009412:	4a6a      	ldr	r2, [pc, #424]	; (80095bc <I2C_ITError+0x25c>)
 8009414:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941a:	4618      	mov	r0, r3
 800941c:	f7fd fc0c 	bl	8006c38 <HAL_DMA_Abort_IT>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 8089 	beq.w	800953a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 0201 	bic.w	r2, r2, #1
 8009436:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2220      	movs	r2, #32
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800944a:	4610      	mov	r0, r2
 800944c:	4798      	blx	r3
 800944e:	e074      	b.n	800953a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	4a59      	ldr	r2, [pc, #356]	; (80095bc <I2C_ITError+0x25c>)
 8009456:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	4618      	mov	r0, r3
 800945e:	f7fd fbeb 	bl	8006c38 <HAL_DMA_Abort_IT>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d068      	beq.n	800953a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009472:	2b40      	cmp	r3, #64	; 0x40
 8009474:	d10b      	bne.n	800948e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	691a      	ldr	r2, [r3, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0201 	bic.w	r2, r2, #1
 800949c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80094b0:	4610      	mov	r0, r2
 80094b2:	4798      	blx	r3
 80094b4:	e041      	b.n	800953a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b60      	cmp	r3, #96	; 0x60
 80094c0:	d125      	bne.n	800950e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2220      	movs	r2, #32
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094da:	2b40      	cmp	r3, #64	; 0x40
 80094dc:	d10b      	bne.n	80094f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	691a      	ldr	r2, [r3, #16]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0201 	bic.w	r2, r2, #1
 8009504:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7fe fef6 	bl	80082f8 <HAL_I2C_AbortCpltCallback>
 800950c:	e015      	b.n	800953a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009518:	2b40      	cmp	r3, #64	; 0x40
 800951a:	d10b      	bne.n	8009534 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	691a      	ldr	r2, [r3, #16]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7fe fed5 	bl	80082e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10e      	bne.n	8009568 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009550:	2b00      	cmp	r3, #0
 8009552:	d109      	bne.n	8009568 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800955a:	2b00      	cmp	r3, #0
 800955c:	d104      	bne.n	8009568 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009576:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	2b04      	cmp	r3, #4
 800958a:	d113      	bne.n	80095b4 <I2C_ITError+0x254>
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	2b28      	cmp	r3, #40	; 0x28
 8009590:	d110      	bne.n	80095b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a0a      	ldr	r2, [pc, #40]	; (80095c0 <I2C_ITError+0x260>)
 8009596:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2220      	movs	r2, #32
 80095a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7fe fe7a 	bl	80082a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	08009865 	.word	0x08009865
 80095c0:	ffff0000 	.word	0xffff0000

080095c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	607a      	str	r2, [r7, #4]
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	460b      	mov	r3, r1
 80095d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d006      	beq.n	80095ee <I2C_MasterRequestWrite+0x2a>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d003      	beq.n	80095ee <I2C_MasterRequestWrite+0x2a>
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095ec:	d108      	bne.n	8009600 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	e00b      	b.n	8009618 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009604:	2b12      	cmp	r3, #18
 8009606:	d107      	bne.n	8009618 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009616:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 f9c5 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00d      	beq.n	800964c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800963e:	d103      	bne.n	8009648 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e035      	b.n	80096b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009654:	d108      	bne.n	8009668 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009656:	897b      	ldrh	r3, [r7, #10]
 8009658:	b2db      	uxtb	r3, r3
 800965a:	461a      	mov	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009664:	611a      	str	r2, [r3, #16]
 8009666:	e01b      	b.n	80096a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009668:	897b      	ldrh	r3, [r7, #10]
 800966a:	11db      	asrs	r3, r3, #7
 800966c:	b2db      	uxtb	r3, r3
 800966e:	f003 0306 	and.w	r3, r3, #6
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f063 030f 	orn	r3, r3, #15
 8009678:	b2da      	uxtb	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	490e      	ldr	r1, [pc, #56]	; (80096c0 <I2C_MasterRequestWrite+0xfc>)
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 f9eb 	bl	8009a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e010      	b.n	80096b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009696:	897b      	ldrh	r3, [r7, #10]
 8009698:	b2da      	uxtb	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	4907      	ldr	r1, [pc, #28]	; (80096c4 <I2C_MasterRequestWrite+0x100>)
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 f9db 	bl	8009a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e000      	b.n	80096b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	00010008 	.word	0x00010008
 80096c4:	00010002 	.word	0x00010002

080096c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af02      	add	r7, sp, #8
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	607a      	str	r2, [r7, #4]
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	460b      	mov	r3, r1
 80096d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d006      	beq.n	8009702 <I2C_MasterRequestRead+0x3a>
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d003      	beq.n	8009702 <I2C_MasterRequestRead+0x3a>
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009700:	d108      	bne.n	8009714 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	e00b      	b.n	800972c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009718:	2b11      	cmp	r3, #17
 800971a:	d107      	bne.n	800972c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800972a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 f93b 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00d      	beq.n	8009760 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800974e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009752:	d103      	bne.n	800975c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800975a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e079      	b.n	8009854 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009768:	d108      	bne.n	800977c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800976a:	897b      	ldrh	r3, [r7, #10]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	f043 0301 	orr.w	r3, r3, #1
 8009772:	b2da      	uxtb	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	611a      	str	r2, [r3, #16]
 800977a:	e05f      	b.n	800983c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800977c:	897b      	ldrh	r3, [r7, #10]
 800977e:	11db      	asrs	r3, r3, #7
 8009780:	b2db      	uxtb	r3, r3
 8009782:	f003 0306 	and.w	r3, r3, #6
 8009786:	b2db      	uxtb	r3, r3
 8009788:	f063 030f 	orn	r3, r3, #15
 800978c:	b2da      	uxtb	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	4930      	ldr	r1, [pc, #192]	; (800985c <I2C_MasterRequestRead+0x194>)
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 f961 	bl	8009a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e054      	b.n	8009854 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80097aa:	897b      	ldrh	r3, [r7, #10]
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	4929      	ldr	r1, [pc, #164]	; (8009860 <I2C_MasterRequestRead+0x198>)
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f000 f951 	bl	8009a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e044      	b.n	8009854 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097ca:	2300      	movs	r3, #0
 80097cc:	613b      	str	r3, [r7, #16]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 f8d9 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00d      	beq.n	8009824 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009816:	d103      	bne.n	8009820 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800981e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e017      	b.n	8009854 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009824:	897b      	ldrh	r3, [r7, #10]
 8009826:	11db      	asrs	r3, r3, #7
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f003 0306 	and.w	r3, r3, #6
 800982e:	b2db      	uxtb	r3, r3
 8009830:	f063 030e 	orn	r3, r3, #14
 8009834:	b2da      	uxtb	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	4907      	ldr	r1, [pc, #28]	; (8009860 <I2C_MasterRequestRead+0x198>)
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f000 f90d 	bl	8009a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e000      	b.n	8009854 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	00010008 	.word	0x00010008
 8009860:	00010002 	.word	0x00010002

08009864 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800987e:	4b4b      	ldr	r3, [pc, #300]	; (80099ac <I2C_DMAAbort+0x148>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	08db      	lsrs	r3, r3, #3
 8009884:	4a4a      	ldr	r2, [pc, #296]	; (80099b0 <I2C_DMAAbort+0x14c>)
 8009886:	fba2 2303 	umull	r2, r3, r2, r3
 800988a:	0a1a      	lsrs	r2, r3, #8
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	00da      	lsls	r2, r3, #3
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d106      	bne.n	80098ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a2:	f043 0220 	orr.w	r2, r3, #32
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80098aa:	e00a      	b.n	80098c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098c0:	d0ea      	beq.n	8009898 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ce:	2200      	movs	r2, #0
 80098d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098de:	2200      	movs	r2, #0
 80098e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	2200      	movs	r2, #0
 80098f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009904:	2200      	movs	r2, #0
 8009906:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009914:	2200      	movs	r2, #0
 8009916:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0201 	bic.w	r2, r2, #1
 8009926:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b60      	cmp	r3, #96	; 0x60
 8009932:	d10e      	bne.n	8009952 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2200      	movs	r2, #0
 8009948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800994a:	6978      	ldr	r0, [r7, #20]
 800994c:	f7fe fcd4 	bl	80082f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009950:	e027      	b.n	80099a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009952:	7cfb      	ldrb	r3, [r7, #19]
 8009954:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009958:	2b28      	cmp	r3, #40	; 0x28
 800995a:	d117      	bne.n	800998c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0201 	orr.w	r2, r2, #1
 800996a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800997a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2200      	movs	r2, #0
 8009980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2228      	movs	r2, #40	; 0x28
 8009986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800998a:	e007      	b.n	800999c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800999c:	6978      	ldr	r0, [r7, #20]
 800999e:	f7fe fca1 	bl	80082e4 <HAL_I2C_ErrorCallback>
}
 80099a2:	bf00      	nop
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20000034 	.word	0x20000034
 80099b0:	14f8b589 	.word	0x14f8b589

080099b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	4613      	mov	r3, r2
 80099c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099c4:	e025      	b.n	8009a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099cc:	d021      	beq.n	8009a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ce:	f7fc fded 	bl	80065ac <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d302      	bcc.n	80099e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d116      	bne.n	8009a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2220      	movs	r2, #32
 80099ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	f043 0220 	orr.w	r2, r3, #32
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e023      	b.n	8009a5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	0c1b      	lsrs	r3, r3, #16
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10d      	bne.n	8009a38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	43da      	mvns	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4013      	ands	r3, r2
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bf0c      	ite	eq
 8009a2e:	2301      	moveq	r3, #1
 8009a30:	2300      	movne	r3, #0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	461a      	mov	r2, r3
 8009a36:	e00c      	b.n	8009a52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	43da      	mvns	r2, r3
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	4013      	ands	r3, r2
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bf0c      	ite	eq
 8009a4a:	2301      	moveq	r3, #1
 8009a4c:	2300      	movne	r3, #0
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	461a      	mov	r2, r3
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d0b6      	beq.n	80099c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	60f8      	str	r0, [r7, #12]
 8009a6a:	60b9      	str	r1, [r7, #8]
 8009a6c:	607a      	str	r2, [r7, #4]
 8009a6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a70:	e051      	b.n	8009b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a80:	d123      	bne.n	8009aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	f043 0204 	orr.w	r2, r3, #4
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e046      	b.n	8009b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad0:	d021      	beq.n	8009b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ad2:	f7fc fd6b 	bl	80065ac <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d302      	bcc.n	8009ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d116      	bne.n	8009b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b02:	f043 0220 	orr.w	r2, r3, #32
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e020      	b.n	8009b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	0c1b      	lsrs	r3, r3, #16
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10c      	bne.n	8009b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	43da      	mvns	r2, r3
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	bf14      	ite	ne
 8009b32:	2301      	movne	r3, #1
 8009b34:	2300      	moveq	r3, #0
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	e00b      	b.n	8009b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	43da      	mvns	r2, r3
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	4013      	ands	r3, r2
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	bf14      	ite	ne
 8009b4c:	2301      	movne	r3, #1
 8009b4e:	2300      	moveq	r3, #0
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d18d      	bne.n	8009a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b6c:	e02d      	b.n	8009bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f000 f900 	bl	8009d74 <I2C_IsAcknowledgeFailed>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e02d      	b.n	8009bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b84:	d021      	beq.n	8009bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b86:	f7fc fd11 	bl	80065ac <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d302      	bcc.n	8009b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d116      	bne.n	8009bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2220      	movs	r2, #32
 8009ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	f043 0220 	orr.w	r2, r3, #32
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e007      	b.n	8009bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd4:	2b80      	cmp	r3, #128	; 0x80
 8009bd6:	d1ca      	bne.n	8009b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	60f8      	str	r0, [r7, #12]
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009bee:	e02d      	b.n	8009c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 f8bf 	bl	8009d74 <I2C_IsAcknowledgeFailed>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e02d      	b.n	8009c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c06:	d021      	beq.n	8009c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c08:	f7fc fcd0 	bl	80065ac <HAL_GetTick>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d302      	bcc.n	8009c1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d116      	bne.n	8009c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c38:	f043 0220 	orr.w	r2, r3, #32
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e007      	b.n	8009c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	695b      	ldr	r3, [r3, #20]
 8009c52:	f003 0304 	and.w	r3, r3, #4
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	d1ca      	bne.n	8009bf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009c70:	4b13      	ldr	r3, [pc, #76]	; (8009cc0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	08db      	lsrs	r3, r3, #3
 8009c76:	4a13      	ldr	r2, [pc, #76]	; (8009cc4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009c78:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7c:	0a1a      	lsrs	r2, r3, #8
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d107      	bne.n	8009ca2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c96:	f043 0220 	orr.w	r2, r3, #32
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e008      	b.n	8009cb4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cb0:	d0e9      	beq.n	8009c86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	20000034 	.word	0x20000034
 8009cc4:	14f8b589 	.word	0x14f8b589

08009cc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cd4:	e042      	b.n	8009d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	f003 0310 	and.w	r3, r3, #16
 8009ce0:	2b10      	cmp	r3, #16
 8009ce2:	d119      	bne.n	8009d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f06f 0210 	mvn.w	r2, #16
 8009cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e029      	b.n	8009d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d18:	f7fc fc48 	bl	80065ac <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d302      	bcc.n	8009d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d116      	bne.n	8009d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d48:	f043 0220 	orr.w	r2, r3, #32
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e007      	b.n	8009d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	695b      	ldr	r3, [r3, #20]
 8009d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d66:	2b40      	cmp	r3, #64	; 0x40
 8009d68:	d1b5      	bne.n	8009cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d8a:	d11b      	bne.n	8009dc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db0:	f043 0204 	orr.w	r2, r3, #4
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e000      	b.n	8009dc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009de2:	d103      	bne.n	8009dec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009dea:	e007      	b.n	8009dfc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009df4:	d102      	bne.n	8009dfc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2208      	movs	r2, #8
 8009dfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e264      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d075      	beq.n	8009f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e26:	4ba3      	ldr	r3, [pc, #652]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f003 030c 	and.w	r3, r3, #12
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d00c      	beq.n	8009e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e32:	4ba0      	ldr	r3, [pc, #640]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d112      	bne.n	8009e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e3e:	4b9d      	ldr	r3, [pc, #628]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e4a:	d10b      	bne.n	8009e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e4c:	4b99      	ldr	r3, [pc, #612]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d05b      	beq.n	8009f10 <HAL_RCC_OscConfig+0x108>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d157      	bne.n	8009f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e23f      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e6c:	d106      	bne.n	8009e7c <HAL_RCC_OscConfig+0x74>
 8009e6e:	4b91      	ldr	r3, [pc, #580]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a90      	ldr	r2, [pc, #576]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	e01d      	b.n	8009eb8 <HAL_RCC_OscConfig+0xb0>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e84:	d10c      	bne.n	8009ea0 <HAL_RCC_OscConfig+0x98>
 8009e86:	4b8b      	ldr	r3, [pc, #556]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a8a      	ldr	r2, [pc, #552]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	4b88      	ldr	r3, [pc, #544]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a87      	ldr	r2, [pc, #540]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	e00b      	b.n	8009eb8 <HAL_RCC_OscConfig+0xb0>
 8009ea0:	4b84      	ldr	r3, [pc, #528]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a83      	ldr	r2, [pc, #524]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	4b81      	ldr	r3, [pc, #516]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a80      	ldr	r2, [pc, #512]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d013      	beq.n	8009ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ec0:	f7fc fb74 	bl	80065ac <HAL_GetTick>
 8009ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ec6:	e008      	b.n	8009eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ec8:	f7fc fb70 	bl	80065ac <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b64      	cmp	r3, #100	; 0x64
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e204      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eda:	4b76      	ldr	r3, [pc, #472]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0f0      	beq.n	8009ec8 <HAL_RCC_OscConfig+0xc0>
 8009ee6:	e014      	b.n	8009f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ee8:	f7fc fb60 	bl	80065ac <HAL_GetTick>
 8009eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eee:	e008      	b.n	8009f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ef0:	f7fc fb5c 	bl	80065ac <HAL_GetTick>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	2b64      	cmp	r3, #100	; 0x64
 8009efc:	d901      	bls.n	8009f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009efe:	2303      	movs	r3, #3
 8009f00:	e1f0      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f02:	4b6c      	ldr	r3, [pc, #432]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1f0      	bne.n	8009ef0 <HAL_RCC_OscConfig+0xe8>
 8009f0e:	e000      	b.n	8009f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d063      	beq.n	8009fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f1e:	4b65      	ldr	r3, [pc, #404]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f003 030c 	and.w	r3, r3, #12
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00b      	beq.n	8009f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f2a:	4b62      	ldr	r3, [pc, #392]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f32:	2b08      	cmp	r3, #8
 8009f34:	d11c      	bne.n	8009f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f36:	4b5f      	ldr	r3, [pc, #380]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d116      	bne.n	8009f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f42:	4b5c      	ldr	r3, [pc, #368]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <HAL_RCC_OscConfig+0x152>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d001      	beq.n	8009f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e1c4      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f5a:	4b56      	ldr	r3, [pc, #344]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	4952      	ldr	r1, [pc, #328]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f6e:	e03a      	b.n	8009fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d020      	beq.n	8009fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f78:	4b4f      	ldr	r3, [pc, #316]	; (800a0b8 <HAL_RCC_OscConfig+0x2b0>)
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f7e:	f7fc fb15 	bl	80065ac <HAL_GetTick>
 8009f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f84:	e008      	b.n	8009f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f86:	f7fc fb11 	bl	80065ac <HAL_GetTick>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d901      	bls.n	8009f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e1a5      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f98:	4b46      	ldr	r3, [pc, #280]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 0302 	and.w	r3, r3, #2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d0f0      	beq.n	8009f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fa4:	4b43      	ldr	r3, [pc, #268]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	4940      	ldr	r1, [pc, #256]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	600b      	str	r3, [r1, #0]
 8009fb8:	e015      	b.n	8009fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fba:	4b3f      	ldr	r3, [pc, #252]	; (800a0b8 <HAL_RCC_OscConfig+0x2b0>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc0:	f7fc faf4 	bl	80065ac <HAL_GetTick>
 8009fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fc6:	e008      	b.n	8009fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fc8:	f7fc faf0 	bl	80065ac <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d901      	bls.n	8009fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e184      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fda:	4b36      	ldr	r3, [pc, #216]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0302 	and.w	r3, r3, #2
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1f0      	bne.n	8009fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0308 	and.w	r3, r3, #8
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d030      	beq.n	800a054 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d016      	beq.n	800a028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ffa:	4b30      	ldr	r3, [pc, #192]	; (800a0bc <HAL_RCC_OscConfig+0x2b4>)
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a000:	f7fc fad4 	bl	80065ac <HAL_GetTick>
 800a004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a006:	e008      	b.n	800a01a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a008:	f7fc fad0 	bl	80065ac <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	2b02      	cmp	r3, #2
 800a014:	d901      	bls.n	800a01a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e164      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a01a:	4b26      	ldr	r3, [pc, #152]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 800a01c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0f0      	beq.n	800a008 <HAL_RCC_OscConfig+0x200>
 800a026:	e015      	b.n	800a054 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a028:	4b24      	ldr	r3, [pc, #144]	; (800a0bc <HAL_RCC_OscConfig+0x2b4>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a02e:	f7fc fabd 	bl	80065ac <HAL_GetTick>
 800a032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a034:	e008      	b.n	800a048 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a036:	f7fc fab9 	bl	80065ac <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	2b02      	cmp	r3, #2
 800a042:	d901      	bls.n	800a048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e14d      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a048:	4b1a      	ldr	r3, [pc, #104]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 800a04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a04c:	f003 0302 	and.w	r3, r3, #2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1f0      	bne.n	800a036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80a0 	beq.w	800a1a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a062:	2300      	movs	r3, #0
 800a064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a066:	4b13      	ldr	r3, [pc, #76]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10f      	bne.n	800a092 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a072:	2300      	movs	r3, #0
 800a074:	60bb      	str	r3, [r7, #8]
 800a076:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	4a0e      	ldr	r2, [pc, #56]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 800a07c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a080:	6413      	str	r3, [r2, #64]	; 0x40
 800a082:	4b0c      	ldr	r3, [pc, #48]	; (800a0b4 <HAL_RCC_OscConfig+0x2ac>)
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a08a:	60bb      	str	r3, [r7, #8]
 800a08c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a08e:	2301      	movs	r3, #1
 800a090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a092:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <HAL_RCC_OscConfig+0x2b8>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d121      	bne.n	800a0e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a09e:	4b08      	ldr	r3, [pc, #32]	; (800a0c0 <HAL_RCC_OscConfig+0x2b8>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a07      	ldr	r2, [pc, #28]	; (800a0c0 <HAL_RCC_OscConfig+0x2b8>)
 800a0a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0aa:	f7fc fa7f 	bl	80065ac <HAL_GetTick>
 800a0ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0b0:	e011      	b.n	800a0d6 <HAL_RCC_OscConfig+0x2ce>
 800a0b2:	bf00      	nop
 800a0b4:	40023800 	.word	0x40023800
 800a0b8:	42470000 	.word	0x42470000
 800a0bc:	42470e80 	.word	0x42470e80
 800a0c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0c4:	f7fc fa72 	bl	80065ac <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d901      	bls.n	800a0d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e106      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0d6:	4b85      	ldr	r3, [pc, #532]	; (800a2ec <HAL_RCC_OscConfig+0x4e4>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d0f0      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d106      	bne.n	800a0f8 <HAL_RCC_OscConfig+0x2f0>
 800a0ea:	4b81      	ldr	r3, [pc, #516]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ee:	4a80      	ldr	r2, [pc, #512]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a0f0:	f043 0301 	orr.w	r3, r3, #1
 800a0f4:	6713      	str	r3, [r2, #112]	; 0x70
 800a0f6:	e01c      	b.n	800a132 <HAL_RCC_OscConfig+0x32a>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	2b05      	cmp	r3, #5
 800a0fe:	d10c      	bne.n	800a11a <HAL_RCC_OscConfig+0x312>
 800a100:	4b7b      	ldr	r3, [pc, #492]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a104:	4a7a      	ldr	r2, [pc, #488]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a106:	f043 0304 	orr.w	r3, r3, #4
 800a10a:	6713      	str	r3, [r2, #112]	; 0x70
 800a10c:	4b78      	ldr	r3, [pc, #480]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a110:	4a77      	ldr	r2, [pc, #476]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a112:	f043 0301 	orr.w	r3, r3, #1
 800a116:	6713      	str	r3, [r2, #112]	; 0x70
 800a118:	e00b      	b.n	800a132 <HAL_RCC_OscConfig+0x32a>
 800a11a:	4b75      	ldr	r3, [pc, #468]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a11e:	4a74      	ldr	r2, [pc, #464]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a120:	f023 0301 	bic.w	r3, r3, #1
 800a124:	6713      	str	r3, [r2, #112]	; 0x70
 800a126:	4b72      	ldr	r3, [pc, #456]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12a:	4a71      	ldr	r2, [pc, #452]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a12c:	f023 0304 	bic.w	r3, r3, #4
 800a130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d015      	beq.n	800a166 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a13a:	f7fc fa37 	bl	80065ac <HAL_GetTick>
 800a13e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a140:	e00a      	b.n	800a158 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a142:	f7fc fa33 	bl	80065ac <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a150:	4293      	cmp	r3, r2
 800a152:	d901      	bls.n	800a158 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a154:	2303      	movs	r3, #3
 800a156:	e0c5      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a158:	4b65      	ldr	r3, [pc, #404]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0ee      	beq.n	800a142 <HAL_RCC_OscConfig+0x33a>
 800a164:	e014      	b.n	800a190 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a166:	f7fc fa21 	bl	80065ac <HAL_GetTick>
 800a16a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a16c:	e00a      	b.n	800a184 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a16e:	f7fc fa1d 	bl	80065ac <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	f241 3288 	movw	r2, #5000	; 0x1388
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d901      	bls.n	800a184 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e0af      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a184:	4b5a      	ldr	r3, [pc, #360]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a188:	f003 0302 	and.w	r3, r3, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1ee      	bne.n	800a16e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d105      	bne.n	800a1a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a196:	4b56      	ldr	r3, [pc, #344]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19a:	4a55      	ldr	r2, [pc, #340]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a19c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 809b 	beq.w	800a2e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a1ac:	4b50      	ldr	r3, [pc, #320]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	f003 030c 	and.w	r3, r3, #12
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	d05c      	beq.n	800a272 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d141      	bne.n	800a244 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1c0:	4b4c      	ldr	r3, [pc, #304]	; (800a2f4 <HAL_RCC_OscConfig+0x4ec>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1c6:	f7fc f9f1 	bl	80065ac <HAL_GetTick>
 800a1ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1cc:	e008      	b.n	800a1e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1ce:	f7fc f9ed 	bl	80065ac <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d901      	bls.n	800a1e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e081      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1e0:	4b43      	ldr	r3, [pc, #268]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1f0      	bne.n	800a1ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	69da      	ldr	r2, [r3, #28]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	431a      	orrs	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	019b      	lsls	r3, r3, #6
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a202:	085b      	lsrs	r3, r3, #1
 800a204:	3b01      	subs	r3, #1
 800a206:	041b      	lsls	r3, r3, #16
 800a208:	431a      	orrs	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	061b      	lsls	r3, r3, #24
 800a210:	4937      	ldr	r1, [pc, #220]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a212:	4313      	orrs	r3, r2
 800a214:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a216:	4b37      	ldr	r3, [pc, #220]	; (800a2f4 <HAL_RCC_OscConfig+0x4ec>)
 800a218:	2201      	movs	r2, #1
 800a21a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a21c:	f7fc f9c6 	bl	80065ac <HAL_GetTick>
 800a220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a222:	e008      	b.n	800a236 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a224:	f7fc f9c2 	bl	80065ac <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d901      	bls.n	800a236 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e056      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a236:	4b2e      	ldr	r3, [pc, #184]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0f0      	beq.n	800a224 <HAL_RCC_OscConfig+0x41c>
 800a242:	e04e      	b.n	800a2e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a244:	4b2b      	ldr	r3, [pc, #172]	; (800a2f4 <HAL_RCC_OscConfig+0x4ec>)
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a24a:	f7fc f9af 	bl	80065ac <HAL_GetTick>
 800a24e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a250:	e008      	b.n	800a264 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a252:	f7fc f9ab 	bl	80065ac <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d901      	bls.n	800a264 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e03f      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a264:	4b22      	ldr	r3, [pc, #136]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1f0      	bne.n	800a252 <HAL_RCC_OscConfig+0x44a>
 800a270:	e037      	b.n	800a2e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d101      	bne.n	800a27e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e032      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a27e:	4b1c      	ldr	r3, [pc, #112]	; (800a2f0 <HAL_RCC_OscConfig+0x4e8>)
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d028      	beq.n	800a2de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a296:	429a      	cmp	r2, r3
 800a298:	d121      	bne.n	800a2de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d11a      	bne.n	800a2de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d111      	bne.n	800a2de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c4:	085b      	lsrs	r3, r3, #1
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d107      	bne.n	800a2de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d001      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e000      	b.n	800a2e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	40007000 	.word	0x40007000
 800a2f0:	40023800 	.word	0x40023800
 800a2f4:	42470060 	.word	0x42470060

0800a2f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e0cc      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a30c:	4b68      	ldr	r3, [pc, #416]	; (800a4b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 0307 	and.w	r3, r3, #7
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d90c      	bls.n	800a334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a31a:	4b65      	ldr	r3, [pc, #404]	; (800a4b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	b2d2      	uxtb	r2, r2
 800a320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a322:	4b63      	ldr	r3, [pc, #396]	; (800a4b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d001      	beq.n	800a334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e0b8      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d020      	beq.n	800a382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d005      	beq.n	800a358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a34c:	4b59      	ldr	r3, [pc, #356]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	4a58      	ldr	r2, [pc, #352]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0308 	and.w	r3, r3, #8
 800a360:	2b00      	cmp	r3, #0
 800a362:	d005      	beq.n	800a370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a364:	4b53      	ldr	r3, [pc, #332]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	4a52      	ldr	r2, [pc, #328]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a36a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a36e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a370:	4b50      	ldr	r3, [pc, #320]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	494d      	ldr	r1, [pc, #308]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d044      	beq.n	800a418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d107      	bne.n	800a3a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a396:	4b47      	ldr	r3, [pc, #284]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d119      	bne.n	800a3d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e07f      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d003      	beq.n	800a3b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	d107      	bne.n	800a3c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3b6:	4b3f      	ldr	r3, [pc, #252]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d109      	bne.n	800a3d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e06f      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3c6:	4b3b      	ldr	r3, [pc, #236]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d101      	bne.n	800a3d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e067      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a3d6:	4b37      	ldr	r3, [pc, #220]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f023 0203 	bic.w	r2, r3, #3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	4934      	ldr	r1, [pc, #208]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a3e8:	f7fc f8e0 	bl	80065ac <HAL_GetTick>
 800a3ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ee:	e00a      	b.n	800a406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3f0:	f7fc f8dc 	bl	80065ac <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d901      	bls.n	800a406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e04f      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a406:	4b2b      	ldr	r3, [pc, #172]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	f003 020c 	and.w	r2, r3, #12
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	429a      	cmp	r2, r3
 800a416:	d1eb      	bne.n	800a3f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a418:	4b25      	ldr	r3, [pc, #148]	; (800a4b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0307 	and.w	r3, r3, #7
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	429a      	cmp	r2, r3
 800a424:	d20c      	bcs.n	800a440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a426:	4b22      	ldr	r3, [pc, #136]	; (800a4b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a42e:	4b20      	ldr	r3, [pc, #128]	; (800a4b0 <HAL_RCC_ClockConfig+0x1b8>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d001      	beq.n	800a440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e032      	b.n	800a4a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d008      	beq.n	800a45e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a44c:	4b19      	ldr	r3, [pc, #100]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	4916      	ldr	r1, [pc, #88]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a45a:	4313      	orrs	r3, r2
 800a45c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0308 	and.w	r3, r3, #8
 800a466:	2b00      	cmp	r3, #0
 800a468:	d009      	beq.n	800a47e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a46a:	4b12      	ldr	r3, [pc, #72]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	490e      	ldr	r1, [pc, #56]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a47e:	f000 f821 	bl	800a4c4 <HAL_RCC_GetSysClockFreq>
 800a482:	4602      	mov	r2, r0
 800a484:	4b0b      	ldr	r3, [pc, #44]	; (800a4b4 <HAL_RCC_ClockConfig+0x1bc>)
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	091b      	lsrs	r3, r3, #4
 800a48a:	f003 030f 	and.w	r3, r3, #15
 800a48e:	490a      	ldr	r1, [pc, #40]	; (800a4b8 <HAL_RCC_ClockConfig+0x1c0>)
 800a490:	5ccb      	ldrb	r3, [r1, r3]
 800a492:	fa22 f303 	lsr.w	r3, r2, r3
 800a496:	4a09      	ldr	r2, [pc, #36]	; (800a4bc <HAL_RCC_ClockConfig+0x1c4>)
 800a498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a49a:	4b09      	ldr	r3, [pc, #36]	; (800a4c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fc f840 	bl	8006524 <HAL_InitTick>

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	40023c00 	.word	0x40023c00
 800a4b4:	40023800 	.word	0x40023800
 800a4b8:	080246d4 	.word	0x080246d4
 800a4bc:	20000034 	.word	0x20000034
 800a4c0:	20000038 	.word	0x20000038

0800a4c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4c4:	b5b0      	push	{r4, r5, r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	6079      	str	r1, [r7, #4]
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	60f9      	str	r1, [r7, #12]
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4da:	4952      	ldr	r1, [pc, #328]	; (800a624 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4dc:	6889      	ldr	r1, [r1, #8]
 800a4de:	f001 010c 	and.w	r1, r1, #12
 800a4e2:	2908      	cmp	r1, #8
 800a4e4:	d00d      	beq.n	800a502 <HAL_RCC_GetSysClockFreq+0x3e>
 800a4e6:	2908      	cmp	r1, #8
 800a4e8:	f200 8094 	bhi.w	800a614 <HAL_RCC_GetSysClockFreq+0x150>
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	d002      	beq.n	800a4f6 <HAL_RCC_GetSysClockFreq+0x32>
 800a4f0:	2904      	cmp	r1, #4
 800a4f2:	d003      	beq.n	800a4fc <HAL_RCC_GetSysClockFreq+0x38>
 800a4f4:	e08e      	b.n	800a614 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a4f6:	4b4c      	ldr	r3, [pc, #304]	; (800a628 <HAL_RCC_GetSysClockFreq+0x164>)
 800a4f8:	60bb      	str	r3, [r7, #8]
       break;
 800a4fa:	e08e      	b.n	800a61a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a4fc:	4b4b      	ldr	r3, [pc, #300]	; (800a62c <HAL_RCC_GetSysClockFreq+0x168>)
 800a4fe:	60bb      	str	r3, [r7, #8]
      break;
 800a500:	e08b      	b.n	800a61a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a502:	4948      	ldr	r1, [pc, #288]	; (800a624 <HAL_RCC_GetSysClockFreq+0x160>)
 800a504:	6849      	ldr	r1, [r1, #4]
 800a506:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a50a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a50c:	4945      	ldr	r1, [pc, #276]	; (800a624 <HAL_RCC_GetSysClockFreq+0x160>)
 800a50e:	6849      	ldr	r1, [r1, #4]
 800a510:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a514:	2900      	cmp	r1, #0
 800a516:	d024      	beq.n	800a562 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a518:	4942      	ldr	r1, [pc, #264]	; (800a624 <HAL_RCC_GetSysClockFreq+0x160>)
 800a51a:	6849      	ldr	r1, [r1, #4]
 800a51c:	0989      	lsrs	r1, r1, #6
 800a51e:	4608      	mov	r0, r1
 800a520:	f04f 0100 	mov.w	r1, #0
 800a524:	f240 14ff 	movw	r4, #511	; 0x1ff
 800a528:	f04f 0500 	mov.w	r5, #0
 800a52c:	ea00 0204 	and.w	r2, r0, r4
 800a530:	ea01 0305 	and.w	r3, r1, r5
 800a534:	493d      	ldr	r1, [pc, #244]	; (800a62c <HAL_RCC_GetSysClockFreq+0x168>)
 800a536:	fb01 f003 	mul.w	r0, r1, r3
 800a53a:	2100      	movs	r1, #0
 800a53c:	fb01 f102 	mul.w	r1, r1, r2
 800a540:	1844      	adds	r4, r0, r1
 800a542:	493a      	ldr	r1, [pc, #232]	; (800a62c <HAL_RCC_GetSysClockFreq+0x168>)
 800a544:	fba2 0101 	umull	r0, r1, r2, r1
 800a548:	1863      	adds	r3, r4, r1
 800a54a:	4619      	mov	r1, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	461a      	mov	r2, r3
 800a550:	f04f 0300 	mov.w	r3, #0
 800a554:	f7f6 fbb0 	bl	8000cb8 <__aeabi_uldivmod>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4613      	mov	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	e04a      	b.n	800a5f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a562:	4b30      	ldr	r3, [pc, #192]	; (800a624 <HAL_RCC_GetSysClockFreq+0x160>)
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	099b      	lsrs	r3, r3, #6
 800a568:	461a      	mov	r2, r3
 800a56a:	f04f 0300 	mov.w	r3, #0
 800a56e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a572:	f04f 0100 	mov.w	r1, #0
 800a576:	ea02 0400 	and.w	r4, r2, r0
 800a57a:	ea03 0501 	and.w	r5, r3, r1
 800a57e:	4620      	mov	r0, r4
 800a580:	4629      	mov	r1, r5
 800a582:	f04f 0200 	mov.w	r2, #0
 800a586:	f04f 0300 	mov.w	r3, #0
 800a58a:	014b      	lsls	r3, r1, #5
 800a58c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a590:	0142      	lsls	r2, r0, #5
 800a592:	4610      	mov	r0, r2
 800a594:	4619      	mov	r1, r3
 800a596:	1b00      	subs	r0, r0, r4
 800a598:	eb61 0105 	sbc.w	r1, r1, r5
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	f04f 0300 	mov.w	r3, #0
 800a5a4:	018b      	lsls	r3, r1, #6
 800a5a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a5aa:	0182      	lsls	r2, r0, #6
 800a5ac:	1a12      	subs	r2, r2, r0
 800a5ae:	eb63 0301 	sbc.w	r3, r3, r1
 800a5b2:	f04f 0000 	mov.w	r0, #0
 800a5b6:	f04f 0100 	mov.w	r1, #0
 800a5ba:	00d9      	lsls	r1, r3, #3
 800a5bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5c0:	00d0      	lsls	r0, r2, #3
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	1912      	adds	r2, r2, r4
 800a5c8:	eb45 0303 	adc.w	r3, r5, r3
 800a5cc:	f04f 0000 	mov.w	r0, #0
 800a5d0:	f04f 0100 	mov.w	r1, #0
 800a5d4:	0299      	lsls	r1, r3, #10
 800a5d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a5da:	0290      	lsls	r0, r2, #10
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	f04f 0300 	mov.w	r3, #0
 800a5ec:	f7f6 fb64 	bl	8000cb8 <__aeabi_uldivmod>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a5f8:	4b0a      	ldr	r3, [pc, #40]	; (800a624 <HAL_RCC_GetSysClockFreq+0x160>)
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	0c1b      	lsrs	r3, r3, #16
 800a5fe:	f003 0303 	and.w	r3, r3, #3
 800a602:	3301      	adds	r3, #1
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a610:	60bb      	str	r3, [r7, #8]
      break;
 800a612:	e002      	b.n	800a61a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a614:	4b04      	ldr	r3, [pc, #16]	; (800a628 <HAL_RCC_GetSysClockFreq+0x164>)
 800a616:	60bb      	str	r3, [r7, #8]
      break;
 800a618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a61a:	68bb      	ldr	r3, [r7, #8]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bdb0      	pop	{r4, r5, r7, pc}
 800a624:	40023800 	.word	0x40023800
 800a628:	00f42400 	.word	0x00f42400
 800a62c:	017d7840 	.word	0x017d7840

0800a630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a630:	b480      	push	{r7}
 800a632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a634:	4b03      	ldr	r3, [pc, #12]	; (800a644 <HAL_RCC_GetHCLKFreq+0x14>)
 800a636:	681b      	ldr	r3, [r3, #0]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	20000034 	.word	0x20000034

0800a648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a64c:	f7ff fff0 	bl	800a630 <HAL_RCC_GetHCLKFreq>
 800a650:	4602      	mov	r2, r0
 800a652:	4b05      	ldr	r3, [pc, #20]	; (800a668 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	0a9b      	lsrs	r3, r3, #10
 800a658:	f003 0307 	and.w	r3, r3, #7
 800a65c:	4903      	ldr	r1, [pc, #12]	; (800a66c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a65e:	5ccb      	ldrb	r3, [r1, r3]
 800a660:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a664:	4618      	mov	r0, r3
 800a666:	bd80      	pop	{r7, pc}
 800a668:	40023800 	.word	0x40023800
 800a66c:	080246e4 	.word	0x080246e4

0800a670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a674:	f7ff ffdc 	bl	800a630 <HAL_RCC_GetHCLKFreq>
 800a678:	4602      	mov	r2, r0
 800a67a:	4b05      	ldr	r3, [pc, #20]	; (800a690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	0b5b      	lsrs	r3, r3, #13
 800a680:	f003 0307 	and.w	r3, r3, #7
 800a684:	4903      	ldr	r1, [pc, #12]	; (800a694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a686:	5ccb      	ldrb	r3, [r1, r3]
 800a688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	40023800 	.word	0x40023800
 800a694:	080246e4 	.word	0x080246e4

0800a698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e07b      	b.n	800a7a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d108      	bne.n	800a6c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6ba:	d009      	beq.n	800a6d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	61da      	str	r2, [r3, #28]
 800a6c2:	e005      	b.n	800a6d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7fb f9a8 	bl	8005a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a706:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a718:	431a      	orrs	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a722:	431a      	orrs	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	f003 0302 	and.w	r3, r3, #2
 800a72c:	431a      	orrs	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	431a      	orrs	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a740:	431a      	orrs	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a74a:	431a      	orrs	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a1b      	ldr	r3, [r3, #32]
 800a750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a754:	ea42 0103 	orr.w	r1, r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	430a      	orrs	r2, r1
 800a766:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	0c1b      	lsrs	r3, r3, #16
 800a76e:	f003 0104 	and.w	r1, r3, #4
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	f003 0210 	and.w	r2, r3, #16
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	430a      	orrs	r2, r1
 800a780:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	69da      	ldr	r2, [r3, #28]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a790:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b08c      	sub	sp, #48	; 0x30
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d101      	bne.n	800a7d0 <HAL_SPI_TransmitReceive+0x26>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e18a      	b.n	800aae6 <HAL_SPI_TransmitReceive+0x33c>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7d8:	f7fb fee8 	bl	80065ac <HAL_GetTick>
 800a7dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a7ee:	887b      	ldrh	r3, [r7, #2]
 800a7f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a7f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d00f      	beq.n	800a81a <HAL_SPI_TransmitReceive+0x70>
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a800:	d107      	bne.n	800a812 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d103      	bne.n	800a812 <HAL_SPI_TransmitReceive+0x68>
 800a80a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a80e:	2b04      	cmp	r3, #4
 800a810:	d003      	beq.n	800a81a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a812:	2302      	movs	r3, #2
 800a814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a818:	e15b      	b.n	800aad2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d005      	beq.n	800a82c <HAL_SPI_TransmitReceive+0x82>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <HAL_SPI_TransmitReceive+0x82>
 800a826:	887b      	ldrh	r3, [r7, #2]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d103      	bne.n	800a834 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a832:	e14e      	b.n	800aad2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d003      	beq.n	800a848 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2205      	movs	r2, #5
 800a844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	887a      	ldrh	r2, [r7, #2]
 800a858:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	887a      	ldrh	r2, [r7, #2]
 800a85e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	887a      	ldrh	r2, [r7, #2]
 800a86a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	887a      	ldrh	r2, [r7, #2]
 800a870:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a888:	2b40      	cmp	r3, #64	; 0x40
 800a88a:	d007      	beq.n	800a89c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a89a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8a4:	d178      	bne.n	800a998 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d002      	beq.n	800a8b4 <HAL_SPI_TransmitReceive+0x10a>
 800a8ae:	8b7b      	ldrh	r3, [r7, #26]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d166      	bne.n	800a982 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b8:	881a      	ldrh	r2, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c4:	1c9a      	adds	r2, r3, #2
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8d8:	e053      	b.n	800a982 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d11b      	bne.n	800a920 <HAL_SPI_TransmitReceive+0x176>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d016      	beq.n	800a920 <HAL_SPI_TransmitReceive+0x176>
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d113      	bne.n	800a920 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fc:	881a      	ldrh	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a908:	1c9a      	adds	r2, r3, #2
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a912:	b29b      	uxth	r3, r3
 800a914:	3b01      	subs	r3, #1
 800a916:	b29a      	uxth	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d119      	bne.n	800a962 <HAL_SPI_TransmitReceive+0x1b8>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a932:	b29b      	uxth	r3, r3
 800a934:	2b00      	cmp	r3, #0
 800a936:	d014      	beq.n	800a962 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68da      	ldr	r2, [r3, #12]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a942:	b292      	uxth	r2, r2
 800a944:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94a:	1c9a      	adds	r2, r3, #2
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a954:	b29b      	uxth	r3, r3
 800a956:	3b01      	subs	r3, #1
 800a958:	b29a      	uxth	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a95e:	2301      	movs	r3, #1
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a962:	f7fb fe23 	bl	80065ac <HAL_GetTick>
 800a966:	4602      	mov	r2, r0
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a96e:	429a      	cmp	r2, r3
 800a970:	d807      	bhi.n	800a982 <HAL_SPI_TransmitReceive+0x1d8>
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a978:	d003      	beq.n	800a982 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a980:	e0a7      	b.n	800aad2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a986:	b29b      	uxth	r3, r3
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1a6      	bne.n	800a8da <HAL_SPI_TransmitReceive+0x130>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a990:	b29b      	uxth	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1a1      	bne.n	800a8da <HAL_SPI_TransmitReceive+0x130>
 800a996:	e07c      	b.n	800aa92 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <HAL_SPI_TransmitReceive+0x1fc>
 800a9a0:	8b7b      	ldrh	r3, [r7, #26]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d16b      	bne.n	800aa7e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	330c      	adds	r3, #12
 800a9b0:	7812      	ldrb	r2, [r2, #0]
 800a9b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b8:	1c5a      	adds	r2, r3, #1
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9cc:	e057      	b.n	800aa7e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d11c      	bne.n	800aa16 <HAL_SPI_TransmitReceive+0x26c>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d017      	beq.n	800aa16 <HAL_SPI_TransmitReceive+0x26c>
 800a9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d114      	bne.n	800aa16 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	330c      	adds	r3, #12
 800a9f6:	7812      	ldrb	r2, [r2, #0]
 800a9f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fe:	1c5a      	adds	r2, r3, #1
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d119      	bne.n	800aa58 <HAL_SPI_TransmitReceive+0x2ae>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d014      	beq.n	800aa58 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68da      	ldr	r2, [r3, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa38:	b2d2      	uxtb	r2, r2
 800aa3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa54:	2301      	movs	r3, #1
 800aa56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aa58:	f7fb fda8 	bl	80065ac <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d803      	bhi.n	800aa70 <HAL_SPI_TransmitReceive+0x2c6>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6e:	d102      	bne.n	800aa76 <HAL_SPI_TransmitReceive+0x2cc>
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d103      	bne.n	800aa7e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800aa7c:	e029      	b.n	800aad2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1a2      	bne.n	800a9ce <HAL_SPI_TransmitReceive+0x224>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d19d      	bne.n	800a9ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 f9d0 	bl	800ae3c <SPI_EndRxTxTransaction>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d006      	beq.n	800aab0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2220      	movs	r2, #32
 800aaac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800aaae:	e010      	b.n	800aad2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10b      	bne.n	800aad0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aab8:	2300      	movs	r3, #0
 800aaba:	617b      	str	r3, [r7, #20]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	617b      	str	r3, [r7, #20]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	617b      	str	r3, [r7, #20]
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	e000      	b.n	800aad2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800aad0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3730      	adds	r7, #48	; 0x30
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	099b      	lsrs	r3, r3, #6
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10f      	bne.n	800ab34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00a      	beq.n	800ab34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	099b      	lsrs	r3, r3, #6
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d004      	beq.n	800ab34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	4798      	blx	r3
    return;
 800ab32:	e0d7      	b.n	800ace4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	085b      	lsrs	r3, r3, #1
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00a      	beq.n	800ab56 <HAL_SPI_IRQHandler+0x66>
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	09db      	lsrs	r3, r3, #7
 800ab44:	f003 0301 	and.w	r3, r3, #1
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d004      	beq.n	800ab56 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	4798      	blx	r3
    return;
 800ab54:	e0c6      	b.n	800ace4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	095b      	lsrs	r3, r3, #5
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10c      	bne.n	800ab7c <HAL_SPI_IRQHandler+0x8c>
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	099b      	lsrs	r3, r3, #6
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d106      	bne.n	800ab7c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	0a1b      	lsrs	r3, r3, #8
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 80b4 	beq.w	800ace4 <HAL_SPI_IRQHandler+0x1f4>
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	095b      	lsrs	r3, r3, #5
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 80ad 	beq.w	800ace4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	099b      	lsrs	r3, r3, #6
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d023      	beq.n	800abde <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d011      	beq.n	800abc6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aba6:	f043 0204 	orr.w	r2, r3, #4
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abae:	2300      	movs	r3, #0
 800abb0:	617b      	str	r3, [r7, #20]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	617b      	str	r3, [r7, #20]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	617b      	str	r3, [r7, #20]
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	e00b      	b.n	800abde <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abc6:	2300      	movs	r3, #0
 800abc8:	613b      	str	r3, [r7, #16]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	613b      	str	r3, [r7, #16]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	613b      	str	r3, [r7, #16]
 800abda:	693b      	ldr	r3, [r7, #16]
        return;
 800abdc:	e082      	b.n	800ace4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	095b      	lsrs	r3, r3, #5
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d014      	beq.n	800ac14 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abee:	f043 0201 	orr.w	r2, r3, #1
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	0a1b      	lsrs	r3, r3, #8
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00c      	beq.n	800ac3a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac24:	f043 0208 	orr.w	r2, r3, #8
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	60bb      	str	r3, [r7, #8]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	60bb      	str	r3, [r7, #8]
 800ac38:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d04f      	beq.n	800ace2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	685a      	ldr	r2, [r3, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ac50:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	f003 0302 	and.w	r3, r3, #2
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d104      	bne.n	800ac6e <HAL_SPI_IRQHandler+0x17e>
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d034      	beq.n	800acd8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 0203 	bic.w	r2, r2, #3
 800ac7c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d011      	beq.n	800acaa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac8a:	4a18      	ldr	r2, [pc, #96]	; (800acec <HAL_SPI_IRQHandler+0x1fc>)
 800ac8c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fb ffd0 	bl	8006c38 <HAL_DMA_Abort_IT>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d005      	beq.n	800acaa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d016      	beq.n	800ace0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acb6:	4a0d      	ldr	r2, [pc, #52]	; (800acec <HAL_SPI_IRQHandler+0x1fc>)
 800acb8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fb ffba 	bl	8006c38 <HAL_DMA_Abort_IT>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800acd6:	e003      	b.n	800ace0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f809 	bl	800acf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800acde:	e000      	b.n	800ace2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ace0:	bf00      	nop
    return;
 800ace2:	bf00      	nop
  }
}
 800ace4:	3720      	adds	r7, #32
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	0800ad05 	.word	0x0800ad05

0800acf0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f7ff ffe6 	bl	800acf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad24:	bf00      	nop
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad3c:	f7fb fc36 	bl	80065ac <HAL_GetTick>
 800ad40:	4602      	mov	r2, r0
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	1a9b      	subs	r3, r3, r2
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	4413      	add	r3, r2
 800ad4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad4c:	f7fb fc2e 	bl	80065ac <HAL_GetTick>
 800ad50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad52:	4b39      	ldr	r3, [pc, #228]	; (800ae38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	015b      	lsls	r3, r3, #5
 800ad58:	0d1b      	lsrs	r3, r3, #20
 800ad5a:	69fa      	ldr	r2, [r7, #28]
 800ad5c:	fb02 f303 	mul.w	r3, r2, r3
 800ad60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad62:	e054      	b.n	800ae0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6a:	d050      	beq.n	800ae0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad6c:	f7fb fc1e 	bl	80065ac <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	69fa      	ldr	r2, [r7, #28]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d902      	bls.n	800ad82 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d13d      	bne.n	800adfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	685a      	ldr	r2, [r3, #4]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad9a:	d111      	bne.n	800adc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ada4:	d004      	beq.n	800adb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adae:	d107      	bne.n	800adc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adc8:	d10f      	bne.n	800adea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ade8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e017      	b.n	800ae2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d101      	bne.n	800ae08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae04:	2300      	movs	r3, #0
 800ae06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	689a      	ldr	r2, [r3, #8]
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	4013      	ands	r3, r2
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	bf0c      	ite	eq
 800ae1e:	2301      	moveq	r3, #1
 800ae20:	2300      	movne	r3, #0
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	461a      	mov	r2, r3
 800ae26:	79fb      	ldrb	r3, [r7, #7]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d19b      	bne.n	800ad64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3720      	adds	r7, #32
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20000034 	.word	0x20000034

0800ae3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af02      	add	r7, sp, #8
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ae48:	4b1b      	ldr	r3, [pc, #108]	; (800aeb8 <SPI_EndRxTxTransaction+0x7c>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a1b      	ldr	r2, [pc, #108]	; (800aebc <SPI_EndRxTxTransaction+0x80>)
 800ae4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae52:	0d5b      	lsrs	r3, r3, #21
 800ae54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae58:	fb02 f303 	mul.w	r3, r2, r3
 800ae5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae66:	d112      	bne.n	800ae8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2180      	movs	r1, #128	; 0x80
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7ff ff5a 	bl	800ad2c <SPI_WaitFlagStateUntilTimeout>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d016      	beq.n	800aeac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae82:	f043 0220 	orr.w	r2, r3, #32
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e00f      	b.n	800aeae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00a      	beq.n	800aeaa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	3b01      	subs	r3, #1
 800ae98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea4:	2b80      	cmp	r3, #128	; 0x80
 800aea6:	d0f2      	beq.n	800ae8e <SPI_EndRxTxTransaction+0x52>
 800aea8:	e000      	b.n	800aeac <SPI_EndRxTxTransaction+0x70>
        break;
 800aeaa:	bf00      	nop
  }

  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000034 	.word	0x20000034
 800aebc:	165e9f81 	.word	0x165e9f81

0800aec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	e041      	b.n	800af56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7fb f814 	bl	8005f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2202      	movs	r2, #2
 800aef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	3304      	adds	r3, #4
 800aefc:	4619      	mov	r1, r3
 800aefe:	4610      	mov	r0, r2
 800af00:	f000 f9f0 	bl	800b2e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b01      	cmp	r3, #1
 800af72:	d001      	beq.n	800af78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	e044      	b.n	800b002 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2202      	movs	r2, #2
 800af7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f042 0201 	orr.w	r2, r2, #1
 800af8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a1e      	ldr	r2, [pc, #120]	; (800b010 <HAL_TIM_Base_Start_IT+0xb0>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d018      	beq.n	800afcc <HAL_TIM_Base_Start_IT+0x6c>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afa2:	d013      	beq.n	800afcc <HAL_TIM_Base_Start_IT+0x6c>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a1a      	ldr	r2, [pc, #104]	; (800b014 <HAL_TIM_Base_Start_IT+0xb4>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d00e      	beq.n	800afcc <HAL_TIM_Base_Start_IT+0x6c>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a19      	ldr	r2, [pc, #100]	; (800b018 <HAL_TIM_Base_Start_IT+0xb8>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d009      	beq.n	800afcc <HAL_TIM_Base_Start_IT+0x6c>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a17      	ldr	r2, [pc, #92]	; (800b01c <HAL_TIM_Base_Start_IT+0xbc>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d004      	beq.n	800afcc <HAL_TIM_Base_Start_IT+0x6c>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a16      	ldr	r2, [pc, #88]	; (800b020 <HAL_TIM_Base_Start_IT+0xc0>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d111      	bne.n	800aff0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f003 0307 	and.w	r3, r3, #7
 800afd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2b06      	cmp	r3, #6
 800afdc:	d010      	beq.n	800b000 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f042 0201 	orr.w	r2, r2, #1
 800afec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afee:	e007      	b.n	800b000 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f042 0201 	orr.w	r2, r2, #1
 800affe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	40010000 	.word	0x40010000
 800b014:	40000400 	.word	0x40000400
 800b018:	40000800 	.word	0x40000800
 800b01c:	40000c00 	.word	0x40000c00
 800b020:	40014000 	.word	0x40014000

0800b024 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68da      	ldr	r2, [r3, #12]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 0201 	bic.w	r2, r2, #1
 800b03a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6a1a      	ldr	r2, [r3, #32]
 800b042:	f241 1311 	movw	r3, #4369	; 0x1111
 800b046:	4013      	ands	r3, r2
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10f      	bne.n	800b06c <HAL_TIM_Base_Stop_IT+0x48>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6a1a      	ldr	r2, [r3, #32]
 800b052:	f240 4344 	movw	r3, #1092	; 0x444
 800b056:	4013      	ands	r3, r2
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d107      	bne.n	800b06c <HAL_TIM_Base_Stop_IT+0x48>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0201 	bic.w	r2, r2, #1
 800b06a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	f003 0302 	and.w	r3, r3, #2
 800b094:	2b02      	cmp	r3, #2
 800b096:	d122      	bne.n	800b0de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d11b      	bne.n	800b0de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f06f 0202 	mvn.w	r2, #2
 800b0ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	f003 0303 	and.w	r3, r3, #3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d003      	beq.n	800b0cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f8ee 	bl	800b2a6 <HAL_TIM_IC_CaptureCallback>
 800b0ca:	e005      	b.n	800b0d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f8e0 	bl	800b292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f8f1 	bl	800b2ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	f003 0304 	and.w	r3, r3, #4
 800b0e8:	2b04      	cmp	r3, #4
 800b0ea:	d122      	bne.n	800b132 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	f003 0304 	and.w	r3, r3, #4
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d11b      	bne.n	800b132 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f06f 0204 	mvn.w	r2, #4
 800b102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b114:	2b00      	cmp	r3, #0
 800b116:	d003      	beq.n	800b120 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f8c4 	bl	800b2a6 <HAL_TIM_IC_CaptureCallback>
 800b11e:	e005      	b.n	800b12c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f8b6 	bl	800b292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f8c7 	bl	800b2ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	f003 0308 	and.w	r3, r3, #8
 800b13c:	2b08      	cmp	r3, #8
 800b13e:	d122      	bne.n	800b186 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	f003 0308 	and.w	r3, r3, #8
 800b14a:	2b08      	cmp	r3, #8
 800b14c:	d11b      	bne.n	800b186 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f06f 0208 	mvn.w	r2, #8
 800b156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2204      	movs	r2, #4
 800b15c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	69db      	ldr	r3, [r3, #28]
 800b164:	f003 0303 	and.w	r3, r3, #3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 f89a 	bl	800b2a6 <HAL_TIM_IC_CaptureCallback>
 800b172:	e005      	b.n	800b180 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f88c 	bl	800b292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f89d 	bl	800b2ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	f003 0310 	and.w	r3, r3, #16
 800b190:	2b10      	cmp	r3, #16
 800b192:	d122      	bne.n	800b1da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	f003 0310 	and.w	r3, r3, #16
 800b19e:	2b10      	cmp	r3, #16
 800b1a0:	d11b      	bne.n	800b1da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f06f 0210 	mvn.w	r2, #16
 800b1aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2208      	movs	r2, #8
 800b1b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d003      	beq.n	800b1c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f870 	bl	800b2a6 <HAL_TIM_IC_CaptureCallback>
 800b1c6:	e005      	b.n	800b1d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f862 	bl	800b292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f873 	bl	800b2ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	f003 0301 	and.w	r3, r3, #1
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d10e      	bne.n	800b206 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f003 0301 	and.w	r3, r3, #1
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d107      	bne.n	800b206 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f06f 0201 	mvn.w	r2, #1
 800b1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7f9 f89b 	bl	800433c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b210:	2b80      	cmp	r3, #128	; 0x80
 800b212:	d10e      	bne.n	800b232 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b21e:	2b80      	cmp	r3, #128	; 0x80
 800b220:	d107      	bne.n	800b232 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b22a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f8e3 	bl	800b3f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b23c:	2b40      	cmp	r3, #64	; 0x40
 800b23e:	d10e      	bne.n	800b25e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24a:	2b40      	cmp	r3, #64	; 0x40
 800b24c:	d107      	bne.n	800b25e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f838 	bl	800b2ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	f003 0320 	and.w	r3, r3, #32
 800b268:	2b20      	cmp	r3, #32
 800b26a:	d10e      	bne.n	800b28a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	f003 0320 	and.w	r3, r3, #32
 800b276:	2b20      	cmp	r3, #32
 800b278:	d107      	bne.n	800b28a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f06f 0220 	mvn.w	r2, #32
 800b282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f8ad 	bl	800b3e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b28a:	bf00      	nop
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b292:	b480      	push	{r7}
 800b294:	b083      	sub	sp, #12
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b29a:	bf00      	nop
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b083      	sub	sp, #12
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2ae:	bf00      	nop
 800b2b0:	370c      	adds	r7, #12
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b083      	sub	sp, #12
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2c2:	bf00      	nop
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2d6:	bf00      	nop
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
	...

0800b2e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a34      	ldr	r2, [pc, #208]	; (800b3c8 <TIM_Base_SetConfig+0xe4>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d00f      	beq.n	800b31c <TIM_Base_SetConfig+0x38>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b302:	d00b      	beq.n	800b31c <TIM_Base_SetConfig+0x38>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a31      	ldr	r2, [pc, #196]	; (800b3cc <TIM_Base_SetConfig+0xe8>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d007      	beq.n	800b31c <TIM_Base_SetConfig+0x38>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a30      	ldr	r2, [pc, #192]	; (800b3d0 <TIM_Base_SetConfig+0xec>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d003      	beq.n	800b31c <TIM_Base_SetConfig+0x38>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a2f      	ldr	r2, [pc, #188]	; (800b3d4 <TIM_Base_SetConfig+0xf0>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d108      	bne.n	800b32e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a25      	ldr	r2, [pc, #148]	; (800b3c8 <TIM_Base_SetConfig+0xe4>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d01b      	beq.n	800b36e <TIM_Base_SetConfig+0x8a>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b33c:	d017      	beq.n	800b36e <TIM_Base_SetConfig+0x8a>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a22      	ldr	r2, [pc, #136]	; (800b3cc <TIM_Base_SetConfig+0xe8>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d013      	beq.n	800b36e <TIM_Base_SetConfig+0x8a>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a21      	ldr	r2, [pc, #132]	; (800b3d0 <TIM_Base_SetConfig+0xec>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d00f      	beq.n	800b36e <TIM_Base_SetConfig+0x8a>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a20      	ldr	r2, [pc, #128]	; (800b3d4 <TIM_Base_SetConfig+0xf0>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d00b      	beq.n	800b36e <TIM_Base_SetConfig+0x8a>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a1f      	ldr	r2, [pc, #124]	; (800b3d8 <TIM_Base_SetConfig+0xf4>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d007      	beq.n	800b36e <TIM_Base_SetConfig+0x8a>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a1e      	ldr	r2, [pc, #120]	; (800b3dc <TIM_Base_SetConfig+0xf8>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d003      	beq.n	800b36e <TIM_Base_SetConfig+0x8a>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a1d      	ldr	r2, [pc, #116]	; (800b3e0 <TIM_Base_SetConfig+0xfc>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d108      	bne.n	800b380 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	695b      	ldr	r3, [r3, #20]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a08      	ldr	r2, [pc, #32]	; (800b3c8 <TIM_Base_SetConfig+0xe4>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d103      	bne.n	800b3b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	691a      	ldr	r2, [r3, #16]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	615a      	str	r2, [r3, #20]
}
 800b3ba:	bf00      	nop
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	40010000 	.word	0x40010000
 800b3cc:	40000400 	.word	0x40000400
 800b3d0:	40000800 	.word	0x40000800
 800b3d4:	40000c00 	.word	0x40000c00
 800b3d8:	40014000 	.word	0x40014000
 800b3dc:	40014400 	.word	0x40014400
 800b3e0:	40014800 	.word	0x40014800

0800b3e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e03f      	b.n	800b49e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b00      	cmp	r3, #0
 800b428:	d106      	bne.n	800b438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7fa ff7e 	bl	8006334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2224      	movs	r2, #36	; 0x24
 800b43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68da      	ldr	r2, [r3, #12]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b44e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 ff53 	bl	800c2fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	691a      	ldr	r2, [r3, #16]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	695a      	ldr	r2, [r3, #20]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68da      	ldr	r2, [r3, #12]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2220      	movs	r2, #32
 800b490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2220      	movs	r2, #32
 800b498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
	...

0800b4a8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08c      	sub	sp, #48	; 0x30
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	2b20      	cmp	r3, #32
 800b4c0:	d165      	bne.n	800b58e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <HAL_UART_Transmit_DMA+0x26>
 800b4c8:	88fb      	ldrh	r3, [r7, #6]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e05e      	b.n	800b590 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d101      	bne.n	800b4e0 <HAL_UART_Transmit_DMA+0x38>
 800b4dc:	2302      	movs	r3, #2
 800b4de:	e057      	b.n	800b590 <HAL_UART_Transmit_DMA+0xe8>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	88fa      	ldrh	r2, [r7, #6]
 800b4f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	88fa      	ldrh	r2, [r7, #6]
 800b4f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2221      	movs	r2, #33	; 0x21
 800b504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b50c:	4a22      	ldr	r2, [pc, #136]	; (800b598 <HAL_UART_Transmit_DMA+0xf0>)
 800b50e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b514:	4a21      	ldr	r2, [pc, #132]	; (800b59c <HAL_UART_Transmit_DMA+0xf4>)
 800b516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b51c:	4a20      	ldr	r2, [pc, #128]	; (800b5a0 <HAL_UART_Transmit_DMA+0xf8>)
 800b51e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b524:	2200      	movs	r2, #0
 800b526:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800b528:	f107 0308 	add.w	r3, r7, #8
 800b52c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b534:	6819      	ldr	r1, [r3, #0]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3304      	adds	r3, #4
 800b53c:	461a      	mov	r2, r3
 800b53e:	88fb      	ldrh	r3, [r7, #6]
 800b540:	f7fb fab2 	bl	8006aa8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b54c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3314      	adds	r3, #20
 800b55c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	e853 3f00 	ldrex	r3, [r3]
 800b564:	617b      	str	r3, [r7, #20]
   return(result);
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b56c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3314      	adds	r3, #20
 800b574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b576:	627a      	str	r2, [r7, #36]	; 0x24
 800b578:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57a:	6a39      	ldr	r1, [r7, #32]
 800b57c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b57e:	e841 2300 	strex	r3, r2, [r1]
 800b582:	61fb      	str	r3, [r7, #28]
   return(result);
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1e5      	bne.n	800b556 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	e000      	b.n	800b590 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b58e:	2302      	movs	r3, #2
  }
}
 800b590:	4618      	mov	r0, r3
 800b592:	3730      	adds	r7, #48	; 0x30
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	0800bb9d 	.word	0x0800bb9d
 800b59c:	0800bc37 	.word	0x0800bc37
 800b5a0:	0800bdaf 	.word	0x0800bdaf

0800b5a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b20      	cmp	r3, #32
 800b5bc:	d11d      	bne.n	800b5fa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <HAL_UART_Receive_DMA+0x26>
 800b5c4:	88fb      	ldrh	r3, [r7, #6]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e016      	b.n	800b5fc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d101      	bne.n	800b5dc <HAL_UART_Receive_DMA+0x38>
 800b5d8:	2302      	movs	r3, #2
 800b5da:	e00f      	b.n	800b5fc <HAL_UART_Receive_DMA+0x58>
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b5ea:	88fb      	ldrh	r3, [r7, #6]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	68b9      	ldr	r1, [r7, #8]
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 fc27 	bl	800be44 <UART_Start_Receive_DMA>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	e000      	b.n	800b5fc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b5fa:	2302      	movs	r3, #2
  }
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b0ba      	sub	sp, #232	; 0xe8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b62a:	2300      	movs	r3, #0
 800b62c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b630:	2300      	movs	r3, #0
 800b632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b63a:	f003 030f 	and.w	r3, r3, #15
 800b63e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10f      	bne.n	800b66a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b64e:	f003 0320 	and.w	r3, r3, #32
 800b652:	2b00      	cmp	r3, #0
 800b654:	d009      	beq.n	800b66a <HAL_UART_IRQHandler+0x66>
 800b656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b65a:	f003 0320 	and.w	r3, r3, #32
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d003      	beq.n	800b66a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fd8f 	bl	800c186 <UART_Receive_IT>
      return;
 800b668:	e256      	b.n	800bb18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b66a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 80de 	beq.w	800b830 <HAL_UART_IRQHandler+0x22c>
 800b674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b678:	f003 0301 	and.w	r3, r3, #1
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d106      	bne.n	800b68e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b684:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f000 80d1 	beq.w	800b830 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00b      	beq.n	800b6b2 <HAL_UART_IRQHandler+0xae>
 800b69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b69e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d005      	beq.n	800b6b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6aa:	f043 0201 	orr.w	r2, r3, #1
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b6:	f003 0304 	and.w	r3, r3, #4
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00b      	beq.n	800b6d6 <HAL_UART_IRQHandler+0xd2>
 800b6be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d005      	beq.n	800b6d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ce:	f043 0202 	orr.w	r2, r3, #2
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6da:	f003 0302 	and.w	r3, r3, #2
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00b      	beq.n	800b6fa <HAL_UART_IRQHandler+0xf6>
 800b6e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d005      	beq.n	800b6fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f2:	f043 0204 	orr.w	r2, r3, #4
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6fe:	f003 0308 	and.w	r3, r3, #8
 800b702:	2b00      	cmp	r3, #0
 800b704:	d011      	beq.n	800b72a <HAL_UART_IRQHandler+0x126>
 800b706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b70a:	f003 0320 	and.w	r3, r3, #32
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d105      	bne.n	800b71e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b716:	f003 0301 	and.w	r3, r3, #1
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d005      	beq.n	800b72a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b722:	f043 0208 	orr.w	r2, r3, #8
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 81ed 	beq.w	800bb0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b738:	f003 0320 	and.w	r3, r3, #32
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d008      	beq.n	800b752 <HAL_UART_IRQHandler+0x14e>
 800b740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b744:	f003 0320 	and.w	r3, r3, #32
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d002      	beq.n	800b752 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fd1a 	bl	800c186 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b75c:	2b40      	cmp	r3, #64	; 0x40
 800b75e:	bf0c      	ite	eq
 800b760:	2301      	moveq	r3, #1
 800b762:	2300      	movne	r3, #0
 800b764:	b2db      	uxtb	r3, r3
 800b766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76e:	f003 0308 	and.w	r3, r3, #8
 800b772:	2b00      	cmp	r3, #0
 800b774:	d103      	bne.n	800b77e <HAL_UART_IRQHandler+0x17a>
 800b776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d04f      	beq.n	800b81e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fc22 	bl	800bfc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78e:	2b40      	cmp	r3, #64	; 0x40
 800b790:	d141      	bne.n	800b816 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3314      	adds	r3, #20
 800b798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7a0:	e853 3f00 	ldrex	r3, [r3]
 800b7a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b7a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b7ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3314      	adds	r3, #20
 800b7ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b7be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b7c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b7ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7ce:	e841 2300 	strex	r3, r2, [r1]
 800b7d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b7d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1d9      	bne.n	800b792 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d013      	beq.n	800b80e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ea:	4a7d      	ldr	r2, [pc, #500]	; (800b9e0 <HAL_UART_IRQHandler+0x3dc>)
 800b7ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fb fa20 	bl	8006c38 <HAL_DMA_Abort_IT>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d016      	beq.n	800b82c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b808:	4610      	mov	r0, r2
 800b80a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b80c:	e00e      	b.n	800b82c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f9ae 	bl	800bb70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b814:	e00a      	b.n	800b82c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f9aa 	bl	800bb70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b81c:	e006      	b.n	800b82c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f9a6 	bl	800bb70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b82a:	e170      	b.n	800bb0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b82c:	bf00      	nop
    return;
 800b82e:	e16e      	b.n	800bb0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b834:	2b01      	cmp	r3, #1
 800b836:	f040 814a 	bne.w	800bace <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b83a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b83e:	f003 0310 	and.w	r3, r3, #16
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 8143 	beq.w	800bace <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b84c:	f003 0310 	and.w	r3, r3, #16
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 813c 	beq.w	800bace <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b856:	2300      	movs	r3, #0
 800b858:	60bb      	str	r3, [r7, #8]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	60bb      	str	r3, [r7, #8]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	60bb      	str	r3, [r7, #8]
 800b86a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b876:	2b40      	cmp	r3, #64	; 0x40
 800b878:	f040 80b4 	bne.w	800b9e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 8140 	beq.w	800bb12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b89a:	429a      	cmp	r2, r3
 800b89c:	f080 8139 	bcs.w	800bb12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ac:	69db      	ldr	r3, [r3, #28]
 800b8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8b2:	f000 8088 	beq.w	800b9c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	330c      	adds	r3, #12
 800b8bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8c4:	e853 3f00 	ldrex	r3, [r3]
 800b8c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b8cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	330c      	adds	r3, #12
 800b8de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b8e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b8e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b8ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8f2:	e841 2300 	strex	r3, r2, [r1]
 800b8f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b8fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1d9      	bne.n	800b8b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	3314      	adds	r3, #20
 800b908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b90c:	e853 3f00 	ldrex	r3, [r3]
 800b910:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b914:	f023 0301 	bic.w	r3, r3, #1
 800b918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	3314      	adds	r3, #20
 800b922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b926:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b92a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b92e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b932:	e841 2300 	strex	r3, r2, [r1]
 800b936:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e1      	bne.n	800b902 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3314      	adds	r3, #20
 800b944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b948:	e853 3f00 	ldrex	r3, [r3]
 800b94c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b94e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3314      	adds	r3, #20
 800b95e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b962:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b964:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b966:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b968:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b96a:	e841 2300 	strex	r3, r2, [r1]
 800b96e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1e3      	bne.n	800b93e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2220      	movs	r2, #32
 800b97a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	330c      	adds	r3, #12
 800b98a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b98e:	e853 3f00 	ldrex	r3, [r3]
 800b992:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b996:	f023 0310 	bic.w	r3, r3, #16
 800b99a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	330c      	adds	r3, #12
 800b9a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b9a8:	65ba      	str	r2, [r7, #88]	; 0x58
 800b9aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9b0:	e841 2300 	strex	r3, r2, [r1]
 800b9b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e3      	bne.n	800b984 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fb f8c9 	bl	8006b58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f8d4 	bl	800bb84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b9dc:	e099      	b.n	800bb12 <HAL_UART_IRQHandler+0x50e>
 800b9de:	bf00      	nop
 800b9e0:	0800c08f 	.word	0x0800c08f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 808b 	beq.w	800bb16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ba00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 8086 	beq.w	800bb16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	330c      	adds	r3, #12
 800ba10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba14:	e853 3f00 	ldrex	r3, [r3]
 800ba18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	330c      	adds	r3, #12
 800ba2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ba2e:	647a      	str	r2, [r7, #68]	; 0x44
 800ba30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1e3      	bne.n	800ba0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3314      	adds	r3, #20
 800ba48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	e853 3f00 	ldrex	r3, [r3]
 800ba50:	623b      	str	r3, [r7, #32]
   return(result);
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	f023 0301 	bic.w	r3, r3, #1
 800ba58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3314      	adds	r3, #20
 800ba62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba66:	633a      	str	r2, [r7, #48]	; 0x30
 800ba68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba6e:	e841 2300 	strex	r3, r2, [r1]
 800ba72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1e3      	bne.n	800ba42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	330c      	adds	r3, #12
 800ba8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	e853 3f00 	ldrex	r3, [r3]
 800ba96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f023 0310 	bic.w	r3, r3, #16
 800ba9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	330c      	adds	r3, #12
 800baa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800baac:	61fa      	str	r2, [r7, #28]
 800baae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab0:	69b9      	ldr	r1, [r7, #24]
 800bab2:	69fa      	ldr	r2, [r7, #28]
 800bab4:	e841 2300 	strex	r3, r2, [r1]
 800bab8:	617b      	str	r3, [r7, #20]
   return(result);
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e3      	bne.n	800ba88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bac4:	4619      	mov	r1, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f85c 	bl	800bb84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bacc:	e023      	b.n	800bb16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d009      	beq.n	800baee <HAL_UART_IRQHandler+0x4ea>
 800bada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d003      	beq.n	800baee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fae5 	bl	800c0b6 <UART_Transmit_IT>
    return;
 800baec:	e014      	b.n	800bb18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800baee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00e      	beq.n	800bb18 <HAL_UART_IRQHandler+0x514>
 800bafa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d008      	beq.n	800bb18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fb25 	bl	800c156 <UART_EndTransmit_IT>
    return;
 800bb0c:	e004      	b.n	800bb18 <HAL_UART_IRQHandler+0x514>
    return;
 800bb0e:	bf00      	nop
 800bb10:	e002      	b.n	800bb18 <HAL_UART_IRQHandler+0x514>
      return;
 800bb12:	bf00      	nop
 800bb14:	e000      	b.n	800bb18 <HAL_UART_IRQHandler+0x514>
      return;
 800bb16:	bf00      	nop
  }
}
 800bb18:	37e8      	adds	r7, #232	; 0xe8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop

0800bb20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb90:	bf00      	nop
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b090      	sub	sp, #64	; 0x40
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d137      	bne.n	800bc28 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bbb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbba:	2200      	movs	r2, #0
 800bbbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3314      	adds	r3, #20
 800bbc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	e853 3f00 	ldrex	r3, [r3]
 800bbcc:	623b      	str	r3, [r7, #32]
   return(result);
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbd4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3314      	adds	r3, #20
 800bbdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbde:	633a      	str	r2, [r7, #48]	; 0x30
 800bbe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbe6:	e841 2300 	strex	r3, r2, [r1]
 800bbea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1e5      	bne.n	800bbbe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	330c      	adds	r3, #12
 800bbf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	e853 3f00 	ldrex	r3, [r3]
 800bc00:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc08:	637b      	str	r3, [r7, #52]	; 0x34
 800bc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	330c      	adds	r3, #12
 800bc10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc12:	61fa      	str	r2, [r7, #28]
 800bc14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc16:	69b9      	ldr	r1, [r7, #24]
 800bc18:	69fa      	ldr	r2, [r7, #28]
 800bc1a:	e841 2300 	strex	r3, r2, [r1]
 800bc1e:	617b      	str	r3, [r7, #20]
   return(result);
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e5      	bne.n	800bbf2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc26:	e002      	b.n	800bc2e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bc28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc2a:	f7ff ff79 	bl	800bb20 <HAL_UART_TxCpltCallback>
}
 800bc2e:	bf00      	nop
 800bc30:	3740      	adds	r7, #64	; 0x40
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f7ff ff75 	bl	800bb34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc4a:	bf00      	nop
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b09c      	sub	sp, #112	; 0x70
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d172      	bne.n	800bd54 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bc6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc70:	2200      	movs	r2, #0
 800bc72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	330c      	adds	r3, #12
 800bc7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc7e:	e853 3f00 	ldrex	r3, [r3]
 800bc82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	330c      	adds	r3, #12
 800bc92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc94:	65ba      	str	r2, [r7, #88]	; 0x58
 800bc96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc9c:	e841 2300 	strex	r3, r2, [r1]
 800bca0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1e5      	bne.n	800bc74 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3314      	adds	r3, #20
 800bcae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb2:	e853 3f00 	ldrex	r3, [r3]
 800bcb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bcb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcba:	f023 0301 	bic.w	r3, r3, #1
 800bcbe:	667b      	str	r3, [r7, #100]	; 0x64
 800bcc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcc8:	647a      	str	r2, [r7, #68]	; 0x44
 800bcca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bcce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcd0:	e841 2300 	strex	r3, r2, [r1]
 800bcd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bcd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e5      	bne.n	800bca8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	3314      	adds	r3, #20
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	e853 3f00 	ldrex	r3, [r3]
 800bcea:	623b      	str	r3, [r7, #32]
   return(result);
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcf2:	663b      	str	r3, [r7, #96]	; 0x60
 800bcf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3314      	adds	r3, #20
 800bcfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcfc:	633a      	str	r2, [r7, #48]	; 0x30
 800bcfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd04:	e841 2300 	strex	r3, r2, [r1]
 800bd08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1e5      	bne.n	800bcdc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bd10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd12:	2220      	movs	r2, #32
 800bd14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d119      	bne.n	800bd54 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	330c      	adds	r3, #12
 800bd26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	e853 3f00 	ldrex	r3, [r3]
 800bd2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f023 0310 	bic.w	r3, r3, #16
 800bd36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	330c      	adds	r3, #12
 800bd3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd40:	61fa      	str	r2, [r7, #28]
 800bd42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd44:	69b9      	ldr	r1, [r7, #24]
 800bd46:	69fa      	ldr	r2, [r7, #28]
 800bd48:	e841 2300 	strex	r3, r2, [r1]
 800bd4c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1e5      	bne.n	800bd20 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d106      	bne.n	800bd6a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bd60:	4619      	mov	r1, r3
 800bd62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bd64:	f7ff ff0e 	bl	800bb84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd68:	e002      	b.n	800bd70 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800bd6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bd6c:	f7ff feec 	bl	800bb48 <HAL_UART_RxCpltCallback>
}
 800bd70:	bf00      	nop
 800bd72:	3770      	adds	r7, #112	; 0x70
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd84:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d108      	bne.n	800bda0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bd92:	085b      	lsrs	r3, r3, #1
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	4619      	mov	r1, r3
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7ff fef3 	bl	800bb84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd9e:	e002      	b.n	800bda6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f7ff fedb 	bl	800bb5c <HAL_UART_RxHalfCpltCallback>
}
 800bda6:	bf00      	nop
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b084      	sub	sp, #16
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdbe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdca:	2b80      	cmp	r3, #128	; 0x80
 800bdcc:	bf0c      	ite	eq
 800bdce:	2301      	moveq	r3, #1
 800bdd0:	2300      	movne	r3, #0
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b21      	cmp	r3, #33	; 0x21
 800bde0:	d108      	bne.n	800bdf4 <UART_DMAError+0x46>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d005      	beq.n	800bdf4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2200      	movs	r2, #0
 800bdec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bdee:	68b8      	ldr	r0, [r7, #8]
 800bdf0:	f000 f8c2 	bl	800bf78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	695b      	ldr	r3, [r3, #20]
 800bdfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdfe:	2b40      	cmp	r3, #64	; 0x40
 800be00:	bf0c      	ite	eq
 800be02:	2301      	moveq	r3, #1
 800be04:	2300      	movne	r3, #0
 800be06:	b2db      	uxtb	r3, r3
 800be08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b22      	cmp	r3, #34	; 0x22
 800be14:	d108      	bne.n	800be28 <UART_DMAError+0x7a>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d005      	beq.n	800be28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	2200      	movs	r2, #0
 800be20:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800be22:	68b8      	ldr	r0, [r7, #8]
 800be24:	f000 f8d0 	bl	800bfc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2c:	f043 0210 	orr.w	r2, r3, #16
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be34:	68b8      	ldr	r0, [r7, #8]
 800be36:	f7ff fe9b 	bl	800bb70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be3a:	bf00      	nop
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
	...

0800be44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b098      	sub	sp, #96	; 0x60
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4613      	mov	r3, r2
 800be50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	88fa      	ldrh	r2, [r7, #6]
 800be5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2222      	movs	r2, #34	; 0x22
 800be68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be70:	4a3e      	ldr	r2, [pc, #248]	; (800bf6c <UART_Start_Receive_DMA+0x128>)
 800be72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be78:	4a3d      	ldr	r2, [pc, #244]	; (800bf70 <UART_Start_Receive_DMA+0x12c>)
 800be7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be80:	4a3c      	ldr	r2, [pc, #240]	; (800bf74 <UART_Start_Receive_DMA+0x130>)
 800be82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be88:	2200      	movs	r2, #0
 800be8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800be8c:	f107 0308 	add.w	r3, r7, #8
 800be90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	3304      	adds	r3, #4
 800be9c:	4619      	mov	r1, r3
 800be9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	88fb      	ldrh	r3, [r7, #6]
 800bea4:	f7fa fe00 	bl	8006aa8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bea8:	2300      	movs	r3, #0
 800beaa:	613b      	str	r3, [r7, #16]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	613b      	str	r3, [r7, #16]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	613b      	str	r3, [r7, #16]
 800bebc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	330c      	adds	r3, #12
 800becc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bed0:	e853 3f00 	ldrex	r3, [r3]
 800bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bedc:	65bb      	str	r3, [r7, #88]	; 0x58
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	330c      	adds	r3, #12
 800bee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bee6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bee8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800beec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e5      	bne.n	800bec6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3314      	adds	r3, #20
 800bf00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	e853 3f00 	ldrex	r3, [r3]
 800bf08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	f043 0301 	orr.w	r3, r3, #1
 800bf10:	657b      	str	r3, [r7, #84]	; 0x54
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3314      	adds	r3, #20
 800bf18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf1a:	63ba      	str	r2, [r7, #56]	; 0x38
 800bf1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf22:	e841 2300 	strex	r3, r2, [r1]
 800bf26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1e5      	bne.n	800befa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3314      	adds	r3, #20
 800bf34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	e853 3f00 	ldrex	r3, [r3]
 800bf3c:	617b      	str	r3, [r7, #20]
   return(result);
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf44:	653b      	str	r3, [r7, #80]	; 0x50
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3314      	adds	r3, #20
 800bf4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf4e:	627a      	str	r2, [r7, #36]	; 0x24
 800bf50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf52:	6a39      	ldr	r1, [r7, #32]
 800bf54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf56:	e841 2300 	strex	r3, r2, [r1]
 800bf5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1e5      	bne.n	800bf2e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3760      	adds	r7, #96	; 0x60
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	0800bc53 	.word	0x0800bc53
 800bf70:	0800bd79 	.word	0x0800bd79
 800bf74:	0800bdaf 	.word	0x0800bdaf

0800bf78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b089      	sub	sp, #36	; 0x24
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	330c      	adds	r3, #12
 800bf86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	e853 3f00 	ldrex	r3, [r3]
 800bf8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bf96:	61fb      	str	r3, [r7, #28]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	330c      	adds	r3, #12
 800bf9e:	69fa      	ldr	r2, [r7, #28]
 800bfa0:	61ba      	str	r2, [r7, #24]
 800bfa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa4:	6979      	ldr	r1, [r7, #20]
 800bfa6:	69ba      	ldr	r2, [r7, #24]
 800bfa8:	e841 2300 	strex	r3, r2, [r1]
 800bfac:	613b      	str	r3, [r7, #16]
   return(result);
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1e5      	bne.n	800bf80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bfbc:	bf00      	nop
 800bfbe:	3724      	adds	r7, #36	; 0x24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b095      	sub	sp, #84	; 0x54
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	330c      	adds	r3, #12
 800bfd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfda:	e853 3f00 	ldrex	r3, [r3]
 800bfde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	330c      	adds	r3, #12
 800bfee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bff0:	643a      	str	r2, [r7, #64]	; 0x40
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bff8:	e841 2300 	strex	r3, r2, [r1]
 800bffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e5      	bne.n	800bfd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3314      	adds	r3, #20
 800c00a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	e853 3f00 	ldrex	r3, [r3]
 800c012:	61fb      	str	r3, [r7, #28]
   return(result);
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	f023 0301 	bic.w	r3, r3, #1
 800c01a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3314      	adds	r3, #20
 800c022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c024:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c02a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c02c:	e841 2300 	strex	r3, r2, [r1]
 800c030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1e5      	bne.n	800c004 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d119      	bne.n	800c074 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	330c      	adds	r3, #12
 800c046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	e853 3f00 	ldrex	r3, [r3]
 800c04e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	f023 0310 	bic.w	r3, r3, #16
 800c056:	647b      	str	r3, [r7, #68]	; 0x44
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	330c      	adds	r3, #12
 800c05e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c060:	61ba      	str	r2, [r7, #24]
 800c062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c064:	6979      	ldr	r1, [r7, #20]
 800c066:	69ba      	ldr	r2, [r7, #24]
 800c068:	e841 2300 	strex	r3, r2, [r1]
 800c06c:	613b      	str	r3, [r7, #16]
   return(result);
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1e5      	bne.n	800c040 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2220      	movs	r2, #32
 800c078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c082:	bf00      	nop
 800c084:	3754      	adds	r7, #84	; 0x54
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f7ff fd61 	bl	800bb70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0ae:	bf00      	nop
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b085      	sub	sp, #20
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b21      	cmp	r3, #33	; 0x21
 800c0c8:	d13e      	bne.n	800c148 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d2:	d114      	bne.n	800c0fe <UART_Transmit_IT+0x48>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d110      	bne.n	800c0fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	881b      	ldrh	r3, [r3, #0]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a1b      	ldr	r3, [r3, #32]
 800c0f6:	1c9a      	adds	r2, r3, #2
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	621a      	str	r2, [r3, #32]
 800c0fc:	e008      	b.n	800c110 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	1c59      	adds	r1, r3, #1
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	6211      	str	r1, [r2, #32]
 800c108:	781a      	ldrb	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c114:	b29b      	uxth	r3, r3
 800c116:	3b01      	subs	r3, #1
 800c118:	b29b      	uxth	r3, r3
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	4619      	mov	r1, r3
 800c11e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10f      	bne.n	800c144 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68da      	ldr	r2, [r3, #12]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c132:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68da      	ldr	r2, [r3, #12]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c142:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c144:	2300      	movs	r3, #0
 800c146:	e000      	b.n	800c14a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c148:	2302      	movs	r3, #2
  }
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68da      	ldr	r2, [r3, #12]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c16c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2220      	movs	r2, #32
 800c172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7ff fcd2 	bl	800bb20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b08c      	sub	sp, #48	; 0x30
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b22      	cmp	r3, #34	; 0x22
 800c198:	f040 80ab 	bne.w	800c2f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1a4:	d117      	bne.n	800c1d6 <UART_Receive_IT+0x50>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d113      	bne.n	800c1d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ce:	1c9a      	adds	r2, r3, #2
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	629a      	str	r2, [r3, #40]	; 0x28
 800c1d4:	e026      	b.n	800c224 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1e8:	d007      	beq.n	800c1fa <UART_Receive_IT+0x74>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10a      	bne.n	800c208 <UART_Receive_IT+0x82>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	b2da      	uxtb	r2, r3
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	701a      	strb	r2, [r3, #0]
 800c206:	e008      	b.n	800c21a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c214:	b2da      	uxtb	r2, r3
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c228:	b29b      	uxth	r3, r3
 800c22a:	3b01      	subs	r3, #1
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	4619      	mov	r1, r3
 800c232:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c234:	2b00      	cmp	r3, #0
 800c236:	d15a      	bne.n	800c2ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68da      	ldr	r2, [r3, #12]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f022 0220 	bic.w	r2, r2, #32
 800c246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68da      	ldr	r2, [r3, #12]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	695a      	ldr	r2, [r3, #20]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f022 0201 	bic.w	r2, r2, #1
 800c266:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2220      	movs	r2, #32
 800c26c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c274:	2b01      	cmp	r3, #1
 800c276:	d135      	bne.n	800c2e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	330c      	adds	r3, #12
 800c284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	e853 3f00 	ldrex	r3, [r3]
 800c28c:	613b      	str	r3, [r7, #16]
   return(result);
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	f023 0310 	bic.w	r3, r3, #16
 800c294:	627b      	str	r3, [r7, #36]	; 0x24
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	330c      	adds	r3, #12
 800c29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c29e:	623a      	str	r2, [r7, #32]
 800c2a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a2:	69f9      	ldr	r1, [r7, #28]
 800c2a4:	6a3a      	ldr	r2, [r7, #32]
 800c2a6:	e841 2300 	strex	r3, r2, [r1]
 800c2aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1e5      	bne.n	800c27e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0310 	and.w	r3, r3, #16
 800c2bc:	2b10      	cmp	r3, #16
 800c2be:	d10a      	bne.n	800c2d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	60fb      	str	r3, [r7, #12]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	60fb      	str	r3, [r7, #12]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7ff fc51 	bl	800bb84 <HAL_UARTEx_RxEventCallback>
 800c2e2:	e002      	b.n	800c2ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7ff fc2f 	bl	800bb48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e002      	b.n	800c2f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e000      	b.n	800c2f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c2f2:	2302      	movs	r3, #2
  }
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3730      	adds	r7, #48	; 0x30
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c300:	b09f      	sub	sp, #124	; 0x7c
 800c302:	af00      	add	r7, sp, #0
 800c304:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c312:	68d9      	ldr	r1, [r3, #12]
 800c314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	ea40 0301 	orr.w	r3, r0, r1
 800c31c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c320:	689a      	ldr	r2, [r3, #8]
 800c322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	431a      	orrs	r2, r3
 800c328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c32a:	695b      	ldr	r3, [r3, #20]
 800c32c:	431a      	orrs	r2, r3
 800c32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c330:	69db      	ldr	r3, [r3, #28]
 800c332:	4313      	orrs	r3, r2
 800c334:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c340:	f021 010c 	bic.w	r1, r1, #12
 800c344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c34a:	430b      	orrs	r3, r1
 800c34c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c34e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c35a:	6999      	ldr	r1, [r3, #24]
 800c35c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	ea40 0301 	orr.w	r3, r0, r1
 800c364:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	4bc5      	ldr	r3, [pc, #788]	; (800c680 <UART_SetConfig+0x384>)
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d004      	beq.n	800c37a <UART_SetConfig+0x7e>
 800c370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	4bc3      	ldr	r3, [pc, #780]	; (800c684 <UART_SetConfig+0x388>)
 800c376:	429a      	cmp	r2, r3
 800c378:	d103      	bne.n	800c382 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c37a:	f7fe f979 	bl	800a670 <HAL_RCC_GetPCLK2Freq>
 800c37e:	6778      	str	r0, [r7, #116]	; 0x74
 800c380:	e002      	b.n	800c388 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c382:	f7fe f961 	bl	800a648 <HAL_RCC_GetPCLK1Freq>
 800c386:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c38a:	69db      	ldr	r3, [r3, #28]
 800c38c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c390:	f040 80b6 	bne.w	800c500 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c396:	461c      	mov	r4, r3
 800c398:	f04f 0500 	mov.w	r5, #0
 800c39c:	4622      	mov	r2, r4
 800c39e:	462b      	mov	r3, r5
 800c3a0:	1891      	adds	r1, r2, r2
 800c3a2:	6439      	str	r1, [r7, #64]	; 0x40
 800c3a4:	415b      	adcs	r3, r3
 800c3a6:	647b      	str	r3, [r7, #68]	; 0x44
 800c3a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c3ac:	1912      	adds	r2, r2, r4
 800c3ae:	eb45 0303 	adc.w	r3, r5, r3
 800c3b2:	f04f 0000 	mov.w	r0, #0
 800c3b6:	f04f 0100 	mov.w	r1, #0
 800c3ba:	00d9      	lsls	r1, r3, #3
 800c3bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c3c0:	00d0      	lsls	r0, r2, #3
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	1911      	adds	r1, r2, r4
 800c3c8:	6639      	str	r1, [r7, #96]	; 0x60
 800c3ca:	416b      	adcs	r3, r5
 800c3cc:	667b      	str	r3, [r7, #100]	; 0x64
 800c3ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	f04f 0300 	mov.w	r3, #0
 800c3d8:	1891      	adds	r1, r2, r2
 800c3da:	63b9      	str	r1, [r7, #56]	; 0x38
 800c3dc:	415b      	adcs	r3, r3
 800c3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c3e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c3e8:	f7f4 fc66 	bl	8000cb8 <__aeabi_uldivmod>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	4ba5      	ldr	r3, [pc, #660]	; (800c688 <UART_SetConfig+0x38c>)
 800c3f2:	fba3 2302 	umull	r2, r3, r3, r2
 800c3f6:	095b      	lsrs	r3, r3, #5
 800c3f8:	011e      	lsls	r6, r3, #4
 800c3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3fc:	461c      	mov	r4, r3
 800c3fe:	f04f 0500 	mov.w	r5, #0
 800c402:	4622      	mov	r2, r4
 800c404:	462b      	mov	r3, r5
 800c406:	1891      	adds	r1, r2, r2
 800c408:	6339      	str	r1, [r7, #48]	; 0x30
 800c40a:	415b      	adcs	r3, r3
 800c40c:	637b      	str	r3, [r7, #52]	; 0x34
 800c40e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c412:	1912      	adds	r2, r2, r4
 800c414:	eb45 0303 	adc.w	r3, r5, r3
 800c418:	f04f 0000 	mov.w	r0, #0
 800c41c:	f04f 0100 	mov.w	r1, #0
 800c420:	00d9      	lsls	r1, r3, #3
 800c422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c426:	00d0      	lsls	r0, r2, #3
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	1911      	adds	r1, r2, r4
 800c42e:	65b9      	str	r1, [r7, #88]	; 0x58
 800c430:	416b      	adcs	r3, r5
 800c432:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	461a      	mov	r2, r3
 800c43a:	f04f 0300 	mov.w	r3, #0
 800c43e:	1891      	adds	r1, r2, r2
 800c440:	62b9      	str	r1, [r7, #40]	; 0x28
 800c442:	415b      	adcs	r3, r3
 800c444:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c44a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c44e:	f7f4 fc33 	bl	8000cb8 <__aeabi_uldivmod>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4b8c      	ldr	r3, [pc, #560]	; (800c688 <UART_SetConfig+0x38c>)
 800c458:	fba3 1302 	umull	r1, r3, r3, r2
 800c45c:	095b      	lsrs	r3, r3, #5
 800c45e:	2164      	movs	r1, #100	; 0x64
 800c460:	fb01 f303 	mul.w	r3, r1, r3
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	00db      	lsls	r3, r3, #3
 800c468:	3332      	adds	r3, #50	; 0x32
 800c46a:	4a87      	ldr	r2, [pc, #540]	; (800c688 <UART_SetConfig+0x38c>)
 800c46c:	fba2 2303 	umull	r2, r3, r2, r3
 800c470:	095b      	lsrs	r3, r3, #5
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c478:	441e      	add	r6, r3
 800c47a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c47c:	4618      	mov	r0, r3
 800c47e:	f04f 0100 	mov.w	r1, #0
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	1894      	adds	r4, r2, r2
 800c488:	623c      	str	r4, [r7, #32]
 800c48a:	415b      	adcs	r3, r3
 800c48c:	627b      	str	r3, [r7, #36]	; 0x24
 800c48e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c492:	1812      	adds	r2, r2, r0
 800c494:	eb41 0303 	adc.w	r3, r1, r3
 800c498:	f04f 0400 	mov.w	r4, #0
 800c49c:	f04f 0500 	mov.w	r5, #0
 800c4a0:	00dd      	lsls	r5, r3, #3
 800c4a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c4a6:	00d4      	lsls	r4, r2, #3
 800c4a8:	4622      	mov	r2, r4
 800c4aa:	462b      	mov	r3, r5
 800c4ac:	1814      	adds	r4, r2, r0
 800c4ae:	653c      	str	r4, [r7, #80]	; 0x50
 800c4b0:	414b      	adcs	r3, r1
 800c4b2:	657b      	str	r3, [r7, #84]	; 0x54
 800c4b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	f04f 0300 	mov.w	r3, #0
 800c4be:	1891      	adds	r1, r2, r2
 800c4c0:	61b9      	str	r1, [r7, #24]
 800c4c2:	415b      	adcs	r3, r3
 800c4c4:	61fb      	str	r3, [r7, #28]
 800c4c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c4ce:	f7f4 fbf3 	bl	8000cb8 <__aeabi_uldivmod>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4b6c      	ldr	r3, [pc, #432]	; (800c688 <UART_SetConfig+0x38c>)
 800c4d8:	fba3 1302 	umull	r1, r3, r3, r2
 800c4dc:	095b      	lsrs	r3, r3, #5
 800c4de:	2164      	movs	r1, #100	; 0x64
 800c4e0:	fb01 f303 	mul.w	r3, r1, r3
 800c4e4:	1ad3      	subs	r3, r2, r3
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	3332      	adds	r3, #50	; 0x32
 800c4ea:	4a67      	ldr	r2, [pc, #412]	; (800c688 <UART_SetConfig+0x38c>)
 800c4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f0:	095b      	lsrs	r3, r3, #5
 800c4f2:	f003 0207 	and.w	r2, r3, #7
 800c4f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4432      	add	r2, r6
 800c4fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c4fe:	e0b9      	b.n	800c674 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c502:	461c      	mov	r4, r3
 800c504:	f04f 0500 	mov.w	r5, #0
 800c508:	4622      	mov	r2, r4
 800c50a:	462b      	mov	r3, r5
 800c50c:	1891      	adds	r1, r2, r2
 800c50e:	6139      	str	r1, [r7, #16]
 800c510:	415b      	adcs	r3, r3
 800c512:	617b      	str	r3, [r7, #20]
 800c514:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c518:	1912      	adds	r2, r2, r4
 800c51a:	eb45 0303 	adc.w	r3, r5, r3
 800c51e:	f04f 0000 	mov.w	r0, #0
 800c522:	f04f 0100 	mov.w	r1, #0
 800c526:	00d9      	lsls	r1, r3, #3
 800c528:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c52c:	00d0      	lsls	r0, r2, #3
 800c52e:	4602      	mov	r2, r0
 800c530:	460b      	mov	r3, r1
 800c532:	eb12 0804 	adds.w	r8, r2, r4
 800c536:	eb43 0905 	adc.w	r9, r3, r5
 800c53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	4618      	mov	r0, r3
 800c540:	f04f 0100 	mov.w	r1, #0
 800c544:	f04f 0200 	mov.w	r2, #0
 800c548:	f04f 0300 	mov.w	r3, #0
 800c54c:	008b      	lsls	r3, r1, #2
 800c54e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c552:	0082      	lsls	r2, r0, #2
 800c554:	4640      	mov	r0, r8
 800c556:	4649      	mov	r1, r9
 800c558:	f7f4 fbae 	bl	8000cb8 <__aeabi_uldivmod>
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	4b49      	ldr	r3, [pc, #292]	; (800c688 <UART_SetConfig+0x38c>)
 800c562:	fba3 2302 	umull	r2, r3, r3, r2
 800c566:	095b      	lsrs	r3, r3, #5
 800c568:	011e      	lsls	r6, r3, #4
 800c56a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c56c:	4618      	mov	r0, r3
 800c56e:	f04f 0100 	mov.w	r1, #0
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	1894      	adds	r4, r2, r2
 800c578:	60bc      	str	r4, [r7, #8]
 800c57a:	415b      	adcs	r3, r3
 800c57c:	60fb      	str	r3, [r7, #12]
 800c57e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c582:	1812      	adds	r2, r2, r0
 800c584:	eb41 0303 	adc.w	r3, r1, r3
 800c588:	f04f 0400 	mov.w	r4, #0
 800c58c:	f04f 0500 	mov.w	r5, #0
 800c590:	00dd      	lsls	r5, r3, #3
 800c592:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c596:	00d4      	lsls	r4, r2, #3
 800c598:	4622      	mov	r2, r4
 800c59a:	462b      	mov	r3, r5
 800c59c:	1814      	adds	r4, r2, r0
 800c59e:	64bc      	str	r4, [r7, #72]	; 0x48
 800c5a0:	414b      	adcs	r3, r1
 800c5a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f04f 0100 	mov.w	r1, #0
 800c5ae:	f04f 0200 	mov.w	r2, #0
 800c5b2:	f04f 0300 	mov.w	r3, #0
 800c5b6:	008b      	lsls	r3, r1, #2
 800c5b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c5bc:	0082      	lsls	r2, r0, #2
 800c5be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c5c2:	f7f4 fb79 	bl	8000cb8 <__aeabi_uldivmod>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4b2f      	ldr	r3, [pc, #188]	; (800c688 <UART_SetConfig+0x38c>)
 800c5cc:	fba3 1302 	umull	r1, r3, r3, r2
 800c5d0:	095b      	lsrs	r3, r3, #5
 800c5d2:	2164      	movs	r1, #100	; 0x64
 800c5d4:	fb01 f303 	mul.w	r3, r1, r3
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	011b      	lsls	r3, r3, #4
 800c5dc:	3332      	adds	r3, #50	; 0x32
 800c5de:	4a2a      	ldr	r2, [pc, #168]	; (800c688 <UART_SetConfig+0x38c>)
 800c5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e4:	095b      	lsrs	r3, r3, #5
 800c5e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5ea:	441e      	add	r6, r3
 800c5ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f04f 0100 	mov.w	r1, #0
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	1894      	adds	r4, r2, r2
 800c5fa:	603c      	str	r4, [r7, #0]
 800c5fc:	415b      	adcs	r3, r3
 800c5fe:	607b      	str	r3, [r7, #4]
 800c600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c604:	1812      	adds	r2, r2, r0
 800c606:	eb41 0303 	adc.w	r3, r1, r3
 800c60a:	f04f 0400 	mov.w	r4, #0
 800c60e:	f04f 0500 	mov.w	r5, #0
 800c612:	00dd      	lsls	r5, r3, #3
 800c614:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c618:	00d4      	lsls	r4, r2, #3
 800c61a:	4622      	mov	r2, r4
 800c61c:	462b      	mov	r3, r5
 800c61e:	eb12 0a00 	adds.w	sl, r2, r0
 800c622:	eb43 0b01 	adc.w	fp, r3, r1
 800c626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f04f 0100 	mov.w	r1, #0
 800c630:	f04f 0200 	mov.w	r2, #0
 800c634:	f04f 0300 	mov.w	r3, #0
 800c638:	008b      	lsls	r3, r1, #2
 800c63a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c63e:	0082      	lsls	r2, r0, #2
 800c640:	4650      	mov	r0, sl
 800c642:	4659      	mov	r1, fp
 800c644:	f7f4 fb38 	bl	8000cb8 <__aeabi_uldivmod>
 800c648:	4602      	mov	r2, r0
 800c64a:	460b      	mov	r3, r1
 800c64c:	4b0e      	ldr	r3, [pc, #56]	; (800c688 <UART_SetConfig+0x38c>)
 800c64e:	fba3 1302 	umull	r1, r3, r3, r2
 800c652:	095b      	lsrs	r3, r3, #5
 800c654:	2164      	movs	r1, #100	; 0x64
 800c656:	fb01 f303 	mul.w	r3, r1, r3
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	011b      	lsls	r3, r3, #4
 800c65e:	3332      	adds	r3, #50	; 0x32
 800c660:	4a09      	ldr	r2, [pc, #36]	; (800c688 <UART_SetConfig+0x38c>)
 800c662:	fba2 2303 	umull	r2, r3, r2, r3
 800c666:	095b      	lsrs	r3, r3, #5
 800c668:	f003 020f 	and.w	r2, r3, #15
 800c66c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4432      	add	r2, r6
 800c672:	609a      	str	r2, [r3, #8]
}
 800c674:	bf00      	nop
 800c676:	377c      	adds	r7, #124	; 0x7c
 800c678:	46bd      	mov	sp, r7
 800c67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67e:	bf00      	nop
 800c680:	40011000 	.word	0x40011000
 800c684:	40011400 	.word	0x40011400
 800c688:	51eb851f 	.word	0x51eb851f

0800c68c <atof>:
 800c68c:	2100      	movs	r1, #0
 800c68e:	f001 bd03 	b.w	800e098 <strtod>

0800c692 <atoi>:
 800c692:	220a      	movs	r2, #10
 800c694:	2100      	movs	r1, #0
 800c696:	f001 bded 	b.w	800e274 <strtol>
	...

0800c69c <__errno>:
 800c69c:	4b01      	ldr	r3, [pc, #4]	; (800c6a4 <__errno+0x8>)
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	20000040 	.word	0x20000040

0800c6a8 <__libc_init_array>:
 800c6a8:	b570      	push	{r4, r5, r6, lr}
 800c6aa:	4d0d      	ldr	r5, [pc, #52]	; (800c6e0 <__libc_init_array+0x38>)
 800c6ac:	4c0d      	ldr	r4, [pc, #52]	; (800c6e4 <__libc_init_array+0x3c>)
 800c6ae:	1b64      	subs	r4, r4, r5
 800c6b0:	10a4      	asrs	r4, r4, #2
 800c6b2:	2600      	movs	r6, #0
 800c6b4:	42a6      	cmp	r6, r4
 800c6b6:	d109      	bne.n	800c6cc <__libc_init_array+0x24>
 800c6b8:	4d0b      	ldr	r5, [pc, #44]	; (800c6e8 <__libc_init_array+0x40>)
 800c6ba:	4c0c      	ldr	r4, [pc, #48]	; (800c6ec <__libc_init_array+0x44>)
 800c6bc:	f004 fcb6 	bl	801102c <_init>
 800c6c0:	1b64      	subs	r4, r4, r5
 800c6c2:	10a4      	asrs	r4, r4, #2
 800c6c4:	2600      	movs	r6, #0
 800c6c6:	42a6      	cmp	r6, r4
 800c6c8:	d105      	bne.n	800c6d6 <__libc_init_array+0x2e>
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6d0:	4798      	blx	r3
 800c6d2:	3601      	adds	r6, #1
 800c6d4:	e7ee      	b.n	800c6b4 <__libc_init_array+0xc>
 800c6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6da:	4798      	blx	r3
 800c6dc:	3601      	adds	r6, #1
 800c6de:	e7f2      	b.n	800c6c6 <__libc_init_array+0x1e>
 800c6e0:	08024c10 	.word	0x08024c10
 800c6e4:	08024c10 	.word	0x08024c10
 800c6e8:	08024c10 	.word	0x08024c10
 800c6ec:	08024c14 	.word	0x08024c14

0800c6f0 <memset>:
 800c6f0:	4402      	add	r2, r0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d100      	bne.n	800c6fa <memset+0xa>
 800c6f8:	4770      	bx	lr
 800c6fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c6fe:	e7f9      	b.n	800c6f4 <memset+0x4>

0800c700 <__cvt>:
 800c700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c704:	ec55 4b10 	vmov	r4, r5, d0
 800c708:	2d00      	cmp	r5, #0
 800c70a:	460e      	mov	r6, r1
 800c70c:	4619      	mov	r1, r3
 800c70e:	462b      	mov	r3, r5
 800c710:	bfbb      	ittet	lt
 800c712:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c716:	461d      	movlt	r5, r3
 800c718:	2300      	movge	r3, #0
 800c71a:	232d      	movlt	r3, #45	; 0x2d
 800c71c:	700b      	strb	r3, [r1, #0]
 800c71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c720:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c724:	4691      	mov	r9, r2
 800c726:	f023 0820 	bic.w	r8, r3, #32
 800c72a:	bfbc      	itt	lt
 800c72c:	4622      	movlt	r2, r4
 800c72e:	4614      	movlt	r4, r2
 800c730:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c734:	d005      	beq.n	800c742 <__cvt+0x42>
 800c736:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c73a:	d100      	bne.n	800c73e <__cvt+0x3e>
 800c73c:	3601      	adds	r6, #1
 800c73e:	2102      	movs	r1, #2
 800c740:	e000      	b.n	800c744 <__cvt+0x44>
 800c742:	2103      	movs	r1, #3
 800c744:	ab03      	add	r3, sp, #12
 800c746:	9301      	str	r3, [sp, #4]
 800c748:	ab02      	add	r3, sp, #8
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	ec45 4b10 	vmov	d0, r4, r5
 800c750:	4653      	mov	r3, sl
 800c752:	4632      	mov	r2, r6
 800c754:	f001 fe44 	bl	800e3e0 <_dtoa_r>
 800c758:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c75c:	4607      	mov	r7, r0
 800c75e:	d102      	bne.n	800c766 <__cvt+0x66>
 800c760:	f019 0f01 	tst.w	r9, #1
 800c764:	d022      	beq.n	800c7ac <__cvt+0xac>
 800c766:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c76a:	eb07 0906 	add.w	r9, r7, r6
 800c76e:	d110      	bne.n	800c792 <__cvt+0x92>
 800c770:	783b      	ldrb	r3, [r7, #0]
 800c772:	2b30      	cmp	r3, #48	; 0x30
 800c774:	d10a      	bne.n	800c78c <__cvt+0x8c>
 800c776:	2200      	movs	r2, #0
 800c778:	2300      	movs	r3, #0
 800c77a:	4620      	mov	r0, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	f7f4 f9bb 	bl	8000af8 <__aeabi_dcmpeq>
 800c782:	b918      	cbnz	r0, 800c78c <__cvt+0x8c>
 800c784:	f1c6 0601 	rsb	r6, r6, #1
 800c788:	f8ca 6000 	str.w	r6, [sl]
 800c78c:	f8da 3000 	ldr.w	r3, [sl]
 800c790:	4499      	add	r9, r3
 800c792:	2200      	movs	r2, #0
 800c794:	2300      	movs	r3, #0
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f4 f9ad 	bl	8000af8 <__aeabi_dcmpeq>
 800c79e:	b108      	cbz	r0, 800c7a4 <__cvt+0xa4>
 800c7a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c7a4:	2230      	movs	r2, #48	; 0x30
 800c7a6:	9b03      	ldr	r3, [sp, #12]
 800c7a8:	454b      	cmp	r3, r9
 800c7aa:	d307      	bcc.n	800c7bc <__cvt+0xbc>
 800c7ac:	9b03      	ldr	r3, [sp, #12]
 800c7ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7b0:	1bdb      	subs	r3, r3, r7
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	6013      	str	r3, [r2, #0]
 800c7b6:	b004      	add	sp, #16
 800c7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7bc:	1c59      	adds	r1, r3, #1
 800c7be:	9103      	str	r1, [sp, #12]
 800c7c0:	701a      	strb	r2, [r3, #0]
 800c7c2:	e7f0      	b.n	800c7a6 <__cvt+0xa6>

0800c7c4 <__exponent>:
 800c7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2900      	cmp	r1, #0
 800c7ca:	bfb8      	it	lt
 800c7cc:	4249      	neglt	r1, r1
 800c7ce:	f803 2b02 	strb.w	r2, [r3], #2
 800c7d2:	bfb4      	ite	lt
 800c7d4:	222d      	movlt	r2, #45	; 0x2d
 800c7d6:	222b      	movge	r2, #43	; 0x2b
 800c7d8:	2909      	cmp	r1, #9
 800c7da:	7042      	strb	r2, [r0, #1]
 800c7dc:	dd2a      	ble.n	800c834 <__exponent+0x70>
 800c7de:	f10d 0407 	add.w	r4, sp, #7
 800c7e2:	46a4      	mov	ip, r4
 800c7e4:	270a      	movs	r7, #10
 800c7e6:	46a6      	mov	lr, r4
 800c7e8:	460a      	mov	r2, r1
 800c7ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800c7ee:	fb07 1516 	mls	r5, r7, r6, r1
 800c7f2:	3530      	adds	r5, #48	; 0x30
 800c7f4:	2a63      	cmp	r2, #99	; 0x63
 800c7f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c7fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c7fe:	4631      	mov	r1, r6
 800c800:	dcf1      	bgt.n	800c7e6 <__exponent+0x22>
 800c802:	3130      	adds	r1, #48	; 0x30
 800c804:	f1ae 0502 	sub.w	r5, lr, #2
 800c808:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c80c:	1c44      	adds	r4, r0, #1
 800c80e:	4629      	mov	r1, r5
 800c810:	4561      	cmp	r1, ip
 800c812:	d30a      	bcc.n	800c82a <__exponent+0x66>
 800c814:	f10d 0209 	add.w	r2, sp, #9
 800c818:	eba2 020e 	sub.w	r2, r2, lr
 800c81c:	4565      	cmp	r5, ip
 800c81e:	bf88      	it	hi
 800c820:	2200      	movhi	r2, #0
 800c822:	4413      	add	r3, r2
 800c824:	1a18      	subs	r0, r3, r0
 800c826:	b003      	add	sp, #12
 800c828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c82e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c832:	e7ed      	b.n	800c810 <__exponent+0x4c>
 800c834:	2330      	movs	r3, #48	; 0x30
 800c836:	3130      	adds	r1, #48	; 0x30
 800c838:	7083      	strb	r3, [r0, #2]
 800c83a:	70c1      	strb	r1, [r0, #3]
 800c83c:	1d03      	adds	r3, r0, #4
 800c83e:	e7f1      	b.n	800c824 <__exponent+0x60>

0800c840 <_printf_float>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	ed2d 8b02 	vpush	{d8}
 800c848:	b08d      	sub	sp, #52	; 0x34
 800c84a:	460c      	mov	r4, r1
 800c84c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c850:	4616      	mov	r6, r2
 800c852:	461f      	mov	r7, r3
 800c854:	4605      	mov	r5, r0
 800c856:	f002 ff31 	bl	800f6bc <_localeconv_r>
 800c85a:	f8d0 a000 	ldr.w	sl, [r0]
 800c85e:	4650      	mov	r0, sl
 800c860:	f7f3 fcc8 	bl	80001f4 <strlen>
 800c864:	2300      	movs	r3, #0
 800c866:	930a      	str	r3, [sp, #40]	; 0x28
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	9305      	str	r3, [sp, #20]
 800c86c:	f8d8 3000 	ldr.w	r3, [r8]
 800c870:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c874:	3307      	adds	r3, #7
 800c876:	f023 0307 	bic.w	r3, r3, #7
 800c87a:	f103 0208 	add.w	r2, r3, #8
 800c87e:	f8c8 2000 	str.w	r2, [r8]
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c88a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c88e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c892:	9307      	str	r3, [sp, #28]
 800c894:	f8cd 8018 	str.w	r8, [sp, #24]
 800c898:	ee08 0a10 	vmov	s16, r0
 800c89c:	4b9f      	ldr	r3, [pc, #636]	; (800cb1c <_printf_float+0x2dc>)
 800c89e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a6:	f7f4 f959 	bl	8000b5c <__aeabi_dcmpun>
 800c8aa:	bb88      	cbnz	r0, 800c910 <_printf_float+0xd0>
 800c8ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8b0:	4b9a      	ldr	r3, [pc, #616]	; (800cb1c <_printf_float+0x2dc>)
 800c8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b6:	f7f4 f933 	bl	8000b20 <__aeabi_dcmple>
 800c8ba:	bb48      	cbnz	r0, 800c910 <_printf_float+0xd0>
 800c8bc:	2200      	movs	r2, #0
 800c8be:	2300      	movs	r3, #0
 800c8c0:	4640      	mov	r0, r8
 800c8c2:	4649      	mov	r1, r9
 800c8c4:	f7f4 f922 	bl	8000b0c <__aeabi_dcmplt>
 800c8c8:	b110      	cbz	r0, 800c8d0 <_printf_float+0x90>
 800c8ca:	232d      	movs	r3, #45	; 0x2d
 800c8cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8d0:	4b93      	ldr	r3, [pc, #588]	; (800cb20 <_printf_float+0x2e0>)
 800c8d2:	4894      	ldr	r0, [pc, #592]	; (800cb24 <_printf_float+0x2e4>)
 800c8d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c8d8:	bf94      	ite	ls
 800c8da:	4698      	movls	r8, r3
 800c8dc:	4680      	movhi	r8, r0
 800c8de:	2303      	movs	r3, #3
 800c8e0:	6123      	str	r3, [r4, #16]
 800c8e2:	9b05      	ldr	r3, [sp, #20]
 800c8e4:	f023 0204 	bic.w	r2, r3, #4
 800c8e8:	6022      	str	r2, [r4, #0]
 800c8ea:	f04f 0900 	mov.w	r9, #0
 800c8ee:	9700      	str	r7, [sp, #0]
 800c8f0:	4633      	mov	r3, r6
 800c8f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c8f4:	4621      	mov	r1, r4
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	f000 f9d8 	bl	800ccac <_printf_common>
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	f040 8090 	bne.w	800ca22 <_printf_float+0x1e2>
 800c902:	f04f 30ff 	mov.w	r0, #4294967295
 800c906:	b00d      	add	sp, #52	; 0x34
 800c908:	ecbd 8b02 	vpop	{d8}
 800c90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c910:	4642      	mov	r2, r8
 800c912:	464b      	mov	r3, r9
 800c914:	4640      	mov	r0, r8
 800c916:	4649      	mov	r1, r9
 800c918:	f7f4 f920 	bl	8000b5c <__aeabi_dcmpun>
 800c91c:	b140      	cbz	r0, 800c930 <_printf_float+0xf0>
 800c91e:	464b      	mov	r3, r9
 800c920:	2b00      	cmp	r3, #0
 800c922:	bfbc      	itt	lt
 800c924:	232d      	movlt	r3, #45	; 0x2d
 800c926:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c92a:	487f      	ldr	r0, [pc, #508]	; (800cb28 <_printf_float+0x2e8>)
 800c92c:	4b7f      	ldr	r3, [pc, #508]	; (800cb2c <_printf_float+0x2ec>)
 800c92e:	e7d1      	b.n	800c8d4 <_printf_float+0x94>
 800c930:	6863      	ldr	r3, [r4, #4]
 800c932:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c936:	9206      	str	r2, [sp, #24]
 800c938:	1c5a      	adds	r2, r3, #1
 800c93a:	d13f      	bne.n	800c9bc <_printf_float+0x17c>
 800c93c:	2306      	movs	r3, #6
 800c93e:	6063      	str	r3, [r4, #4]
 800c940:	9b05      	ldr	r3, [sp, #20]
 800c942:	6861      	ldr	r1, [r4, #4]
 800c944:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c948:	2300      	movs	r3, #0
 800c94a:	9303      	str	r3, [sp, #12]
 800c94c:	ab0a      	add	r3, sp, #40	; 0x28
 800c94e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c952:	ab09      	add	r3, sp, #36	; 0x24
 800c954:	ec49 8b10 	vmov	d0, r8, r9
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	6022      	str	r2, [r4, #0]
 800c95c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c960:	4628      	mov	r0, r5
 800c962:	f7ff fecd 	bl	800c700 <__cvt>
 800c966:	9b06      	ldr	r3, [sp, #24]
 800c968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c96a:	2b47      	cmp	r3, #71	; 0x47
 800c96c:	4680      	mov	r8, r0
 800c96e:	d108      	bne.n	800c982 <_printf_float+0x142>
 800c970:	1cc8      	adds	r0, r1, #3
 800c972:	db02      	blt.n	800c97a <_printf_float+0x13a>
 800c974:	6863      	ldr	r3, [r4, #4]
 800c976:	4299      	cmp	r1, r3
 800c978:	dd41      	ble.n	800c9fe <_printf_float+0x1be>
 800c97a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c97e:	fa5f fb8b 	uxtb.w	fp, fp
 800c982:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c986:	d820      	bhi.n	800c9ca <_printf_float+0x18a>
 800c988:	3901      	subs	r1, #1
 800c98a:	465a      	mov	r2, fp
 800c98c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c990:	9109      	str	r1, [sp, #36]	; 0x24
 800c992:	f7ff ff17 	bl	800c7c4 <__exponent>
 800c996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c998:	1813      	adds	r3, r2, r0
 800c99a:	2a01      	cmp	r2, #1
 800c99c:	4681      	mov	r9, r0
 800c99e:	6123      	str	r3, [r4, #16]
 800c9a0:	dc02      	bgt.n	800c9a8 <_printf_float+0x168>
 800c9a2:	6822      	ldr	r2, [r4, #0]
 800c9a4:	07d2      	lsls	r2, r2, #31
 800c9a6:	d501      	bpl.n	800c9ac <_printf_float+0x16c>
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	6123      	str	r3, [r4, #16]
 800c9ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d09c      	beq.n	800c8ee <_printf_float+0xae>
 800c9b4:	232d      	movs	r3, #45	; 0x2d
 800c9b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9ba:	e798      	b.n	800c8ee <_printf_float+0xae>
 800c9bc:	9a06      	ldr	r2, [sp, #24]
 800c9be:	2a47      	cmp	r2, #71	; 0x47
 800c9c0:	d1be      	bne.n	800c940 <_printf_float+0x100>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1bc      	bne.n	800c940 <_printf_float+0x100>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e7b9      	b.n	800c93e <_printf_float+0xfe>
 800c9ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c9ce:	d118      	bne.n	800ca02 <_printf_float+0x1c2>
 800c9d0:	2900      	cmp	r1, #0
 800c9d2:	6863      	ldr	r3, [r4, #4]
 800c9d4:	dd0b      	ble.n	800c9ee <_printf_float+0x1ae>
 800c9d6:	6121      	str	r1, [r4, #16]
 800c9d8:	b913      	cbnz	r3, 800c9e0 <_printf_float+0x1a0>
 800c9da:	6822      	ldr	r2, [r4, #0]
 800c9dc:	07d0      	lsls	r0, r2, #31
 800c9de:	d502      	bpl.n	800c9e6 <_printf_float+0x1a6>
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	440b      	add	r3, r1
 800c9e4:	6123      	str	r3, [r4, #16]
 800c9e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c9e8:	f04f 0900 	mov.w	r9, #0
 800c9ec:	e7de      	b.n	800c9ac <_printf_float+0x16c>
 800c9ee:	b913      	cbnz	r3, 800c9f6 <_printf_float+0x1b6>
 800c9f0:	6822      	ldr	r2, [r4, #0]
 800c9f2:	07d2      	lsls	r2, r2, #31
 800c9f4:	d501      	bpl.n	800c9fa <_printf_float+0x1ba>
 800c9f6:	3302      	adds	r3, #2
 800c9f8:	e7f4      	b.n	800c9e4 <_printf_float+0x1a4>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e7f2      	b.n	800c9e4 <_printf_float+0x1a4>
 800c9fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca04:	4299      	cmp	r1, r3
 800ca06:	db05      	blt.n	800ca14 <_printf_float+0x1d4>
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	6121      	str	r1, [r4, #16]
 800ca0c:	07d8      	lsls	r0, r3, #31
 800ca0e:	d5ea      	bpl.n	800c9e6 <_printf_float+0x1a6>
 800ca10:	1c4b      	adds	r3, r1, #1
 800ca12:	e7e7      	b.n	800c9e4 <_printf_float+0x1a4>
 800ca14:	2900      	cmp	r1, #0
 800ca16:	bfd4      	ite	le
 800ca18:	f1c1 0202 	rsble	r2, r1, #2
 800ca1c:	2201      	movgt	r2, #1
 800ca1e:	4413      	add	r3, r2
 800ca20:	e7e0      	b.n	800c9e4 <_printf_float+0x1a4>
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	055a      	lsls	r2, r3, #21
 800ca26:	d407      	bmi.n	800ca38 <_printf_float+0x1f8>
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	4642      	mov	r2, r8
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	4628      	mov	r0, r5
 800ca30:	47b8      	blx	r7
 800ca32:	3001      	adds	r0, #1
 800ca34:	d12c      	bne.n	800ca90 <_printf_float+0x250>
 800ca36:	e764      	b.n	800c902 <_printf_float+0xc2>
 800ca38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca3c:	f240 80e0 	bls.w	800cc00 <_printf_float+0x3c0>
 800ca40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca44:	2200      	movs	r2, #0
 800ca46:	2300      	movs	r3, #0
 800ca48:	f7f4 f856 	bl	8000af8 <__aeabi_dcmpeq>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	d034      	beq.n	800caba <_printf_float+0x27a>
 800ca50:	4a37      	ldr	r2, [pc, #220]	; (800cb30 <_printf_float+0x2f0>)
 800ca52:	2301      	movs	r3, #1
 800ca54:	4631      	mov	r1, r6
 800ca56:	4628      	mov	r0, r5
 800ca58:	47b8      	blx	r7
 800ca5a:	3001      	adds	r0, #1
 800ca5c:	f43f af51 	beq.w	800c902 <_printf_float+0xc2>
 800ca60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca64:	429a      	cmp	r2, r3
 800ca66:	db02      	blt.n	800ca6e <_printf_float+0x22e>
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	07d8      	lsls	r0, r3, #31
 800ca6c:	d510      	bpl.n	800ca90 <_printf_float+0x250>
 800ca6e:	ee18 3a10 	vmov	r3, s16
 800ca72:	4652      	mov	r2, sl
 800ca74:	4631      	mov	r1, r6
 800ca76:	4628      	mov	r0, r5
 800ca78:	47b8      	blx	r7
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	f43f af41 	beq.w	800c902 <_printf_float+0xc2>
 800ca80:	f04f 0800 	mov.w	r8, #0
 800ca84:	f104 091a 	add.w	r9, r4, #26
 800ca88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	4543      	cmp	r3, r8
 800ca8e:	dc09      	bgt.n	800caa4 <_printf_float+0x264>
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	079b      	lsls	r3, r3, #30
 800ca94:	f100 8105 	bmi.w	800cca2 <_printf_float+0x462>
 800ca98:	68e0      	ldr	r0, [r4, #12]
 800ca9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca9c:	4298      	cmp	r0, r3
 800ca9e:	bfb8      	it	lt
 800caa0:	4618      	movlt	r0, r3
 800caa2:	e730      	b.n	800c906 <_printf_float+0xc6>
 800caa4:	2301      	movs	r3, #1
 800caa6:	464a      	mov	r2, r9
 800caa8:	4631      	mov	r1, r6
 800caaa:	4628      	mov	r0, r5
 800caac:	47b8      	blx	r7
 800caae:	3001      	adds	r0, #1
 800cab0:	f43f af27 	beq.w	800c902 <_printf_float+0xc2>
 800cab4:	f108 0801 	add.w	r8, r8, #1
 800cab8:	e7e6      	b.n	800ca88 <_printf_float+0x248>
 800caba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	dc39      	bgt.n	800cb34 <_printf_float+0x2f4>
 800cac0:	4a1b      	ldr	r2, [pc, #108]	; (800cb30 <_printf_float+0x2f0>)
 800cac2:	2301      	movs	r3, #1
 800cac4:	4631      	mov	r1, r6
 800cac6:	4628      	mov	r0, r5
 800cac8:	47b8      	blx	r7
 800caca:	3001      	adds	r0, #1
 800cacc:	f43f af19 	beq.w	800c902 <_printf_float+0xc2>
 800cad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cad4:	4313      	orrs	r3, r2
 800cad6:	d102      	bne.n	800cade <_printf_float+0x29e>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	07d9      	lsls	r1, r3, #31
 800cadc:	d5d8      	bpl.n	800ca90 <_printf_float+0x250>
 800cade:	ee18 3a10 	vmov	r3, s16
 800cae2:	4652      	mov	r2, sl
 800cae4:	4631      	mov	r1, r6
 800cae6:	4628      	mov	r0, r5
 800cae8:	47b8      	blx	r7
 800caea:	3001      	adds	r0, #1
 800caec:	f43f af09 	beq.w	800c902 <_printf_float+0xc2>
 800caf0:	f04f 0900 	mov.w	r9, #0
 800caf4:	f104 0a1a 	add.w	sl, r4, #26
 800caf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cafa:	425b      	negs	r3, r3
 800cafc:	454b      	cmp	r3, r9
 800cafe:	dc01      	bgt.n	800cb04 <_printf_float+0x2c4>
 800cb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb02:	e792      	b.n	800ca2a <_printf_float+0x1ea>
 800cb04:	2301      	movs	r3, #1
 800cb06:	4652      	mov	r2, sl
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	47b8      	blx	r7
 800cb0e:	3001      	adds	r0, #1
 800cb10:	f43f aef7 	beq.w	800c902 <_printf_float+0xc2>
 800cb14:	f109 0901 	add.w	r9, r9, #1
 800cb18:	e7ee      	b.n	800caf8 <_printf_float+0x2b8>
 800cb1a:	bf00      	nop
 800cb1c:	7fefffff 	.word	0x7fefffff
 800cb20:	080246f8 	.word	0x080246f8
 800cb24:	080246fc 	.word	0x080246fc
 800cb28:	08024704 	.word	0x08024704
 800cb2c:	08024700 	.word	0x08024700
 800cb30:	08024708 	.word	0x08024708
 800cb34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	bfa8      	it	ge
 800cb3c:	461a      	movge	r2, r3
 800cb3e:	2a00      	cmp	r2, #0
 800cb40:	4691      	mov	r9, r2
 800cb42:	dc37      	bgt.n	800cbb4 <_printf_float+0x374>
 800cb44:	f04f 0b00 	mov.w	fp, #0
 800cb48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb4c:	f104 021a 	add.w	r2, r4, #26
 800cb50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb52:	9305      	str	r3, [sp, #20]
 800cb54:	eba3 0309 	sub.w	r3, r3, r9
 800cb58:	455b      	cmp	r3, fp
 800cb5a:	dc33      	bgt.n	800cbc4 <_printf_float+0x384>
 800cb5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb60:	429a      	cmp	r2, r3
 800cb62:	db3b      	blt.n	800cbdc <_printf_float+0x39c>
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	07da      	lsls	r2, r3, #31
 800cb68:	d438      	bmi.n	800cbdc <_printf_float+0x39c>
 800cb6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb6c:	9b05      	ldr	r3, [sp, #20]
 800cb6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb70:	1ad3      	subs	r3, r2, r3
 800cb72:	eba2 0901 	sub.w	r9, r2, r1
 800cb76:	4599      	cmp	r9, r3
 800cb78:	bfa8      	it	ge
 800cb7a:	4699      	movge	r9, r3
 800cb7c:	f1b9 0f00 	cmp.w	r9, #0
 800cb80:	dc35      	bgt.n	800cbee <_printf_float+0x3ae>
 800cb82:	f04f 0800 	mov.w	r8, #0
 800cb86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb8a:	f104 0a1a 	add.w	sl, r4, #26
 800cb8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb92:	1a9b      	subs	r3, r3, r2
 800cb94:	eba3 0309 	sub.w	r3, r3, r9
 800cb98:	4543      	cmp	r3, r8
 800cb9a:	f77f af79 	ble.w	800ca90 <_printf_float+0x250>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	4652      	mov	r2, sl
 800cba2:	4631      	mov	r1, r6
 800cba4:	4628      	mov	r0, r5
 800cba6:	47b8      	blx	r7
 800cba8:	3001      	adds	r0, #1
 800cbaa:	f43f aeaa 	beq.w	800c902 <_printf_float+0xc2>
 800cbae:	f108 0801 	add.w	r8, r8, #1
 800cbb2:	e7ec      	b.n	800cb8e <_printf_float+0x34e>
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	4631      	mov	r1, r6
 800cbb8:	4642      	mov	r2, r8
 800cbba:	4628      	mov	r0, r5
 800cbbc:	47b8      	blx	r7
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	d1c0      	bne.n	800cb44 <_printf_float+0x304>
 800cbc2:	e69e      	b.n	800c902 <_printf_float+0xc2>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	4628      	mov	r0, r5
 800cbca:	9205      	str	r2, [sp, #20]
 800cbcc:	47b8      	blx	r7
 800cbce:	3001      	adds	r0, #1
 800cbd0:	f43f ae97 	beq.w	800c902 <_printf_float+0xc2>
 800cbd4:	9a05      	ldr	r2, [sp, #20]
 800cbd6:	f10b 0b01 	add.w	fp, fp, #1
 800cbda:	e7b9      	b.n	800cb50 <_printf_float+0x310>
 800cbdc:	ee18 3a10 	vmov	r3, s16
 800cbe0:	4652      	mov	r2, sl
 800cbe2:	4631      	mov	r1, r6
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	47b8      	blx	r7
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d1be      	bne.n	800cb6a <_printf_float+0x32a>
 800cbec:	e689      	b.n	800c902 <_printf_float+0xc2>
 800cbee:	9a05      	ldr	r2, [sp, #20]
 800cbf0:	464b      	mov	r3, r9
 800cbf2:	4442      	add	r2, r8
 800cbf4:	4631      	mov	r1, r6
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	47b8      	blx	r7
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	d1c1      	bne.n	800cb82 <_printf_float+0x342>
 800cbfe:	e680      	b.n	800c902 <_printf_float+0xc2>
 800cc00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc02:	2a01      	cmp	r2, #1
 800cc04:	dc01      	bgt.n	800cc0a <_printf_float+0x3ca>
 800cc06:	07db      	lsls	r3, r3, #31
 800cc08:	d538      	bpl.n	800cc7c <_printf_float+0x43c>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4642      	mov	r2, r8
 800cc0e:	4631      	mov	r1, r6
 800cc10:	4628      	mov	r0, r5
 800cc12:	47b8      	blx	r7
 800cc14:	3001      	adds	r0, #1
 800cc16:	f43f ae74 	beq.w	800c902 <_printf_float+0xc2>
 800cc1a:	ee18 3a10 	vmov	r3, s16
 800cc1e:	4652      	mov	r2, sl
 800cc20:	4631      	mov	r1, r6
 800cc22:	4628      	mov	r0, r5
 800cc24:	47b8      	blx	r7
 800cc26:	3001      	adds	r0, #1
 800cc28:	f43f ae6b 	beq.w	800c902 <_printf_float+0xc2>
 800cc2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc30:	2200      	movs	r2, #0
 800cc32:	2300      	movs	r3, #0
 800cc34:	f7f3 ff60 	bl	8000af8 <__aeabi_dcmpeq>
 800cc38:	b9d8      	cbnz	r0, 800cc72 <_printf_float+0x432>
 800cc3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc3c:	f108 0201 	add.w	r2, r8, #1
 800cc40:	3b01      	subs	r3, #1
 800cc42:	4631      	mov	r1, r6
 800cc44:	4628      	mov	r0, r5
 800cc46:	47b8      	blx	r7
 800cc48:	3001      	adds	r0, #1
 800cc4a:	d10e      	bne.n	800cc6a <_printf_float+0x42a>
 800cc4c:	e659      	b.n	800c902 <_printf_float+0xc2>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	4652      	mov	r2, sl
 800cc52:	4631      	mov	r1, r6
 800cc54:	4628      	mov	r0, r5
 800cc56:	47b8      	blx	r7
 800cc58:	3001      	adds	r0, #1
 800cc5a:	f43f ae52 	beq.w	800c902 <_printf_float+0xc2>
 800cc5e:	f108 0801 	add.w	r8, r8, #1
 800cc62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc64:	3b01      	subs	r3, #1
 800cc66:	4543      	cmp	r3, r8
 800cc68:	dcf1      	bgt.n	800cc4e <_printf_float+0x40e>
 800cc6a:	464b      	mov	r3, r9
 800cc6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc70:	e6dc      	b.n	800ca2c <_printf_float+0x1ec>
 800cc72:	f04f 0800 	mov.w	r8, #0
 800cc76:	f104 0a1a 	add.w	sl, r4, #26
 800cc7a:	e7f2      	b.n	800cc62 <_printf_float+0x422>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	4642      	mov	r2, r8
 800cc80:	e7df      	b.n	800cc42 <_printf_float+0x402>
 800cc82:	2301      	movs	r3, #1
 800cc84:	464a      	mov	r2, r9
 800cc86:	4631      	mov	r1, r6
 800cc88:	4628      	mov	r0, r5
 800cc8a:	47b8      	blx	r7
 800cc8c:	3001      	adds	r0, #1
 800cc8e:	f43f ae38 	beq.w	800c902 <_printf_float+0xc2>
 800cc92:	f108 0801 	add.w	r8, r8, #1
 800cc96:	68e3      	ldr	r3, [r4, #12]
 800cc98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc9a:	1a5b      	subs	r3, r3, r1
 800cc9c:	4543      	cmp	r3, r8
 800cc9e:	dcf0      	bgt.n	800cc82 <_printf_float+0x442>
 800cca0:	e6fa      	b.n	800ca98 <_printf_float+0x258>
 800cca2:	f04f 0800 	mov.w	r8, #0
 800cca6:	f104 0919 	add.w	r9, r4, #25
 800ccaa:	e7f4      	b.n	800cc96 <_printf_float+0x456>

0800ccac <_printf_common>:
 800ccac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb0:	4616      	mov	r6, r2
 800ccb2:	4699      	mov	r9, r3
 800ccb4:	688a      	ldr	r2, [r1, #8]
 800ccb6:	690b      	ldr	r3, [r1, #16]
 800ccb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	bfb8      	it	lt
 800ccc0:	4613      	movlt	r3, r2
 800ccc2:	6033      	str	r3, [r6, #0]
 800ccc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccc8:	4607      	mov	r7, r0
 800ccca:	460c      	mov	r4, r1
 800cccc:	b10a      	cbz	r2, 800ccd2 <_printf_common+0x26>
 800ccce:	3301      	adds	r3, #1
 800ccd0:	6033      	str	r3, [r6, #0]
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	0699      	lsls	r1, r3, #26
 800ccd6:	bf42      	ittt	mi
 800ccd8:	6833      	ldrmi	r3, [r6, #0]
 800ccda:	3302      	addmi	r3, #2
 800ccdc:	6033      	strmi	r3, [r6, #0]
 800ccde:	6825      	ldr	r5, [r4, #0]
 800cce0:	f015 0506 	ands.w	r5, r5, #6
 800cce4:	d106      	bne.n	800ccf4 <_printf_common+0x48>
 800cce6:	f104 0a19 	add.w	sl, r4, #25
 800ccea:	68e3      	ldr	r3, [r4, #12]
 800ccec:	6832      	ldr	r2, [r6, #0]
 800ccee:	1a9b      	subs	r3, r3, r2
 800ccf0:	42ab      	cmp	r3, r5
 800ccf2:	dc26      	bgt.n	800cd42 <_printf_common+0x96>
 800ccf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccf8:	1e13      	subs	r3, r2, #0
 800ccfa:	6822      	ldr	r2, [r4, #0]
 800ccfc:	bf18      	it	ne
 800ccfe:	2301      	movne	r3, #1
 800cd00:	0692      	lsls	r2, r2, #26
 800cd02:	d42b      	bmi.n	800cd5c <_printf_common+0xb0>
 800cd04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd08:	4649      	mov	r1, r9
 800cd0a:	4638      	mov	r0, r7
 800cd0c:	47c0      	blx	r8
 800cd0e:	3001      	adds	r0, #1
 800cd10:	d01e      	beq.n	800cd50 <_printf_common+0xa4>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	68e5      	ldr	r5, [r4, #12]
 800cd16:	6832      	ldr	r2, [r6, #0]
 800cd18:	f003 0306 	and.w	r3, r3, #6
 800cd1c:	2b04      	cmp	r3, #4
 800cd1e:	bf08      	it	eq
 800cd20:	1aad      	subeq	r5, r5, r2
 800cd22:	68a3      	ldr	r3, [r4, #8]
 800cd24:	6922      	ldr	r2, [r4, #16]
 800cd26:	bf0c      	ite	eq
 800cd28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd2c:	2500      	movne	r5, #0
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	bfc4      	itt	gt
 800cd32:	1a9b      	subgt	r3, r3, r2
 800cd34:	18ed      	addgt	r5, r5, r3
 800cd36:	2600      	movs	r6, #0
 800cd38:	341a      	adds	r4, #26
 800cd3a:	42b5      	cmp	r5, r6
 800cd3c:	d11a      	bne.n	800cd74 <_printf_common+0xc8>
 800cd3e:	2000      	movs	r0, #0
 800cd40:	e008      	b.n	800cd54 <_printf_common+0xa8>
 800cd42:	2301      	movs	r3, #1
 800cd44:	4652      	mov	r2, sl
 800cd46:	4649      	mov	r1, r9
 800cd48:	4638      	mov	r0, r7
 800cd4a:	47c0      	blx	r8
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	d103      	bne.n	800cd58 <_printf_common+0xac>
 800cd50:	f04f 30ff 	mov.w	r0, #4294967295
 800cd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd58:	3501      	adds	r5, #1
 800cd5a:	e7c6      	b.n	800ccea <_printf_common+0x3e>
 800cd5c:	18e1      	adds	r1, r4, r3
 800cd5e:	1c5a      	adds	r2, r3, #1
 800cd60:	2030      	movs	r0, #48	; 0x30
 800cd62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd66:	4422      	add	r2, r4
 800cd68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd70:	3302      	adds	r3, #2
 800cd72:	e7c7      	b.n	800cd04 <_printf_common+0x58>
 800cd74:	2301      	movs	r3, #1
 800cd76:	4622      	mov	r2, r4
 800cd78:	4649      	mov	r1, r9
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	47c0      	blx	r8
 800cd7e:	3001      	adds	r0, #1
 800cd80:	d0e6      	beq.n	800cd50 <_printf_common+0xa4>
 800cd82:	3601      	adds	r6, #1
 800cd84:	e7d9      	b.n	800cd3a <_printf_common+0x8e>
	...

0800cd88 <_printf_i>:
 800cd88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	4691      	mov	r9, r2
 800cd90:	7e27      	ldrb	r7, [r4, #24]
 800cd92:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd94:	2f78      	cmp	r7, #120	; 0x78
 800cd96:	4680      	mov	r8, r0
 800cd98:	469a      	mov	sl, r3
 800cd9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd9e:	d807      	bhi.n	800cdb0 <_printf_i+0x28>
 800cda0:	2f62      	cmp	r7, #98	; 0x62
 800cda2:	d80a      	bhi.n	800cdba <_printf_i+0x32>
 800cda4:	2f00      	cmp	r7, #0
 800cda6:	f000 80d8 	beq.w	800cf5a <_printf_i+0x1d2>
 800cdaa:	2f58      	cmp	r7, #88	; 0x58
 800cdac:	f000 80a3 	beq.w	800cef6 <_printf_i+0x16e>
 800cdb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cdb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdb8:	e03a      	b.n	800ce30 <_printf_i+0xa8>
 800cdba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdbe:	2b15      	cmp	r3, #21
 800cdc0:	d8f6      	bhi.n	800cdb0 <_printf_i+0x28>
 800cdc2:	a001      	add	r0, pc, #4	; (adr r0, 800cdc8 <_printf_i+0x40>)
 800cdc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cdc8:	0800ce21 	.word	0x0800ce21
 800cdcc:	0800ce35 	.word	0x0800ce35
 800cdd0:	0800cdb1 	.word	0x0800cdb1
 800cdd4:	0800cdb1 	.word	0x0800cdb1
 800cdd8:	0800cdb1 	.word	0x0800cdb1
 800cddc:	0800cdb1 	.word	0x0800cdb1
 800cde0:	0800ce35 	.word	0x0800ce35
 800cde4:	0800cdb1 	.word	0x0800cdb1
 800cde8:	0800cdb1 	.word	0x0800cdb1
 800cdec:	0800cdb1 	.word	0x0800cdb1
 800cdf0:	0800cdb1 	.word	0x0800cdb1
 800cdf4:	0800cf41 	.word	0x0800cf41
 800cdf8:	0800ce65 	.word	0x0800ce65
 800cdfc:	0800cf23 	.word	0x0800cf23
 800ce00:	0800cdb1 	.word	0x0800cdb1
 800ce04:	0800cdb1 	.word	0x0800cdb1
 800ce08:	0800cf63 	.word	0x0800cf63
 800ce0c:	0800cdb1 	.word	0x0800cdb1
 800ce10:	0800ce65 	.word	0x0800ce65
 800ce14:	0800cdb1 	.word	0x0800cdb1
 800ce18:	0800cdb1 	.word	0x0800cdb1
 800ce1c:	0800cf2b 	.word	0x0800cf2b
 800ce20:	680b      	ldr	r3, [r1, #0]
 800ce22:	1d1a      	adds	r2, r3, #4
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	600a      	str	r2, [r1, #0]
 800ce28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce30:	2301      	movs	r3, #1
 800ce32:	e0a3      	b.n	800cf7c <_printf_i+0x1f4>
 800ce34:	6825      	ldr	r5, [r4, #0]
 800ce36:	6808      	ldr	r0, [r1, #0]
 800ce38:	062e      	lsls	r6, r5, #24
 800ce3a:	f100 0304 	add.w	r3, r0, #4
 800ce3e:	d50a      	bpl.n	800ce56 <_printf_i+0xce>
 800ce40:	6805      	ldr	r5, [r0, #0]
 800ce42:	600b      	str	r3, [r1, #0]
 800ce44:	2d00      	cmp	r5, #0
 800ce46:	da03      	bge.n	800ce50 <_printf_i+0xc8>
 800ce48:	232d      	movs	r3, #45	; 0x2d
 800ce4a:	426d      	negs	r5, r5
 800ce4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce50:	485e      	ldr	r0, [pc, #376]	; (800cfcc <_printf_i+0x244>)
 800ce52:	230a      	movs	r3, #10
 800ce54:	e019      	b.n	800ce8a <_printf_i+0x102>
 800ce56:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ce5a:	6805      	ldr	r5, [r0, #0]
 800ce5c:	600b      	str	r3, [r1, #0]
 800ce5e:	bf18      	it	ne
 800ce60:	b22d      	sxthne	r5, r5
 800ce62:	e7ef      	b.n	800ce44 <_printf_i+0xbc>
 800ce64:	680b      	ldr	r3, [r1, #0]
 800ce66:	6825      	ldr	r5, [r4, #0]
 800ce68:	1d18      	adds	r0, r3, #4
 800ce6a:	6008      	str	r0, [r1, #0]
 800ce6c:	0628      	lsls	r0, r5, #24
 800ce6e:	d501      	bpl.n	800ce74 <_printf_i+0xec>
 800ce70:	681d      	ldr	r5, [r3, #0]
 800ce72:	e002      	b.n	800ce7a <_printf_i+0xf2>
 800ce74:	0669      	lsls	r1, r5, #25
 800ce76:	d5fb      	bpl.n	800ce70 <_printf_i+0xe8>
 800ce78:	881d      	ldrh	r5, [r3, #0]
 800ce7a:	4854      	ldr	r0, [pc, #336]	; (800cfcc <_printf_i+0x244>)
 800ce7c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce7e:	bf0c      	ite	eq
 800ce80:	2308      	moveq	r3, #8
 800ce82:	230a      	movne	r3, #10
 800ce84:	2100      	movs	r1, #0
 800ce86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce8a:	6866      	ldr	r6, [r4, #4]
 800ce8c:	60a6      	str	r6, [r4, #8]
 800ce8e:	2e00      	cmp	r6, #0
 800ce90:	bfa2      	ittt	ge
 800ce92:	6821      	ldrge	r1, [r4, #0]
 800ce94:	f021 0104 	bicge.w	r1, r1, #4
 800ce98:	6021      	strge	r1, [r4, #0]
 800ce9a:	b90d      	cbnz	r5, 800cea0 <_printf_i+0x118>
 800ce9c:	2e00      	cmp	r6, #0
 800ce9e:	d04d      	beq.n	800cf3c <_printf_i+0x1b4>
 800cea0:	4616      	mov	r6, r2
 800cea2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cea6:	fb03 5711 	mls	r7, r3, r1, r5
 800ceaa:	5dc7      	ldrb	r7, [r0, r7]
 800ceac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ceb0:	462f      	mov	r7, r5
 800ceb2:	42bb      	cmp	r3, r7
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	d9f4      	bls.n	800cea2 <_printf_i+0x11a>
 800ceb8:	2b08      	cmp	r3, #8
 800ceba:	d10b      	bne.n	800ced4 <_printf_i+0x14c>
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	07df      	lsls	r7, r3, #31
 800cec0:	d508      	bpl.n	800ced4 <_printf_i+0x14c>
 800cec2:	6923      	ldr	r3, [r4, #16]
 800cec4:	6861      	ldr	r1, [r4, #4]
 800cec6:	4299      	cmp	r1, r3
 800cec8:	bfde      	ittt	le
 800ceca:	2330      	movle	r3, #48	; 0x30
 800cecc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ced0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ced4:	1b92      	subs	r2, r2, r6
 800ced6:	6122      	str	r2, [r4, #16]
 800ced8:	f8cd a000 	str.w	sl, [sp]
 800cedc:	464b      	mov	r3, r9
 800cede:	aa03      	add	r2, sp, #12
 800cee0:	4621      	mov	r1, r4
 800cee2:	4640      	mov	r0, r8
 800cee4:	f7ff fee2 	bl	800ccac <_printf_common>
 800cee8:	3001      	adds	r0, #1
 800ceea:	d14c      	bne.n	800cf86 <_printf_i+0x1fe>
 800ceec:	f04f 30ff 	mov.w	r0, #4294967295
 800cef0:	b004      	add	sp, #16
 800cef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef6:	4835      	ldr	r0, [pc, #212]	; (800cfcc <_printf_i+0x244>)
 800cef8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cefc:	6823      	ldr	r3, [r4, #0]
 800cefe:	680e      	ldr	r6, [r1, #0]
 800cf00:	061f      	lsls	r7, r3, #24
 800cf02:	f856 5b04 	ldr.w	r5, [r6], #4
 800cf06:	600e      	str	r6, [r1, #0]
 800cf08:	d514      	bpl.n	800cf34 <_printf_i+0x1ac>
 800cf0a:	07d9      	lsls	r1, r3, #31
 800cf0c:	bf44      	itt	mi
 800cf0e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf12:	6023      	strmi	r3, [r4, #0]
 800cf14:	b91d      	cbnz	r5, 800cf1e <_printf_i+0x196>
 800cf16:	6823      	ldr	r3, [r4, #0]
 800cf18:	f023 0320 	bic.w	r3, r3, #32
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	2310      	movs	r3, #16
 800cf20:	e7b0      	b.n	800ce84 <_printf_i+0xfc>
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	f043 0320 	orr.w	r3, r3, #32
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	2378      	movs	r3, #120	; 0x78
 800cf2c:	4828      	ldr	r0, [pc, #160]	; (800cfd0 <_printf_i+0x248>)
 800cf2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf32:	e7e3      	b.n	800cefc <_printf_i+0x174>
 800cf34:	065e      	lsls	r6, r3, #25
 800cf36:	bf48      	it	mi
 800cf38:	b2ad      	uxthmi	r5, r5
 800cf3a:	e7e6      	b.n	800cf0a <_printf_i+0x182>
 800cf3c:	4616      	mov	r6, r2
 800cf3e:	e7bb      	b.n	800ceb8 <_printf_i+0x130>
 800cf40:	680b      	ldr	r3, [r1, #0]
 800cf42:	6826      	ldr	r6, [r4, #0]
 800cf44:	6960      	ldr	r0, [r4, #20]
 800cf46:	1d1d      	adds	r5, r3, #4
 800cf48:	600d      	str	r5, [r1, #0]
 800cf4a:	0635      	lsls	r5, r6, #24
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	d501      	bpl.n	800cf54 <_printf_i+0x1cc>
 800cf50:	6018      	str	r0, [r3, #0]
 800cf52:	e002      	b.n	800cf5a <_printf_i+0x1d2>
 800cf54:	0671      	lsls	r1, r6, #25
 800cf56:	d5fb      	bpl.n	800cf50 <_printf_i+0x1c8>
 800cf58:	8018      	strh	r0, [r3, #0]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6123      	str	r3, [r4, #16]
 800cf5e:	4616      	mov	r6, r2
 800cf60:	e7ba      	b.n	800ced8 <_printf_i+0x150>
 800cf62:	680b      	ldr	r3, [r1, #0]
 800cf64:	1d1a      	adds	r2, r3, #4
 800cf66:	600a      	str	r2, [r1, #0]
 800cf68:	681e      	ldr	r6, [r3, #0]
 800cf6a:	6862      	ldr	r2, [r4, #4]
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f7f3 f94e 	bl	8000210 <memchr>
 800cf74:	b108      	cbz	r0, 800cf7a <_printf_i+0x1f2>
 800cf76:	1b80      	subs	r0, r0, r6
 800cf78:	6060      	str	r0, [r4, #4]
 800cf7a:	6863      	ldr	r3, [r4, #4]
 800cf7c:	6123      	str	r3, [r4, #16]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf84:	e7a8      	b.n	800ced8 <_printf_i+0x150>
 800cf86:	6923      	ldr	r3, [r4, #16]
 800cf88:	4632      	mov	r2, r6
 800cf8a:	4649      	mov	r1, r9
 800cf8c:	4640      	mov	r0, r8
 800cf8e:	47d0      	blx	sl
 800cf90:	3001      	adds	r0, #1
 800cf92:	d0ab      	beq.n	800ceec <_printf_i+0x164>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	079b      	lsls	r3, r3, #30
 800cf98:	d413      	bmi.n	800cfc2 <_printf_i+0x23a>
 800cf9a:	68e0      	ldr	r0, [r4, #12]
 800cf9c:	9b03      	ldr	r3, [sp, #12]
 800cf9e:	4298      	cmp	r0, r3
 800cfa0:	bfb8      	it	lt
 800cfa2:	4618      	movlt	r0, r3
 800cfa4:	e7a4      	b.n	800cef0 <_printf_i+0x168>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	4632      	mov	r2, r6
 800cfaa:	4649      	mov	r1, r9
 800cfac:	4640      	mov	r0, r8
 800cfae:	47d0      	blx	sl
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	d09b      	beq.n	800ceec <_printf_i+0x164>
 800cfb4:	3501      	adds	r5, #1
 800cfb6:	68e3      	ldr	r3, [r4, #12]
 800cfb8:	9903      	ldr	r1, [sp, #12]
 800cfba:	1a5b      	subs	r3, r3, r1
 800cfbc:	42ab      	cmp	r3, r5
 800cfbe:	dcf2      	bgt.n	800cfa6 <_printf_i+0x21e>
 800cfc0:	e7eb      	b.n	800cf9a <_printf_i+0x212>
 800cfc2:	2500      	movs	r5, #0
 800cfc4:	f104 0619 	add.w	r6, r4, #25
 800cfc8:	e7f5      	b.n	800cfb6 <_printf_i+0x22e>
 800cfca:	bf00      	nop
 800cfcc:	0802470a 	.word	0x0802470a
 800cfd0:	0802471b 	.word	0x0802471b

0800cfd4 <_scanf_float>:
 800cfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd8:	b087      	sub	sp, #28
 800cfda:	4617      	mov	r7, r2
 800cfdc:	9303      	str	r3, [sp, #12]
 800cfde:	688b      	ldr	r3, [r1, #8]
 800cfe0:	1e5a      	subs	r2, r3, #1
 800cfe2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cfe6:	bf83      	ittte	hi
 800cfe8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cfec:	195b      	addhi	r3, r3, r5
 800cfee:	9302      	strhi	r3, [sp, #8]
 800cff0:	2300      	movls	r3, #0
 800cff2:	bf86      	itte	hi
 800cff4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cff8:	608b      	strhi	r3, [r1, #8]
 800cffa:	9302      	strls	r3, [sp, #8]
 800cffc:	680b      	ldr	r3, [r1, #0]
 800cffe:	468b      	mov	fp, r1
 800d000:	2500      	movs	r5, #0
 800d002:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d006:	f84b 3b1c 	str.w	r3, [fp], #28
 800d00a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d00e:	4680      	mov	r8, r0
 800d010:	460c      	mov	r4, r1
 800d012:	465e      	mov	r6, fp
 800d014:	46aa      	mov	sl, r5
 800d016:	46a9      	mov	r9, r5
 800d018:	9501      	str	r5, [sp, #4]
 800d01a:	68a2      	ldr	r2, [r4, #8]
 800d01c:	b152      	cbz	r2, 800d034 <_scanf_float+0x60>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b4e      	cmp	r3, #78	; 0x4e
 800d024:	d864      	bhi.n	800d0f0 <_scanf_float+0x11c>
 800d026:	2b40      	cmp	r3, #64	; 0x40
 800d028:	d83c      	bhi.n	800d0a4 <_scanf_float+0xd0>
 800d02a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d02e:	b2c8      	uxtb	r0, r1
 800d030:	280e      	cmp	r0, #14
 800d032:	d93a      	bls.n	800d0aa <_scanf_float+0xd6>
 800d034:	f1b9 0f00 	cmp.w	r9, #0
 800d038:	d003      	beq.n	800d042 <_scanf_float+0x6e>
 800d03a:	6823      	ldr	r3, [r4, #0]
 800d03c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d046:	f1ba 0f01 	cmp.w	sl, #1
 800d04a:	f200 8113 	bhi.w	800d274 <_scanf_float+0x2a0>
 800d04e:	455e      	cmp	r6, fp
 800d050:	f200 8105 	bhi.w	800d25e <_scanf_float+0x28a>
 800d054:	2501      	movs	r5, #1
 800d056:	4628      	mov	r0, r5
 800d058:	b007      	add	sp, #28
 800d05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d062:	2a0d      	cmp	r2, #13
 800d064:	d8e6      	bhi.n	800d034 <_scanf_float+0x60>
 800d066:	a101      	add	r1, pc, #4	; (adr r1, 800d06c <_scanf_float+0x98>)
 800d068:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d06c:	0800d1ab 	.word	0x0800d1ab
 800d070:	0800d035 	.word	0x0800d035
 800d074:	0800d035 	.word	0x0800d035
 800d078:	0800d035 	.word	0x0800d035
 800d07c:	0800d20b 	.word	0x0800d20b
 800d080:	0800d1e3 	.word	0x0800d1e3
 800d084:	0800d035 	.word	0x0800d035
 800d088:	0800d035 	.word	0x0800d035
 800d08c:	0800d1b9 	.word	0x0800d1b9
 800d090:	0800d035 	.word	0x0800d035
 800d094:	0800d035 	.word	0x0800d035
 800d098:	0800d035 	.word	0x0800d035
 800d09c:	0800d035 	.word	0x0800d035
 800d0a0:	0800d171 	.word	0x0800d171
 800d0a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d0a8:	e7db      	b.n	800d062 <_scanf_float+0x8e>
 800d0aa:	290e      	cmp	r1, #14
 800d0ac:	d8c2      	bhi.n	800d034 <_scanf_float+0x60>
 800d0ae:	a001      	add	r0, pc, #4	; (adr r0, 800d0b4 <_scanf_float+0xe0>)
 800d0b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d0b4:	0800d163 	.word	0x0800d163
 800d0b8:	0800d035 	.word	0x0800d035
 800d0bc:	0800d163 	.word	0x0800d163
 800d0c0:	0800d1f7 	.word	0x0800d1f7
 800d0c4:	0800d035 	.word	0x0800d035
 800d0c8:	0800d111 	.word	0x0800d111
 800d0cc:	0800d14d 	.word	0x0800d14d
 800d0d0:	0800d14d 	.word	0x0800d14d
 800d0d4:	0800d14d 	.word	0x0800d14d
 800d0d8:	0800d14d 	.word	0x0800d14d
 800d0dc:	0800d14d 	.word	0x0800d14d
 800d0e0:	0800d14d 	.word	0x0800d14d
 800d0e4:	0800d14d 	.word	0x0800d14d
 800d0e8:	0800d14d 	.word	0x0800d14d
 800d0ec:	0800d14d 	.word	0x0800d14d
 800d0f0:	2b6e      	cmp	r3, #110	; 0x6e
 800d0f2:	d809      	bhi.n	800d108 <_scanf_float+0x134>
 800d0f4:	2b60      	cmp	r3, #96	; 0x60
 800d0f6:	d8b2      	bhi.n	800d05e <_scanf_float+0x8a>
 800d0f8:	2b54      	cmp	r3, #84	; 0x54
 800d0fa:	d077      	beq.n	800d1ec <_scanf_float+0x218>
 800d0fc:	2b59      	cmp	r3, #89	; 0x59
 800d0fe:	d199      	bne.n	800d034 <_scanf_float+0x60>
 800d100:	2d07      	cmp	r5, #7
 800d102:	d197      	bne.n	800d034 <_scanf_float+0x60>
 800d104:	2508      	movs	r5, #8
 800d106:	e029      	b.n	800d15c <_scanf_float+0x188>
 800d108:	2b74      	cmp	r3, #116	; 0x74
 800d10a:	d06f      	beq.n	800d1ec <_scanf_float+0x218>
 800d10c:	2b79      	cmp	r3, #121	; 0x79
 800d10e:	e7f6      	b.n	800d0fe <_scanf_float+0x12a>
 800d110:	6821      	ldr	r1, [r4, #0]
 800d112:	05c8      	lsls	r0, r1, #23
 800d114:	d51a      	bpl.n	800d14c <_scanf_float+0x178>
 800d116:	9b02      	ldr	r3, [sp, #8]
 800d118:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d11c:	6021      	str	r1, [r4, #0]
 800d11e:	f109 0901 	add.w	r9, r9, #1
 800d122:	b11b      	cbz	r3, 800d12c <_scanf_float+0x158>
 800d124:	3b01      	subs	r3, #1
 800d126:	3201      	adds	r2, #1
 800d128:	9302      	str	r3, [sp, #8]
 800d12a:	60a2      	str	r2, [r4, #8]
 800d12c:	68a3      	ldr	r3, [r4, #8]
 800d12e:	3b01      	subs	r3, #1
 800d130:	60a3      	str	r3, [r4, #8]
 800d132:	6923      	ldr	r3, [r4, #16]
 800d134:	3301      	adds	r3, #1
 800d136:	6123      	str	r3, [r4, #16]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	607b      	str	r3, [r7, #4]
 800d140:	f340 8084 	ble.w	800d24c <_scanf_float+0x278>
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	3301      	adds	r3, #1
 800d148:	603b      	str	r3, [r7, #0]
 800d14a:	e766      	b.n	800d01a <_scanf_float+0x46>
 800d14c:	eb1a 0f05 	cmn.w	sl, r5
 800d150:	f47f af70 	bne.w	800d034 <_scanf_float+0x60>
 800d154:	6822      	ldr	r2, [r4, #0]
 800d156:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d15a:	6022      	str	r2, [r4, #0]
 800d15c:	f806 3b01 	strb.w	r3, [r6], #1
 800d160:	e7e4      	b.n	800d12c <_scanf_float+0x158>
 800d162:	6822      	ldr	r2, [r4, #0]
 800d164:	0610      	lsls	r0, r2, #24
 800d166:	f57f af65 	bpl.w	800d034 <_scanf_float+0x60>
 800d16a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d16e:	e7f4      	b.n	800d15a <_scanf_float+0x186>
 800d170:	f1ba 0f00 	cmp.w	sl, #0
 800d174:	d10e      	bne.n	800d194 <_scanf_float+0x1c0>
 800d176:	f1b9 0f00 	cmp.w	r9, #0
 800d17a:	d10e      	bne.n	800d19a <_scanf_float+0x1c6>
 800d17c:	6822      	ldr	r2, [r4, #0]
 800d17e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d182:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d186:	d108      	bne.n	800d19a <_scanf_float+0x1c6>
 800d188:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d18c:	6022      	str	r2, [r4, #0]
 800d18e:	f04f 0a01 	mov.w	sl, #1
 800d192:	e7e3      	b.n	800d15c <_scanf_float+0x188>
 800d194:	f1ba 0f02 	cmp.w	sl, #2
 800d198:	d055      	beq.n	800d246 <_scanf_float+0x272>
 800d19a:	2d01      	cmp	r5, #1
 800d19c:	d002      	beq.n	800d1a4 <_scanf_float+0x1d0>
 800d19e:	2d04      	cmp	r5, #4
 800d1a0:	f47f af48 	bne.w	800d034 <_scanf_float+0x60>
 800d1a4:	3501      	adds	r5, #1
 800d1a6:	b2ed      	uxtb	r5, r5
 800d1a8:	e7d8      	b.n	800d15c <_scanf_float+0x188>
 800d1aa:	f1ba 0f01 	cmp.w	sl, #1
 800d1ae:	f47f af41 	bne.w	800d034 <_scanf_float+0x60>
 800d1b2:	f04f 0a02 	mov.w	sl, #2
 800d1b6:	e7d1      	b.n	800d15c <_scanf_float+0x188>
 800d1b8:	b97d      	cbnz	r5, 800d1da <_scanf_float+0x206>
 800d1ba:	f1b9 0f00 	cmp.w	r9, #0
 800d1be:	f47f af3c 	bne.w	800d03a <_scanf_float+0x66>
 800d1c2:	6822      	ldr	r2, [r4, #0]
 800d1c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d1c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d1cc:	f47f af39 	bne.w	800d042 <_scanf_float+0x6e>
 800d1d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d1d4:	6022      	str	r2, [r4, #0]
 800d1d6:	2501      	movs	r5, #1
 800d1d8:	e7c0      	b.n	800d15c <_scanf_float+0x188>
 800d1da:	2d03      	cmp	r5, #3
 800d1dc:	d0e2      	beq.n	800d1a4 <_scanf_float+0x1d0>
 800d1de:	2d05      	cmp	r5, #5
 800d1e0:	e7de      	b.n	800d1a0 <_scanf_float+0x1cc>
 800d1e2:	2d02      	cmp	r5, #2
 800d1e4:	f47f af26 	bne.w	800d034 <_scanf_float+0x60>
 800d1e8:	2503      	movs	r5, #3
 800d1ea:	e7b7      	b.n	800d15c <_scanf_float+0x188>
 800d1ec:	2d06      	cmp	r5, #6
 800d1ee:	f47f af21 	bne.w	800d034 <_scanf_float+0x60>
 800d1f2:	2507      	movs	r5, #7
 800d1f4:	e7b2      	b.n	800d15c <_scanf_float+0x188>
 800d1f6:	6822      	ldr	r2, [r4, #0]
 800d1f8:	0591      	lsls	r1, r2, #22
 800d1fa:	f57f af1b 	bpl.w	800d034 <_scanf_float+0x60>
 800d1fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d202:	6022      	str	r2, [r4, #0]
 800d204:	f8cd 9004 	str.w	r9, [sp, #4]
 800d208:	e7a8      	b.n	800d15c <_scanf_float+0x188>
 800d20a:	6822      	ldr	r2, [r4, #0]
 800d20c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d210:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d214:	d006      	beq.n	800d224 <_scanf_float+0x250>
 800d216:	0550      	lsls	r0, r2, #21
 800d218:	f57f af0c 	bpl.w	800d034 <_scanf_float+0x60>
 800d21c:	f1b9 0f00 	cmp.w	r9, #0
 800d220:	f43f af0f 	beq.w	800d042 <_scanf_float+0x6e>
 800d224:	0591      	lsls	r1, r2, #22
 800d226:	bf58      	it	pl
 800d228:	9901      	ldrpl	r1, [sp, #4]
 800d22a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d22e:	bf58      	it	pl
 800d230:	eba9 0101 	subpl.w	r1, r9, r1
 800d234:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d238:	bf58      	it	pl
 800d23a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d23e:	6022      	str	r2, [r4, #0]
 800d240:	f04f 0900 	mov.w	r9, #0
 800d244:	e78a      	b.n	800d15c <_scanf_float+0x188>
 800d246:	f04f 0a03 	mov.w	sl, #3
 800d24a:	e787      	b.n	800d15c <_scanf_float+0x188>
 800d24c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d250:	4639      	mov	r1, r7
 800d252:	4640      	mov	r0, r8
 800d254:	4798      	blx	r3
 800d256:	2800      	cmp	r0, #0
 800d258:	f43f aedf 	beq.w	800d01a <_scanf_float+0x46>
 800d25c:	e6ea      	b.n	800d034 <_scanf_float+0x60>
 800d25e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d262:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d266:	463a      	mov	r2, r7
 800d268:	4640      	mov	r0, r8
 800d26a:	4798      	blx	r3
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	3b01      	subs	r3, #1
 800d270:	6123      	str	r3, [r4, #16]
 800d272:	e6ec      	b.n	800d04e <_scanf_float+0x7a>
 800d274:	1e6b      	subs	r3, r5, #1
 800d276:	2b06      	cmp	r3, #6
 800d278:	d825      	bhi.n	800d2c6 <_scanf_float+0x2f2>
 800d27a:	2d02      	cmp	r5, #2
 800d27c:	d836      	bhi.n	800d2ec <_scanf_float+0x318>
 800d27e:	455e      	cmp	r6, fp
 800d280:	f67f aee8 	bls.w	800d054 <_scanf_float+0x80>
 800d284:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d288:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d28c:	463a      	mov	r2, r7
 800d28e:	4640      	mov	r0, r8
 800d290:	4798      	blx	r3
 800d292:	6923      	ldr	r3, [r4, #16]
 800d294:	3b01      	subs	r3, #1
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	e7f1      	b.n	800d27e <_scanf_float+0x2aa>
 800d29a:	9802      	ldr	r0, [sp, #8]
 800d29c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d2a4:	9002      	str	r0, [sp, #8]
 800d2a6:	463a      	mov	r2, r7
 800d2a8:	4640      	mov	r0, r8
 800d2aa:	4798      	blx	r3
 800d2ac:	6923      	ldr	r3, [r4, #16]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	6123      	str	r3, [r4, #16]
 800d2b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2b6:	fa5f fa8a 	uxtb.w	sl, sl
 800d2ba:	f1ba 0f02 	cmp.w	sl, #2
 800d2be:	d1ec      	bne.n	800d29a <_scanf_float+0x2c6>
 800d2c0:	3d03      	subs	r5, #3
 800d2c2:	b2ed      	uxtb	r5, r5
 800d2c4:	1b76      	subs	r6, r6, r5
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	05da      	lsls	r2, r3, #23
 800d2ca:	d52f      	bpl.n	800d32c <_scanf_float+0x358>
 800d2cc:	055b      	lsls	r3, r3, #21
 800d2ce:	d510      	bpl.n	800d2f2 <_scanf_float+0x31e>
 800d2d0:	455e      	cmp	r6, fp
 800d2d2:	f67f aebf 	bls.w	800d054 <_scanf_float+0x80>
 800d2d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d2de:	463a      	mov	r2, r7
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	4798      	blx	r3
 800d2e4:	6923      	ldr	r3, [r4, #16]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	6123      	str	r3, [r4, #16]
 800d2ea:	e7f1      	b.n	800d2d0 <_scanf_float+0x2fc>
 800d2ec:	46aa      	mov	sl, r5
 800d2ee:	9602      	str	r6, [sp, #8]
 800d2f0:	e7df      	b.n	800d2b2 <_scanf_float+0x2de>
 800d2f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d2f6:	6923      	ldr	r3, [r4, #16]
 800d2f8:	2965      	cmp	r1, #101	; 0x65
 800d2fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800d2fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800d302:	6123      	str	r3, [r4, #16]
 800d304:	d00c      	beq.n	800d320 <_scanf_float+0x34c>
 800d306:	2945      	cmp	r1, #69	; 0x45
 800d308:	d00a      	beq.n	800d320 <_scanf_float+0x34c>
 800d30a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d30e:	463a      	mov	r2, r7
 800d310:	4640      	mov	r0, r8
 800d312:	4798      	blx	r3
 800d314:	6923      	ldr	r3, [r4, #16]
 800d316:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d31a:	3b01      	subs	r3, #1
 800d31c:	1eb5      	subs	r5, r6, #2
 800d31e:	6123      	str	r3, [r4, #16]
 800d320:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d324:	463a      	mov	r2, r7
 800d326:	4640      	mov	r0, r8
 800d328:	4798      	blx	r3
 800d32a:	462e      	mov	r6, r5
 800d32c:	6825      	ldr	r5, [r4, #0]
 800d32e:	f015 0510 	ands.w	r5, r5, #16
 800d332:	d158      	bne.n	800d3e6 <_scanf_float+0x412>
 800d334:	7035      	strb	r5, [r6, #0]
 800d336:	6823      	ldr	r3, [r4, #0]
 800d338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d33c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d340:	d11c      	bne.n	800d37c <_scanf_float+0x3a8>
 800d342:	9b01      	ldr	r3, [sp, #4]
 800d344:	454b      	cmp	r3, r9
 800d346:	eba3 0209 	sub.w	r2, r3, r9
 800d34a:	d124      	bne.n	800d396 <_scanf_float+0x3c2>
 800d34c:	2200      	movs	r2, #0
 800d34e:	4659      	mov	r1, fp
 800d350:	4640      	mov	r0, r8
 800d352:	f000 fe9b 	bl	800e08c <_strtod_r>
 800d356:	9b03      	ldr	r3, [sp, #12]
 800d358:	6821      	ldr	r1, [r4, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f011 0f02 	tst.w	r1, #2
 800d360:	ec57 6b10 	vmov	r6, r7, d0
 800d364:	f103 0204 	add.w	r2, r3, #4
 800d368:	d020      	beq.n	800d3ac <_scanf_float+0x3d8>
 800d36a:	9903      	ldr	r1, [sp, #12]
 800d36c:	600a      	str	r2, [r1, #0]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	e9c3 6700 	strd	r6, r7, [r3]
 800d374:	68e3      	ldr	r3, [r4, #12]
 800d376:	3301      	adds	r3, #1
 800d378:	60e3      	str	r3, [r4, #12]
 800d37a:	e66c      	b.n	800d056 <_scanf_float+0x82>
 800d37c:	9b04      	ldr	r3, [sp, #16]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0e4      	beq.n	800d34c <_scanf_float+0x378>
 800d382:	9905      	ldr	r1, [sp, #20]
 800d384:	230a      	movs	r3, #10
 800d386:	462a      	mov	r2, r5
 800d388:	3101      	adds	r1, #1
 800d38a:	4640      	mov	r0, r8
 800d38c:	f000 ff70 	bl	800e270 <_strtol_r>
 800d390:	9b04      	ldr	r3, [sp, #16]
 800d392:	9e05      	ldr	r6, [sp, #20]
 800d394:	1ac2      	subs	r2, r0, r3
 800d396:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d39a:	429e      	cmp	r6, r3
 800d39c:	bf28      	it	cs
 800d39e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d3a2:	4912      	ldr	r1, [pc, #72]	; (800d3ec <_scanf_float+0x418>)
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f000 f82b 	bl	800d400 <siprintf>
 800d3aa:	e7cf      	b.n	800d34c <_scanf_float+0x378>
 800d3ac:	f011 0f04 	tst.w	r1, #4
 800d3b0:	9903      	ldr	r1, [sp, #12]
 800d3b2:	600a      	str	r2, [r1, #0]
 800d3b4:	d1db      	bne.n	800d36e <_scanf_float+0x39a>
 800d3b6:	f8d3 8000 	ldr.w	r8, [r3]
 800d3ba:	ee10 2a10 	vmov	r2, s0
 800d3be:	ee10 0a10 	vmov	r0, s0
 800d3c2:	463b      	mov	r3, r7
 800d3c4:	4639      	mov	r1, r7
 800d3c6:	f7f3 fbc9 	bl	8000b5c <__aeabi_dcmpun>
 800d3ca:	b128      	cbz	r0, 800d3d8 <_scanf_float+0x404>
 800d3cc:	4808      	ldr	r0, [pc, #32]	; (800d3f0 <_scanf_float+0x41c>)
 800d3ce:	f000 f811 	bl	800d3f4 <nanf>
 800d3d2:	ed88 0a00 	vstr	s0, [r8]
 800d3d6:	e7cd      	b.n	800d374 <_scanf_float+0x3a0>
 800d3d8:	4630      	mov	r0, r6
 800d3da:	4639      	mov	r1, r7
 800d3dc:	f7f3 fc1c 	bl	8000c18 <__aeabi_d2f>
 800d3e0:	f8c8 0000 	str.w	r0, [r8]
 800d3e4:	e7c6      	b.n	800d374 <_scanf_float+0x3a0>
 800d3e6:	2500      	movs	r5, #0
 800d3e8:	e635      	b.n	800d056 <_scanf_float+0x82>
 800d3ea:	bf00      	nop
 800d3ec:	0802472c 	.word	0x0802472c
 800d3f0:	0802483b 	.word	0x0802483b

0800d3f4 <nanf>:
 800d3f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d3fc <nanf+0x8>
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	7fc00000 	.word	0x7fc00000

0800d400 <siprintf>:
 800d400:	b40e      	push	{r1, r2, r3}
 800d402:	b500      	push	{lr}
 800d404:	b09c      	sub	sp, #112	; 0x70
 800d406:	ab1d      	add	r3, sp, #116	; 0x74
 800d408:	9002      	str	r0, [sp, #8]
 800d40a:	9006      	str	r0, [sp, #24]
 800d40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d410:	4809      	ldr	r0, [pc, #36]	; (800d438 <siprintf+0x38>)
 800d412:	9107      	str	r1, [sp, #28]
 800d414:	9104      	str	r1, [sp, #16]
 800d416:	4909      	ldr	r1, [pc, #36]	; (800d43c <siprintf+0x3c>)
 800d418:	f853 2b04 	ldr.w	r2, [r3], #4
 800d41c:	9105      	str	r1, [sp, #20]
 800d41e:	6800      	ldr	r0, [r0, #0]
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	a902      	add	r1, sp, #8
 800d424:	f002 ff46 	bl	80102b4 <_svfiprintf_r>
 800d428:	9b02      	ldr	r3, [sp, #8]
 800d42a:	2200      	movs	r2, #0
 800d42c:	701a      	strb	r2, [r3, #0]
 800d42e:	b01c      	add	sp, #112	; 0x70
 800d430:	f85d eb04 	ldr.w	lr, [sp], #4
 800d434:	b003      	add	sp, #12
 800d436:	4770      	bx	lr
 800d438:	20000040 	.word	0x20000040
 800d43c:	ffff0208 	.word	0xffff0208

0800d440 <sulp>:
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	4604      	mov	r4, r0
 800d444:	460d      	mov	r5, r1
 800d446:	ec45 4b10 	vmov	d0, r4, r5
 800d44a:	4616      	mov	r6, r2
 800d44c:	f002 fcce 	bl	800fdec <__ulp>
 800d450:	ec51 0b10 	vmov	r0, r1, d0
 800d454:	b17e      	cbz	r6, 800d476 <sulp+0x36>
 800d456:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d45a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d45e:	2b00      	cmp	r3, #0
 800d460:	dd09      	ble.n	800d476 <sulp+0x36>
 800d462:	051b      	lsls	r3, r3, #20
 800d464:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d468:	2400      	movs	r4, #0
 800d46a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d46e:	4622      	mov	r2, r4
 800d470:	462b      	mov	r3, r5
 800d472:	f7f3 f8d9 	bl	8000628 <__aeabi_dmul>
 800d476:	bd70      	pop	{r4, r5, r6, pc}

0800d478 <_strtod_l>:
 800d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47c:	b0a3      	sub	sp, #140	; 0x8c
 800d47e:	461f      	mov	r7, r3
 800d480:	2300      	movs	r3, #0
 800d482:	931e      	str	r3, [sp, #120]	; 0x78
 800d484:	4ba4      	ldr	r3, [pc, #656]	; (800d718 <_strtod_l+0x2a0>)
 800d486:	9219      	str	r2, [sp, #100]	; 0x64
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	9307      	str	r3, [sp, #28]
 800d48c:	4604      	mov	r4, r0
 800d48e:	4618      	mov	r0, r3
 800d490:	4688      	mov	r8, r1
 800d492:	f7f2 feaf 	bl	80001f4 <strlen>
 800d496:	f04f 0a00 	mov.w	sl, #0
 800d49a:	4605      	mov	r5, r0
 800d49c:	f04f 0b00 	mov.w	fp, #0
 800d4a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d4a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d4a6:	781a      	ldrb	r2, [r3, #0]
 800d4a8:	2a2b      	cmp	r2, #43	; 0x2b
 800d4aa:	d04c      	beq.n	800d546 <_strtod_l+0xce>
 800d4ac:	d839      	bhi.n	800d522 <_strtod_l+0xaa>
 800d4ae:	2a0d      	cmp	r2, #13
 800d4b0:	d832      	bhi.n	800d518 <_strtod_l+0xa0>
 800d4b2:	2a08      	cmp	r2, #8
 800d4b4:	d832      	bhi.n	800d51c <_strtod_l+0xa4>
 800d4b6:	2a00      	cmp	r2, #0
 800d4b8:	d03c      	beq.n	800d534 <_strtod_l+0xbc>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	930e      	str	r3, [sp, #56]	; 0x38
 800d4be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d4c0:	7833      	ldrb	r3, [r6, #0]
 800d4c2:	2b30      	cmp	r3, #48	; 0x30
 800d4c4:	f040 80b4 	bne.w	800d630 <_strtod_l+0x1b8>
 800d4c8:	7873      	ldrb	r3, [r6, #1]
 800d4ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d4ce:	2b58      	cmp	r3, #88	; 0x58
 800d4d0:	d16c      	bne.n	800d5ac <_strtod_l+0x134>
 800d4d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4d4:	9301      	str	r3, [sp, #4]
 800d4d6:	ab1e      	add	r3, sp, #120	; 0x78
 800d4d8:	9702      	str	r7, [sp, #8]
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	4a8f      	ldr	r2, [pc, #572]	; (800d71c <_strtod_l+0x2a4>)
 800d4de:	ab1f      	add	r3, sp, #124	; 0x7c
 800d4e0:	a91d      	add	r1, sp, #116	; 0x74
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f001 fde2 	bl	800f0ac <__gethex>
 800d4e8:	f010 0707 	ands.w	r7, r0, #7
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	d005      	beq.n	800d4fc <_strtod_l+0x84>
 800d4f0:	2f06      	cmp	r7, #6
 800d4f2:	d12a      	bne.n	800d54a <_strtod_l+0xd2>
 800d4f4:	3601      	adds	r6, #1
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	961d      	str	r6, [sp, #116]	; 0x74
 800d4fa:	930e      	str	r3, [sp, #56]	; 0x38
 800d4fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	f040 8596 	bne.w	800e030 <_strtod_l+0xbb8>
 800d504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d506:	b1db      	cbz	r3, 800d540 <_strtod_l+0xc8>
 800d508:	4652      	mov	r2, sl
 800d50a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d50e:	ec43 2b10 	vmov	d0, r2, r3
 800d512:	b023      	add	sp, #140	; 0x8c
 800d514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d518:	2a20      	cmp	r2, #32
 800d51a:	d1ce      	bne.n	800d4ba <_strtod_l+0x42>
 800d51c:	3301      	adds	r3, #1
 800d51e:	931d      	str	r3, [sp, #116]	; 0x74
 800d520:	e7c0      	b.n	800d4a4 <_strtod_l+0x2c>
 800d522:	2a2d      	cmp	r2, #45	; 0x2d
 800d524:	d1c9      	bne.n	800d4ba <_strtod_l+0x42>
 800d526:	2201      	movs	r2, #1
 800d528:	920e      	str	r2, [sp, #56]	; 0x38
 800d52a:	1c5a      	adds	r2, r3, #1
 800d52c:	921d      	str	r2, [sp, #116]	; 0x74
 800d52e:	785b      	ldrb	r3, [r3, #1]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d1c4      	bne.n	800d4be <_strtod_l+0x46>
 800d534:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d536:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f040 8576 	bne.w	800e02c <_strtod_l+0xbb4>
 800d540:	4652      	mov	r2, sl
 800d542:	465b      	mov	r3, fp
 800d544:	e7e3      	b.n	800d50e <_strtod_l+0x96>
 800d546:	2200      	movs	r2, #0
 800d548:	e7ee      	b.n	800d528 <_strtod_l+0xb0>
 800d54a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d54c:	b13a      	cbz	r2, 800d55e <_strtod_l+0xe6>
 800d54e:	2135      	movs	r1, #53	; 0x35
 800d550:	a820      	add	r0, sp, #128	; 0x80
 800d552:	f002 fd56 	bl	8010002 <__copybits>
 800d556:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d558:	4620      	mov	r0, r4
 800d55a:	f002 f91b 	bl	800f794 <_Bfree>
 800d55e:	3f01      	subs	r7, #1
 800d560:	2f05      	cmp	r7, #5
 800d562:	d807      	bhi.n	800d574 <_strtod_l+0xfc>
 800d564:	e8df f007 	tbb	[pc, r7]
 800d568:	1d180b0e 	.word	0x1d180b0e
 800d56c:	030e      	.short	0x030e
 800d56e:	f04f 0b00 	mov.w	fp, #0
 800d572:	46da      	mov	sl, fp
 800d574:	0728      	lsls	r0, r5, #28
 800d576:	d5c1      	bpl.n	800d4fc <_strtod_l+0x84>
 800d578:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d57c:	e7be      	b.n	800d4fc <_strtod_l+0x84>
 800d57e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d582:	e7f7      	b.n	800d574 <_strtod_l+0xfc>
 800d584:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d588:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d58a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d58e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d592:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d596:	e7ed      	b.n	800d574 <_strtod_l+0xfc>
 800d598:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d720 <_strtod_l+0x2a8>
 800d59c:	f04f 0a00 	mov.w	sl, #0
 800d5a0:	e7e8      	b.n	800d574 <_strtod_l+0xfc>
 800d5a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d5a6:	f04f 3aff 	mov.w	sl, #4294967295
 800d5aa:	e7e3      	b.n	800d574 <_strtod_l+0xfc>
 800d5ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	921d      	str	r2, [sp, #116]	; 0x74
 800d5b2:	785b      	ldrb	r3, [r3, #1]
 800d5b4:	2b30      	cmp	r3, #48	; 0x30
 800d5b6:	d0f9      	beq.n	800d5ac <_strtod_l+0x134>
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d09f      	beq.n	800d4fc <_strtod_l+0x84>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	f04f 0900 	mov.w	r9, #0
 800d5c2:	9304      	str	r3, [sp, #16]
 800d5c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d5c6:	930a      	str	r3, [sp, #40]	; 0x28
 800d5c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d5cc:	464f      	mov	r7, r9
 800d5ce:	220a      	movs	r2, #10
 800d5d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d5d2:	7806      	ldrb	r6, [r0, #0]
 800d5d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d5d8:	b2d9      	uxtb	r1, r3
 800d5da:	2909      	cmp	r1, #9
 800d5dc:	d92a      	bls.n	800d634 <_strtod_l+0x1bc>
 800d5de:	9907      	ldr	r1, [sp, #28]
 800d5e0:	462a      	mov	r2, r5
 800d5e2:	f003 f8d9 	bl	8010798 <strncmp>
 800d5e6:	b398      	cbz	r0, 800d650 <_strtod_l+0x1d8>
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	4633      	mov	r3, r6
 800d5ec:	463d      	mov	r5, r7
 800d5ee:	9007      	str	r0, [sp, #28]
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	2b65      	cmp	r3, #101	; 0x65
 800d5f4:	d001      	beq.n	800d5fa <_strtod_l+0x182>
 800d5f6:	2b45      	cmp	r3, #69	; 0x45
 800d5f8:	d118      	bne.n	800d62c <_strtod_l+0x1b4>
 800d5fa:	b91d      	cbnz	r5, 800d604 <_strtod_l+0x18c>
 800d5fc:	9b04      	ldr	r3, [sp, #16]
 800d5fe:	4303      	orrs	r3, r0
 800d600:	d098      	beq.n	800d534 <_strtod_l+0xbc>
 800d602:	2500      	movs	r5, #0
 800d604:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d608:	f108 0301 	add.w	r3, r8, #1
 800d60c:	931d      	str	r3, [sp, #116]	; 0x74
 800d60e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d612:	2b2b      	cmp	r3, #43	; 0x2b
 800d614:	d075      	beq.n	800d702 <_strtod_l+0x28a>
 800d616:	2b2d      	cmp	r3, #45	; 0x2d
 800d618:	d07b      	beq.n	800d712 <_strtod_l+0x29a>
 800d61a:	f04f 0c00 	mov.w	ip, #0
 800d61e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d622:	2909      	cmp	r1, #9
 800d624:	f240 8082 	bls.w	800d72c <_strtod_l+0x2b4>
 800d628:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d62c:	2600      	movs	r6, #0
 800d62e:	e09d      	b.n	800d76c <_strtod_l+0x2f4>
 800d630:	2300      	movs	r3, #0
 800d632:	e7c4      	b.n	800d5be <_strtod_l+0x146>
 800d634:	2f08      	cmp	r7, #8
 800d636:	bfd8      	it	le
 800d638:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d63a:	f100 0001 	add.w	r0, r0, #1
 800d63e:	bfda      	itte	le
 800d640:	fb02 3301 	mlale	r3, r2, r1, r3
 800d644:	9309      	strle	r3, [sp, #36]	; 0x24
 800d646:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d64a:	3701      	adds	r7, #1
 800d64c:	901d      	str	r0, [sp, #116]	; 0x74
 800d64e:	e7bf      	b.n	800d5d0 <_strtod_l+0x158>
 800d650:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d652:	195a      	adds	r2, r3, r5
 800d654:	921d      	str	r2, [sp, #116]	; 0x74
 800d656:	5d5b      	ldrb	r3, [r3, r5]
 800d658:	2f00      	cmp	r7, #0
 800d65a:	d037      	beq.n	800d6cc <_strtod_l+0x254>
 800d65c:	9007      	str	r0, [sp, #28]
 800d65e:	463d      	mov	r5, r7
 800d660:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d664:	2a09      	cmp	r2, #9
 800d666:	d912      	bls.n	800d68e <_strtod_l+0x216>
 800d668:	2201      	movs	r2, #1
 800d66a:	e7c2      	b.n	800d5f2 <_strtod_l+0x17a>
 800d66c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d66e:	1c5a      	adds	r2, r3, #1
 800d670:	921d      	str	r2, [sp, #116]	; 0x74
 800d672:	785b      	ldrb	r3, [r3, #1]
 800d674:	3001      	adds	r0, #1
 800d676:	2b30      	cmp	r3, #48	; 0x30
 800d678:	d0f8      	beq.n	800d66c <_strtod_l+0x1f4>
 800d67a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d67e:	2a08      	cmp	r2, #8
 800d680:	f200 84db 	bhi.w	800e03a <_strtod_l+0xbc2>
 800d684:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d686:	9007      	str	r0, [sp, #28]
 800d688:	2000      	movs	r0, #0
 800d68a:	920a      	str	r2, [sp, #40]	; 0x28
 800d68c:	4605      	mov	r5, r0
 800d68e:	3b30      	subs	r3, #48	; 0x30
 800d690:	f100 0201 	add.w	r2, r0, #1
 800d694:	d014      	beq.n	800d6c0 <_strtod_l+0x248>
 800d696:	9907      	ldr	r1, [sp, #28]
 800d698:	4411      	add	r1, r2
 800d69a:	9107      	str	r1, [sp, #28]
 800d69c:	462a      	mov	r2, r5
 800d69e:	eb00 0e05 	add.w	lr, r0, r5
 800d6a2:	210a      	movs	r1, #10
 800d6a4:	4572      	cmp	r2, lr
 800d6a6:	d113      	bne.n	800d6d0 <_strtod_l+0x258>
 800d6a8:	182a      	adds	r2, r5, r0
 800d6aa:	2a08      	cmp	r2, #8
 800d6ac:	f105 0501 	add.w	r5, r5, #1
 800d6b0:	4405      	add	r5, r0
 800d6b2:	dc1c      	bgt.n	800d6ee <_strtod_l+0x276>
 800d6b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6b6:	220a      	movs	r2, #10
 800d6b8:	fb02 3301 	mla	r3, r2, r1, r3
 800d6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d6be:	2200      	movs	r2, #0
 800d6c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d6c2:	1c59      	adds	r1, r3, #1
 800d6c4:	911d      	str	r1, [sp, #116]	; 0x74
 800d6c6:	785b      	ldrb	r3, [r3, #1]
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	e7c9      	b.n	800d660 <_strtod_l+0x1e8>
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	e7d2      	b.n	800d676 <_strtod_l+0x1fe>
 800d6d0:	2a08      	cmp	r2, #8
 800d6d2:	dc04      	bgt.n	800d6de <_strtod_l+0x266>
 800d6d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d6d6:	434e      	muls	r6, r1
 800d6d8:	9609      	str	r6, [sp, #36]	; 0x24
 800d6da:	3201      	adds	r2, #1
 800d6dc:	e7e2      	b.n	800d6a4 <_strtod_l+0x22c>
 800d6de:	f102 0c01 	add.w	ip, r2, #1
 800d6e2:	f1bc 0f10 	cmp.w	ip, #16
 800d6e6:	bfd8      	it	le
 800d6e8:	fb01 f909 	mulle.w	r9, r1, r9
 800d6ec:	e7f5      	b.n	800d6da <_strtod_l+0x262>
 800d6ee:	2d10      	cmp	r5, #16
 800d6f0:	bfdc      	itt	le
 800d6f2:	220a      	movle	r2, #10
 800d6f4:	fb02 3909 	mlale	r9, r2, r9, r3
 800d6f8:	e7e1      	b.n	800d6be <_strtod_l+0x246>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	9307      	str	r3, [sp, #28]
 800d6fe:	2201      	movs	r2, #1
 800d700:	e77c      	b.n	800d5fc <_strtod_l+0x184>
 800d702:	f04f 0c00 	mov.w	ip, #0
 800d706:	f108 0302 	add.w	r3, r8, #2
 800d70a:	931d      	str	r3, [sp, #116]	; 0x74
 800d70c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d710:	e785      	b.n	800d61e <_strtod_l+0x1a6>
 800d712:	f04f 0c01 	mov.w	ip, #1
 800d716:	e7f6      	b.n	800d706 <_strtod_l+0x28e>
 800d718:	08024a24 	.word	0x08024a24
 800d71c:	08024734 	.word	0x08024734
 800d720:	7ff00000 	.word	0x7ff00000
 800d724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d726:	1c59      	adds	r1, r3, #1
 800d728:	911d      	str	r1, [sp, #116]	; 0x74
 800d72a:	785b      	ldrb	r3, [r3, #1]
 800d72c:	2b30      	cmp	r3, #48	; 0x30
 800d72e:	d0f9      	beq.n	800d724 <_strtod_l+0x2ac>
 800d730:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d734:	2908      	cmp	r1, #8
 800d736:	f63f af79 	bhi.w	800d62c <_strtod_l+0x1b4>
 800d73a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d73e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d740:	9308      	str	r3, [sp, #32]
 800d742:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d744:	1c59      	adds	r1, r3, #1
 800d746:	911d      	str	r1, [sp, #116]	; 0x74
 800d748:	785b      	ldrb	r3, [r3, #1]
 800d74a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d74e:	2e09      	cmp	r6, #9
 800d750:	d937      	bls.n	800d7c2 <_strtod_l+0x34a>
 800d752:	9e08      	ldr	r6, [sp, #32]
 800d754:	1b89      	subs	r1, r1, r6
 800d756:	2908      	cmp	r1, #8
 800d758:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d75c:	dc02      	bgt.n	800d764 <_strtod_l+0x2ec>
 800d75e:	4576      	cmp	r6, lr
 800d760:	bfa8      	it	ge
 800d762:	4676      	movge	r6, lr
 800d764:	f1bc 0f00 	cmp.w	ip, #0
 800d768:	d000      	beq.n	800d76c <_strtod_l+0x2f4>
 800d76a:	4276      	negs	r6, r6
 800d76c:	2d00      	cmp	r5, #0
 800d76e:	d14f      	bne.n	800d810 <_strtod_l+0x398>
 800d770:	9904      	ldr	r1, [sp, #16]
 800d772:	4301      	orrs	r1, r0
 800d774:	f47f aec2 	bne.w	800d4fc <_strtod_l+0x84>
 800d778:	2a00      	cmp	r2, #0
 800d77a:	f47f aedb 	bne.w	800d534 <_strtod_l+0xbc>
 800d77e:	2b69      	cmp	r3, #105	; 0x69
 800d780:	d027      	beq.n	800d7d2 <_strtod_l+0x35a>
 800d782:	dc24      	bgt.n	800d7ce <_strtod_l+0x356>
 800d784:	2b49      	cmp	r3, #73	; 0x49
 800d786:	d024      	beq.n	800d7d2 <_strtod_l+0x35a>
 800d788:	2b4e      	cmp	r3, #78	; 0x4e
 800d78a:	f47f aed3 	bne.w	800d534 <_strtod_l+0xbc>
 800d78e:	499e      	ldr	r1, [pc, #632]	; (800da08 <_strtod_l+0x590>)
 800d790:	a81d      	add	r0, sp, #116	; 0x74
 800d792:	f001 fee3 	bl	800f55c <__match>
 800d796:	2800      	cmp	r0, #0
 800d798:	f43f aecc 	beq.w	800d534 <_strtod_l+0xbc>
 800d79c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	2b28      	cmp	r3, #40	; 0x28
 800d7a2:	d12d      	bne.n	800d800 <_strtod_l+0x388>
 800d7a4:	4999      	ldr	r1, [pc, #612]	; (800da0c <_strtod_l+0x594>)
 800d7a6:	aa20      	add	r2, sp, #128	; 0x80
 800d7a8:	a81d      	add	r0, sp, #116	; 0x74
 800d7aa:	f001 feeb 	bl	800f584 <__hexnan>
 800d7ae:	2805      	cmp	r0, #5
 800d7b0:	d126      	bne.n	800d800 <_strtod_l+0x388>
 800d7b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d7b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d7bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d7c0:	e69c      	b.n	800d4fc <_strtod_l+0x84>
 800d7c2:	210a      	movs	r1, #10
 800d7c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d7c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d7cc:	e7b9      	b.n	800d742 <_strtod_l+0x2ca>
 800d7ce:	2b6e      	cmp	r3, #110	; 0x6e
 800d7d0:	e7db      	b.n	800d78a <_strtod_l+0x312>
 800d7d2:	498f      	ldr	r1, [pc, #572]	; (800da10 <_strtod_l+0x598>)
 800d7d4:	a81d      	add	r0, sp, #116	; 0x74
 800d7d6:	f001 fec1 	bl	800f55c <__match>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	f43f aeaa 	beq.w	800d534 <_strtod_l+0xbc>
 800d7e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7e2:	498c      	ldr	r1, [pc, #560]	; (800da14 <_strtod_l+0x59c>)
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	a81d      	add	r0, sp, #116	; 0x74
 800d7e8:	931d      	str	r3, [sp, #116]	; 0x74
 800d7ea:	f001 feb7 	bl	800f55c <__match>
 800d7ee:	b910      	cbnz	r0, 800d7f6 <_strtod_l+0x37e>
 800d7f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	931d      	str	r3, [sp, #116]	; 0x74
 800d7f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800da24 <_strtod_l+0x5ac>
 800d7fa:	f04f 0a00 	mov.w	sl, #0
 800d7fe:	e67d      	b.n	800d4fc <_strtod_l+0x84>
 800d800:	4885      	ldr	r0, [pc, #532]	; (800da18 <_strtod_l+0x5a0>)
 800d802:	f002 ffb1 	bl	8010768 <nan>
 800d806:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d80a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d80e:	e675      	b.n	800d4fc <_strtod_l+0x84>
 800d810:	9b07      	ldr	r3, [sp, #28]
 800d812:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d814:	1af3      	subs	r3, r6, r3
 800d816:	2f00      	cmp	r7, #0
 800d818:	bf08      	it	eq
 800d81a:	462f      	moveq	r7, r5
 800d81c:	2d10      	cmp	r5, #16
 800d81e:	9308      	str	r3, [sp, #32]
 800d820:	46a8      	mov	r8, r5
 800d822:	bfa8      	it	ge
 800d824:	f04f 0810 	movge.w	r8, #16
 800d828:	f7f2 fe84 	bl	8000534 <__aeabi_ui2d>
 800d82c:	2d09      	cmp	r5, #9
 800d82e:	4682      	mov	sl, r0
 800d830:	468b      	mov	fp, r1
 800d832:	dd13      	ble.n	800d85c <_strtod_l+0x3e4>
 800d834:	4b79      	ldr	r3, [pc, #484]	; (800da1c <_strtod_l+0x5a4>)
 800d836:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d83a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d83e:	f7f2 fef3 	bl	8000628 <__aeabi_dmul>
 800d842:	4682      	mov	sl, r0
 800d844:	4648      	mov	r0, r9
 800d846:	468b      	mov	fp, r1
 800d848:	f7f2 fe74 	bl	8000534 <__aeabi_ui2d>
 800d84c:	4602      	mov	r2, r0
 800d84e:	460b      	mov	r3, r1
 800d850:	4650      	mov	r0, sl
 800d852:	4659      	mov	r1, fp
 800d854:	f7f2 fd32 	bl	80002bc <__adddf3>
 800d858:	4682      	mov	sl, r0
 800d85a:	468b      	mov	fp, r1
 800d85c:	2d0f      	cmp	r5, #15
 800d85e:	dc38      	bgt.n	800d8d2 <_strtod_l+0x45a>
 800d860:	9b08      	ldr	r3, [sp, #32]
 800d862:	2b00      	cmp	r3, #0
 800d864:	f43f ae4a 	beq.w	800d4fc <_strtod_l+0x84>
 800d868:	dd24      	ble.n	800d8b4 <_strtod_l+0x43c>
 800d86a:	2b16      	cmp	r3, #22
 800d86c:	dc0b      	bgt.n	800d886 <_strtod_l+0x40e>
 800d86e:	4d6b      	ldr	r5, [pc, #428]	; (800da1c <_strtod_l+0x5a4>)
 800d870:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d874:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d878:	4652      	mov	r2, sl
 800d87a:	465b      	mov	r3, fp
 800d87c:	f7f2 fed4 	bl	8000628 <__aeabi_dmul>
 800d880:	4682      	mov	sl, r0
 800d882:	468b      	mov	fp, r1
 800d884:	e63a      	b.n	800d4fc <_strtod_l+0x84>
 800d886:	9a08      	ldr	r2, [sp, #32]
 800d888:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d88c:	4293      	cmp	r3, r2
 800d88e:	db20      	blt.n	800d8d2 <_strtod_l+0x45a>
 800d890:	4c62      	ldr	r4, [pc, #392]	; (800da1c <_strtod_l+0x5a4>)
 800d892:	f1c5 050f 	rsb	r5, r5, #15
 800d896:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d89a:	4652      	mov	r2, sl
 800d89c:	465b      	mov	r3, fp
 800d89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8a2:	f7f2 fec1 	bl	8000628 <__aeabi_dmul>
 800d8a6:	9b08      	ldr	r3, [sp, #32]
 800d8a8:	1b5d      	subs	r5, r3, r5
 800d8aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d8ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d8b2:	e7e3      	b.n	800d87c <_strtod_l+0x404>
 800d8b4:	9b08      	ldr	r3, [sp, #32]
 800d8b6:	3316      	adds	r3, #22
 800d8b8:	db0b      	blt.n	800d8d2 <_strtod_l+0x45a>
 800d8ba:	9b07      	ldr	r3, [sp, #28]
 800d8bc:	4a57      	ldr	r2, [pc, #348]	; (800da1c <_strtod_l+0x5a4>)
 800d8be:	1b9e      	subs	r6, r3, r6
 800d8c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d8c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d8c8:	4650      	mov	r0, sl
 800d8ca:	4659      	mov	r1, fp
 800d8cc:	f7f2 ffd6 	bl	800087c <__aeabi_ddiv>
 800d8d0:	e7d6      	b.n	800d880 <_strtod_l+0x408>
 800d8d2:	9b08      	ldr	r3, [sp, #32]
 800d8d4:	eba5 0808 	sub.w	r8, r5, r8
 800d8d8:	4498      	add	r8, r3
 800d8da:	f1b8 0f00 	cmp.w	r8, #0
 800d8de:	dd71      	ble.n	800d9c4 <_strtod_l+0x54c>
 800d8e0:	f018 030f 	ands.w	r3, r8, #15
 800d8e4:	d00a      	beq.n	800d8fc <_strtod_l+0x484>
 800d8e6:	494d      	ldr	r1, [pc, #308]	; (800da1c <_strtod_l+0x5a4>)
 800d8e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8ec:	4652      	mov	r2, sl
 800d8ee:	465b      	mov	r3, fp
 800d8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8f4:	f7f2 fe98 	bl	8000628 <__aeabi_dmul>
 800d8f8:	4682      	mov	sl, r0
 800d8fa:	468b      	mov	fp, r1
 800d8fc:	f038 080f 	bics.w	r8, r8, #15
 800d900:	d04d      	beq.n	800d99e <_strtod_l+0x526>
 800d902:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d906:	dd22      	ble.n	800d94e <_strtod_l+0x4d6>
 800d908:	2500      	movs	r5, #0
 800d90a:	462e      	mov	r6, r5
 800d90c:	9509      	str	r5, [sp, #36]	; 0x24
 800d90e:	9507      	str	r5, [sp, #28]
 800d910:	2322      	movs	r3, #34	; 0x22
 800d912:	f8df b110 	ldr.w	fp, [pc, #272]	; 800da24 <_strtod_l+0x5ac>
 800d916:	6023      	str	r3, [r4, #0]
 800d918:	f04f 0a00 	mov.w	sl, #0
 800d91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f43f adec 	beq.w	800d4fc <_strtod_l+0x84>
 800d924:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d926:	4620      	mov	r0, r4
 800d928:	f001 ff34 	bl	800f794 <_Bfree>
 800d92c:	9907      	ldr	r1, [sp, #28]
 800d92e:	4620      	mov	r0, r4
 800d930:	f001 ff30 	bl	800f794 <_Bfree>
 800d934:	4631      	mov	r1, r6
 800d936:	4620      	mov	r0, r4
 800d938:	f001 ff2c 	bl	800f794 <_Bfree>
 800d93c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d93e:	4620      	mov	r0, r4
 800d940:	f001 ff28 	bl	800f794 <_Bfree>
 800d944:	4629      	mov	r1, r5
 800d946:	4620      	mov	r0, r4
 800d948:	f001 ff24 	bl	800f794 <_Bfree>
 800d94c:	e5d6      	b.n	800d4fc <_strtod_l+0x84>
 800d94e:	2300      	movs	r3, #0
 800d950:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d954:	4650      	mov	r0, sl
 800d956:	4659      	mov	r1, fp
 800d958:	4699      	mov	r9, r3
 800d95a:	f1b8 0f01 	cmp.w	r8, #1
 800d95e:	dc21      	bgt.n	800d9a4 <_strtod_l+0x52c>
 800d960:	b10b      	cbz	r3, 800d966 <_strtod_l+0x4ee>
 800d962:	4682      	mov	sl, r0
 800d964:	468b      	mov	fp, r1
 800d966:	4b2e      	ldr	r3, [pc, #184]	; (800da20 <_strtod_l+0x5a8>)
 800d968:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d96c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d970:	4652      	mov	r2, sl
 800d972:	465b      	mov	r3, fp
 800d974:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d978:	f7f2 fe56 	bl	8000628 <__aeabi_dmul>
 800d97c:	4b29      	ldr	r3, [pc, #164]	; (800da24 <_strtod_l+0x5ac>)
 800d97e:	460a      	mov	r2, r1
 800d980:	400b      	ands	r3, r1
 800d982:	4929      	ldr	r1, [pc, #164]	; (800da28 <_strtod_l+0x5b0>)
 800d984:	428b      	cmp	r3, r1
 800d986:	4682      	mov	sl, r0
 800d988:	d8be      	bhi.n	800d908 <_strtod_l+0x490>
 800d98a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d98e:	428b      	cmp	r3, r1
 800d990:	bf86      	itte	hi
 800d992:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800da2c <_strtod_l+0x5b4>
 800d996:	f04f 3aff 	movhi.w	sl, #4294967295
 800d99a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d99e:	2300      	movs	r3, #0
 800d9a0:	9304      	str	r3, [sp, #16]
 800d9a2:	e081      	b.n	800daa8 <_strtod_l+0x630>
 800d9a4:	f018 0f01 	tst.w	r8, #1
 800d9a8:	d007      	beq.n	800d9ba <_strtod_l+0x542>
 800d9aa:	4b1d      	ldr	r3, [pc, #116]	; (800da20 <_strtod_l+0x5a8>)
 800d9ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b4:	f7f2 fe38 	bl	8000628 <__aeabi_dmul>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	f109 0901 	add.w	r9, r9, #1
 800d9be:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d9c2:	e7ca      	b.n	800d95a <_strtod_l+0x4e2>
 800d9c4:	d0eb      	beq.n	800d99e <_strtod_l+0x526>
 800d9c6:	f1c8 0800 	rsb	r8, r8, #0
 800d9ca:	f018 020f 	ands.w	r2, r8, #15
 800d9ce:	d00a      	beq.n	800d9e6 <_strtod_l+0x56e>
 800d9d0:	4b12      	ldr	r3, [pc, #72]	; (800da1c <_strtod_l+0x5a4>)
 800d9d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9d6:	4650      	mov	r0, sl
 800d9d8:	4659      	mov	r1, fp
 800d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9de:	f7f2 ff4d 	bl	800087c <__aeabi_ddiv>
 800d9e2:	4682      	mov	sl, r0
 800d9e4:	468b      	mov	fp, r1
 800d9e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d9ea:	d0d8      	beq.n	800d99e <_strtod_l+0x526>
 800d9ec:	f1b8 0f1f 	cmp.w	r8, #31
 800d9f0:	dd1e      	ble.n	800da30 <_strtod_l+0x5b8>
 800d9f2:	2500      	movs	r5, #0
 800d9f4:	462e      	mov	r6, r5
 800d9f6:	9509      	str	r5, [sp, #36]	; 0x24
 800d9f8:	9507      	str	r5, [sp, #28]
 800d9fa:	2322      	movs	r3, #34	; 0x22
 800d9fc:	f04f 0a00 	mov.w	sl, #0
 800da00:	f04f 0b00 	mov.w	fp, #0
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	e789      	b.n	800d91c <_strtod_l+0x4a4>
 800da08:	08024705 	.word	0x08024705
 800da0c:	08024748 	.word	0x08024748
 800da10:	080246fd 	.word	0x080246fd
 800da14:	08024940 	.word	0x08024940
 800da18:	0802483b 	.word	0x0802483b
 800da1c:	08024ac0 	.word	0x08024ac0
 800da20:	08024a98 	.word	0x08024a98
 800da24:	7ff00000 	.word	0x7ff00000
 800da28:	7ca00000 	.word	0x7ca00000
 800da2c:	7fefffff 	.word	0x7fefffff
 800da30:	f018 0310 	ands.w	r3, r8, #16
 800da34:	bf18      	it	ne
 800da36:	236a      	movne	r3, #106	; 0x6a
 800da38:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ddf0 <_strtod_l+0x978>
 800da3c:	9304      	str	r3, [sp, #16]
 800da3e:	4650      	mov	r0, sl
 800da40:	4659      	mov	r1, fp
 800da42:	2300      	movs	r3, #0
 800da44:	f018 0f01 	tst.w	r8, #1
 800da48:	d004      	beq.n	800da54 <_strtod_l+0x5dc>
 800da4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800da4e:	f7f2 fdeb 	bl	8000628 <__aeabi_dmul>
 800da52:	2301      	movs	r3, #1
 800da54:	ea5f 0868 	movs.w	r8, r8, asr #1
 800da58:	f109 0908 	add.w	r9, r9, #8
 800da5c:	d1f2      	bne.n	800da44 <_strtod_l+0x5cc>
 800da5e:	b10b      	cbz	r3, 800da64 <_strtod_l+0x5ec>
 800da60:	4682      	mov	sl, r0
 800da62:	468b      	mov	fp, r1
 800da64:	9b04      	ldr	r3, [sp, #16]
 800da66:	b1bb      	cbz	r3, 800da98 <_strtod_l+0x620>
 800da68:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800da6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da70:	2b00      	cmp	r3, #0
 800da72:	4659      	mov	r1, fp
 800da74:	dd10      	ble.n	800da98 <_strtod_l+0x620>
 800da76:	2b1f      	cmp	r3, #31
 800da78:	f340 8128 	ble.w	800dccc <_strtod_l+0x854>
 800da7c:	2b34      	cmp	r3, #52	; 0x34
 800da7e:	bfde      	ittt	le
 800da80:	3b20      	suble	r3, #32
 800da82:	f04f 32ff 	movle.w	r2, #4294967295
 800da86:	fa02 f303 	lslle.w	r3, r2, r3
 800da8a:	f04f 0a00 	mov.w	sl, #0
 800da8e:	bfcc      	ite	gt
 800da90:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800da94:	ea03 0b01 	andle.w	fp, r3, r1
 800da98:	2200      	movs	r2, #0
 800da9a:	2300      	movs	r3, #0
 800da9c:	4650      	mov	r0, sl
 800da9e:	4659      	mov	r1, fp
 800daa0:	f7f3 f82a 	bl	8000af8 <__aeabi_dcmpeq>
 800daa4:	2800      	cmp	r0, #0
 800daa6:	d1a4      	bne.n	800d9f2 <_strtod_l+0x57a>
 800daa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800daae:	462b      	mov	r3, r5
 800dab0:	463a      	mov	r2, r7
 800dab2:	4620      	mov	r0, r4
 800dab4:	f001 feda 	bl	800f86c <__s2b>
 800dab8:	9009      	str	r0, [sp, #36]	; 0x24
 800daba:	2800      	cmp	r0, #0
 800dabc:	f43f af24 	beq.w	800d908 <_strtod_l+0x490>
 800dac0:	9b07      	ldr	r3, [sp, #28]
 800dac2:	1b9e      	subs	r6, r3, r6
 800dac4:	9b08      	ldr	r3, [sp, #32]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	bfb4      	ite	lt
 800daca:	4633      	movlt	r3, r6
 800dacc:	2300      	movge	r3, #0
 800dace:	9310      	str	r3, [sp, #64]	; 0x40
 800dad0:	9b08      	ldr	r3, [sp, #32]
 800dad2:	2500      	movs	r5, #0
 800dad4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dad8:	9318      	str	r3, [sp, #96]	; 0x60
 800dada:	462e      	mov	r6, r5
 800dadc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dade:	4620      	mov	r0, r4
 800dae0:	6859      	ldr	r1, [r3, #4]
 800dae2:	f001 fe17 	bl	800f714 <_Balloc>
 800dae6:	9007      	str	r0, [sp, #28]
 800dae8:	2800      	cmp	r0, #0
 800daea:	f43f af11 	beq.w	800d910 <_strtod_l+0x498>
 800daee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf0:	691a      	ldr	r2, [r3, #16]
 800daf2:	3202      	adds	r2, #2
 800daf4:	f103 010c 	add.w	r1, r3, #12
 800daf8:	0092      	lsls	r2, r2, #2
 800dafa:	300c      	adds	r0, #12
 800dafc:	f001 fdfc 	bl	800f6f8 <memcpy>
 800db00:	ec4b ab10 	vmov	d0, sl, fp
 800db04:	aa20      	add	r2, sp, #128	; 0x80
 800db06:	a91f      	add	r1, sp, #124	; 0x7c
 800db08:	4620      	mov	r0, r4
 800db0a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800db0e:	f002 f9e9 	bl	800fee4 <__d2b>
 800db12:	901e      	str	r0, [sp, #120]	; 0x78
 800db14:	2800      	cmp	r0, #0
 800db16:	f43f aefb 	beq.w	800d910 <_strtod_l+0x498>
 800db1a:	2101      	movs	r1, #1
 800db1c:	4620      	mov	r0, r4
 800db1e:	f001 ff3f 	bl	800f9a0 <__i2b>
 800db22:	4606      	mov	r6, r0
 800db24:	2800      	cmp	r0, #0
 800db26:	f43f aef3 	beq.w	800d910 <_strtod_l+0x498>
 800db2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800db2c:	9904      	ldr	r1, [sp, #16]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	bfab      	itete	ge
 800db32:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800db34:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800db36:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800db38:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800db3c:	bfac      	ite	ge
 800db3e:	eb03 0902 	addge.w	r9, r3, r2
 800db42:	1ad7      	sublt	r7, r2, r3
 800db44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800db46:	eba3 0801 	sub.w	r8, r3, r1
 800db4a:	4490      	add	r8, r2
 800db4c:	4ba3      	ldr	r3, [pc, #652]	; (800dddc <_strtod_l+0x964>)
 800db4e:	f108 38ff 	add.w	r8, r8, #4294967295
 800db52:	4598      	cmp	r8, r3
 800db54:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db58:	f280 80cc 	bge.w	800dcf4 <_strtod_l+0x87c>
 800db5c:	eba3 0308 	sub.w	r3, r3, r8
 800db60:	2b1f      	cmp	r3, #31
 800db62:	eba2 0203 	sub.w	r2, r2, r3
 800db66:	f04f 0101 	mov.w	r1, #1
 800db6a:	f300 80b6 	bgt.w	800dcda <_strtod_l+0x862>
 800db6e:	fa01 f303 	lsl.w	r3, r1, r3
 800db72:	9311      	str	r3, [sp, #68]	; 0x44
 800db74:	2300      	movs	r3, #0
 800db76:	930c      	str	r3, [sp, #48]	; 0x30
 800db78:	eb09 0802 	add.w	r8, r9, r2
 800db7c:	9b04      	ldr	r3, [sp, #16]
 800db7e:	45c1      	cmp	r9, r8
 800db80:	4417      	add	r7, r2
 800db82:	441f      	add	r7, r3
 800db84:	464b      	mov	r3, r9
 800db86:	bfa8      	it	ge
 800db88:	4643      	movge	r3, r8
 800db8a:	42bb      	cmp	r3, r7
 800db8c:	bfa8      	it	ge
 800db8e:	463b      	movge	r3, r7
 800db90:	2b00      	cmp	r3, #0
 800db92:	bfc2      	ittt	gt
 800db94:	eba8 0803 	subgt.w	r8, r8, r3
 800db98:	1aff      	subgt	r7, r7, r3
 800db9a:	eba9 0903 	subgt.w	r9, r9, r3
 800db9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	dd17      	ble.n	800dbd4 <_strtod_l+0x75c>
 800dba4:	4631      	mov	r1, r6
 800dba6:	461a      	mov	r2, r3
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f001 ffb5 	bl	800fb18 <__pow5mult>
 800dbae:	4606      	mov	r6, r0
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	f43f aead 	beq.w	800d910 <_strtod_l+0x498>
 800dbb6:	4601      	mov	r1, r0
 800dbb8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f001 ff06 	bl	800f9cc <__multiply>
 800dbc0:	900f      	str	r0, [sp, #60]	; 0x3c
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	f43f aea4 	beq.w	800d910 <_strtod_l+0x498>
 800dbc8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f001 fde2 	bl	800f794 <_Bfree>
 800dbd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbd2:	931e      	str	r3, [sp, #120]	; 0x78
 800dbd4:	f1b8 0f00 	cmp.w	r8, #0
 800dbd8:	f300 8091 	bgt.w	800dcfe <_strtod_l+0x886>
 800dbdc:	9b08      	ldr	r3, [sp, #32]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	dd08      	ble.n	800dbf4 <_strtod_l+0x77c>
 800dbe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dbe4:	9907      	ldr	r1, [sp, #28]
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f001 ff96 	bl	800fb18 <__pow5mult>
 800dbec:	9007      	str	r0, [sp, #28]
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	f43f ae8e 	beq.w	800d910 <_strtod_l+0x498>
 800dbf4:	2f00      	cmp	r7, #0
 800dbf6:	dd08      	ble.n	800dc0a <_strtod_l+0x792>
 800dbf8:	9907      	ldr	r1, [sp, #28]
 800dbfa:	463a      	mov	r2, r7
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f001 ffe5 	bl	800fbcc <__lshift>
 800dc02:	9007      	str	r0, [sp, #28]
 800dc04:	2800      	cmp	r0, #0
 800dc06:	f43f ae83 	beq.w	800d910 <_strtod_l+0x498>
 800dc0a:	f1b9 0f00 	cmp.w	r9, #0
 800dc0e:	dd08      	ble.n	800dc22 <_strtod_l+0x7aa>
 800dc10:	4631      	mov	r1, r6
 800dc12:	464a      	mov	r2, r9
 800dc14:	4620      	mov	r0, r4
 800dc16:	f001 ffd9 	bl	800fbcc <__lshift>
 800dc1a:	4606      	mov	r6, r0
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	f43f ae77 	beq.w	800d910 <_strtod_l+0x498>
 800dc22:	9a07      	ldr	r2, [sp, #28]
 800dc24:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dc26:	4620      	mov	r0, r4
 800dc28:	f002 f858 	bl	800fcdc <__mdiff>
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	f43f ae6e 	beq.w	800d910 <_strtod_l+0x498>
 800dc34:	68c3      	ldr	r3, [r0, #12]
 800dc36:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc38:	2300      	movs	r3, #0
 800dc3a:	60c3      	str	r3, [r0, #12]
 800dc3c:	4631      	mov	r1, r6
 800dc3e:	f002 f831 	bl	800fca4 <__mcmp>
 800dc42:	2800      	cmp	r0, #0
 800dc44:	da65      	bge.n	800dd12 <_strtod_l+0x89a>
 800dc46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc48:	ea53 030a 	orrs.w	r3, r3, sl
 800dc4c:	f040 8087 	bne.w	800dd5e <_strtod_l+0x8e6>
 800dc50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	f040 8082 	bne.w	800dd5e <_strtod_l+0x8e6>
 800dc5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc5e:	0d1b      	lsrs	r3, r3, #20
 800dc60:	051b      	lsls	r3, r3, #20
 800dc62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dc66:	d97a      	bls.n	800dd5e <_strtod_l+0x8e6>
 800dc68:	696b      	ldr	r3, [r5, #20]
 800dc6a:	b913      	cbnz	r3, 800dc72 <_strtod_l+0x7fa>
 800dc6c:	692b      	ldr	r3, [r5, #16]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	dd75      	ble.n	800dd5e <_strtod_l+0x8e6>
 800dc72:	4629      	mov	r1, r5
 800dc74:	2201      	movs	r2, #1
 800dc76:	4620      	mov	r0, r4
 800dc78:	f001 ffa8 	bl	800fbcc <__lshift>
 800dc7c:	4631      	mov	r1, r6
 800dc7e:	4605      	mov	r5, r0
 800dc80:	f002 f810 	bl	800fca4 <__mcmp>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	dd6a      	ble.n	800dd5e <_strtod_l+0x8e6>
 800dc88:	9904      	ldr	r1, [sp, #16]
 800dc8a:	4a55      	ldr	r2, [pc, #340]	; (800dde0 <_strtod_l+0x968>)
 800dc8c:	465b      	mov	r3, fp
 800dc8e:	2900      	cmp	r1, #0
 800dc90:	f000 8085 	beq.w	800dd9e <_strtod_l+0x926>
 800dc94:	ea02 010b 	and.w	r1, r2, fp
 800dc98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dc9c:	dc7f      	bgt.n	800dd9e <_strtod_l+0x926>
 800dc9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dca2:	f77f aeaa 	ble.w	800d9fa <_strtod_l+0x582>
 800dca6:	4a4f      	ldr	r2, [pc, #316]	; (800dde4 <_strtod_l+0x96c>)
 800dca8:	2300      	movs	r3, #0
 800dcaa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800dcae:	4650      	mov	r0, sl
 800dcb0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800dcb4:	4659      	mov	r1, fp
 800dcb6:	f7f2 fcb7 	bl	8000628 <__aeabi_dmul>
 800dcba:	460b      	mov	r3, r1
 800dcbc:	4303      	orrs	r3, r0
 800dcbe:	bf08      	it	eq
 800dcc0:	2322      	moveq	r3, #34	; 0x22
 800dcc2:	4682      	mov	sl, r0
 800dcc4:	468b      	mov	fp, r1
 800dcc6:	bf08      	it	eq
 800dcc8:	6023      	streq	r3, [r4, #0]
 800dcca:	e62b      	b.n	800d924 <_strtod_l+0x4ac>
 800dccc:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd4:	ea03 0a0a 	and.w	sl, r3, sl
 800dcd8:	e6de      	b.n	800da98 <_strtod_l+0x620>
 800dcda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dcde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dce2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dce6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dcea:	fa01 f308 	lsl.w	r3, r1, r8
 800dcee:	930c      	str	r3, [sp, #48]	; 0x30
 800dcf0:	9111      	str	r1, [sp, #68]	; 0x44
 800dcf2:	e741      	b.n	800db78 <_strtod_l+0x700>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	930c      	str	r3, [sp, #48]	; 0x30
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	9311      	str	r3, [sp, #68]	; 0x44
 800dcfc:	e73c      	b.n	800db78 <_strtod_l+0x700>
 800dcfe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dd00:	4642      	mov	r2, r8
 800dd02:	4620      	mov	r0, r4
 800dd04:	f001 ff62 	bl	800fbcc <__lshift>
 800dd08:	901e      	str	r0, [sp, #120]	; 0x78
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f47f af66 	bne.w	800dbdc <_strtod_l+0x764>
 800dd10:	e5fe      	b.n	800d910 <_strtod_l+0x498>
 800dd12:	465f      	mov	r7, fp
 800dd14:	d16e      	bne.n	800ddf4 <_strtod_l+0x97c>
 800dd16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd1c:	b342      	cbz	r2, 800dd70 <_strtod_l+0x8f8>
 800dd1e:	4a32      	ldr	r2, [pc, #200]	; (800dde8 <_strtod_l+0x970>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d128      	bne.n	800dd76 <_strtod_l+0x8fe>
 800dd24:	9b04      	ldr	r3, [sp, #16]
 800dd26:	4650      	mov	r0, sl
 800dd28:	b1eb      	cbz	r3, 800dd66 <_strtod_l+0x8ee>
 800dd2a:	4a2d      	ldr	r2, [pc, #180]	; (800dde0 <_strtod_l+0x968>)
 800dd2c:	403a      	ands	r2, r7
 800dd2e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800dd32:	f04f 31ff 	mov.w	r1, #4294967295
 800dd36:	d819      	bhi.n	800dd6c <_strtod_l+0x8f4>
 800dd38:	0d12      	lsrs	r2, r2, #20
 800dd3a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dd3e:	fa01 f303 	lsl.w	r3, r1, r3
 800dd42:	4298      	cmp	r0, r3
 800dd44:	d117      	bne.n	800dd76 <_strtod_l+0x8fe>
 800dd46:	4b29      	ldr	r3, [pc, #164]	; (800ddec <_strtod_l+0x974>)
 800dd48:	429f      	cmp	r7, r3
 800dd4a:	d102      	bne.n	800dd52 <_strtod_l+0x8da>
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	f43f addf 	beq.w	800d910 <_strtod_l+0x498>
 800dd52:	4b23      	ldr	r3, [pc, #140]	; (800dde0 <_strtod_l+0x968>)
 800dd54:	403b      	ands	r3, r7
 800dd56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dd5a:	f04f 0a00 	mov.w	sl, #0
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1a0      	bne.n	800dca6 <_strtod_l+0x82e>
 800dd64:	e5de      	b.n	800d924 <_strtod_l+0x4ac>
 800dd66:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6a:	e7ea      	b.n	800dd42 <_strtod_l+0x8ca>
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	e7e8      	b.n	800dd42 <_strtod_l+0x8ca>
 800dd70:	ea53 030a 	orrs.w	r3, r3, sl
 800dd74:	d088      	beq.n	800dc88 <_strtod_l+0x810>
 800dd76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd78:	b1db      	cbz	r3, 800ddb2 <_strtod_l+0x93a>
 800dd7a:	423b      	tst	r3, r7
 800dd7c:	d0ef      	beq.n	800dd5e <_strtod_l+0x8e6>
 800dd7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd80:	9a04      	ldr	r2, [sp, #16]
 800dd82:	4650      	mov	r0, sl
 800dd84:	4659      	mov	r1, fp
 800dd86:	b1c3      	cbz	r3, 800ddba <_strtod_l+0x942>
 800dd88:	f7ff fb5a 	bl	800d440 <sulp>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd94:	f7f2 fa92 	bl	80002bc <__adddf3>
 800dd98:	4682      	mov	sl, r0
 800dd9a:	468b      	mov	fp, r1
 800dd9c:	e7df      	b.n	800dd5e <_strtod_l+0x8e6>
 800dd9e:	4013      	ands	r3, r2
 800dda0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dda4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dda8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ddac:	f04f 3aff 	mov.w	sl, #4294967295
 800ddb0:	e7d5      	b.n	800dd5e <_strtod_l+0x8e6>
 800ddb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddb4:	ea13 0f0a 	tst.w	r3, sl
 800ddb8:	e7e0      	b.n	800dd7c <_strtod_l+0x904>
 800ddba:	f7ff fb41 	bl	800d440 <sulp>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ddc6:	f7f2 fa77 	bl	80002b8 <__aeabi_dsub>
 800ddca:	2200      	movs	r2, #0
 800ddcc:	2300      	movs	r3, #0
 800ddce:	4682      	mov	sl, r0
 800ddd0:	468b      	mov	fp, r1
 800ddd2:	f7f2 fe91 	bl	8000af8 <__aeabi_dcmpeq>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d0c1      	beq.n	800dd5e <_strtod_l+0x8e6>
 800ddda:	e60e      	b.n	800d9fa <_strtod_l+0x582>
 800dddc:	fffffc02 	.word	0xfffffc02
 800dde0:	7ff00000 	.word	0x7ff00000
 800dde4:	39500000 	.word	0x39500000
 800dde8:	000fffff 	.word	0x000fffff
 800ddec:	7fefffff 	.word	0x7fefffff
 800ddf0:	08024760 	.word	0x08024760
 800ddf4:	4631      	mov	r1, r6
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f002 f8d0 	bl	800ff9c <__ratio>
 800ddfc:	ec59 8b10 	vmov	r8, r9, d0
 800de00:	ee10 0a10 	vmov	r0, s0
 800de04:	2200      	movs	r2, #0
 800de06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de0a:	4649      	mov	r1, r9
 800de0c:	f7f2 fe88 	bl	8000b20 <__aeabi_dcmple>
 800de10:	2800      	cmp	r0, #0
 800de12:	d07c      	beq.n	800df0e <_strtod_l+0xa96>
 800de14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de16:	2b00      	cmp	r3, #0
 800de18:	d04c      	beq.n	800deb4 <_strtod_l+0xa3c>
 800de1a:	4b95      	ldr	r3, [pc, #596]	; (800e070 <_strtod_l+0xbf8>)
 800de1c:	2200      	movs	r2, #0
 800de1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800de22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e070 <_strtod_l+0xbf8>
 800de26:	f04f 0800 	mov.w	r8, #0
 800de2a:	4b92      	ldr	r3, [pc, #584]	; (800e074 <_strtod_l+0xbfc>)
 800de2c:	403b      	ands	r3, r7
 800de2e:	9311      	str	r3, [sp, #68]	; 0x44
 800de30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de32:	4b91      	ldr	r3, [pc, #580]	; (800e078 <_strtod_l+0xc00>)
 800de34:	429a      	cmp	r2, r3
 800de36:	f040 80b2 	bne.w	800df9e <_strtod_l+0xb26>
 800de3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800de42:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800de46:	ec4b ab10 	vmov	d0, sl, fp
 800de4a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800de4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800de52:	f001 ffcb 	bl	800fdec <__ulp>
 800de56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800de5a:	ec53 2b10 	vmov	r2, r3, d0
 800de5e:	f7f2 fbe3 	bl	8000628 <__aeabi_dmul>
 800de62:	4652      	mov	r2, sl
 800de64:	465b      	mov	r3, fp
 800de66:	f7f2 fa29 	bl	80002bc <__adddf3>
 800de6a:	460b      	mov	r3, r1
 800de6c:	4981      	ldr	r1, [pc, #516]	; (800e074 <_strtod_l+0xbfc>)
 800de6e:	4a83      	ldr	r2, [pc, #524]	; (800e07c <_strtod_l+0xc04>)
 800de70:	4019      	ands	r1, r3
 800de72:	4291      	cmp	r1, r2
 800de74:	4682      	mov	sl, r0
 800de76:	d95e      	bls.n	800df36 <_strtod_l+0xabe>
 800de78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800de7e:	4293      	cmp	r3, r2
 800de80:	d103      	bne.n	800de8a <_strtod_l+0xa12>
 800de82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de84:	3301      	adds	r3, #1
 800de86:	f43f ad43 	beq.w	800d910 <_strtod_l+0x498>
 800de8a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e088 <_strtod_l+0xc10>
 800de8e:	f04f 3aff 	mov.w	sl, #4294967295
 800de92:	991e      	ldr	r1, [sp, #120]	; 0x78
 800de94:	4620      	mov	r0, r4
 800de96:	f001 fc7d 	bl	800f794 <_Bfree>
 800de9a:	9907      	ldr	r1, [sp, #28]
 800de9c:	4620      	mov	r0, r4
 800de9e:	f001 fc79 	bl	800f794 <_Bfree>
 800dea2:	4631      	mov	r1, r6
 800dea4:	4620      	mov	r0, r4
 800dea6:	f001 fc75 	bl	800f794 <_Bfree>
 800deaa:	4629      	mov	r1, r5
 800deac:	4620      	mov	r0, r4
 800deae:	f001 fc71 	bl	800f794 <_Bfree>
 800deb2:	e613      	b.n	800dadc <_strtod_l+0x664>
 800deb4:	f1ba 0f00 	cmp.w	sl, #0
 800deb8:	d11b      	bne.n	800def2 <_strtod_l+0xa7a>
 800deba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800debe:	b9f3      	cbnz	r3, 800defe <_strtod_l+0xa86>
 800dec0:	4b6b      	ldr	r3, [pc, #428]	; (800e070 <_strtod_l+0xbf8>)
 800dec2:	2200      	movs	r2, #0
 800dec4:	4640      	mov	r0, r8
 800dec6:	4649      	mov	r1, r9
 800dec8:	f7f2 fe20 	bl	8000b0c <__aeabi_dcmplt>
 800decc:	b9d0      	cbnz	r0, 800df04 <_strtod_l+0xa8c>
 800dece:	4640      	mov	r0, r8
 800ded0:	4649      	mov	r1, r9
 800ded2:	4b6b      	ldr	r3, [pc, #428]	; (800e080 <_strtod_l+0xc08>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	f7f2 fba7 	bl	8000628 <__aeabi_dmul>
 800deda:	4680      	mov	r8, r0
 800dedc:	4689      	mov	r9, r1
 800dede:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dee2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800dee6:	931b      	str	r3, [sp, #108]	; 0x6c
 800dee8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800deec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800def0:	e79b      	b.n	800de2a <_strtod_l+0x9b2>
 800def2:	f1ba 0f01 	cmp.w	sl, #1
 800def6:	d102      	bne.n	800defe <_strtod_l+0xa86>
 800def8:	2f00      	cmp	r7, #0
 800defa:	f43f ad7e 	beq.w	800d9fa <_strtod_l+0x582>
 800defe:	4b61      	ldr	r3, [pc, #388]	; (800e084 <_strtod_l+0xc0c>)
 800df00:	2200      	movs	r2, #0
 800df02:	e78c      	b.n	800de1e <_strtod_l+0x9a6>
 800df04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e080 <_strtod_l+0xc08>
 800df08:	f04f 0800 	mov.w	r8, #0
 800df0c:	e7e7      	b.n	800dede <_strtod_l+0xa66>
 800df0e:	4b5c      	ldr	r3, [pc, #368]	; (800e080 <_strtod_l+0xc08>)
 800df10:	4640      	mov	r0, r8
 800df12:	4649      	mov	r1, r9
 800df14:	2200      	movs	r2, #0
 800df16:	f7f2 fb87 	bl	8000628 <__aeabi_dmul>
 800df1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df1c:	4680      	mov	r8, r0
 800df1e:	4689      	mov	r9, r1
 800df20:	b933      	cbnz	r3, 800df30 <_strtod_l+0xab8>
 800df22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df26:	9012      	str	r0, [sp, #72]	; 0x48
 800df28:	9313      	str	r3, [sp, #76]	; 0x4c
 800df2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800df2e:	e7dd      	b.n	800deec <_strtod_l+0xa74>
 800df30:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800df34:	e7f9      	b.n	800df2a <_strtod_l+0xab2>
 800df36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800df3a:	9b04      	ldr	r3, [sp, #16]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1a8      	bne.n	800de92 <_strtod_l+0xa1a>
 800df40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df46:	0d1b      	lsrs	r3, r3, #20
 800df48:	051b      	lsls	r3, r3, #20
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d1a1      	bne.n	800de92 <_strtod_l+0xa1a>
 800df4e:	4640      	mov	r0, r8
 800df50:	4649      	mov	r1, r9
 800df52:	f7f2 fec9 	bl	8000ce8 <__aeabi_d2lz>
 800df56:	f7f2 fb39 	bl	80005cc <__aeabi_l2d>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	4640      	mov	r0, r8
 800df60:	4649      	mov	r1, r9
 800df62:	f7f2 f9a9 	bl	80002b8 <__aeabi_dsub>
 800df66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df6c:	ea43 030a 	orr.w	r3, r3, sl
 800df70:	4313      	orrs	r3, r2
 800df72:	4680      	mov	r8, r0
 800df74:	4689      	mov	r9, r1
 800df76:	d053      	beq.n	800e020 <_strtod_l+0xba8>
 800df78:	a335      	add	r3, pc, #212	; (adr r3, 800e050 <_strtod_l+0xbd8>)
 800df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7e:	f7f2 fdc5 	bl	8000b0c <__aeabi_dcmplt>
 800df82:	2800      	cmp	r0, #0
 800df84:	f47f acce 	bne.w	800d924 <_strtod_l+0x4ac>
 800df88:	a333      	add	r3, pc, #204	; (adr r3, 800e058 <_strtod_l+0xbe0>)
 800df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8e:	4640      	mov	r0, r8
 800df90:	4649      	mov	r1, r9
 800df92:	f7f2 fdd9 	bl	8000b48 <__aeabi_dcmpgt>
 800df96:	2800      	cmp	r0, #0
 800df98:	f43f af7b 	beq.w	800de92 <_strtod_l+0xa1a>
 800df9c:	e4c2      	b.n	800d924 <_strtod_l+0x4ac>
 800df9e:	9b04      	ldr	r3, [sp, #16]
 800dfa0:	b333      	cbz	r3, 800dff0 <_strtod_l+0xb78>
 800dfa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfa4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dfa8:	d822      	bhi.n	800dff0 <_strtod_l+0xb78>
 800dfaa:	a32d      	add	r3, pc, #180	; (adr r3, 800e060 <_strtod_l+0xbe8>)
 800dfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb0:	4640      	mov	r0, r8
 800dfb2:	4649      	mov	r1, r9
 800dfb4:	f7f2 fdb4 	bl	8000b20 <__aeabi_dcmple>
 800dfb8:	b1a0      	cbz	r0, 800dfe4 <_strtod_l+0xb6c>
 800dfba:	4649      	mov	r1, r9
 800dfbc:	4640      	mov	r0, r8
 800dfbe:	f7f2 fe0b 	bl	8000bd8 <__aeabi_d2uiz>
 800dfc2:	2801      	cmp	r0, #1
 800dfc4:	bf38      	it	cc
 800dfc6:	2001      	movcc	r0, #1
 800dfc8:	f7f2 fab4 	bl	8000534 <__aeabi_ui2d>
 800dfcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfce:	4680      	mov	r8, r0
 800dfd0:	4689      	mov	r9, r1
 800dfd2:	bb13      	cbnz	r3, 800e01a <_strtod_l+0xba2>
 800dfd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfd8:	9014      	str	r0, [sp, #80]	; 0x50
 800dfda:	9315      	str	r3, [sp, #84]	; 0x54
 800dfdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dfe0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800dfe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dfe8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dfec:	1a9b      	subs	r3, r3, r2
 800dfee:	930d      	str	r3, [sp, #52]	; 0x34
 800dff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dff4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dff8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dffc:	f001 fef6 	bl	800fdec <__ulp>
 800e000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e004:	ec53 2b10 	vmov	r2, r3, d0
 800e008:	f7f2 fb0e 	bl	8000628 <__aeabi_dmul>
 800e00c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e010:	f7f2 f954 	bl	80002bc <__adddf3>
 800e014:	4682      	mov	sl, r0
 800e016:	468b      	mov	fp, r1
 800e018:	e78f      	b.n	800df3a <_strtod_l+0xac2>
 800e01a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e01e:	e7dd      	b.n	800dfdc <_strtod_l+0xb64>
 800e020:	a311      	add	r3, pc, #68	; (adr r3, 800e068 <_strtod_l+0xbf0>)
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	f7f2 fd71 	bl	8000b0c <__aeabi_dcmplt>
 800e02a:	e7b4      	b.n	800df96 <_strtod_l+0xb1e>
 800e02c:	2300      	movs	r3, #0
 800e02e:	930e      	str	r3, [sp, #56]	; 0x38
 800e030:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e032:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e034:	6013      	str	r3, [r2, #0]
 800e036:	f7ff ba65 	b.w	800d504 <_strtod_l+0x8c>
 800e03a:	2b65      	cmp	r3, #101	; 0x65
 800e03c:	f43f ab5d 	beq.w	800d6fa <_strtod_l+0x282>
 800e040:	2b45      	cmp	r3, #69	; 0x45
 800e042:	f43f ab5a 	beq.w	800d6fa <_strtod_l+0x282>
 800e046:	2201      	movs	r2, #1
 800e048:	f7ff bb92 	b.w	800d770 <_strtod_l+0x2f8>
 800e04c:	f3af 8000 	nop.w
 800e050:	94a03595 	.word	0x94a03595
 800e054:	3fdfffff 	.word	0x3fdfffff
 800e058:	35afe535 	.word	0x35afe535
 800e05c:	3fe00000 	.word	0x3fe00000
 800e060:	ffc00000 	.word	0xffc00000
 800e064:	41dfffff 	.word	0x41dfffff
 800e068:	94a03595 	.word	0x94a03595
 800e06c:	3fcfffff 	.word	0x3fcfffff
 800e070:	3ff00000 	.word	0x3ff00000
 800e074:	7ff00000 	.word	0x7ff00000
 800e078:	7fe00000 	.word	0x7fe00000
 800e07c:	7c9fffff 	.word	0x7c9fffff
 800e080:	3fe00000 	.word	0x3fe00000
 800e084:	bff00000 	.word	0xbff00000
 800e088:	7fefffff 	.word	0x7fefffff

0800e08c <_strtod_r>:
 800e08c:	4b01      	ldr	r3, [pc, #4]	; (800e094 <_strtod_r+0x8>)
 800e08e:	f7ff b9f3 	b.w	800d478 <_strtod_l>
 800e092:	bf00      	nop
 800e094:	200000a8 	.word	0x200000a8

0800e098 <strtod>:
 800e098:	460a      	mov	r2, r1
 800e09a:	4601      	mov	r1, r0
 800e09c:	4802      	ldr	r0, [pc, #8]	; (800e0a8 <strtod+0x10>)
 800e09e:	4b03      	ldr	r3, [pc, #12]	; (800e0ac <strtod+0x14>)
 800e0a0:	6800      	ldr	r0, [r0, #0]
 800e0a2:	f7ff b9e9 	b.w	800d478 <_strtod_l>
 800e0a6:	bf00      	nop
 800e0a8:	20000040 	.word	0x20000040
 800e0ac:	200000a8 	.word	0x200000a8

0800e0b0 <strtok>:
 800e0b0:	4b16      	ldr	r3, [pc, #88]	; (800e10c <strtok+0x5c>)
 800e0b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0b4:	681e      	ldr	r6, [r3, #0]
 800e0b6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	b9fc      	cbnz	r4, 800e0fc <strtok+0x4c>
 800e0bc:	2050      	movs	r0, #80	; 0x50
 800e0be:	9101      	str	r1, [sp, #4]
 800e0c0:	f001 fb00 	bl	800f6c4 <malloc>
 800e0c4:	9901      	ldr	r1, [sp, #4]
 800e0c6:	65b0      	str	r0, [r6, #88]	; 0x58
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	b920      	cbnz	r0, 800e0d6 <strtok+0x26>
 800e0cc:	4b10      	ldr	r3, [pc, #64]	; (800e110 <strtok+0x60>)
 800e0ce:	4811      	ldr	r0, [pc, #68]	; (800e114 <strtok+0x64>)
 800e0d0:	2157      	movs	r1, #87	; 0x57
 800e0d2:	f000 f8d9 	bl	800e288 <__assert_func>
 800e0d6:	e9c0 4400 	strd	r4, r4, [r0]
 800e0da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e0de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e0e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e0e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e0ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e0ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e0f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e0f6:	6184      	str	r4, [r0, #24]
 800e0f8:	7704      	strb	r4, [r0, #28]
 800e0fa:	6244      	str	r4, [r0, #36]	; 0x24
 800e0fc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800e0fe:	2301      	movs	r3, #1
 800e100:	4628      	mov	r0, r5
 800e102:	b002      	add	sp, #8
 800e104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e108:	f000 b806 	b.w	800e118 <__strtok_r>
 800e10c:	20000040 	.word	0x20000040
 800e110:	08024788 	.word	0x08024788
 800e114:	0802479f 	.word	0x0802479f

0800e118 <__strtok_r>:
 800e118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e11a:	b908      	cbnz	r0, 800e120 <__strtok_r+0x8>
 800e11c:	6810      	ldr	r0, [r2, #0]
 800e11e:	b188      	cbz	r0, 800e144 <__strtok_r+0x2c>
 800e120:	4604      	mov	r4, r0
 800e122:	4620      	mov	r0, r4
 800e124:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e128:	460f      	mov	r7, r1
 800e12a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e12e:	b91e      	cbnz	r6, 800e138 <__strtok_r+0x20>
 800e130:	b965      	cbnz	r5, 800e14c <__strtok_r+0x34>
 800e132:	6015      	str	r5, [r2, #0]
 800e134:	4628      	mov	r0, r5
 800e136:	e005      	b.n	800e144 <__strtok_r+0x2c>
 800e138:	42b5      	cmp	r5, r6
 800e13a:	d1f6      	bne.n	800e12a <__strtok_r+0x12>
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1f0      	bne.n	800e122 <__strtok_r+0xa>
 800e140:	6014      	str	r4, [r2, #0]
 800e142:	7003      	strb	r3, [r0, #0]
 800e144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e146:	461c      	mov	r4, r3
 800e148:	e00c      	b.n	800e164 <__strtok_r+0x4c>
 800e14a:	b915      	cbnz	r5, 800e152 <__strtok_r+0x3a>
 800e14c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e150:	460e      	mov	r6, r1
 800e152:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e156:	42ab      	cmp	r3, r5
 800e158:	d1f7      	bne.n	800e14a <__strtok_r+0x32>
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0f3      	beq.n	800e146 <__strtok_r+0x2e>
 800e15e:	2300      	movs	r3, #0
 800e160:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e164:	6014      	str	r4, [r2, #0]
 800e166:	e7ed      	b.n	800e144 <__strtok_r+0x2c>

0800e168 <_strtol_l.isra.0>:
 800e168:	2b01      	cmp	r3, #1
 800e16a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e16e:	d001      	beq.n	800e174 <_strtol_l.isra.0+0xc>
 800e170:	2b24      	cmp	r3, #36	; 0x24
 800e172:	d906      	bls.n	800e182 <_strtol_l.isra.0+0x1a>
 800e174:	f7fe fa92 	bl	800c69c <__errno>
 800e178:	2316      	movs	r3, #22
 800e17a:	6003      	str	r3, [r0, #0]
 800e17c:	2000      	movs	r0, #0
 800e17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e182:	4f3a      	ldr	r7, [pc, #232]	; (800e26c <_strtol_l.isra.0+0x104>)
 800e184:	468e      	mov	lr, r1
 800e186:	4676      	mov	r6, lr
 800e188:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e18c:	5de5      	ldrb	r5, [r4, r7]
 800e18e:	f015 0508 	ands.w	r5, r5, #8
 800e192:	d1f8      	bne.n	800e186 <_strtol_l.isra.0+0x1e>
 800e194:	2c2d      	cmp	r4, #45	; 0x2d
 800e196:	d134      	bne.n	800e202 <_strtol_l.isra.0+0x9a>
 800e198:	f89e 4000 	ldrb.w	r4, [lr]
 800e19c:	f04f 0801 	mov.w	r8, #1
 800e1a0:	f106 0e02 	add.w	lr, r6, #2
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d05c      	beq.n	800e262 <_strtol_l.isra.0+0xfa>
 800e1a8:	2b10      	cmp	r3, #16
 800e1aa:	d10c      	bne.n	800e1c6 <_strtol_l.isra.0+0x5e>
 800e1ac:	2c30      	cmp	r4, #48	; 0x30
 800e1ae:	d10a      	bne.n	800e1c6 <_strtol_l.isra.0+0x5e>
 800e1b0:	f89e 4000 	ldrb.w	r4, [lr]
 800e1b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e1b8:	2c58      	cmp	r4, #88	; 0x58
 800e1ba:	d14d      	bne.n	800e258 <_strtol_l.isra.0+0xf0>
 800e1bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e1c0:	2310      	movs	r3, #16
 800e1c2:	f10e 0e02 	add.w	lr, lr, #2
 800e1c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e1ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e1ce:	2600      	movs	r6, #0
 800e1d0:	fbbc f9f3 	udiv	r9, ip, r3
 800e1d4:	4635      	mov	r5, r6
 800e1d6:	fb03 ca19 	mls	sl, r3, r9, ip
 800e1da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e1de:	2f09      	cmp	r7, #9
 800e1e0:	d818      	bhi.n	800e214 <_strtol_l.isra.0+0xac>
 800e1e2:	463c      	mov	r4, r7
 800e1e4:	42a3      	cmp	r3, r4
 800e1e6:	dd24      	ble.n	800e232 <_strtol_l.isra.0+0xca>
 800e1e8:	2e00      	cmp	r6, #0
 800e1ea:	db1f      	blt.n	800e22c <_strtol_l.isra.0+0xc4>
 800e1ec:	45a9      	cmp	r9, r5
 800e1ee:	d31d      	bcc.n	800e22c <_strtol_l.isra.0+0xc4>
 800e1f0:	d101      	bne.n	800e1f6 <_strtol_l.isra.0+0x8e>
 800e1f2:	45a2      	cmp	sl, r4
 800e1f4:	db1a      	blt.n	800e22c <_strtol_l.isra.0+0xc4>
 800e1f6:	fb05 4503 	mla	r5, r5, r3, r4
 800e1fa:	2601      	movs	r6, #1
 800e1fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e200:	e7eb      	b.n	800e1da <_strtol_l.isra.0+0x72>
 800e202:	2c2b      	cmp	r4, #43	; 0x2b
 800e204:	bf08      	it	eq
 800e206:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e20a:	46a8      	mov	r8, r5
 800e20c:	bf08      	it	eq
 800e20e:	f106 0e02 	addeq.w	lr, r6, #2
 800e212:	e7c7      	b.n	800e1a4 <_strtol_l.isra.0+0x3c>
 800e214:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e218:	2f19      	cmp	r7, #25
 800e21a:	d801      	bhi.n	800e220 <_strtol_l.isra.0+0xb8>
 800e21c:	3c37      	subs	r4, #55	; 0x37
 800e21e:	e7e1      	b.n	800e1e4 <_strtol_l.isra.0+0x7c>
 800e220:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e224:	2f19      	cmp	r7, #25
 800e226:	d804      	bhi.n	800e232 <_strtol_l.isra.0+0xca>
 800e228:	3c57      	subs	r4, #87	; 0x57
 800e22a:	e7db      	b.n	800e1e4 <_strtol_l.isra.0+0x7c>
 800e22c:	f04f 36ff 	mov.w	r6, #4294967295
 800e230:	e7e4      	b.n	800e1fc <_strtol_l.isra.0+0x94>
 800e232:	2e00      	cmp	r6, #0
 800e234:	da05      	bge.n	800e242 <_strtol_l.isra.0+0xda>
 800e236:	2322      	movs	r3, #34	; 0x22
 800e238:	6003      	str	r3, [r0, #0]
 800e23a:	4665      	mov	r5, ip
 800e23c:	b942      	cbnz	r2, 800e250 <_strtol_l.isra.0+0xe8>
 800e23e:	4628      	mov	r0, r5
 800e240:	e79d      	b.n	800e17e <_strtol_l.isra.0+0x16>
 800e242:	f1b8 0f00 	cmp.w	r8, #0
 800e246:	d000      	beq.n	800e24a <_strtol_l.isra.0+0xe2>
 800e248:	426d      	negs	r5, r5
 800e24a:	2a00      	cmp	r2, #0
 800e24c:	d0f7      	beq.n	800e23e <_strtol_l.isra.0+0xd6>
 800e24e:	b10e      	cbz	r6, 800e254 <_strtol_l.isra.0+0xec>
 800e250:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e254:	6011      	str	r1, [r2, #0]
 800e256:	e7f2      	b.n	800e23e <_strtol_l.isra.0+0xd6>
 800e258:	2430      	movs	r4, #48	; 0x30
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1b3      	bne.n	800e1c6 <_strtol_l.isra.0+0x5e>
 800e25e:	2308      	movs	r3, #8
 800e260:	e7b1      	b.n	800e1c6 <_strtol_l.isra.0+0x5e>
 800e262:	2c30      	cmp	r4, #48	; 0x30
 800e264:	d0a4      	beq.n	800e1b0 <_strtol_l.isra.0+0x48>
 800e266:	230a      	movs	r3, #10
 800e268:	e7ad      	b.n	800e1c6 <_strtol_l.isra.0+0x5e>
 800e26a:	bf00      	nop
 800e26c:	0802483d 	.word	0x0802483d

0800e270 <_strtol_r>:
 800e270:	f7ff bf7a 	b.w	800e168 <_strtol_l.isra.0>

0800e274 <strtol>:
 800e274:	4613      	mov	r3, r2
 800e276:	460a      	mov	r2, r1
 800e278:	4601      	mov	r1, r0
 800e27a:	4802      	ldr	r0, [pc, #8]	; (800e284 <strtol+0x10>)
 800e27c:	6800      	ldr	r0, [r0, #0]
 800e27e:	f7ff bf73 	b.w	800e168 <_strtol_l.isra.0>
 800e282:	bf00      	nop
 800e284:	20000040 	.word	0x20000040

0800e288 <__assert_func>:
 800e288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e28a:	4614      	mov	r4, r2
 800e28c:	461a      	mov	r2, r3
 800e28e:	4b09      	ldr	r3, [pc, #36]	; (800e2b4 <__assert_func+0x2c>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4605      	mov	r5, r0
 800e294:	68d8      	ldr	r0, [r3, #12]
 800e296:	b14c      	cbz	r4, 800e2ac <__assert_func+0x24>
 800e298:	4b07      	ldr	r3, [pc, #28]	; (800e2b8 <__assert_func+0x30>)
 800e29a:	9100      	str	r1, [sp, #0]
 800e29c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2a0:	4906      	ldr	r1, [pc, #24]	; (800e2bc <__assert_func+0x34>)
 800e2a2:	462b      	mov	r3, r5
 800e2a4:	f000 fe88 	bl	800efb8 <fiprintf>
 800e2a8:	f002 fb56 	bl	8010958 <abort>
 800e2ac:	4b04      	ldr	r3, [pc, #16]	; (800e2c0 <__assert_func+0x38>)
 800e2ae:	461c      	mov	r4, r3
 800e2b0:	e7f3      	b.n	800e29a <__assert_func+0x12>
 800e2b2:	bf00      	nop
 800e2b4:	20000040 	.word	0x20000040
 800e2b8:	08024800 	.word	0x08024800
 800e2bc:	0802480d 	.word	0x0802480d
 800e2c0:	0802483b 	.word	0x0802483b

0800e2c4 <quorem>:
 800e2c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	6903      	ldr	r3, [r0, #16]
 800e2ca:	690c      	ldr	r4, [r1, #16]
 800e2cc:	42a3      	cmp	r3, r4
 800e2ce:	4607      	mov	r7, r0
 800e2d0:	f2c0 8081 	blt.w	800e3d6 <quorem+0x112>
 800e2d4:	3c01      	subs	r4, #1
 800e2d6:	f101 0814 	add.w	r8, r1, #20
 800e2da:	f100 0514 	add.w	r5, r0, #20
 800e2de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2e2:	9301      	str	r3, [sp, #4]
 800e2e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e2e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e2f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e2f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e2fc:	d331      	bcc.n	800e362 <quorem+0x9e>
 800e2fe:	f04f 0e00 	mov.w	lr, #0
 800e302:	4640      	mov	r0, r8
 800e304:	46ac      	mov	ip, r5
 800e306:	46f2      	mov	sl, lr
 800e308:	f850 2b04 	ldr.w	r2, [r0], #4
 800e30c:	b293      	uxth	r3, r2
 800e30e:	fb06 e303 	mla	r3, r6, r3, lr
 800e312:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e316:	b29b      	uxth	r3, r3
 800e318:	ebaa 0303 	sub.w	r3, sl, r3
 800e31c:	0c12      	lsrs	r2, r2, #16
 800e31e:	f8dc a000 	ldr.w	sl, [ip]
 800e322:	fb06 e202 	mla	r2, r6, r2, lr
 800e326:	fa13 f38a 	uxtah	r3, r3, sl
 800e32a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e32e:	fa1f fa82 	uxth.w	sl, r2
 800e332:	f8dc 2000 	ldr.w	r2, [ip]
 800e336:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e33a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e33e:	b29b      	uxth	r3, r3
 800e340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e344:	4581      	cmp	r9, r0
 800e346:	f84c 3b04 	str.w	r3, [ip], #4
 800e34a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e34e:	d2db      	bcs.n	800e308 <quorem+0x44>
 800e350:	f855 300b 	ldr.w	r3, [r5, fp]
 800e354:	b92b      	cbnz	r3, 800e362 <quorem+0x9e>
 800e356:	9b01      	ldr	r3, [sp, #4]
 800e358:	3b04      	subs	r3, #4
 800e35a:	429d      	cmp	r5, r3
 800e35c:	461a      	mov	r2, r3
 800e35e:	d32e      	bcc.n	800e3be <quorem+0xfa>
 800e360:	613c      	str	r4, [r7, #16]
 800e362:	4638      	mov	r0, r7
 800e364:	f001 fc9e 	bl	800fca4 <__mcmp>
 800e368:	2800      	cmp	r0, #0
 800e36a:	db24      	blt.n	800e3b6 <quorem+0xf2>
 800e36c:	3601      	adds	r6, #1
 800e36e:	4628      	mov	r0, r5
 800e370:	f04f 0c00 	mov.w	ip, #0
 800e374:	f858 2b04 	ldr.w	r2, [r8], #4
 800e378:	f8d0 e000 	ldr.w	lr, [r0]
 800e37c:	b293      	uxth	r3, r2
 800e37e:	ebac 0303 	sub.w	r3, ip, r3
 800e382:	0c12      	lsrs	r2, r2, #16
 800e384:	fa13 f38e 	uxtah	r3, r3, lr
 800e388:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e38c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e390:	b29b      	uxth	r3, r3
 800e392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e396:	45c1      	cmp	r9, r8
 800e398:	f840 3b04 	str.w	r3, [r0], #4
 800e39c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e3a0:	d2e8      	bcs.n	800e374 <quorem+0xb0>
 800e3a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3aa:	b922      	cbnz	r2, 800e3b6 <quorem+0xf2>
 800e3ac:	3b04      	subs	r3, #4
 800e3ae:	429d      	cmp	r5, r3
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	d30a      	bcc.n	800e3ca <quorem+0x106>
 800e3b4:	613c      	str	r4, [r7, #16]
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	b003      	add	sp, #12
 800e3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3be:	6812      	ldr	r2, [r2, #0]
 800e3c0:	3b04      	subs	r3, #4
 800e3c2:	2a00      	cmp	r2, #0
 800e3c4:	d1cc      	bne.n	800e360 <quorem+0x9c>
 800e3c6:	3c01      	subs	r4, #1
 800e3c8:	e7c7      	b.n	800e35a <quorem+0x96>
 800e3ca:	6812      	ldr	r2, [r2, #0]
 800e3cc:	3b04      	subs	r3, #4
 800e3ce:	2a00      	cmp	r2, #0
 800e3d0:	d1f0      	bne.n	800e3b4 <quorem+0xf0>
 800e3d2:	3c01      	subs	r4, #1
 800e3d4:	e7eb      	b.n	800e3ae <quorem+0xea>
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	e7ee      	b.n	800e3b8 <quorem+0xf4>
 800e3da:	0000      	movs	r0, r0
 800e3dc:	0000      	movs	r0, r0
	...

0800e3e0 <_dtoa_r>:
 800e3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e4:	ed2d 8b02 	vpush	{d8}
 800e3e8:	ec57 6b10 	vmov	r6, r7, d0
 800e3ec:	b095      	sub	sp, #84	; 0x54
 800e3ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e3f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e3f4:	9105      	str	r1, [sp, #20]
 800e3f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	9209      	str	r2, [sp, #36]	; 0x24
 800e3fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800e400:	b975      	cbnz	r5, 800e420 <_dtoa_r+0x40>
 800e402:	2010      	movs	r0, #16
 800e404:	f001 f95e 	bl	800f6c4 <malloc>
 800e408:	4602      	mov	r2, r0
 800e40a:	6260      	str	r0, [r4, #36]	; 0x24
 800e40c:	b920      	cbnz	r0, 800e418 <_dtoa_r+0x38>
 800e40e:	4bb2      	ldr	r3, [pc, #712]	; (800e6d8 <_dtoa_r+0x2f8>)
 800e410:	21ea      	movs	r1, #234	; 0xea
 800e412:	48b2      	ldr	r0, [pc, #712]	; (800e6dc <_dtoa_r+0x2fc>)
 800e414:	f7ff ff38 	bl	800e288 <__assert_func>
 800e418:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e41c:	6005      	str	r5, [r0, #0]
 800e41e:	60c5      	str	r5, [r0, #12]
 800e420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e422:	6819      	ldr	r1, [r3, #0]
 800e424:	b151      	cbz	r1, 800e43c <_dtoa_r+0x5c>
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	604a      	str	r2, [r1, #4]
 800e42a:	2301      	movs	r3, #1
 800e42c:	4093      	lsls	r3, r2
 800e42e:	608b      	str	r3, [r1, #8]
 800e430:	4620      	mov	r0, r4
 800e432:	f001 f9af 	bl	800f794 <_Bfree>
 800e436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e438:	2200      	movs	r2, #0
 800e43a:	601a      	str	r2, [r3, #0]
 800e43c:	1e3b      	subs	r3, r7, #0
 800e43e:	bfb9      	ittee	lt
 800e440:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e444:	9303      	strlt	r3, [sp, #12]
 800e446:	2300      	movge	r3, #0
 800e448:	f8c8 3000 	strge.w	r3, [r8]
 800e44c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e450:	4ba3      	ldr	r3, [pc, #652]	; (800e6e0 <_dtoa_r+0x300>)
 800e452:	bfbc      	itt	lt
 800e454:	2201      	movlt	r2, #1
 800e456:	f8c8 2000 	strlt.w	r2, [r8]
 800e45a:	ea33 0309 	bics.w	r3, r3, r9
 800e45e:	d11b      	bne.n	800e498 <_dtoa_r+0xb8>
 800e460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e462:	f242 730f 	movw	r3, #9999	; 0x270f
 800e466:	6013      	str	r3, [r2, #0]
 800e468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e46c:	4333      	orrs	r3, r6
 800e46e:	f000 857a 	beq.w	800ef66 <_dtoa_r+0xb86>
 800e472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e474:	b963      	cbnz	r3, 800e490 <_dtoa_r+0xb0>
 800e476:	4b9b      	ldr	r3, [pc, #620]	; (800e6e4 <_dtoa_r+0x304>)
 800e478:	e024      	b.n	800e4c4 <_dtoa_r+0xe4>
 800e47a:	4b9b      	ldr	r3, [pc, #620]	; (800e6e8 <_dtoa_r+0x308>)
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	3308      	adds	r3, #8
 800e480:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e482:	6013      	str	r3, [r2, #0]
 800e484:	9800      	ldr	r0, [sp, #0]
 800e486:	b015      	add	sp, #84	; 0x54
 800e488:	ecbd 8b02 	vpop	{d8}
 800e48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e490:	4b94      	ldr	r3, [pc, #592]	; (800e6e4 <_dtoa_r+0x304>)
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	3303      	adds	r3, #3
 800e496:	e7f3      	b.n	800e480 <_dtoa_r+0xa0>
 800e498:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e49c:	2200      	movs	r2, #0
 800e49e:	ec51 0b17 	vmov	r0, r1, d7
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e4a8:	f7f2 fb26 	bl	8000af8 <__aeabi_dcmpeq>
 800e4ac:	4680      	mov	r8, r0
 800e4ae:	b158      	cbz	r0, 800e4c8 <_dtoa_r+0xe8>
 800e4b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	6013      	str	r3, [r2, #0]
 800e4b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f000 8551 	beq.w	800ef60 <_dtoa_r+0xb80>
 800e4be:	488b      	ldr	r0, [pc, #556]	; (800e6ec <_dtoa_r+0x30c>)
 800e4c0:	6018      	str	r0, [r3, #0]
 800e4c2:	1e43      	subs	r3, r0, #1
 800e4c4:	9300      	str	r3, [sp, #0]
 800e4c6:	e7dd      	b.n	800e484 <_dtoa_r+0xa4>
 800e4c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e4cc:	aa12      	add	r2, sp, #72	; 0x48
 800e4ce:	a913      	add	r1, sp, #76	; 0x4c
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f001 fd07 	bl	800fee4 <__d2b>
 800e4d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e4da:	4683      	mov	fp, r0
 800e4dc:	2d00      	cmp	r5, #0
 800e4de:	d07c      	beq.n	800e5da <_dtoa_r+0x1fa>
 800e4e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e4e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e4ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e4f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e4f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e4fa:	4b7d      	ldr	r3, [pc, #500]	; (800e6f0 <_dtoa_r+0x310>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4630      	mov	r0, r6
 800e500:	4639      	mov	r1, r7
 800e502:	f7f1 fed9 	bl	80002b8 <__aeabi_dsub>
 800e506:	a36e      	add	r3, pc, #440	; (adr r3, 800e6c0 <_dtoa_r+0x2e0>)
 800e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50c:	f7f2 f88c 	bl	8000628 <__aeabi_dmul>
 800e510:	a36d      	add	r3, pc, #436	; (adr r3, 800e6c8 <_dtoa_r+0x2e8>)
 800e512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e516:	f7f1 fed1 	bl	80002bc <__adddf3>
 800e51a:	4606      	mov	r6, r0
 800e51c:	4628      	mov	r0, r5
 800e51e:	460f      	mov	r7, r1
 800e520:	f7f2 f818 	bl	8000554 <__aeabi_i2d>
 800e524:	a36a      	add	r3, pc, #424	; (adr r3, 800e6d0 <_dtoa_r+0x2f0>)
 800e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52a:	f7f2 f87d 	bl	8000628 <__aeabi_dmul>
 800e52e:	4602      	mov	r2, r0
 800e530:	460b      	mov	r3, r1
 800e532:	4630      	mov	r0, r6
 800e534:	4639      	mov	r1, r7
 800e536:	f7f1 fec1 	bl	80002bc <__adddf3>
 800e53a:	4606      	mov	r6, r0
 800e53c:	460f      	mov	r7, r1
 800e53e:	f7f2 fb23 	bl	8000b88 <__aeabi_d2iz>
 800e542:	2200      	movs	r2, #0
 800e544:	4682      	mov	sl, r0
 800e546:	2300      	movs	r3, #0
 800e548:	4630      	mov	r0, r6
 800e54a:	4639      	mov	r1, r7
 800e54c:	f7f2 fade 	bl	8000b0c <__aeabi_dcmplt>
 800e550:	b148      	cbz	r0, 800e566 <_dtoa_r+0x186>
 800e552:	4650      	mov	r0, sl
 800e554:	f7f1 fffe 	bl	8000554 <__aeabi_i2d>
 800e558:	4632      	mov	r2, r6
 800e55a:	463b      	mov	r3, r7
 800e55c:	f7f2 facc 	bl	8000af8 <__aeabi_dcmpeq>
 800e560:	b908      	cbnz	r0, 800e566 <_dtoa_r+0x186>
 800e562:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e566:	f1ba 0f16 	cmp.w	sl, #22
 800e56a:	d854      	bhi.n	800e616 <_dtoa_r+0x236>
 800e56c:	4b61      	ldr	r3, [pc, #388]	; (800e6f4 <_dtoa_r+0x314>)
 800e56e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e576:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e57a:	f7f2 fac7 	bl	8000b0c <__aeabi_dcmplt>
 800e57e:	2800      	cmp	r0, #0
 800e580:	d04b      	beq.n	800e61a <_dtoa_r+0x23a>
 800e582:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e586:	2300      	movs	r3, #0
 800e588:	930e      	str	r3, [sp, #56]	; 0x38
 800e58a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e58c:	1b5d      	subs	r5, r3, r5
 800e58e:	1e6b      	subs	r3, r5, #1
 800e590:	9304      	str	r3, [sp, #16]
 800e592:	bf43      	ittte	mi
 800e594:	2300      	movmi	r3, #0
 800e596:	f1c5 0801 	rsbmi	r8, r5, #1
 800e59a:	9304      	strmi	r3, [sp, #16]
 800e59c:	f04f 0800 	movpl.w	r8, #0
 800e5a0:	f1ba 0f00 	cmp.w	sl, #0
 800e5a4:	db3b      	blt.n	800e61e <_dtoa_r+0x23e>
 800e5a6:	9b04      	ldr	r3, [sp, #16]
 800e5a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e5ac:	4453      	add	r3, sl
 800e5ae:	9304      	str	r3, [sp, #16]
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	9306      	str	r3, [sp, #24]
 800e5b4:	9b05      	ldr	r3, [sp, #20]
 800e5b6:	2b09      	cmp	r3, #9
 800e5b8:	d869      	bhi.n	800e68e <_dtoa_r+0x2ae>
 800e5ba:	2b05      	cmp	r3, #5
 800e5bc:	bfc4      	itt	gt
 800e5be:	3b04      	subgt	r3, #4
 800e5c0:	9305      	strgt	r3, [sp, #20]
 800e5c2:	9b05      	ldr	r3, [sp, #20]
 800e5c4:	f1a3 0302 	sub.w	r3, r3, #2
 800e5c8:	bfcc      	ite	gt
 800e5ca:	2500      	movgt	r5, #0
 800e5cc:	2501      	movle	r5, #1
 800e5ce:	2b03      	cmp	r3, #3
 800e5d0:	d869      	bhi.n	800e6a6 <_dtoa_r+0x2c6>
 800e5d2:	e8df f003 	tbb	[pc, r3]
 800e5d6:	4e2c      	.short	0x4e2c
 800e5d8:	5a4c      	.short	0x5a4c
 800e5da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e5de:	441d      	add	r5, r3
 800e5e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e5e4:	2b20      	cmp	r3, #32
 800e5e6:	bfc1      	itttt	gt
 800e5e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e5ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e5f0:	fa09 f303 	lslgt.w	r3, r9, r3
 800e5f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e5f8:	bfda      	itte	le
 800e5fa:	f1c3 0320 	rsble	r3, r3, #32
 800e5fe:	fa06 f003 	lslle.w	r0, r6, r3
 800e602:	4318      	orrgt	r0, r3
 800e604:	f7f1 ff96 	bl	8000534 <__aeabi_ui2d>
 800e608:	2301      	movs	r3, #1
 800e60a:	4606      	mov	r6, r0
 800e60c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e610:	3d01      	subs	r5, #1
 800e612:	9310      	str	r3, [sp, #64]	; 0x40
 800e614:	e771      	b.n	800e4fa <_dtoa_r+0x11a>
 800e616:	2301      	movs	r3, #1
 800e618:	e7b6      	b.n	800e588 <_dtoa_r+0x1a8>
 800e61a:	900e      	str	r0, [sp, #56]	; 0x38
 800e61c:	e7b5      	b.n	800e58a <_dtoa_r+0x1aa>
 800e61e:	f1ca 0300 	rsb	r3, sl, #0
 800e622:	9306      	str	r3, [sp, #24]
 800e624:	2300      	movs	r3, #0
 800e626:	eba8 080a 	sub.w	r8, r8, sl
 800e62a:	930d      	str	r3, [sp, #52]	; 0x34
 800e62c:	e7c2      	b.n	800e5b4 <_dtoa_r+0x1d4>
 800e62e:	2300      	movs	r3, #0
 800e630:	9308      	str	r3, [sp, #32]
 800e632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e634:	2b00      	cmp	r3, #0
 800e636:	dc39      	bgt.n	800e6ac <_dtoa_r+0x2cc>
 800e638:	f04f 0901 	mov.w	r9, #1
 800e63c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e640:	464b      	mov	r3, r9
 800e642:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e646:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e648:	2200      	movs	r2, #0
 800e64a:	6042      	str	r2, [r0, #4]
 800e64c:	2204      	movs	r2, #4
 800e64e:	f102 0614 	add.w	r6, r2, #20
 800e652:	429e      	cmp	r6, r3
 800e654:	6841      	ldr	r1, [r0, #4]
 800e656:	d92f      	bls.n	800e6b8 <_dtoa_r+0x2d8>
 800e658:	4620      	mov	r0, r4
 800e65a:	f001 f85b 	bl	800f714 <_Balloc>
 800e65e:	9000      	str	r0, [sp, #0]
 800e660:	2800      	cmp	r0, #0
 800e662:	d14b      	bne.n	800e6fc <_dtoa_r+0x31c>
 800e664:	4b24      	ldr	r3, [pc, #144]	; (800e6f8 <_dtoa_r+0x318>)
 800e666:	4602      	mov	r2, r0
 800e668:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e66c:	e6d1      	b.n	800e412 <_dtoa_r+0x32>
 800e66e:	2301      	movs	r3, #1
 800e670:	e7de      	b.n	800e630 <_dtoa_r+0x250>
 800e672:	2300      	movs	r3, #0
 800e674:	9308      	str	r3, [sp, #32]
 800e676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e678:	eb0a 0903 	add.w	r9, sl, r3
 800e67c:	f109 0301 	add.w	r3, r9, #1
 800e680:	2b01      	cmp	r3, #1
 800e682:	9301      	str	r3, [sp, #4]
 800e684:	bfb8      	it	lt
 800e686:	2301      	movlt	r3, #1
 800e688:	e7dd      	b.n	800e646 <_dtoa_r+0x266>
 800e68a:	2301      	movs	r3, #1
 800e68c:	e7f2      	b.n	800e674 <_dtoa_r+0x294>
 800e68e:	2501      	movs	r5, #1
 800e690:	2300      	movs	r3, #0
 800e692:	9305      	str	r3, [sp, #20]
 800e694:	9508      	str	r5, [sp, #32]
 800e696:	f04f 39ff 	mov.w	r9, #4294967295
 800e69a:	2200      	movs	r2, #0
 800e69c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e6a0:	2312      	movs	r3, #18
 800e6a2:	9209      	str	r2, [sp, #36]	; 0x24
 800e6a4:	e7cf      	b.n	800e646 <_dtoa_r+0x266>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	9308      	str	r3, [sp, #32]
 800e6aa:	e7f4      	b.n	800e696 <_dtoa_r+0x2b6>
 800e6ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e6b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800e6b4:	464b      	mov	r3, r9
 800e6b6:	e7c6      	b.n	800e646 <_dtoa_r+0x266>
 800e6b8:	3101      	adds	r1, #1
 800e6ba:	6041      	str	r1, [r0, #4]
 800e6bc:	0052      	lsls	r2, r2, #1
 800e6be:	e7c6      	b.n	800e64e <_dtoa_r+0x26e>
 800e6c0:	636f4361 	.word	0x636f4361
 800e6c4:	3fd287a7 	.word	0x3fd287a7
 800e6c8:	8b60c8b3 	.word	0x8b60c8b3
 800e6cc:	3fc68a28 	.word	0x3fc68a28
 800e6d0:	509f79fb 	.word	0x509f79fb
 800e6d4:	3fd34413 	.word	0x3fd34413
 800e6d8:	08024788 	.word	0x08024788
 800e6dc:	0802494a 	.word	0x0802494a
 800e6e0:	7ff00000 	.word	0x7ff00000
 800e6e4:	08024946 	.word	0x08024946
 800e6e8:	0802493d 	.word	0x0802493d
 800e6ec:	08024709 	.word	0x08024709
 800e6f0:	3ff80000 	.word	0x3ff80000
 800e6f4:	08024ac0 	.word	0x08024ac0
 800e6f8:	080249a9 	.word	0x080249a9
 800e6fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6fe:	9a00      	ldr	r2, [sp, #0]
 800e700:	601a      	str	r2, [r3, #0]
 800e702:	9b01      	ldr	r3, [sp, #4]
 800e704:	2b0e      	cmp	r3, #14
 800e706:	f200 80ad 	bhi.w	800e864 <_dtoa_r+0x484>
 800e70a:	2d00      	cmp	r5, #0
 800e70c:	f000 80aa 	beq.w	800e864 <_dtoa_r+0x484>
 800e710:	f1ba 0f00 	cmp.w	sl, #0
 800e714:	dd36      	ble.n	800e784 <_dtoa_r+0x3a4>
 800e716:	4ac3      	ldr	r2, [pc, #780]	; (800ea24 <_dtoa_r+0x644>)
 800e718:	f00a 030f 	and.w	r3, sl, #15
 800e71c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e720:	ed93 7b00 	vldr	d7, [r3]
 800e724:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e728:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e72c:	eeb0 8a47 	vmov.f32	s16, s14
 800e730:	eef0 8a67 	vmov.f32	s17, s15
 800e734:	d016      	beq.n	800e764 <_dtoa_r+0x384>
 800e736:	4bbc      	ldr	r3, [pc, #752]	; (800ea28 <_dtoa_r+0x648>)
 800e738:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e73c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e740:	f7f2 f89c 	bl	800087c <__aeabi_ddiv>
 800e744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e748:	f007 070f 	and.w	r7, r7, #15
 800e74c:	2503      	movs	r5, #3
 800e74e:	4eb6      	ldr	r6, [pc, #728]	; (800ea28 <_dtoa_r+0x648>)
 800e750:	b957      	cbnz	r7, 800e768 <_dtoa_r+0x388>
 800e752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e756:	ec53 2b18 	vmov	r2, r3, d8
 800e75a:	f7f2 f88f 	bl	800087c <__aeabi_ddiv>
 800e75e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e762:	e029      	b.n	800e7b8 <_dtoa_r+0x3d8>
 800e764:	2502      	movs	r5, #2
 800e766:	e7f2      	b.n	800e74e <_dtoa_r+0x36e>
 800e768:	07f9      	lsls	r1, r7, #31
 800e76a:	d508      	bpl.n	800e77e <_dtoa_r+0x39e>
 800e76c:	ec51 0b18 	vmov	r0, r1, d8
 800e770:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e774:	f7f1 ff58 	bl	8000628 <__aeabi_dmul>
 800e778:	ec41 0b18 	vmov	d8, r0, r1
 800e77c:	3501      	adds	r5, #1
 800e77e:	107f      	asrs	r7, r7, #1
 800e780:	3608      	adds	r6, #8
 800e782:	e7e5      	b.n	800e750 <_dtoa_r+0x370>
 800e784:	f000 80a6 	beq.w	800e8d4 <_dtoa_r+0x4f4>
 800e788:	f1ca 0600 	rsb	r6, sl, #0
 800e78c:	4ba5      	ldr	r3, [pc, #660]	; (800ea24 <_dtoa_r+0x644>)
 800e78e:	4fa6      	ldr	r7, [pc, #664]	; (800ea28 <_dtoa_r+0x648>)
 800e790:	f006 020f 	and.w	r2, r6, #15
 800e794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e7a0:	f7f1 ff42 	bl	8000628 <__aeabi_dmul>
 800e7a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7a8:	1136      	asrs	r6, r6, #4
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	2502      	movs	r5, #2
 800e7ae:	2e00      	cmp	r6, #0
 800e7b0:	f040 8085 	bne.w	800e8be <_dtoa_r+0x4de>
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1d2      	bne.n	800e75e <_dtoa_r+0x37e>
 800e7b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f000 808c 	beq.w	800e8d8 <_dtoa_r+0x4f8>
 800e7c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e7c4:	4b99      	ldr	r3, [pc, #612]	; (800ea2c <_dtoa_r+0x64c>)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	4630      	mov	r0, r6
 800e7ca:	4639      	mov	r1, r7
 800e7cc:	f7f2 f99e 	bl	8000b0c <__aeabi_dcmplt>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	f000 8081 	beq.w	800e8d8 <_dtoa_r+0x4f8>
 800e7d6:	9b01      	ldr	r3, [sp, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d07d      	beq.n	800e8d8 <_dtoa_r+0x4f8>
 800e7dc:	f1b9 0f00 	cmp.w	r9, #0
 800e7e0:	dd3c      	ble.n	800e85c <_dtoa_r+0x47c>
 800e7e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e7e6:	9307      	str	r3, [sp, #28]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	4b91      	ldr	r3, [pc, #580]	; (800ea30 <_dtoa_r+0x650>)
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	4639      	mov	r1, r7
 800e7f0:	f7f1 ff1a 	bl	8000628 <__aeabi_dmul>
 800e7f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7f8:	3501      	adds	r5, #1
 800e7fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e7fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e802:	4628      	mov	r0, r5
 800e804:	f7f1 fea6 	bl	8000554 <__aeabi_i2d>
 800e808:	4632      	mov	r2, r6
 800e80a:	463b      	mov	r3, r7
 800e80c:	f7f1 ff0c 	bl	8000628 <__aeabi_dmul>
 800e810:	4b88      	ldr	r3, [pc, #544]	; (800ea34 <_dtoa_r+0x654>)
 800e812:	2200      	movs	r2, #0
 800e814:	f7f1 fd52 	bl	80002bc <__adddf3>
 800e818:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e820:	9303      	str	r3, [sp, #12]
 800e822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e824:	2b00      	cmp	r3, #0
 800e826:	d15c      	bne.n	800e8e2 <_dtoa_r+0x502>
 800e828:	4b83      	ldr	r3, [pc, #524]	; (800ea38 <_dtoa_r+0x658>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	4630      	mov	r0, r6
 800e82e:	4639      	mov	r1, r7
 800e830:	f7f1 fd42 	bl	80002b8 <__aeabi_dsub>
 800e834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e838:	4606      	mov	r6, r0
 800e83a:	460f      	mov	r7, r1
 800e83c:	f7f2 f984 	bl	8000b48 <__aeabi_dcmpgt>
 800e840:	2800      	cmp	r0, #0
 800e842:	f040 8296 	bne.w	800ed72 <_dtoa_r+0x992>
 800e846:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e84a:	4630      	mov	r0, r6
 800e84c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e850:	4639      	mov	r1, r7
 800e852:	f7f2 f95b 	bl	8000b0c <__aeabi_dcmplt>
 800e856:	2800      	cmp	r0, #0
 800e858:	f040 8288 	bne.w	800ed6c <_dtoa_r+0x98c>
 800e85c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e860:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e866:	2b00      	cmp	r3, #0
 800e868:	f2c0 8158 	blt.w	800eb1c <_dtoa_r+0x73c>
 800e86c:	f1ba 0f0e 	cmp.w	sl, #14
 800e870:	f300 8154 	bgt.w	800eb1c <_dtoa_r+0x73c>
 800e874:	4b6b      	ldr	r3, [pc, #428]	; (800ea24 <_dtoa_r+0x644>)
 800e876:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e87a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e880:	2b00      	cmp	r3, #0
 800e882:	f280 80e3 	bge.w	800ea4c <_dtoa_r+0x66c>
 800e886:	9b01      	ldr	r3, [sp, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	f300 80df 	bgt.w	800ea4c <_dtoa_r+0x66c>
 800e88e:	f040 826d 	bne.w	800ed6c <_dtoa_r+0x98c>
 800e892:	4b69      	ldr	r3, [pc, #420]	; (800ea38 <_dtoa_r+0x658>)
 800e894:	2200      	movs	r2, #0
 800e896:	4640      	mov	r0, r8
 800e898:	4649      	mov	r1, r9
 800e89a:	f7f1 fec5 	bl	8000628 <__aeabi_dmul>
 800e89e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8a2:	f7f2 f947 	bl	8000b34 <__aeabi_dcmpge>
 800e8a6:	9e01      	ldr	r6, [sp, #4]
 800e8a8:	4637      	mov	r7, r6
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	f040 8243 	bne.w	800ed36 <_dtoa_r+0x956>
 800e8b0:	9d00      	ldr	r5, [sp, #0]
 800e8b2:	2331      	movs	r3, #49	; 0x31
 800e8b4:	f805 3b01 	strb.w	r3, [r5], #1
 800e8b8:	f10a 0a01 	add.w	sl, sl, #1
 800e8bc:	e23f      	b.n	800ed3e <_dtoa_r+0x95e>
 800e8be:	07f2      	lsls	r2, r6, #31
 800e8c0:	d505      	bpl.n	800e8ce <_dtoa_r+0x4ee>
 800e8c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8c6:	f7f1 feaf 	bl	8000628 <__aeabi_dmul>
 800e8ca:	3501      	adds	r5, #1
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	1076      	asrs	r6, r6, #1
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	e76c      	b.n	800e7ae <_dtoa_r+0x3ce>
 800e8d4:	2502      	movs	r5, #2
 800e8d6:	e76f      	b.n	800e7b8 <_dtoa_r+0x3d8>
 800e8d8:	9b01      	ldr	r3, [sp, #4]
 800e8da:	f8cd a01c 	str.w	sl, [sp, #28]
 800e8de:	930c      	str	r3, [sp, #48]	; 0x30
 800e8e0:	e78d      	b.n	800e7fe <_dtoa_r+0x41e>
 800e8e2:	9900      	ldr	r1, [sp, #0]
 800e8e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e8e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8e8:	4b4e      	ldr	r3, [pc, #312]	; (800ea24 <_dtoa_r+0x644>)
 800e8ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e8ee:	4401      	add	r1, r0
 800e8f0:	9102      	str	r1, [sp, #8]
 800e8f2:	9908      	ldr	r1, [sp, #32]
 800e8f4:	eeb0 8a47 	vmov.f32	s16, s14
 800e8f8:	eef0 8a67 	vmov.f32	s17, s15
 800e8fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e900:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e904:	2900      	cmp	r1, #0
 800e906:	d045      	beq.n	800e994 <_dtoa_r+0x5b4>
 800e908:	494c      	ldr	r1, [pc, #304]	; (800ea3c <_dtoa_r+0x65c>)
 800e90a:	2000      	movs	r0, #0
 800e90c:	f7f1 ffb6 	bl	800087c <__aeabi_ddiv>
 800e910:	ec53 2b18 	vmov	r2, r3, d8
 800e914:	f7f1 fcd0 	bl	80002b8 <__aeabi_dsub>
 800e918:	9d00      	ldr	r5, [sp, #0]
 800e91a:	ec41 0b18 	vmov	d8, r0, r1
 800e91e:	4639      	mov	r1, r7
 800e920:	4630      	mov	r0, r6
 800e922:	f7f2 f931 	bl	8000b88 <__aeabi_d2iz>
 800e926:	900c      	str	r0, [sp, #48]	; 0x30
 800e928:	f7f1 fe14 	bl	8000554 <__aeabi_i2d>
 800e92c:	4602      	mov	r2, r0
 800e92e:	460b      	mov	r3, r1
 800e930:	4630      	mov	r0, r6
 800e932:	4639      	mov	r1, r7
 800e934:	f7f1 fcc0 	bl	80002b8 <__aeabi_dsub>
 800e938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e93a:	3330      	adds	r3, #48	; 0x30
 800e93c:	f805 3b01 	strb.w	r3, [r5], #1
 800e940:	ec53 2b18 	vmov	r2, r3, d8
 800e944:	4606      	mov	r6, r0
 800e946:	460f      	mov	r7, r1
 800e948:	f7f2 f8e0 	bl	8000b0c <__aeabi_dcmplt>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d165      	bne.n	800ea1c <_dtoa_r+0x63c>
 800e950:	4632      	mov	r2, r6
 800e952:	463b      	mov	r3, r7
 800e954:	4935      	ldr	r1, [pc, #212]	; (800ea2c <_dtoa_r+0x64c>)
 800e956:	2000      	movs	r0, #0
 800e958:	f7f1 fcae 	bl	80002b8 <__aeabi_dsub>
 800e95c:	ec53 2b18 	vmov	r2, r3, d8
 800e960:	f7f2 f8d4 	bl	8000b0c <__aeabi_dcmplt>
 800e964:	2800      	cmp	r0, #0
 800e966:	f040 80b9 	bne.w	800eadc <_dtoa_r+0x6fc>
 800e96a:	9b02      	ldr	r3, [sp, #8]
 800e96c:	429d      	cmp	r5, r3
 800e96e:	f43f af75 	beq.w	800e85c <_dtoa_r+0x47c>
 800e972:	4b2f      	ldr	r3, [pc, #188]	; (800ea30 <_dtoa_r+0x650>)
 800e974:	ec51 0b18 	vmov	r0, r1, d8
 800e978:	2200      	movs	r2, #0
 800e97a:	f7f1 fe55 	bl	8000628 <__aeabi_dmul>
 800e97e:	4b2c      	ldr	r3, [pc, #176]	; (800ea30 <_dtoa_r+0x650>)
 800e980:	ec41 0b18 	vmov	d8, r0, r1
 800e984:	2200      	movs	r2, #0
 800e986:	4630      	mov	r0, r6
 800e988:	4639      	mov	r1, r7
 800e98a:	f7f1 fe4d 	bl	8000628 <__aeabi_dmul>
 800e98e:	4606      	mov	r6, r0
 800e990:	460f      	mov	r7, r1
 800e992:	e7c4      	b.n	800e91e <_dtoa_r+0x53e>
 800e994:	ec51 0b17 	vmov	r0, r1, d7
 800e998:	f7f1 fe46 	bl	8000628 <__aeabi_dmul>
 800e99c:	9b02      	ldr	r3, [sp, #8]
 800e99e:	9d00      	ldr	r5, [sp, #0]
 800e9a0:	930c      	str	r3, [sp, #48]	; 0x30
 800e9a2:	ec41 0b18 	vmov	d8, r0, r1
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	f7f2 f8ed 	bl	8000b88 <__aeabi_d2iz>
 800e9ae:	9011      	str	r0, [sp, #68]	; 0x44
 800e9b0:	f7f1 fdd0 	bl	8000554 <__aeabi_i2d>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	4639      	mov	r1, r7
 800e9bc:	f7f1 fc7c 	bl	80002b8 <__aeabi_dsub>
 800e9c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9c2:	3330      	adds	r3, #48	; 0x30
 800e9c4:	f805 3b01 	strb.w	r3, [r5], #1
 800e9c8:	9b02      	ldr	r3, [sp, #8]
 800e9ca:	429d      	cmp	r5, r3
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	460f      	mov	r7, r1
 800e9d0:	f04f 0200 	mov.w	r2, #0
 800e9d4:	d134      	bne.n	800ea40 <_dtoa_r+0x660>
 800e9d6:	4b19      	ldr	r3, [pc, #100]	; (800ea3c <_dtoa_r+0x65c>)
 800e9d8:	ec51 0b18 	vmov	r0, r1, d8
 800e9dc:	f7f1 fc6e 	bl	80002bc <__adddf3>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	f7f2 f8ae 	bl	8000b48 <__aeabi_dcmpgt>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d175      	bne.n	800eadc <_dtoa_r+0x6fc>
 800e9f0:	ec53 2b18 	vmov	r2, r3, d8
 800e9f4:	4911      	ldr	r1, [pc, #68]	; (800ea3c <_dtoa_r+0x65c>)
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	f7f1 fc5e 	bl	80002b8 <__aeabi_dsub>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	460b      	mov	r3, r1
 800ea00:	4630      	mov	r0, r6
 800ea02:	4639      	mov	r1, r7
 800ea04:	f7f2 f882 	bl	8000b0c <__aeabi_dcmplt>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	f43f af27 	beq.w	800e85c <_dtoa_r+0x47c>
 800ea0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea10:	1e6b      	subs	r3, r5, #1
 800ea12:	930c      	str	r3, [sp, #48]	; 0x30
 800ea14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea18:	2b30      	cmp	r3, #48	; 0x30
 800ea1a:	d0f8      	beq.n	800ea0e <_dtoa_r+0x62e>
 800ea1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ea20:	e04a      	b.n	800eab8 <_dtoa_r+0x6d8>
 800ea22:	bf00      	nop
 800ea24:	08024ac0 	.word	0x08024ac0
 800ea28:	08024a98 	.word	0x08024a98
 800ea2c:	3ff00000 	.word	0x3ff00000
 800ea30:	40240000 	.word	0x40240000
 800ea34:	401c0000 	.word	0x401c0000
 800ea38:	40140000 	.word	0x40140000
 800ea3c:	3fe00000 	.word	0x3fe00000
 800ea40:	4baf      	ldr	r3, [pc, #700]	; (800ed00 <_dtoa_r+0x920>)
 800ea42:	f7f1 fdf1 	bl	8000628 <__aeabi_dmul>
 800ea46:	4606      	mov	r6, r0
 800ea48:	460f      	mov	r7, r1
 800ea4a:	e7ac      	b.n	800e9a6 <_dtoa_r+0x5c6>
 800ea4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea50:	9d00      	ldr	r5, [sp, #0]
 800ea52:	4642      	mov	r2, r8
 800ea54:	464b      	mov	r3, r9
 800ea56:	4630      	mov	r0, r6
 800ea58:	4639      	mov	r1, r7
 800ea5a:	f7f1 ff0f 	bl	800087c <__aeabi_ddiv>
 800ea5e:	f7f2 f893 	bl	8000b88 <__aeabi_d2iz>
 800ea62:	9002      	str	r0, [sp, #8]
 800ea64:	f7f1 fd76 	bl	8000554 <__aeabi_i2d>
 800ea68:	4642      	mov	r2, r8
 800ea6a:	464b      	mov	r3, r9
 800ea6c:	f7f1 fddc 	bl	8000628 <__aeabi_dmul>
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	4630      	mov	r0, r6
 800ea76:	4639      	mov	r1, r7
 800ea78:	f7f1 fc1e 	bl	80002b8 <__aeabi_dsub>
 800ea7c:	9e02      	ldr	r6, [sp, #8]
 800ea7e:	9f01      	ldr	r7, [sp, #4]
 800ea80:	3630      	adds	r6, #48	; 0x30
 800ea82:	f805 6b01 	strb.w	r6, [r5], #1
 800ea86:	9e00      	ldr	r6, [sp, #0]
 800ea88:	1bae      	subs	r6, r5, r6
 800ea8a:	42b7      	cmp	r7, r6
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	460b      	mov	r3, r1
 800ea90:	d137      	bne.n	800eb02 <_dtoa_r+0x722>
 800ea92:	f7f1 fc13 	bl	80002bc <__adddf3>
 800ea96:	4642      	mov	r2, r8
 800ea98:	464b      	mov	r3, r9
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	460f      	mov	r7, r1
 800ea9e:	f7f2 f853 	bl	8000b48 <__aeabi_dcmpgt>
 800eaa2:	b9c8      	cbnz	r0, 800ead8 <_dtoa_r+0x6f8>
 800eaa4:	4642      	mov	r2, r8
 800eaa6:	464b      	mov	r3, r9
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	4639      	mov	r1, r7
 800eaac:	f7f2 f824 	bl	8000af8 <__aeabi_dcmpeq>
 800eab0:	b110      	cbz	r0, 800eab8 <_dtoa_r+0x6d8>
 800eab2:	9b02      	ldr	r3, [sp, #8]
 800eab4:	07d9      	lsls	r1, r3, #31
 800eab6:	d40f      	bmi.n	800ead8 <_dtoa_r+0x6f8>
 800eab8:	4620      	mov	r0, r4
 800eaba:	4659      	mov	r1, fp
 800eabc:	f000 fe6a 	bl	800f794 <_Bfree>
 800eac0:	2300      	movs	r3, #0
 800eac2:	702b      	strb	r3, [r5, #0]
 800eac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eac6:	f10a 0001 	add.w	r0, sl, #1
 800eaca:	6018      	str	r0, [r3, #0]
 800eacc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f43f acd8 	beq.w	800e484 <_dtoa_r+0xa4>
 800ead4:	601d      	str	r5, [r3, #0]
 800ead6:	e4d5      	b.n	800e484 <_dtoa_r+0xa4>
 800ead8:	f8cd a01c 	str.w	sl, [sp, #28]
 800eadc:	462b      	mov	r3, r5
 800eade:	461d      	mov	r5, r3
 800eae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eae4:	2a39      	cmp	r2, #57	; 0x39
 800eae6:	d108      	bne.n	800eafa <_dtoa_r+0x71a>
 800eae8:	9a00      	ldr	r2, [sp, #0]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d1f7      	bne.n	800eade <_dtoa_r+0x6fe>
 800eaee:	9a07      	ldr	r2, [sp, #28]
 800eaf0:	9900      	ldr	r1, [sp, #0]
 800eaf2:	3201      	adds	r2, #1
 800eaf4:	9207      	str	r2, [sp, #28]
 800eaf6:	2230      	movs	r2, #48	; 0x30
 800eaf8:	700a      	strb	r2, [r1, #0]
 800eafa:	781a      	ldrb	r2, [r3, #0]
 800eafc:	3201      	adds	r2, #1
 800eafe:	701a      	strb	r2, [r3, #0]
 800eb00:	e78c      	b.n	800ea1c <_dtoa_r+0x63c>
 800eb02:	4b7f      	ldr	r3, [pc, #508]	; (800ed00 <_dtoa_r+0x920>)
 800eb04:	2200      	movs	r2, #0
 800eb06:	f7f1 fd8f 	bl	8000628 <__aeabi_dmul>
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	4606      	mov	r6, r0
 800eb10:	460f      	mov	r7, r1
 800eb12:	f7f1 fff1 	bl	8000af8 <__aeabi_dcmpeq>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	d09b      	beq.n	800ea52 <_dtoa_r+0x672>
 800eb1a:	e7cd      	b.n	800eab8 <_dtoa_r+0x6d8>
 800eb1c:	9a08      	ldr	r2, [sp, #32]
 800eb1e:	2a00      	cmp	r2, #0
 800eb20:	f000 80c4 	beq.w	800ecac <_dtoa_r+0x8cc>
 800eb24:	9a05      	ldr	r2, [sp, #20]
 800eb26:	2a01      	cmp	r2, #1
 800eb28:	f300 80a8 	bgt.w	800ec7c <_dtoa_r+0x89c>
 800eb2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eb2e:	2a00      	cmp	r2, #0
 800eb30:	f000 80a0 	beq.w	800ec74 <_dtoa_r+0x894>
 800eb34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eb38:	9e06      	ldr	r6, [sp, #24]
 800eb3a:	4645      	mov	r5, r8
 800eb3c:	9a04      	ldr	r2, [sp, #16]
 800eb3e:	2101      	movs	r1, #1
 800eb40:	441a      	add	r2, r3
 800eb42:	4620      	mov	r0, r4
 800eb44:	4498      	add	r8, r3
 800eb46:	9204      	str	r2, [sp, #16]
 800eb48:	f000 ff2a 	bl	800f9a0 <__i2b>
 800eb4c:	4607      	mov	r7, r0
 800eb4e:	2d00      	cmp	r5, #0
 800eb50:	dd0b      	ble.n	800eb6a <_dtoa_r+0x78a>
 800eb52:	9b04      	ldr	r3, [sp, #16]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	dd08      	ble.n	800eb6a <_dtoa_r+0x78a>
 800eb58:	42ab      	cmp	r3, r5
 800eb5a:	9a04      	ldr	r2, [sp, #16]
 800eb5c:	bfa8      	it	ge
 800eb5e:	462b      	movge	r3, r5
 800eb60:	eba8 0803 	sub.w	r8, r8, r3
 800eb64:	1aed      	subs	r5, r5, r3
 800eb66:	1ad3      	subs	r3, r2, r3
 800eb68:	9304      	str	r3, [sp, #16]
 800eb6a:	9b06      	ldr	r3, [sp, #24]
 800eb6c:	b1fb      	cbz	r3, 800ebae <_dtoa_r+0x7ce>
 800eb6e:	9b08      	ldr	r3, [sp, #32]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f000 809f 	beq.w	800ecb4 <_dtoa_r+0x8d4>
 800eb76:	2e00      	cmp	r6, #0
 800eb78:	dd11      	ble.n	800eb9e <_dtoa_r+0x7be>
 800eb7a:	4639      	mov	r1, r7
 800eb7c:	4632      	mov	r2, r6
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f000 ffca 	bl	800fb18 <__pow5mult>
 800eb84:	465a      	mov	r2, fp
 800eb86:	4601      	mov	r1, r0
 800eb88:	4607      	mov	r7, r0
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f000 ff1e 	bl	800f9cc <__multiply>
 800eb90:	4659      	mov	r1, fp
 800eb92:	9007      	str	r0, [sp, #28]
 800eb94:	4620      	mov	r0, r4
 800eb96:	f000 fdfd 	bl	800f794 <_Bfree>
 800eb9a:	9b07      	ldr	r3, [sp, #28]
 800eb9c:	469b      	mov	fp, r3
 800eb9e:	9b06      	ldr	r3, [sp, #24]
 800eba0:	1b9a      	subs	r2, r3, r6
 800eba2:	d004      	beq.n	800ebae <_dtoa_r+0x7ce>
 800eba4:	4659      	mov	r1, fp
 800eba6:	4620      	mov	r0, r4
 800eba8:	f000 ffb6 	bl	800fb18 <__pow5mult>
 800ebac:	4683      	mov	fp, r0
 800ebae:	2101      	movs	r1, #1
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f000 fef5 	bl	800f9a0 <__i2b>
 800ebb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	4606      	mov	r6, r0
 800ebbc:	dd7c      	ble.n	800ecb8 <_dtoa_r+0x8d8>
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	4601      	mov	r1, r0
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f000 ffa8 	bl	800fb18 <__pow5mult>
 800ebc8:	9b05      	ldr	r3, [sp, #20]
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	4606      	mov	r6, r0
 800ebce:	dd76      	ble.n	800ecbe <_dtoa_r+0x8de>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	9306      	str	r3, [sp, #24]
 800ebd4:	6933      	ldr	r3, [r6, #16]
 800ebd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ebda:	6918      	ldr	r0, [r3, #16]
 800ebdc:	f000 fe90 	bl	800f900 <__hi0bits>
 800ebe0:	f1c0 0020 	rsb	r0, r0, #32
 800ebe4:	9b04      	ldr	r3, [sp, #16]
 800ebe6:	4418      	add	r0, r3
 800ebe8:	f010 001f 	ands.w	r0, r0, #31
 800ebec:	f000 8086 	beq.w	800ecfc <_dtoa_r+0x91c>
 800ebf0:	f1c0 0320 	rsb	r3, r0, #32
 800ebf4:	2b04      	cmp	r3, #4
 800ebf6:	dd7f      	ble.n	800ecf8 <_dtoa_r+0x918>
 800ebf8:	f1c0 001c 	rsb	r0, r0, #28
 800ebfc:	9b04      	ldr	r3, [sp, #16]
 800ebfe:	4403      	add	r3, r0
 800ec00:	4480      	add	r8, r0
 800ec02:	4405      	add	r5, r0
 800ec04:	9304      	str	r3, [sp, #16]
 800ec06:	f1b8 0f00 	cmp.w	r8, #0
 800ec0a:	dd05      	ble.n	800ec18 <_dtoa_r+0x838>
 800ec0c:	4659      	mov	r1, fp
 800ec0e:	4642      	mov	r2, r8
 800ec10:	4620      	mov	r0, r4
 800ec12:	f000 ffdb 	bl	800fbcc <__lshift>
 800ec16:	4683      	mov	fp, r0
 800ec18:	9b04      	ldr	r3, [sp, #16]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	dd05      	ble.n	800ec2a <_dtoa_r+0x84a>
 800ec1e:	4631      	mov	r1, r6
 800ec20:	461a      	mov	r2, r3
 800ec22:	4620      	mov	r0, r4
 800ec24:	f000 ffd2 	bl	800fbcc <__lshift>
 800ec28:	4606      	mov	r6, r0
 800ec2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d069      	beq.n	800ed04 <_dtoa_r+0x924>
 800ec30:	4631      	mov	r1, r6
 800ec32:	4658      	mov	r0, fp
 800ec34:	f001 f836 	bl	800fca4 <__mcmp>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	da63      	bge.n	800ed04 <_dtoa_r+0x924>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	4659      	mov	r1, fp
 800ec40:	220a      	movs	r2, #10
 800ec42:	4620      	mov	r0, r4
 800ec44:	f000 fdc8 	bl	800f7d8 <__multadd>
 800ec48:	9b08      	ldr	r3, [sp, #32]
 800ec4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec4e:	4683      	mov	fp, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	f000 818f 	beq.w	800ef74 <_dtoa_r+0xb94>
 800ec56:	4639      	mov	r1, r7
 800ec58:	2300      	movs	r3, #0
 800ec5a:	220a      	movs	r2, #10
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	f000 fdbb 	bl	800f7d8 <__multadd>
 800ec62:	f1b9 0f00 	cmp.w	r9, #0
 800ec66:	4607      	mov	r7, r0
 800ec68:	f300 808e 	bgt.w	800ed88 <_dtoa_r+0x9a8>
 800ec6c:	9b05      	ldr	r3, [sp, #20]
 800ec6e:	2b02      	cmp	r3, #2
 800ec70:	dc50      	bgt.n	800ed14 <_dtoa_r+0x934>
 800ec72:	e089      	b.n	800ed88 <_dtoa_r+0x9a8>
 800ec74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ec7a:	e75d      	b.n	800eb38 <_dtoa_r+0x758>
 800ec7c:	9b01      	ldr	r3, [sp, #4]
 800ec7e:	1e5e      	subs	r6, r3, #1
 800ec80:	9b06      	ldr	r3, [sp, #24]
 800ec82:	42b3      	cmp	r3, r6
 800ec84:	bfbf      	itttt	lt
 800ec86:	9b06      	ldrlt	r3, [sp, #24]
 800ec88:	9606      	strlt	r6, [sp, #24]
 800ec8a:	1af2      	sublt	r2, r6, r3
 800ec8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ec8e:	bfb6      	itet	lt
 800ec90:	189b      	addlt	r3, r3, r2
 800ec92:	1b9e      	subge	r6, r3, r6
 800ec94:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ec96:	9b01      	ldr	r3, [sp, #4]
 800ec98:	bfb8      	it	lt
 800ec9a:	2600      	movlt	r6, #0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	bfb5      	itete	lt
 800eca0:	eba8 0503 	sublt.w	r5, r8, r3
 800eca4:	9b01      	ldrge	r3, [sp, #4]
 800eca6:	2300      	movlt	r3, #0
 800eca8:	4645      	movge	r5, r8
 800ecaa:	e747      	b.n	800eb3c <_dtoa_r+0x75c>
 800ecac:	9e06      	ldr	r6, [sp, #24]
 800ecae:	9f08      	ldr	r7, [sp, #32]
 800ecb0:	4645      	mov	r5, r8
 800ecb2:	e74c      	b.n	800eb4e <_dtoa_r+0x76e>
 800ecb4:	9a06      	ldr	r2, [sp, #24]
 800ecb6:	e775      	b.n	800eba4 <_dtoa_r+0x7c4>
 800ecb8:	9b05      	ldr	r3, [sp, #20]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	dc18      	bgt.n	800ecf0 <_dtoa_r+0x910>
 800ecbe:	9b02      	ldr	r3, [sp, #8]
 800ecc0:	b9b3      	cbnz	r3, 800ecf0 <_dtoa_r+0x910>
 800ecc2:	9b03      	ldr	r3, [sp, #12]
 800ecc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecc8:	b9a3      	cbnz	r3, 800ecf4 <_dtoa_r+0x914>
 800ecca:	9b03      	ldr	r3, [sp, #12]
 800eccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ecd0:	0d1b      	lsrs	r3, r3, #20
 800ecd2:	051b      	lsls	r3, r3, #20
 800ecd4:	b12b      	cbz	r3, 800ece2 <_dtoa_r+0x902>
 800ecd6:	9b04      	ldr	r3, [sp, #16]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	9304      	str	r3, [sp, #16]
 800ecdc:	f108 0801 	add.w	r8, r8, #1
 800ece0:	2301      	movs	r3, #1
 800ece2:	9306      	str	r3, [sp, #24]
 800ece4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f47f af74 	bne.w	800ebd4 <_dtoa_r+0x7f4>
 800ecec:	2001      	movs	r0, #1
 800ecee:	e779      	b.n	800ebe4 <_dtoa_r+0x804>
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	e7f6      	b.n	800ece2 <_dtoa_r+0x902>
 800ecf4:	9b02      	ldr	r3, [sp, #8]
 800ecf6:	e7f4      	b.n	800ece2 <_dtoa_r+0x902>
 800ecf8:	d085      	beq.n	800ec06 <_dtoa_r+0x826>
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	301c      	adds	r0, #28
 800ecfe:	e77d      	b.n	800ebfc <_dtoa_r+0x81c>
 800ed00:	40240000 	.word	0x40240000
 800ed04:	9b01      	ldr	r3, [sp, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	dc38      	bgt.n	800ed7c <_dtoa_r+0x99c>
 800ed0a:	9b05      	ldr	r3, [sp, #20]
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	dd35      	ble.n	800ed7c <_dtoa_r+0x99c>
 800ed10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ed14:	f1b9 0f00 	cmp.w	r9, #0
 800ed18:	d10d      	bne.n	800ed36 <_dtoa_r+0x956>
 800ed1a:	4631      	mov	r1, r6
 800ed1c:	464b      	mov	r3, r9
 800ed1e:	2205      	movs	r2, #5
 800ed20:	4620      	mov	r0, r4
 800ed22:	f000 fd59 	bl	800f7d8 <__multadd>
 800ed26:	4601      	mov	r1, r0
 800ed28:	4606      	mov	r6, r0
 800ed2a:	4658      	mov	r0, fp
 800ed2c:	f000 ffba 	bl	800fca4 <__mcmp>
 800ed30:	2800      	cmp	r0, #0
 800ed32:	f73f adbd 	bgt.w	800e8b0 <_dtoa_r+0x4d0>
 800ed36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed38:	9d00      	ldr	r5, [sp, #0]
 800ed3a:	ea6f 0a03 	mvn.w	sl, r3
 800ed3e:	f04f 0800 	mov.w	r8, #0
 800ed42:	4631      	mov	r1, r6
 800ed44:	4620      	mov	r0, r4
 800ed46:	f000 fd25 	bl	800f794 <_Bfree>
 800ed4a:	2f00      	cmp	r7, #0
 800ed4c:	f43f aeb4 	beq.w	800eab8 <_dtoa_r+0x6d8>
 800ed50:	f1b8 0f00 	cmp.w	r8, #0
 800ed54:	d005      	beq.n	800ed62 <_dtoa_r+0x982>
 800ed56:	45b8      	cmp	r8, r7
 800ed58:	d003      	beq.n	800ed62 <_dtoa_r+0x982>
 800ed5a:	4641      	mov	r1, r8
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f000 fd19 	bl	800f794 <_Bfree>
 800ed62:	4639      	mov	r1, r7
 800ed64:	4620      	mov	r0, r4
 800ed66:	f000 fd15 	bl	800f794 <_Bfree>
 800ed6a:	e6a5      	b.n	800eab8 <_dtoa_r+0x6d8>
 800ed6c:	2600      	movs	r6, #0
 800ed6e:	4637      	mov	r7, r6
 800ed70:	e7e1      	b.n	800ed36 <_dtoa_r+0x956>
 800ed72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ed74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ed78:	4637      	mov	r7, r6
 800ed7a:	e599      	b.n	800e8b0 <_dtoa_r+0x4d0>
 800ed7c:	9b08      	ldr	r3, [sp, #32]
 800ed7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f000 80fd 	beq.w	800ef82 <_dtoa_r+0xba2>
 800ed88:	2d00      	cmp	r5, #0
 800ed8a:	dd05      	ble.n	800ed98 <_dtoa_r+0x9b8>
 800ed8c:	4639      	mov	r1, r7
 800ed8e:	462a      	mov	r2, r5
 800ed90:	4620      	mov	r0, r4
 800ed92:	f000 ff1b 	bl	800fbcc <__lshift>
 800ed96:	4607      	mov	r7, r0
 800ed98:	9b06      	ldr	r3, [sp, #24]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d05c      	beq.n	800ee58 <_dtoa_r+0xa78>
 800ed9e:	6879      	ldr	r1, [r7, #4]
 800eda0:	4620      	mov	r0, r4
 800eda2:	f000 fcb7 	bl	800f714 <_Balloc>
 800eda6:	4605      	mov	r5, r0
 800eda8:	b928      	cbnz	r0, 800edb6 <_dtoa_r+0x9d6>
 800edaa:	4b80      	ldr	r3, [pc, #512]	; (800efac <_dtoa_r+0xbcc>)
 800edac:	4602      	mov	r2, r0
 800edae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800edb2:	f7ff bb2e 	b.w	800e412 <_dtoa_r+0x32>
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	3202      	adds	r2, #2
 800edba:	0092      	lsls	r2, r2, #2
 800edbc:	f107 010c 	add.w	r1, r7, #12
 800edc0:	300c      	adds	r0, #12
 800edc2:	f000 fc99 	bl	800f6f8 <memcpy>
 800edc6:	2201      	movs	r2, #1
 800edc8:	4629      	mov	r1, r5
 800edca:	4620      	mov	r0, r4
 800edcc:	f000 fefe 	bl	800fbcc <__lshift>
 800edd0:	9b00      	ldr	r3, [sp, #0]
 800edd2:	3301      	adds	r3, #1
 800edd4:	9301      	str	r3, [sp, #4]
 800edd6:	9b00      	ldr	r3, [sp, #0]
 800edd8:	444b      	add	r3, r9
 800edda:	9307      	str	r3, [sp, #28]
 800eddc:	9b02      	ldr	r3, [sp, #8]
 800edde:	f003 0301 	and.w	r3, r3, #1
 800ede2:	46b8      	mov	r8, r7
 800ede4:	9306      	str	r3, [sp, #24]
 800ede6:	4607      	mov	r7, r0
 800ede8:	9b01      	ldr	r3, [sp, #4]
 800edea:	4631      	mov	r1, r6
 800edec:	3b01      	subs	r3, #1
 800edee:	4658      	mov	r0, fp
 800edf0:	9302      	str	r3, [sp, #8]
 800edf2:	f7ff fa67 	bl	800e2c4 <quorem>
 800edf6:	4603      	mov	r3, r0
 800edf8:	3330      	adds	r3, #48	; 0x30
 800edfa:	9004      	str	r0, [sp, #16]
 800edfc:	4641      	mov	r1, r8
 800edfe:	4658      	mov	r0, fp
 800ee00:	9308      	str	r3, [sp, #32]
 800ee02:	f000 ff4f 	bl	800fca4 <__mcmp>
 800ee06:	463a      	mov	r2, r7
 800ee08:	4681      	mov	r9, r0
 800ee0a:	4631      	mov	r1, r6
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f000 ff65 	bl	800fcdc <__mdiff>
 800ee12:	68c2      	ldr	r2, [r0, #12]
 800ee14:	9b08      	ldr	r3, [sp, #32]
 800ee16:	4605      	mov	r5, r0
 800ee18:	bb02      	cbnz	r2, 800ee5c <_dtoa_r+0xa7c>
 800ee1a:	4601      	mov	r1, r0
 800ee1c:	4658      	mov	r0, fp
 800ee1e:	f000 ff41 	bl	800fca4 <__mcmp>
 800ee22:	9b08      	ldr	r3, [sp, #32]
 800ee24:	4602      	mov	r2, r0
 800ee26:	4629      	mov	r1, r5
 800ee28:	4620      	mov	r0, r4
 800ee2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ee2e:	f000 fcb1 	bl	800f794 <_Bfree>
 800ee32:	9b05      	ldr	r3, [sp, #20]
 800ee34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee36:	9d01      	ldr	r5, [sp, #4]
 800ee38:	ea43 0102 	orr.w	r1, r3, r2
 800ee3c:	9b06      	ldr	r3, [sp, #24]
 800ee3e:	430b      	orrs	r3, r1
 800ee40:	9b08      	ldr	r3, [sp, #32]
 800ee42:	d10d      	bne.n	800ee60 <_dtoa_r+0xa80>
 800ee44:	2b39      	cmp	r3, #57	; 0x39
 800ee46:	d029      	beq.n	800ee9c <_dtoa_r+0xabc>
 800ee48:	f1b9 0f00 	cmp.w	r9, #0
 800ee4c:	dd01      	ble.n	800ee52 <_dtoa_r+0xa72>
 800ee4e:	9b04      	ldr	r3, [sp, #16]
 800ee50:	3331      	adds	r3, #49	; 0x31
 800ee52:	9a02      	ldr	r2, [sp, #8]
 800ee54:	7013      	strb	r3, [r2, #0]
 800ee56:	e774      	b.n	800ed42 <_dtoa_r+0x962>
 800ee58:	4638      	mov	r0, r7
 800ee5a:	e7b9      	b.n	800edd0 <_dtoa_r+0x9f0>
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	e7e2      	b.n	800ee26 <_dtoa_r+0xa46>
 800ee60:	f1b9 0f00 	cmp.w	r9, #0
 800ee64:	db06      	blt.n	800ee74 <_dtoa_r+0xa94>
 800ee66:	9905      	ldr	r1, [sp, #20]
 800ee68:	ea41 0909 	orr.w	r9, r1, r9
 800ee6c:	9906      	ldr	r1, [sp, #24]
 800ee6e:	ea59 0101 	orrs.w	r1, r9, r1
 800ee72:	d120      	bne.n	800eeb6 <_dtoa_r+0xad6>
 800ee74:	2a00      	cmp	r2, #0
 800ee76:	ddec      	ble.n	800ee52 <_dtoa_r+0xa72>
 800ee78:	4659      	mov	r1, fp
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	9301      	str	r3, [sp, #4]
 800ee80:	f000 fea4 	bl	800fbcc <__lshift>
 800ee84:	4631      	mov	r1, r6
 800ee86:	4683      	mov	fp, r0
 800ee88:	f000 ff0c 	bl	800fca4 <__mcmp>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	9b01      	ldr	r3, [sp, #4]
 800ee90:	dc02      	bgt.n	800ee98 <_dtoa_r+0xab8>
 800ee92:	d1de      	bne.n	800ee52 <_dtoa_r+0xa72>
 800ee94:	07da      	lsls	r2, r3, #31
 800ee96:	d5dc      	bpl.n	800ee52 <_dtoa_r+0xa72>
 800ee98:	2b39      	cmp	r3, #57	; 0x39
 800ee9a:	d1d8      	bne.n	800ee4e <_dtoa_r+0xa6e>
 800ee9c:	9a02      	ldr	r2, [sp, #8]
 800ee9e:	2339      	movs	r3, #57	; 0x39
 800eea0:	7013      	strb	r3, [r2, #0]
 800eea2:	462b      	mov	r3, r5
 800eea4:	461d      	mov	r5, r3
 800eea6:	3b01      	subs	r3, #1
 800eea8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eeac:	2a39      	cmp	r2, #57	; 0x39
 800eeae:	d050      	beq.n	800ef52 <_dtoa_r+0xb72>
 800eeb0:	3201      	adds	r2, #1
 800eeb2:	701a      	strb	r2, [r3, #0]
 800eeb4:	e745      	b.n	800ed42 <_dtoa_r+0x962>
 800eeb6:	2a00      	cmp	r2, #0
 800eeb8:	dd03      	ble.n	800eec2 <_dtoa_r+0xae2>
 800eeba:	2b39      	cmp	r3, #57	; 0x39
 800eebc:	d0ee      	beq.n	800ee9c <_dtoa_r+0xabc>
 800eebe:	3301      	adds	r3, #1
 800eec0:	e7c7      	b.n	800ee52 <_dtoa_r+0xa72>
 800eec2:	9a01      	ldr	r2, [sp, #4]
 800eec4:	9907      	ldr	r1, [sp, #28]
 800eec6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800eeca:	428a      	cmp	r2, r1
 800eecc:	d02a      	beq.n	800ef24 <_dtoa_r+0xb44>
 800eece:	4659      	mov	r1, fp
 800eed0:	2300      	movs	r3, #0
 800eed2:	220a      	movs	r2, #10
 800eed4:	4620      	mov	r0, r4
 800eed6:	f000 fc7f 	bl	800f7d8 <__multadd>
 800eeda:	45b8      	cmp	r8, r7
 800eedc:	4683      	mov	fp, r0
 800eede:	f04f 0300 	mov.w	r3, #0
 800eee2:	f04f 020a 	mov.w	r2, #10
 800eee6:	4641      	mov	r1, r8
 800eee8:	4620      	mov	r0, r4
 800eeea:	d107      	bne.n	800eefc <_dtoa_r+0xb1c>
 800eeec:	f000 fc74 	bl	800f7d8 <__multadd>
 800eef0:	4680      	mov	r8, r0
 800eef2:	4607      	mov	r7, r0
 800eef4:	9b01      	ldr	r3, [sp, #4]
 800eef6:	3301      	adds	r3, #1
 800eef8:	9301      	str	r3, [sp, #4]
 800eefa:	e775      	b.n	800ede8 <_dtoa_r+0xa08>
 800eefc:	f000 fc6c 	bl	800f7d8 <__multadd>
 800ef00:	4639      	mov	r1, r7
 800ef02:	4680      	mov	r8, r0
 800ef04:	2300      	movs	r3, #0
 800ef06:	220a      	movs	r2, #10
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f000 fc65 	bl	800f7d8 <__multadd>
 800ef0e:	4607      	mov	r7, r0
 800ef10:	e7f0      	b.n	800eef4 <_dtoa_r+0xb14>
 800ef12:	f1b9 0f00 	cmp.w	r9, #0
 800ef16:	9a00      	ldr	r2, [sp, #0]
 800ef18:	bfcc      	ite	gt
 800ef1a:	464d      	movgt	r5, r9
 800ef1c:	2501      	movle	r5, #1
 800ef1e:	4415      	add	r5, r2
 800ef20:	f04f 0800 	mov.w	r8, #0
 800ef24:	4659      	mov	r1, fp
 800ef26:	2201      	movs	r2, #1
 800ef28:	4620      	mov	r0, r4
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	f000 fe4e 	bl	800fbcc <__lshift>
 800ef30:	4631      	mov	r1, r6
 800ef32:	4683      	mov	fp, r0
 800ef34:	f000 feb6 	bl	800fca4 <__mcmp>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	dcb2      	bgt.n	800eea2 <_dtoa_r+0xac2>
 800ef3c:	d102      	bne.n	800ef44 <_dtoa_r+0xb64>
 800ef3e:	9b01      	ldr	r3, [sp, #4]
 800ef40:	07db      	lsls	r3, r3, #31
 800ef42:	d4ae      	bmi.n	800eea2 <_dtoa_r+0xac2>
 800ef44:	462b      	mov	r3, r5
 800ef46:	461d      	mov	r5, r3
 800ef48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef4c:	2a30      	cmp	r2, #48	; 0x30
 800ef4e:	d0fa      	beq.n	800ef46 <_dtoa_r+0xb66>
 800ef50:	e6f7      	b.n	800ed42 <_dtoa_r+0x962>
 800ef52:	9a00      	ldr	r2, [sp, #0]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d1a5      	bne.n	800eea4 <_dtoa_r+0xac4>
 800ef58:	f10a 0a01 	add.w	sl, sl, #1
 800ef5c:	2331      	movs	r3, #49	; 0x31
 800ef5e:	e779      	b.n	800ee54 <_dtoa_r+0xa74>
 800ef60:	4b13      	ldr	r3, [pc, #76]	; (800efb0 <_dtoa_r+0xbd0>)
 800ef62:	f7ff baaf 	b.w	800e4c4 <_dtoa_r+0xe4>
 800ef66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	f47f aa86 	bne.w	800e47a <_dtoa_r+0x9a>
 800ef6e:	4b11      	ldr	r3, [pc, #68]	; (800efb4 <_dtoa_r+0xbd4>)
 800ef70:	f7ff baa8 	b.w	800e4c4 <_dtoa_r+0xe4>
 800ef74:	f1b9 0f00 	cmp.w	r9, #0
 800ef78:	dc03      	bgt.n	800ef82 <_dtoa_r+0xba2>
 800ef7a:	9b05      	ldr	r3, [sp, #20]
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	f73f aec9 	bgt.w	800ed14 <_dtoa_r+0x934>
 800ef82:	9d00      	ldr	r5, [sp, #0]
 800ef84:	4631      	mov	r1, r6
 800ef86:	4658      	mov	r0, fp
 800ef88:	f7ff f99c 	bl	800e2c4 <quorem>
 800ef8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ef90:	f805 3b01 	strb.w	r3, [r5], #1
 800ef94:	9a00      	ldr	r2, [sp, #0]
 800ef96:	1aaa      	subs	r2, r5, r2
 800ef98:	4591      	cmp	r9, r2
 800ef9a:	ddba      	ble.n	800ef12 <_dtoa_r+0xb32>
 800ef9c:	4659      	mov	r1, fp
 800ef9e:	2300      	movs	r3, #0
 800efa0:	220a      	movs	r2, #10
 800efa2:	4620      	mov	r0, r4
 800efa4:	f000 fc18 	bl	800f7d8 <__multadd>
 800efa8:	4683      	mov	fp, r0
 800efaa:	e7eb      	b.n	800ef84 <_dtoa_r+0xba4>
 800efac:	080249a9 	.word	0x080249a9
 800efb0:	08024708 	.word	0x08024708
 800efb4:	0802493d 	.word	0x0802493d

0800efb8 <fiprintf>:
 800efb8:	b40e      	push	{r1, r2, r3}
 800efba:	b503      	push	{r0, r1, lr}
 800efbc:	4601      	mov	r1, r0
 800efbe:	ab03      	add	r3, sp, #12
 800efc0:	4805      	ldr	r0, [pc, #20]	; (800efd8 <fiprintf+0x20>)
 800efc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc6:	6800      	ldr	r0, [r0, #0]
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	f001 fa9d 	bl	8010508 <_vfiprintf_r>
 800efce:	b002      	add	sp, #8
 800efd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efd4:	b003      	add	sp, #12
 800efd6:	4770      	bx	lr
 800efd8:	20000040 	.word	0x20000040

0800efdc <rshift>:
 800efdc:	6903      	ldr	r3, [r0, #16]
 800efde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800efe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efe6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800efea:	f100 0414 	add.w	r4, r0, #20
 800efee:	dd45      	ble.n	800f07c <rshift+0xa0>
 800eff0:	f011 011f 	ands.w	r1, r1, #31
 800eff4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eff8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800effc:	d10c      	bne.n	800f018 <rshift+0x3c>
 800effe:	f100 0710 	add.w	r7, r0, #16
 800f002:	4629      	mov	r1, r5
 800f004:	42b1      	cmp	r1, r6
 800f006:	d334      	bcc.n	800f072 <rshift+0x96>
 800f008:	1a9b      	subs	r3, r3, r2
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	1eea      	subs	r2, r5, #3
 800f00e:	4296      	cmp	r6, r2
 800f010:	bf38      	it	cc
 800f012:	2300      	movcc	r3, #0
 800f014:	4423      	add	r3, r4
 800f016:	e015      	b.n	800f044 <rshift+0x68>
 800f018:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f01c:	f1c1 0820 	rsb	r8, r1, #32
 800f020:	40cf      	lsrs	r7, r1
 800f022:	f105 0e04 	add.w	lr, r5, #4
 800f026:	46a1      	mov	r9, r4
 800f028:	4576      	cmp	r6, lr
 800f02a:	46f4      	mov	ip, lr
 800f02c:	d815      	bhi.n	800f05a <rshift+0x7e>
 800f02e:	1a9b      	subs	r3, r3, r2
 800f030:	009a      	lsls	r2, r3, #2
 800f032:	3a04      	subs	r2, #4
 800f034:	3501      	adds	r5, #1
 800f036:	42ae      	cmp	r6, r5
 800f038:	bf38      	it	cc
 800f03a:	2200      	movcc	r2, #0
 800f03c:	18a3      	adds	r3, r4, r2
 800f03e:	50a7      	str	r7, [r4, r2]
 800f040:	b107      	cbz	r7, 800f044 <rshift+0x68>
 800f042:	3304      	adds	r3, #4
 800f044:	1b1a      	subs	r2, r3, r4
 800f046:	42a3      	cmp	r3, r4
 800f048:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f04c:	bf08      	it	eq
 800f04e:	2300      	moveq	r3, #0
 800f050:	6102      	str	r2, [r0, #16]
 800f052:	bf08      	it	eq
 800f054:	6143      	streq	r3, [r0, #20]
 800f056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f05a:	f8dc c000 	ldr.w	ip, [ip]
 800f05e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f062:	ea4c 0707 	orr.w	r7, ip, r7
 800f066:	f849 7b04 	str.w	r7, [r9], #4
 800f06a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f06e:	40cf      	lsrs	r7, r1
 800f070:	e7da      	b.n	800f028 <rshift+0x4c>
 800f072:	f851 cb04 	ldr.w	ip, [r1], #4
 800f076:	f847 cf04 	str.w	ip, [r7, #4]!
 800f07a:	e7c3      	b.n	800f004 <rshift+0x28>
 800f07c:	4623      	mov	r3, r4
 800f07e:	e7e1      	b.n	800f044 <rshift+0x68>

0800f080 <__hexdig_fun>:
 800f080:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f084:	2b09      	cmp	r3, #9
 800f086:	d802      	bhi.n	800f08e <__hexdig_fun+0xe>
 800f088:	3820      	subs	r0, #32
 800f08a:	b2c0      	uxtb	r0, r0
 800f08c:	4770      	bx	lr
 800f08e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f092:	2b05      	cmp	r3, #5
 800f094:	d801      	bhi.n	800f09a <__hexdig_fun+0x1a>
 800f096:	3847      	subs	r0, #71	; 0x47
 800f098:	e7f7      	b.n	800f08a <__hexdig_fun+0xa>
 800f09a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f09e:	2b05      	cmp	r3, #5
 800f0a0:	d801      	bhi.n	800f0a6 <__hexdig_fun+0x26>
 800f0a2:	3827      	subs	r0, #39	; 0x27
 800f0a4:	e7f1      	b.n	800f08a <__hexdig_fun+0xa>
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	4770      	bx	lr
	...

0800f0ac <__gethex>:
 800f0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b0:	ed2d 8b02 	vpush	{d8}
 800f0b4:	b089      	sub	sp, #36	; 0x24
 800f0b6:	ee08 0a10 	vmov	s16, r0
 800f0ba:	9304      	str	r3, [sp, #16]
 800f0bc:	4bbc      	ldr	r3, [pc, #752]	; (800f3b0 <__gethex+0x304>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	9301      	str	r3, [sp, #4]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	468b      	mov	fp, r1
 800f0c6:	4690      	mov	r8, r2
 800f0c8:	f7f1 f894 	bl	80001f4 <strlen>
 800f0cc:	9b01      	ldr	r3, [sp, #4]
 800f0ce:	f8db 2000 	ldr.w	r2, [fp]
 800f0d2:	4403      	add	r3, r0
 800f0d4:	4682      	mov	sl, r0
 800f0d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f0da:	9305      	str	r3, [sp, #20]
 800f0dc:	1c93      	adds	r3, r2, #2
 800f0de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f0e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f0e6:	32fe      	adds	r2, #254	; 0xfe
 800f0e8:	18d1      	adds	r1, r2, r3
 800f0ea:	461f      	mov	r7, r3
 800f0ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f0f0:	9100      	str	r1, [sp, #0]
 800f0f2:	2830      	cmp	r0, #48	; 0x30
 800f0f4:	d0f8      	beq.n	800f0e8 <__gethex+0x3c>
 800f0f6:	f7ff ffc3 	bl	800f080 <__hexdig_fun>
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d13a      	bne.n	800f176 <__gethex+0xca>
 800f100:	9901      	ldr	r1, [sp, #4]
 800f102:	4652      	mov	r2, sl
 800f104:	4638      	mov	r0, r7
 800f106:	f001 fb47 	bl	8010798 <strncmp>
 800f10a:	4605      	mov	r5, r0
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d168      	bne.n	800f1e2 <__gethex+0x136>
 800f110:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f114:	eb07 060a 	add.w	r6, r7, sl
 800f118:	f7ff ffb2 	bl	800f080 <__hexdig_fun>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d062      	beq.n	800f1e6 <__gethex+0x13a>
 800f120:	4633      	mov	r3, r6
 800f122:	7818      	ldrb	r0, [r3, #0]
 800f124:	2830      	cmp	r0, #48	; 0x30
 800f126:	461f      	mov	r7, r3
 800f128:	f103 0301 	add.w	r3, r3, #1
 800f12c:	d0f9      	beq.n	800f122 <__gethex+0x76>
 800f12e:	f7ff ffa7 	bl	800f080 <__hexdig_fun>
 800f132:	2301      	movs	r3, #1
 800f134:	fab0 f480 	clz	r4, r0
 800f138:	0964      	lsrs	r4, r4, #5
 800f13a:	4635      	mov	r5, r6
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	463a      	mov	r2, r7
 800f140:	4616      	mov	r6, r2
 800f142:	3201      	adds	r2, #1
 800f144:	7830      	ldrb	r0, [r6, #0]
 800f146:	f7ff ff9b 	bl	800f080 <__hexdig_fun>
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d1f8      	bne.n	800f140 <__gethex+0x94>
 800f14e:	9901      	ldr	r1, [sp, #4]
 800f150:	4652      	mov	r2, sl
 800f152:	4630      	mov	r0, r6
 800f154:	f001 fb20 	bl	8010798 <strncmp>
 800f158:	b980      	cbnz	r0, 800f17c <__gethex+0xd0>
 800f15a:	b94d      	cbnz	r5, 800f170 <__gethex+0xc4>
 800f15c:	eb06 050a 	add.w	r5, r6, sl
 800f160:	462a      	mov	r2, r5
 800f162:	4616      	mov	r6, r2
 800f164:	3201      	adds	r2, #1
 800f166:	7830      	ldrb	r0, [r6, #0]
 800f168:	f7ff ff8a 	bl	800f080 <__hexdig_fun>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d1f8      	bne.n	800f162 <__gethex+0xb6>
 800f170:	1bad      	subs	r5, r5, r6
 800f172:	00ad      	lsls	r5, r5, #2
 800f174:	e004      	b.n	800f180 <__gethex+0xd4>
 800f176:	2400      	movs	r4, #0
 800f178:	4625      	mov	r5, r4
 800f17a:	e7e0      	b.n	800f13e <__gethex+0x92>
 800f17c:	2d00      	cmp	r5, #0
 800f17e:	d1f7      	bne.n	800f170 <__gethex+0xc4>
 800f180:	7833      	ldrb	r3, [r6, #0]
 800f182:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f186:	2b50      	cmp	r3, #80	; 0x50
 800f188:	d13b      	bne.n	800f202 <__gethex+0x156>
 800f18a:	7873      	ldrb	r3, [r6, #1]
 800f18c:	2b2b      	cmp	r3, #43	; 0x2b
 800f18e:	d02c      	beq.n	800f1ea <__gethex+0x13e>
 800f190:	2b2d      	cmp	r3, #45	; 0x2d
 800f192:	d02e      	beq.n	800f1f2 <__gethex+0x146>
 800f194:	1c71      	adds	r1, r6, #1
 800f196:	f04f 0900 	mov.w	r9, #0
 800f19a:	7808      	ldrb	r0, [r1, #0]
 800f19c:	f7ff ff70 	bl	800f080 <__hexdig_fun>
 800f1a0:	1e43      	subs	r3, r0, #1
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	2b18      	cmp	r3, #24
 800f1a6:	d82c      	bhi.n	800f202 <__gethex+0x156>
 800f1a8:	f1a0 0210 	sub.w	r2, r0, #16
 800f1ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f1b0:	f7ff ff66 	bl	800f080 <__hexdig_fun>
 800f1b4:	1e43      	subs	r3, r0, #1
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	2b18      	cmp	r3, #24
 800f1ba:	d91d      	bls.n	800f1f8 <__gethex+0x14c>
 800f1bc:	f1b9 0f00 	cmp.w	r9, #0
 800f1c0:	d000      	beq.n	800f1c4 <__gethex+0x118>
 800f1c2:	4252      	negs	r2, r2
 800f1c4:	4415      	add	r5, r2
 800f1c6:	f8cb 1000 	str.w	r1, [fp]
 800f1ca:	b1e4      	cbz	r4, 800f206 <__gethex+0x15a>
 800f1cc:	9b00      	ldr	r3, [sp, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	bf14      	ite	ne
 800f1d2:	2700      	movne	r7, #0
 800f1d4:	2706      	moveq	r7, #6
 800f1d6:	4638      	mov	r0, r7
 800f1d8:	b009      	add	sp, #36	; 0x24
 800f1da:	ecbd 8b02 	vpop	{d8}
 800f1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e2:	463e      	mov	r6, r7
 800f1e4:	4625      	mov	r5, r4
 800f1e6:	2401      	movs	r4, #1
 800f1e8:	e7ca      	b.n	800f180 <__gethex+0xd4>
 800f1ea:	f04f 0900 	mov.w	r9, #0
 800f1ee:	1cb1      	adds	r1, r6, #2
 800f1f0:	e7d3      	b.n	800f19a <__gethex+0xee>
 800f1f2:	f04f 0901 	mov.w	r9, #1
 800f1f6:	e7fa      	b.n	800f1ee <__gethex+0x142>
 800f1f8:	230a      	movs	r3, #10
 800f1fa:	fb03 0202 	mla	r2, r3, r2, r0
 800f1fe:	3a10      	subs	r2, #16
 800f200:	e7d4      	b.n	800f1ac <__gethex+0x100>
 800f202:	4631      	mov	r1, r6
 800f204:	e7df      	b.n	800f1c6 <__gethex+0x11a>
 800f206:	1bf3      	subs	r3, r6, r7
 800f208:	3b01      	subs	r3, #1
 800f20a:	4621      	mov	r1, r4
 800f20c:	2b07      	cmp	r3, #7
 800f20e:	dc0b      	bgt.n	800f228 <__gethex+0x17c>
 800f210:	ee18 0a10 	vmov	r0, s16
 800f214:	f000 fa7e 	bl	800f714 <_Balloc>
 800f218:	4604      	mov	r4, r0
 800f21a:	b940      	cbnz	r0, 800f22e <__gethex+0x182>
 800f21c:	4b65      	ldr	r3, [pc, #404]	; (800f3b4 <__gethex+0x308>)
 800f21e:	4602      	mov	r2, r0
 800f220:	21de      	movs	r1, #222	; 0xde
 800f222:	4865      	ldr	r0, [pc, #404]	; (800f3b8 <__gethex+0x30c>)
 800f224:	f7ff f830 	bl	800e288 <__assert_func>
 800f228:	3101      	adds	r1, #1
 800f22a:	105b      	asrs	r3, r3, #1
 800f22c:	e7ee      	b.n	800f20c <__gethex+0x160>
 800f22e:	f100 0914 	add.w	r9, r0, #20
 800f232:	f04f 0b00 	mov.w	fp, #0
 800f236:	f1ca 0301 	rsb	r3, sl, #1
 800f23a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f23e:	f8cd b000 	str.w	fp, [sp]
 800f242:	9306      	str	r3, [sp, #24]
 800f244:	42b7      	cmp	r7, r6
 800f246:	d340      	bcc.n	800f2ca <__gethex+0x21e>
 800f248:	9802      	ldr	r0, [sp, #8]
 800f24a:	9b00      	ldr	r3, [sp, #0]
 800f24c:	f840 3b04 	str.w	r3, [r0], #4
 800f250:	eba0 0009 	sub.w	r0, r0, r9
 800f254:	1080      	asrs	r0, r0, #2
 800f256:	0146      	lsls	r6, r0, #5
 800f258:	6120      	str	r0, [r4, #16]
 800f25a:	4618      	mov	r0, r3
 800f25c:	f000 fb50 	bl	800f900 <__hi0bits>
 800f260:	1a30      	subs	r0, r6, r0
 800f262:	f8d8 6000 	ldr.w	r6, [r8]
 800f266:	42b0      	cmp	r0, r6
 800f268:	dd63      	ble.n	800f332 <__gethex+0x286>
 800f26a:	1b87      	subs	r7, r0, r6
 800f26c:	4639      	mov	r1, r7
 800f26e:	4620      	mov	r0, r4
 800f270:	f000 feea 	bl	8010048 <__any_on>
 800f274:	4682      	mov	sl, r0
 800f276:	b1a8      	cbz	r0, 800f2a4 <__gethex+0x1f8>
 800f278:	1e7b      	subs	r3, r7, #1
 800f27a:	1159      	asrs	r1, r3, #5
 800f27c:	f003 021f 	and.w	r2, r3, #31
 800f280:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f284:	f04f 0a01 	mov.w	sl, #1
 800f288:	fa0a f202 	lsl.w	r2, sl, r2
 800f28c:	420a      	tst	r2, r1
 800f28e:	d009      	beq.n	800f2a4 <__gethex+0x1f8>
 800f290:	4553      	cmp	r3, sl
 800f292:	dd05      	ble.n	800f2a0 <__gethex+0x1f4>
 800f294:	1eb9      	subs	r1, r7, #2
 800f296:	4620      	mov	r0, r4
 800f298:	f000 fed6 	bl	8010048 <__any_on>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d145      	bne.n	800f32c <__gethex+0x280>
 800f2a0:	f04f 0a02 	mov.w	sl, #2
 800f2a4:	4639      	mov	r1, r7
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f7ff fe98 	bl	800efdc <rshift>
 800f2ac:	443d      	add	r5, r7
 800f2ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f2b2:	42ab      	cmp	r3, r5
 800f2b4:	da4c      	bge.n	800f350 <__gethex+0x2a4>
 800f2b6:	ee18 0a10 	vmov	r0, s16
 800f2ba:	4621      	mov	r1, r4
 800f2bc:	f000 fa6a 	bl	800f794 <_Bfree>
 800f2c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	6013      	str	r3, [r2, #0]
 800f2c6:	27a3      	movs	r7, #163	; 0xa3
 800f2c8:	e785      	b.n	800f1d6 <__gethex+0x12a>
 800f2ca:	1e73      	subs	r3, r6, #1
 800f2cc:	9a05      	ldr	r2, [sp, #20]
 800f2ce:	9303      	str	r3, [sp, #12]
 800f2d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d019      	beq.n	800f30c <__gethex+0x260>
 800f2d8:	f1bb 0f20 	cmp.w	fp, #32
 800f2dc:	d107      	bne.n	800f2ee <__gethex+0x242>
 800f2de:	9b02      	ldr	r3, [sp, #8]
 800f2e0:	9a00      	ldr	r2, [sp, #0]
 800f2e2:	f843 2b04 	str.w	r2, [r3], #4
 800f2e6:	9302      	str	r3, [sp, #8]
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	9300      	str	r3, [sp, #0]
 800f2ec:	469b      	mov	fp, r3
 800f2ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f2f2:	f7ff fec5 	bl	800f080 <__hexdig_fun>
 800f2f6:	9b00      	ldr	r3, [sp, #0]
 800f2f8:	f000 000f 	and.w	r0, r0, #15
 800f2fc:	fa00 f00b 	lsl.w	r0, r0, fp
 800f300:	4303      	orrs	r3, r0
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	f10b 0b04 	add.w	fp, fp, #4
 800f308:	9b03      	ldr	r3, [sp, #12]
 800f30a:	e00d      	b.n	800f328 <__gethex+0x27c>
 800f30c:	9b03      	ldr	r3, [sp, #12]
 800f30e:	9a06      	ldr	r2, [sp, #24]
 800f310:	4413      	add	r3, r2
 800f312:	42bb      	cmp	r3, r7
 800f314:	d3e0      	bcc.n	800f2d8 <__gethex+0x22c>
 800f316:	4618      	mov	r0, r3
 800f318:	9901      	ldr	r1, [sp, #4]
 800f31a:	9307      	str	r3, [sp, #28]
 800f31c:	4652      	mov	r2, sl
 800f31e:	f001 fa3b 	bl	8010798 <strncmp>
 800f322:	9b07      	ldr	r3, [sp, #28]
 800f324:	2800      	cmp	r0, #0
 800f326:	d1d7      	bne.n	800f2d8 <__gethex+0x22c>
 800f328:	461e      	mov	r6, r3
 800f32a:	e78b      	b.n	800f244 <__gethex+0x198>
 800f32c:	f04f 0a03 	mov.w	sl, #3
 800f330:	e7b8      	b.n	800f2a4 <__gethex+0x1f8>
 800f332:	da0a      	bge.n	800f34a <__gethex+0x29e>
 800f334:	1a37      	subs	r7, r6, r0
 800f336:	4621      	mov	r1, r4
 800f338:	ee18 0a10 	vmov	r0, s16
 800f33c:	463a      	mov	r2, r7
 800f33e:	f000 fc45 	bl	800fbcc <__lshift>
 800f342:	1bed      	subs	r5, r5, r7
 800f344:	4604      	mov	r4, r0
 800f346:	f100 0914 	add.w	r9, r0, #20
 800f34a:	f04f 0a00 	mov.w	sl, #0
 800f34e:	e7ae      	b.n	800f2ae <__gethex+0x202>
 800f350:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f354:	42a8      	cmp	r0, r5
 800f356:	dd72      	ble.n	800f43e <__gethex+0x392>
 800f358:	1b45      	subs	r5, r0, r5
 800f35a:	42ae      	cmp	r6, r5
 800f35c:	dc36      	bgt.n	800f3cc <__gethex+0x320>
 800f35e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f362:	2b02      	cmp	r3, #2
 800f364:	d02a      	beq.n	800f3bc <__gethex+0x310>
 800f366:	2b03      	cmp	r3, #3
 800f368:	d02c      	beq.n	800f3c4 <__gethex+0x318>
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d115      	bne.n	800f39a <__gethex+0x2ee>
 800f36e:	42ae      	cmp	r6, r5
 800f370:	d113      	bne.n	800f39a <__gethex+0x2ee>
 800f372:	2e01      	cmp	r6, #1
 800f374:	d10b      	bne.n	800f38e <__gethex+0x2e2>
 800f376:	9a04      	ldr	r2, [sp, #16]
 800f378:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f37c:	6013      	str	r3, [r2, #0]
 800f37e:	2301      	movs	r3, #1
 800f380:	6123      	str	r3, [r4, #16]
 800f382:	f8c9 3000 	str.w	r3, [r9]
 800f386:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f388:	2762      	movs	r7, #98	; 0x62
 800f38a:	601c      	str	r4, [r3, #0]
 800f38c:	e723      	b.n	800f1d6 <__gethex+0x12a>
 800f38e:	1e71      	subs	r1, r6, #1
 800f390:	4620      	mov	r0, r4
 800f392:	f000 fe59 	bl	8010048 <__any_on>
 800f396:	2800      	cmp	r0, #0
 800f398:	d1ed      	bne.n	800f376 <__gethex+0x2ca>
 800f39a:	ee18 0a10 	vmov	r0, s16
 800f39e:	4621      	mov	r1, r4
 800f3a0:	f000 f9f8 	bl	800f794 <_Bfree>
 800f3a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	6013      	str	r3, [r2, #0]
 800f3aa:	2750      	movs	r7, #80	; 0x50
 800f3ac:	e713      	b.n	800f1d6 <__gethex+0x12a>
 800f3ae:	bf00      	nop
 800f3b0:	08024a24 	.word	0x08024a24
 800f3b4:	080249a9 	.word	0x080249a9
 800f3b8:	080249ba 	.word	0x080249ba
 800f3bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d1eb      	bne.n	800f39a <__gethex+0x2ee>
 800f3c2:	e7d8      	b.n	800f376 <__gethex+0x2ca>
 800f3c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1d5      	bne.n	800f376 <__gethex+0x2ca>
 800f3ca:	e7e6      	b.n	800f39a <__gethex+0x2ee>
 800f3cc:	1e6f      	subs	r7, r5, #1
 800f3ce:	f1ba 0f00 	cmp.w	sl, #0
 800f3d2:	d131      	bne.n	800f438 <__gethex+0x38c>
 800f3d4:	b127      	cbz	r7, 800f3e0 <__gethex+0x334>
 800f3d6:	4639      	mov	r1, r7
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f000 fe35 	bl	8010048 <__any_on>
 800f3de:	4682      	mov	sl, r0
 800f3e0:	117b      	asrs	r3, r7, #5
 800f3e2:	2101      	movs	r1, #1
 800f3e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f3e8:	f007 071f 	and.w	r7, r7, #31
 800f3ec:	fa01 f707 	lsl.w	r7, r1, r7
 800f3f0:	421f      	tst	r7, r3
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	bf18      	it	ne
 800f3f8:	f04a 0a02 	orrne.w	sl, sl, #2
 800f3fc:	1b76      	subs	r6, r6, r5
 800f3fe:	f7ff fded 	bl	800efdc <rshift>
 800f402:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f406:	2702      	movs	r7, #2
 800f408:	f1ba 0f00 	cmp.w	sl, #0
 800f40c:	d048      	beq.n	800f4a0 <__gethex+0x3f4>
 800f40e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f412:	2b02      	cmp	r3, #2
 800f414:	d015      	beq.n	800f442 <__gethex+0x396>
 800f416:	2b03      	cmp	r3, #3
 800f418:	d017      	beq.n	800f44a <__gethex+0x39e>
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d109      	bne.n	800f432 <__gethex+0x386>
 800f41e:	f01a 0f02 	tst.w	sl, #2
 800f422:	d006      	beq.n	800f432 <__gethex+0x386>
 800f424:	f8d9 0000 	ldr.w	r0, [r9]
 800f428:	ea4a 0a00 	orr.w	sl, sl, r0
 800f42c:	f01a 0f01 	tst.w	sl, #1
 800f430:	d10e      	bne.n	800f450 <__gethex+0x3a4>
 800f432:	f047 0710 	orr.w	r7, r7, #16
 800f436:	e033      	b.n	800f4a0 <__gethex+0x3f4>
 800f438:	f04f 0a01 	mov.w	sl, #1
 800f43c:	e7d0      	b.n	800f3e0 <__gethex+0x334>
 800f43e:	2701      	movs	r7, #1
 800f440:	e7e2      	b.n	800f408 <__gethex+0x35c>
 800f442:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f444:	f1c3 0301 	rsb	r3, r3, #1
 800f448:	9315      	str	r3, [sp, #84]	; 0x54
 800f44a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d0f0      	beq.n	800f432 <__gethex+0x386>
 800f450:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f454:	f104 0314 	add.w	r3, r4, #20
 800f458:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f45c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f460:	f04f 0c00 	mov.w	ip, #0
 800f464:	4618      	mov	r0, r3
 800f466:	f853 2b04 	ldr.w	r2, [r3], #4
 800f46a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f46e:	d01c      	beq.n	800f4aa <__gethex+0x3fe>
 800f470:	3201      	adds	r2, #1
 800f472:	6002      	str	r2, [r0, #0]
 800f474:	2f02      	cmp	r7, #2
 800f476:	f104 0314 	add.w	r3, r4, #20
 800f47a:	d13f      	bne.n	800f4fc <__gethex+0x450>
 800f47c:	f8d8 2000 	ldr.w	r2, [r8]
 800f480:	3a01      	subs	r2, #1
 800f482:	42b2      	cmp	r2, r6
 800f484:	d10a      	bne.n	800f49c <__gethex+0x3f0>
 800f486:	1171      	asrs	r1, r6, #5
 800f488:	2201      	movs	r2, #1
 800f48a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f48e:	f006 061f 	and.w	r6, r6, #31
 800f492:	fa02 f606 	lsl.w	r6, r2, r6
 800f496:	421e      	tst	r6, r3
 800f498:	bf18      	it	ne
 800f49a:	4617      	movne	r7, r2
 800f49c:	f047 0720 	orr.w	r7, r7, #32
 800f4a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4a2:	601c      	str	r4, [r3, #0]
 800f4a4:	9b04      	ldr	r3, [sp, #16]
 800f4a6:	601d      	str	r5, [r3, #0]
 800f4a8:	e695      	b.n	800f1d6 <__gethex+0x12a>
 800f4aa:	4299      	cmp	r1, r3
 800f4ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800f4b0:	d8d8      	bhi.n	800f464 <__gethex+0x3b8>
 800f4b2:	68a3      	ldr	r3, [r4, #8]
 800f4b4:	459b      	cmp	fp, r3
 800f4b6:	db19      	blt.n	800f4ec <__gethex+0x440>
 800f4b8:	6861      	ldr	r1, [r4, #4]
 800f4ba:	ee18 0a10 	vmov	r0, s16
 800f4be:	3101      	adds	r1, #1
 800f4c0:	f000 f928 	bl	800f714 <_Balloc>
 800f4c4:	4681      	mov	r9, r0
 800f4c6:	b918      	cbnz	r0, 800f4d0 <__gethex+0x424>
 800f4c8:	4b1a      	ldr	r3, [pc, #104]	; (800f534 <__gethex+0x488>)
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	2184      	movs	r1, #132	; 0x84
 800f4ce:	e6a8      	b.n	800f222 <__gethex+0x176>
 800f4d0:	6922      	ldr	r2, [r4, #16]
 800f4d2:	3202      	adds	r2, #2
 800f4d4:	f104 010c 	add.w	r1, r4, #12
 800f4d8:	0092      	lsls	r2, r2, #2
 800f4da:	300c      	adds	r0, #12
 800f4dc:	f000 f90c 	bl	800f6f8 <memcpy>
 800f4e0:	4621      	mov	r1, r4
 800f4e2:	ee18 0a10 	vmov	r0, s16
 800f4e6:	f000 f955 	bl	800f794 <_Bfree>
 800f4ea:	464c      	mov	r4, r9
 800f4ec:	6923      	ldr	r3, [r4, #16]
 800f4ee:	1c5a      	adds	r2, r3, #1
 800f4f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f4f4:	6122      	str	r2, [r4, #16]
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	615a      	str	r2, [r3, #20]
 800f4fa:	e7bb      	b.n	800f474 <__gethex+0x3c8>
 800f4fc:	6922      	ldr	r2, [r4, #16]
 800f4fe:	455a      	cmp	r2, fp
 800f500:	dd0b      	ble.n	800f51a <__gethex+0x46e>
 800f502:	2101      	movs	r1, #1
 800f504:	4620      	mov	r0, r4
 800f506:	f7ff fd69 	bl	800efdc <rshift>
 800f50a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f50e:	3501      	adds	r5, #1
 800f510:	42ab      	cmp	r3, r5
 800f512:	f6ff aed0 	blt.w	800f2b6 <__gethex+0x20a>
 800f516:	2701      	movs	r7, #1
 800f518:	e7c0      	b.n	800f49c <__gethex+0x3f0>
 800f51a:	f016 061f 	ands.w	r6, r6, #31
 800f51e:	d0fa      	beq.n	800f516 <__gethex+0x46a>
 800f520:	449a      	add	sl, r3
 800f522:	f1c6 0620 	rsb	r6, r6, #32
 800f526:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f52a:	f000 f9e9 	bl	800f900 <__hi0bits>
 800f52e:	42b0      	cmp	r0, r6
 800f530:	dbe7      	blt.n	800f502 <__gethex+0x456>
 800f532:	e7f0      	b.n	800f516 <__gethex+0x46a>
 800f534:	080249a9 	.word	0x080249a9

0800f538 <L_shift>:
 800f538:	f1c2 0208 	rsb	r2, r2, #8
 800f53c:	0092      	lsls	r2, r2, #2
 800f53e:	b570      	push	{r4, r5, r6, lr}
 800f540:	f1c2 0620 	rsb	r6, r2, #32
 800f544:	6843      	ldr	r3, [r0, #4]
 800f546:	6804      	ldr	r4, [r0, #0]
 800f548:	fa03 f506 	lsl.w	r5, r3, r6
 800f54c:	432c      	orrs	r4, r5
 800f54e:	40d3      	lsrs	r3, r2
 800f550:	6004      	str	r4, [r0, #0]
 800f552:	f840 3f04 	str.w	r3, [r0, #4]!
 800f556:	4288      	cmp	r0, r1
 800f558:	d3f4      	bcc.n	800f544 <L_shift+0xc>
 800f55a:	bd70      	pop	{r4, r5, r6, pc}

0800f55c <__match>:
 800f55c:	b530      	push	{r4, r5, lr}
 800f55e:	6803      	ldr	r3, [r0, #0]
 800f560:	3301      	adds	r3, #1
 800f562:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f566:	b914      	cbnz	r4, 800f56e <__match+0x12>
 800f568:	6003      	str	r3, [r0, #0]
 800f56a:	2001      	movs	r0, #1
 800f56c:	bd30      	pop	{r4, r5, pc}
 800f56e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f572:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f576:	2d19      	cmp	r5, #25
 800f578:	bf98      	it	ls
 800f57a:	3220      	addls	r2, #32
 800f57c:	42a2      	cmp	r2, r4
 800f57e:	d0f0      	beq.n	800f562 <__match+0x6>
 800f580:	2000      	movs	r0, #0
 800f582:	e7f3      	b.n	800f56c <__match+0x10>

0800f584 <__hexnan>:
 800f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f588:	680b      	ldr	r3, [r1, #0]
 800f58a:	6801      	ldr	r1, [r0, #0]
 800f58c:	115e      	asrs	r6, r3, #5
 800f58e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f592:	f013 031f 	ands.w	r3, r3, #31
 800f596:	b087      	sub	sp, #28
 800f598:	bf18      	it	ne
 800f59a:	3604      	addne	r6, #4
 800f59c:	2500      	movs	r5, #0
 800f59e:	1f37      	subs	r7, r6, #4
 800f5a0:	4682      	mov	sl, r0
 800f5a2:	4690      	mov	r8, r2
 800f5a4:	9301      	str	r3, [sp, #4]
 800f5a6:	f846 5c04 	str.w	r5, [r6, #-4]
 800f5aa:	46b9      	mov	r9, r7
 800f5ac:	463c      	mov	r4, r7
 800f5ae:	9502      	str	r5, [sp, #8]
 800f5b0:	46ab      	mov	fp, r5
 800f5b2:	784a      	ldrb	r2, [r1, #1]
 800f5b4:	1c4b      	adds	r3, r1, #1
 800f5b6:	9303      	str	r3, [sp, #12]
 800f5b8:	b342      	cbz	r2, 800f60c <__hexnan+0x88>
 800f5ba:	4610      	mov	r0, r2
 800f5bc:	9105      	str	r1, [sp, #20]
 800f5be:	9204      	str	r2, [sp, #16]
 800f5c0:	f7ff fd5e 	bl	800f080 <__hexdig_fun>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d14f      	bne.n	800f668 <__hexnan+0xe4>
 800f5c8:	9a04      	ldr	r2, [sp, #16]
 800f5ca:	9905      	ldr	r1, [sp, #20]
 800f5cc:	2a20      	cmp	r2, #32
 800f5ce:	d818      	bhi.n	800f602 <__hexnan+0x7e>
 800f5d0:	9b02      	ldr	r3, [sp, #8]
 800f5d2:	459b      	cmp	fp, r3
 800f5d4:	dd13      	ble.n	800f5fe <__hexnan+0x7a>
 800f5d6:	454c      	cmp	r4, r9
 800f5d8:	d206      	bcs.n	800f5e8 <__hexnan+0x64>
 800f5da:	2d07      	cmp	r5, #7
 800f5dc:	dc04      	bgt.n	800f5e8 <__hexnan+0x64>
 800f5de:	462a      	mov	r2, r5
 800f5e0:	4649      	mov	r1, r9
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f7ff ffa8 	bl	800f538 <L_shift>
 800f5e8:	4544      	cmp	r4, r8
 800f5ea:	d950      	bls.n	800f68e <__hexnan+0x10a>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	f1a4 0904 	sub.w	r9, r4, #4
 800f5f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5f6:	f8cd b008 	str.w	fp, [sp, #8]
 800f5fa:	464c      	mov	r4, r9
 800f5fc:	461d      	mov	r5, r3
 800f5fe:	9903      	ldr	r1, [sp, #12]
 800f600:	e7d7      	b.n	800f5b2 <__hexnan+0x2e>
 800f602:	2a29      	cmp	r2, #41	; 0x29
 800f604:	d156      	bne.n	800f6b4 <__hexnan+0x130>
 800f606:	3102      	adds	r1, #2
 800f608:	f8ca 1000 	str.w	r1, [sl]
 800f60c:	f1bb 0f00 	cmp.w	fp, #0
 800f610:	d050      	beq.n	800f6b4 <__hexnan+0x130>
 800f612:	454c      	cmp	r4, r9
 800f614:	d206      	bcs.n	800f624 <__hexnan+0xa0>
 800f616:	2d07      	cmp	r5, #7
 800f618:	dc04      	bgt.n	800f624 <__hexnan+0xa0>
 800f61a:	462a      	mov	r2, r5
 800f61c:	4649      	mov	r1, r9
 800f61e:	4620      	mov	r0, r4
 800f620:	f7ff ff8a 	bl	800f538 <L_shift>
 800f624:	4544      	cmp	r4, r8
 800f626:	d934      	bls.n	800f692 <__hexnan+0x10e>
 800f628:	f1a8 0204 	sub.w	r2, r8, #4
 800f62c:	4623      	mov	r3, r4
 800f62e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f632:	f842 1f04 	str.w	r1, [r2, #4]!
 800f636:	429f      	cmp	r7, r3
 800f638:	d2f9      	bcs.n	800f62e <__hexnan+0xaa>
 800f63a:	1b3b      	subs	r3, r7, r4
 800f63c:	f023 0303 	bic.w	r3, r3, #3
 800f640:	3304      	adds	r3, #4
 800f642:	3401      	adds	r4, #1
 800f644:	3e03      	subs	r6, #3
 800f646:	42b4      	cmp	r4, r6
 800f648:	bf88      	it	hi
 800f64a:	2304      	movhi	r3, #4
 800f64c:	4443      	add	r3, r8
 800f64e:	2200      	movs	r2, #0
 800f650:	f843 2b04 	str.w	r2, [r3], #4
 800f654:	429f      	cmp	r7, r3
 800f656:	d2fb      	bcs.n	800f650 <__hexnan+0xcc>
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	b91b      	cbnz	r3, 800f664 <__hexnan+0xe0>
 800f65c:	4547      	cmp	r7, r8
 800f65e:	d127      	bne.n	800f6b0 <__hexnan+0x12c>
 800f660:	2301      	movs	r3, #1
 800f662:	603b      	str	r3, [r7, #0]
 800f664:	2005      	movs	r0, #5
 800f666:	e026      	b.n	800f6b6 <__hexnan+0x132>
 800f668:	3501      	adds	r5, #1
 800f66a:	2d08      	cmp	r5, #8
 800f66c:	f10b 0b01 	add.w	fp, fp, #1
 800f670:	dd06      	ble.n	800f680 <__hexnan+0xfc>
 800f672:	4544      	cmp	r4, r8
 800f674:	d9c3      	bls.n	800f5fe <__hexnan+0x7a>
 800f676:	2300      	movs	r3, #0
 800f678:	f844 3c04 	str.w	r3, [r4, #-4]
 800f67c:	2501      	movs	r5, #1
 800f67e:	3c04      	subs	r4, #4
 800f680:	6822      	ldr	r2, [r4, #0]
 800f682:	f000 000f 	and.w	r0, r0, #15
 800f686:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f68a:	6022      	str	r2, [r4, #0]
 800f68c:	e7b7      	b.n	800f5fe <__hexnan+0x7a>
 800f68e:	2508      	movs	r5, #8
 800f690:	e7b5      	b.n	800f5fe <__hexnan+0x7a>
 800f692:	9b01      	ldr	r3, [sp, #4]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d0df      	beq.n	800f658 <__hexnan+0xd4>
 800f698:	f04f 32ff 	mov.w	r2, #4294967295
 800f69c:	f1c3 0320 	rsb	r3, r3, #32
 800f6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800f6a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f6a8:	401a      	ands	r2, r3
 800f6aa:	f846 2c04 	str.w	r2, [r6, #-4]
 800f6ae:	e7d3      	b.n	800f658 <__hexnan+0xd4>
 800f6b0:	3f04      	subs	r7, #4
 800f6b2:	e7d1      	b.n	800f658 <__hexnan+0xd4>
 800f6b4:	2004      	movs	r0, #4
 800f6b6:	b007      	add	sp, #28
 800f6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6bc <_localeconv_r>:
 800f6bc:	4800      	ldr	r0, [pc, #0]	; (800f6c0 <_localeconv_r+0x4>)
 800f6be:	4770      	bx	lr
 800f6c0:	20000198 	.word	0x20000198

0800f6c4 <malloc>:
 800f6c4:	4b02      	ldr	r3, [pc, #8]	; (800f6d0 <malloc+0xc>)
 800f6c6:	4601      	mov	r1, r0
 800f6c8:	6818      	ldr	r0, [r3, #0]
 800f6ca:	f000 bd3d 	b.w	8010148 <_malloc_r>
 800f6ce:	bf00      	nop
 800f6d0:	20000040 	.word	0x20000040

0800f6d4 <__ascii_mbtowc>:
 800f6d4:	b082      	sub	sp, #8
 800f6d6:	b901      	cbnz	r1, 800f6da <__ascii_mbtowc+0x6>
 800f6d8:	a901      	add	r1, sp, #4
 800f6da:	b142      	cbz	r2, 800f6ee <__ascii_mbtowc+0x1a>
 800f6dc:	b14b      	cbz	r3, 800f6f2 <__ascii_mbtowc+0x1e>
 800f6de:	7813      	ldrb	r3, [r2, #0]
 800f6e0:	600b      	str	r3, [r1, #0]
 800f6e2:	7812      	ldrb	r2, [r2, #0]
 800f6e4:	1e10      	subs	r0, r2, #0
 800f6e6:	bf18      	it	ne
 800f6e8:	2001      	movne	r0, #1
 800f6ea:	b002      	add	sp, #8
 800f6ec:	4770      	bx	lr
 800f6ee:	4610      	mov	r0, r2
 800f6f0:	e7fb      	b.n	800f6ea <__ascii_mbtowc+0x16>
 800f6f2:	f06f 0001 	mvn.w	r0, #1
 800f6f6:	e7f8      	b.n	800f6ea <__ascii_mbtowc+0x16>

0800f6f8 <memcpy>:
 800f6f8:	440a      	add	r2, r1
 800f6fa:	4291      	cmp	r1, r2
 800f6fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f700:	d100      	bne.n	800f704 <memcpy+0xc>
 800f702:	4770      	bx	lr
 800f704:	b510      	push	{r4, lr}
 800f706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f70e:	4291      	cmp	r1, r2
 800f710:	d1f9      	bne.n	800f706 <memcpy+0xe>
 800f712:	bd10      	pop	{r4, pc}

0800f714 <_Balloc>:
 800f714:	b570      	push	{r4, r5, r6, lr}
 800f716:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f718:	4604      	mov	r4, r0
 800f71a:	460d      	mov	r5, r1
 800f71c:	b976      	cbnz	r6, 800f73c <_Balloc+0x28>
 800f71e:	2010      	movs	r0, #16
 800f720:	f7ff ffd0 	bl	800f6c4 <malloc>
 800f724:	4602      	mov	r2, r0
 800f726:	6260      	str	r0, [r4, #36]	; 0x24
 800f728:	b920      	cbnz	r0, 800f734 <_Balloc+0x20>
 800f72a:	4b18      	ldr	r3, [pc, #96]	; (800f78c <_Balloc+0x78>)
 800f72c:	4818      	ldr	r0, [pc, #96]	; (800f790 <_Balloc+0x7c>)
 800f72e:	2166      	movs	r1, #102	; 0x66
 800f730:	f7fe fdaa 	bl	800e288 <__assert_func>
 800f734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f738:	6006      	str	r6, [r0, #0]
 800f73a:	60c6      	str	r6, [r0, #12]
 800f73c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f73e:	68f3      	ldr	r3, [r6, #12]
 800f740:	b183      	cbz	r3, 800f764 <_Balloc+0x50>
 800f742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f74a:	b9b8      	cbnz	r0, 800f77c <_Balloc+0x68>
 800f74c:	2101      	movs	r1, #1
 800f74e:	fa01 f605 	lsl.w	r6, r1, r5
 800f752:	1d72      	adds	r2, r6, #5
 800f754:	0092      	lsls	r2, r2, #2
 800f756:	4620      	mov	r0, r4
 800f758:	f000 fc97 	bl	801008a <_calloc_r>
 800f75c:	b160      	cbz	r0, 800f778 <_Balloc+0x64>
 800f75e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f762:	e00e      	b.n	800f782 <_Balloc+0x6e>
 800f764:	2221      	movs	r2, #33	; 0x21
 800f766:	2104      	movs	r1, #4
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 fc8e 	bl	801008a <_calloc_r>
 800f76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f770:	60f0      	str	r0, [r6, #12]
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d1e4      	bne.n	800f742 <_Balloc+0x2e>
 800f778:	2000      	movs	r0, #0
 800f77a:	bd70      	pop	{r4, r5, r6, pc}
 800f77c:	6802      	ldr	r2, [r0, #0]
 800f77e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f782:	2300      	movs	r3, #0
 800f784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f788:	e7f7      	b.n	800f77a <_Balloc+0x66>
 800f78a:	bf00      	nop
 800f78c:	08024788 	.word	0x08024788
 800f790:	08024a38 	.word	0x08024a38

0800f794 <_Bfree>:
 800f794:	b570      	push	{r4, r5, r6, lr}
 800f796:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f798:	4605      	mov	r5, r0
 800f79a:	460c      	mov	r4, r1
 800f79c:	b976      	cbnz	r6, 800f7bc <_Bfree+0x28>
 800f79e:	2010      	movs	r0, #16
 800f7a0:	f7ff ff90 	bl	800f6c4 <malloc>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	6268      	str	r0, [r5, #36]	; 0x24
 800f7a8:	b920      	cbnz	r0, 800f7b4 <_Bfree+0x20>
 800f7aa:	4b09      	ldr	r3, [pc, #36]	; (800f7d0 <_Bfree+0x3c>)
 800f7ac:	4809      	ldr	r0, [pc, #36]	; (800f7d4 <_Bfree+0x40>)
 800f7ae:	218a      	movs	r1, #138	; 0x8a
 800f7b0:	f7fe fd6a 	bl	800e288 <__assert_func>
 800f7b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7b8:	6006      	str	r6, [r0, #0]
 800f7ba:	60c6      	str	r6, [r0, #12]
 800f7bc:	b13c      	cbz	r4, 800f7ce <_Bfree+0x3a>
 800f7be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7c0:	6862      	ldr	r2, [r4, #4]
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7c8:	6021      	str	r1, [r4, #0]
 800f7ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7ce:	bd70      	pop	{r4, r5, r6, pc}
 800f7d0:	08024788 	.word	0x08024788
 800f7d4:	08024a38 	.word	0x08024a38

0800f7d8 <__multadd>:
 800f7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7dc:	690e      	ldr	r6, [r1, #16]
 800f7de:	4607      	mov	r7, r0
 800f7e0:	4698      	mov	r8, r3
 800f7e2:	460c      	mov	r4, r1
 800f7e4:	f101 0014 	add.w	r0, r1, #20
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	6805      	ldr	r5, [r0, #0]
 800f7ec:	b2a9      	uxth	r1, r5
 800f7ee:	fb02 8101 	mla	r1, r2, r1, r8
 800f7f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f7f6:	0c2d      	lsrs	r5, r5, #16
 800f7f8:	fb02 c505 	mla	r5, r2, r5, ip
 800f7fc:	b289      	uxth	r1, r1
 800f7fe:	3301      	adds	r3, #1
 800f800:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f804:	429e      	cmp	r6, r3
 800f806:	f840 1b04 	str.w	r1, [r0], #4
 800f80a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f80e:	dcec      	bgt.n	800f7ea <__multadd+0x12>
 800f810:	f1b8 0f00 	cmp.w	r8, #0
 800f814:	d022      	beq.n	800f85c <__multadd+0x84>
 800f816:	68a3      	ldr	r3, [r4, #8]
 800f818:	42b3      	cmp	r3, r6
 800f81a:	dc19      	bgt.n	800f850 <__multadd+0x78>
 800f81c:	6861      	ldr	r1, [r4, #4]
 800f81e:	4638      	mov	r0, r7
 800f820:	3101      	adds	r1, #1
 800f822:	f7ff ff77 	bl	800f714 <_Balloc>
 800f826:	4605      	mov	r5, r0
 800f828:	b928      	cbnz	r0, 800f836 <__multadd+0x5e>
 800f82a:	4602      	mov	r2, r0
 800f82c:	4b0d      	ldr	r3, [pc, #52]	; (800f864 <__multadd+0x8c>)
 800f82e:	480e      	ldr	r0, [pc, #56]	; (800f868 <__multadd+0x90>)
 800f830:	21b5      	movs	r1, #181	; 0xb5
 800f832:	f7fe fd29 	bl	800e288 <__assert_func>
 800f836:	6922      	ldr	r2, [r4, #16]
 800f838:	3202      	adds	r2, #2
 800f83a:	f104 010c 	add.w	r1, r4, #12
 800f83e:	0092      	lsls	r2, r2, #2
 800f840:	300c      	adds	r0, #12
 800f842:	f7ff ff59 	bl	800f6f8 <memcpy>
 800f846:	4621      	mov	r1, r4
 800f848:	4638      	mov	r0, r7
 800f84a:	f7ff ffa3 	bl	800f794 <_Bfree>
 800f84e:	462c      	mov	r4, r5
 800f850:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f854:	3601      	adds	r6, #1
 800f856:	f8c3 8014 	str.w	r8, [r3, #20]
 800f85a:	6126      	str	r6, [r4, #16]
 800f85c:	4620      	mov	r0, r4
 800f85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f862:	bf00      	nop
 800f864:	080249a9 	.word	0x080249a9
 800f868:	08024a38 	.word	0x08024a38

0800f86c <__s2b>:
 800f86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f870:	460c      	mov	r4, r1
 800f872:	4615      	mov	r5, r2
 800f874:	461f      	mov	r7, r3
 800f876:	2209      	movs	r2, #9
 800f878:	3308      	adds	r3, #8
 800f87a:	4606      	mov	r6, r0
 800f87c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f880:	2100      	movs	r1, #0
 800f882:	2201      	movs	r2, #1
 800f884:	429a      	cmp	r2, r3
 800f886:	db09      	blt.n	800f89c <__s2b+0x30>
 800f888:	4630      	mov	r0, r6
 800f88a:	f7ff ff43 	bl	800f714 <_Balloc>
 800f88e:	b940      	cbnz	r0, 800f8a2 <__s2b+0x36>
 800f890:	4602      	mov	r2, r0
 800f892:	4b19      	ldr	r3, [pc, #100]	; (800f8f8 <__s2b+0x8c>)
 800f894:	4819      	ldr	r0, [pc, #100]	; (800f8fc <__s2b+0x90>)
 800f896:	21ce      	movs	r1, #206	; 0xce
 800f898:	f7fe fcf6 	bl	800e288 <__assert_func>
 800f89c:	0052      	lsls	r2, r2, #1
 800f89e:	3101      	adds	r1, #1
 800f8a0:	e7f0      	b.n	800f884 <__s2b+0x18>
 800f8a2:	9b08      	ldr	r3, [sp, #32]
 800f8a4:	6143      	str	r3, [r0, #20]
 800f8a6:	2d09      	cmp	r5, #9
 800f8a8:	f04f 0301 	mov.w	r3, #1
 800f8ac:	6103      	str	r3, [r0, #16]
 800f8ae:	dd16      	ble.n	800f8de <__s2b+0x72>
 800f8b0:	f104 0909 	add.w	r9, r4, #9
 800f8b4:	46c8      	mov	r8, r9
 800f8b6:	442c      	add	r4, r5
 800f8b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f8bc:	4601      	mov	r1, r0
 800f8be:	3b30      	subs	r3, #48	; 0x30
 800f8c0:	220a      	movs	r2, #10
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f7ff ff88 	bl	800f7d8 <__multadd>
 800f8c8:	45a0      	cmp	r8, r4
 800f8ca:	d1f5      	bne.n	800f8b8 <__s2b+0x4c>
 800f8cc:	f1a5 0408 	sub.w	r4, r5, #8
 800f8d0:	444c      	add	r4, r9
 800f8d2:	1b2d      	subs	r5, r5, r4
 800f8d4:	1963      	adds	r3, r4, r5
 800f8d6:	42bb      	cmp	r3, r7
 800f8d8:	db04      	blt.n	800f8e4 <__s2b+0x78>
 800f8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8de:	340a      	adds	r4, #10
 800f8e0:	2509      	movs	r5, #9
 800f8e2:	e7f6      	b.n	800f8d2 <__s2b+0x66>
 800f8e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f8e8:	4601      	mov	r1, r0
 800f8ea:	3b30      	subs	r3, #48	; 0x30
 800f8ec:	220a      	movs	r2, #10
 800f8ee:	4630      	mov	r0, r6
 800f8f0:	f7ff ff72 	bl	800f7d8 <__multadd>
 800f8f4:	e7ee      	b.n	800f8d4 <__s2b+0x68>
 800f8f6:	bf00      	nop
 800f8f8:	080249a9 	.word	0x080249a9
 800f8fc:	08024a38 	.word	0x08024a38

0800f900 <__hi0bits>:
 800f900:	0c03      	lsrs	r3, r0, #16
 800f902:	041b      	lsls	r3, r3, #16
 800f904:	b9d3      	cbnz	r3, 800f93c <__hi0bits+0x3c>
 800f906:	0400      	lsls	r0, r0, #16
 800f908:	2310      	movs	r3, #16
 800f90a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f90e:	bf04      	itt	eq
 800f910:	0200      	lsleq	r0, r0, #8
 800f912:	3308      	addeq	r3, #8
 800f914:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f918:	bf04      	itt	eq
 800f91a:	0100      	lsleq	r0, r0, #4
 800f91c:	3304      	addeq	r3, #4
 800f91e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f922:	bf04      	itt	eq
 800f924:	0080      	lsleq	r0, r0, #2
 800f926:	3302      	addeq	r3, #2
 800f928:	2800      	cmp	r0, #0
 800f92a:	db05      	blt.n	800f938 <__hi0bits+0x38>
 800f92c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f930:	f103 0301 	add.w	r3, r3, #1
 800f934:	bf08      	it	eq
 800f936:	2320      	moveq	r3, #32
 800f938:	4618      	mov	r0, r3
 800f93a:	4770      	bx	lr
 800f93c:	2300      	movs	r3, #0
 800f93e:	e7e4      	b.n	800f90a <__hi0bits+0xa>

0800f940 <__lo0bits>:
 800f940:	6803      	ldr	r3, [r0, #0]
 800f942:	f013 0207 	ands.w	r2, r3, #7
 800f946:	4601      	mov	r1, r0
 800f948:	d00b      	beq.n	800f962 <__lo0bits+0x22>
 800f94a:	07da      	lsls	r2, r3, #31
 800f94c:	d424      	bmi.n	800f998 <__lo0bits+0x58>
 800f94e:	0798      	lsls	r0, r3, #30
 800f950:	bf49      	itett	mi
 800f952:	085b      	lsrmi	r3, r3, #1
 800f954:	089b      	lsrpl	r3, r3, #2
 800f956:	2001      	movmi	r0, #1
 800f958:	600b      	strmi	r3, [r1, #0]
 800f95a:	bf5c      	itt	pl
 800f95c:	600b      	strpl	r3, [r1, #0]
 800f95e:	2002      	movpl	r0, #2
 800f960:	4770      	bx	lr
 800f962:	b298      	uxth	r0, r3
 800f964:	b9b0      	cbnz	r0, 800f994 <__lo0bits+0x54>
 800f966:	0c1b      	lsrs	r3, r3, #16
 800f968:	2010      	movs	r0, #16
 800f96a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f96e:	bf04      	itt	eq
 800f970:	0a1b      	lsreq	r3, r3, #8
 800f972:	3008      	addeq	r0, #8
 800f974:	071a      	lsls	r2, r3, #28
 800f976:	bf04      	itt	eq
 800f978:	091b      	lsreq	r3, r3, #4
 800f97a:	3004      	addeq	r0, #4
 800f97c:	079a      	lsls	r2, r3, #30
 800f97e:	bf04      	itt	eq
 800f980:	089b      	lsreq	r3, r3, #2
 800f982:	3002      	addeq	r0, #2
 800f984:	07da      	lsls	r2, r3, #31
 800f986:	d403      	bmi.n	800f990 <__lo0bits+0x50>
 800f988:	085b      	lsrs	r3, r3, #1
 800f98a:	f100 0001 	add.w	r0, r0, #1
 800f98e:	d005      	beq.n	800f99c <__lo0bits+0x5c>
 800f990:	600b      	str	r3, [r1, #0]
 800f992:	4770      	bx	lr
 800f994:	4610      	mov	r0, r2
 800f996:	e7e8      	b.n	800f96a <__lo0bits+0x2a>
 800f998:	2000      	movs	r0, #0
 800f99a:	4770      	bx	lr
 800f99c:	2020      	movs	r0, #32
 800f99e:	4770      	bx	lr

0800f9a0 <__i2b>:
 800f9a0:	b510      	push	{r4, lr}
 800f9a2:	460c      	mov	r4, r1
 800f9a4:	2101      	movs	r1, #1
 800f9a6:	f7ff feb5 	bl	800f714 <_Balloc>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	b928      	cbnz	r0, 800f9ba <__i2b+0x1a>
 800f9ae:	4b05      	ldr	r3, [pc, #20]	; (800f9c4 <__i2b+0x24>)
 800f9b0:	4805      	ldr	r0, [pc, #20]	; (800f9c8 <__i2b+0x28>)
 800f9b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f9b6:	f7fe fc67 	bl	800e288 <__assert_func>
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	6144      	str	r4, [r0, #20]
 800f9be:	6103      	str	r3, [r0, #16]
 800f9c0:	bd10      	pop	{r4, pc}
 800f9c2:	bf00      	nop
 800f9c4:	080249a9 	.word	0x080249a9
 800f9c8:	08024a38 	.word	0x08024a38

0800f9cc <__multiply>:
 800f9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d0:	4614      	mov	r4, r2
 800f9d2:	690a      	ldr	r2, [r1, #16]
 800f9d4:	6923      	ldr	r3, [r4, #16]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	bfb8      	it	lt
 800f9da:	460b      	movlt	r3, r1
 800f9dc:	460d      	mov	r5, r1
 800f9de:	bfbc      	itt	lt
 800f9e0:	4625      	movlt	r5, r4
 800f9e2:	461c      	movlt	r4, r3
 800f9e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f9e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f9ec:	68ab      	ldr	r3, [r5, #8]
 800f9ee:	6869      	ldr	r1, [r5, #4]
 800f9f0:	eb0a 0709 	add.w	r7, sl, r9
 800f9f4:	42bb      	cmp	r3, r7
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	bfb8      	it	lt
 800f9fa:	3101      	addlt	r1, #1
 800f9fc:	f7ff fe8a 	bl	800f714 <_Balloc>
 800fa00:	b930      	cbnz	r0, 800fa10 <__multiply+0x44>
 800fa02:	4602      	mov	r2, r0
 800fa04:	4b42      	ldr	r3, [pc, #264]	; (800fb10 <__multiply+0x144>)
 800fa06:	4843      	ldr	r0, [pc, #268]	; (800fb14 <__multiply+0x148>)
 800fa08:	f240 115d 	movw	r1, #349	; 0x15d
 800fa0c:	f7fe fc3c 	bl	800e288 <__assert_func>
 800fa10:	f100 0614 	add.w	r6, r0, #20
 800fa14:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fa18:	4633      	mov	r3, r6
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	4543      	cmp	r3, r8
 800fa1e:	d31e      	bcc.n	800fa5e <__multiply+0x92>
 800fa20:	f105 0c14 	add.w	ip, r5, #20
 800fa24:	f104 0314 	add.w	r3, r4, #20
 800fa28:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fa2c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fa30:	9202      	str	r2, [sp, #8]
 800fa32:	ebac 0205 	sub.w	r2, ip, r5
 800fa36:	3a15      	subs	r2, #21
 800fa38:	f022 0203 	bic.w	r2, r2, #3
 800fa3c:	3204      	adds	r2, #4
 800fa3e:	f105 0115 	add.w	r1, r5, #21
 800fa42:	458c      	cmp	ip, r1
 800fa44:	bf38      	it	cc
 800fa46:	2204      	movcc	r2, #4
 800fa48:	9201      	str	r2, [sp, #4]
 800fa4a:	9a02      	ldr	r2, [sp, #8]
 800fa4c:	9303      	str	r3, [sp, #12]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d808      	bhi.n	800fa64 <__multiply+0x98>
 800fa52:	2f00      	cmp	r7, #0
 800fa54:	dc55      	bgt.n	800fb02 <__multiply+0x136>
 800fa56:	6107      	str	r7, [r0, #16]
 800fa58:	b005      	add	sp, #20
 800fa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5e:	f843 2b04 	str.w	r2, [r3], #4
 800fa62:	e7db      	b.n	800fa1c <__multiply+0x50>
 800fa64:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa68:	f1ba 0f00 	cmp.w	sl, #0
 800fa6c:	d020      	beq.n	800fab0 <__multiply+0xe4>
 800fa6e:	f105 0e14 	add.w	lr, r5, #20
 800fa72:	46b1      	mov	r9, r6
 800fa74:	2200      	movs	r2, #0
 800fa76:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fa7a:	f8d9 b000 	ldr.w	fp, [r9]
 800fa7e:	b2a1      	uxth	r1, r4
 800fa80:	fa1f fb8b 	uxth.w	fp, fp
 800fa84:	fb0a b101 	mla	r1, sl, r1, fp
 800fa88:	4411      	add	r1, r2
 800fa8a:	f8d9 2000 	ldr.w	r2, [r9]
 800fa8e:	0c24      	lsrs	r4, r4, #16
 800fa90:	0c12      	lsrs	r2, r2, #16
 800fa92:	fb0a 2404 	mla	r4, sl, r4, r2
 800fa96:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fa9a:	b289      	uxth	r1, r1
 800fa9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800faa0:	45f4      	cmp	ip, lr
 800faa2:	f849 1b04 	str.w	r1, [r9], #4
 800faa6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800faaa:	d8e4      	bhi.n	800fa76 <__multiply+0xaa>
 800faac:	9901      	ldr	r1, [sp, #4]
 800faae:	5072      	str	r2, [r6, r1]
 800fab0:	9a03      	ldr	r2, [sp, #12]
 800fab2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fab6:	3304      	adds	r3, #4
 800fab8:	f1b9 0f00 	cmp.w	r9, #0
 800fabc:	d01f      	beq.n	800fafe <__multiply+0x132>
 800fabe:	6834      	ldr	r4, [r6, #0]
 800fac0:	f105 0114 	add.w	r1, r5, #20
 800fac4:	46b6      	mov	lr, r6
 800fac6:	f04f 0a00 	mov.w	sl, #0
 800faca:	880a      	ldrh	r2, [r1, #0]
 800facc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fad0:	fb09 b202 	mla	r2, r9, r2, fp
 800fad4:	4492      	add	sl, r2
 800fad6:	b2a4      	uxth	r4, r4
 800fad8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fadc:	f84e 4b04 	str.w	r4, [lr], #4
 800fae0:	f851 4b04 	ldr.w	r4, [r1], #4
 800fae4:	f8be 2000 	ldrh.w	r2, [lr]
 800fae8:	0c24      	lsrs	r4, r4, #16
 800faea:	fb09 2404 	mla	r4, r9, r4, r2
 800faee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800faf2:	458c      	cmp	ip, r1
 800faf4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800faf8:	d8e7      	bhi.n	800faca <__multiply+0xfe>
 800fafa:	9a01      	ldr	r2, [sp, #4]
 800fafc:	50b4      	str	r4, [r6, r2]
 800fafe:	3604      	adds	r6, #4
 800fb00:	e7a3      	b.n	800fa4a <__multiply+0x7e>
 800fb02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d1a5      	bne.n	800fa56 <__multiply+0x8a>
 800fb0a:	3f01      	subs	r7, #1
 800fb0c:	e7a1      	b.n	800fa52 <__multiply+0x86>
 800fb0e:	bf00      	nop
 800fb10:	080249a9 	.word	0x080249a9
 800fb14:	08024a38 	.word	0x08024a38

0800fb18 <__pow5mult>:
 800fb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb1c:	4615      	mov	r5, r2
 800fb1e:	f012 0203 	ands.w	r2, r2, #3
 800fb22:	4606      	mov	r6, r0
 800fb24:	460f      	mov	r7, r1
 800fb26:	d007      	beq.n	800fb38 <__pow5mult+0x20>
 800fb28:	4c25      	ldr	r4, [pc, #148]	; (800fbc0 <__pow5mult+0xa8>)
 800fb2a:	3a01      	subs	r2, #1
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb32:	f7ff fe51 	bl	800f7d8 <__multadd>
 800fb36:	4607      	mov	r7, r0
 800fb38:	10ad      	asrs	r5, r5, #2
 800fb3a:	d03d      	beq.n	800fbb8 <__pow5mult+0xa0>
 800fb3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb3e:	b97c      	cbnz	r4, 800fb60 <__pow5mult+0x48>
 800fb40:	2010      	movs	r0, #16
 800fb42:	f7ff fdbf 	bl	800f6c4 <malloc>
 800fb46:	4602      	mov	r2, r0
 800fb48:	6270      	str	r0, [r6, #36]	; 0x24
 800fb4a:	b928      	cbnz	r0, 800fb58 <__pow5mult+0x40>
 800fb4c:	4b1d      	ldr	r3, [pc, #116]	; (800fbc4 <__pow5mult+0xac>)
 800fb4e:	481e      	ldr	r0, [pc, #120]	; (800fbc8 <__pow5mult+0xb0>)
 800fb50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fb54:	f7fe fb98 	bl	800e288 <__assert_func>
 800fb58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb5c:	6004      	str	r4, [r0, #0]
 800fb5e:	60c4      	str	r4, [r0, #12]
 800fb60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb68:	b94c      	cbnz	r4, 800fb7e <__pow5mult+0x66>
 800fb6a:	f240 2171 	movw	r1, #625	; 0x271
 800fb6e:	4630      	mov	r0, r6
 800fb70:	f7ff ff16 	bl	800f9a0 <__i2b>
 800fb74:	2300      	movs	r3, #0
 800fb76:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	6003      	str	r3, [r0, #0]
 800fb7e:	f04f 0900 	mov.w	r9, #0
 800fb82:	07eb      	lsls	r3, r5, #31
 800fb84:	d50a      	bpl.n	800fb9c <__pow5mult+0x84>
 800fb86:	4639      	mov	r1, r7
 800fb88:	4622      	mov	r2, r4
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	f7ff ff1e 	bl	800f9cc <__multiply>
 800fb90:	4639      	mov	r1, r7
 800fb92:	4680      	mov	r8, r0
 800fb94:	4630      	mov	r0, r6
 800fb96:	f7ff fdfd 	bl	800f794 <_Bfree>
 800fb9a:	4647      	mov	r7, r8
 800fb9c:	106d      	asrs	r5, r5, #1
 800fb9e:	d00b      	beq.n	800fbb8 <__pow5mult+0xa0>
 800fba0:	6820      	ldr	r0, [r4, #0]
 800fba2:	b938      	cbnz	r0, 800fbb4 <__pow5mult+0x9c>
 800fba4:	4622      	mov	r2, r4
 800fba6:	4621      	mov	r1, r4
 800fba8:	4630      	mov	r0, r6
 800fbaa:	f7ff ff0f 	bl	800f9cc <__multiply>
 800fbae:	6020      	str	r0, [r4, #0]
 800fbb0:	f8c0 9000 	str.w	r9, [r0]
 800fbb4:	4604      	mov	r4, r0
 800fbb6:	e7e4      	b.n	800fb82 <__pow5mult+0x6a>
 800fbb8:	4638      	mov	r0, r7
 800fbba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbbe:	bf00      	nop
 800fbc0:	08024b88 	.word	0x08024b88
 800fbc4:	08024788 	.word	0x08024788
 800fbc8:	08024a38 	.word	0x08024a38

0800fbcc <__lshift>:
 800fbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbd0:	460c      	mov	r4, r1
 800fbd2:	6849      	ldr	r1, [r1, #4]
 800fbd4:	6923      	ldr	r3, [r4, #16]
 800fbd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fbda:	68a3      	ldr	r3, [r4, #8]
 800fbdc:	4607      	mov	r7, r0
 800fbde:	4691      	mov	r9, r2
 800fbe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fbe4:	f108 0601 	add.w	r6, r8, #1
 800fbe8:	42b3      	cmp	r3, r6
 800fbea:	db0b      	blt.n	800fc04 <__lshift+0x38>
 800fbec:	4638      	mov	r0, r7
 800fbee:	f7ff fd91 	bl	800f714 <_Balloc>
 800fbf2:	4605      	mov	r5, r0
 800fbf4:	b948      	cbnz	r0, 800fc0a <__lshift+0x3e>
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	4b28      	ldr	r3, [pc, #160]	; (800fc9c <__lshift+0xd0>)
 800fbfa:	4829      	ldr	r0, [pc, #164]	; (800fca0 <__lshift+0xd4>)
 800fbfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fc00:	f7fe fb42 	bl	800e288 <__assert_func>
 800fc04:	3101      	adds	r1, #1
 800fc06:	005b      	lsls	r3, r3, #1
 800fc08:	e7ee      	b.n	800fbe8 <__lshift+0x1c>
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	f100 0114 	add.w	r1, r0, #20
 800fc10:	f100 0210 	add.w	r2, r0, #16
 800fc14:	4618      	mov	r0, r3
 800fc16:	4553      	cmp	r3, sl
 800fc18:	db33      	blt.n	800fc82 <__lshift+0xb6>
 800fc1a:	6920      	ldr	r0, [r4, #16]
 800fc1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc20:	f104 0314 	add.w	r3, r4, #20
 800fc24:	f019 091f 	ands.w	r9, r9, #31
 800fc28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc30:	d02b      	beq.n	800fc8a <__lshift+0xbe>
 800fc32:	f1c9 0e20 	rsb	lr, r9, #32
 800fc36:	468a      	mov	sl, r1
 800fc38:	2200      	movs	r2, #0
 800fc3a:	6818      	ldr	r0, [r3, #0]
 800fc3c:	fa00 f009 	lsl.w	r0, r0, r9
 800fc40:	4302      	orrs	r2, r0
 800fc42:	f84a 2b04 	str.w	r2, [sl], #4
 800fc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc4a:	459c      	cmp	ip, r3
 800fc4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc50:	d8f3      	bhi.n	800fc3a <__lshift+0x6e>
 800fc52:	ebac 0304 	sub.w	r3, ip, r4
 800fc56:	3b15      	subs	r3, #21
 800fc58:	f023 0303 	bic.w	r3, r3, #3
 800fc5c:	3304      	adds	r3, #4
 800fc5e:	f104 0015 	add.w	r0, r4, #21
 800fc62:	4584      	cmp	ip, r0
 800fc64:	bf38      	it	cc
 800fc66:	2304      	movcc	r3, #4
 800fc68:	50ca      	str	r2, [r1, r3]
 800fc6a:	b10a      	cbz	r2, 800fc70 <__lshift+0xa4>
 800fc6c:	f108 0602 	add.w	r6, r8, #2
 800fc70:	3e01      	subs	r6, #1
 800fc72:	4638      	mov	r0, r7
 800fc74:	612e      	str	r6, [r5, #16]
 800fc76:	4621      	mov	r1, r4
 800fc78:	f7ff fd8c 	bl	800f794 <_Bfree>
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc82:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc86:	3301      	adds	r3, #1
 800fc88:	e7c5      	b.n	800fc16 <__lshift+0x4a>
 800fc8a:	3904      	subs	r1, #4
 800fc8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc90:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc94:	459c      	cmp	ip, r3
 800fc96:	d8f9      	bhi.n	800fc8c <__lshift+0xc0>
 800fc98:	e7ea      	b.n	800fc70 <__lshift+0xa4>
 800fc9a:	bf00      	nop
 800fc9c:	080249a9 	.word	0x080249a9
 800fca0:	08024a38 	.word	0x08024a38

0800fca4 <__mcmp>:
 800fca4:	b530      	push	{r4, r5, lr}
 800fca6:	6902      	ldr	r2, [r0, #16]
 800fca8:	690c      	ldr	r4, [r1, #16]
 800fcaa:	1b12      	subs	r2, r2, r4
 800fcac:	d10e      	bne.n	800fccc <__mcmp+0x28>
 800fcae:	f100 0314 	add.w	r3, r0, #20
 800fcb2:	3114      	adds	r1, #20
 800fcb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fcb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fcc4:	42a5      	cmp	r5, r4
 800fcc6:	d003      	beq.n	800fcd0 <__mcmp+0x2c>
 800fcc8:	d305      	bcc.n	800fcd6 <__mcmp+0x32>
 800fcca:	2201      	movs	r2, #1
 800fccc:	4610      	mov	r0, r2
 800fcce:	bd30      	pop	{r4, r5, pc}
 800fcd0:	4283      	cmp	r3, r0
 800fcd2:	d3f3      	bcc.n	800fcbc <__mcmp+0x18>
 800fcd4:	e7fa      	b.n	800fccc <__mcmp+0x28>
 800fcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcda:	e7f7      	b.n	800fccc <__mcmp+0x28>

0800fcdc <__mdiff>:
 800fcdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce0:	460c      	mov	r4, r1
 800fce2:	4606      	mov	r6, r0
 800fce4:	4611      	mov	r1, r2
 800fce6:	4620      	mov	r0, r4
 800fce8:	4617      	mov	r7, r2
 800fcea:	f7ff ffdb 	bl	800fca4 <__mcmp>
 800fcee:	1e05      	subs	r5, r0, #0
 800fcf0:	d110      	bne.n	800fd14 <__mdiff+0x38>
 800fcf2:	4629      	mov	r1, r5
 800fcf4:	4630      	mov	r0, r6
 800fcf6:	f7ff fd0d 	bl	800f714 <_Balloc>
 800fcfa:	b930      	cbnz	r0, 800fd0a <__mdiff+0x2e>
 800fcfc:	4b39      	ldr	r3, [pc, #228]	; (800fde4 <__mdiff+0x108>)
 800fcfe:	4602      	mov	r2, r0
 800fd00:	f240 2132 	movw	r1, #562	; 0x232
 800fd04:	4838      	ldr	r0, [pc, #224]	; (800fde8 <__mdiff+0x10c>)
 800fd06:	f7fe fabf 	bl	800e288 <__assert_func>
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd14:	bfa4      	itt	ge
 800fd16:	463b      	movge	r3, r7
 800fd18:	4627      	movge	r7, r4
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	6879      	ldr	r1, [r7, #4]
 800fd1e:	bfa6      	itte	ge
 800fd20:	461c      	movge	r4, r3
 800fd22:	2500      	movge	r5, #0
 800fd24:	2501      	movlt	r5, #1
 800fd26:	f7ff fcf5 	bl	800f714 <_Balloc>
 800fd2a:	b920      	cbnz	r0, 800fd36 <__mdiff+0x5a>
 800fd2c:	4b2d      	ldr	r3, [pc, #180]	; (800fde4 <__mdiff+0x108>)
 800fd2e:	4602      	mov	r2, r0
 800fd30:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd34:	e7e6      	b.n	800fd04 <__mdiff+0x28>
 800fd36:	693e      	ldr	r6, [r7, #16]
 800fd38:	60c5      	str	r5, [r0, #12]
 800fd3a:	6925      	ldr	r5, [r4, #16]
 800fd3c:	f107 0114 	add.w	r1, r7, #20
 800fd40:	f104 0914 	add.w	r9, r4, #20
 800fd44:	f100 0e14 	add.w	lr, r0, #20
 800fd48:	f107 0210 	add.w	r2, r7, #16
 800fd4c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fd50:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fd54:	46f2      	mov	sl, lr
 800fd56:	2700      	movs	r7, #0
 800fd58:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd60:	fa1f f883 	uxth.w	r8, r3
 800fd64:	fa17 f78b 	uxtah	r7, r7, fp
 800fd68:	0c1b      	lsrs	r3, r3, #16
 800fd6a:	eba7 0808 	sub.w	r8, r7, r8
 800fd6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fd72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fd76:	fa1f f888 	uxth.w	r8, r8
 800fd7a:	141f      	asrs	r7, r3, #16
 800fd7c:	454d      	cmp	r5, r9
 800fd7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fd82:	f84a 3b04 	str.w	r3, [sl], #4
 800fd86:	d8e7      	bhi.n	800fd58 <__mdiff+0x7c>
 800fd88:	1b2b      	subs	r3, r5, r4
 800fd8a:	3b15      	subs	r3, #21
 800fd8c:	f023 0303 	bic.w	r3, r3, #3
 800fd90:	3304      	adds	r3, #4
 800fd92:	3415      	adds	r4, #21
 800fd94:	42a5      	cmp	r5, r4
 800fd96:	bf38      	it	cc
 800fd98:	2304      	movcc	r3, #4
 800fd9a:	4419      	add	r1, r3
 800fd9c:	4473      	add	r3, lr
 800fd9e:	469e      	mov	lr, r3
 800fda0:	460d      	mov	r5, r1
 800fda2:	4565      	cmp	r5, ip
 800fda4:	d30e      	bcc.n	800fdc4 <__mdiff+0xe8>
 800fda6:	f10c 0203 	add.w	r2, ip, #3
 800fdaa:	1a52      	subs	r2, r2, r1
 800fdac:	f022 0203 	bic.w	r2, r2, #3
 800fdb0:	3903      	subs	r1, #3
 800fdb2:	458c      	cmp	ip, r1
 800fdb4:	bf38      	it	cc
 800fdb6:	2200      	movcc	r2, #0
 800fdb8:	441a      	add	r2, r3
 800fdba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fdbe:	b17b      	cbz	r3, 800fde0 <__mdiff+0x104>
 800fdc0:	6106      	str	r6, [r0, #16]
 800fdc2:	e7a5      	b.n	800fd10 <__mdiff+0x34>
 800fdc4:	f855 8b04 	ldr.w	r8, [r5], #4
 800fdc8:	fa17 f488 	uxtah	r4, r7, r8
 800fdcc:	1422      	asrs	r2, r4, #16
 800fdce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fdd2:	b2a4      	uxth	r4, r4
 800fdd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fdd8:	f84e 4b04 	str.w	r4, [lr], #4
 800fddc:	1417      	asrs	r7, r2, #16
 800fdde:	e7e0      	b.n	800fda2 <__mdiff+0xc6>
 800fde0:	3e01      	subs	r6, #1
 800fde2:	e7ea      	b.n	800fdba <__mdiff+0xde>
 800fde4:	080249a9 	.word	0x080249a9
 800fde8:	08024a38 	.word	0x08024a38

0800fdec <__ulp>:
 800fdec:	b082      	sub	sp, #8
 800fdee:	ed8d 0b00 	vstr	d0, [sp]
 800fdf2:	9b01      	ldr	r3, [sp, #4]
 800fdf4:	4912      	ldr	r1, [pc, #72]	; (800fe40 <__ulp+0x54>)
 800fdf6:	4019      	ands	r1, r3
 800fdf8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fdfc:	2900      	cmp	r1, #0
 800fdfe:	dd05      	ble.n	800fe0c <__ulp+0x20>
 800fe00:	2200      	movs	r2, #0
 800fe02:	460b      	mov	r3, r1
 800fe04:	ec43 2b10 	vmov	d0, r2, r3
 800fe08:	b002      	add	sp, #8
 800fe0a:	4770      	bx	lr
 800fe0c:	4249      	negs	r1, r1
 800fe0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fe12:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fe16:	f04f 0200 	mov.w	r2, #0
 800fe1a:	f04f 0300 	mov.w	r3, #0
 800fe1e:	da04      	bge.n	800fe2a <__ulp+0x3e>
 800fe20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fe24:	fa41 f300 	asr.w	r3, r1, r0
 800fe28:	e7ec      	b.n	800fe04 <__ulp+0x18>
 800fe2a:	f1a0 0114 	sub.w	r1, r0, #20
 800fe2e:	291e      	cmp	r1, #30
 800fe30:	bfda      	itte	le
 800fe32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fe36:	fa20 f101 	lsrle.w	r1, r0, r1
 800fe3a:	2101      	movgt	r1, #1
 800fe3c:	460a      	mov	r2, r1
 800fe3e:	e7e1      	b.n	800fe04 <__ulp+0x18>
 800fe40:	7ff00000 	.word	0x7ff00000

0800fe44 <__b2d>:
 800fe44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe46:	6905      	ldr	r5, [r0, #16]
 800fe48:	f100 0714 	add.w	r7, r0, #20
 800fe4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fe50:	1f2e      	subs	r6, r5, #4
 800fe52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fe56:	4620      	mov	r0, r4
 800fe58:	f7ff fd52 	bl	800f900 <__hi0bits>
 800fe5c:	f1c0 0320 	rsb	r3, r0, #32
 800fe60:	280a      	cmp	r0, #10
 800fe62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fee0 <__b2d+0x9c>
 800fe66:	600b      	str	r3, [r1, #0]
 800fe68:	dc14      	bgt.n	800fe94 <__b2d+0x50>
 800fe6a:	f1c0 0e0b 	rsb	lr, r0, #11
 800fe6e:	fa24 f10e 	lsr.w	r1, r4, lr
 800fe72:	42b7      	cmp	r7, r6
 800fe74:	ea41 030c 	orr.w	r3, r1, ip
 800fe78:	bf34      	ite	cc
 800fe7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fe7e:	2100      	movcs	r1, #0
 800fe80:	3015      	adds	r0, #21
 800fe82:	fa04 f000 	lsl.w	r0, r4, r0
 800fe86:	fa21 f10e 	lsr.w	r1, r1, lr
 800fe8a:	ea40 0201 	orr.w	r2, r0, r1
 800fe8e:	ec43 2b10 	vmov	d0, r2, r3
 800fe92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe94:	42b7      	cmp	r7, r6
 800fe96:	bf3a      	itte	cc
 800fe98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fe9c:	f1a5 0608 	subcc.w	r6, r5, #8
 800fea0:	2100      	movcs	r1, #0
 800fea2:	380b      	subs	r0, #11
 800fea4:	d017      	beq.n	800fed6 <__b2d+0x92>
 800fea6:	f1c0 0c20 	rsb	ip, r0, #32
 800feaa:	fa04 f500 	lsl.w	r5, r4, r0
 800feae:	42be      	cmp	r6, r7
 800feb0:	fa21 f40c 	lsr.w	r4, r1, ip
 800feb4:	ea45 0504 	orr.w	r5, r5, r4
 800feb8:	bf8c      	ite	hi
 800feba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800febe:	2400      	movls	r4, #0
 800fec0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fec4:	fa01 f000 	lsl.w	r0, r1, r0
 800fec8:	fa24 f40c 	lsr.w	r4, r4, ip
 800fecc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fed0:	ea40 0204 	orr.w	r2, r0, r4
 800fed4:	e7db      	b.n	800fe8e <__b2d+0x4a>
 800fed6:	ea44 030c 	orr.w	r3, r4, ip
 800feda:	460a      	mov	r2, r1
 800fedc:	e7d7      	b.n	800fe8e <__b2d+0x4a>
 800fede:	bf00      	nop
 800fee0:	3ff00000 	.word	0x3ff00000

0800fee4 <__d2b>:
 800fee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fee8:	4689      	mov	r9, r1
 800feea:	2101      	movs	r1, #1
 800feec:	ec57 6b10 	vmov	r6, r7, d0
 800fef0:	4690      	mov	r8, r2
 800fef2:	f7ff fc0f 	bl	800f714 <_Balloc>
 800fef6:	4604      	mov	r4, r0
 800fef8:	b930      	cbnz	r0, 800ff08 <__d2b+0x24>
 800fefa:	4602      	mov	r2, r0
 800fefc:	4b25      	ldr	r3, [pc, #148]	; (800ff94 <__d2b+0xb0>)
 800fefe:	4826      	ldr	r0, [pc, #152]	; (800ff98 <__d2b+0xb4>)
 800ff00:	f240 310a 	movw	r1, #778	; 0x30a
 800ff04:	f7fe f9c0 	bl	800e288 <__assert_func>
 800ff08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ff0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff10:	bb35      	cbnz	r5, 800ff60 <__d2b+0x7c>
 800ff12:	2e00      	cmp	r6, #0
 800ff14:	9301      	str	r3, [sp, #4]
 800ff16:	d028      	beq.n	800ff6a <__d2b+0x86>
 800ff18:	4668      	mov	r0, sp
 800ff1a:	9600      	str	r6, [sp, #0]
 800ff1c:	f7ff fd10 	bl	800f940 <__lo0bits>
 800ff20:	9900      	ldr	r1, [sp, #0]
 800ff22:	b300      	cbz	r0, 800ff66 <__d2b+0x82>
 800ff24:	9a01      	ldr	r2, [sp, #4]
 800ff26:	f1c0 0320 	rsb	r3, r0, #32
 800ff2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ff2e:	430b      	orrs	r3, r1
 800ff30:	40c2      	lsrs	r2, r0
 800ff32:	6163      	str	r3, [r4, #20]
 800ff34:	9201      	str	r2, [sp, #4]
 800ff36:	9b01      	ldr	r3, [sp, #4]
 800ff38:	61a3      	str	r3, [r4, #24]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	bf14      	ite	ne
 800ff3e:	2202      	movne	r2, #2
 800ff40:	2201      	moveq	r2, #1
 800ff42:	6122      	str	r2, [r4, #16]
 800ff44:	b1d5      	cbz	r5, 800ff7c <__d2b+0x98>
 800ff46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff4a:	4405      	add	r5, r0
 800ff4c:	f8c9 5000 	str.w	r5, [r9]
 800ff50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ff54:	f8c8 0000 	str.w	r0, [r8]
 800ff58:	4620      	mov	r0, r4
 800ff5a:	b003      	add	sp, #12
 800ff5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff64:	e7d5      	b.n	800ff12 <__d2b+0x2e>
 800ff66:	6161      	str	r1, [r4, #20]
 800ff68:	e7e5      	b.n	800ff36 <__d2b+0x52>
 800ff6a:	a801      	add	r0, sp, #4
 800ff6c:	f7ff fce8 	bl	800f940 <__lo0bits>
 800ff70:	9b01      	ldr	r3, [sp, #4]
 800ff72:	6163      	str	r3, [r4, #20]
 800ff74:	2201      	movs	r2, #1
 800ff76:	6122      	str	r2, [r4, #16]
 800ff78:	3020      	adds	r0, #32
 800ff7a:	e7e3      	b.n	800ff44 <__d2b+0x60>
 800ff7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ff84:	f8c9 0000 	str.w	r0, [r9]
 800ff88:	6918      	ldr	r0, [r3, #16]
 800ff8a:	f7ff fcb9 	bl	800f900 <__hi0bits>
 800ff8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff92:	e7df      	b.n	800ff54 <__d2b+0x70>
 800ff94:	080249a9 	.word	0x080249a9
 800ff98:	08024a38 	.word	0x08024a38

0800ff9c <__ratio>:
 800ff9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa0:	4688      	mov	r8, r1
 800ffa2:	4669      	mov	r1, sp
 800ffa4:	4681      	mov	r9, r0
 800ffa6:	f7ff ff4d 	bl	800fe44 <__b2d>
 800ffaa:	a901      	add	r1, sp, #4
 800ffac:	4640      	mov	r0, r8
 800ffae:	ec55 4b10 	vmov	r4, r5, d0
 800ffb2:	f7ff ff47 	bl	800fe44 <__b2d>
 800ffb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ffbe:	eba3 0c02 	sub.w	ip, r3, r2
 800ffc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ffc6:	1a9b      	subs	r3, r3, r2
 800ffc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ffcc:	ec51 0b10 	vmov	r0, r1, d0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	bfd6      	itet	le
 800ffd4:	460a      	movle	r2, r1
 800ffd6:	462a      	movgt	r2, r5
 800ffd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ffdc:	468b      	mov	fp, r1
 800ffde:	462f      	mov	r7, r5
 800ffe0:	bfd4      	ite	le
 800ffe2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ffe6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ffea:	4620      	mov	r0, r4
 800ffec:	ee10 2a10 	vmov	r2, s0
 800fff0:	465b      	mov	r3, fp
 800fff2:	4639      	mov	r1, r7
 800fff4:	f7f0 fc42 	bl	800087c <__aeabi_ddiv>
 800fff8:	ec41 0b10 	vmov	d0, r0, r1
 800fffc:	b003      	add	sp, #12
 800fffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010002 <__copybits>:
 8010002:	3901      	subs	r1, #1
 8010004:	b570      	push	{r4, r5, r6, lr}
 8010006:	1149      	asrs	r1, r1, #5
 8010008:	6914      	ldr	r4, [r2, #16]
 801000a:	3101      	adds	r1, #1
 801000c:	f102 0314 	add.w	r3, r2, #20
 8010010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010018:	1f05      	subs	r5, r0, #4
 801001a:	42a3      	cmp	r3, r4
 801001c:	d30c      	bcc.n	8010038 <__copybits+0x36>
 801001e:	1aa3      	subs	r3, r4, r2
 8010020:	3b11      	subs	r3, #17
 8010022:	f023 0303 	bic.w	r3, r3, #3
 8010026:	3211      	adds	r2, #17
 8010028:	42a2      	cmp	r2, r4
 801002a:	bf88      	it	hi
 801002c:	2300      	movhi	r3, #0
 801002e:	4418      	add	r0, r3
 8010030:	2300      	movs	r3, #0
 8010032:	4288      	cmp	r0, r1
 8010034:	d305      	bcc.n	8010042 <__copybits+0x40>
 8010036:	bd70      	pop	{r4, r5, r6, pc}
 8010038:	f853 6b04 	ldr.w	r6, [r3], #4
 801003c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010040:	e7eb      	b.n	801001a <__copybits+0x18>
 8010042:	f840 3b04 	str.w	r3, [r0], #4
 8010046:	e7f4      	b.n	8010032 <__copybits+0x30>

08010048 <__any_on>:
 8010048:	f100 0214 	add.w	r2, r0, #20
 801004c:	6900      	ldr	r0, [r0, #16]
 801004e:	114b      	asrs	r3, r1, #5
 8010050:	4298      	cmp	r0, r3
 8010052:	b510      	push	{r4, lr}
 8010054:	db11      	blt.n	801007a <__any_on+0x32>
 8010056:	dd0a      	ble.n	801006e <__any_on+0x26>
 8010058:	f011 011f 	ands.w	r1, r1, #31
 801005c:	d007      	beq.n	801006e <__any_on+0x26>
 801005e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010062:	fa24 f001 	lsr.w	r0, r4, r1
 8010066:	fa00 f101 	lsl.w	r1, r0, r1
 801006a:	428c      	cmp	r4, r1
 801006c:	d10b      	bne.n	8010086 <__any_on+0x3e>
 801006e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010072:	4293      	cmp	r3, r2
 8010074:	d803      	bhi.n	801007e <__any_on+0x36>
 8010076:	2000      	movs	r0, #0
 8010078:	bd10      	pop	{r4, pc}
 801007a:	4603      	mov	r3, r0
 801007c:	e7f7      	b.n	801006e <__any_on+0x26>
 801007e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010082:	2900      	cmp	r1, #0
 8010084:	d0f5      	beq.n	8010072 <__any_on+0x2a>
 8010086:	2001      	movs	r0, #1
 8010088:	e7f6      	b.n	8010078 <__any_on+0x30>

0801008a <_calloc_r>:
 801008a:	b513      	push	{r0, r1, r4, lr}
 801008c:	434a      	muls	r2, r1
 801008e:	4611      	mov	r1, r2
 8010090:	9201      	str	r2, [sp, #4]
 8010092:	f000 f859 	bl	8010148 <_malloc_r>
 8010096:	4604      	mov	r4, r0
 8010098:	b118      	cbz	r0, 80100a2 <_calloc_r+0x18>
 801009a:	9a01      	ldr	r2, [sp, #4]
 801009c:	2100      	movs	r1, #0
 801009e:	f7fc fb27 	bl	800c6f0 <memset>
 80100a2:	4620      	mov	r0, r4
 80100a4:	b002      	add	sp, #8
 80100a6:	bd10      	pop	{r4, pc}

080100a8 <_free_r>:
 80100a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100aa:	2900      	cmp	r1, #0
 80100ac:	d048      	beq.n	8010140 <_free_r+0x98>
 80100ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100b2:	9001      	str	r0, [sp, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f1a1 0404 	sub.w	r4, r1, #4
 80100ba:	bfb8      	it	lt
 80100bc:	18e4      	addlt	r4, r4, r3
 80100be:	f000 fe8b 	bl	8010dd8 <__malloc_lock>
 80100c2:	4a20      	ldr	r2, [pc, #128]	; (8010144 <_free_r+0x9c>)
 80100c4:	9801      	ldr	r0, [sp, #4]
 80100c6:	6813      	ldr	r3, [r2, #0]
 80100c8:	4615      	mov	r5, r2
 80100ca:	b933      	cbnz	r3, 80100da <_free_r+0x32>
 80100cc:	6063      	str	r3, [r4, #4]
 80100ce:	6014      	str	r4, [r2, #0]
 80100d0:	b003      	add	sp, #12
 80100d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100d6:	f000 be85 	b.w	8010de4 <__malloc_unlock>
 80100da:	42a3      	cmp	r3, r4
 80100dc:	d90b      	bls.n	80100f6 <_free_r+0x4e>
 80100de:	6821      	ldr	r1, [r4, #0]
 80100e0:	1862      	adds	r2, r4, r1
 80100e2:	4293      	cmp	r3, r2
 80100e4:	bf04      	itt	eq
 80100e6:	681a      	ldreq	r2, [r3, #0]
 80100e8:	685b      	ldreq	r3, [r3, #4]
 80100ea:	6063      	str	r3, [r4, #4]
 80100ec:	bf04      	itt	eq
 80100ee:	1852      	addeq	r2, r2, r1
 80100f0:	6022      	streq	r2, [r4, #0]
 80100f2:	602c      	str	r4, [r5, #0]
 80100f4:	e7ec      	b.n	80100d0 <_free_r+0x28>
 80100f6:	461a      	mov	r2, r3
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	b10b      	cbz	r3, 8010100 <_free_r+0x58>
 80100fc:	42a3      	cmp	r3, r4
 80100fe:	d9fa      	bls.n	80100f6 <_free_r+0x4e>
 8010100:	6811      	ldr	r1, [r2, #0]
 8010102:	1855      	adds	r5, r2, r1
 8010104:	42a5      	cmp	r5, r4
 8010106:	d10b      	bne.n	8010120 <_free_r+0x78>
 8010108:	6824      	ldr	r4, [r4, #0]
 801010a:	4421      	add	r1, r4
 801010c:	1854      	adds	r4, r2, r1
 801010e:	42a3      	cmp	r3, r4
 8010110:	6011      	str	r1, [r2, #0]
 8010112:	d1dd      	bne.n	80100d0 <_free_r+0x28>
 8010114:	681c      	ldr	r4, [r3, #0]
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	6053      	str	r3, [r2, #4]
 801011a:	4421      	add	r1, r4
 801011c:	6011      	str	r1, [r2, #0]
 801011e:	e7d7      	b.n	80100d0 <_free_r+0x28>
 8010120:	d902      	bls.n	8010128 <_free_r+0x80>
 8010122:	230c      	movs	r3, #12
 8010124:	6003      	str	r3, [r0, #0]
 8010126:	e7d3      	b.n	80100d0 <_free_r+0x28>
 8010128:	6825      	ldr	r5, [r4, #0]
 801012a:	1961      	adds	r1, r4, r5
 801012c:	428b      	cmp	r3, r1
 801012e:	bf04      	itt	eq
 8010130:	6819      	ldreq	r1, [r3, #0]
 8010132:	685b      	ldreq	r3, [r3, #4]
 8010134:	6063      	str	r3, [r4, #4]
 8010136:	bf04      	itt	eq
 8010138:	1949      	addeq	r1, r1, r5
 801013a:	6021      	streq	r1, [r4, #0]
 801013c:	6054      	str	r4, [r2, #4]
 801013e:	e7c7      	b.n	80100d0 <_free_r+0x28>
 8010140:	b003      	add	sp, #12
 8010142:	bd30      	pop	{r4, r5, pc}
 8010144:	20000278 	.word	0x20000278

08010148 <_malloc_r>:
 8010148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014a:	1ccd      	adds	r5, r1, #3
 801014c:	f025 0503 	bic.w	r5, r5, #3
 8010150:	3508      	adds	r5, #8
 8010152:	2d0c      	cmp	r5, #12
 8010154:	bf38      	it	cc
 8010156:	250c      	movcc	r5, #12
 8010158:	2d00      	cmp	r5, #0
 801015a:	4606      	mov	r6, r0
 801015c:	db01      	blt.n	8010162 <_malloc_r+0x1a>
 801015e:	42a9      	cmp	r1, r5
 8010160:	d903      	bls.n	801016a <_malloc_r+0x22>
 8010162:	230c      	movs	r3, #12
 8010164:	6033      	str	r3, [r6, #0]
 8010166:	2000      	movs	r0, #0
 8010168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801016a:	f000 fe35 	bl	8010dd8 <__malloc_lock>
 801016e:	4921      	ldr	r1, [pc, #132]	; (80101f4 <_malloc_r+0xac>)
 8010170:	680a      	ldr	r2, [r1, #0]
 8010172:	4614      	mov	r4, r2
 8010174:	b99c      	cbnz	r4, 801019e <_malloc_r+0x56>
 8010176:	4f20      	ldr	r7, [pc, #128]	; (80101f8 <_malloc_r+0xb0>)
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	b923      	cbnz	r3, 8010186 <_malloc_r+0x3e>
 801017c:	4621      	mov	r1, r4
 801017e:	4630      	mov	r0, r6
 8010180:	f000 fafa 	bl	8010778 <_sbrk_r>
 8010184:	6038      	str	r0, [r7, #0]
 8010186:	4629      	mov	r1, r5
 8010188:	4630      	mov	r0, r6
 801018a:	f000 faf5 	bl	8010778 <_sbrk_r>
 801018e:	1c43      	adds	r3, r0, #1
 8010190:	d123      	bne.n	80101da <_malloc_r+0x92>
 8010192:	230c      	movs	r3, #12
 8010194:	6033      	str	r3, [r6, #0]
 8010196:	4630      	mov	r0, r6
 8010198:	f000 fe24 	bl	8010de4 <__malloc_unlock>
 801019c:	e7e3      	b.n	8010166 <_malloc_r+0x1e>
 801019e:	6823      	ldr	r3, [r4, #0]
 80101a0:	1b5b      	subs	r3, r3, r5
 80101a2:	d417      	bmi.n	80101d4 <_malloc_r+0x8c>
 80101a4:	2b0b      	cmp	r3, #11
 80101a6:	d903      	bls.n	80101b0 <_malloc_r+0x68>
 80101a8:	6023      	str	r3, [r4, #0]
 80101aa:	441c      	add	r4, r3
 80101ac:	6025      	str	r5, [r4, #0]
 80101ae:	e004      	b.n	80101ba <_malloc_r+0x72>
 80101b0:	6863      	ldr	r3, [r4, #4]
 80101b2:	42a2      	cmp	r2, r4
 80101b4:	bf0c      	ite	eq
 80101b6:	600b      	streq	r3, [r1, #0]
 80101b8:	6053      	strne	r3, [r2, #4]
 80101ba:	4630      	mov	r0, r6
 80101bc:	f000 fe12 	bl	8010de4 <__malloc_unlock>
 80101c0:	f104 000b 	add.w	r0, r4, #11
 80101c4:	1d23      	adds	r3, r4, #4
 80101c6:	f020 0007 	bic.w	r0, r0, #7
 80101ca:	1ac2      	subs	r2, r0, r3
 80101cc:	d0cc      	beq.n	8010168 <_malloc_r+0x20>
 80101ce:	1a1b      	subs	r3, r3, r0
 80101d0:	50a3      	str	r3, [r4, r2]
 80101d2:	e7c9      	b.n	8010168 <_malloc_r+0x20>
 80101d4:	4622      	mov	r2, r4
 80101d6:	6864      	ldr	r4, [r4, #4]
 80101d8:	e7cc      	b.n	8010174 <_malloc_r+0x2c>
 80101da:	1cc4      	adds	r4, r0, #3
 80101dc:	f024 0403 	bic.w	r4, r4, #3
 80101e0:	42a0      	cmp	r0, r4
 80101e2:	d0e3      	beq.n	80101ac <_malloc_r+0x64>
 80101e4:	1a21      	subs	r1, r4, r0
 80101e6:	4630      	mov	r0, r6
 80101e8:	f000 fac6 	bl	8010778 <_sbrk_r>
 80101ec:	3001      	adds	r0, #1
 80101ee:	d1dd      	bne.n	80101ac <_malloc_r+0x64>
 80101f0:	e7cf      	b.n	8010192 <_malloc_r+0x4a>
 80101f2:	bf00      	nop
 80101f4:	20000278 	.word	0x20000278
 80101f8:	2000027c 	.word	0x2000027c

080101fc <__ssputs_r>:
 80101fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010200:	688e      	ldr	r6, [r1, #8]
 8010202:	429e      	cmp	r6, r3
 8010204:	4682      	mov	sl, r0
 8010206:	460c      	mov	r4, r1
 8010208:	4690      	mov	r8, r2
 801020a:	461f      	mov	r7, r3
 801020c:	d838      	bhi.n	8010280 <__ssputs_r+0x84>
 801020e:	898a      	ldrh	r2, [r1, #12]
 8010210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010214:	d032      	beq.n	801027c <__ssputs_r+0x80>
 8010216:	6825      	ldr	r5, [r4, #0]
 8010218:	6909      	ldr	r1, [r1, #16]
 801021a:	eba5 0901 	sub.w	r9, r5, r1
 801021e:	6965      	ldr	r5, [r4, #20]
 8010220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010228:	3301      	adds	r3, #1
 801022a:	444b      	add	r3, r9
 801022c:	106d      	asrs	r5, r5, #1
 801022e:	429d      	cmp	r5, r3
 8010230:	bf38      	it	cc
 8010232:	461d      	movcc	r5, r3
 8010234:	0553      	lsls	r3, r2, #21
 8010236:	d531      	bpl.n	801029c <__ssputs_r+0xa0>
 8010238:	4629      	mov	r1, r5
 801023a:	f7ff ff85 	bl	8010148 <_malloc_r>
 801023e:	4606      	mov	r6, r0
 8010240:	b950      	cbnz	r0, 8010258 <__ssputs_r+0x5c>
 8010242:	230c      	movs	r3, #12
 8010244:	f8ca 3000 	str.w	r3, [sl]
 8010248:	89a3      	ldrh	r3, [r4, #12]
 801024a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801024e:	81a3      	strh	r3, [r4, #12]
 8010250:	f04f 30ff 	mov.w	r0, #4294967295
 8010254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010258:	6921      	ldr	r1, [r4, #16]
 801025a:	464a      	mov	r2, r9
 801025c:	f7ff fa4c 	bl	800f6f8 <memcpy>
 8010260:	89a3      	ldrh	r3, [r4, #12]
 8010262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801026a:	81a3      	strh	r3, [r4, #12]
 801026c:	6126      	str	r6, [r4, #16]
 801026e:	6165      	str	r5, [r4, #20]
 8010270:	444e      	add	r6, r9
 8010272:	eba5 0509 	sub.w	r5, r5, r9
 8010276:	6026      	str	r6, [r4, #0]
 8010278:	60a5      	str	r5, [r4, #8]
 801027a:	463e      	mov	r6, r7
 801027c:	42be      	cmp	r6, r7
 801027e:	d900      	bls.n	8010282 <__ssputs_r+0x86>
 8010280:	463e      	mov	r6, r7
 8010282:	4632      	mov	r2, r6
 8010284:	6820      	ldr	r0, [r4, #0]
 8010286:	4641      	mov	r1, r8
 8010288:	f000 fd8c 	bl	8010da4 <memmove>
 801028c:	68a3      	ldr	r3, [r4, #8]
 801028e:	6822      	ldr	r2, [r4, #0]
 8010290:	1b9b      	subs	r3, r3, r6
 8010292:	4432      	add	r2, r6
 8010294:	60a3      	str	r3, [r4, #8]
 8010296:	6022      	str	r2, [r4, #0]
 8010298:	2000      	movs	r0, #0
 801029a:	e7db      	b.n	8010254 <__ssputs_r+0x58>
 801029c:	462a      	mov	r2, r5
 801029e:	f000 fda7 	bl	8010df0 <_realloc_r>
 80102a2:	4606      	mov	r6, r0
 80102a4:	2800      	cmp	r0, #0
 80102a6:	d1e1      	bne.n	801026c <__ssputs_r+0x70>
 80102a8:	6921      	ldr	r1, [r4, #16]
 80102aa:	4650      	mov	r0, sl
 80102ac:	f7ff fefc 	bl	80100a8 <_free_r>
 80102b0:	e7c7      	b.n	8010242 <__ssputs_r+0x46>
	...

080102b4 <_svfiprintf_r>:
 80102b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b8:	4698      	mov	r8, r3
 80102ba:	898b      	ldrh	r3, [r1, #12]
 80102bc:	061b      	lsls	r3, r3, #24
 80102be:	b09d      	sub	sp, #116	; 0x74
 80102c0:	4607      	mov	r7, r0
 80102c2:	460d      	mov	r5, r1
 80102c4:	4614      	mov	r4, r2
 80102c6:	d50e      	bpl.n	80102e6 <_svfiprintf_r+0x32>
 80102c8:	690b      	ldr	r3, [r1, #16]
 80102ca:	b963      	cbnz	r3, 80102e6 <_svfiprintf_r+0x32>
 80102cc:	2140      	movs	r1, #64	; 0x40
 80102ce:	f7ff ff3b 	bl	8010148 <_malloc_r>
 80102d2:	6028      	str	r0, [r5, #0]
 80102d4:	6128      	str	r0, [r5, #16]
 80102d6:	b920      	cbnz	r0, 80102e2 <_svfiprintf_r+0x2e>
 80102d8:	230c      	movs	r3, #12
 80102da:	603b      	str	r3, [r7, #0]
 80102dc:	f04f 30ff 	mov.w	r0, #4294967295
 80102e0:	e0d1      	b.n	8010486 <_svfiprintf_r+0x1d2>
 80102e2:	2340      	movs	r3, #64	; 0x40
 80102e4:	616b      	str	r3, [r5, #20]
 80102e6:	2300      	movs	r3, #0
 80102e8:	9309      	str	r3, [sp, #36]	; 0x24
 80102ea:	2320      	movs	r3, #32
 80102ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80102f4:	2330      	movs	r3, #48	; 0x30
 80102f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80104a0 <_svfiprintf_r+0x1ec>
 80102fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102fe:	f04f 0901 	mov.w	r9, #1
 8010302:	4623      	mov	r3, r4
 8010304:	469a      	mov	sl, r3
 8010306:	f813 2b01 	ldrb.w	r2, [r3], #1
 801030a:	b10a      	cbz	r2, 8010310 <_svfiprintf_r+0x5c>
 801030c:	2a25      	cmp	r2, #37	; 0x25
 801030e:	d1f9      	bne.n	8010304 <_svfiprintf_r+0x50>
 8010310:	ebba 0b04 	subs.w	fp, sl, r4
 8010314:	d00b      	beq.n	801032e <_svfiprintf_r+0x7a>
 8010316:	465b      	mov	r3, fp
 8010318:	4622      	mov	r2, r4
 801031a:	4629      	mov	r1, r5
 801031c:	4638      	mov	r0, r7
 801031e:	f7ff ff6d 	bl	80101fc <__ssputs_r>
 8010322:	3001      	adds	r0, #1
 8010324:	f000 80aa 	beq.w	801047c <_svfiprintf_r+0x1c8>
 8010328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801032a:	445a      	add	r2, fp
 801032c:	9209      	str	r2, [sp, #36]	; 0x24
 801032e:	f89a 3000 	ldrb.w	r3, [sl]
 8010332:	2b00      	cmp	r3, #0
 8010334:	f000 80a2 	beq.w	801047c <_svfiprintf_r+0x1c8>
 8010338:	2300      	movs	r3, #0
 801033a:	f04f 32ff 	mov.w	r2, #4294967295
 801033e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010342:	f10a 0a01 	add.w	sl, sl, #1
 8010346:	9304      	str	r3, [sp, #16]
 8010348:	9307      	str	r3, [sp, #28]
 801034a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801034e:	931a      	str	r3, [sp, #104]	; 0x68
 8010350:	4654      	mov	r4, sl
 8010352:	2205      	movs	r2, #5
 8010354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010358:	4851      	ldr	r0, [pc, #324]	; (80104a0 <_svfiprintf_r+0x1ec>)
 801035a:	f7ef ff59 	bl	8000210 <memchr>
 801035e:	9a04      	ldr	r2, [sp, #16]
 8010360:	b9d8      	cbnz	r0, 801039a <_svfiprintf_r+0xe6>
 8010362:	06d0      	lsls	r0, r2, #27
 8010364:	bf44      	itt	mi
 8010366:	2320      	movmi	r3, #32
 8010368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801036c:	0711      	lsls	r1, r2, #28
 801036e:	bf44      	itt	mi
 8010370:	232b      	movmi	r3, #43	; 0x2b
 8010372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010376:	f89a 3000 	ldrb.w	r3, [sl]
 801037a:	2b2a      	cmp	r3, #42	; 0x2a
 801037c:	d015      	beq.n	80103aa <_svfiprintf_r+0xf6>
 801037e:	9a07      	ldr	r2, [sp, #28]
 8010380:	4654      	mov	r4, sl
 8010382:	2000      	movs	r0, #0
 8010384:	f04f 0c0a 	mov.w	ip, #10
 8010388:	4621      	mov	r1, r4
 801038a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801038e:	3b30      	subs	r3, #48	; 0x30
 8010390:	2b09      	cmp	r3, #9
 8010392:	d94e      	bls.n	8010432 <_svfiprintf_r+0x17e>
 8010394:	b1b0      	cbz	r0, 80103c4 <_svfiprintf_r+0x110>
 8010396:	9207      	str	r2, [sp, #28]
 8010398:	e014      	b.n	80103c4 <_svfiprintf_r+0x110>
 801039a:	eba0 0308 	sub.w	r3, r0, r8
 801039e:	fa09 f303 	lsl.w	r3, r9, r3
 80103a2:	4313      	orrs	r3, r2
 80103a4:	9304      	str	r3, [sp, #16]
 80103a6:	46a2      	mov	sl, r4
 80103a8:	e7d2      	b.n	8010350 <_svfiprintf_r+0x9c>
 80103aa:	9b03      	ldr	r3, [sp, #12]
 80103ac:	1d19      	adds	r1, r3, #4
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	9103      	str	r1, [sp, #12]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	bfbb      	ittet	lt
 80103b6:	425b      	neglt	r3, r3
 80103b8:	f042 0202 	orrlt.w	r2, r2, #2
 80103bc:	9307      	strge	r3, [sp, #28]
 80103be:	9307      	strlt	r3, [sp, #28]
 80103c0:	bfb8      	it	lt
 80103c2:	9204      	strlt	r2, [sp, #16]
 80103c4:	7823      	ldrb	r3, [r4, #0]
 80103c6:	2b2e      	cmp	r3, #46	; 0x2e
 80103c8:	d10c      	bne.n	80103e4 <_svfiprintf_r+0x130>
 80103ca:	7863      	ldrb	r3, [r4, #1]
 80103cc:	2b2a      	cmp	r3, #42	; 0x2a
 80103ce:	d135      	bne.n	801043c <_svfiprintf_r+0x188>
 80103d0:	9b03      	ldr	r3, [sp, #12]
 80103d2:	1d1a      	adds	r2, r3, #4
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	9203      	str	r2, [sp, #12]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	bfb8      	it	lt
 80103dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80103e0:	3402      	adds	r4, #2
 80103e2:	9305      	str	r3, [sp, #20]
 80103e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80104b0 <_svfiprintf_r+0x1fc>
 80103e8:	7821      	ldrb	r1, [r4, #0]
 80103ea:	2203      	movs	r2, #3
 80103ec:	4650      	mov	r0, sl
 80103ee:	f7ef ff0f 	bl	8000210 <memchr>
 80103f2:	b140      	cbz	r0, 8010406 <_svfiprintf_r+0x152>
 80103f4:	2340      	movs	r3, #64	; 0x40
 80103f6:	eba0 000a 	sub.w	r0, r0, sl
 80103fa:	fa03 f000 	lsl.w	r0, r3, r0
 80103fe:	9b04      	ldr	r3, [sp, #16]
 8010400:	4303      	orrs	r3, r0
 8010402:	3401      	adds	r4, #1
 8010404:	9304      	str	r3, [sp, #16]
 8010406:	f814 1b01 	ldrb.w	r1, [r4], #1
 801040a:	4826      	ldr	r0, [pc, #152]	; (80104a4 <_svfiprintf_r+0x1f0>)
 801040c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010410:	2206      	movs	r2, #6
 8010412:	f7ef fefd 	bl	8000210 <memchr>
 8010416:	2800      	cmp	r0, #0
 8010418:	d038      	beq.n	801048c <_svfiprintf_r+0x1d8>
 801041a:	4b23      	ldr	r3, [pc, #140]	; (80104a8 <_svfiprintf_r+0x1f4>)
 801041c:	bb1b      	cbnz	r3, 8010466 <_svfiprintf_r+0x1b2>
 801041e:	9b03      	ldr	r3, [sp, #12]
 8010420:	3307      	adds	r3, #7
 8010422:	f023 0307 	bic.w	r3, r3, #7
 8010426:	3308      	adds	r3, #8
 8010428:	9303      	str	r3, [sp, #12]
 801042a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801042c:	4433      	add	r3, r6
 801042e:	9309      	str	r3, [sp, #36]	; 0x24
 8010430:	e767      	b.n	8010302 <_svfiprintf_r+0x4e>
 8010432:	fb0c 3202 	mla	r2, ip, r2, r3
 8010436:	460c      	mov	r4, r1
 8010438:	2001      	movs	r0, #1
 801043a:	e7a5      	b.n	8010388 <_svfiprintf_r+0xd4>
 801043c:	2300      	movs	r3, #0
 801043e:	3401      	adds	r4, #1
 8010440:	9305      	str	r3, [sp, #20]
 8010442:	4619      	mov	r1, r3
 8010444:	f04f 0c0a 	mov.w	ip, #10
 8010448:	4620      	mov	r0, r4
 801044a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801044e:	3a30      	subs	r2, #48	; 0x30
 8010450:	2a09      	cmp	r2, #9
 8010452:	d903      	bls.n	801045c <_svfiprintf_r+0x1a8>
 8010454:	2b00      	cmp	r3, #0
 8010456:	d0c5      	beq.n	80103e4 <_svfiprintf_r+0x130>
 8010458:	9105      	str	r1, [sp, #20]
 801045a:	e7c3      	b.n	80103e4 <_svfiprintf_r+0x130>
 801045c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010460:	4604      	mov	r4, r0
 8010462:	2301      	movs	r3, #1
 8010464:	e7f0      	b.n	8010448 <_svfiprintf_r+0x194>
 8010466:	ab03      	add	r3, sp, #12
 8010468:	9300      	str	r3, [sp, #0]
 801046a:	462a      	mov	r2, r5
 801046c:	4b0f      	ldr	r3, [pc, #60]	; (80104ac <_svfiprintf_r+0x1f8>)
 801046e:	a904      	add	r1, sp, #16
 8010470:	4638      	mov	r0, r7
 8010472:	f7fc f9e5 	bl	800c840 <_printf_float>
 8010476:	1c42      	adds	r2, r0, #1
 8010478:	4606      	mov	r6, r0
 801047a:	d1d6      	bne.n	801042a <_svfiprintf_r+0x176>
 801047c:	89ab      	ldrh	r3, [r5, #12]
 801047e:	065b      	lsls	r3, r3, #25
 8010480:	f53f af2c 	bmi.w	80102dc <_svfiprintf_r+0x28>
 8010484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010486:	b01d      	add	sp, #116	; 0x74
 8010488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048c:	ab03      	add	r3, sp, #12
 801048e:	9300      	str	r3, [sp, #0]
 8010490:	462a      	mov	r2, r5
 8010492:	4b06      	ldr	r3, [pc, #24]	; (80104ac <_svfiprintf_r+0x1f8>)
 8010494:	a904      	add	r1, sp, #16
 8010496:	4638      	mov	r0, r7
 8010498:	f7fc fc76 	bl	800cd88 <_printf_i>
 801049c:	e7eb      	b.n	8010476 <_svfiprintf_r+0x1c2>
 801049e:	bf00      	nop
 80104a0:	08024b94 	.word	0x08024b94
 80104a4:	08024b9e 	.word	0x08024b9e
 80104a8:	0800c841 	.word	0x0800c841
 80104ac:	080101fd 	.word	0x080101fd
 80104b0:	08024b9a 	.word	0x08024b9a

080104b4 <__sfputc_r>:
 80104b4:	6893      	ldr	r3, [r2, #8]
 80104b6:	3b01      	subs	r3, #1
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	b410      	push	{r4}
 80104bc:	6093      	str	r3, [r2, #8]
 80104be:	da08      	bge.n	80104d2 <__sfputc_r+0x1e>
 80104c0:	6994      	ldr	r4, [r2, #24]
 80104c2:	42a3      	cmp	r3, r4
 80104c4:	db01      	blt.n	80104ca <__sfputc_r+0x16>
 80104c6:	290a      	cmp	r1, #10
 80104c8:	d103      	bne.n	80104d2 <__sfputc_r+0x1e>
 80104ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104ce:	f000 b975 	b.w	80107bc <__swbuf_r>
 80104d2:	6813      	ldr	r3, [r2, #0]
 80104d4:	1c58      	adds	r0, r3, #1
 80104d6:	6010      	str	r0, [r2, #0]
 80104d8:	7019      	strb	r1, [r3, #0]
 80104da:	4608      	mov	r0, r1
 80104dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104e0:	4770      	bx	lr

080104e2 <__sfputs_r>:
 80104e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104e4:	4606      	mov	r6, r0
 80104e6:	460f      	mov	r7, r1
 80104e8:	4614      	mov	r4, r2
 80104ea:	18d5      	adds	r5, r2, r3
 80104ec:	42ac      	cmp	r4, r5
 80104ee:	d101      	bne.n	80104f4 <__sfputs_r+0x12>
 80104f0:	2000      	movs	r0, #0
 80104f2:	e007      	b.n	8010504 <__sfputs_r+0x22>
 80104f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104f8:	463a      	mov	r2, r7
 80104fa:	4630      	mov	r0, r6
 80104fc:	f7ff ffda 	bl	80104b4 <__sfputc_r>
 8010500:	1c43      	adds	r3, r0, #1
 8010502:	d1f3      	bne.n	80104ec <__sfputs_r+0xa>
 8010504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010508 <_vfiprintf_r>:
 8010508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801050c:	460d      	mov	r5, r1
 801050e:	b09d      	sub	sp, #116	; 0x74
 8010510:	4614      	mov	r4, r2
 8010512:	4698      	mov	r8, r3
 8010514:	4606      	mov	r6, r0
 8010516:	b118      	cbz	r0, 8010520 <_vfiprintf_r+0x18>
 8010518:	6983      	ldr	r3, [r0, #24]
 801051a:	b90b      	cbnz	r3, 8010520 <_vfiprintf_r+0x18>
 801051c:	f000 fb3e 	bl	8010b9c <__sinit>
 8010520:	4b89      	ldr	r3, [pc, #548]	; (8010748 <_vfiprintf_r+0x240>)
 8010522:	429d      	cmp	r5, r3
 8010524:	d11b      	bne.n	801055e <_vfiprintf_r+0x56>
 8010526:	6875      	ldr	r5, [r6, #4]
 8010528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801052a:	07d9      	lsls	r1, r3, #31
 801052c:	d405      	bmi.n	801053a <_vfiprintf_r+0x32>
 801052e:	89ab      	ldrh	r3, [r5, #12]
 8010530:	059a      	lsls	r2, r3, #22
 8010532:	d402      	bmi.n	801053a <_vfiprintf_r+0x32>
 8010534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010536:	f000 fbcf 	bl	8010cd8 <__retarget_lock_acquire_recursive>
 801053a:	89ab      	ldrh	r3, [r5, #12]
 801053c:	071b      	lsls	r3, r3, #28
 801053e:	d501      	bpl.n	8010544 <_vfiprintf_r+0x3c>
 8010540:	692b      	ldr	r3, [r5, #16]
 8010542:	b9eb      	cbnz	r3, 8010580 <_vfiprintf_r+0x78>
 8010544:	4629      	mov	r1, r5
 8010546:	4630      	mov	r0, r6
 8010548:	f000 f998 	bl	801087c <__swsetup_r>
 801054c:	b1c0      	cbz	r0, 8010580 <_vfiprintf_r+0x78>
 801054e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010550:	07dc      	lsls	r4, r3, #31
 8010552:	d50e      	bpl.n	8010572 <_vfiprintf_r+0x6a>
 8010554:	f04f 30ff 	mov.w	r0, #4294967295
 8010558:	b01d      	add	sp, #116	; 0x74
 801055a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055e:	4b7b      	ldr	r3, [pc, #492]	; (801074c <_vfiprintf_r+0x244>)
 8010560:	429d      	cmp	r5, r3
 8010562:	d101      	bne.n	8010568 <_vfiprintf_r+0x60>
 8010564:	68b5      	ldr	r5, [r6, #8]
 8010566:	e7df      	b.n	8010528 <_vfiprintf_r+0x20>
 8010568:	4b79      	ldr	r3, [pc, #484]	; (8010750 <_vfiprintf_r+0x248>)
 801056a:	429d      	cmp	r5, r3
 801056c:	bf08      	it	eq
 801056e:	68f5      	ldreq	r5, [r6, #12]
 8010570:	e7da      	b.n	8010528 <_vfiprintf_r+0x20>
 8010572:	89ab      	ldrh	r3, [r5, #12]
 8010574:	0598      	lsls	r0, r3, #22
 8010576:	d4ed      	bmi.n	8010554 <_vfiprintf_r+0x4c>
 8010578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801057a:	f000 fbae 	bl	8010cda <__retarget_lock_release_recursive>
 801057e:	e7e9      	b.n	8010554 <_vfiprintf_r+0x4c>
 8010580:	2300      	movs	r3, #0
 8010582:	9309      	str	r3, [sp, #36]	; 0x24
 8010584:	2320      	movs	r3, #32
 8010586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801058a:	f8cd 800c 	str.w	r8, [sp, #12]
 801058e:	2330      	movs	r3, #48	; 0x30
 8010590:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010754 <_vfiprintf_r+0x24c>
 8010594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010598:	f04f 0901 	mov.w	r9, #1
 801059c:	4623      	mov	r3, r4
 801059e:	469a      	mov	sl, r3
 80105a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105a4:	b10a      	cbz	r2, 80105aa <_vfiprintf_r+0xa2>
 80105a6:	2a25      	cmp	r2, #37	; 0x25
 80105a8:	d1f9      	bne.n	801059e <_vfiprintf_r+0x96>
 80105aa:	ebba 0b04 	subs.w	fp, sl, r4
 80105ae:	d00b      	beq.n	80105c8 <_vfiprintf_r+0xc0>
 80105b0:	465b      	mov	r3, fp
 80105b2:	4622      	mov	r2, r4
 80105b4:	4629      	mov	r1, r5
 80105b6:	4630      	mov	r0, r6
 80105b8:	f7ff ff93 	bl	80104e2 <__sfputs_r>
 80105bc:	3001      	adds	r0, #1
 80105be:	f000 80aa 	beq.w	8010716 <_vfiprintf_r+0x20e>
 80105c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105c4:	445a      	add	r2, fp
 80105c6:	9209      	str	r2, [sp, #36]	; 0x24
 80105c8:	f89a 3000 	ldrb.w	r3, [sl]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	f000 80a2 	beq.w	8010716 <_vfiprintf_r+0x20e>
 80105d2:	2300      	movs	r3, #0
 80105d4:	f04f 32ff 	mov.w	r2, #4294967295
 80105d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105dc:	f10a 0a01 	add.w	sl, sl, #1
 80105e0:	9304      	str	r3, [sp, #16]
 80105e2:	9307      	str	r3, [sp, #28]
 80105e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105e8:	931a      	str	r3, [sp, #104]	; 0x68
 80105ea:	4654      	mov	r4, sl
 80105ec:	2205      	movs	r2, #5
 80105ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105f2:	4858      	ldr	r0, [pc, #352]	; (8010754 <_vfiprintf_r+0x24c>)
 80105f4:	f7ef fe0c 	bl	8000210 <memchr>
 80105f8:	9a04      	ldr	r2, [sp, #16]
 80105fa:	b9d8      	cbnz	r0, 8010634 <_vfiprintf_r+0x12c>
 80105fc:	06d1      	lsls	r1, r2, #27
 80105fe:	bf44      	itt	mi
 8010600:	2320      	movmi	r3, #32
 8010602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010606:	0713      	lsls	r3, r2, #28
 8010608:	bf44      	itt	mi
 801060a:	232b      	movmi	r3, #43	; 0x2b
 801060c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010610:	f89a 3000 	ldrb.w	r3, [sl]
 8010614:	2b2a      	cmp	r3, #42	; 0x2a
 8010616:	d015      	beq.n	8010644 <_vfiprintf_r+0x13c>
 8010618:	9a07      	ldr	r2, [sp, #28]
 801061a:	4654      	mov	r4, sl
 801061c:	2000      	movs	r0, #0
 801061e:	f04f 0c0a 	mov.w	ip, #10
 8010622:	4621      	mov	r1, r4
 8010624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010628:	3b30      	subs	r3, #48	; 0x30
 801062a:	2b09      	cmp	r3, #9
 801062c:	d94e      	bls.n	80106cc <_vfiprintf_r+0x1c4>
 801062e:	b1b0      	cbz	r0, 801065e <_vfiprintf_r+0x156>
 8010630:	9207      	str	r2, [sp, #28]
 8010632:	e014      	b.n	801065e <_vfiprintf_r+0x156>
 8010634:	eba0 0308 	sub.w	r3, r0, r8
 8010638:	fa09 f303 	lsl.w	r3, r9, r3
 801063c:	4313      	orrs	r3, r2
 801063e:	9304      	str	r3, [sp, #16]
 8010640:	46a2      	mov	sl, r4
 8010642:	e7d2      	b.n	80105ea <_vfiprintf_r+0xe2>
 8010644:	9b03      	ldr	r3, [sp, #12]
 8010646:	1d19      	adds	r1, r3, #4
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	9103      	str	r1, [sp, #12]
 801064c:	2b00      	cmp	r3, #0
 801064e:	bfbb      	ittet	lt
 8010650:	425b      	neglt	r3, r3
 8010652:	f042 0202 	orrlt.w	r2, r2, #2
 8010656:	9307      	strge	r3, [sp, #28]
 8010658:	9307      	strlt	r3, [sp, #28]
 801065a:	bfb8      	it	lt
 801065c:	9204      	strlt	r2, [sp, #16]
 801065e:	7823      	ldrb	r3, [r4, #0]
 8010660:	2b2e      	cmp	r3, #46	; 0x2e
 8010662:	d10c      	bne.n	801067e <_vfiprintf_r+0x176>
 8010664:	7863      	ldrb	r3, [r4, #1]
 8010666:	2b2a      	cmp	r3, #42	; 0x2a
 8010668:	d135      	bne.n	80106d6 <_vfiprintf_r+0x1ce>
 801066a:	9b03      	ldr	r3, [sp, #12]
 801066c:	1d1a      	adds	r2, r3, #4
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	9203      	str	r2, [sp, #12]
 8010672:	2b00      	cmp	r3, #0
 8010674:	bfb8      	it	lt
 8010676:	f04f 33ff 	movlt.w	r3, #4294967295
 801067a:	3402      	adds	r4, #2
 801067c:	9305      	str	r3, [sp, #20]
 801067e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010764 <_vfiprintf_r+0x25c>
 8010682:	7821      	ldrb	r1, [r4, #0]
 8010684:	2203      	movs	r2, #3
 8010686:	4650      	mov	r0, sl
 8010688:	f7ef fdc2 	bl	8000210 <memchr>
 801068c:	b140      	cbz	r0, 80106a0 <_vfiprintf_r+0x198>
 801068e:	2340      	movs	r3, #64	; 0x40
 8010690:	eba0 000a 	sub.w	r0, r0, sl
 8010694:	fa03 f000 	lsl.w	r0, r3, r0
 8010698:	9b04      	ldr	r3, [sp, #16]
 801069a:	4303      	orrs	r3, r0
 801069c:	3401      	adds	r4, #1
 801069e:	9304      	str	r3, [sp, #16]
 80106a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106a4:	482c      	ldr	r0, [pc, #176]	; (8010758 <_vfiprintf_r+0x250>)
 80106a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106aa:	2206      	movs	r2, #6
 80106ac:	f7ef fdb0 	bl	8000210 <memchr>
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d03f      	beq.n	8010734 <_vfiprintf_r+0x22c>
 80106b4:	4b29      	ldr	r3, [pc, #164]	; (801075c <_vfiprintf_r+0x254>)
 80106b6:	bb1b      	cbnz	r3, 8010700 <_vfiprintf_r+0x1f8>
 80106b8:	9b03      	ldr	r3, [sp, #12]
 80106ba:	3307      	adds	r3, #7
 80106bc:	f023 0307 	bic.w	r3, r3, #7
 80106c0:	3308      	adds	r3, #8
 80106c2:	9303      	str	r3, [sp, #12]
 80106c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106c6:	443b      	add	r3, r7
 80106c8:	9309      	str	r3, [sp, #36]	; 0x24
 80106ca:	e767      	b.n	801059c <_vfiprintf_r+0x94>
 80106cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80106d0:	460c      	mov	r4, r1
 80106d2:	2001      	movs	r0, #1
 80106d4:	e7a5      	b.n	8010622 <_vfiprintf_r+0x11a>
 80106d6:	2300      	movs	r3, #0
 80106d8:	3401      	adds	r4, #1
 80106da:	9305      	str	r3, [sp, #20]
 80106dc:	4619      	mov	r1, r3
 80106de:	f04f 0c0a 	mov.w	ip, #10
 80106e2:	4620      	mov	r0, r4
 80106e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106e8:	3a30      	subs	r2, #48	; 0x30
 80106ea:	2a09      	cmp	r2, #9
 80106ec:	d903      	bls.n	80106f6 <_vfiprintf_r+0x1ee>
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d0c5      	beq.n	801067e <_vfiprintf_r+0x176>
 80106f2:	9105      	str	r1, [sp, #20]
 80106f4:	e7c3      	b.n	801067e <_vfiprintf_r+0x176>
 80106f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80106fa:	4604      	mov	r4, r0
 80106fc:	2301      	movs	r3, #1
 80106fe:	e7f0      	b.n	80106e2 <_vfiprintf_r+0x1da>
 8010700:	ab03      	add	r3, sp, #12
 8010702:	9300      	str	r3, [sp, #0]
 8010704:	462a      	mov	r2, r5
 8010706:	4b16      	ldr	r3, [pc, #88]	; (8010760 <_vfiprintf_r+0x258>)
 8010708:	a904      	add	r1, sp, #16
 801070a:	4630      	mov	r0, r6
 801070c:	f7fc f898 	bl	800c840 <_printf_float>
 8010710:	4607      	mov	r7, r0
 8010712:	1c78      	adds	r0, r7, #1
 8010714:	d1d6      	bne.n	80106c4 <_vfiprintf_r+0x1bc>
 8010716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010718:	07d9      	lsls	r1, r3, #31
 801071a:	d405      	bmi.n	8010728 <_vfiprintf_r+0x220>
 801071c:	89ab      	ldrh	r3, [r5, #12]
 801071e:	059a      	lsls	r2, r3, #22
 8010720:	d402      	bmi.n	8010728 <_vfiprintf_r+0x220>
 8010722:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010724:	f000 fad9 	bl	8010cda <__retarget_lock_release_recursive>
 8010728:	89ab      	ldrh	r3, [r5, #12]
 801072a:	065b      	lsls	r3, r3, #25
 801072c:	f53f af12 	bmi.w	8010554 <_vfiprintf_r+0x4c>
 8010730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010732:	e711      	b.n	8010558 <_vfiprintf_r+0x50>
 8010734:	ab03      	add	r3, sp, #12
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	462a      	mov	r2, r5
 801073a:	4b09      	ldr	r3, [pc, #36]	; (8010760 <_vfiprintf_r+0x258>)
 801073c:	a904      	add	r1, sp, #16
 801073e:	4630      	mov	r0, r6
 8010740:	f7fc fb22 	bl	800cd88 <_printf_i>
 8010744:	e7e4      	b.n	8010710 <_vfiprintf_r+0x208>
 8010746:	bf00      	nop
 8010748:	08024bc8 	.word	0x08024bc8
 801074c:	08024be8 	.word	0x08024be8
 8010750:	08024ba8 	.word	0x08024ba8
 8010754:	08024b94 	.word	0x08024b94
 8010758:	08024b9e 	.word	0x08024b9e
 801075c:	0800c841 	.word	0x0800c841
 8010760:	080104e3 	.word	0x080104e3
 8010764:	08024b9a 	.word	0x08024b9a

08010768 <nan>:
 8010768:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010770 <nan+0x8>
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	00000000 	.word	0x00000000
 8010774:	7ff80000 	.word	0x7ff80000

08010778 <_sbrk_r>:
 8010778:	b538      	push	{r3, r4, r5, lr}
 801077a:	4d06      	ldr	r5, [pc, #24]	; (8010794 <_sbrk_r+0x1c>)
 801077c:	2300      	movs	r3, #0
 801077e:	4604      	mov	r4, r0
 8010780:	4608      	mov	r0, r1
 8010782:	602b      	str	r3, [r5, #0]
 8010784:	f7f5 fb34 	bl	8005df0 <_sbrk>
 8010788:	1c43      	adds	r3, r0, #1
 801078a:	d102      	bne.n	8010792 <_sbrk_r+0x1a>
 801078c:	682b      	ldr	r3, [r5, #0]
 801078e:	b103      	cbz	r3, 8010792 <_sbrk_r+0x1a>
 8010790:	6023      	str	r3, [r4, #0]
 8010792:	bd38      	pop	{r3, r4, r5, pc}
 8010794:	2000079c 	.word	0x2000079c

08010798 <strncmp>:
 8010798:	b510      	push	{r4, lr}
 801079a:	b16a      	cbz	r2, 80107b8 <strncmp+0x20>
 801079c:	3901      	subs	r1, #1
 801079e:	1884      	adds	r4, r0, r2
 80107a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80107a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d103      	bne.n	80107b4 <strncmp+0x1c>
 80107ac:	42a0      	cmp	r0, r4
 80107ae:	d001      	beq.n	80107b4 <strncmp+0x1c>
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1f5      	bne.n	80107a0 <strncmp+0x8>
 80107b4:	1a98      	subs	r0, r3, r2
 80107b6:	bd10      	pop	{r4, pc}
 80107b8:	4610      	mov	r0, r2
 80107ba:	e7fc      	b.n	80107b6 <strncmp+0x1e>

080107bc <__swbuf_r>:
 80107bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107be:	460e      	mov	r6, r1
 80107c0:	4614      	mov	r4, r2
 80107c2:	4605      	mov	r5, r0
 80107c4:	b118      	cbz	r0, 80107ce <__swbuf_r+0x12>
 80107c6:	6983      	ldr	r3, [r0, #24]
 80107c8:	b90b      	cbnz	r3, 80107ce <__swbuf_r+0x12>
 80107ca:	f000 f9e7 	bl	8010b9c <__sinit>
 80107ce:	4b21      	ldr	r3, [pc, #132]	; (8010854 <__swbuf_r+0x98>)
 80107d0:	429c      	cmp	r4, r3
 80107d2:	d12b      	bne.n	801082c <__swbuf_r+0x70>
 80107d4:	686c      	ldr	r4, [r5, #4]
 80107d6:	69a3      	ldr	r3, [r4, #24]
 80107d8:	60a3      	str	r3, [r4, #8]
 80107da:	89a3      	ldrh	r3, [r4, #12]
 80107dc:	071a      	lsls	r2, r3, #28
 80107de:	d52f      	bpl.n	8010840 <__swbuf_r+0x84>
 80107e0:	6923      	ldr	r3, [r4, #16]
 80107e2:	b36b      	cbz	r3, 8010840 <__swbuf_r+0x84>
 80107e4:	6923      	ldr	r3, [r4, #16]
 80107e6:	6820      	ldr	r0, [r4, #0]
 80107e8:	1ac0      	subs	r0, r0, r3
 80107ea:	6963      	ldr	r3, [r4, #20]
 80107ec:	b2f6      	uxtb	r6, r6
 80107ee:	4283      	cmp	r3, r0
 80107f0:	4637      	mov	r7, r6
 80107f2:	dc04      	bgt.n	80107fe <__swbuf_r+0x42>
 80107f4:	4621      	mov	r1, r4
 80107f6:	4628      	mov	r0, r5
 80107f8:	f000 f93c 	bl	8010a74 <_fflush_r>
 80107fc:	bb30      	cbnz	r0, 801084c <__swbuf_r+0x90>
 80107fe:	68a3      	ldr	r3, [r4, #8]
 8010800:	3b01      	subs	r3, #1
 8010802:	60a3      	str	r3, [r4, #8]
 8010804:	6823      	ldr	r3, [r4, #0]
 8010806:	1c5a      	adds	r2, r3, #1
 8010808:	6022      	str	r2, [r4, #0]
 801080a:	701e      	strb	r6, [r3, #0]
 801080c:	6963      	ldr	r3, [r4, #20]
 801080e:	3001      	adds	r0, #1
 8010810:	4283      	cmp	r3, r0
 8010812:	d004      	beq.n	801081e <__swbuf_r+0x62>
 8010814:	89a3      	ldrh	r3, [r4, #12]
 8010816:	07db      	lsls	r3, r3, #31
 8010818:	d506      	bpl.n	8010828 <__swbuf_r+0x6c>
 801081a:	2e0a      	cmp	r6, #10
 801081c:	d104      	bne.n	8010828 <__swbuf_r+0x6c>
 801081e:	4621      	mov	r1, r4
 8010820:	4628      	mov	r0, r5
 8010822:	f000 f927 	bl	8010a74 <_fflush_r>
 8010826:	b988      	cbnz	r0, 801084c <__swbuf_r+0x90>
 8010828:	4638      	mov	r0, r7
 801082a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801082c:	4b0a      	ldr	r3, [pc, #40]	; (8010858 <__swbuf_r+0x9c>)
 801082e:	429c      	cmp	r4, r3
 8010830:	d101      	bne.n	8010836 <__swbuf_r+0x7a>
 8010832:	68ac      	ldr	r4, [r5, #8]
 8010834:	e7cf      	b.n	80107d6 <__swbuf_r+0x1a>
 8010836:	4b09      	ldr	r3, [pc, #36]	; (801085c <__swbuf_r+0xa0>)
 8010838:	429c      	cmp	r4, r3
 801083a:	bf08      	it	eq
 801083c:	68ec      	ldreq	r4, [r5, #12]
 801083e:	e7ca      	b.n	80107d6 <__swbuf_r+0x1a>
 8010840:	4621      	mov	r1, r4
 8010842:	4628      	mov	r0, r5
 8010844:	f000 f81a 	bl	801087c <__swsetup_r>
 8010848:	2800      	cmp	r0, #0
 801084a:	d0cb      	beq.n	80107e4 <__swbuf_r+0x28>
 801084c:	f04f 37ff 	mov.w	r7, #4294967295
 8010850:	e7ea      	b.n	8010828 <__swbuf_r+0x6c>
 8010852:	bf00      	nop
 8010854:	08024bc8 	.word	0x08024bc8
 8010858:	08024be8 	.word	0x08024be8
 801085c:	08024ba8 	.word	0x08024ba8

08010860 <__ascii_wctomb>:
 8010860:	b149      	cbz	r1, 8010876 <__ascii_wctomb+0x16>
 8010862:	2aff      	cmp	r2, #255	; 0xff
 8010864:	bf85      	ittet	hi
 8010866:	238a      	movhi	r3, #138	; 0x8a
 8010868:	6003      	strhi	r3, [r0, #0]
 801086a:	700a      	strbls	r2, [r1, #0]
 801086c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010870:	bf98      	it	ls
 8010872:	2001      	movls	r0, #1
 8010874:	4770      	bx	lr
 8010876:	4608      	mov	r0, r1
 8010878:	4770      	bx	lr
	...

0801087c <__swsetup_r>:
 801087c:	4b32      	ldr	r3, [pc, #200]	; (8010948 <__swsetup_r+0xcc>)
 801087e:	b570      	push	{r4, r5, r6, lr}
 8010880:	681d      	ldr	r5, [r3, #0]
 8010882:	4606      	mov	r6, r0
 8010884:	460c      	mov	r4, r1
 8010886:	b125      	cbz	r5, 8010892 <__swsetup_r+0x16>
 8010888:	69ab      	ldr	r3, [r5, #24]
 801088a:	b913      	cbnz	r3, 8010892 <__swsetup_r+0x16>
 801088c:	4628      	mov	r0, r5
 801088e:	f000 f985 	bl	8010b9c <__sinit>
 8010892:	4b2e      	ldr	r3, [pc, #184]	; (801094c <__swsetup_r+0xd0>)
 8010894:	429c      	cmp	r4, r3
 8010896:	d10f      	bne.n	80108b8 <__swsetup_r+0x3c>
 8010898:	686c      	ldr	r4, [r5, #4]
 801089a:	89a3      	ldrh	r3, [r4, #12]
 801089c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108a0:	0719      	lsls	r1, r3, #28
 80108a2:	d42c      	bmi.n	80108fe <__swsetup_r+0x82>
 80108a4:	06dd      	lsls	r5, r3, #27
 80108a6:	d411      	bmi.n	80108cc <__swsetup_r+0x50>
 80108a8:	2309      	movs	r3, #9
 80108aa:	6033      	str	r3, [r6, #0]
 80108ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80108b0:	81a3      	strh	r3, [r4, #12]
 80108b2:	f04f 30ff 	mov.w	r0, #4294967295
 80108b6:	e03e      	b.n	8010936 <__swsetup_r+0xba>
 80108b8:	4b25      	ldr	r3, [pc, #148]	; (8010950 <__swsetup_r+0xd4>)
 80108ba:	429c      	cmp	r4, r3
 80108bc:	d101      	bne.n	80108c2 <__swsetup_r+0x46>
 80108be:	68ac      	ldr	r4, [r5, #8]
 80108c0:	e7eb      	b.n	801089a <__swsetup_r+0x1e>
 80108c2:	4b24      	ldr	r3, [pc, #144]	; (8010954 <__swsetup_r+0xd8>)
 80108c4:	429c      	cmp	r4, r3
 80108c6:	bf08      	it	eq
 80108c8:	68ec      	ldreq	r4, [r5, #12]
 80108ca:	e7e6      	b.n	801089a <__swsetup_r+0x1e>
 80108cc:	0758      	lsls	r0, r3, #29
 80108ce:	d512      	bpl.n	80108f6 <__swsetup_r+0x7a>
 80108d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108d2:	b141      	cbz	r1, 80108e6 <__swsetup_r+0x6a>
 80108d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108d8:	4299      	cmp	r1, r3
 80108da:	d002      	beq.n	80108e2 <__swsetup_r+0x66>
 80108dc:	4630      	mov	r0, r6
 80108de:	f7ff fbe3 	bl	80100a8 <_free_r>
 80108e2:	2300      	movs	r3, #0
 80108e4:	6363      	str	r3, [r4, #52]	; 0x34
 80108e6:	89a3      	ldrh	r3, [r4, #12]
 80108e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80108ec:	81a3      	strh	r3, [r4, #12]
 80108ee:	2300      	movs	r3, #0
 80108f0:	6063      	str	r3, [r4, #4]
 80108f2:	6923      	ldr	r3, [r4, #16]
 80108f4:	6023      	str	r3, [r4, #0]
 80108f6:	89a3      	ldrh	r3, [r4, #12]
 80108f8:	f043 0308 	orr.w	r3, r3, #8
 80108fc:	81a3      	strh	r3, [r4, #12]
 80108fe:	6923      	ldr	r3, [r4, #16]
 8010900:	b94b      	cbnz	r3, 8010916 <__swsetup_r+0x9a>
 8010902:	89a3      	ldrh	r3, [r4, #12]
 8010904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801090c:	d003      	beq.n	8010916 <__swsetup_r+0x9a>
 801090e:	4621      	mov	r1, r4
 8010910:	4630      	mov	r0, r6
 8010912:	f000 fa07 	bl	8010d24 <__smakebuf_r>
 8010916:	89a0      	ldrh	r0, [r4, #12]
 8010918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801091c:	f010 0301 	ands.w	r3, r0, #1
 8010920:	d00a      	beq.n	8010938 <__swsetup_r+0xbc>
 8010922:	2300      	movs	r3, #0
 8010924:	60a3      	str	r3, [r4, #8]
 8010926:	6963      	ldr	r3, [r4, #20]
 8010928:	425b      	negs	r3, r3
 801092a:	61a3      	str	r3, [r4, #24]
 801092c:	6923      	ldr	r3, [r4, #16]
 801092e:	b943      	cbnz	r3, 8010942 <__swsetup_r+0xc6>
 8010930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010934:	d1ba      	bne.n	80108ac <__swsetup_r+0x30>
 8010936:	bd70      	pop	{r4, r5, r6, pc}
 8010938:	0781      	lsls	r1, r0, #30
 801093a:	bf58      	it	pl
 801093c:	6963      	ldrpl	r3, [r4, #20]
 801093e:	60a3      	str	r3, [r4, #8]
 8010940:	e7f4      	b.n	801092c <__swsetup_r+0xb0>
 8010942:	2000      	movs	r0, #0
 8010944:	e7f7      	b.n	8010936 <__swsetup_r+0xba>
 8010946:	bf00      	nop
 8010948:	20000040 	.word	0x20000040
 801094c:	08024bc8 	.word	0x08024bc8
 8010950:	08024be8 	.word	0x08024be8
 8010954:	08024ba8 	.word	0x08024ba8

08010958 <abort>:
 8010958:	b508      	push	{r3, lr}
 801095a:	2006      	movs	r0, #6
 801095c:	f000 fa96 	bl	8010e8c <raise>
 8010960:	2001      	movs	r0, #1
 8010962:	f7f5 f9cd 	bl	8005d00 <_exit>
	...

08010968 <__sflush_r>:
 8010968:	898a      	ldrh	r2, [r1, #12]
 801096a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801096e:	4605      	mov	r5, r0
 8010970:	0710      	lsls	r0, r2, #28
 8010972:	460c      	mov	r4, r1
 8010974:	d458      	bmi.n	8010a28 <__sflush_r+0xc0>
 8010976:	684b      	ldr	r3, [r1, #4]
 8010978:	2b00      	cmp	r3, #0
 801097a:	dc05      	bgt.n	8010988 <__sflush_r+0x20>
 801097c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801097e:	2b00      	cmp	r3, #0
 8010980:	dc02      	bgt.n	8010988 <__sflush_r+0x20>
 8010982:	2000      	movs	r0, #0
 8010984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801098a:	2e00      	cmp	r6, #0
 801098c:	d0f9      	beq.n	8010982 <__sflush_r+0x1a>
 801098e:	2300      	movs	r3, #0
 8010990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010994:	682f      	ldr	r7, [r5, #0]
 8010996:	602b      	str	r3, [r5, #0]
 8010998:	d032      	beq.n	8010a00 <__sflush_r+0x98>
 801099a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801099c:	89a3      	ldrh	r3, [r4, #12]
 801099e:	075a      	lsls	r2, r3, #29
 80109a0:	d505      	bpl.n	80109ae <__sflush_r+0x46>
 80109a2:	6863      	ldr	r3, [r4, #4]
 80109a4:	1ac0      	subs	r0, r0, r3
 80109a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109a8:	b10b      	cbz	r3, 80109ae <__sflush_r+0x46>
 80109aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80109ac:	1ac0      	subs	r0, r0, r3
 80109ae:	2300      	movs	r3, #0
 80109b0:	4602      	mov	r2, r0
 80109b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109b4:	6a21      	ldr	r1, [r4, #32]
 80109b6:	4628      	mov	r0, r5
 80109b8:	47b0      	blx	r6
 80109ba:	1c43      	adds	r3, r0, #1
 80109bc:	89a3      	ldrh	r3, [r4, #12]
 80109be:	d106      	bne.n	80109ce <__sflush_r+0x66>
 80109c0:	6829      	ldr	r1, [r5, #0]
 80109c2:	291d      	cmp	r1, #29
 80109c4:	d82c      	bhi.n	8010a20 <__sflush_r+0xb8>
 80109c6:	4a2a      	ldr	r2, [pc, #168]	; (8010a70 <__sflush_r+0x108>)
 80109c8:	40ca      	lsrs	r2, r1
 80109ca:	07d6      	lsls	r6, r2, #31
 80109cc:	d528      	bpl.n	8010a20 <__sflush_r+0xb8>
 80109ce:	2200      	movs	r2, #0
 80109d0:	6062      	str	r2, [r4, #4]
 80109d2:	04d9      	lsls	r1, r3, #19
 80109d4:	6922      	ldr	r2, [r4, #16]
 80109d6:	6022      	str	r2, [r4, #0]
 80109d8:	d504      	bpl.n	80109e4 <__sflush_r+0x7c>
 80109da:	1c42      	adds	r2, r0, #1
 80109dc:	d101      	bne.n	80109e2 <__sflush_r+0x7a>
 80109de:	682b      	ldr	r3, [r5, #0]
 80109e0:	b903      	cbnz	r3, 80109e4 <__sflush_r+0x7c>
 80109e2:	6560      	str	r0, [r4, #84]	; 0x54
 80109e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109e6:	602f      	str	r7, [r5, #0]
 80109e8:	2900      	cmp	r1, #0
 80109ea:	d0ca      	beq.n	8010982 <__sflush_r+0x1a>
 80109ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109f0:	4299      	cmp	r1, r3
 80109f2:	d002      	beq.n	80109fa <__sflush_r+0x92>
 80109f4:	4628      	mov	r0, r5
 80109f6:	f7ff fb57 	bl	80100a8 <_free_r>
 80109fa:	2000      	movs	r0, #0
 80109fc:	6360      	str	r0, [r4, #52]	; 0x34
 80109fe:	e7c1      	b.n	8010984 <__sflush_r+0x1c>
 8010a00:	6a21      	ldr	r1, [r4, #32]
 8010a02:	2301      	movs	r3, #1
 8010a04:	4628      	mov	r0, r5
 8010a06:	47b0      	blx	r6
 8010a08:	1c41      	adds	r1, r0, #1
 8010a0a:	d1c7      	bne.n	801099c <__sflush_r+0x34>
 8010a0c:	682b      	ldr	r3, [r5, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d0c4      	beq.n	801099c <__sflush_r+0x34>
 8010a12:	2b1d      	cmp	r3, #29
 8010a14:	d001      	beq.n	8010a1a <__sflush_r+0xb2>
 8010a16:	2b16      	cmp	r3, #22
 8010a18:	d101      	bne.n	8010a1e <__sflush_r+0xb6>
 8010a1a:	602f      	str	r7, [r5, #0]
 8010a1c:	e7b1      	b.n	8010982 <__sflush_r+0x1a>
 8010a1e:	89a3      	ldrh	r3, [r4, #12]
 8010a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a24:	81a3      	strh	r3, [r4, #12]
 8010a26:	e7ad      	b.n	8010984 <__sflush_r+0x1c>
 8010a28:	690f      	ldr	r7, [r1, #16]
 8010a2a:	2f00      	cmp	r7, #0
 8010a2c:	d0a9      	beq.n	8010982 <__sflush_r+0x1a>
 8010a2e:	0793      	lsls	r3, r2, #30
 8010a30:	680e      	ldr	r6, [r1, #0]
 8010a32:	bf08      	it	eq
 8010a34:	694b      	ldreq	r3, [r1, #20]
 8010a36:	600f      	str	r7, [r1, #0]
 8010a38:	bf18      	it	ne
 8010a3a:	2300      	movne	r3, #0
 8010a3c:	eba6 0807 	sub.w	r8, r6, r7
 8010a40:	608b      	str	r3, [r1, #8]
 8010a42:	f1b8 0f00 	cmp.w	r8, #0
 8010a46:	dd9c      	ble.n	8010982 <__sflush_r+0x1a>
 8010a48:	6a21      	ldr	r1, [r4, #32]
 8010a4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a4c:	4643      	mov	r3, r8
 8010a4e:	463a      	mov	r2, r7
 8010a50:	4628      	mov	r0, r5
 8010a52:	47b0      	blx	r6
 8010a54:	2800      	cmp	r0, #0
 8010a56:	dc06      	bgt.n	8010a66 <__sflush_r+0xfe>
 8010a58:	89a3      	ldrh	r3, [r4, #12]
 8010a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a5e:	81a3      	strh	r3, [r4, #12]
 8010a60:	f04f 30ff 	mov.w	r0, #4294967295
 8010a64:	e78e      	b.n	8010984 <__sflush_r+0x1c>
 8010a66:	4407      	add	r7, r0
 8010a68:	eba8 0800 	sub.w	r8, r8, r0
 8010a6c:	e7e9      	b.n	8010a42 <__sflush_r+0xda>
 8010a6e:	bf00      	nop
 8010a70:	20400001 	.word	0x20400001

08010a74 <_fflush_r>:
 8010a74:	b538      	push	{r3, r4, r5, lr}
 8010a76:	690b      	ldr	r3, [r1, #16]
 8010a78:	4605      	mov	r5, r0
 8010a7a:	460c      	mov	r4, r1
 8010a7c:	b913      	cbnz	r3, 8010a84 <_fflush_r+0x10>
 8010a7e:	2500      	movs	r5, #0
 8010a80:	4628      	mov	r0, r5
 8010a82:	bd38      	pop	{r3, r4, r5, pc}
 8010a84:	b118      	cbz	r0, 8010a8e <_fflush_r+0x1a>
 8010a86:	6983      	ldr	r3, [r0, #24]
 8010a88:	b90b      	cbnz	r3, 8010a8e <_fflush_r+0x1a>
 8010a8a:	f000 f887 	bl	8010b9c <__sinit>
 8010a8e:	4b14      	ldr	r3, [pc, #80]	; (8010ae0 <_fflush_r+0x6c>)
 8010a90:	429c      	cmp	r4, r3
 8010a92:	d11b      	bne.n	8010acc <_fflush_r+0x58>
 8010a94:	686c      	ldr	r4, [r5, #4]
 8010a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d0ef      	beq.n	8010a7e <_fflush_r+0xa>
 8010a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010aa0:	07d0      	lsls	r0, r2, #31
 8010aa2:	d404      	bmi.n	8010aae <_fflush_r+0x3a>
 8010aa4:	0599      	lsls	r1, r3, #22
 8010aa6:	d402      	bmi.n	8010aae <_fflush_r+0x3a>
 8010aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010aaa:	f000 f915 	bl	8010cd8 <__retarget_lock_acquire_recursive>
 8010aae:	4628      	mov	r0, r5
 8010ab0:	4621      	mov	r1, r4
 8010ab2:	f7ff ff59 	bl	8010968 <__sflush_r>
 8010ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ab8:	07da      	lsls	r2, r3, #31
 8010aba:	4605      	mov	r5, r0
 8010abc:	d4e0      	bmi.n	8010a80 <_fflush_r+0xc>
 8010abe:	89a3      	ldrh	r3, [r4, #12]
 8010ac0:	059b      	lsls	r3, r3, #22
 8010ac2:	d4dd      	bmi.n	8010a80 <_fflush_r+0xc>
 8010ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ac6:	f000 f908 	bl	8010cda <__retarget_lock_release_recursive>
 8010aca:	e7d9      	b.n	8010a80 <_fflush_r+0xc>
 8010acc:	4b05      	ldr	r3, [pc, #20]	; (8010ae4 <_fflush_r+0x70>)
 8010ace:	429c      	cmp	r4, r3
 8010ad0:	d101      	bne.n	8010ad6 <_fflush_r+0x62>
 8010ad2:	68ac      	ldr	r4, [r5, #8]
 8010ad4:	e7df      	b.n	8010a96 <_fflush_r+0x22>
 8010ad6:	4b04      	ldr	r3, [pc, #16]	; (8010ae8 <_fflush_r+0x74>)
 8010ad8:	429c      	cmp	r4, r3
 8010ada:	bf08      	it	eq
 8010adc:	68ec      	ldreq	r4, [r5, #12]
 8010ade:	e7da      	b.n	8010a96 <_fflush_r+0x22>
 8010ae0:	08024bc8 	.word	0x08024bc8
 8010ae4:	08024be8 	.word	0x08024be8
 8010ae8:	08024ba8 	.word	0x08024ba8

08010aec <std>:
 8010aec:	2300      	movs	r3, #0
 8010aee:	b510      	push	{r4, lr}
 8010af0:	4604      	mov	r4, r0
 8010af2:	e9c0 3300 	strd	r3, r3, [r0]
 8010af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010afa:	6083      	str	r3, [r0, #8]
 8010afc:	8181      	strh	r1, [r0, #12]
 8010afe:	6643      	str	r3, [r0, #100]	; 0x64
 8010b00:	81c2      	strh	r2, [r0, #14]
 8010b02:	6183      	str	r3, [r0, #24]
 8010b04:	4619      	mov	r1, r3
 8010b06:	2208      	movs	r2, #8
 8010b08:	305c      	adds	r0, #92	; 0x5c
 8010b0a:	f7fb fdf1 	bl	800c6f0 <memset>
 8010b0e:	4b05      	ldr	r3, [pc, #20]	; (8010b24 <std+0x38>)
 8010b10:	6263      	str	r3, [r4, #36]	; 0x24
 8010b12:	4b05      	ldr	r3, [pc, #20]	; (8010b28 <std+0x3c>)
 8010b14:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b16:	4b05      	ldr	r3, [pc, #20]	; (8010b2c <std+0x40>)
 8010b18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b1a:	4b05      	ldr	r3, [pc, #20]	; (8010b30 <std+0x44>)
 8010b1c:	6224      	str	r4, [r4, #32]
 8010b1e:	6323      	str	r3, [r4, #48]	; 0x30
 8010b20:	bd10      	pop	{r4, pc}
 8010b22:	bf00      	nop
 8010b24:	08010ec5 	.word	0x08010ec5
 8010b28:	08010ee7 	.word	0x08010ee7
 8010b2c:	08010f1f 	.word	0x08010f1f
 8010b30:	08010f43 	.word	0x08010f43

08010b34 <_cleanup_r>:
 8010b34:	4901      	ldr	r1, [pc, #4]	; (8010b3c <_cleanup_r+0x8>)
 8010b36:	f000 b8af 	b.w	8010c98 <_fwalk_reent>
 8010b3a:	bf00      	nop
 8010b3c:	08010a75 	.word	0x08010a75

08010b40 <__sfmoreglue>:
 8010b40:	b570      	push	{r4, r5, r6, lr}
 8010b42:	1e4a      	subs	r2, r1, #1
 8010b44:	2568      	movs	r5, #104	; 0x68
 8010b46:	4355      	muls	r5, r2
 8010b48:	460e      	mov	r6, r1
 8010b4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010b4e:	f7ff fafb 	bl	8010148 <_malloc_r>
 8010b52:	4604      	mov	r4, r0
 8010b54:	b140      	cbz	r0, 8010b68 <__sfmoreglue+0x28>
 8010b56:	2100      	movs	r1, #0
 8010b58:	e9c0 1600 	strd	r1, r6, [r0]
 8010b5c:	300c      	adds	r0, #12
 8010b5e:	60a0      	str	r0, [r4, #8]
 8010b60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b64:	f7fb fdc4 	bl	800c6f0 <memset>
 8010b68:	4620      	mov	r0, r4
 8010b6a:	bd70      	pop	{r4, r5, r6, pc}

08010b6c <__sfp_lock_acquire>:
 8010b6c:	4801      	ldr	r0, [pc, #4]	; (8010b74 <__sfp_lock_acquire+0x8>)
 8010b6e:	f000 b8b3 	b.w	8010cd8 <__retarget_lock_acquire_recursive>
 8010b72:	bf00      	nop
 8010b74:	20000798 	.word	0x20000798

08010b78 <__sfp_lock_release>:
 8010b78:	4801      	ldr	r0, [pc, #4]	; (8010b80 <__sfp_lock_release+0x8>)
 8010b7a:	f000 b8ae 	b.w	8010cda <__retarget_lock_release_recursive>
 8010b7e:	bf00      	nop
 8010b80:	20000798 	.word	0x20000798

08010b84 <__sinit_lock_acquire>:
 8010b84:	4801      	ldr	r0, [pc, #4]	; (8010b8c <__sinit_lock_acquire+0x8>)
 8010b86:	f000 b8a7 	b.w	8010cd8 <__retarget_lock_acquire_recursive>
 8010b8a:	bf00      	nop
 8010b8c:	20000793 	.word	0x20000793

08010b90 <__sinit_lock_release>:
 8010b90:	4801      	ldr	r0, [pc, #4]	; (8010b98 <__sinit_lock_release+0x8>)
 8010b92:	f000 b8a2 	b.w	8010cda <__retarget_lock_release_recursive>
 8010b96:	bf00      	nop
 8010b98:	20000793 	.word	0x20000793

08010b9c <__sinit>:
 8010b9c:	b510      	push	{r4, lr}
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	f7ff fff0 	bl	8010b84 <__sinit_lock_acquire>
 8010ba4:	69a3      	ldr	r3, [r4, #24]
 8010ba6:	b11b      	cbz	r3, 8010bb0 <__sinit+0x14>
 8010ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bac:	f7ff bff0 	b.w	8010b90 <__sinit_lock_release>
 8010bb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010bb4:	6523      	str	r3, [r4, #80]	; 0x50
 8010bb6:	4b13      	ldr	r3, [pc, #76]	; (8010c04 <__sinit+0x68>)
 8010bb8:	4a13      	ldr	r2, [pc, #76]	; (8010c08 <__sinit+0x6c>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8010bbe:	42a3      	cmp	r3, r4
 8010bc0:	bf04      	itt	eq
 8010bc2:	2301      	moveq	r3, #1
 8010bc4:	61a3      	streq	r3, [r4, #24]
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	f000 f820 	bl	8010c0c <__sfp>
 8010bcc:	6060      	str	r0, [r4, #4]
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f000 f81c 	bl	8010c0c <__sfp>
 8010bd4:	60a0      	str	r0, [r4, #8]
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f000 f818 	bl	8010c0c <__sfp>
 8010bdc:	2200      	movs	r2, #0
 8010bde:	60e0      	str	r0, [r4, #12]
 8010be0:	2104      	movs	r1, #4
 8010be2:	6860      	ldr	r0, [r4, #4]
 8010be4:	f7ff ff82 	bl	8010aec <std>
 8010be8:	68a0      	ldr	r0, [r4, #8]
 8010bea:	2201      	movs	r2, #1
 8010bec:	2109      	movs	r1, #9
 8010bee:	f7ff ff7d 	bl	8010aec <std>
 8010bf2:	68e0      	ldr	r0, [r4, #12]
 8010bf4:	2202      	movs	r2, #2
 8010bf6:	2112      	movs	r1, #18
 8010bf8:	f7ff ff78 	bl	8010aec <std>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	61a3      	str	r3, [r4, #24]
 8010c00:	e7d2      	b.n	8010ba8 <__sinit+0xc>
 8010c02:	bf00      	nop
 8010c04:	080246f4 	.word	0x080246f4
 8010c08:	08010b35 	.word	0x08010b35

08010c0c <__sfp>:
 8010c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c0e:	4607      	mov	r7, r0
 8010c10:	f7ff ffac 	bl	8010b6c <__sfp_lock_acquire>
 8010c14:	4b1e      	ldr	r3, [pc, #120]	; (8010c90 <__sfp+0x84>)
 8010c16:	681e      	ldr	r6, [r3, #0]
 8010c18:	69b3      	ldr	r3, [r6, #24]
 8010c1a:	b913      	cbnz	r3, 8010c22 <__sfp+0x16>
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	f7ff ffbd 	bl	8010b9c <__sinit>
 8010c22:	3648      	adds	r6, #72	; 0x48
 8010c24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010c28:	3b01      	subs	r3, #1
 8010c2a:	d503      	bpl.n	8010c34 <__sfp+0x28>
 8010c2c:	6833      	ldr	r3, [r6, #0]
 8010c2e:	b30b      	cbz	r3, 8010c74 <__sfp+0x68>
 8010c30:	6836      	ldr	r6, [r6, #0]
 8010c32:	e7f7      	b.n	8010c24 <__sfp+0x18>
 8010c34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c38:	b9d5      	cbnz	r5, 8010c70 <__sfp+0x64>
 8010c3a:	4b16      	ldr	r3, [pc, #88]	; (8010c94 <__sfp+0x88>)
 8010c3c:	60e3      	str	r3, [r4, #12]
 8010c3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c42:	6665      	str	r5, [r4, #100]	; 0x64
 8010c44:	f000 f847 	bl	8010cd6 <__retarget_lock_init_recursive>
 8010c48:	f7ff ff96 	bl	8010b78 <__sfp_lock_release>
 8010c4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010c50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010c54:	6025      	str	r5, [r4, #0]
 8010c56:	61a5      	str	r5, [r4, #24]
 8010c58:	2208      	movs	r2, #8
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c60:	f7fb fd46 	bl	800c6f0 <memset>
 8010c64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c70:	3468      	adds	r4, #104	; 0x68
 8010c72:	e7d9      	b.n	8010c28 <__sfp+0x1c>
 8010c74:	2104      	movs	r1, #4
 8010c76:	4638      	mov	r0, r7
 8010c78:	f7ff ff62 	bl	8010b40 <__sfmoreglue>
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	6030      	str	r0, [r6, #0]
 8010c80:	2800      	cmp	r0, #0
 8010c82:	d1d5      	bne.n	8010c30 <__sfp+0x24>
 8010c84:	f7ff ff78 	bl	8010b78 <__sfp_lock_release>
 8010c88:	230c      	movs	r3, #12
 8010c8a:	603b      	str	r3, [r7, #0]
 8010c8c:	e7ee      	b.n	8010c6c <__sfp+0x60>
 8010c8e:	bf00      	nop
 8010c90:	080246f4 	.word	0x080246f4
 8010c94:	ffff0001 	.word	0xffff0001

08010c98 <_fwalk_reent>:
 8010c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c9c:	4606      	mov	r6, r0
 8010c9e:	4688      	mov	r8, r1
 8010ca0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010ca4:	2700      	movs	r7, #0
 8010ca6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010caa:	f1b9 0901 	subs.w	r9, r9, #1
 8010cae:	d505      	bpl.n	8010cbc <_fwalk_reent+0x24>
 8010cb0:	6824      	ldr	r4, [r4, #0]
 8010cb2:	2c00      	cmp	r4, #0
 8010cb4:	d1f7      	bne.n	8010ca6 <_fwalk_reent+0xe>
 8010cb6:	4638      	mov	r0, r7
 8010cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cbc:	89ab      	ldrh	r3, [r5, #12]
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	d907      	bls.n	8010cd2 <_fwalk_reent+0x3a>
 8010cc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	d003      	beq.n	8010cd2 <_fwalk_reent+0x3a>
 8010cca:	4629      	mov	r1, r5
 8010ccc:	4630      	mov	r0, r6
 8010cce:	47c0      	blx	r8
 8010cd0:	4307      	orrs	r7, r0
 8010cd2:	3568      	adds	r5, #104	; 0x68
 8010cd4:	e7e9      	b.n	8010caa <_fwalk_reent+0x12>

08010cd6 <__retarget_lock_init_recursive>:
 8010cd6:	4770      	bx	lr

08010cd8 <__retarget_lock_acquire_recursive>:
 8010cd8:	4770      	bx	lr

08010cda <__retarget_lock_release_recursive>:
 8010cda:	4770      	bx	lr

08010cdc <__swhatbuf_r>:
 8010cdc:	b570      	push	{r4, r5, r6, lr}
 8010cde:	460e      	mov	r6, r1
 8010ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ce4:	2900      	cmp	r1, #0
 8010ce6:	b096      	sub	sp, #88	; 0x58
 8010ce8:	4614      	mov	r4, r2
 8010cea:	461d      	mov	r5, r3
 8010cec:	da07      	bge.n	8010cfe <__swhatbuf_r+0x22>
 8010cee:	2300      	movs	r3, #0
 8010cf0:	602b      	str	r3, [r5, #0]
 8010cf2:	89b3      	ldrh	r3, [r6, #12]
 8010cf4:	061a      	lsls	r2, r3, #24
 8010cf6:	d410      	bmi.n	8010d1a <__swhatbuf_r+0x3e>
 8010cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cfc:	e00e      	b.n	8010d1c <__swhatbuf_r+0x40>
 8010cfe:	466a      	mov	r2, sp
 8010d00:	f000 f946 	bl	8010f90 <_fstat_r>
 8010d04:	2800      	cmp	r0, #0
 8010d06:	dbf2      	blt.n	8010cee <__swhatbuf_r+0x12>
 8010d08:	9a01      	ldr	r2, [sp, #4]
 8010d0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010d12:	425a      	negs	r2, r3
 8010d14:	415a      	adcs	r2, r3
 8010d16:	602a      	str	r2, [r5, #0]
 8010d18:	e7ee      	b.n	8010cf8 <__swhatbuf_r+0x1c>
 8010d1a:	2340      	movs	r3, #64	; 0x40
 8010d1c:	2000      	movs	r0, #0
 8010d1e:	6023      	str	r3, [r4, #0]
 8010d20:	b016      	add	sp, #88	; 0x58
 8010d22:	bd70      	pop	{r4, r5, r6, pc}

08010d24 <__smakebuf_r>:
 8010d24:	898b      	ldrh	r3, [r1, #12]
 8010d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d28:	079d      	lsls	r5, r3, #30
 8010d2a:	4606      	mov	r6, r0
 8010d2c:	460c      	mov	r4, r1
 8010d2e:	d507      	bpl.n	8010d40 <__smakebuf_r+0x1c>
 8010d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d34:	6023      	str	r3, [r4, #0]
 8010d36:	6123      	str	r3, [r4, #16]
 8010d38:	2301      	movs	r3, #1
 8010d3a:	6163      	str	r3, [r4, #20]
 8010d3c:	b002      	add	sp, #8
 8010d3e:	bd70      	pop	{r4, r5, r6, pc}
 8010d40:	ab01      	add	r3, sp, #4
 8010d42:	466a      	mov	r2, sp
 8010d44:	f7ff ffca 	bl	8010cdc <__swhatbuf_r>
 8010d48:	9900      	ldr	r1, [sp, #0]
 8010d4a:	4605      	mov	r5, r0
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	f7ff f9fb 	bl	8010148 <_malloc_r>
 8010d52:	b948      	cbnz	r0, 8010d68 <__smakebuf_r+0x44>
 8010d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d58:	059a      	lsls	r2, r3, #22
 8010d5a:	d4ef      	bmi.n	8010d3c <__smakebuf_r+0x18>
 8010d5c:	f023 0303 	bic.w	r3, r3, #3
 8010d60:	f043 0302 	orr.w	r3, r3, #2
 8010d64:	81a3      	strh	r3, [r4, #12]
 8010d66:	e7e3      	b.n	8010d30 <__smakebuf_r+0xc>
 8010d68:	4b0d      	ldr	r3, [pc, #52]	; (8010da0 <__smakebuf_r+0x7c>)
 8010d6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010d6c:	89a3      	ldrh	r3, [r4, #12]
 8010d6e:	6020      	str	r0, [r4, #0]
 8010d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d74:	81a3      	strh	r3, [r4, #12]
 8010d76:	9b00      	ldr	r3, [sp, #0]
 8010d78:	6163      	str	r3, [r4, #20]
 8010d7a:	9b01      	ldr	r3, [sp, #4]
 8010d7c:	6120      	str	r0, [r4, #16]
 8010d7e:	b15b      	cbz	r3, 8010d98 <__smakebuf_r+0x74>
 8010d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d84:	4630      	mov	r0, r6
 8010d86:	f000 f915 	bl	8010fb4 <_isatty_r>
 8010d8a:	b128      	cbz	r0, 8010d98 <__smakebuf_r+0x74>
 8010d8c:	89a3      	ldrh	r3, [r4, #12]
 8010d8e:	f023 0303 	bic.w	r3, r3, #3
 8010d92:	f043 0301 	orr.w	r3, r3, #1
 8010d96:	81a3      	strh	r3, [r4, #12]
 8010d98:	89a0      	ldrh	r0, [r4, #12]
 8010d9a:	4305      	orrs	r5, r0
 8010d9c:	81a5      	strh	r5, [r4, #12]
 8010d9e:	e7cd      	b.n	8010d3c <__smakebuf_r+0x18>
 8010da0:	08010b35 	.word	0x08010b35

08010da4 <memmove>:
 8010da4:	4288      	cmp	r0, r1
 8010da6:	b510      	push	{r4, lr}
 8010da8:	eb01 0402 	add.w	r4, r1, r2
 8010dac:	d902      	bls.n	8010db4 <memmove+0x10>
 8010dae:	4284      	cmp	r4, r0
 8010db0:	4623      	mov	r3, r4
 8010db2:	d807      	bhi.n	8010dc4 <memmove+0x20>
 8010db4:	1e43      	subs	r3, r0, #1
 8010db6:	42a1      	cmp	r1, r4
 8010db8:	d008      	beq.n	8010dcc <memmove+0x28>
 8010dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010dc2:	e7f8      	b.n	8010db6 <memmove+0x12>
 8010dc4:	4402      	add	r2, r0
 8010dc6:	4601      	mov	r1, r0
 8010dc8:	428a      	cmp	r2, r1
 8010dca:	d100      	bne.n	8010dce <memmove+0x2a>
 8010dcc:	bd10      	pop	{r4, pc}
 8010dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010dd6:	e7f7      	b.n	8010dc8 <memmove+0x24>

08010dd8 <__malloc_lock>:
 8010dd8:	4801      	ldr	r0, [pc, #4]	; (8010de0 <__malloc_lock+0x8>)
 8010dda:	f7ff bf7d 	b.w	8010cd8 <__retarget_lock_acquire_recursive>
 8010dde:	bf00      	nop
 8010de0:	20000794 	.word	0x20000794

08010de4 <__malloc_unlock>:
 8010de4:	4801      	ldr	r0, [pc, #4]	; (8010dec <__malloc_unlock+0x8>)
 8010de6:	f7ff bf78 	b.w	8010cda <__retarget_lock_release_recursive>
 8010dea:	bf00      	nop
 8010dec:	20000794 	.word	0x20000794

08010df0 <_realloc_r>:
 8010df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df2:	4607      	mov	r7, r0
 8010df4:	4614      	mov	r4, r2
 8010df6:	460e      	mov	r6, r1
 8010df8:	b921      	cbnz	r1, 8010e04 <_realloc_r+0x14>
 8010dfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010dfe:	4611      	mov	r1, r2
 8010e00:	f7ff b9a2 	b.w	8010148 <_malloc_r>
 8010e04:	b922      	cbnz	r2, 8010e10 <_realloc_r+0x20>
 8010e06:	f7ff f94f 	bl	80100a8 <_free_r>
 8010e0a:	4625      	mov	r5, r4
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e10:	f000 f8f2 	bl	8010ff8 <_malloc_usable_size_r>
 8010e14:	42a0      	cmp	r0, r4
 8010e16:	d20f      	bcs.n	8010e38 <_realloc_r+0x48>
 8010e18:	4621      	mov	r1, r4
 8010e1a:	4638      	mov	r0, r7
 8010e1c:	f7ff f994 	bl	8010148 <_malloc_r>
 8010e20:	4605      	mov	r5, r0
 8010e22:	2800      	cmp	r0, #0
 8010e24:	d0f2      	beq.n	8010e0c <_realloc_r+0x1c>
 8010e26:	4631      	mov	r1, r6
 8010e28:	4622      	mov	r2, r4
 8010e2a:	f7fe fc65 	bl	800f6f8 <memcpy>
 8010e2e:	4631      	mov	r1, r6
 8010e30:	4638      	mov	r0, r7
 8010e32:	f7ff f939 	bl	80100a8 <_free_r>
 8010e36:	e7e9      	b.n	8010e0c <_realloc_r+0x1c>
 8010e38:	4635      	mov	r5, r6
 8010e3a:	e7e7      	b.n	8010e0c <_realloc_r+0x1c>

08010e3c <_raise_r>:
 8010e3c:	291f      	cmp	r1, #31
 8010e3e:	b538      	push	{r3, r4, r5, lr}
 8010e40:	4604      	mov	r4, r0
 8010e42:	460d      	mov	r5, r1
 8010e44:	d904      	bls.n	8010e50 <_raise_r+0x14>
 8010e46:	2316      	movs	r3, #22
 8010e48:	6003      	str	r3, [r0, #0]
 8010e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e4e:	bd38      	pop	{r3, r4, r5, pc}
 8010e50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e52:	b112      	cbz	r2, 8010e5a <_raise_r+0x1e>
 8010e54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e58:	b94b      	cbnz	r3, 8010e6e <_raise_r+0x32>
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f000 f830 	bl	8010ec0 <_getpid_r>
 8010e60:	462a      	mov	r2, r5
 8010e62:	4601      	mov	r1, r0
 8010e64:	4620      	mov	r0, r4
 8010e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e6a:	f000 b817 	b.w	8010e9c <_kill_r>
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	d00a      	beq.n	8010e88 <_raise_r+0x4c>
 8010e72:	1c59      	adds	r1, r3, #1
 8010e74:	d103      	bne.n	8010e7e <_raise_r+0x42>
 8010e76:	2316      	movs	r3, #22
 8010e78:	6003      	str	r3, [r0, #0]
 8010e7a:	2001      	movs	r0, #1
 8010e7c:	e7e7      	b.n	8010e4e <_raise_r+0x12>
 8010e7e:	2400      	movs	r4, #0
 8010e80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e84:	4628      	mov	r0, r5
 8010e86:	4798      	blx	r3
 8010e88:	2000      	movs	r0, #0
 8010e8a:	e7e0      	b.n	8010e4e <_raise_r+0x12>

08010e8c <raise>:
 8010e8c:	4b02      	ldr	r3, [pc, #8]	; (8010e98 <raise+0xc>)
 8010e8e:	4601      	mov	r1, r0
 8010e90:	6818      	ldr	r0, [r3, #0]
 8010e92:	f7ff bfd3 	b.w	8010e3c <_raise_r>
 8010e96:	bf00      	nop
 8010e98:	20000040 	.word	0x20000040

08010e9c <_kill_r>:
 8010e9c:	b538      	push	{r3, r4, r5, lr}
 8010e9e:	4d07      	ldr	r5, [pc, #28]	; (8010ebc <_kill_r+0x20>)
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	4608      	mov	r0, r1
 8010ea6:	4611      	mov	r1, r2
 8010ea8:	602b      	str	r3, [r5, #0]
 8010eaa:	f7f4 ff19 	bl	8005ce0 <_kill>
 8010eae:	1c43      	adds	r3, r0, #1
 8010eb0:	d102      	bne.n	8010eb8 <_kill_r+0x1c>
 8010eb2:	682b      	ldr	r3, [r5, #0]
 8010eb4:	b103      	cbz	r3, 8010eb8 <_kill_r+0x1c>
 8010eb6:	6023      	str	r3, [r4, #0]
 8010eb8:	bd38      	pop	{r3, r4, r5, pc}
 8010eba:	bf00      	nop
 8010ebc:	2000079c 	.word	0x2000079c

08010ec0 <_getpid_r>:
 8010ec0:	f7f4 bf06 	b.w	8005cd0 <_getpid>

08010ec4 <__sread>:
 8010ec4:	b510      	push	{r4, lr}
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ecc:	f000 f89c 	bl	8011008 <_read_r>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	bfab      	itete	ge
 8010ed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8010ed8:	181b      	addge	r3, r3, r0
 8010eda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ede:	bfac      	ite	ge
 8010ee0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010ee2:	81a3      	strhlt	r3, [r4, #12]
 8010ee4:	bd10      	pop	{r4, pc}

08010ee6 <__swrite>:
 8010ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eea:	461f      	mov	r7, r3
 8010eec:	898b      	ldrh	r3, [r1, #12]
 8010eee:	05db      	lsls	r3, r3, #23
 8010ef0:	4605      	mov	r5, r0
 8010ef2:	460c      	mov	r4, r1
 8010ef4:	4616      	mov	r6, r2
 8010ef6:	d505      	bpl.n	8010f04 <__swrite+0x1e>
 8010ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010efc:	2302      	movs	r3, #2
 8010efe:	2200      	movs	r2, #0
 8010f00:	f000 f868 	bl	8010fd4 <_lseek_r>
 8010f04:	89a3      	ldrh	r3, [r4, #12]
 8010f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f0e:	81a3      	strh	r3, [r4, #12]
 8010f10:	4632      	mov	r2, r6
 8010f12:	463b      	mov	r3, r7
 8010f14:	4628      	mov	r0, r5
 8010f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f1a:	f000 b817 	b.w	8010f4c <_write_r>

08010f1e <__sseek>:
 8010f1e:	b510      	push	{r4, lr}
 8010f20:	460c      	mov	r4, r1
 8010f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f26:	f000 f855 	bl	8010fd4 <_lseek_r>
 8010f2a:	1c43      	adds	r3, r0, #1
 8010f2c:	89a3      	ldrh	r3, [r4, #12]
 8010f2e:	bf15      	itete	ne
 8010f30:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f3a:	81a3      	strheq	r3, [r4, #12]
 8010f3c:	bf18      	it	ne
 8010f3e:	81a3      	strhne	r3, [r4, #12]
 8010f40:	bd10      	pop	{r4, pc}

08010f42 <__sclose>:
 8010f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f46:	f000 b813 	b.w	8010f70 <_close_r>
	...

08010f4c <_write_r>:
 8010f4c:	b538      	push	{r3, r4, r5, lr}
 8010f4e:	4d07      	ldr	r5, [pc, #28]	; (8010f6c <_write_r+0x20>)
 8010f50:	4604      	mov	r4, r0
 8010f52:	4608      	mov	r0, r1
 8010f54:	4611      	mov	r1, r2
 8010f56:	2200      	movs	r2, #0
 8010f58:	602a      	str	r2, [r5, #0]
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	f7f4 fef7 	bl	8005d4e <_write>
 8010f60:	1c43      	adds	r3, r0, #1
 8010f62:	d102      	bne.n	8010f6a <_write_r+0x1e>
 8010f64:	682b      	ldr	r3, [r5, #0]
 8010f66:	b103      	cbz	r3, 8010f6a <_write_r+0x1e>
 8010f68:	6023      	str	r3, [r4, #0]
 8010f6a:	bd38      	pop	{r3, r4, r5, pc}
 8010f6c:	2000079c 	.word	0x2000079c

08010f70 <_close_r>:
 8010f70:	b538      	push	{r3, r4, r5, lr}
 8010f72:	4d06      	ldr	r5, [pc, #24]	; (8010f8c <_close_r+0x1c>)
 8010f74:	2300      	movs	r3, #0
 8010f76:	4604      	mov	r4, r0
 8010f78:	4608      	mov	r0, r1
 8010f7a:	602b      	str	r3, [r5, #0]
 8010f7c:	f7f4 ff03 	bl	8005d86 <_close>
 8010f80:	1c43      	adds	r3, r0, #1
 8010f82:	d102      	bne.n	8010f8a <_close_r+0x1a>
 8010f84:	682b      	ldr	r3, [r5, #0]
 8010f86:	b103      	cbz	r3, 8010f8a <_close_r+0x1a>
 8010f88:	6023      	str	r3, [r4, #0]
 8010f8a:	bd38      	pop	{r3, r4, r5, pc}
 8010f8c:	2000079c 	.word	0x2000079c

08010f90 <_fstat_r>:
 8010f90:	b538      	push	{r3, r4, r5, lr}
 8010f92:	4d07      	ldr	r5, [pc, #28]	; (8010fb0 <_fstat_r+0x20>)
 8010f94:	2300      	movs	r3, #0
 8010f96:	4604      	mov	r4, r0
 8010f98:	4608      	mov	r0, r1
 8010f9a:	4611      	mov	r1, r2
 8010f9c:	602b      	str	r3, [r5, #0]
 8010f9e:	f7f4 fefe 	bl	8005d9e <_fstat>
 8010fa2:	1c43      	adds	r3, r0, #1
 8010fa4:	d102      	bne.n	8010fac <_fstat_r+0x1c>
 8010fa6:	682b      	ldr	r3, [r5, #0]
 8010fa8:	b103      	cbz	r3, 8010fac <_fstat_r+0x1c>
 8010faa:	6023      	str	r3, [r4, #0]
 8010fac:	bd38      	pop	{r3, r4, r5, pc}
 8010fae:	bf00      	nop
 8010fb0:	2000079c 	.word	0x2000079c

08010fb4 <_isatty_r>:
 8010fb4:	b538      	push	{r3, r4, r5, lr}
 8010fb6:	4d06      	ldr	r5, [pc, #24]	; (8010fd0 <_isatty_r+0x1c>)
 8010fb8:	2300      	movs	r3, #0
 8010fba:	4604      	mov	r4, r0
 8010fbc:	4608      	mov	r0, r1
 8010fbe:	602b      	str	r3, [r5, #0]
 8010fc0:	f7f4 fefd 	bl	8005dbe <_isatty>
 8010fc4:	1c43      	adds	r3, r0, #1
 8010fc6:	d102      	bne.n	8010fce <_isatty_r+0x1a>
 8010fc8:	682b      	ldr	r3, [r5, #0]
 8010fca:	b103      	cbz	r3, 8010fce <_isatty_r+0x1a>
 8010fcc:	6023      	str	r3, [r4, #0]
 8010fce:	bd38      	pop	{r3, r4, r5, pc}
 8010fd0:	2000079c 	.word	0x2000079c

08010fd4 <_lseek_r>:
 8010fd4:	b538      	push	{r3, r4, r5, lr}
 8010fd6:	4d07      	ldr	r5, [pc, #28]	; (8010ff4 <_lseek_r+0x20>)
 8010fd8:	4604      	mov	r4, r0
 8010fda:	4608      	mov	r0, r1
 8010fdc:	4611      	mov	r1, r2
 8010fde:	2200      	movs	r2, #0
 8010fe0:	602a      	str	r2, [r5, #0]
 8010fe2:	461a      	mov	r2, r3
 8010fe4:	f7f4 fef6 	bl	8005dd4 <_lseek>
 8010fe8:	1c43      	adds	r3, r0, #1
 8010fea:	d102      	bne.n	8010ff2 <_lseek_r+0x1e>
 8010fec:	682b      	ldr	r3, [r5, #0]
 8010fee:	b103      	cbz	r3, 8010ff2 <_lseek_r+0x1e>
 8010ff0:	6023      	str	r3, [r4, #0]
 8010ff2:	bd38      	pop	{r3, r4, r5, pc}
 8010ff4:	2000079c 	.word	0x2000079c

08010ff8 <_malloc_usable_size_r>:
 8010ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ffc:	1f18      	subs	r0, r3, #4
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	bfbc      	itt	lt
 8011002:	580b      	ldrlt	r3, [r1, r0]
 8011004:	18c0      	addlt	r0, r0, r3
 8011006:	4770      	bx	lr

08011008 <_read_r>:
 8011008:	b538      	push	{r3, r4, r5, lr}
 801100a:	4d07      	ldr	r5, [pc, #28]	; (8011028 <_read_r+0x20>)
 801100c:	4604      	mov	r4, r0
 801100e:	4608      	mov	r0, r1
 8011010:	4611      	mov	r1, r2
 8011012:	2200      	movs	r2, #0
 8011014:	602a      	str	r2, [r5, #0]
 8011016:	461a      	mov	r2, r3
 8011018:	f7f4 fe7c 	bl	8005d14 <_read>
 801101c:	1c43      	adds	r3, r0, #1
 801101e:	d102      	bne.n	8011026 <_read_r+0x1e>
 8011020:	682b      	ldr	r3, [r5, #0]
 8011022:	b103      	cbz	r3, 8011026 <_read_r+0x1e>
 8011024:	6023      	str	r3, [r4, #0]
 8011026:	bd38      	pop	{r3, r4, r5, pc}
 8011028:	2000079c 	.word	0x2000079c

0801102c <_init>:
 801102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801102e:	bf00      	nop
 8011030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011032:	bc08      	pop	{r3}
 8011034:	469e      	mov	lr, r3
 8011036:	4770      	bx	lr

08011038 <_fini>:
 8011038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801103a:	bf00      	nop
 801103c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801103e:	bc08      	pop	{r3}
 8011040:	469e      	mov	lr, r3
 8011042:	4770      	bx	lr
