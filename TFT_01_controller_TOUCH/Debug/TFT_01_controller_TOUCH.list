
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001201c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c90  080121c0  080121c0  000221c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025e50  08025e50  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08025e50  08025e50  00035e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025e58  08025e58  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025e58  08025e58  00035e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025e5c  08025e5c  00035e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08025e60  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000214  08026074  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  08026074  00040800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002286e  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a96  00000000  00000000  00062ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  00067548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000778c  00000000  00000000  00068d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000247d5  00000000  00000000  0007050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00097cae  00000000  00000000  00094ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012c98f  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001690  00000000  00000000  0012c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000787c  00000000  00000000  0012e078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080121a4 	.word	0x080121a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	080121a4 	.word	0x080121a4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000028c 	.word	0x2000028c

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	2000028c 	.word	0x2000028c

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	2000028c 	.word	0x2000028c

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	2000028c 	.word	0x2000028c

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	2000028c 	.word	0x2000028c

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000028c 	.word	0x2000028c

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f005 f8e4 	bl	8006dfc <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000290 	.word	0x20000290

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f006 f815 	bl	8007cdc <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f006 f80f 	bl	8007cdc <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f006 f804 	bl	8007cdc <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f005 fff1 	bl	8007cdc <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f005 ffeb 	bl	8007cdc <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f005 ffdf 	bl	8007cdc <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f005 ffd5 	bl	8007cdc <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f005 feda 	bl	8007cdc <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f005 fed4 	bl	8007cdc <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f005 fe9d 	bl	8007cdc <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	20000290 	.word	0x20000290

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f005 fe7d 	bl	8007cdc <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f005 fe74 	bl	8007cdc <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000290 	.word	0x20000290
 8002054:	0801522c 	.word	0x0801522c
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f005 fe37 	bl	8007cdc <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f009 fc4e 	bl	800b91e <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f005 fe27 	bl	8007cdc <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000294 	.word	0x20000294
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002bd 	.word	0x200002bd

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f004 fd84 	bl	8006de4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f005 fcbb 	bl	8007cac <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f004 fd4f 	bl	8006de4 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f004 fd49 	bl	8006de4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f005 fc7d 	bl	8007cac <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f004 fd11 	bl	8006de4 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 febe 	bl	8007168 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fea9 	bl	800714a <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f004 fe78 	bl	80070fa <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002bd 	.word	0x200002bd
 8002420:	200002c0 	.word	0x200002c0
 8002424:	200002bc 	.word	0x200002bc
 8002428:	20000294 	.word	0x20000294
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f004 fe68 	bl	8007116 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002bd 	.word	0x200002bd

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f005 fc2f 	bl	8007cdc <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f004 fcb1 	bl	8006dfc <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002bd 	.word	0x200002bd
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f004 fdd1 	bl	80070c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f004 fdea 	bl	80070fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f004 fdc9 	bl	80070c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f004 fde2 	bl	80070fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f004 fdc1 	bl	80070c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f004 fdda 	bl	80070fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f004 fdb9 	bl	80070c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f004 fdd2 	bl	80070fa <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002c4 	.word	0x200002c4

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f005 fd1b 	bl	8007ffc <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002c4 	.word	0x200002c4

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f005 fd05 	bl	8007ffc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f005 fdf8 	bl	80081f8 <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002c4 	.word	0x200002c4

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002780:	2002      	movs	r0, #2
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f848 	bl	800281e <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002798:	2001      	movs	r0, #1
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f83c 	bl	800281e <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f846 	bl	8002850 <DS3231_EncodeBCD>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4619      	mov	r1, r3
 80027c8:	2002      	movs	r0, #2
 80027ca:	f7ff fee5 	bl	8002598 <DS3231_SetRegByte>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f834 	bl	8002850 <DS3231_EncodeBCD>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4619      	mov	r1, r3
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff fed3 	bl	8002598 <DS3231_SetRegByte>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f822 	bl	8002850 <DS3231_EncodeBCD>
 800280c:	4603      	mov	r3, r0
 800280e:	4619      	mov	r1, r3
 8002810:	2000      	movs	r0, #0
 8002812:	f7ff fec1 	bl	8002598 <DS3231_SetRegByte>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	b2da      	uxtb	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4413      	add	r3, r2
 8002842:	b2db      	uxtb	r3, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800285a:	79fa      	ldrb	r2, [r7, #7]
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <DS3231_EncodeBCD+0x40>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	08d9      	lsrs	r1, r3, #3
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	b2da      	uxtb	r2, r3
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	4907      	ldr	r1, [pc, #28]	; (8002890 <DS3231_EncodeBCD+0x40>)
 8002874:	fba1 1303 	umull	r1, r3, r1, r3
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4413      	add	r3, r2
 8002882:	b2db      	uxtb	r3, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	cccccccd 	.word	0xcccccccd

08002894 <eeprom_wait>:
#define WRITE_TIMEOUT   6

static uint32_t last_write;

void eeprom_wait(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002898:	bf00      	nop
 800289a:	f004 faa3 	bl	8006de4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <eeprom_wait+0x1c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d9f7      	bls.n	800289a <eeprom_wait+0x6>
    {
    }
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000248 	.word	0x20000248

080028b4 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af04      	add	r7, sp, #16
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80028c0:	f7ff ffe8 	bl	8002894 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	9102      	str	r1, [sp, #8]
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2301      	movs	r3, #1
 80028da:	21a0      	movs	r1, #160	; 0xa0
 80028dc:	4803      	ldr	r0, [pc, #12]	; (80028ec <eeprom_read+0x38>)
 80028de:	f005 ffab 	bl	8008838 <HAL_I2C_Mem_Read>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200002e8 	.word	0x200002e8

080028f0 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 80028fc:	f7ff ffca 	bl	8002894 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	21a0      	movs	r1, #160	; 0xa0
 8002918:	4807      	ldr	r0, [pc, #28]	; (8002938 <eeprom_write+0x48>)
 800291a:	f005 fe93 	bl	8008644 <HAL_I2C_Mem_Write>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002922:	f004 fa5f 	bl	8006de4 <HAL_GetTick>
 8002926:	4603      	mov	r3, r0
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <eeprom_write+0x4c>)
 800292a:	6013      	str	r3, [r2, #0]

    return rc;
 800292c:	7dfb      	ldrb	r3, [r7, #23]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200002e8 	.word	0x200002e8
 800293c:	20000248 	.word	0x20000248

08002940 <EEPROM_RelayStateUpdate>:

void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	460a      	mov	r2, r1
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	4613      	mov	r3, r2
 800294e:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002950:	79bb      	ldrb	r3, [r7, #6]
 8002952:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <EEPROM_RelayStateUpdate+0x2a>
 800295a:	f107 030f 	add.w	r3, r7, #15
 800295e:	2201      	movs	r2, #1
 8002960:	4619      	mov	r1, r3
 8002962:	202e      	movs	r0, #46	; 0x2e
 8002964:	f7ff ffc4 	bl	80028f0 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002968:	e01f      	b.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d107      	bne.n	8002980 <EEPROM_RelayStateUpdate+0x40>
 8002970:	f107 030f 	add.w	r3, r7, #15
 8002974:	2201      	movs	r2, #1
 8002976:	4619      	mov	r1, r3
 8002978:	202f      	movs	r0, #47	; 0x2f
 800297a:	f7ff ffb9 	bl	80028f0 <eeprom_write>
}
 800297e:	e014      	b.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d107      	bne.n	8002996 <EEPROM_RelayStateUpdate+0x56>
 8002986:	f107 030f 	add.w	r3, r7, #15
 800298a:	2201      	movs	r2, #1
 800298c:	4619      	mov	r1, r3
 800298e:	2030      	movs	r0, #48	; 0x30
 8002990:	f7ff ffae 	bl	80028f0 <eeprom_write>
}
 8002994:	e009      	b.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d106      	bne.n	80029aa <EEPROM_RelayStateUpdate+0x6a>
 800299c:	f107 030f 	add.w	r3, r7, #15
 80029a0:	2201      	movs	r2, #1
 80029a2:	4619      	mov	r1, r3
 80029a4:	2031      	movs	r0, #49	; 0x31
 80029a6:	f7ff ffa3 	bl	80028f0 <eeprom_write>
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <EEPROM_RelayStateRead>:
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <EEPROM_RelayStateRead+0x24>
 80029c6:	f107 030f 	add.w	r3, r7, #15
 80029ca:	2201      	movs	r2, #1
 80029cc:	4619      	mov	r1, r3
 80029ce:	202e      	movs	r0, #46	; 0x2e
 80029d0:	f7ff ff70 	bl	80028b4 <eeprom_read>
 80029d4:	e01f      	b.n	8002a16 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d107      	bne.n	80029ec <EEPROM_RelayStateRead+0x3a>
 80029dc:	f107 030f 	add.w	r3, r7, #15
 80029e0:	2201      	movs	r2, #1
 80029e2:	4619      	mov	r1, r3
 80029e4:	202f      	movs	r0, #47	; 0x2f
 80029e6:	f7ff ff65 	bl	80028b4 <eeprom_read>
 80029ea:	e014      	b.n	8002a16 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d107      	bne.n	8002a02 <EEPROM_RelayStateRead+0x50>
 80029f2:	f107 030f 	add.w	r3, r7, #15
 80029f6:	2201      	movs	r2, #1
 80029f8:	4619      	mov	r1, r3
 80029fa:	2030      	movs	r0, #48	; 0x30
 80029fc:	f7ff ff5a 	bl	80028b4 <eeprom_read>
 8002a00:	e009      	b.n	8002a16 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d106      	bne.n	8002a16 <EEPROM_RelayStateRead+0x64>
 8002a08:	f107 030f 	add.w	r3, r7, #15
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2031      	movs	r0, #49	; 0x31
 8002a12:	f7ff ff4f 	bl	80028b4 <eeprom_read>

	return AktualnyStan;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <EEPROM_RelayStateRestore>:

void EEPROM_RelayStateRestore(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002a24:	2001      	movs	r0, #1
 8002a26:	f7ff ffc4 	bl	80029b2 <EEPROM_RelayStateRead>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <EEPROM_RelayStateRestore+0x18>
 8002a30:	2005      	movs	r0, #5
 8002a32:	f003 f9c7 	bl	8005dc4 <SendComand>
 8002a36:	e002      	b.n	8002a3e <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002a38:	2006      	movs	r0, #6
 8002a3a:	f003 f9c3 	bl	8005dc4 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002a3e:	2002      	movs	r0, #2
 8002a40:	f7ff ffb7 	bl	80029b2 <EEPROM_RelayStateRead>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <EEPROM_RelayStateRestore+0x32>
 8002a4a:	2007      	movs	r0, #7
 8002a4c:	f003 f9ba 	bl	8005dc4 <SendComand>
 8002a50:	e002      	b.n	8002a58 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002a52:	2008      	movs	r0, #8
 8002a54:	f003 f9b6 	bl	8005dc4 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002a58:	2003      	movs	r0, #3
 8002a5a:	f7ff ffaa 	bl	80029b2 <EEPROM_RelayStateRead>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <EEPROM_RelayStateRestore+0x4c>
 8002a64:	2009      	movs	r0, #9
 8002a66:	f003 f9ad 	bl	8005dc4 <SendComand>
 8002a6a:	e002      	b.n	8002a72 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002a6c:	200a      	movs	r0, #10
 8002a6e:	f003 f9a9 	bl	8005dc4 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002a72:	2004      	movs	r0, #4
 8002a74:	f7ff ff9d 	bl	80029b2 <EEPROM_RelayStateRead>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <EEPROM_RelayStateRestore+0x66>
 8002a7e:	200b      	movs	r0, #11
 8002a80:	f003 f9a0 	bl	8005dc4 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);
}
 8002a84:	e002      	b.n	8002a8c <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002a86:	200c      	movs	r0, #12
 8002a88:	f003 f99c 	bl	8005dc4 <SendComand>
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002a96:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002a9a:	f7ff fa2d 	bl	8001ef8 <ILI9341_ClearDisplay>
	  ILI9341_DrawImage(40, 50, logo, 240, 140);
 8002a9e:	238c      	movs	r3, #140	; 0x8c
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	23f0      	movs	r3, #240	; 0xf0
 8002aa4:	4a87      	ldr	r2, [pc, #540]	; (8002cc4 <system_init+0x234>)
 8002aa6:	2132      	movs	r1, #50	; 0x32
 8002aa8:	2028      	movs	r0, #40	; 0x28
 8002aaa:	f7ff f9fa 	bl	8001ea2 <ILI9341_DrawImage>
//	  GFX_Image(40, 50, logo, 240, 140); //usunieta wolniejsza wersja rysowania

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002aae:	4886      	ldr	r0, [pc, #536]	; (8002cc8 <system_init+0x238>)
 8002ab0:	f7fe fe1e 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8002ab4:	4985      	ldr	r1, [pc, #532]	; (8002ccc <system_init+0x23c>)
 8002ab6:	4886      	ldr	r0, [pc, #536]	; (8002cd0 <system_init+0x240>)
 8002ab8:	f00b fd5c 	bl	800e574 <siprintf>
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 8002abc:	2300      	movs	r3, #0
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	2214      	movs	r2, #20
 8002ac8:	213c      	movs	r1, #60	; 0x3c
 8002aca:	4881      	ldr	r0, [pc, #516]	; (8002cd0 <system_init+0x240>)
 8002acc:	f7ff f82a 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 8002ad0:	f004 f988 	bl	8006de4 <HAL_GetTick>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4a7f      	ldr	r2, [pc, #508]	; (8002cd4 <system_init+0x244>)
 8002ad8:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 8002ada:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2314      	movs	r3, #20
 8002ae6:	2214      	movs	r2, #20
 8002ae8:	21c8      	movs	r1, #200	; 0xc8
 8002aea:	203c      	movs	r0, #60	; 0x3c
 8002aec:	f7fe fd32 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 8002af0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	2305      	movs	r3, #5
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2314      	movs	r3, #20
 8002afc:	2214      	movs	r2, #20
 8002afe:	21c8      	movs	r1, #200	; 0xc8
 8002b00:	205a      	movs	r0, #90	; 0x5a
 8002b02:	f7fe fd27 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 8002b06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2305      	movs	r3, #5
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2314      	movs	r3, #20
 8002b12:	2214      	movs	r2, #20
 8002b14:	21c8      	movs	r1, #200	; 0xc8
 8002b16:	2078      	movs	r0, #120	; 0x78
 8002b18:	f7fe fd1c 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 8002b1c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	2305      	movs	r3, #5
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2314      	movs	r3, #20
 8002b28:	2214      	movs	r2, #20
 8002b2a:	21c8      	movs	r1, #200	; 0xc8
 8002b2c:	2096      	movs	r0, #150	; 0x96
 8002b2e:	f7fe fd11 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 8002b32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	2305      	movs	r3, #5
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2314      	movs	r3, #20
 8002b3e:	2214      	movs	r2, #20
 8002b40:	21c8      	movs	r1, #200	; 0xc8
 8002b42:	20b4      	movs	r0, #180	; 0xb4
 8002b44:	f7fe fd06 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 8002b48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	2305      	movs	r3, #5
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	2314      	movs	r3, #20
 8002b54:	2214      	movs	r2, #20
 8002b56:	21c8      	movs	r1, #200	; 0xc8
 8002b58:	20d2      	movs	r0, #210	; 0xd2
 8002b5a:	f7fe fcfb 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 8002b5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2305      	movs	r3, #5
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2314      	movs	r3, #20
 8002b6a:	2214      	movs	r2, #20
 8002b6c:	21c8      	movs	r1, #200	; 0xc8
 8002b6e:	20f0      	movs	r0, #240	; 0xf0
 8002b70:	f7fe fcf0 	bl	8001554 <GFX_DrawRoundRectangle>
	  	  initWait(200);
 8002b74:	20c8      	movs	r0, #200	; 0xc8
 8002b76:	f001 fa93 	bl	80040a0 <initWait>
	  	  LastTime = HAL_GetTick();
 8002b7a:	f004 f933 	bl	8006de4 <HAL_GetTick>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4a54      	ldr	r2, [pc, #336]	; (8002cd4 <system_init+0x244>)
 8002b82:	6013      	str	r3, [r2, #0]

	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 8002b84:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	2305      	movs	r3, #5
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2314      	movs	r3, #20
 8002b90:	2214      	movs	r2, #20
 8002b92:	21c8      	movs	r1, #200	; 0xc8
 8002b94:	203c      	movs	r0, #60	; 0x3c
 8002b96:	f7fe fd5a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8002b9a:	201b      	movs	r0, #27
 8002b9c:	f003 f912 	bl	8005dc4 <SendComand>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <system_init+0x248>)
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	f7ff fe85 	bl	80028b4 <eeprom_read>
	  	  	  initWait(100);
 8002baa:	2064      	movs	r0, #100	; 0x64
 8002bac:	f001 fa78 	bl	80040a0 <initWait>
	  	  	  LastTime = HAL_GetTick();
 8002bb0:	f004 f918 	bl	8006de4 <HAL_GetTick>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <system_init+0x244>)
 8002bb8:	6013      	str	r3, [r2, #0]

	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 8002bba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	2305      	movs	r3, #5
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2314      	movs	r3, #20
 8002bc6:	2214      	movs	r2, #20
 8002bc8:	21c8      	movs	r1, #200	; 0xc8
 8002bca:	205a      	movs	r0, #90	; 0x5a
 8002bcc:	f7fe fd3f 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	f003 f8f7 	bl	8005dc4 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 8002bd6:	f7ff ff23 	bl	8002a20 <EEPROM_RelayStateRestore>
  	  	  	  initWait(100);
 8002bda:	2064      	movs	r0, #100	; 0x64
 8002bdc:	f001 fa60 	bl	80040a0 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 8002be0:	f004 f900 	bl	8006de4 <HAL_GetTick>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4a3b      	ldr	r2, [pc, #236]	; (8002cd4 <system_init+0x244>)
 8002be8:	6013      	str	r3, [r2, #0]

	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 8002bea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	2305      	movs	r3, #5
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2314      	movs	r3, #20
 8002bf6:	2214      	movs	r2, #20
 8002bf8:	21c8      	movs	r1, #200	; 0xc8
 8002bfa:	2078      	movs	r0, #120	; 0x78
 8002bfc:	f7fe fd27 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 8002c00:	2004      	movs	r0, #4
 8002c02:	f003 f8df 	bl	8005dc4 <SendComand>
			  initWait(100);
 8002c06:	2064      	movs	r0, #100	; 0x64
 8002c08:	f001 fa4a 	bl	80040a0 <initWait>
			  LastTime = HAL_GetTick();
 8002c0c:	f004 f8ea 	bl	8006de4 <HAL_GetTick>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4a30      	ldr	r2, [pc, #192]	; (8002cd4 <system_init+0x244>)
 8002c14:	6013      	str	r3, [r2, #0]

	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 8002c16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	2305      	movs	r3, #5
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2314      	movs	r3, #20
 8002c22:	2214      	movs	r2, #20
 8002c24:	21c8      	movs	r1, #200	; 0xc8
 8002c26:	2096      	movs	r0, #150	; 0x96
 8002c28:	f7fe fd11 	bl	800164e <GFX_DrawFillRoundRectangle>

			  initWait(100);
 8002c2c:	2064      	movs	r0, #100	; 0x64
 8002c2e:	f001 fa37 	bl	80040a0 <initWait>
			  LastTime = HAL_GetTick();
 8002c32:	f004 f8d7 	bl	8006de4 <HAL_GetTick>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <system_init+0x244>)
 8002c3a:	6013      	str	r3, [r2, #0]

	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 8002c3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	2305      	movs	r3, #5
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2314      	movs	r3, #20
 8002c48:	2214      	movs	r2, #20
 8002c4a:	21c8      	movs	r1, #200	; 0xc8
 8002c4c:	20b4      	movs	r0, #180	; 0xb4
 8002c4e:	f7fe fcfe 	bl	800164e <GFX_DrawFillRoundRectangle>

			  initWait(100);
 8002c52:	2064      	movs	r0, #100	; 0x64
 8002c54:	f001 fa24 	bl	80040a0 <initWait>
			  LastTime = HAL_GetTick();
 8002c58:	f004 f8c4 	bl	8006de4 <HAL_GetTick>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <system_init+0x244>)
 8002c60:	6013      	str	r3, [r2, #0]

	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 8002c62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2305      	movs	r3, #5
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2314      	movs	r3, #20
 8002c6e:	2214      	movs	r2, #20
 8002c70:	21c8      	movs	r1, #200	; 0xc8
 8002c72:	20d2      	movs	r0, #210	; 0xd2
 8002c74:	f7fe fceb 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002c78:	2015      	movs	r0, #21
 8002c7a:	f003 f8a3 	bl	8005dc4 <SendComand>
			  initWait(100);
 8002c7e:	2064      	movs	r0, #100	; 0x64
 8002c80:	f001 fa0e 	bl	80040a0 <initWait>
			  LastTime = HAL_GetTick();
 8002c84:	f004 f8ae 	bl	8006de4 <HAL_GetTick>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <system_init+0x244>)
 8002c8c:	6013      	str	r3, [r2, #0]

	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 8002c8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	2305      	movs	r3, #5
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	2314      	movs	r3, #20
 8002c9a:	2214      	movs	r2, #20
 8002c9c:	21c8      	movs	r1, #200	; 0xc8
 8002c9e:	20f0      	movs	r0, #240	; 0xf0
 8002ca0:	f7fe fcd5 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002ca4:	2016      	movs	r0, #22
 8002ca6:	f003 f88d 	bl	8005dc4 <SendComand>
			  initWait(300);
 8002caa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002cae:	f001 f9f7 	bl	80040a0 <initWait>
			  LastTime = HAL_GetTick();
 8002cb2:	f004 f897 	bl	8006de4 <HAL_GetTick>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <system_init+0x244>)
 8002cba:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	0801529c 	.word	0x0801529c
 8002cc8:	08015220 	.word	0x08015220
 8002ccc:	080121c0 	.word	0x080121c0
 8002cd0:	200002c8 	.word	0x200002c8
 8002cd4:	20000250 	.word	0x20000250
 8002cd8:	20000032 	.word	0x20000032

08002cdc <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002ce6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	460b      	mov	r3, r1
 8002cee:	ed87 1a01 	vstr	s2, [r7, #4]
 8002cf2:	72fb      	strb	r3, [r7, #11]
	  SendComand(UCMD_TEMP_1);
 8002cf4:	2003      	movs	r0, #3
 8002cf6:	f003 f865 	bl	8005dc4 <SendComand>
	  SendComand(UCMD_PRES_1);
 8002cfa:	2004      	movs	r0, #4
 8002cfc:	f003 f862 	bl	8005dc4 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8002d00:	201b      	movs	r0, #27
 8002d02:	f003 f85f 	bl	8005dc4 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8002d06:	f7ff fd39 	bl	800277c <DS3231_GetHour>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8002d0e:	f7ff fd41 	bl	8002794 <DS3231_GetMinute>
 8002d12:	4603      	mov	r3, r0
 8002d14:	77bb      	strb	r3, [r7, #30]

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002d16:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002d1a:	f7ff f8ed 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002d1e:	4881      	ldr	r0, [pc, #516]	; (8002f24 <showCurrentParameters+0x248>)
 8002d20:	f7fe fce6 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8002d24:	4980      	ldr	r1, [pc, #512]	; (8002f28 <showCurrentParameters+0x24c>)
 8002d26:	4881      	ldr	r0, [pc, #516]	; (8002f2c <showCurrentParameters+0x250>)
 8002d28:	f00b fc24 	bl	800e574 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002d2c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	2300      	movs	r3, #0
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002d3a:	220a      	movs	r2, #10
 8002d3c:	212f      	movs	r1, #47	; 0x2f
 8002d3e:	487b      	ldr	r0, [pc, #492]	; (8002f2c <showCurrentParameters+0x250>)
 8002d40:	f7fe fef0 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002d44:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2329      	movs	r3, #41	; 0x29
 8002d4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d50:	2129      	movs	r1, #41	; 0x29
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe fa1c 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002d58:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	232b      	movs	r3, #43	; 0x2b
 8002d60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d64:	212b      	movs	r1, #43	; 0x2b
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fe fa12 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8002d6c:	7ffb      	ldrb	r3, [r7, #31]
 8002d6e:	2b09      	cmp	r3, #9
 8002d70:	d809      	bhi.n	8002d86 <showCurrentParameters+0xaa>
 8002d72:	7fbb      	ldrb	r3, [r7, #30]
 8002d74:	2b09      	cmp	r3, #9
 8002d76:	d806      	bhi.n	8002d86 <showCurrentParameters+0xaa>
 8002d78:	7ffa      	ldrb	r2, [r7, #31]
 8002d7a:	7fbb      	ldrb	r3, [r7, #30]
 8002d7c:	496c      	ldr	r1, [pc, #432]	; (8002f30 <showCurrentParameters+0x254>)
 8002d7e:	486b      	ldr	r0, [pc, #428]	; (8002f2c <showCurrentParameters+0x250>)
 8002d80:	f00b fbf8 	bl	800e574 <siprintf>
 8002d84:	e019      	b.n	8002dba <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8002d86:	7ffb      	ldrb	r3, [r7, #31]
 8002d88:	2b09      	cmp	r3, #9
 8002d8a:	d806      	bhi.n	8002d9a <showCurrentParameters+0xbe>
 8002d8c:	7ffa      	ldrb	r2, [r7, #31]
 8002d8e:	7fbb      	ldrb	r3, [r7, #30]
 8002d90:	4968      	ldr	r1, [pc, #416]	; (8002f34 <showCurrentParameters+0x258>)
 8002d92:	4866      	ldr	r0, [pc, #408]	; (8002f2c <showCurrentParameters+0x250>)
 8002d94:	f00b fbee 	bl	800e574 <siprintf>
 8002d98:	e00f      	b.n	8002dba <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8002d9a:	7fbb      	ldrb	r3, [r7, #30]
 8002d9c:	2b09      	cmp	r3, #9
 8002d9e:	d806      	bhi.n	8002dae <showCurrentParameters+0xd2>
 8002da0:	7ffa      	ldrb	r2, [r7, #31]
 8002da2:	7fbb      	ldrb	r3, [r7, #30]
 8002da4:	4964      	ldr	r1, [pc, #400]	; (8002f38 <showCurrentParameters+0x25c>)
 8002da6:	4861      	ldr	r0, [pc, #388]	; (8002f2c <showCurrentParameters+0x250>)
 8002da8:	f00b fbe4 	bl	800e574 <siprintf>
 8002dac:	e005      	b.n	8002dba <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8002dae:	7ffa      	ldrb	r2, [r7, #31]
 8002db0:	7fbb      	ldrb	r3, [r7, #30]
 8002db2:	4962      	ldr	r1, [pc, #392]	; (8002f3c <showCurrentParameters+0x260>)
 8002db4:	485d      	ldr	r0, [pc, #372]	; (8002f2c <showCurrentParameters+0x250>)
 8002db6:	f00b fbdd 	bl	800e574 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002dba:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2232      	movs	r2, #50	; 0x32
 8002dc8:	2114      	movs	r1, #20
 8002dca:	4858      	ldr	r0, [pc, #352]	; (8002f2c <showCurrentParameters+0x250>)
 8002dcc:	f7fe feaa 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8002dd0:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <showCurrentParameters+0x264>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fbcf 	bl	8000578 <__aeabi_f2d>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4959      	ldr	r1, [pc, #356]	; (8002f44 <showCurrentParameters+0x268>)
 8002de0:	4852      	ldr	r0, [pc, #328]	; (8002f2c <showCurrentParameters+0x250>)
 8002de2:	f00b fbc7 	bl	800e574 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002de6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	2301      	movs	r3, #1
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2300      	movs	r3, #0
 8002df2:	2250      	movs	r2, #80	; 0x50
 8002df4:	2114      	movs	r1, #20
 8002df6:	484d      	ldr	r0, [pc, #308]	; (8002f2c <showCurrentParameters+0x250>)
 8002df8:	f7fe fe94 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8002dfc:	4b52      	ldr	r3, [pc, #328]	; (8002f48 <showCurrentParameters+0x26c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fbb9 	bl	8000578 <__aeabi_f2d>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4950      	ldr	r1, [pc, #320]	; (8002f4c <showCurrentParameters+0x270>)
 8002e0c:	4847      	ldr	r0, [pc, #284]	; (8002f2c <showCurrentParameters+0x250>)
 8002e0e:	f00b fbb1 	bl	800e574 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002e12:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	226e      	movs	r2, #110	; 0x6e
 8002e20:	2114      	movs	r1, #20
 8002e22:	4842      	ldr	r0, [pc, #264]	; (8002f2c <showCurrentParameters+0x250>)
 8002e24:	f7fe fe7e 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: %d", CWaterLvl);
 8002e28:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <showCurrentParameters+0x274>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4949      	ldr	r1, [pc, #292]	; (8002f54 <showCurrentParameters+0x278>)
 8002e30:	483e      	ldr	r0, [pc, #248]	; (8002f2c <showCurrentParameters+0x250>)
 8002e32:	f00b fb9f 	bl	800e574 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002e36:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	228c      	movs	r2, #140	; 0x8c
 8002e44:	2114      	movs	r1, #20
 8002e46:	4839      	ldr	r0, [pc, #228]	; (8002f2c <showCurrentParameters+0x250>)
 8002e48:	f7fe fe6c 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8002e4c:	4b42      	ldr	r3, [pc, #264]	; (8002f58 <showCurrentParameters+0x27c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fb91 	bl	8000578 <__aeabi_f2d>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4940      	ldr	r1, [pc, #256]	; (8002f5c <showCurrentParameters+0x280>)
 8002e5c:	4833      	ldr	r0, [pc, #204]	; (8002f2c <showCurrentParameters+0x250>)
 8002e5e:	f00b fb89 	bl	800e574 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002e62:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	22aa      	movs	r2, #170	; 0xaa
 8002e70:	2114      	movs	r1, #20
 8002e72:	482e      	ldr	r0, [pc, #184]	; (8002f2c <showCurrentParameters+0x250>)
 8002e74:	f7fe fe56 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8002e78:	4839      	ldr	r0, [pc, #228]	; (8002f60 <showCurrentParameters+0x284>)
 8002e7a:	f7fe fc39 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002e7e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	2305      	movs	r3, #5
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2314      	movs	r3, #20
 8002e8a:	225f      	movs	r2, #95	; 0x5f
 8002e8c:	21d8      	movs	r1, #216	; 0xd8
 8002e8e:	20dc      	movs	r0, #220	; 0xdc
 8002e90:	f7fe fbdd 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8002e94:	4933      	ldr	r1, [pc, #204]	; (8002f64 <showCurrentParameters+0x288>)
 8002e96:	4825      	ldr	r0, [pc, #148]	; (8002f2c <showCurrentParameters+0x250>)
 8002e98:	f00b fb6c 	bl	800e574 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002e9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	22da      	movs	r2, #218	; 0xda
 8002eaa:	21df      	movs	r1, #223	; 0xdf
 8002eac:	481f      	ldr	r0, [pc, #124]	; (8002f2c <showCurrentParameters+0x250>)
 8002eae:	f7fe fe39 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002eb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2305      	movs	r3, #5
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2314      	movs	r3, #20
 8002ebe:	2264      	movs	r2, #100	; 0x64
 8002ec0:	21d8      	movs	r1, #216	; 0xd8
 8002ec2:	200a      	movs	r0, #10
 8002ec4:	f7fe fbc3 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 8002ec8:	4927      	ldr	r1, [pc, #156]	; (8002f68 <showCurrentParameters+0x28c>)
 8002eca:	4818      	ldr	r0, [pc, #96]	; (8002f2c <showCurrentParameters+0x250>)
 8002ecc:	f00b fb52 	bl	800e574 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002ed0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2300      	movs	r3, #0
 8002edc:	22da      	movs	r2, #218	; 0xda
 8002ede:	2114      	movs	r1, #20
 8002ee0:	4812      	ldr	r0, [pc, #72]	; (8002f2c <showCurrentParameters+0x250>)
 8002ee2:	f7fe fe1f 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8002ee6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	2305      	movs	r3, #5
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2314      	movs	r3, #20
 8002ef2:	225a      	movs	r2, #90	; 0x5a
 8002ef4:	21d8      	movs	r1, #216	; 0xd8
 8002ef6:	2078      	movs	r0, #120	; 0x78
 8002ef8:	f7fe fba9 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8002efc:	491b      	ldr	r1, [pc, #108]	; (8002f6c <showCurrentParameters+0x290>)
 8002efe:	480b      	ldr	r0, [pc, #44]	; (8002f2c <showCurrentParameters+0x250>)
 8002f00:	f00b fb38 	bl	800e574 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002f04:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	22da      	movs	r2, #218	; 0xda
 8002f12:	2184      	movs	r1, #132	; 0x84
 8002f14:	4805      	ldr	r0, [pc, #20]	; (8002f2c <showCurrentParameters+0x250>)
 8002f16:	f7fe fe05 	bl	8001b24 <EF_PutString>
}
 8002f1a:	bf00      	nop
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	08015220 	.word	0x08015220
 8002f28:	080121d4 	.word	0x080121d4
 8002f2c:	200002c8 	.word	0x200002c8
 8002f30:	080121e4 	.word	0x080121e4
 8002f34:	080121f4 	.word	0x080121f4
 8002f38:	08012204 	.word	0x08012204
 8002f3c:	08012214 	.word	0x08012214
 8002f40:	20000260 	.word	0x20000260
 8002f44:	08012224 	.word	0x08012224
 8002f48:	2000026c 	.word	0x2000026c
 8002f4c:	08012238 	.word	0x08012238
 8002f50:	20000270 	.word	0x20000270
 8002f54:	0801224c 	.word	0x0801224c
 8002f58:	20000268 	.word	0x20000268
 8002f5c:	0801225c 	.word	0x0801225c
 8002f60:	080132a8 	.word	0x080132a8
 8002f64:	08012274 	.word	0x08012274
 8002f68:	08012280 	.word	0x08012280
 8002f6c:	0801228c 	.word	0x0801228c

08002f70 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002f76:	2015      	movs	r0, #21
 8002f78:	f002 ff24 	bl	8005dc4 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002f7c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002f80:	f7fe ffba 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002f84:	485c      	ldr	r0, [pc, #368]	; (80030f8 <showControlPanel+0x188>)
 8002f86:	f7fe fbb3 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8002f8a:	495c      	ldr	r1, [pc, #368]	; (80030fc <showControlPanel+0x18c>)
 8002f8c:	485c      	ldr	r0, [pc, #368]	; (8003100 <showControlPanel+0x190>)
 8002f8e:	f00b faf1 	bl	800e574 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f92:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	231f      	movs	r3, #31
 8002f9e:	220a      	movs	r2, #10
 8002fa0:	2123      	movs	r1, #35	; 0x23
 8002fa2:	4857      	ldr	r0, [pc, #348]	; (8003100 <showControlPanel+0x190>)
 8002fa4:	f7fe fdbe 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002fa8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2329      	movs	r3, #41	; 0x29
 8002fb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fb4:	2129      	movs	r1, #41	; 0x29
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7fe f8ea 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002fbc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	232b      	movs	r3, #43	; 0x2b
 8002fc4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fc8:	212b      	movs	r1, #43	; 0x2b
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7fe f8e0 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8002fd0:	494c      	ldr	r1, [pc, #304]	; (8003104 <showControlPanel+0x194>)
 8002fd2:	484b      	ldr	r0, [pc, #300]	; (8003100 <showControlPanel+0x190>)
 8002fd4:	f00b face 	bl	800e574 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002fd8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	223c      	movs	r2, #60	; 0x3c
 8002fe6:	2114      	movs	r1, #20
 8002fe8:	4845      	ldr	r0, [pc, #276]	; (8003100 <showControlPanel+0x190>)
 8002fea:	f7fe fd9b 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8002fee:	4946      	ldr	r1, [pc, #280]	; (8003108 <showControlPanel+0x198>)
 8002ff0:	4843      	ldr	r0, [pc, #268]	; (8003100 <showControlPanel+0x190>)
 8002ff2:	f00b fabf 	bl	800e574 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002ff6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2300      	movs	r3, #0
 8003002:	225a      	movs	r2, #90	; 0x5a
 8003004:	2114      	movs	r1, #20
 8003006:	483e      	ldr	r0, [pc, #248]	; (8003100 <showControlPanel+0x190>)
 8003008:	f7fe fd8c 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 800300c:	493f      	ldr	r1, [pc, #252]	; (800310c <showControlPanel+0x19c>)
 800300e:	483c      	ldr	r0, [pc, #240]	; (8003100 <showControlPanel+0x190>)
 8003010:	f00b fab0 	bl	800e574 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003014:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2300      	movs	r3, #0
 8003020:	2278      	movs	r2, #120	; 0x78
 8003022:	2114      	movs	r1, #20
 8003024:	4836      	ldr	r0, [pc, #216]	; (8003100 <showControlPanel+0x190>)
 8003026:	f7fe fd7d 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 800302a:	4939      	ldr	r1, [pc, #228]	; (8003110 <showControlPanel+0x1a0>)
 800302c:	4834      	ldr	r0, [pc, #208]	; (8003100 <showControlPanel+0x190>)
 800302e:	f00b faa1 	bl	800e574 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003032:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	2300      	movs	r3, #0
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2300      	movs	r3, #0
 800303e:	2296      	movs	r2, #150	; 0x96
 8003040:	2114      	movs	r1, #20
 8003042:	482f      	ldr	r0, [pc, #188]	; (8003100 <showControlPanel+0x190>)
 8003044:	f7fe fd6e 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003048:	4832      	ldr	r0, [pc, #200]	; (8003114 <showControlPanel+0x1a4>)
 800304a:	f7fe fb51 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800304e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	2305      	movs	r3, #5
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2314      	movs	r3, #20
 800305a:	225f      	movs	r2, #95	; 0x5f
 800305c:	21d8      	movs	r1, #216	; 0xd8
 800305e:	20dc      	movs	r0, #220	; 0xdc
 8003060:	f7fe faf5 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003064:	492c      	ldr	r1, [pc, #176]	; (8003118 <showControlPanel+0x1a8>)
 8003066:	4826      	ldr	r0, [pc, #152]	; (8003100 <showControlPanel+0x190>)
 8003068:	f00b fa84 	bl	800e574 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800306c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	2300      	movs	r3, #0
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	2300      	movs	r3, #0
 8003078:	22da      	movs	r2, #218	; 0xda
 800307a:	21df      	movs	r1, #223	; 0xdf
 800307c:	4820      	ldr	r0, [pc, #128]	; (8003100 <showControlPanel+0x190>)
 800307e:	f7fe fd51 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003082:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	2305      	movs	r3, #5
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2314      	movs	r3, #20
 800308e:	2264      	movs	r2, #100	; 0x64
 8003090:	21d8      	movs	r1, #216	; 0xd8
 8003092:	200a      	movs	r0, #10
 8003094:	f7fe fadb 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8003098:	4920      	ldr	r1, [pc, #128]	; (800311c <showControlPanel+0x1ac>)
 800309a:	4819      	ldr	r0, [pc, #100]	; (8003100 <showControlPanel+0x190>)
 800309c:	f00b fa6a 	bl	800e574 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80030a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	2300      	movs	r3, #0
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2300      	movs	r3, #0
 80030ac:	22da      	movs	r2, #218	; 0xda
 80030ae:	2114      	movs	r1, #20
 80030b0:	4813      	ldr	r0, [pc, #76]	; (8003100 <showControlPanel+0x190>)
 80030b2:	f7fe fd37 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80030b6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	2305      	movs	r3, #5
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2314      	movs	r3, #20
 80030c2:	225a      	movs	r2, #90	; 0x5a
 80030c4:	21d8      	movs	r1, #216	; 0xd8
 80030c6:	2078      	movs	r0, #120	; 0x78
 80030c8:	f7fe fac1 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 80030cc:	4914      	ldr	r1, [pc, #80]	; (8003120 <showControlPanel+0x1b0>)
 80030ce:	480c      	ldr	r0, [pc, #48]	; (8003100 <showControlPanel+0x190>)
 80030d0:	f00b fa50 	bl	800e574 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80030d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	2300      	movs	r3, #0
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2300      	movs	r3, #0
 80030e0:	22da      	movs	r2, #218	; 0xda
 80030e2:	217e      	movs	r1, #126	; 0x7e
 80030e4:	4806      	ldr	r0, [pc, #24]	; (8003100 <showControlPanel+0x190>)
 80030e6:	f7fe fd1d 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80030ea:	4803      	ldr	r0, [pc, #12]	; (80030f8 <showControlPanel+0x188>)
 80030ec:	f7fe fb00 	bl	80016f0 <EF_SetFont>


}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	08015220 	.word	0x08015220
 80030fc:	08012294 	.word	0x08012294
 8003100:	200002c8 	.word	0x200002c8
 8003104:	080122a8 	.word	0x080122a8
 8003108:	080122bc 	.word	0x080122bc
 800310c:	080122d0 	.word	0x080122d0
 8003110:	080122e4 	.word	0x080122e4
 8003114:	080132a8 	.word	0x080132a8
 8003118:	080122f8 	.word	0x080122f8
 800311c:	08012304 	.word	0x08012304
 8003120:	0801230c 	.word	0x0801230c

08003124 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 800312a:	2016      	movs	r0, #22
 800312c:	f002 fe4a 	bl	8005dc4 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003130:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003134:	f7fe fee0 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003138:	485b      	ldr	r0, [pc, #364]	; (80032a8 <showLightsControlPanel+0x184>)
 800313a:	f7fe fad9 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 800313e:	495b      	ldr	r1, [pc, #364]	; (80032ac <showLightsControlPanel+0x188>)
 8003140:	485b      	ldr	r0, [pc, #364]	; (80032b0 <showLightsControlPanel+0x18c>)
 8003142:	f00b fa17 	bl	800e574 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003146:	f24c 6318 	movw	r3, #50712	; 0xc618
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	2300      	movs	r3, #0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003154:	220a      	movs	r2, #10
 8003156:	2146      	movs	r1, #70	; 0x46
 8003158:	4855      	ldr	r0, [pc, #340]	; (80032b0 <showLightsControlPanel+0x18c>)
 800315a:	f7fe fce3 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800315e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2329      	movs	r3, #41	; 0x29
 8003166:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800316a:	2129      	movs	r1, #41	; 0x29
 800316c:	2000      	movs	r0, #0
 800316e:	f7fe f80f 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003172:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	232b      	movs	r3, #43	; 0x2b
 800317a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800317e:	212b      	movs	r1, #43	; 0x2b
 8003180:	2000      	movs	r0, #0
 8003182:	f7fe f805 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 8003186:	494b      	ldr	r1, [pc, #300]	; (80032b4 <showLightsControlPanel+0x190>)
 8003188:	4849      	ldr	r0, [pc, #292]	; (80032b0 <showLightsControlPanel+0x18c>)
 800318a:	f00b f9f3 	bl	800e574 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800318e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	2300      	movs	r3, #0
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	2300      	movs	r3, #0
 800319a:	223c      	movs	r2, #60	; 0x3c
 800319c:	2114      	movs	r1, #20
 800319e:	4844      	ldr	r0, [pc, #272]	; (80032b0 <showLightsControlPanel+0x18c>)
 80031a0:	f7fe fcc0 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80031a4:	4944      	ldr	r1, [pc, #272]	; (80032b8 <showLightsControlPanel+0x194>)
 80031a6:	4842      	ldr	r0, [pc, #264]	; (80032b0 <showLightsControlPanel+0x18c>)
 80031a8:	f00b f9e4 	bl	800e574 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80031ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	2301      	movs	r3, #1
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	225a      	movs	r2, #90	; 0x5a
 80031ba:	2114      	movs	r1, #20
 80031bc:	483c      	ldr	r0, [pc, #240]	; (80032b0 <showLightsControlPanel+0x18c>)
 80031be:	f7fe fcb1 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80031c2:	493e      	ldr	r1, [pc, #248]	; (80032bc <showLightsControlPanel+0x198>)
 80031c4:	483a      	ldr	r0, [pc, #232]	; (80032b0 <showLightsControlPanel+0x18c>)
 80031c6:	f00b f9d5 	bl	800e574 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80031ca:	f24c 6318 	movw	r3, #50712	; 0xc618
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	2300      	movs	r3, #0
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2300      	movs	r3, #0
 80031d6:	2278      	movs	r2, #120	; 0x78
 80031d8:	2114      	movs	r1, #20
 80031da:	4835      	ldr	r0, [pc, #212]	; (80032b0 <showLightsControlPanel+0x18c>)
 80031dc:	f7fe fca2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 80031e0:	4937      	ldr	r1, [pc, #220]	; (80032c0 <showLightsControlPanel+0x19c>)
 80031e2:	4833      	ldr	r0, [pc, #204]	; (80032b0 <showLightsControlPanel+0x18c>)
 80031e4:	f00b f9c6 	bl	800e574 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80031e8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	2300      	movs	r3, #0
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2300      	movs	r3, #0
 80031f4:	2296      	movs	r2, #150	; 0x96
 80031f6:	2114      	movs	r1, #20
 80031f8:	482d      	ldr	r0, [pc, #180]	; (80032b0 <showLightsControlPanel+0x18c>)
 80031fa:	f7fe fc93 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80031fe:	4831      	ldr	r0, [pc, #196]	; (80032c4 <showLightsControlPanel+0x1a0>)
 8003200:	f7fe fa76 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003204:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	2305      	movs	r3, #5
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	2314      	movs	r3, #20
 8003210:	225f      	movs	r2, #95	; 0x5f
 8003212:	21d8      	movs	r1, #216	; 0xd8
 8003214:	20dc      	movs	r0, #220	; 0xdc
 8003216:	f7fe fa1a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 800321a:	492b      	ldr	r1, [pc, #172]	; (80032c8 <showLightsControlPanel+0x1a4>)
 800321c:	4824      	ldr	r0, [pc, #144]	; (80032b0 <showLightsControlPanel+0x18c>)
 800321e:	f00b f9a9 	bl	800e574 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003222:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	2300      	movs	r3, #0
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2300      	movs	r3, #0
 800322e:	22da      	movs	r2, #218	; 0xda
 8003230:	21e6      	movs	r1, #230	; 0xe6
 8003232:	481f      	ldr	r0, [pc, #124]	; (80032b0 <showLightsControlPanel+0x18c>)
 8003234:	f7fe fc76 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003238:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	2305      	movs	r3, #5
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2314      	movs	r3, #20
 8003244:	225a      	movs	r2, #90	; 0x5a
 8003246:	21d8      	movs	r1, #216	; 0xd8
 8003248:	2078      	movs	r0, #120	; 0x78
 800324a:	f7fe fa00 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 800324e:	491f      	ldr	r1, [pc, #124]	; (80032cc <showLightsControlPanel+0x1a8>)
 8003250:	4817      	ldr	r0, [pc, #92]	; (80032b0 <showLightsControlPanel+0x18c>)
 8003252:	f00b f98f 	bl	800e574 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003256:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	2300      	movs	r3, #0
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2300      	movs	r3, #0
 8003262:	22da      	movs	r2, #218	; 0xda
 8003264:	217e      	movs	r1, #126	; 0x7e
 8003266:	4812      	ldr	r0, [pc, #72]	; (80032b0 <showLightsControlPanel+0x18c>)
 8003268:	f7fe fc5c 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800326c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	2305      	movs	r3, #5
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2314      	movs	r3, #20
 8003278:	2264      	movs	r2, #100	; 0x64
 800327a:	21d8      	movs	r1, #216	; 0xd8
 800327c:	200a      	movs	r0, #10
 800327e:	f7fe f9e6 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003282:	4913      	ldr	r1, [pc, #76]	; (80032d0 <showLightsControlPanel+0x1ac>)
 8003284:	480a      	ldr	r0, [pc, #40]	; (80032b0 <showLightsControlPanel+0x18c>)
 8003286:	f00b f975 	bl	800e574 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800328a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	2300      	movs	r3, #0
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2300      	movs	r3, #0
 8003296:	22da      	movs	r2, #218	; 0xda
 8003298:	210d      	movs	r1, #13
 800329a:	4805      	ldr	r0, [pc, #20]	; (80032b0 <showLightsControlPanel+0x18c>)
 800329c:	f7fe fc42 	bl	8001b24 <EF_PutString>


}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	08015220 	.word	0x08015220
 80032ac:	08012318 	.word	0x08012318
 80032b0:	200002c8 	.word	0x200002c8
 80032b4:	08012328 	.word	0x08012328
 80032b8:	08012338 	.word	0x08012338
 80032bc:	08012348 	.word	0x08012348
 80032c0:	08012358 	.word	0x08012358
 80032c4:	080132a8 	.word	0x080132a8
 80032c8:	08012368 	.word	0x08012368
 80032cc:	08012370 	.word	0x08012370
 80032d0:	0801237c 	.word	0x0801237c

080032d4 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80032da:	f24c 6018 	movw	r0, #50712	; 0xc618
 80032de:	f7fe fe0b 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80032e2:	487d      	ldr	r0, [pc, #500]	; (80034d8 <showClockSetPanel+0x204>)
 80032e4:	f7fe fa04 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 80032e8:	f7ff fa48 	bl	800277c <DS3231_GetHour>
 80032ec:	4603      	mov	r3, r0
 80032ee:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 80032f0:	f7ff fa50 	bl	8002794 <DS3231_GetMinute>
 80032f4:	4603      	mov	r3, r0
 80032f6:	71bb      	strb	r3, [r7, #6]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 80032f8:	4978      	ldr	r1, [pc, #480]	; (80034dc <showClockSetPanel+0x208>)
 80032fa:	4879      	ldr	r0, [pc, #484]	; (80034e0 <showClockSetPanel+0x20c>)
 80032fc:	f00b f93a 	bl	800e574 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003300:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	2300      	movs	r3, #0
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800330e:	220a      	movs	r2, #10
 8003310:	212f      	movs	r1, #47	; 0x2f
 8003312:	4873      	ldr	r0, [pc, #460]	; (80034e0 <showClockSetPanel+0x20c>)
 8003314:	f7fe fc06 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003318:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	2329      	movs	r3, #41	; 0x29
 8003320:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003324:	2129      	movs	r1, #41	; 0x29
 8003326:	2000      	movs	r0, #0
 8003328:	f7fd ff32 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800332c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	232b      	movs	r3, #43	; 0x2b
 8003334:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003338:	212b      	movs	r1, #43	; 0x2b
 800333a:	2000      	movs	r0, #0
 800333c:	f7fd ff28 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	461a      	mov	r2, r3
 8003344:	4967      	ldr	r1, [pc, #412]	; (80034e4 <showClockSetPanel+0x210>)
 8003346:	4866      	ldr	r0, [pc, #408]	; (80034e0 <showClockSetPanel+0x20c>)
 8003348:	f00b f914 	bl	800e574 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800334c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	2300      	movs	r3, #0
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2300      	movs	r3, #0
 8003358:	2246      	movs	r2, #70	; 0x46
 800335a:	2114      	movs	r1, #20
 800335c:	4860      	ldr	r0, [pc, #384]	; (80034e0 <showClockSetPanel+0x20c>)
 800335e:	f7fe fbe1 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003362:	79bb      	ldrb	r3, [r7, #6]
 8003364:	461a      	mov	r2, r3
 8003366:	4960      	ldr	r1, [pc, #384]	; (80034e8 <showClockSetPanel+0x214>)
 8003368:	485d      	ldr	r0, [pc, #372]	; (80034e0 <showClockSetPanel+0x20c>)
 800336a:	f00b f903 	bl	800e574 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800336e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	2301      	movs	r3, #1
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	226e      	movs	r2, #110	; 0x6e
 800337c:	2114      	movs	r1, #20
 800337e:	4858      	ldr	r0, [pc, #352]	; (80034e0 <showClockSetPanel+0x20c>)
 8003380:	f7fe fbd0 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003384:	4859      	ldr	r0, [pc, #356]	; (80034ec <showClockSetPanel+0x218>)
 8003386:	f7fe f9b3 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800338a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	2305      	movs	r3, #5
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2315      	movs	r3, #21
 8003396:	221e      	movs	r2, #30
 8003398:	214b      	movs	r1, #75	; 0x4b
 800339a:	20f0      	movs	r0, #240	; 0xf0
 800339c:	f7fe f957 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80033a0:	4953      	ldr	r1, [pc, #332]	; (80034f0 <showClockSetPanel+0x21c>)
 80033a2:	484f      	ldr	r0, [pc, #316]	; (80034e0 <showClockSetPanel+0x20c>)
 80033a4:	f00b f8e6 	bl	800e574 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80033a8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	2300      	movs	r3, #0
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2300      	movs	r3, #0
 80033b4:	224d      	movs	r2, #77	; 0x4d
 80033b6:	21f3      	movs	r1, #243	; 0xf3
 80033b8:	4849      	ldr	r0, [pc, #292]	; (80034e0 <showClockSetPanel+0x20c>)
 80033ba:	f7fe fbb3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80033be:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	2305      	movs	r3, #5
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	2315      	movs	r3, #21
 80033ca:	221e      	movs	r2, #30
 80033cc:	214b      	movs	r1, #75	; 0x4b
 80033ce:	f44f 708c 	mov.w	r0, #280	; 0x118
 80033d2:	f7fe f93c 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 80033d6:	4947      	ldr	r1, [pc, #284]	; (80034f4 <showClockSetPanel+0x220>)
 80033d8:	4841      	ldr	r0, [pc, #260]	; (80034e0 <showClockSetPanel+0x20c>)
 80033da:	f00b f8cb 	bl	800e574 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80033de:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	2300      	movs	r3, #0
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2300      	movs	r3, #0
 80033ea:	224d      	movs	r2, #77	; 0x4d
 80033ec:	f240 111d 	movw	r1, #285	; 0x11d
 80033f0:	483b      	ldr	r0, [pc, #236]	; (80034e0 <showClockSetPanel+0x20c>)
 80033f2:	f7fe fb97 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80033f6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	2305      	movs	r3, #5
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	2315      	movs	r3, #21
 8003402:	221e      	movs	r2, #30
 8003404:	2173      	movs	r1, #115	; 0x73
 8003406:	20f0      	movs	r0, #240	; 0xf0
 8003408:	f7fe f921 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 800340c:	4938      	ldr	r1, [pc, #224]	; (80034f0 <showClockSetPanel+0x21c>)
 800340e:	4834      	ldr	r0, [pc, #208]	; (80034e0 <showClockSetPanel+0x20c>)
 8003410:	f00b f8b0 	bl	800e574 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003414:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	2300      	movs	r3, #0
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2300      	movs	r3, #0
 8003420:	2275      	movs	r2, #117	; 0x75
 8003422:	21f5      	movs	r1, #245	; 0xf5
 8003424:	482e      	ldr	r0, [pc, #184]	; (80034e0 <showClockSetPanel+0x20c>)
 8003426:	f7fe fb7d 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 800342a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	2305      	movs	r3, #5
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2315      	movs	r3, #21
 8003436:	221e      	movs	r2, #30
 8003438:	2173      	movs	r1, #115	; 0x73
 800343a:	f44f 708c 	mov.w	r0, #280	; 0x118
 800343e:	f7fe f906 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003442:	492d      	ldr	r1, [pc, #180]	; (80034f8 <showClockSetPanel+0x224>)
 8003444:	4826      	ldr	r0, [pc, #152]	; (80034e0 <showClockSetPanel+0x20c>)
 8003446:	f00b f895 	bl	800e574 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 800344a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	2300      	movs	r3, #0
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	2275      	movs	r2, #117	; 0x75
 8003458:	f240 111b 	movw	r1, #283	; 0x11b
 800345c:	4820      	ldr	r0, [pc, #128]	; (80034e0 <showClockSetPanel+0x20c>)
 800345e:	f7fe fb61 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003462:	4822      	ldr	r0, [pc, #136]	; (80034ec <showClockSetPanel+0x218>)
 8003464:	f7fe f944 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003468:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	2305      	movs	r3, #5
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2314      	movs	r3, #20
 8003474:	225f      	movs	r2, #95	; 0x5f
 8003476:	21d8      	movs	r1, #216	; 0xd8
 8003478:	20dc      	movs	r0, #220	; 0xdc
 800347a:	f7fe f8e8 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 800347e:	491f      	ldr	r1, [pc, #124]	; (80034fc <showClockSetPanel+0x228>)
 8003480:	4817      	ldr	r0, [pc, #92]	; (80034e0 <showClockSetPanel+0x20c>)
 8003482:	f00b f877 	bl	800e574 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003486:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	2300      	movs	r3, #0
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2300      	movs	r3, #0
 8003492:	22da      	movs	r2, #218	; 0xda
 8003494:	21e6      	movs	r1, #230	; 0xe6
 8003496:	4812      	ldr	r0, [pc, #72]	; (80034e0 <showClockSetPanel+0x20c>)
 8003498:	f7fe fb44 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800349c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2305      	movs	r3, #5
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2314      	movs	r3, #20
 80034a8:	2264      	movs	r2, #100	; 0x64
 80034aa:	21d8      	movs	r1, #216	; 0xd8
 80034ac:	200a      	movs	r0, #10
 80034ae:	f7fe f8ce 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80034b2:	4913      	ldr	r1, [pc, #76]	; (8003500 <showClockSetPanel+0x22c>)
 80034b4:	480a      	ldr	r0, [pc, #40]	; (80034e0 <showClockSetPanel+0x20c>)
 80034b6:	f00b f85d 	bl	800e574 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80034ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	2300      	movs	r3, #0
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	2300      	movs	r3, #0
 80034c6:	22da      	movs	r2, #218	; 0xda
 80034c8:	210d      	movs	r1, #13
 80034ca:	4805      	ldr	r0, [pc, #20]	; (80034e0 <showClockSetPanel+0x20c>)
 80034cc:	f7fe fb2a 	bl	8001b24 <EF_PutString>
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	08015220 	.word	0x08015220
 80034dc:	08012388 	.word	0x08012388
 80034e0:	200002c8 	.word	0x200002c8
 80034e4:	08012398 	.word	0x08012398
 80034e8:	080123a4 	.word	0x080123a4
 80034ec:	080132a8 	.word	0x080132a8
 80034f0:	080123b4 	.word	0x080123b4
 80034f4:	080123b8 	.word	0x080123b8
 80034f8:	080123bc 	.word	0x080123bc
 80034fc:	080123c0 	.word	0x080123c0
 8003500:	080123c8 	.word	0x080123c8

08003504 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800350a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800350e:	f7fe fcf3 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003512:	487a      	ldr	r0, [pc, #488]	; (80036fc <showPreparedActivitiesPanel+0x1f8>)
 8003514:	f7fe f8ec 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003518:	4979      	ldr	r1, [pc, #484]	; (8003700 <showPreparedActivitiesPanel+0x1fc>)
 800351a:	487a      	ldr	r0, [pc, #488]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 800351c:	f00b f82a 	bl	800e574 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003520:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	231f      	movs	r3, #31
 800352c:	220a      	movs	r2, #10
 800352e:	212f      	movs	r1, #47	; 0x2f
 8003530:	4874      	ldr	r0, [pc, #464]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 8003532:	f7fe faf7 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003536:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2329      	movs	r3, #41	; 0x29
 800353e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003542:	2129      	movs	r1, #41	; 0x29
 8003544:	2000      	movs	r0, #0
 8003546:	f7fd fe23 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800354a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	232b      	movs	r3, #43	; 0x2b
 8003552:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003556:	212b      	movs	r1, #43	; 0x2b
 8003558:	2000      	movs	r0, #0
 800355a:	f7fd fe19 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800355e:	486a      	ldr	r0, [pc, #424]	; (8003708 <showPreparedActivitiesPanel+0x204>)
 8003560:	f7fe f8c6 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003564:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2305      	movs	r3, #5
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2314      	movs	r3, #20
 8003570:	2264      	movs	r2, #100	; 0x64
 8003572:	21d8      	movs	r1, #216	; 0xd8
 8003574:	200a      	movs	r0, #10
 8003576:	f7fe f86a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800357a:	4964      	ldr	r1, [pc, #400]	; (800370c <showPreparedActivitiesPanel+0x208>)
 800357c:	4861      	ldr	r0, [pc, #388]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 800357e:	f00a fff9 	bl	800e574 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003582:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	2300      	movs	r3, #0
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	22da      	movs	r2, #218	; 0xda
 8003590:	210d      	movs	r1, #13
 8003592:	485c      	ldr	r0, [pc, #368]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 8003594:	f7fe fac6 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003598:	4b5d      	ldr	r3, [pc, #372]	; (8003710 <showPreparedActivitiesPanel+0x20c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d029      	beq.n	80035f4 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80035a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	230a      	movs	r3, #10
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2328      	movs	r3, #40	; 0x28
 80035ac:	2278      	movs	r2, #120	; 0x78
 80035ae:	213c      	movs	r1, #60	; 0x3c
 80035b0:	2064      	movs	r0, #100	; 0x64
 80035b2:	f7fe f84c 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 80035b6:	4957      	ldr	r1, [pc, #348]	; (8003714 <showPreparedActivitiesPanel+0x210>)
 80035b8:	4852      	ldr	r0, [pc, #328]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 80035ba:	f00a ffdb 	bl	800e574 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80035be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	2300      	movs	r3, #0
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2300      	movs	r3, #0
 80035ca:	223e      	movs	r2, #62	; 0x3e
 80035cc:	2177      	movs	r1, #119	; 0x77
 80035ce:	484d      	ldr	r0, [pc, #308]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 80035d0:	f7fe faa8 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 80035d4:	4950      	ldr	r1, [pc, #320]	; (8003718 <showPreparedActivitiesPanel+0x214>)
 80035d6:	484b      	ldr	r0, [pc, #300]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 80035d8:	f00a ffcc 	bl	800e574 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80035dc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	2250      	movs	r2, #80	; 0x50
 80035ea:	2193      	movs	r1, #147	; 0x93
 80035ec:	4845      	ldr	r0, [pc, #276]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 80035ee:	f7fe fa99 	bl	8001b24 <EF_PutString>
 80035f2:	e028      	b.n	8003646 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80035f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	230a      	movs	r3, #10
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2328      	movs	r3, #40	; 0x28
 8003600:	2278      	movs	r2, #120	; 0x78
 8003602:	213c      	movs	r1, #60	; 0x3c
 8003604:	2064      	movs	r0, #100	; 0x64
 8003606:	f7fe f822 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 800360a:	4942      	ldr	r1, [pc, #264]	; (8003714 <showPreparedActivitiesPanel+0x210>)
 800360c:	483d      	ldr	r0, [pc, #244]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 800360e:	f00a ffb1 	bl	800e574 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003612:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2300      	movs	r3, #0
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2300      	movs	r3, #0
 800361e:	223e      	movs	r2, #62	; 0x3e
 8003620:	2177      	movs	r1, #119	; 0x77
 8003622:	4838      	ldr	r0, [pc, #224]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 8003624:	f7fe fa7e 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003628:	493c      	ldr	r1, [pc, #240]	; (800371c <showPreparedActivitiesPanel+0x218>)
 800362a:	4836      	ldr	r0, [pc, #216]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 800362c:	f00a ffa2 	bl	800e574 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003630:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	2300      	movs	r3, #0
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2300      	movs	r3, #0
 800363c:	2250      	movs	r2, #80	; 0x50
 800363e:	2193      	movs	r1, #147	; 0x93
 8003640:	4830      	ldr	r0, [pc, #192]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 8003642:	f7fe fa6f 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003646:	4b32      	ldr	r3, [pc, #200]	; (8003710 <showPreparedActivitiesPanel+0x20c>)
 8003648:	785b      	ldrb	r3, [r3, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d029      	beq.n	80036a2 <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800364e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	230a      	movs	r3, #10
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2328      	movs	r3, #40	; 0x28
 800365a:	2278      	movs	r2, #120	; 0x78
 800365c:	2178      	movs	r1, #120	; 0x78
 800365e:	2064      	movs	r0, #100	; 0x64
 8003660:	f7fd fff5 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003664:	492e      	ldr	r1, [pc, #184]	; (8003720 <showPreparedActivitiesPanel+0x21c>)
 8003666:	4827      	ldr	r0, [pc, #156]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 8003668:	f00a ff84 	bl	800e574 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800366c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	2300      	movs	r3, #0
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2300      	movs	r3, #0
 8003678:	227a      	movs	r2, #122	; 0x7a
 800367a:	2169      	movs	r1, #105	; 0x69
 800367c:	4821      	ldr	r0, [pc, #132]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 800367e:	f7fe fa51 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003682:	4925      	ldr	r1, [pc, #148]	; (8003718 <showPreparedActivitiesPanel+0x214>)
 8003684:	481f      	ldr	r0, [pc, #124]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 8003686:	f00a ff75 	bl	800e574 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800368a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2300      	movs	r3, #0
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	228c      	movs	r2, #140	; 0x8c
 8003698:	2193      	movs	r1, #147	; 0x93
 800369a:	481a      	ldr	r0, [pc, #104]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 800369c:	f7fe fa42 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 80036a0:	e028      	b.n	80036f4 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80036a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	230a      	movs	r3, #10
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2328      	movs	r3, #40	; 0x28
 80036ae:	2278      	movs	r2, #120	; 0x78
 80036b0:	2178      	movs	r1, #120	; 0x78
 80036b2:	2064      	movs	r0, #100	; 0x64
 80036b4:	f7fd ffcb 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 80036b8:	4919      	ldr	r1, [pc, #100]	; (8003720 <showPreparedActivitiesPanel+0x21c>)
 80036ba:	4812      	ldr	r0, [pc, #72]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 80036bc:	f00a ff5a 	bl	800e574 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80036c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	2300      	movs	r3, #0
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2300      	movs	r3, #0
 80036cc:	227a      	movs	r2, #122	; 0x7a
 80036ce:	2169      	movs	r1, #105	; 0x69
 80036d0:	480c      	ldr	r0, [pc, #48]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 80036d2:	f7fe fa27 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80036d6:	4911      	ldr	r1, [pc, #68]	; (800371c <showPreparedActivitiesPanel+0x218>)
 80036d8:	480a      	ldr	r0, [pc, #40]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 80036da:	f00a ff4b 	bl	800e574 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80036de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2300      	movs	r3, #0
 80036ea:	228c      	movs	r2, #140	; 0x8c
 80036ec:	2193      	movs	r1, #147	; 0x93
 80036ee:	4805      	ldr	r0, [pc, #20]	; (8003704 <showPreparedActivitiesPanel+0x200>)
 80036f0:	f7fe fa18 	bl	8001b24 <EF_PutString>
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	08015220 	.word	0x08015220
 8003700:	080123d0 	.word	0x080123d0
 8003704:	200002c8 	.word	0x200002c8
 8003708:	080132a8 	.word	0x080132a8
 800370c:	080123c8 	.word	0x080123c8
 8003710:	2000027c 	.word	0x2000027c
 8003714:	080123e0 	.word	0x080123e0
 8003718:	080123ec 	.word	0x080123ec
 800371c:	080123f0 	.word	0x080123f0
 8003720:	080123f4 	.word	0x080123f4

08003724 <showWSLedPanel>:
//
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showWSLedPanel()
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800372a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800372e:	f7fe fbe3 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003732:	48c7      	ldr	r0, [pc, #796]	; (8003a50 <showWSLedPanel+0x32c>)
 8003734:	f7fd ffdc 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003738:	49c6      	ldr	r1, [pc, #792]	; (8003a54 <showWSLedPanel+0x330>)
 800373a:	48c7      	ldr	r0, [pc, #796]	; (8003a58 <showWSLedPanel+0x334>)
 800373c:	f00a ff1a 	bl	800e574 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003740:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	2300      	movs	r3, #0
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	231f      	movs	r3, #31
 800374c:	220a      	movs	r2, #10
 800374e:	2146      	movs	r1, #70	; 0x46
 8003750:	48c1      	ldr	r0, [pc, #772]	; (8003a58 <showWSLedPanel+0x334>)
 8003752:	f7fe f9e7 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003756:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2329      	movs	r3, #41	; 0x29
 800375e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003762:	2129      	movs	r1, #41	; 0x29
 8003764:	2000      	movs	r0, #0
 8003766:	f7fd fd13 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800376a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	232b      	movs	r3, #43	; 0x2b
 8003772:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003776:	212b      	movs	r1, #43	; 0x2b
 8003778:	2000      	movs	r0, #0
 800377a:	f7fd fd09 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 800377e:	4bb7      	ldr	r3, [pc, #732]	; (8003a5c <showWSLedPanel+0x338>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	49b6      	ldr	r1, [pc, #728]	; (8003a60 <showWSLedPanel+0x33c>)
 8003786:	48b4      	ldr	r0, [pc, #720]	; (8003a58 <showWSLedPanel+0x334>)
 8003788:	f00a fef4 	bl	800e574 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800378c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	2300      	movs	r3, #0
 8003798:	223c      	movs	r2, #60	; 0x3c
 800379a:	2114      	movs	r1, #20
 800379c:	48ae      	ldr	r0, [pc, #696]	; (8003a58 <showWSLedPanel+0x334>)
 800379e:	f7fe f9c1 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 80037a2:	49b0      	ldr	r1, [pc, #704]	; (8003a64 <showWSLedPanel+0x340>)
 80037a4:	48ac      	ldr	r0, [pc, #688]	; (8003a58 <showWSLedPanel+0x334>)
 80037a6:	f00a fee5 	bl	800e574 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	2300      	movs	r3, #0
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2300      	movs	r3, #0
 80037b6:	225a      	movs	r2, #90	; 0x5a
 80037b8:	2114      	movs	r1, #20
 80037ba:	48a7      	ldr	r0, [pc, #668]	; (8003a58 <showWSLedPanel+0x334>)
 80037bc:	f7fe f9b2 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 80037c0:	49a9      	ldr	r1, [pc, #676]	; (8003a68 <showWSLedPanel+0x344>)
 80037c2:	48a5      	ldr	r0, [pc, #660]	; (8003a58 <showWSLedPanel+0x334>)
 80037c4:	f00a fed6 	bl	800e574 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	2300      	movs	r3, #0
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	2300      	movs	r3, #0
 80037d4:	2278      	movs	r2, #120	; 0x78
 80037d6:	2114      	movs	r1, #20
 80037d8:	489f      	ldr	r0, [pc, #636]	; (8003a58 <showWSLedPanel+0x334>)
 80037da:	f7fe f9a3 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 80037de:	48a3      	ldr	r0, [pc, #652]	; (8003a6c <showWSLedPanel+0x348>)
 80037e0:	f7fd ff86 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80037e4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	2305      	movs	r3, #5
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	2315      	movs	r3, #21
 80037f0:	221e      	movs	r2, #30
 80037f2:	2141      	movs	r1, #65	; 0x41
 80037f4:	20d9      	movs	r0, #217	; 0xd9
 80037f6:	f7fd ff2a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80037fa:	499d      	ldr	r1, [pc, #628]	; (8003a70 <showWSLedPanel+0x34c>)
 80037fc:	4896      	ldr	r0, [pc, #600]	; (8003a58 <showWSLedPanel+0x334>)
 80037fe:	f00a feb9 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003802:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	2300      	movs	r3, #0
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2300      	movs	r3, #0
 800380e:	2243      	movs	r2, #67	; 0x43
 8003810:	21df      	movs	r1, #223	; 0xdf
 8003812:	4891      	ldr	r0, [pc, #580]	; (8003a58 <showWSLedPanel+0x334>)
 8003814:	f7fe f986 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003818:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	2305      	movs	r3, #5
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2315      	movs	r3, #21
 8003824:	221e      	movs	r2, #30
 8003826:	2141      	movs	r1, #65	; 0x41
 8003828:	20fc      	movs	r0, #252	; 0xfc
 800382a:	f7fd ff10 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 800382e:	4991      	ldr	r1, [pc, #580]	; (8003a74 <showWSLedPanel+0x350>)
 8003830:	4889      	ldr	r0, [pc, #548]	; (8003a58 <showWSLedPanel+0x334>)
 8003832:	f00a fe9f 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003836:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	2300      	movs	r3, #0
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2300      	movs	r3, #0
 8003842:	2243      	movs	r2, #67	; 0x43
 8003844:	f240 1101 	movw	r1, #257	; 0x101
 8003848:	4883      	ldr	r0, [pc, #524]	; (8003a58 <showWSLedPanel+0x334>)
 800384a:	f7fe f96b 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800384e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	2305      	movs	r3, #5
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2315      	movs	r3, #21
 800385a:	221e      	movs	r2, #30
 800385c:	2141      	movs	r1, #65	; 0x41
 800385e:	f240 101f 	movw	r0, #287	; 0x11f
 8003862:	f7fd fef4 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8003866:	4984      	ldr	r1, [pc, #528]	; (8003a78 <showWSLedPanel+0x354>)
 8003868:	487b      	ldr	r0, [pc, #492]	; (8003a58 <showWSLedPanel+0x334>)
 800386a:	f00a fe83 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800386e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	2300      	movs	r3, #0
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2300      	movs	r3, #0
 800387a:	2243      	movs	r2, #67	; 0x43
 800387c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003880:	4875      	ldr	r0, [pc, #468]	; (8003a58 <showWSLedPanel+0x334>)
 8003882:	f7fe f94f 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	2305      	movs	r3, #5
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2315      	movs	r3, #21
 8003892:	2228      	movs	r2, #40	; 0x28
 8003894:	215f      	movs	r1, #95	; 0x5f
 8003896:	2096      	movs	r0, #150	; 0x96
 8003898:	f7fd fed9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 800389c:	4977      	ldr	r1, [pc, #476]	; (8003a7c <showWSLedPanel+0x358>)
 800389e:	486e      	ldr	r0, [pc, #440]	; (8003a58 <showWSLedPanel+0x334>)
 80038a0:	f00a fe68 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80038a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	2300      	movs	r3, #0
 80038b0:	2261      	movs	r2, #97	; 0x61
 80038b2:	219b      	movs	r1, #155	; 0x9b
 80038b4:	4868      	ldr	r0, [pc, #416]	; (8003a58 <showWSLedPanel+0x334>)
 80038b6:	f7fe f935 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80038ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	2305      	movs	r3, #5
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2315      	movs	r3, #21
 80038c6:	2228      	movs	r2, #40	; 0x28
 80038c8:	215f      	movs	r1, #95	; 0x5f
 80038ca:	20ca      	movs	r0, #202	; 0xca
 80038cc:	f7fd febf 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 80038d0:	496b      	ldr	r1, [pc, #428]	; (8003a80 <showWSLedPanel+0x35c>)
 80038d2:	4861      	ldr	r0, [pc, #388]	; (8003a58 <showWSLedPanel+0x334>)
 80038d4:	f00a fe4e 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80038d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	2300      	movs	r3, #0
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	2261      	movs	r2, #97	; 0x61
 80038e6:	21d2      	movs	r1, #210	; 0xd2
 80038e8:	485b      	ldr	r0, [pc, #364]	; (8003a58 <showWSLedPanel+0x334>)
 80038ea:	f7fe f91b 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80038ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	2305      	movs	r3, #5
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	2315      	movs	r3, #21
 80038fa:	2228      	movs	r2, #40	; 0x28
 80038fc:	215f      	movs	r1, #95	; 0x5f
 80038fe:	20fe      	movs	r0, #254	; 0xfe
 8003900:	f7fd fea5 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003904:	495f      	ldr	r1, [pc, #380]	; (8003a84 <showWSLedPanel+0x360>)
 8003906:	4854      	ldr	r0, [pc, #336]	; (8003a58 <showWSLedPanel+0x334>)
 8003908:	f00a fe34 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 800390c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	2300      	movs	r3, #0
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2300      	movs	r3, #0
 8003918:	2261      	movs	r2, #97	; 0x61
 800391a:	f44f 7183 	mov.w	r1, #262	; 0x106
 800391e:	484e      	ldr	r0, [pc, #312]	; (8003a58 <showWSLedPanel+0x334>)
 8003920:	f7fe f900 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003924:	231f      	movs	r3, #31
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	2305      	movs	r3, #5
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2315      	movs	r3, #21
 800392e:	2228      	movs	r2, #40	; 0x28
 8003930:	217d      	movs	r1, #125	; 0x7d
 8003932:	2096      	movs	r0, #150	; 0x96
 8003934:	f7fd fe8b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8003938:	4950      	ldr	r1, [pc, #320]	; (8003a7c <showWSLedPanel+0x358>)
 800393a:	4847      	ldr	r0, [pc, #284]	; (8003a58 <showWSLedPanel+0x334>)
 800393c:	f00a fe1a 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003940:	231f      	movs	r3, #31
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	2300      	movs	r3, #0
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2300      	movs	r3, #0
 800394a:	227f      	movs	r2, #127	; 0x7f
 800394c:	219b      	movs	r1, #155	; 0x9b
 800394e:	4842      	ldr	r0, [pc, #264]	; (8003a58 <showWSLedPanel+0x334>)
 8003950:	f7fe f8e8 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003954:	231f      	movs	r3, #31
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	2305      	movs	r3, #5
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	2315      	movs	r3, #21
 800395e:	2228      	movs	r2, #40	; 0x28
 8003960:	217d      	movs	r1, #125	; 0x7d
 8003962:	20ca      	movs	r0, #202	; 0xca
 8003964:	f7fd fe73 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8003968:	4945      	ldr	r1, [pc, #276]	; (8003a80 <showWSLedPanel+0x35c>)
 800396a:	483b      	ldr	r0, [pc, #236]	; (8003a58 <showWSLedPanel+0x334>)
 800396c:	f00a fe02 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003970:	231f      	movs	r3, #31
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	227f      	movs	r2, #127	; 0x7f
 800397c:	21d2      	movs	r1, #210	; 0xd2
 800397e:	4836      	ldr	r0, [pc, #216]	; (8003a58 <showWSLedPanel+0x334>)
 8003980:	f7fe f8d0 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003984:	231f      	movs	r3, #31
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	2305      	movs	r3, #5
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2315      	movs	r3, #21
 800398e:	2228      	movs	r2, #40	; 0x28
 8003990:	217d      	movs	r1, #125	; 0x7d
 8003992:	20fe      	movs	r0, #254	; 0xfe
 8003994:	f7fd fe5b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003998:	493a      	ldr	r1, [pc, #232]	; (8003a84 <showWSLedPanel+0x360>)
 800399a:	482f      	ldr	r0, [pc, #188]	; (8003a58 <showWSLedPanel+0x334>)
 800399c:	f00a fdea 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80039a0:	231f      	movs	r3, #31
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	2300      	movs	r3, #0
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	227f      	movs	r2, #127	; 0x7f
 80039ac:	f44f 7183 	mov.w	r1, #262	; 0x106
 80039b0:	4829      	ldr	r0, [pc, #164]	; (8003a58 <showWSLedPanel+0x334>)
 80039b2:	f7fe f8b7 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 80039b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	2305      	movs	r3, #5
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2315      	movs	r3, #21
 80039c2:	2250      	movs	r2, #80	; 0x50
 80039c4:	219c      	movs	r1, #156	; 0x9c
 80039c6:	2014      	movs	r0, #20
 80039c8:	f7fd fe41 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 80039cc:	492e      	ldr	r1, [pc, #184]	; (8003a88 <showWSLedPanel+0x364>)
 80039ce:	4822      	ldr	r0, [pc, #136]	; (8003a58 <showWSLedPanel+0x334>)
 80039d0:	f00a fdd0 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 80039d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	2300      	movs	r3, #0
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	229e      	movs	r2, #158	; 0x9e
 80039e2:	211c      	movs	r1, #28
 80039e4:	481c      	ldr	r0, [pc, #112]	; (8003a58 <showWSLedPanel+0x334>)
 80039e6:	f7fe f89d 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80039ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	2305      	movs	r3, #5
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2315      	movs	r3, #21
 80039f6:	2250      	movs	r2, #80	; 0x50
 80039f8:	219c      	movs	r1, #156	; 0x9c
 80039fa:	2078      	movs	r0, #120	; 0x78
 80039fc:	f7fd fe27 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 8003a00:	4922      	ldr	r1, [pc, #136]	; (8003a8c <showWSLedPanel+0x368>)
 8003a02:	4815      	ldr	r0, [pc, #84]	; (8003a58 <showWSLedPanel+0x334>)
 8003a04:	f00a fdb6 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003a08:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	229e      	movs	r2, #158	; 0x9e
 8003a16:	2187      	movs	r1, #135	; 0x87
 8003a18:	480f      	ldr	r0, [pc, #60]	; (8003a58 <showWSLedPanel+0x334>)
 8003a1a:	f7fe f883 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 8003a1e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	2305      	movs	r3, #5
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	2315      	movs	r3, #21
 8003a2a:	2250      	movs	r2, #80	; 0x50
 8003a2c:	219c      	movs	r1, #156	; 0x9c
 8003a2e:	20dc      	movs	r0, #220	; 0xdc
 8003a30:	f7fd fe0d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 8003a34:	4916      	ldr	r1, [pc, #88]	; (8003a90 <showWSLedPanel+0x36c>)
 8003a36:	4808      	ldr	r0, [pc, #32]	; (8003a58 <showWSLedPanel+0x334>)
 8003a38:	f00a fd9c 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 8003a3c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	229e      	movs	r2, #158	; 0x9e
 8003a4a:	21e9      	movs	r1, #233	; 0xe9
 8003a4c:	e022      	b.n	8003a94 <showWSLedPanel+0x370>
 8003a4e:	bf00      	nop
 8003a50:	08015220 	.word	0x08015220
 8003a54:	08012400 	.word	0x08012400
 8003a58:	200002c8 	.word	0x200002c8
 8003a5c:	20000032 	.word	0x20000032
 8003a60:	0801240c 	.word	0x0801240c
 8003a64:	0801241c 	.word	0x0801241c
 8003a68:	08012424 	.word	0x08012424
 8003a6c:	080132a8 	.word	0x080132a8
 8003a70:	080123b4 	.word	0x080123b4
 8003a74:	080123bc 	.word	0x080123bc
 8003a78:	0801242c 	.word	0x0801242c
 8003a7c:	08012430 	.word	0x08012430
 8003a80:	08012434 	.word	0x08012434
 8003a84:	08012438 	.word	0x08012438
 8003a88:	0801243c 	.word	0x0801243c
 8003a8c:	080123f0 	.word	0x080123f0
 8003a90:	08012444 	.word	0x08012444
 8003a94:	482b      	ldr	r0, [pc, #172]	; (8003b44 <showWSLedPanel+0x420>)
 8003a96:	f7fe f845 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8003a9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	2305      	movs	r3, #5
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	2315      	movs	r3, #21
 8003aa6:	2250      	movs	r2, #80	; 0x50
 8003aa8:	21bb      	movs	r1, #187	; 0xbb
 8003aaa:	2046      	movs	r0, #70	; 0x46
 8003aac:	f7fd fdcf 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8003ab0:	4925      	ldr	r1, [pc, #148]	; (8003b48 <showWSLedPanel+0x424>)
 8003ab2:	4824      	ldr	r0, [pc, #144]	; (8003b44 <showWSLedPanel+0x420>)
 8003ab4:	f00a fd5e 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8003ab8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	22bd      	movs	r2, #189	; 0xbd
 8003ac6:	214e      	movs	r1, #78	; 0x4e
 8003ac8:	481e      	ldr	r0, [pc, #120]	; (8003b44 <showWSLedPanel+0x420>)
 8003aca:	f7fe f82b 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8003ace:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	2305      	movs	r3, #5
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	2315      	movs	r3, #21
 8003ada:	2250      	movs	r2, #80	; 0x50
 8003adc:	21bb      	movs	r1, #187	; 0xbb
 8003ade:	20aa      	movs	r0, #170	; 0xaa
 8003ae0:	f7fd fdb5 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8003ae4:	4919      	ldr	r1, [pc, #100]	; (8003b4c <showWSLedPanel+0x428>)
 8003ae6:	4817      	ldr	r0, [pc, #92]	; (8003b44 <showWSLedPanel+0x420>)
 8003ae8:	f00a fd44 	bl	800e574 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8003aec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	2300      	movs	r3, #0
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2300      	movs	r3, #0
 8003af8:	22bd      	movs	r2, #189	; 0xbd
 8003afa:	21b5      	movs	r1, #181	; 0xb5
 8003afc:	4811      	ldr	r0, [pc, #68]	; (8003b44 <showWSLedPanel+0x420>)
 8003afe:	f7fe f811 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003b02:	4813      	ldr	r0, [pc, #76]	; (8003b50 <showWSLedPanel+0x42c>)
 8003b04:	f7fd fdf4 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003b08:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	2305      	movs	r3, #5
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	2314      	movs	r3, #20
 8003b14:	2264      	movs	r2, #100	; 0x64
 8003b16:	21d8      	movs	r1, #216	; 0xd8
 8003b18:	200a      	movs	r0, #10
 8003b1a:	f7fd fd98 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003b1e:	490d      	ldr	r1, [pc, #52]	; (8003b54 <showWSLedPanel+0x430>)
 8003b20:	4808      	ldr	r0, [pc, #32]	; (8003b44 <showWSLedPanel+0x420>)
 8003b22:	f00a fd27 	bl	800e574 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b26:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2300      	movs	r3, #0
 8003b32:	22da      	movs	r2, #218	; 0xda
 8003b34:	210d      	movs	r1, #13
 8003b36:	4803      	ldr	r0, [pc, #12]	; (8003b44 <showWSLedPanel+0x420>)
 8003b38:	f7fd fff4 	bl	8001b24 <EF_PutString>


}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200002c8 	.word	0x200002c8
 8003b48:	0801244c 	.word	0x0801244c
 8003b4c:	08012454 	.word	0x08012454
 8003b50:	080132a8 	.word	0x080132a8
 8003b54:	080123c8 	.word	0x080123c8

08003b58 <ChangeHourOnScreen>:
//
// Change displayed time, if is other than current time
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ChangeHourOnScreen()
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8003b5e:	f7fe fe0d 	bl	800277c <DS3231_GetHour>
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8003b66:	f7fe fe15 	bl	8002794 <DS3231_GetMinute>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003b6e:	482a      	ldr	r0, [pc, #168]	; (8003c18 <ChangeHourOnScreen+0xc0>)
 8003b70:	f7fd fdbe 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8003b74:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <ChangeHourOnScreen+0xc4>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	79fa      	ldrb	r2, [r7, #7]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d021      	beq.n	8003bc2 <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8003b7e:	4b28      	ldr	r3, [pc, #160]	; (8003c20 <ChangeHourOnScreen+0xc8>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d11d      	bne.n	8003bc2 <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	2b09      	cmp	r3, #9
 8003b8a:	d806      	bhi.n	8003b9a <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4924      	ldr	r1, [pc, #144]	; (8003c24 <ChangeHourOnScreen+0xcc>)
 8003b92:	4825      	ldr	r0, [pc, #148]	; (8003c28 <ChangeHourOnScreen+0xd0>)
 8003b94:	f00a fcee 	bl	800e574 <siprintf>
 8003b98:	e005      	b.n	8003ba6 <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4923      	ldr	r1, [pc, #140]	; (8003c2c <ChangeHourOnScreen+0xd4>)
 8003ba0:	4821      	ldr	r0, [pc, #132]	; (8003c28 <ChangeHourOnScreen+0xd0>)
 8003ba2:	f00a fce7 	bl	800e574 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003ba6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	2301      	movs	r3, #1
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2232      	movs	r2, #50	; 0x32
 8003bb4:	2161      	movs	r1, #97	; 0x61
 8003bb6:	481c      	ldr	r0, [pc, #112]	; (8003c28 <ChangeHourOnScreen+0xd0>)
 8003bb8:	f7fd ffb4 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8003bbc:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <ChangeHourOnScreen+0xc4>)
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <ChangeHourOnScreen+0xd8>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	79ba      	ldrb	r2, [r7, #6]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d021      	beq.n	8003c10 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <ChangeHourOnScreen+0xc8>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d11d      	bne.n	8003c10 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8003bd4:	79bb      	ldrb	r3, [r7, #6]
 8003bd6:	2b09      	cmp	r3, #9
 8003bd8:	d806      	bhi.n	8003be8 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8003bda:	79bb      	ldrb	r3, [r7, #6]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4915      	ldr	r1, [pc, #84]	; (8003c34 <ChangeHourOnScreen+0xdc>)
 8003be0:	4811      	ldr	r0, [pc, #68]	; (8003c28 <ChangeHourOnScreen+0xd0>)
 8003be2:	f00a fcc7 	bl	800e574 <siprintf>
 8003be6:	e005      	b.n	8003bf4 <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8003be8:	79bb      	ldrb	r3, [r7, #6]
 8003bea:	461a      	mov	r2, r3
 8003bec:	4912      	ldr	r1, [pc, #72]	; (8003c38 <ChangeHourOnScreen+0xe0>)
 8003bee:	480e      	ldr	r0, [pc, #56]	; (8003c28 <ChangeHourOnScreen+0xd0>)
 8003bf0:	f00a fcc0 	bl	800e574 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003bf4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2232      	movs	r2, #50	; 0x32
 8003c02:	2196      	movs	r1, #150	; 0x96
 8003c04:	4808      	ldr	r0, [pc, #32]	; (8003c28 <ChangeHourOnScreen+0xd0>)
 8003c06:	f7fd ff8d 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <ChangeHourOnScreen+0xd8>)
 8003c0c:	79bb      	ldrb	r3, [r7, #6]
 8003c0e:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	08015220 	.word	0x08015220
 8003c1c:	2000024c 	.word	0x2000024c
 8003c20:	2000025c 	.word	0x2000025c
 8003c24:	0801245c 	.word	0x0801245c
 8003c28:	200002c8 	.word	0x200002c8
 8003c2c:	08012464 	.word	0x08012464
 8003c30:	2000024d 	.word	0x2000024d
 8003c34:	08012468 	.word	0x08012468
 8003c38:	08012470 	.word	0x08012470

08003c3c <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <predefinedActivityCzyszczenie+0x1a>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8003c50:	f7fe fee6 	bl	8002a20 <EEPROM_RelayStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8003c54:	e005      	b.n	8003c62 <predefinedActivityCzyszczenie+0x26>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003c56:	2018      	movs	r0, #24
 8003c58:	f002 f8b4 	bl	8005dc4 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8003c5c:	2019      	movs	r0, #25
 8003c5e:	f002 f8b1 	bl	8005dc4 <SendComand>
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <predefinedActivityKarmienie+0x1a>
	{
		EEPROM_RelayStateRestore();
 8003c80:	f7fe fece 	bl	8002a20 <EEPROM_RelayStateRestore>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8003c84:	e005      	b.n	8003c92 <predefinedActivityKarmienie+0x26>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003c86:	2018      	movs	r0, #24
 8003c88:	f002 f89c 	bl	8005dc4 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8003c8c:	4803      	ldr	r0, [pc, #12]	; (8003c9c <predefinedActivityKarmienie+0x30>)
 8003c8e:	f008 fa21 	bl	800c0d4 <HAL_TIM_Base_Start_IT>
}
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000658 	.word	0x20000658

08003ca0 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003ca6:	487d      	ldr	r0, [pc, #500]	; (8003e9c <drawCurrentStateOfSwitches+0x1fc>)
 8003ca8:	f7fd fd22 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8003cac:	4b7c      	ldr	r3, [pc, #496]	; (8003ea0 <drawCurrentStateOfSwitches+0x200>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01c      	beq.n	8003cee <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003cb4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	2305      	movs	r3, #5
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	2315      	movs	r3, #21
 8003cc0:	2221      	movs	r2, #33	; 0x21
 8003cc2:	2141      	movs	r1, #65	; 0x41
 8003cc4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003cc8:	f7fd fcc1 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003ccc:	4975      	ldr	r1, [pc, #468]	; (8003ea4 <drawCurrentStateOfSwitches+0x204>)
 8003cce:	4876      	ldr	r0, [pc, #472]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003cd0:	f00a fc50 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003cd4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2243      	movs	r2, #67	; 0x43
 8003ce2:	f240 1111 	movw	r1, #273	; 0x111
 8003ce6:	4870      	ldr	r0, [pc, #448]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003ce8:	f7fd ff1c 	bl	8001b24 <EF_PutString>
 8003cec:	e01b      	b.n	8003d26 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003cee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	2305      	movs	r3, #5
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2315      	movs	r3, #21
 8003cfa:	2221      	movs	r2, #33	; 0x21
 8003cfc:	2141      	movs	r1, #65	; 0x41
 8003cfe:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003d02:	f7fd fca4 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003d06:	4969      	ldr	r1, [pc, #420]	; (8003eac <drawCurrentStateOfSwitches+0x20c>)
 8003d08:	4867      	ldr	r0, [pc, #412]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003d0a:	f00a fc33 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003d0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	2300      	movs	r3, #0
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	2243      	movs	r2, #67	; 0x43
 8003d1c:	f240 1111 	movw	r1, #273	; 0x111
 8003d20:	4861      	ldr	r0, [pc, #388]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003d22:	f7fd feff 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8003d26:	4b5e      	ldr	r3, [pc, #376]	; (8003ea0 <drawCurrentStateOfSwitches+0x200>)
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01c      	beq.n	8003d68 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003d2e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	2305      	movs	r3, #5
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	2315      	movs	r3, #21
 8003d3a:	2221      	movs	r2, #33	; 0x21
 8003d3c:	215f      	movs	r1, #95	; 0x5f
 8003d3e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003d42:	f7fd fc84 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003d46:	4957      	ldr	r1, [pc, #348]	; (8003ea4 <drawCurrentStateOfSwitches+0x204>)
 8003d48:	4857      	ldr	r0, [pc, #348]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003d4a:	f00a fc13 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003d4e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	2300      	movs	r3, #0
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2261      	movs	r2, #97	; 0x61
 8003d5c:	f240 1111 	movw	r1, #273	; 0x111
 8003d60:	4851      	ldr	r0, [pc, #324]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003d62:	f7fd fedf 	bl	8001b24 <EF_PutString>
 8003d66:	e01b      	b.n	8003da0 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003d68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d6c:	9301      	str	r3, [sp, #4]
 8003d6e:	2305      	movs	r3, #5
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	2315      	movs	r3, #21
 8003d74:	2221      	movs	r2, #33	; 0x21
 8003d76:	215f      	movs	r1, #95	; 0x5f
 8003d78:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003d7c:	f7fd fc67 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003d80:	494a      	ldr	r1, [pc, #296]	; (8003eac <drawCurrentStateOfSwitches+0x20c>)
 8003d82:	4849      	ldr	r0, [pc, #292]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003d84:	f00a fbf6 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003d88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	2261      	movs	r2, #97	; 0x61
 8003d96:	f240 1111 	movw	r1, #273	; 0x111
 8003d9a:	4843      	ldr	r0, [pc, #268]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003d9c:	f7fd fec2 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8003da0:	4b3f      	ldr	r3, [pc, #252]	; (8003ea0 <drawCurrentStateOfSwitches+0x200>)
 8003da2:	789b      	ldrb	r3, [r3, #2]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01c      	beq.n	8003de2 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003da8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	2305      	movs	r3, #5
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2315      	movs	r3, #21
 8003db4:	2221      	movs	r2, #33	; 0x21
 8003db6:	217d      	movs	r1, #125	; 0x7d
 8003db8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003dbc:	f7fd fc47 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003dc0:	4938      	ldr	r1, [pc, #224]	; (8003ea4 <drawCurrentStateOfSwitches+0x204>)
 8003dc2:	4839      	ldr	r0, [pc, #228]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003dc4:	f00a fbd6 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003dc8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	227f      	movs	r2, #127	; 0x7f
 8003dd6:	f240 1111 	movw	r1, #273	; 0x111
 8003dda:	4833      	ldr	r0, [pc, #204]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003ddc:	f7fd fea2 	bl	8001b24 <EF_PutString>
 8003de0:	e01b      	b.n	8003e1a <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003de2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	2305      	movs	r3, #5
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	2315      	movs	r3, #21
 8003dee:	2221      	movs	r2, #33	; 0x21
 8003df0:	217d      	movs	r1, #125	; 0x7d
 8003df2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003df6:	f7fd fc2a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003dfa:	492c      	ldr	r1, [pc, #176]	; (8003eac <drawCurrentStateOfSwitches+0x20c>)
 8003dfc:	482a      	ldr	r0, [pc, #168]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003dfe:	f00a fbb9 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	227f      	movs	r2, #127	; 0x7f
 8003e10:	f240 1111 	movw	r1, #273	; 0x111
 8003e14:	4824      	ldr	r0, [pc, #144]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003e16:	f7fd fe85 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8003e1a:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <drawCurrentStateOfSwitches+0x200>)
 8003e1c:	78db      	ldrb	r3, [r3, #3]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01c      	beq.n	8003e5c <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003e22:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	2305      	movs	r3, #5
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2315      	movs	r3, #21
 8003e2e:	2221      	movs	r2, #33	; 0x21
 8003e30:	219b      	movs	r1, #155	; 0x9b
 8003e32:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003e36:	f7fd fc0a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003e3a:	491a      	ldr	r1, [pc, #104]	; (8003ea4 <drawCurrentStateOfSwitches+0x204>)
 8003e3c:	481a      	ldr	r0, [pc, #104]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003e3e:	f00a fb99 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003e42:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	229d      	movs	r2, #157	; 0x9d
 8003e50:	f240 1111 	movw	r1, #273	; 0x111
 8003e54:	4814      	ldr	r0, [pc, #80]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003e56:	f7fd fe65 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8003e5a:	e01b      	b.n	8003e94 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e5c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	2305      	movs	r3, #5
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2315      	movs	r3, #21
 8003e68:	2221      	movs	r2, #33	; 0x21
 8003e6a:	219b      	movs	r1, #155	; 0x9b
 8003e6c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003e70:	f7fd fbed 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003e74:	490d      	ldr	r1, [pc, #52]	; (8003eac <drawCurrentStateOfSwitches+0x20c>)
 8003e76:	480c      	ldr	r0, [pc, #48]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003e78:	f00a fb7c 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	2300      	movs	r3, #0
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2300      	movs	r3, #0
 8003e88:	229d      	movs	r2, #157	; 0x9d
 8003e8a:	f240 1111 	movw	r1, #273	; 0x111
 8003e8e:	4806      	ldr	r0, [pc, #24]	; (8003ea8 <drawCurrentStateOfSwitches+0x208>)
 8003e90:	f7fd fe48 	bl	8001b24 <EF_PutString>
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	080132a8 	.word	0x080132a8
 8003ea0:	20000274 	.word	0x20000274
 8003ea4:	080123ec 	.word	0x080123ec
 8003ea8:	200002c8 	.word	0x200002c8
 8003eac:	080123f0 	.word	0x080123f0

08003eb0 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003eb6:	4875      	ldr	r0, [pc, #468]	; (800408c <drawCurrentStateOfLights+0x1dc>)
 8003eb8:	f7fd fc1a 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8003ebc:	4b74      	ldr	r3, [pc, #464]	; (8004090 <drawCurrentStateOfLights+0x1e0>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01a      	beq.n	8003efa <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003ec4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	2305      	movs	r3, #5
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	2315      	movs	r3, #21
 8003ed0:	2221      	movs	r2, #33	; 0x21
 8003ed2:	2141      	movs	r1, #65	; 0x41
 8003ed4:	20c8      	movs	r0, #200	; 0xc8
 8003ed6:	f7fd fbba 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003eda:	496e      	ldr	r1, [pc, #440]	; (8004094 <drawCurrentStateOfLights+0x1e4>)
 8003edc:	486e      	ldr	r0, [pc, #440]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003ede:	f00a fb49 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ee2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2300      	movs	r3, #0
 8003eee:	2243      	movs	r2, #67	; 0x43
 8003ef0:	21cb      	movs	r1, #203	; 0xcb
 8003ef2:	4869      	ldr	r0, [pc, #420]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003ef4:	f7fd fe16 	bl	8001b24 <EF_PutString>
 8003ef8:	e019      	b.n	8003f2e <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003efa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	2305      	movs	r3, #5
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	2315      	movs	r3, #21
 8003f06:	2221      	movs	r2, #33	; 0x21
 8003f08:	2141      	movs	r1, #65	; 0x41
 8003f0a:	20c8      	movs	r0, #200	; 0xc8
 8003f0c:	f7fd fb9f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003f10:	4962      	ldr	r1, [pc, #392]	; (800409c <drawCurrentStateOfLights+0x1ec>)
 8003f12:	4861      	ldr	r0, [pc, #388]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003f14:	f00a fb2e 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2300      	movs	r3, #0
 8003f24:	2243      	movs	r2, #67	; 0x43
 8003f26:	21cb      	movs	r1, #203	; 0xcb
 8003f28:	485b      	ldr	r0, [pc, #364]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003f2a:	f7fd fdfb 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8003f2e:	4b58      	ldr	r3, [pc, #352]	; (8004090 <drawCurrentStateOfLights+0x1e0>)
 8003f30:	785b      	ldrb	r3, [r3, #1]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01a      	beq.n	8003f6c <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003f36:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	2305      	movs	r3, #5
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2315      	movs	r3, #21
 8003f42:	2221      	movs	r2, #33	; 0x21
 8003f44:	215f      	movs	r1, #95	; 0x5f
 8003f46:	20c8      	movs	r0, #200	; 0xc8
 8003f48:	f7fd fb81 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003f4c:	4951      	ldr	r1, [pc, #324]	; (8004094 <drawCurrentStateOfLights+0x1e4>)
 8003f4e:	4852      	ldr	r0, [pc, #328]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003f50:	f00a fb10 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2261      	movs	r2, #97	; 0x61
 8003f62:	21cb      	movs	r1, #203	; 0xcb
 8003f64:	484c      	ldr	r0, [pc, #304]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003f66:	f7fd fddd 	bl	8001b24 <EF_PutString>
 8003f6a:	e019      	b.n	8003fa0 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003f6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	2305      	movs	r3, #5
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2315      	movs	r3, #21
 8003f78:	2221      	movs	r2, #33	; 0x21
 8003f7a:	215f      	movs	r1, #95	; 0x5f
 8003f7c:	20c8      	movs	r0, #200	; 0xc8
 8003f7e:	f7fd fb66 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003f82:	4946      	ldr	r1, [pc, #280]	; (800409c <drawCurrentStateOfLights+0x1ec>)
 8003f84:	4844      	ldr	r0, [pc, #272]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003f86:	f00a faf5 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	2300      	movs	r3, #0
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	2261      	movs	r2, #97	; 0x61
 8003f98:	21cb      	movs	r1, #203	; 0xcb
 8003f9a:	483f      	ldr	r0, [pc, #252]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003f9c:	f7fd fdc2 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8003fa0:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <drawCurrentStateOfLights+0x1e0>)
 8003fa2:	789b      	ldrb	r3, [r3, #2]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01a      	beq.n	8003fde <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003fa8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003fac:	9301      	str	r3, [sp, #4]
 8003fae:	2305      	movs	r3, #5
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	2315      	movs	r3, #21
 8003fb4:	2221      	movs	r2, #33	; 0x21
 8003fb6:	217d      	movs	r1, #125	; 0x7d
 8003fb8:	20c8      	movs	r0, #200	; 0xc8
 8003fba:	f7fd fb48 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003fbe:	4935      	ldr	r1, [pc, #212]	; (8004094 <drawCurrentStateOfLights+0x1e4>)
 8003fc0:	4835      	ldr	r0, [pc, #212]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003fc2:	f00a fad7 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003fc6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	227f      	movs	r2, #127	; 0x7f
 8003fd4:	21cb      	movs	r1, #203	; 0xcb
 8003fd6:	4830      	ldr	r0, [pc, #192]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003fd8:	f7fd fda4 	bl	8001b24 <EF_PutString>
 8003fdc:	e019      	b.n	8004012 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003fde:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	2305      	movs	r3, #5
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	2315      	movs	r3, #21
 8003fea:	2221      	movs	r2, #33	; 0x21
 8003fec:	217d      	movs	r1, #125	; 0x7d
 8003fee:	20c8      	movs	r0, #200	; 0xc8
 8003ff0:	f7fd fb2d 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003ff4:	4929      	ldr	r1, [pc, #164]	; (800409c <drawCurrentStateOfLights+0x1ec>)
 8003ff6:	4828      	ldr	r0, [pc, #160]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8003ff8:	f00a fabc 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ffc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	2300      	movs	r3, #0
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	2300      	movs	r3, #0
 8004008:	227f      	movs	r2, #127	; 0x7f
 800400a:	21cb      	movs	r1, #203	; 0xcb
 800400c:	4822      	ldr	r0, [pc, #136]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 800400e:	f7fd fd89 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8004012:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <drawCurrentStateOfLights+0x1e0>)
 8004014:	78db      	ldrb	r3, [r3, #3]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01a      	beq.n	8004050 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800401a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	2305      	movs	r3, #5
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2315      	movs	r3, #21
 8004026:	2221      	movs	r2, #33	; 0x21
 8004028:	219b      	movs	r1, #155	; 0x9b
 800402a:	20c8      	movs	r0, #200	; 0xc8
 800402c:	f7fd fb0f 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004030:	4918      	ldr	r1, [pc, #96]	; (8004094 <drawCurrentStateOfLights+0x1e4>)
 8004032:	4819      	ldr	r0, [pc, #100]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8004034:	f00a fa9e 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004038:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	2300      	movs	r3, #0
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	229d      	movs	r2, #157	; 0x9d
 8004046:	21cb      	movs	r1, #203	; 0xcb
 8004048:	4813      	ldr	r0, [pc, #76]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 800404a:	f7fd fd6b 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800404e:	e019      	b.n	8004084 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004050:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	2305      	movs	r3, #5
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2315      	movs	r3, #21
 800405c:	2221      	movs	r2, #33	; 0x21
 800405e:	219b      	movs	r1, #155	; 0x9b
 8004060:	20c8      	movs	r0, #200	; 0xc8
 8004062:	f7fd faf4 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004066:	490d      	ldr	r1, [pc, #52]	; (800409c <drawCurrentStateOfLights+0x1ec>)
 8004068:	480b      	ldr	r0, [pc, #44]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 800406a:	f00a fa83 	bl	800e574 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800406e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	2300      	movs	r3, #0
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	229d      	movs	r2, #157	; 0x9d
 800407c:	21cb      	movs	r1, #203	; 0xcb
 800407e:	4806      	ldr	r0, [pc, #24]	; (8004098 <drawCurrentStateOfLights+0x1e8>)
 8004080:	f7fd fd50 	bl	8001b24 <EF_PutString>
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	080132a8 	.word	0x080132a8
 8004090:	20000278 	.word	0x20000278
 8004094:	080123ec 	.word	0x080123ec
 8004098:	200002c8 	.word	0x200002c8
 800409c:	080123f0 	.word	0x080123f0

080040a0 <initWait>:

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 80040a8:	bf00      	nop
 80040aa:	f002 fe9b 	bl	8006de4 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <initWait+0x28>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d2f6      	bcs.n	80040aa <initWait+0xa>
    {
    }
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000250 	.word	0x20000250

080040cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <MX_GPIO_Init+0x118>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	4a3e      	ldr	r2, [pc, #248]	; (80041e4 <MX_GPIO_Init+0x118>)
 80040ec:	f043 0304 	orr.w	r3, r3, #4
 80040f0:	6313      	str	r3, [r2, #48]	; 0x30
 80040f2:	4b3c      	ldr	r3, [pc, #240]	; (80041e4 <MX_GPIO_Init+0x118>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	4b38      	ldr	r3, [pc, #224]	; (80041e4 <MX_GPIO_Init+0x118>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a37      	ldr	r2, [pc, #220]	; (80041e4 <MX_GPIO_Init+0x118>)
 8004108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <MX_GPIO_Init+0x118>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <MX_GPIO_Init+0x118>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	4a30      	ldr	r2, [pc, #192]	; (80041e4 <MX_GPIO_Init+0x118>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6313      	str	r3, [r2, #48]	; 0x30
 800412a:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <MX_GPIO_Init+0x118>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <MX_GPIO_Init+0x118>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <MX_GPIO_Init+0x118>)
 8004140:	f043 0302 	orr.w	r3, r3, #2
 8004144:	6313      	str	r3, [r2, #48]	; 0x30
 8004146:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <MX_GPIO_Init+0x118>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8004152:	2200      	movs	r2, #0
 8004154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004158:	4823      	ldr	r0, [pc, #140]	; (80041e8 <MX_GPIO_Init+0x11c>)
 800415a:	f003 fdbf 	bl	8007cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800415e:	2200      	movs	r2, #0
 8004160:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8004164:	4821      	ldr	r0, [pc, #132]	; (80041ec <MX_GPIO_Init+0x120>)
 8004166:	f003 fdb9 	bl	8007cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 800416a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800416e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004170:	2301      	movs	r3, #1
 8004172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004178:	2300      	movs	r3, #0
 800417a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 800417c:	f107 0314 	add.w	r3, r7, #20
 8004180:	4619      	mov	r1, r3
 8004182:	4819      	ldr	r0, [pc, #100]	; (80041e8 <MX_GPIO_Init+0x11c>)
 8004184:	f003 fc0e 	bl	80079a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 8004188:	2310      	movs	r3, #16
 800418a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800418c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004192:	2301      	movs	r3, #1
 8004194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	4619      	mov	r1, r3
 800419c:	4814      	ldr	r0, [pc, #80]	; (80041f0 <MX_GPIO_Init+0x124>)
 800419e:	f003 fc01 	bl	80079a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80041a2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80041a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a8:	2301      	movs	r3, #1
 80041aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b0:	2300      	movs	r3, #0
 80041b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	4619      	mov	r1, r3
 80041ba:	480c      	ldr	r0, [pc, #48]	; (80041ec <MX_GPIO_Init+0x120>)
 80041bc:	f003 fbf2 	bl	80079a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80041c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80041ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	4619      	mov	r1, r3
 80041d6:	4806      	ldr	r0, [pc, #24]	; (80041f0 <MX_GPIO_Init+0x124>)
 80041d8:	f003 fbe4 	bl	80079a4 <HAL_GPIO_Init>

}
 80041dc:	bf00      	nop
 80041de:	3728      	adds	r7, #40	; 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020400 	.word	0x40020400
 80041f0:	40020000 	.word	0x40020000

080041f4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <MX_I2C1_Init+0x50>)
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <MX_I2C1_Init+0x54>)
 80041fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <MX_I2C1_Init+0x50>)
 8004200:	4a12      	ldr	r2, [pc, #72]	; (800424c <MX_I2C1_Init+0x58>)
 8004202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <MX_I2C1_Init+0x50>)
 8004206:	2200      	movs	r2, #0
 8004208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <MX_I2C1_Init+0x50>)
 800420c:	2200      	movs	r2, #0
 800420e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <MX_I2C1_Init+0x50>)
 8004212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <MX_I2C1_Init+0x50>)
 800421a:	2200      	movs	r2, #0
 800421c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <MX_I2C1_Init+0x50>)
 8004220:	2200      	movs	r2, #0
 8004222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004224:	4b07      	ldr	r3, [pc, #28]	; (8004244 <MX_I2C1_Init+0x50>)
 8004226:	2200      	movs	r2, #0
 8004228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <MX_I2C1_Init+0x50>)
 800422c:	2200      	movs	r2, #0
 800422e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004230:	4804      	ldr	r0, [pc, #16]	; (8004244 <MX_I2C1_Init+0x50>)
 8004232:	f003 fd9f 	bl	8007d74 <HAL_I2C_Init>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800423c:	f000 fa7c 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004240:	bf00      	nop
 8004242:	bd80      	pop	{r7, pc}
 8004244:	2000039c 	.word	0x2000039c
 8004248:	40005400 	.word	0x40005400
 800424c:	00061a80 	.word	0x00061a80

08004250 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <MX_I2C3_Init+0x50>)
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <MX_I2C3_Init+0x54>)
 8004258:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <MX_I2C3_Init+0x50>)
 800425c:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <MX_I2C3_Init+0x58>)
 800425e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <MX_I2C3_Init+0x50>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <MX_I2C3_Init+0x50>)
 8004268:	2200      	movs	r2, #0
 800426a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <MX_I2C3_Init+0x50>)
 800426e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004272:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <MX_I2C3_Init+0x50>)
 8004276:	2200      	movs	r2, #0
 8004278:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <MX_I2C3_Init+0x50>)
 800427c:	2200      	movs	r2, #0
 800427e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <MX_I2C3_Init+0x50>)
 8004282:	2200      	movs	r2, #0
 8004284:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <MX_I2C3_Init+0x50>)
 8004288:	2200      	movs	r2, #0
 800428a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800428c:	4804      	ldr	r0, [pc, #16]	; (80042a0 <MX_I2C3_Init+0x50>)
 800428e:	f003 fd71 	bl	8007d74 <HAL_I2C_Init>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004298:	f000 fa4e 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800429c:	bf00      	nop
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200002e8 	.word	0x200002e8
 80042a4:	40005c00 	.word	0x40005c00
 80042a8:	000186a0 	.word	0x000186a0

080042ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08c      	sub	sp, #48	; 0x30
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	f107 031c 	add.w	r3, r7, #28
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a74      	ldr	r2, [pc, #464]	; (800449c <HAL_I2C_MspInit+0x1f0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	f040 8090 	bne.w	80043f0 <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	4b72      	ldr	r3, [pc, #456]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	4a71      	ldr	r2, [pc, #452]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 80042da:	f043 0302 	orr.w	r3, r3, #2
 80042de:	6313      	str	r3, [r2, #48]	; 0x30
 80042e0:	4b6f      	ldr	r3, [pc, #444]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042ec:	23c0      	movs	r3, #192	; 0xc0
 80042ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f0:	2312      	movs	r3, #18
 80042f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f8:	2303      	movs	r3, #3
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042fc:	2304      	movs	r3, #4
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	4619      	mov	r1, r3
 8004306:	4867      	ldr	r0, [pc, #412]	; (80044a4 <HAL_I2C_MspInit+0x1f8>)
 8004308:	f003 fb4c 	bl	80079a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	4b63      	ldr	r3, [pc, #396]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	4a62      	ldr	r2, [pc, #392]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 8004316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800431a:	6413      	str	r3, [r2, #64]	; 0x40
 800431c:	4b60      	ldr	r3, [pc, #384]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004328:	4b5f      	ldr	r3, [pc, #380]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 800432a:	4a60      	ldr	r2, [pc, #384]	; (80044ac <HAL_I2C_MspInit+0x200>)
 800432c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800432e:	4b5e      	ldr	r3, [pc, #376]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 8004330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004334:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004336:	4b5c      	ldr	r3, [pc, #368]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 8004338:	2200      	movs	r2, #0
 800433a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800433c:	4b5a      	ldr	r3, [pc, #360]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 800433e:	2200      	movs	r2, #0
 8004340:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004342:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 8004344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004348:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800434a:	4b57      	ldr	r3, [pc, #348]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 800434c:	2200      	movs	r2, #0
 800434e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004350:	4b55      	ldr	r3, [pc, #340]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 8004352:	2200      	movs	r2, #0
 8004354:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004356:	4b54      	ldr	r3, [pc, #336]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 8004358:	2200      	movs	r2, #0
 800435a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800435c:	4b52      	ldr	r3, [pc, #328]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 800435e:	2200      	movs	r2, #0
 8004360:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004362:	4b51      	ldr	r3, [pc, #324]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 8004364:	2200      	movs	r2, #0
 8004366:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004368:	484f      	ldr	r0, [pc, #316]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 800436a:	f002 ff0b 	bl	8007184 <HAL_DMA_Init>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004374:	f000 f9e0 	bl	8004738 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a4b      	ldr	r2, [pc, #300]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
 800437e:	4a4a      	ldr	r2, [pc, #296]	; (80044a8 <HAL_I2C_MspInit+0x1fc>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8004384:	4b4a      	ldr	r3, [pc, #296]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 8004386:	4a4b      	ldr	r2, [pc, #300]	; (80044b4 <HAL_I2C_MspInit+0x208>)
 8004388:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800438a:	4b49      	ldr	r3, [pc, #292]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 800438c:	2200      	movs	r2, #0
 800438e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004390:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 8004392:	2240      	movs	r2, #64	; 0x40
 8004394:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004396:	4b46      	ldr	r3, [pc, #280]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 8004398:	2200      	movs	r2, #0
 800439a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800439c:	4b44      	ldr	r3, [pc, #272]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 800439e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043a2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043a4:	4b42      	ldr	r3, [pc, #264]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043aa:	4b41      	ldr	r3, [pc, #260]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80043b0:	4b3f      	ldr	r3, [pc, #252]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043b6:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043bc:	4b3c      	ldr	r3, [pc, #240]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 80043be:	2200      	movs	r2, #0
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80043c2:	483b      	ldr	r0, [pc, #236]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 80043c4:	f002 fede 	bl	8007184 <HAL_DMA_Init>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80043ce:	f000 f9b3 	bl	8004738 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a36      	ldr	r2, [pc, #216]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 80043d6:	635a      	str	r2, [r3, #52]	; 0x34
 80043d8:	4a35      	ldr	r2, [pc, #212]	; (80044b0 <HAL_I2C_MspInit+0x204>)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	2100      	movs	r1, #0
 80043e2:	2020      	movs	r0, #32
 80043e4:	f002 fe6d 	bl	80070c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80043e8:	2020      	movs	r0, #32
 80043ea:	f002 fe86 	bl	80070fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80043ee:	e050      	b.n	8004492 <HAL_I2C_MspInit+0x1e6>
  else if(i2cHandle->Instance==I2C3)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a30      	ldr	r2, [pc, #192]	; (80044b8 <HAL_I2C_MspInit+0x20c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d14b      	bne.n	8004492 <HAL_I2C_MspInit+0x1e6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6313      	str	r3, [r2, #48]	; 0x30
 800440a:	4b25      	ldr	r3, [pc, #148]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4a20      	ldr	r2, [pc, #128]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 8004420:	f043 0302 	orr.w	r3, r3, #2
 8004424:	6313      	str	r3, [r2, #48]	; 0x30
 8004426:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004438:	2312      	movs	r3, #18
 800443a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	2300      	movs	r3, #0
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004440:	2303      	movs	r3, #3
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004444:	2304      	movs	r3, #4
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004448:	f107 031c 	add.w	r3, r7, #28
 800444c:	4619      	mov	r1, r3
 800444e:	481b      	ldr	r0, [pc, #108]	; (80044bc <HAL_I2C_MspInit+0x210>)
 8004450:	f003 faa8 	bl	80079a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800445a:	2312      	movs	r3, #18
 800445c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445e:	2300      	movs	r3, #0
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004462:	2303      	movs	r3, #3
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8004466:	2309      	movs	r3, #9
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446a:	f107 031c 	add.w	r3, r7, #28
 800446e:	4619      	mov	r1, r3
 8004470:	480c      	ldr	r0, [pc, #48]	; (80044a4 <HAL_I2C_MspInit+0x1f8>)
 8004472:	f003 fa97 	bl	80079a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 8004480:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004484:	6413      	str	r3, [r2, #64]	; 0x40
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_I2C_MspInit+0x1f4>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
}
 8004492:	bf00      	nop
 8004494:	3730      	adds	r7, #48	; 0x30
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40005400 	.word	0x40005400
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40020400 	.word	0x40020400
 80044a8:	200003f0 	.word	0x200003f0
 80044ac:	40026010 	.word	0x40026010
 80044b0:	2000033c 	.word	0x2000033c
 80044b4:	40026028 	.word	0x40026028
 80044b8:	40005c00 	.word	0x40005c00
 80044bc:	40020000 	.word	0x40020000

080044c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044c6:	f002 fc27 	bl	8006d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044ca:	f000 f857 	bl	800457c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044ce:	f7ff fdfd 	bl	80040cc <MX_GPIO_Init>
  MX_SPI1_Init();
 80044d2:	f001 fe65 	bl	80061a0 <MX_SPI1_Init>
  MX_DMA_Init();
 80044d6:	f7fe f80d 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80044da:	f002 fb1d 	bl	8006b18 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80044de:	f001 fe95 	bl	800620c <MX_SPI3_Init>
  MX_I2C1_Init();
 80044e2:	f7ff fe87 	bl	80041f4 <MX_I2C1_Init>
  MX_TIM11_Init();
 80044e6:	f002 f90b 	bl	8006700 <MX_TIM11_Init>
  MX_TIM10_Init();
 80044ea:	f002 f8e5 	bl	80066b8 <MX_TIM10_Init>
  MX_I2C3_Init();
 80044ee:	f7ff feaf 	bl	8004250 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80044f2:	f000 f8ab 	bl	800464c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 80044f6:	481b      	ldr	r0, [pc, #108]	; (8004564 <main+0xa4>)
 80044f8:	f007 fdec 	bl	800c0d4 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 80044fc:	481a      	ldr	r0, [pc, #104]	; (8004568 <main+0xa8>)
 80044fe:	f7fd fd59 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8004502:	491a      	ldr	r1, [pc, #104]	; (800456c <main+0xac>)
 8004504:	481a      	ldr	r0, [pc, #104]	; (8004570 <main+0xb0>)
 8004506:	f002 fab8 	bl	8006a7a <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 800450a:	2117      	movs	r1, #23
 800450c:	4819      	ldr	r0, [pc, #100]	; (8004574 <main+0xb4>)
 800450e:	f7fd ffa1 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 8004512:	4819      	ldr	r0, [pc, #100]	; (8004578 <main+0xb8>)
 8004514:	f7fe f826 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8004518:	2001      	movs	r0, #1
 800451a:	f7fe f87d 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 800451e:	2001      	movs	r0, #1
 8004520:	f7fe f89a 	bl	8002658 <DS3231_EnableOscillator>


  uint8_t result = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	71fb      	strb	r3, [r7, #7]
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 8004528:	e001      	b.n	800452e <main+0x6e>
  Error_Handler();
 800452a:	f000 f905 	bl	8004738 <Error_Handler>
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 800452e:	1dfb      	adds	r3, r7, #7
 8004530:	2201      	movs	r2, #1
 8004532:	4619      	mov	r1, r3
 8004534:	2001      	movs	r0, #1
 8004536:	f7fe f9bd 	bl	80028b4 <eeprom_read>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f4      	bne.n	800452a <main+0x6a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8004540:	480b      	ldr	r0, [pc, #44]	; (8004570 <main+0xb0>)
 8004542:	f002 fa4e 	bl	80069e2 <UARTDMA_IsDataReceivedReady>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <main+0x92>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 800454c:	4808      	ldr	r0, [pc, #32]	; (8004570 <main+0xb0>)
 800454e:	f001 f9a5 	bl	800589c <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8004552:	4807      	ldr	r0, [pc, #28]	; (8004570 <main+0xb0>)
 8004554:	f002 fa57 	bl	8006a06 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 8004558:	f7fd feaa 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  MenuTFT();
 800455c:	f000 f8f2 	bl	8004744 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8004560:	e7ee      	b.n	8004540 <main+0x80>
 8004562:	bf00      	nop
 8004564:	200006a0 	.word	0x200006a0
 8004568:	20000600 	.word	0x20000600
 800456c:	200007a8 	.word	0x200007a8
 8004570:	20000450 	.word	0x20000450
 8004574:	200005a8 	.word	0x200005a8
 8004578:	2000039c 	.word	0x2000039c

0800457c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b094      	sub	sp, #80	; 0x50
 8004580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004582:	f107 0320 	add.w	r3, r7, #32
 8004586:	2230      	movs	r2, #48	; 0x30
 8004588:	2100      	movs	r1, #0
 800458a:	4618      	mov	r0, r3
 800458c:	f009 f96a 	bl	800d864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045a0:	2300      	movs	r3, #0
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <SystemClock_Config+0xc8>)
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	4a26      	ldr	r2, [pc, #152]	; (8004644 <SystemClock_Config+0xc8>)
 80045aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ae:	6413      	str	r3, [r2, #64]	; 0x40
 80045b0:	4b24      	ldr	r3, [pc, #144]	; (8004644 <SystemClock_Config+0xc8>)
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045bc:	2300      	movs	r3, #0
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	4b21      	ldr	r3, [pc, #132]	; (8004648 <SystemClock_Config+0xcc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a20      	ldr	r2, [pc, #128]	; (8004648 <SystemClock_Config+0xcc>)
 80045c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <SystemClock_Config+0xcc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045d8:	2301      	movs	r3, #1
 80045da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045e2:	2302      	movs	r3, #2
 80045e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80045ec:	230c      	movs	r3, #12
 80045ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80045f0:	2360      	movs	r3, #96	; 0x60
 80045f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045f4:	2302      	movs	r3, #2
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80045f8:	2304      	movs	r3, #4
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045fc:	f107 0320 	add.w	r3, r7, #32
 8004600:	4618      	mov	r0, r3
 8004602:	f006 fcbb 	bl	800af7c <HAL_RCC_OscConfig>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800460c:	f000 f894 	bl	8004738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004610:	230f      	movs	r3, #15
 8004612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004614:	2302      	movs	r3, #2
 8004616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800461c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004626:	f107 030c 	add.w	r3, r7, #12
 800462a:	2103      	movs	r1, #3
 800462c:	4618      	mov	r0, r3
 800462e:	f006 ff1d 	bl	800b46c <HAL_RCC_ClockConfig>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004638:	f000 f87e 	bl	8004738 <Error_Handler>
  }
}
 800463c:	bf00      	nop
 800463e:	3750      	adds	r7, #80	; 0x50
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	40007000 	.word	0x40007000

0800464c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004650:	2200      	movs	r2, #0
 8004652:	2100      	movs	r1, #0
 8004654:	200a      	movs	r0, #10
 8004656:	f002 fd34 	bl	80070c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800465a:	200a      	movs	r0, #10
 800465c:	f002 fd4d 	bl	80070fa <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004660:	2200      	movs	r2, #0
 8004662:	2100      	movs	r1, #0
 8004664:	2017      	movs	r0, #23
 8004666:	f002 fd2c 	bl	80070c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800466a:	2017      	movs	r0, #23
 800466c:	f002 fd45 	bl	80070fa <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004670:	2200      	movs	r2, #0
 8004672:	2100      	movs	r1, #0
 8004674:	201f      	movs	r0, #31
 8004676:	f002 fd24 	bl	80070c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800467a:	201f      	movs	r0, #31
 800467c:	f002 fd3d 	bl	80070fa <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004680:	2200      	movs	r2, #0
 8004682:	2100      	movs	r1, #0
 8004684:	2026      	movs	r0, #38	; 0x26
 8004686:	f002 fd1c 	bl	80070c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800468a:	2026      	movs	r0, #38	; 0x26
 800468c:	f002 fd35 	bl	80070fa <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004690:	2200      	movs	r2, #0
 8004692:	2100      	movs	r1, #0
 8004694:	2033      	movs	r0, #51	; 0x33
 8004696:	f002 fd14 	bl	80070c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800469a:	2033      	movs	r0, #51	; 0x33
 800469c:	f002 fd2d 	bl	80070fa <HAL_NVIC_EnableIRQ>
}
 80046a0:	bf00      	nop
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a12      	ldr	r2, [pc, #72]	; (80046fc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d101      	bne.n	80046ba <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen();
 80046b6:	f7ff fa4f 	bl	8003b58 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a10      	ldr	r2, [pc, #64]	; (8004700 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d117      	bne.n	80046f4 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S)
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d90d      	bls.n	80046e8 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 80046cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046d0:	480d      	ldr	r0, [pc, #52]	; (8004708 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80046d2:	f003 fb1c 	bl	8007d0e <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 80046d6:	2000      	movs	r0, #0
 80046d8:	f7ff fac8 	bl	8003c6c <predefinedActivityKarmienie>
			FeedingCounter = 0;
 80046dc:	4b09      	ldr	r3, [pc, #36]	; (8004704 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 80046e2:	480a      	ldr	r0, [pc, #40]	; (800470c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80046e4:	f007 fd58 	bl	800c198 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	3301      	adds	r3, #1
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80046f2:	701a      	strb	r2, [r3, #0]
	}
}
 80046f4:	bf00      	nop
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40014800 	.word	0x40014800
 8004700:	40014400 	.word	0x40014400
 8004704:	20000254 	.word	0x20000254
 8004708:	40020800 	.word	0x40020800
 800470c:	20000658 	.word	0x20000658

08004710 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004720:	d101      	bne.n	8004726 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8004722:	f7fd fe8b 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	2b10      	cmp	r3, #16
 800472a:	d101      	bne.n	8004730 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 800472c:	f7fd ffd8 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800473c:	b672      	cpsid	i
}
 800473e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004740:	e7fe      	b.n	8004740 <Error_Handler+0x8>
	...

08004744 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
	switch(State)
 8004748:	4b3e      	ldr	r3, [pc, #248]	; (8004844 <MenuTFT+0x100>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b06      	cmp	r3, #6
 800474e:	d876      	bhi.n	800483e <MenuTFT+0xfa>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <MenuTFT+0x14>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	08004775 	.word	0x08004775
 800475c:	08004787 	.word	0x08004787
 8004760:	080047bb 	.word	0x080047bb
 8004764:	080047eb 	.word	0x080047eb
 8004768:	08004809 	.word	0x08004809
 800476c:	080047d3 	.word	0x080047d3
 8004770:	08004821 	.word	0x08004821
	{
	case MENUTFT_INIT:
		system_init();
 8004774:	f7fe f98c 	bl	8002a90 <system_init>
		State = MENUTFT_PARAMETERS;
 8004778:	4b32      	ldr	r3, [pc, #200]	; (8004844 <MenuTFT+0x100>)
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 800477e:	4b32      	ldr	r3, [pc, #200]	; (8004848 <MenuTFT+0x104>)
 8004780:	2201      	movs	r2, #1
 8004782:	701a      	strb	r2, [r3, #0]
		break;
 8004784:	e05b      	b.n	800483e <MenuTFT+0xfa>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8004786:	4b30      	ldr	r3, [pc, #192]	; (8004848 <MenuTFT+0x104>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d112      	bne.n	80047b4 <MenuTFT+0x70>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 800478e:	4b2f      	ldr	r3, [pc, #188]	; (800484c <MenuTFT+0x108>)
 8004790:	edd3 7a00 	vldr	s15, [r3]
 8004794:	4b2e      	ldr	r3, [pc, #184]	; (8004850 <MenuTFT+0x10c>)
 8004796:	ed93 7a00 	vldr	s14, [r3]
 800479a:	eeb0 1a47 	vmov.f32	s2, s14
 800479e:	2100      	movs	r1, #0
 80047a0:	2000      	movs	r0, #0
 80047a2:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8004854 <MenuTFT+0x110>
 80047a6:	eeb0 0a67 	vmov.f32	s0, s15
 80047aa:	f7fe fa97 	bl	8002cdc <showCurrentParameters>
			StateChangeFlag = 0;
 80047ae:	4b26      	ldr	r3, [pc, #152]	; (8004848 <MenuTFT+0x104>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 80047b4:	f000 f854 	bl	8004860 <TouchParametersActivity>
		break;
 80047b8:	e041      	b.n	800483e <MenuTFT+0xfa>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 80047ba:	4b23      	ldr	r3, [pc, #140]	; (8004848 <MenuTFT+0x104>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d104      	bne.n	80047cc <MenuTFT+0x88>
		{
			showControlPanel();
 80047c2:	f7fe fbd5 	bl	8002f70 <showControlPanel>
			StateChangeFlag = 0;
 80047c6:	4b20      	ldr	r3, [pc, #128]	; (8004848 <MenuTFT+0x104>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 80047cc:	f000 f8a8 	bl	8004920 <TouchSwitchActivity>
		break;
 80047d0:	e035      	b.n	800483e <MenuTFT+0xfa>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 80047d2:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <MenuTFT+0x104>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d104      	bne.n	80047e4 <MenuTFT+0xa0>
		{
			showLightsControlPanel();
 80047da:	f7fe fca3 	bl	8003124 <showLightsControlPanel>
			StateChangeFlag = 0;
 80047de:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <MenuTFT+0x104>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 80047e4:	f000 fa84 	bl	8004cf0 <TouchLightsActivity>
		break;
 80047e8:	e029      	b.n	800483e <MenuTFT+0xfa>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 80047ea:	4b17      	ldr	r3, [pc, #92]	; (8004848 <MenuTFT+0x104>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d107      	bne.n	8004802 <MenuTFT+0xbe>
		{
			showClockSetPanel();
 80047f2:	f7fe fd6f 	bl	80032d4 <showClockSetPanel>
			ClockChangeFlag = 1;
 80047f6:	4b18      	ldr	r3, [pc, #96]	; (8004858 <MenuTFT+0x114>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <MenuTFT+0x104>)
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8004802:	f000 fc29 	bl	8005058 <TouchClockActivity>
		break;
 8004806:	e01a      	b.n	800483e <MenuTFT+0xfa>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8004808:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <MenuTFT+0x104>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d104      	bne.n	800481a <MenuTFT+0xd6>
		{
			showPreparedActivitiesPanel();
 8004810:	f7fe fe78 	bl	8003504 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <MenuTFT+0x104>)
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 800481a:	f000 fd6b 	bl	80052f4 <TouchPredefinedActivityActivity>
		break;
 800481e:	e00e      	b.n	800483e <MenuTFT+0xfa>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <MenuTFT+0x104>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d107      	bne.n	8004838 <MenuTFT+0xf4>
		{
			showWSLedPanel();
 8004828:	f7fe ff7c 	bl	8003724 <showWSLedPanel>
			WSLedChangeFlag = 1;
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <MenuTFT+0x118>)
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8004832:	4b05      	ldr	r3, [pc, #20]	; (8004848 <MenuTFT+0x104>)
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8004838:	f000 fe84 	bl	8005544 <TouchWSLedActivity>
		break;
 800483c:	bf00      	nop
	}
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	2000025c 	.word	0x2000025c
 8004848:	20000255 	.word	0x20000255
 800484c:	20000260 	.word	0x20000260
 8004850:	20000268 	.word	0x20000268
 8004854:	00000000 	.word	0x00000000
 8004858:	20000256 	.word	0x20000256
 800485c:	20000257 	.word	0x20000257

08004860 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004866:	f7fd fd11 	bl	800228c <XPT2046_IsTouched>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d04c      	beq.n	800490a <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004870:	f002 fab8 	bl	8006de4 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	4b27      	ldr	r3, [pc, #156]	; (8004914 <TouchParametersActivity+0xb4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004880:	d343      	bcc.n	800490a <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004882:	1d3a      	adds	r2, r7, #4
 8004884:	1dbb      	adds	r3, r7, #6
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f7fd fcc1 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b09      	cmp	r3, #9
 8004892:	d90f      	bls.n	80048b4 <TouchParametersActivity+0x54>
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	2b6e      	cmp	r3, #110	; 0x6e
 8004898:	d80c      	bhi.n	80048b4 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800489a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800489c:	2bd7      	cmp	r3, #215	; 0xd7
 800489e:	d909      	bls.n	80048b4 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80048a0:	88bb      	ldrh	r3, [r7, #4]
 80048a2:	2bec      	cmp	r3, #236	; 0xec
 80048a4:	d806      	bhi.n	80048b4 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <TouchParametersActivity+0xb8>)
 80048a8:	2205      	movs	r2, #5
 80048aa:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80048ac:	4b1b      	ldr	r3, [pc, #108]	; (800491c <TouchParametersActivity+0xbc>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e025      	b.n	8004900 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2bdb      	cmp	r3, #219	; 0xdb
 80048b8:	d910      	bls.n	80048dc <TouchParametersActivity+0x7c>
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80048c0:	d20c      	bcs.n	80048dc <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80048c2:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80048c4:	2bd7      	cmp	r3, #215	; 0xd7
 80048c6:	d909      	bls.n	80048dc <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80048c8:	88bb      	ldrh	r3, [r7, #4]
 80048ca:	2bec      	cmp	r3, #236	; 0xec
 80048cc:	d806      	bhi.n	80048dc <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <TouchParametersActivity+0xb8>)
 80048d0:	2202      	movs	r2, #2
 80048d2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <TouchParametersActivity+0xbc>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e011      	b.n	8004900 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	2b77      	cmp	r3, #119	; 0x77
 80048e0:	d90e      	bls.n	8004900 <TouchParametersActivity+0xa0>
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	2bd2      	cmp	r3, #210	; 0xd2
 80048e6:	d80b      	bhi.n	8004900 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80048e8:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80048ea:	2bd7      	cmp	r3, #215	; 0xd7
 80048ec:	d908      	bls.n	8004900 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80048ee:	88bb      	ldrh	r3, [r7, #4]
 80048f0:	2bec      	cmp	r3, #236	; 0xec
 80048f2:	d805      	bhi.n	8004900 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 80048f4:	4b08      	ldr	r3, [pc, #32]	; (8004918 <TouchParametersActivity+0xb8>)
 80048f6:	2203      	movs	r2, #3
 80048f8:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80048fa:	4b08      	ldr	r3, [pc, #32]	; (800491c <TouchParametersActivity+0xbc>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8004900:	f002 fa70 	bl	8006de4 <HAL_GetTick>
 8004904:	4603      	mov	r3, r0
 8004906:	4a03      	ldr	r2, [pc, #12]	; (8004914 <TouchParametersActivity+0xb4>)
 8004908:	6013      	str	r3, [r2, #0]
		}
	}
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000258 	.word	0x20000258
 8004918:	2000025c 	.word	0x2000025c
 800491c:	20000255 	.word	0x20000255

08004920 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004926:	f7fd fcb1 	bl	800228c <XPT2046_IsTouched>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 81ce 	beq.w	8004cce <TouchSwitchActivity+0x3ae>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004932:	f002 fa57 	bl	8006de4 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	4bad      	ldr	r3, [pc, #692]	; (8004bf0 <TouchSwitchActivity+0x2d0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004942:	f0c0 81c4 	bcc.w	8004cce <TouchSwitchActivity+0x3ae>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004946:	1d3a      	adds	r2, r7, #4
 8004948:	1dbb      	adds	r3, r7, #6
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f7fd fc5f 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	2b09      	cmp	r3, #9
 8004956:	d90f      	bls.n	8004978 <TouchSwitchActivity+0x58>
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	2b6e      	cmp	r3, #110	; 0x6e
 800495c:	d80c      	bhi.n	8004978 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800495e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004960:	2bd7      	cmp	r3, #215	; 0xd7
 8004962:	d909      	bls.n	8004978 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004964:	88bb      	ldrh	r3, [r7, #4]
 8004966:	2bec      	cmp	r3, #236	; 0xec
 8004968:	d806      	bhi.n	8004978 <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 800496a:	4ba2      	ldr	r3, [pc, #648]	; (8004bf4 <TouchSwitchActivity+0x2d4>)
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004970:	4ba1      	ldr	r3, [pc, #644]	; (8004bf8 <TouchSwitchActivity+0x2d8>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	e1a5      	b.n	8004cc4 <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	2bdb      	cmp	r3, #219	; 0xdb
 800497c:	d910      	bls.n	80049a0 <TouchSwitchActivity+0x80>
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004984:	d20c      	bcs.n	80049a0 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004986:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004988:	2bd7      	cmp	r3, #215	; 0xd7
 800498a:	d909      	bls.n	80049a0 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800498c:	88bb      	ldrh	r3, [r7, #4]
 800498e:	2bec      	cmp	r3, #236	; 0xec
 8004990:	d806      	bhi.n	80049a0 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 8004992:	4b98      	ldr	r3, [pc, #608]	; (8004bf4 <TouchSwitchActivity+0x2d4>)
 8004994:	2205      	movs	r2, #5
 8004996:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004998:	4b97      	ldr	r3, [pc, #604]	; (8004bf8 <TouchSwitchActivity+0x2d8>)
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	e191      	b.n	8004cc4 <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	2b77      	cmp	r3, #119	; 0x77
 80049a4:	d90f      	bls.n	80049c6 <TouchSwitchActivity+0xa6>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2bd2      	cmp	r3, #210	; 0xd2
 80049aa:	d80c      	bhi.n	80049c6 <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80049ac:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80049ae:	2bd7      	cmp	r3, #215	; 0xd7
 80049b0:	d909      	bls.n	80049c6 <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80049b2:	88bb      	ldrh	r3, [r7, #4]
 80049b4:	2bec      	cmp	r3, #236	; 0xec
 80049b6:	d806      	bhi.n	80049c6 <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 80049b8:	4b8e      	ldr	r3, [pc, #568]	; (8004bf4 <TouchSwitchActivity+0x2d4>)
 80049ba:	2204      	movs	r2, #4
 80049bc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80049be:	4b8e      	ldr	r3, [pc, #568]	; (8004bf8 <TouchSwitchActivity+0x2d8>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	e17e      	b.n	8004cc4 <TouchSwitchActivity+0x3a4>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80049cc:	f0c0 817a 	bcc.w	8004cc4 <TouchSwitchActivity+0x3a4>
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80049d6:	f080 8175 	bcs.w	8004cc4 <TouchSwitchActivity+0x3a4>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80049da:	4888      	ldr	r0, [pc, #544]	; (8004bfc <TouchSwitchActivity+0x2dc>)
 80049dc:	f7fc fe88 	bl	80016f0 <EF_SetFont>
				//
				// FIRST SWITCH
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 80049e0:	88bb      	ldrh	r3, [r7, #4]
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	d954      	bls.n	8004a90 <TouchSwitchActivity+0x170>
 80049e6:	88bb      	ldrh	r3, [r7, #4]
 80049e8:	2b56      	cmp	r3, #86	; 0x56
 80049ea:	d851      	bhi.n	8004a90 <TouchSwitchActivity+0x170>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 80049ec:	4b84      	ldr	r3, [pc, #528]	; (8004c00 <TouchSwitchActivity+0x2e0>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d026      	beq.n	8004a42 <TouchSwitchActivity+0x122>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 80049f4:	2006      	movs	r0, #6
 80049f6:	f001 f9e5 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80049fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	2305      	movs	r3, #5
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2315      	movs	r3, #21
 8004a06:	2221      	movs	r2, #33	; 0x21
 8004a08:	2141      	movs	r1, #65	; 0x41
 8004a0a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004a0e:	f7fc fe1e 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004a12:	497c      	ldr	r1, [pc, #496]	; (8004c04 <TouchSwitchActivity+0x2e4>)
 8004a14:	487c      	ldr	r0, [pc, #496]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004a16:	f009 fdad 	bl	800e574 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004a1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	2300      	movs	r3, #0
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2300      	movs	r3, #0
 8004a26:	2243      	movs	r2, #67	; 0x43
 8004a28:	f240 1111 	movw	r1, #273	; 0x111
 8004a2c:	4876      	ldr	r0, [pc, #472]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004a2e:	f7fd f879 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 8004a32:	4b73      	ldr	r3, [pc, #460]	; (8004c00 <TouchSwitchActivity+0x2e0>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 0);
 8004a38:	2100      	movs	r1, #0
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f7fd ff80 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004a40:	e13d      	b.n	8004cbe <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8004a42:	2005      	movs	r0, #5
 8004a44:	f001 f9be 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004a48:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	2305      	movs	r3, #5
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	2315      	movs	r3, #21
 8004a54:	2221      	movs	r2, #33	; 0x21
 8004a56:	2141      	movs	r1, #65	; 0x41
 8004a58:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004a5c:	f7fc fdf7 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004a60:	496a      	ldr	r1, [pc, #424]	; (8004c0c <TouchSwitchActivity+0x2ec>)
 8004a62:	4869      	ldr	r0, [pc, #420]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004a64:	f009 fd86 	bl	800e574 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004a68:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	2243      	movs	r2, #67	; 0x43
 8004a76:	f240 1111 	movw	r1, #273	; 0x111
 8004a7a:	4863      	ldr	r0, [pc, #396]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004a7c:	f7fd f852 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 8004a80:	4b5f      	ldr	r3, [pc, #380]	; (8004c00 <TouchSwitchActivity+0x2e0>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 1);
 8004a86:	2101      	movs	r1, #1
 8004a88:	2001      	movs	r0, #1
 8004a8a:	f7fd ff59 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004a8e:	e116      	b.n	8004cbe <TouchSwitchActivity+0x39e>
					}

				}
				//
				// SECOND SWITCH
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8004a90:	88bb      	ldrh	r3, [r7, #4]
 8004a92:	2b5e      	cmp	r3, #94	; 0x5e
 8004a94:	d954      	bls.n	8004b40 <TouchSwitchActivity+0x220>
 8004a96:	88bb      	ldrh	r3, [r7, #4]
 8004a98:	2b74      	cmp	r3, #116	; 0x74
 8004a9a:	d851      	bhi.n	8004b40 <TouchSwitchActivity+0x220>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004a9c:	4b58      	ldr	r3, [pc, #352]	; (8004c00 <TouchSwitchActivity+0x2e0>)
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d026      	beq.n	8004af2 <TouchSwitchActivity+0x1d2>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8004aa4:	2008      	movs	r0, #8
 8004aa6:	f001 f98d 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004aaa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004aae:	9301      	str	r3, [sp, #4]
 8004ab0:	2305      	movs	r3, #5
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2315      	movs	r3, #21
 8004ab6:	2221      	movs	r2, #33	; 0x21
 8004ab8:	215f      	movs	r1, #95	; 0x5f
 8004aba:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004abe:	f7fc fdc6 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004ac2:	4950      	ldr	r1, [pc, #320]	; (8004c04 <TouchSwitchActivity+0x2e4>)
 8004ac4:	4850      	ldr	r0, [pc, #320]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004ac6:	f009 fd55 	bl	800e574 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004aca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2261      	movs	r2, #97	; 0x61
 8004ad8:	f240 1111 	movw	r1, #273	; 0x111
 8004adc:	484a      	ldr	r0, [pc, #296]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004ade:	f7fd f821 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 8004ae2:	4b47      	ldr	r3, [pc, #284]	; (8004c00 <TouchSwitchActivity+0x2e0>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 0);
 8004ae8:	2100      	movs	r1, #0
 8004aea:	2002      	movs	r0, #2
 8004aec:	f7fd ff28 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004af0:	e0e5      	b.n	8004cbe <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8004af2:	2007      	movs	r0, #7
 8004af4:	f001 f966 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004af8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004afc:	9301      	str	r3, [sp, #4]
 8004afe:	2305      	movs	r3, #5
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2315      	movs	r3, #21
 8004b04:	2221      	movs	r2, #33	; 0x21
 8004b06:	215f      	movs	r1, #95	; 0x5f
 8004b08:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004b0c:	f7fc fd9f 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004b10:	493e      	ldr	r1, [pc, #248]	; (8004c0c <TouchSwitchActivity+0x2ec>)
 8004b12:	483d      	ldr	r0, [pc, #244]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004b14:	f009 fd2e 	bl	800e574 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004b18:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	2300      	movs	r3, #0
 8004b24:	2261      	movs	r2, #97	; 0x61
 8004b26:	f240 1111 	movw	r1, #273	; 0x111
 8004b2a:	4837      	ldr	r0, [pc, #220]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004b2c:	f7fc fffa 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 8004b30:	4b33      	ldr	r3, [pc, #204]	; (8004c00 <TouchSwitchActivity+0x2e0>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 1);
 8004b36:	2101      	movs	r1, #1
 8004b38:	2002      	movs	r0, #2
 8004b3a:	f7fd ff01 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004b3e:	e0be      	b.n	8004cbe <TouchSwitchActivity+0x39e>
					}
				}
				//
				// THIRD SWITCH
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8004b40:	88bb      	ldrh	r3, [r7, #4]
 8004b42:	2b7c      	cmp	r3, #124	; 0x7c
 8004b44:	d964      	bls.n	8004c10 <TouchSwitchActivity+0x2f0>
 8004b46:	88bb      	ldrh	r3, [r7, #4]
 8004b48:	2b92      	cmp	r3, #146	; 0x92
 8004b4a:	d861      	bhi.n	8004c10 <TouchSwitchActivity+0x2f0>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004b4c:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <TouchSwitchActivity+0x2e0>)
 8004b4e:	789b      	ldrb	r3, [r3, #2]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d026      	beq.n	8004ba2 <TouchSwitchActivity+0x282>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8004b54:	200a      	movs	r0, #10
 8004b56:	f001 f935 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004b5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	2305      	movs	r3, #5
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2315      	movs	r3, #21
 8004b66:	2221      	movs	r2, #33	; 0x21
 8004b68:	217d      	movs	r1, #125	; 0x7d
 8004b6a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004b6e:	f7fc fd6e 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004b72:	4924      	ldr	r1, [pc, #144]	; (8004c04 <TouchSwitchActivity+0x2e4>)
 8004b74:	4824      	ldr	r0, [pc, #144]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004b76:	f009 fcfd 	bl	800e574 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004b7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	2300      	movs	r3, #0
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	2300      	movs	r3, #0
 8004b86:	227f      	movs	r2, #127	; 0x7f
 8004b88:	f240 1111 	movw	r1, #273	; 0x111
 8004b8c:	481e      	ldr	r0, [pc, #120]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004b8e:	f7fc ffc9 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 8004b92:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <TouchSwitchActivity+0x2e0>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 0);
 8004b98:	2100      	movs	r1, #0
 8004b9a:	2003      	movs	r0, #3
 8004b9c:	f7fd fed0 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004ba0:	e08d      	b.n	8004cbe <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8004ba2:	2009      	movs	r0, #9
 8004ba4:	f001 f90e 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ba8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004bac:	9301      	str	r3, [sp, #4]
 8004bae:	2305      	movs	r3, #5
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	2315      	movs	r3, #21
 8004bb4:	2221      	movs	r2, #33	; 0x21
 8004bb6:	217d      	movs	r1, #125	; 0x7d
 8004bb8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004bbc:	f7fc fd47 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004bc0:	4912      	ldr	r1, [pc, #72]	; (8004c0c <TouchSwitchActivity+0x2ec>)
 8004bc2:	4811      	ldr	r0, [pc, #68]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004bc4:	f009 fcd6 	bl	800e574 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004bc8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	227f      	movs	r2, #127	; 0x7f
 8004bd6:	f240 1111 	movw	r1, #273	; 0x111
 8004bda:	480b      	ldr	r0, [pc, #44]	; (8004c08 <TouchSwitchActivity+0x2e8>)
 8004bdc:	f7fc ffa2 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <TouchSwitchActivity+0x2e0>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 1);
 8004be6:	2101      	movs	r1, #1
 8004be8:	2003      	movs	r0, #3
 8004bea:	f7fd fea9 	bl	8002940 <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004bee:	e066      	b.n	8004cbe <TouchSwitchActivity+0x39e>
 8004bf0:	20000258 	.word	0x20000258
 8004bf4:	2000025c 	.word	0x2000025c
 8004bf8:	20000255 	.word	0x20000255
 8004bfc:	080132a8 	.word	0x080132a8
 8004c00:	20000274 	.word	0x20000274
 8004c04:	08012478 	.word	0x08012478
 8004c08:	200002c8 	.word	0x200002c8
 8004c0c:	0801247c 	.word	0x0801247c
					}
				}
				//
				// FOURTH SWITCH
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8004c10:	88bb      	ldrh	r3, [r7, #4]
 8004c12:	2b9a      	cmp	r3, #154	; 0x9a
 8004c14:	d953      	bls.n	8004cbe <TouchSwitchActivity+0x39e>
 8004c16:	88bb      	ldrh	r3, [r7, #4]
 8004c18:	2bb0      	cmp	r3, #176	; 0xb0
 8004c1a:	d850      	bhi.n	8004cbe <TouchSwitchActivity+0x39e>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8004c1c:	4b2e      	ldr	r3, [pc, #184]	; (8004cd8 <TouchSwitchActivity+0x3b8>)
 8004c1e:	78db      	ldrb	r3, [r3, #3]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d026      	beq.n	8004c72 <TouchSwitchActivity+0x352>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8004c24:	200c      	movs	r0, #12
 8004c26:	f001 f8cd 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004c2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	2305      	movs	r3, #5
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2315      	movs	r3, #21
 8004c36:	2221      	movs	r2, #33	; 0x21
 8004c38:	219b      	movs	r1, #155	; 0x9b
 8004c3a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004c3e:	f7fc fd06 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004c42:	4926      	ldr	r1, [pc, #152]	; (8004cdc <TouchSwitchActivity+0x3bc>)
 8004c44:	4826      	ldr	r0, [pc, #152]	; (8004ce0 <TouchSwitchActivity+0x3c0>)
 8004c46:	f009 fc95 	bl	800e574 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004c4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	2300      	movs	r3, #0
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	2300      	movs	r3, #0
 8004c56:	229d      	movs	r2, #157	; 0x9d
 8004c58:	f240 1111 	movw	r1, #273	; 0x111
 8004c5c:	4820      	ldr	r0, [pc, #128]	; (8004ce0 <TouchSwitchActivity+0x3c0>)
 8004c5e:	f7fc ff61 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 8004c62:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <TouchSwitchActivity+0x3b8>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 0);
 8004c68:	2100      	movs	r1, #0
 8004c6a:	2004      	movs	r0, #4
 8004c6c:	f7fd fe68 	bl	8002940 <EEPROM_RelayStateUpdate>
 8004c70:	e025      	b.n	8004cbe <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8004c72:	200b      	movs	r0, #11
 8004c74:	f001 f8a6 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004c78:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	2305      	movs	r3, #5
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	2315      	movs	r3, #21
 8004c84:	2221      	movs	r2, #33	; 0x21
 8004c86:	219b      	movs	r1, #155	; 0x9b
 8004c88:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004c8c:	f7fc fcdf 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004c90:	4914      	ldr	r1, [pc, #80]	; (8004ce4 <TouchSwitchActivity+0x3c4>)
 8004c92:	4813      	ldr	r0, [pc, #76]	; (8004ce0 <TouchSwitchActivity+0x3c0>)
 8004c94:	f009 fc6e 	bl	800e574 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004c98:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	229d      	movs	r2, #157	; 0x9d
 8004ca6:	f240 1111 	movw	r1, #273	; 0x111
 8004caa:	480d      	ldr	r0, [pc, #52]	; (8004ce0 <TouchSwitchActivity+0x3c0>)
 8004cac:	f7fc ff3a 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <TouchSwitchActivity+0x3b8>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 1);
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	2004      	movs	r0, #4
 8004cba:	f7fd fe41 	bl	8002940 <EEPROM_RelayStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004cbe:	480a      	ldr	r0, [pc, #40]	; (8004ce8 <TouchSwitchActivity+0x3c8>)
 8004cc0:	f7fc fd16 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 8004cc4:	f002 f88e 	bl	8006de4 <HAL_GetTick>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4a08      	ldr	r2, [pc, #32]	; (8004cec <TouchSwitchActivity+0x3cc>)
 8004ccc:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000274 	.word	0x20000274
 8004cdc:	08012478 	.word	0x08012478
 8004ce0:	200002c8 	.word	0x200002c8
 8004ce4:	0801247c 	.word	0x0801247c
 8004ce8:	08015220 	.word	0x08015220
 8004cec:	20000258 	.word	0x20000258

08004cf0 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004cf6:	f7fd fac9 	bl	800228c <XPT2046_IsTouched>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 819d 	beq.w	800503c <TouchLightsActivity+0x34c>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004d02:	f002 f86f 	bl	8006de4 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	4bb0      	ldr	r3, [pc, #704]	; (8004fcc <TouchLightsActivity+0x2dc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d12:	f0c0 8193 	bcc.w	800503c <TouchLightsActivity+0x34c>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004d16:	1d3a      	adds	r2, r7, #4
 8004d18:	1dbb      	adds	r3, r7, #6
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fd fa77 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	2b09      	cmp	r3, #9
 8004d26:	d90f      	bls.n	8004d48 <TouchLightsActivity+0x58>
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	2b6e      	cmp	r3, #110	; 0x6e
 8004d2c:	d80c      	bhi.n	8004d48 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004d2e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004d30:	2bd7      	cmp	r3, #215	; 0xd7
 8004d32:	d909      	bls.n	8004d48 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004d34:	88bb      	ldrh	r3, [r7, #4]
 8004d36:	2bec      	cmp	r3, #236	; 0xec
 8004d38:	d806      	bhi.n	8004d48 <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 8004d3a:	4ba5      	ldr	r3, [pc, #660]	; (8004fd0 <TouchLightsActivity+0x2e0>)
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004d40:	4ba4      	ldr	r3, [pc, #656]	; (8004fd4 <TouchLightsActivity+0x2e4>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e174      	b.n	8005032 <TouchLightsActivity+0x342>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	2bdb      	cmp	r3, #219	; 0xdb
 8004d4c:	d910      	bls.n	8004d70 <TouchLightsActivity+0x80>
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004d54:	d20c      	bcs.n	8004d70 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004d56:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004d58:	2bd7      	cmp	r3, #215	; 0xd7
 8004d5a:	d909      	bls.n	8004d70 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004d5c:	88bb      	ldrh	r3, [r7, #4]
 8004d5e:	2bec      	cmp	r3, #236	; 0xec
 8004d60:	d806      	bhi.n	8004d70 <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 8004d62:	4b9b      	ldr	r3, [pc, #620]	; (8004fd0 <TouchLightsActivity+0x2e0>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004d68:	4b9a      	ldr	r3, [pc, #616]	; (8004fd4 <TouchLightsActivity+0x2e4>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e160      	b.n	8005032 <TouchLightsActivity+0x342>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	2b77      	cmp	r3, #119	; 0x77
 8004d74:	d90f      	bls.n	8004d96 <TouchLightsActivity+0xa6>
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2bd2      	cmp	r3, #210	; 0xd2
 8004d7a:	d80c      	bhi.n	8004d96 <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004d7c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004d7e:	2bd7      	cmp	r3, #215	; 0xd7
 8004d80:	d909      	bls.n	8004d96 <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004d82:	88bb      	ldrh	r3, [r7, #4]
 8004d84:	2bec      	cmp	r3, #236	; 0xec
 8004d86:	d806      	bhi.n	8004d96 <TouchLightsActivity+0xa6>
			{
				State = MENUTFT_WS_LED;
 8004d88:	4b91      	ldr	r3, [pc, #580]	; (8004fd0 <TouchLightsActivity+0x2e0>)
 8004d8a:	2206      	movs	r2, #6
 8004d8c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004d8e:	4b91      	ldr	r3, [pc, #580]	; (8004fd4 <TouchLightsActivity+0x2e4>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	e14d      	b.n	8005032 <TouchLightsActivity+0x342>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	2bc7      	cmp	r3, #199	; 0xc7
 8004d9a:	f240 814a 	bls.w	8005032 <TouchLightsActivity+0x342>
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	2be9      	cmp	r3, #233	; 0xe9
 8004da2:	f200 8146 	bhi.w	8005032 <TouchLightsActivity+0x342>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8004da6:	488c      	ldr	r0, [pc, #560]	; (8004fd8 <TouchLightsActivity+0x2e8>)
 8004da8:	f7fc fca2 	bl	80016f0 <EF_SetFont>

				//
				// FIRST LIGHT
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8004dac:	88bb      	ldrh	r3, [r7, #4]
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d948      	bls.n	8004e44 <TouchLightsActivity+0x154>
 8004db2:	88bb      	ldrh	r3, [r7, #4]
 8004db4:	2b56      	cmp	r3, #86	; 0x56
 8004db6:	d845      	bhi.n	8004e44 <TouchLightsActivity+0x154>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 8004db8:	4b88      	ldr	r3, [pc, #544]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <TouchLightsActivity+0x112>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8004dc0:	200e      	movs	r0, #14
 8004dc2:	f000 ffff 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004dc6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	2305      	movs	r3, #5
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2315      	movs	r3, #21
 8004dd2:	2221      	movs	r2, #33	; 0x21
 8004dd4:	2141      	movs	r1, #65	; 0x41
 8004dd6:	20c8      	movs	r0, #200	; 0xc8
 8004dd8:	f7fc fc39 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004ddc:	4980      	ldr	r1, [pc, #512]	; (8004fe0 <TouchLightsActivity+0x2f0>)
 8004dde:	4881      	ldr	r0, [pc, #516]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004de0:	f009 fbc8 	bl	800e574 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004de4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	2300      	movs	r3, #0
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2300      	movs	r3, #0
 8004df0:	2243      	movs	r2, #67	; 0x43
 8004df2:	21cb      	movs	r1, #203	; 0xcb
 8004df4:	487b      	ldr	r0, [pc, #492]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004df6:	f7fc fe95 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 8004dfa:	4b78      	ldr	r3, [pc, #480]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004e00:	e114      	b.n	800502c <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8004e02:	200d      	movs	r0, #13
 8004e04:	f000 ffde 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004e08:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	2305      	movs	r3, #5
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	2315      	movs	r3, #21
 8004e14:	2221      	movs	r2, #33	; 0x21
 8004e16:	2141      	movs	r1, #65	; 0x41
 8004e18:	20c8      	movs	r0, #200	; 0xc8
 8004e1a:	f7fc fc18 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004e1e:	4972      	ldr	r1, [pc, #456]	; (8004fe8 <TouchLightsActivity+0x2f8>)
 8004e20:	4870      	ldr	r0, [pc, #448]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004e22:	f009 fba7 	bl	800e574 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2300      	movs	r3, #0
 8004e32:	2243      	movs	r2, #67	; 0x43
 8004e34:	21cb      	movs	r1, #203	; 0xcb
 8004e36:	486b      	ldr	r0, [pc, #428]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004e38:	f7fc fe74 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 8004e3c:	4b67      	ldr	r3, [pc, #412]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]
					if(LightsButtonState[0] >= 1) // if is ON
 8004e42:	e0f3      	b.n	800502c <TouchLightsActivity+0x33c>
					}
				}
				//
				// SECOND LIGHT
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8004e44:	88bb      	ldrh	r3, [r7, #4]
 8004e46:	2b5e      	cmp	r3, #94	; 0x5e
 8004e48:	d948      	bls.n	8004edc <TouchLightsActivity+0x1ec>
 8004e4a:	88bb      	ldrh	r3, [r7, #4]
 8004e4c:	2b74      	cmp	r3, #116	; 0x74
 8004e4e:	d845      	bhi.n	8004edc <TouchLightsActivity+0x1ec>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 8004e50:	4b62      	ldr	r3, [pc, #392]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <TouchLightsActivity+0x1aa>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8004e58:	2010      	movs	r0, #16
 8004e5a:	f000 ffb3 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	2305      	movs	r3, #5
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2315      	movs	r3, #21
 8004e6a:	2221      	movs	r2, #33	; 0x21
 8004e6c:	215f      	movs	r1, #95	; 0x5f
 8004e6e:	20c8      	movs	r0, #200	; 0xc8
 8004e70:	f7fc fbed 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004e74:	495a      	ldr	r1, [pc, #360]	; (8004fe0 <TouchLightsActivity+0x2f0>)
 8004e76:	485b      	ldr	r0, [pc, #364]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004e78:	f009 fb7c 	bl	800e574 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	2300      	movs	r3, #0
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	2300      	movs	r3, #0
 8004e88:	2261      	movs	r2, #97	; 0x61
 8004e8a:	21cb      	movs	r1, #203	; 0xcb
 8004e8c:	4855      	ldr	r0, [pc, #340]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004e8e:	f7fc fe49 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 8004e92:	4b52      	ldr	r3, [pc, #328]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 8004e98:	e0c8      	b.n	800502c <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8004e9a:	200f      	movs	r0, #15
 8004e9c:	f000 ff92 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ea0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	2305      	movs	r3, #5
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	2315      	movs	r3, #21
 8004eac:	2221      	movs	r2, #33	; 0x21
 8004eae:	215f      	movs	r1, #95	; 0x5f
 8004eb0:	20c8      	movs	r0, #200	; 0xc8
 8004eb2:	f7fc fbcc 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004eb6:	494c      	ldr	r1, [pc, #304]	; (8004fe8 <TouchLightsActivity+0x2f8>)
 8004eb8:	484a      	ldr	r0, [pc, #296]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004eba:	f009 fb5b 	bl	800e574 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004ebe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2261      	movs	r2, #97	; 0x61
 8004ecc:	21cb      	movs	r1, #203	; 0xcb
 8004ece:	4845      	ldr	r0, [pc, #276]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004ed0:	f7fc fe28 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 8004ed4:	4b41      	ldr	r3, [pc, #260]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	705a      	strb	r2, [r3, #1]
					if(LightsButtonState[1] >= 1) // if is ON
 8004eda:	e0a7      	b.n	800502c <TouchLightsActivity+0x33c>
					}
				}

				//
				// THIRD LIGHT
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8004edc:	88bb      	ldrh	r3, [r7, #4]
 8004ede:	2b7c      	cmp	r3, #124	; 0x7c
 8004ee0:	d948      	bls.n	8004f74 <TouchLightsActivity+0x284>
 8004ee2:	88bb      	ldrh	r3, [r7, #4]
 8004ee4:	2b92      	cmp	r3, #146	; 0x92
 8004ee6:	d845      	bhi.n	8004f74 <TouchLightsActivity+0x284>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 8004ee8:	4b3c      	ldr	r3, [pc, #240]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004eea:	789b      	ldrb	r3, [r3, #2]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d020      	beq.n	8004f32 <TouchLightsActivity+0x242>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8004ef0:	2012      	movs	r0, #18
 8004ef2:	f000 ff67 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004ef6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	2305      	movs	r3, #5
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	2315      	movs	r3, #21
 8004f02:	2221      	movs	r2, #33	; 0x21
 8004f04:	217d      	movs	r1, #125	; 0x7d
 8004f06:	20c8      	movs	r0, #200	; 0xc8
 8004f08:	f7fc fba1 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004f0c:	4934      	ldr	r1, [pc, #208]	; (8004fe0 <TouchLightsActivity+0x2f0>)
 8004f0e:	4835      	ldr	r0, [pc, #212]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004f10:	f009 fb30 	bl	800e574 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	227f      	movs	r2, #127	; 0x7f
 8004f22:	21cb      	movs	r1, #203	; 0xcb
 8004f24:	482f      	ldr	r0, [pc, #188]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004f26:	f7fc fdfd 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 8004f2a:	4b2c      	ldr	r3, [pc, #176]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004f30:	e07c      	b.n	800502c <TouchLightsActivity+0x33c>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8004f32:	2011      	movs	r0, #17
 8004f34:	f000 ff46 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f38:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	2305      	movs	r3, #5
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	2315      	movs	r3, #21
 8004f44:	2221      	movs	r2, #33	; 0x21
 8004f46:	217d      	movs	r1, #125	; 0x7d
 8004f48:	20c8      	movs	r0, #200	; 0xc8
 8004f4a:	f7fc fb80 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004f4e:	4926      	ldr	r1, [pc, #152]	; (8004fe8 <TouchLightsActivity+0x2f8>)
 8004f50:	4824      	ldr	r0, [pc, #144]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004f52:	f009 fb0f 	bl	800e574 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	2300      	movs	r3, #0
 8004f62:	227f      	movs	r2, #127	; 0x7f
 8004f64:	21cb      	movs	r1, #203	; 0xcb
 8004f66:	481f      	ldr	r0, [pc, #124]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004f68:	f7fc fddc 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 8004f6c:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	709a      	strb	r2, [r3, #2]
					if(LightsButtonState[2] >= 1) // if is ON
 8004f72:	e05b      	b.n	800502c <TouchLightsActivity+0x33c>
					}
				}

				//
				// FOURTH LIGHT
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8004f74:	88bb      	ldrh	r3, [r7, #4]
 8004f76:	2b9a      	cmp	r3, #154	; 0x9a
 8004f78:	d958      	bls.n	800502c <TouchLightsActivity+0x33c>
 8004f7a:	88bb      	ldrh	r3, [r7, #4]
 8004f7c:	2bb0      	cmp	r3, #176	; 0xb0
 8004f7e:	d855      	bhi.n	800502c <TouchLightsActivity+0x33c>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 8004f80:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004f82:	78db      	ldrb	r3, [r3, #3]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d031      	beq.n	8004fec <TouchLightsActivity+0x2fc>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8004f88:	2014      	movs	r0, #20
 8004f8a:	f000 ff1b 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	2305      	movs	r3, #5
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	2315      	movs	r3, #21
 8004f9a:	2221      	movs	r2, #33	; 0x21
 8004f9c:	219b      	movs	r1, #155	; 0x9b
 8004f9e:	20c8      	movs	r0, #200	; 0xc8
 8004fa0:	f7fc fb55 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004fa4:	490e      	ldr	r1, [pc, #56]	; (8004fe0 <TouchLightsActivity+0x2f0>)
 8004fa6:	480f      	ldr	r0, [pc, #60]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004fa8:	f009 fae4 	bl	800e574 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	229d      	movs	r2, #157	; 0x9d
 8004fba:	21cb      	movs	r1, #203	; 0xcb
 8004fbc:	4809      	ldr	r0, [pc, #36]	; (8004fe4 <TouchLightsActivity+0x2f4>)
 8004fbe:	f7fc fdb1 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 8004fc2:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <TouchLightsActivity+0x2ec>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	70da      	strb	r2, [r3, #3]
 8004fc8:	e030      	b.n	800502c <TouchLightsActivity+0x33c>
 8004fca:	bf00      	nop
 8004fcc:	20000258 	.word	0x20000258
 8004fd0:	2000025c 	.word	0x2000025c
 8004fd4:	20000255 	.word	0x20000255
 8004fd8:	080132a8 	.word	0x080132a8
 8004fdc:	20000278 	.word	0x20000278
 8004fe0:	08012478 	.word	0x08012478
 8004fe4:	200002c8 	.word	0x200002c8
 8004fe8:	0801247c 	.word	0x0801247c
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8004fec:	2013      	movs	r0, #19
 8004fee:	f000 fee9 	bl	8005dc4 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ff2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	2305      	movs	r3, #5
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	2315      	movs	r3, #21
 8004ffe:	2221      	movs	r2, #33	; 0x21
 8005000:	219b      	movs	r1, #155	; 0x9b
 8005002:	20c8      	movs	r0, #200	; 0xc8
 8005004:	f7fc fb23 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005008:	490e      	ldr	r1, [pc, #56]	; (8005044 <TouchLightsActivity+0x354>)
 800500a:	480f      	ldr	r0, [pc, #60]	; (8005048 <TouchLightsActivity+0x358>)
 800500c:	f009 fab2 	bl	800e574 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005010:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	2300      	movs	r3, #0
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	229d      	movs	r2, #157	; 0x9d
 800501e:	21cb      	movs	r1, #203	; 0xcb
 8005020:	4809      	ldr	r0, [pc, #36]	; (8005048 <TouchLightsActivity+0x358>)
 8005022:	f7fc fd7f 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <TouchLightsActivity+0x35c>)
 8005028:	2201      	movs	r2, #1
 800502a:	70da      	strb	r2, [r3, #3]
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 800502c:	4808      	ldr	r0, [pc, #32]	; (8005050 <TouchLightsActivity+0x360>)
 800502e:	f7fc fb5f 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 8005032:	f001 fed7 	bl	8006de4 <HAL_GetTick>
 8005036:	4603      	mov	r3, r0
 8005038:	4a06      	ldr	r2, [pc, #24]	; (8005054 <TouchLightsActivity+0x364>)
 800503a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	0801247c 	.word	0x0801247c
 8005048:	200002c8 	.word	0x200002c8
 800504c:	20000278 	.word	0x20000278
 8005050:	08015220 	.word	0x08015220
 8005054:	20000258 	.word	0x20000258

08005058 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800505e:	f7fd f915 	bl	800228c <XPT2046_IsTouched>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 812a 	beq.w	80052be <TouchClockActivity+0x266>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800506a:	4897      	ldr	r0, [pc, #604]	; (80052c8 <TouchClockActivity+0x270>)
 800506c:	f7fc fb40 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005070:	f001 feb8 	bl	8006de4 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	4b95      	ldr	r3, [pc, #596]	; (80052cc <TouchClockActivity+0x274>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005080:	f0c0 811d 	bcc.w	80052be <TouchClockActivity+0x266>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005084:	1d3a      	adds	r2, r7, #4
 8005086:	1dbb      	adds	r3, r7, #6
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f7fd f8c0 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8005090:	4b8f      	ldr	r3, [pc, #572]	; (80052d0 <TouchClockActivity+0x278>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d10e      	bne.n	80050b6 <TouchClockActivity+0x5e>
				{
					Hours = DS3231_GetHour();
 8005098:	f7fd fb70 	bl	800277c <DS3231_GetHour>
 800509c:	4603      	mov	r3, r0
 800509e:	461a      	mov	r2, r3
 80050a0:	4b8c      	ldr	r3, [pc, #560]	; (80052d4 <TouchClockActivity+0x27c>)
 80050a2:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 80050a4:	f7fd fb76 	bl	8002794 <DS3231_GetMinute>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b8a      	ldr	r3, [pc, #552]	; (80052d8 <TouchClockActivity+0x280>)
 80050ae:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 80050b0:	4b87      	ldr	r3, [pc, #540]	; (80052d0 <TouchClockActivity+0x278>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	2b09      	cmp	r3, #9
 80050ba:	d90f      	bls.n	80050dc <TouchClockActivity+0x84>
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	2b6e      	cmp	r3, #110	; 0x6e
 80050c0:	d80c      	bhi.n	80050dc <TouchClockActivity+0x84>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80050c2:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80050c4:	2bd7      	cmp	r3, #215	; 0xd7
 80050c6:	d909      	bls.n	80050dc <TouchClockActivity+0x84>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80050c8:	88bb      	ldrh	r3, [r7, #4]
 80050ca:	2bec      	cmp	r3, #236	; 0xec
 80050cc:	d806      	bhi.n	80050dc <TouchClockActivity+0x84>
				{
					State = MENUTFT_PARAMETERS;
 80050ce:	4b83      	ldr	r3, [pc, #524]	; (80052dc <TouchClockActivity+0x284>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80050d4:	4b82      	ldr	r3, [pc, #520]	; (80052e0 <TouchClockActivity+0x288>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e0eb      	b.n	80052b4 <TouchClockActivity+0x25c>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	2bdb      	cmp	r3, #219	; 0xdb
 80050e0:	d927      	bls.n	8005132 <TouchClockActivity+0xda>
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80050e8:	d223      	bcs.n	8005132 <TouchClockActivity+0xda>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80050ea:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80050ec:	2bd7      	cmp	r3, #215	; 0xd7
 80050ee:	d920      	bls.n	8005132 <TouchClockActivity+0xda>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80050f0:	88bb      	ldrh	r3, [r7, #4]
 80050f2:	2bec      	cmp	r3, #236	; 0xec
 80050f4:	d81d      	bhi.n	8005132 <TouchClockActivity+0xda>
				{
					DS3231_SetHour(Hours);
 80050f6:	4b77      	ldr	r3, [pc, #476]	; (80052d4 <TouchClockActivity+0x27c>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fd fb56 	bl	80027ac <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8005100:	4b75      	ldr	r3, [pc, #468]	; (80052d8 <TouchClockActivity+0x280>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f7fd fb66 	bl	80027d6 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 800510a:	2032      	movs	r0, #50	; 0x32
 800510c:	f7fd fb75 	bl	80027fa <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8005110:	4974      	ldr	r1, [pc, #464]	; (80052e4 <TouchClockActivity+0x28c>)
 8005112:	4875      	ldr	r0, [pc, #468]	; (80052e8 <TouchClockActivity+0x290>)
 8005114:	f009 fa2e 	bl	800e574 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8005118:	f24c 6318 	movw	r3, #50712	; 0xc618
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	2301      	movs	r3, #1
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005126:	220a      	movs	r2, #10
 8005128:	212f      	movs	r1, #47	; 0x2f
 800512a:	486f      	ldr	r0, [pc, #444]	; (80052e8 <TouchClockActivity+0x290>)
 800512c:	f7fc fcfa 	bl	8001b24 <EF_PutString>
 8005130:	e0c0      	b.n	80052b4 <TouchClockActivity+0x25c>
				}

				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	2bef      	cmp	r3, #239	; 0xef
 8005136:	d953      	bls.n	80051e0 <TouchClockActivity+0x188>
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800513e:	d84f      	bhi.n	80051e0 <TouchClockActivity+0x188>
				{

					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8005140:	88bb      	ldrh	r3, [r7, #4]
 8005142:	2b4a      	cmp	r3, #74	; 0x4a
 8005144:	d923      	bls.n	800518e <TouchClockActivity+0x136>
 8005146:	88bb      	ldrh	r3, [r7, #4]
 8005148:	2b60      	cmp	r3, #96	; 0x60
 800514a:	d820      	bhi.n	800518e <TouchClockActivity+0x136>
					{
						if(Hours < 24)
 800514c:	4b61      	ldr	r3, [pc, #388]	; (80052d4 <TouchClockActivity+0x27c>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b17      	cmp	r3, #23
 8005152:	d806      	bhi.n	8005162 <TouchClockActivity+0x10a>
						{
							Hours++;
 8005154:	4b5f      	ldr	r3, [pc, #380]	; (80052d4 <TouchClockActivity+0x27c>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	3301      	adds	r3, #1
 800515a:	b2da      	uxtb	r2, r3
 800515c:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <TouchClockActivity+0x27c>)
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e002      	b.n	8005168 <TouchClockActivity+0x110>
						}
						else
						{
							Hours = 1;
 8005162:	4b5c      	ldr	r3, [pc, #368]	; (80052d4 <TouchClockActivity+0x27c>)
 8005164:	2201      	movs	r2, #1
 8005166:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 8005168:	4b5a      	ldr	r3, [pc, #360]	; (80052d4 <TouchClockActivity+0x27c>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	495f      	ldr	r1, [pc, #380]	; (80052ec <TouchClockActivity+0x294>)
 8005170:	485d      	ldr	r0, [pc, #372]	; (80052e8 <TouchClockActivity+0x290>)
 8005172:	f009 f9ff 	bl	800e574 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005176:	f24c 6318 	movw	r3, #50712	; 0xc618
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	2301      	movs	r3, #1
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	2246      	movs	r2, #70	; 0x46
 8005184:	21a0      	movs	r1, #160	; 0xa0
 8005186:	4858      	ldr	r0, [pc, #352]	; (80052e8 <TouchClockActivity+0x290>)
 8005188:	f7fc fccc 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 800518c:	e091      	b.n	80052b2 <TouchClockActivity+0x25a>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 800518e:	88bb      	ldrh	r3, [r7, #4]
 8005190:	2b72      	cmp	r3, #114	; 0x72
 8005192:	f240 808e 	bls.w	80052b2 <TouchClockActivity+0x25a>
 8005196:	88bb      	ldrh	r3, [r7, #4]
 8005198:	2b88      	cmp	r3, #136	; 0x88
 800519a:	f200 808a 	bhi.w	80052b2 <TouchClockActivity+0x25a>
					{
						if(Minutes < 59)
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <TouchClockActivity+0x280>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b3a      	cmp	r3, #58	; 0x3a
 80051a4:	d806      	bhi.n	80051b4 <TouchClockActivity+0x15c>
						{
							Minutes++;
 80051a6:	4b4c      	ldr	r3, [pc, #304]	; (80052d8 <TouchClockActivity+0x280>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	3301      	adds	r3, #1
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	4b4a      	ldr	r3, [pc, #296]	; (80052d8 <TouchClockActivity+0x280>)
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	e002      	b.n	80051ba <TouchClockActivity+0x162>
						}
						else
						{
							Minutes = 0;
 80051b4:	4b48      	ldr	r3, [pc, #288]	; (80052d8 <TouchClockActivity+0x280>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 80051ba:	4b47      	ldr	r3, [pc, #284]	; (80052d8 <TouchClockActivity+0x280>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	494a      	ldr	r1, [pc, #296]	; (80052ec <TouchClockActivity+0x294>)
 80051c2:	4849      	ldr	r0, [pc, #292]	; (80052e8 <TouchClockActivity+0x290>)
 80051c4:	f009 f9d6 	bl	800e574 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80051c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	2301      	movs	r3, #1
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	2300      	movs	r3, #0
 80051d4:	226e      	movs	r2, #110	; 0x6e
 80051d6:	21a0      	movs	r1, #160	; 0xa0
 80051d8:	4843      	ldr	r0, [pc, #268]	; (80052e8 <TouchClockActivity+0x290>)
 80051da:	f7fc fca3 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 80051de:	e068      	b.n	80052b2 <TouchClockActivity+0x25a>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80051e6:	d365      	bcc.n	80052b4 <TouchClockActivity+0x25c>
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80051ee:	d861      	bhi.n	80052b4 <TouchClockActivity+0x25c>
				{
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 80051f0:	88bb      	ldrh	r3, [r7, #4]
 80051f2:	2b4a      	cmp	r3, #74	; 0x4a
 80051f4:	d923      	bls.n	800523e <TouchClockActivity+0x1e6>
 80051f6:	88bb      	ldrh	r3, [r7, #4]
 80051f8:	2b60      	cmp	r3, #96	; 0x60
 80051fa:	d820      	bhi.n	800523e <TouchClockActivity+0x1e6>
					{

						if(Hours < 19)
 80051fc:	4b35      	ldr	r3, [pc, #212]	; (80052d4 <TouchClockActivity+0x27c>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b12      	cmp	r3, #18
 8005202:	d806      	bhi.n	8005212 <TouchClockActivity+0x1ba>
						{
							Hours = Hours + 6;
 8005204:	4b33      	ldr	r3, [pc, #204]	; (80052d4 <TouchClockActivity+0x27c>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	3306      	adds	r3, #6
 800520a:	b2da      	uxtb	r2, r3
 800520c:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <TouchClockActivity+0x27c>)
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e002      	b.n	8005218 <TouchClockActivity+0x1c0>
						}
						else
						{
							Hours = 1;
 8005212:	4b30      	ldr	r3, [pc, #192]	; (80052d4 <TouchClockActivity+0x27c>)
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 8005218:	4b2e      	ldr	r3, [pc, #184]	; (80052d4 <TouchClockActivity+0x27c>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	4933      	ldr	r1, [pc, #204]	; (80052ec <TouchClockActivity+0x294>)
 8005220:	4831      	ldr	r0, [pc, #196]	; (80052e8 <TouchClockActivity+0x290>)
 8005222:	f009 f9a7 	bl	800e574 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005226:	f24c 6318 	movw	r3, #50712	; 0xc618
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	2301      	movs	r3, #1
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2300      	movs	r3, #0
 8005232:	2246      	movs	r2, #70	; 0x46
 8005234:	219d      	movs	r1, #157	; 0x9d
 8005236:	482c      	ldr	r0, [pc, #176]	; (80052e8 <TouchClockActivity+0x290>)
 8005238:	f7fc fc74 	bl	8001b24 <EF_PutString>
 800523c:	e035      	b.n	80052aa <TouchClockActivity+0x252>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 800523e:	88bb      	ldrh	r3, [r7, #4]
 8005240:	2b72      	cmp	r3, #114	; 0x72
 8005242:	d932      	bls.n	80052aa <TouchClockActivity+0x252>
 8005244:	88bb      	ldrh	r3, [r7, #4]
 8005246:	2b88      	cmp	r3, #136	; 0x88
 8005248:	d82f      	bhi.n	80052aa <TouchClockActivity+0x252>
					{
						if(Minutes < 49)
 800524a:	4b23      	ldr	r3, [pc, #140]	; (80052d8 <TouchClockActivity+0x280>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b30      	cmp	r3, #48	; 0x30
 8005250:	d806      	bhi.n	8005260 <TouchClockActivity+0x208>
						{
							Minutes = Minutes +10;
 8005252:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <TouchClockActivity+0x280>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	330a      	adds	r3, #10
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <TouchClockActivity+0x280>)
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e012      	b.n	8005286 <TouchClockActivity+0x22e>
						}
						else
						{
							Minutes = (Minutes + 10) % 60;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <TouchClockActivity+0x280>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	f103 020a 	add.w	r2, r3, #10
 8005268:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <TouchClockActivity+0x298>)
 800526a:	fb83 1302 	smull	r1, r3, r3, r2
 800526e:	4413      	add	r3, r2
 8005270:	1159      	asrs	r1, r3, #5
 8005272:	17d3      	asrs	r3, r2, #31
 8005274:	1ac9      	subs	r1, r1, r3
 8005276:	460b      	mov	r3, r1
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a5b      	subs	r3, r3, r1
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	1ad1      	subs	r1, r2, r3
 8005280:	b2ca      	uxtb	r2, r1
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <TouchClockActivity+0x280>)
 8005284:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <TouchClockActivity+0x280>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	4917      	ldr	r1, [pc, #92]	; (80052ec <TouchClockActivity+0x294>)
 800528e:	4816      	ldr	r0, [pc, #88]	; (80052e8 <TouchClockActivity+0x290>)
 8005290:	f009 f970 	bl	800e574 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005294:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	2301      	movs	r3, #1
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2300      	movs	r3, #0
 80052a0:	226e      	movs	r2, #110	; 0x6e
 80052a2:	219c      	movs	r1, #156	; 0x9c
 80052a4:	4810      	ldr	r0, [pc, #64]	; (80052e8 <TouchClockActivity+0x290>)
 80052a6:	f7fc fc3d 	bl	8001b24 <EF_PutString>

					}
					EF_SetFont(&arialBlack_20ptFontInfo);
 80052aa:	4807      	ldr	r0, [pc, #28]	; (80052c8 <TouchClockActivity+0x270>)
 80052ac:	f7fc fa20 	bl	80016f0 <EF_SetFont>
 80052b0:	e000      	b.n	80052b4 <TouchClockActivity+0x25c>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 80052b2:	bf00      	nop
				}
				TimerTouch = HAL_GetTick();
 80052b4:	f001 fd96 	bl	8006de4 <HAL_GetTick>
 80052b8:	4603      	mov	r3, r0
 80052ba:	4a04      	ldr	r2, [pc, #16]	; (80052cc <TouchClockActivity+0x274>)
 80052bc:	6013      	str	r3, [r2, #0]
			}
		}
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	08015220 	.word	0x08015220
 80052cc:	20000258 	.word	0x20000258
 80052d0:	20000256 	.word	0x20000256
 80052d4:	20000030 	.word	0x20000030
 80052d8:	20000031 	.word	0x20000031
 80052dc:	2000025c 	.word	0x2000025c
 80052e0:	20000255 	.word	0x20000255
 80052e4:	08012480 	.word	0x08012480
 80052e8:	200002c8 	.word	0x200002c8
 80052ec:	08012490 	.word	0x08012490
 80052f0:	88888889 	.word	0x88888889

080052f4 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 80052fa:	f7fc ffc7 	bl	800228c <XPT2046_IsTouched>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8106 	beq.w	8005512 <TouchPredefinedActivityActivity+0x21e>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005306:	f001 fd6d 	bl	8006de4 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	4b83      	ldr	r3, [pc, #524]	; (800551c <TouchPredefinedActivityActivity+0x228>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005316:	f0c0 80fc 	bcc.w	8005512 <TouchPredefinedActivityActivity+0x21e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800531a:	1d3a      	adds	r2, r7, #4
 800531c:	1dbb      	adds	r3, r7, #6
 800531e:	4611      	mov	r1, r2
 8005320:	4618      	mov	r0, r3
 8005322:	f7fc ff75 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 8005326:	487e      	ldr	r0, [pc, #504]	; (8005520 <TouchPredefinedActivityActivity+0x22c>)
 8005328:	f7fc f9e2 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	2b09      	cmp	r3, #9
 8005330:	d90f      	bls.n	8005352 <TouchPredefinedActivityActivity+0x5e>
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	2b6e      	cmp	r3, #110	; 0x6e
 8005336:	d80c      	bhi.n	8005352 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005338:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800533a:	2bd7      	cmp	r3, #215	; 0xd7
 800533c:	d909      	bls.n	8005352 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800533e:	88bb      	ldrh	r3, [r7, #4]
 8005340:	2bec      	cmp	r3, #236	; 0xec
 8005342:	d806      	bhi.n	8005352 <TouchPredefinedActivityActivity+0x5e>
			{
				State = MENUTFT_SWITCH;
 8005344:	4b77      	ldr	r3, [pc, #476]	; (8005524 <TouchPredefinedActivityActivity+0x230>)
 8005346:	2202      	movs	r2, #2
 8005348:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800534a:	4b77      	ldr	r3, [pc, #476]	; (8005528 <TouchPredefinedActivityActivity+0x234>)
 800534c:	2201      	movs	r2, #1
 800534e:	701a      	strb	r2, [r3, #0]
 8005350:	e0da      	b.n	8005508 <TouchPredefinedActivityActivity+0x214>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	2b63      	cmp	r3, #99	; 0x63
 8005356:	f240 80d7 	bls.w	8005508 <TouchPredefinedActivityActivity+0x214>
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	2bdc      	cmp	r3, #220	; 0xdc
 800535e:	f200 80d3 	bhi.w	8005508 <TouchPredefinedActivityActivity+0x214>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8005362:	88bb      	ldrh	r3, [r7, #4]
 8005364:	2b3b      	cmp	r3, #59	; 0x3b
 8005366:	d966      	bls.n	8005436 <TouchPredefinedActivityActivity+0x142>
 8005368:	88bb      	ldrh	r3, [r7, #4]
 800536a:	2b64      	cmp	r3, #100	; 0x64
 800536c:	d863      	bhi.n	8005436 <TouchPredefinedActivityActivity+0x142>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 800536e:	4b6f      	ldr	r3, [pc, #444]	; (800552c <TouchPredefinedActivityActivity+0x238>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d02f      	beq.n	80053d6 <TouchPredefinedActivityActivity+0xe2>
					{
						ActivityButtonState[0] = 0;
 8005376:	4b6d      	ldr	r3, [pc, #436]	; (800552c <TouchPredefinedActivityActivity+0x238>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800537c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	230a      	movs	r3, #10
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2328      	movs	r3, #40	; 0x28
 8005388:	2278      	movs	r2, #120	; 0x78
 800538a:	213c      	movs	r1, #60	; 0x3c
 800538c:	2064      	movs	r0, #100	; 0x64
 800538e:	f7fc f95e 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8005392:	4967      	ldr	r1, [pc, #412]	; (8005530 <TouchPredefinedActivityActivity+0x23c>)
 8005394:	4867      	ldr	r0, [pc, #412]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 8005396:	f009 f8ed 	bl	800e574 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800539a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800539e:	9301      	str	r3, [sp, #4]
 80053a0:	2300      	movs	r3, #0
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	223e      	movs	r2, #62	; 0x3e
 80053a8:	2177      	movs	r1, #119	; 0x77
 80053aa:	4862      	ldr	r0, [pc, #392]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 80053ac:	f7fc fbba 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 80053b0:	4961      	ldr	r1, [pc, #388]	; (8005538 <TouchPredefinedActivityActivity+0x244>)
 80053b2:	4860      	ldr	r0, [pc, #384]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 80053b4:	f009 f8de 	bl	800e574 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	2300      	movs	r3, #0
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	2250      	movs	r2, #80	; 0x50
 80053c6:	2193      	movs	r1, #147	; 0x93
 80053c8:	485a      	ldr	r0, [pc, #360]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 80053ca:	f7fc fbab 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 80053ce:	2000      	movs	r0, #0
 80053d0:	f7fe fc4c 	bl	8003c6c <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 80053d4:	e098      	b.n	8005508 <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 80053d6:	4b55      	ldr	r3, [pc, #340]	; (800552c <TouchPredefinedActivityActivity+0x238>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80053dc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	230a      	movs	r3, #10
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	2328      	movs	r3, #40	; 0x28
 80053e8:	2278      	movs	r2, #120	; 0x78
 80053ea:	213c      	movs	r1, #60	; 0x3c
 80053ec:	2064      	movs	r0, #100	; 0x64
 80053ee:	f7fc f92e 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 80053f2:	494f      	ldr	r1, [pc, #316]	; (8005530 <TouchPredefinedActivityActivity+0x23c>)
 80053f4:	484f      	ldr	r0, [pc, #316]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 80053f6:	f009 f8bd 	bl	800e574 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80053fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80053fe:	9301      	str	r3, [sp, #4]
 8005400:	2300      	movs	r3, #0
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	2300      	movs	r3, #0
 8005406:	223e      	movs	r2, #62	; 0x3e
 8005408:	2177      	movs	r1, #119	; 0x77
 800540a:	484a      	ldr	r0, [pc, #296]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 800540c:	f7fc fb8a 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8005410:	494a      	ldr	r1, [pc, #296]	; (800553c <TouchPredefinedActivityActivity+0x248>)
 8005412:	4848      	ldr	r0, [pc, #288]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 8005414:	f009 f8ae 	bl	800e574 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005418:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	2300      	movs	r3, #0
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	2300      	movs	r3, #0
 8005424:	2250      	movs	r2, #80	; 0x50
 8005426:	2193      	movs	r1, #147	; 0x93
 8005428:	4842      	ldr	r0, [pc, #264]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 800542a:	f7fc fb7b 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 800542e:	2001      	movs	r0, #1
 8005430:	f7fe fc1c 	bl	8003c6c <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8005434:	e068      	b.n	8005508 <TouchPredefinedActivityActivity+0x214>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8005436:	88bb      	ldrh	r3, [r7, #4]
 8005438:	2b77      	cmp	r3, #119	; 0x77
 800543a:	d965      	bls.n	8005508 <TouchPredefinedActivityActivity+0x214>
 800543c:	88bb      	ldrh	r3, [r7, #4]
 800543e:	2ba0      	cmp	r3, #160	; 0xa0
 8005440:	d862      	bhi.n	8005508 <TouchPredefinedActivityActivity+0x214>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 8005442:	4b3a      	ldr	r3, [pc, #232]	; (800552c <TouchPredefinedActivityActivity+0x238>)
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d02f      	beq.n	80054aa <TouchPredefinedActivityActivity+0x1b6>
					{
						ActivityButtonState[1] = 0;
 800544a:	4b38      	ldr	r3, [pc, #224]	; (800552c <TouchPredefinedActivityActivity+0x238>)
 800544c:	2200      	movs	r2, #0
 800544e:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005450:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	230a      	movs	r3, #10
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	2328      	movs	r3, #40	; 0x28
 800545c:	2278      	movs	r2, #120	; 0x78
 800545e:	2178      	movs	r1, #120	; 0x78
 8005460:	2064      	movs	r0, #100	; 0x64
 8005462:	f7fc f8f4 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 8005466:	4936      	ldr	r1, [pc, #216]	; (8005540 <TouchPredefinedActivityActivity+0x24c>)
 8005468:	4832      	ldr	r0, [pc, #200]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 800546a:	f009 f883 	bl	800e574 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800546e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	2300      	movs	r3, #0
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	2300      	movs	r3, #0
 800547a:	227a      	movs	r2, #122	; 0x7a
 800547c:	2169      	movs	r1, #105	; 0x69
 800547e:	482d      	ldr	r0, [pc, #180]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 8005480:	f7fc fb50 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8005484:	492c      	ldr	r1, [pc, #176]	; (8005538 <TouchPredefinedActivityActivity+0x244>)
 8005486:	482b      	ldr	r0, [pc, #172]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 8005488:	f009 f874 	bl	800e574 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800548c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	2300      	movs	r3, #0
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	2300      	movs	r3, #0
 8005498:	228c      	movs	r2, #140	; 0x8c
 800549a:	2193      	movs	r1, #147	; 0x93
 800549c:	4825      	ldr	r0, [pc, #148]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 800549e:	f7fc fb41 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 80054a2:	2000      	movs	r0, #0
 80054a4:	f7fe fbca 	bl	8003c3c <predefinedActivityCzyszczenie>
 80054a8:	e02e      	b.n	8005508 <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 80054aa:	4b20      	ldr	r3, [pc, #128]	; (800552c <TouchPredefinedActivityActivity+0x238>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80054b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	230a      	movs	r3, #10
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	2328      	movs	r3, #40	; 0x28
 80054bc:	2278      	movs	r2, #120	; 0x78
 80054be:	2178      	movs	r1, #120	; 0x78
 80054c0:	2064      	movs	r0, #100	; 0x64
 80054c2:	f7fc f8c4 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 80054c6:	491e      	ldr	r1, [pc, #120]	; (8005540 <TouchPredefinedActivityActivity+0x24c>)
 80054c8:	481a      	ldr	r0, [pc, #104]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 80054ca:	f009 f853 	bl	800e574 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80054ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80054d2:	9301      	str	r3, [sp, #4]
 80054d4:	2300      	movs	r3, #0
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	2300      	movs	r3, #0
 80054da:	227a      	movs	r2, #122	; 0x7a
 80054dc:	2169      	movs	r1, #105	; 0x69
 80054de:	4815      	ldr	r0, [pc, #84]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 80054e0:	f7fc fb20 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 80054e4:	4915      	ldr	r1, [pc, #84]	; (800553c <TouchPredefinedActivityActivity+0x248>)
 80054e6:	4813      	ldr	r0, [pc, #76]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 80054e8:	f009 f844 	bl	800e574 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80054ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80054f0:	9301      	str	r3, [sp, #4]
 80054f2:	2300      	movs	r3, #0
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	2300      	movs	r3, #0
 80054f8:	228c      	movs	r2, #140	; 0x8c
 80054fa:	2193      	movs	r1, #147	; 0x93
 80054fc:	480d      	ldr	r0, [pc, #52]	; (8005534 <TouchPredefinedActivityActivity+0x240>)
 80054fe:	f7fc fb11 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 8005502:	2001      	movs	r0, #1
 8005504:	f7fe fb9a 	bl	8003c3c <predefinedActivityCzyszczenie>
					}
				}
			}
			TimerTouch = HAL_GetTick();
 8005508:	f001 fc6c 	bl	8006de4 <HAL_GetTick>
 800550c:	4603      	mov	r3, r0
 800550e:	4a03      	ldr	r2, [pc, #12]	; (800551c <TouchPredefinedActivityActivity+0x228>)
 8005510:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000258 	.word	0x20000258
 8005520:	080132a8 	.word	0x080132a8
 8005524:	2000025c 	.word	0x2000025c
 8005528:	20000255 	.word	0x20000255
 800552c:	2000027c 	.word	0x2000027c
 8005530:	08012498 	.word	0x08012498
 8005534:	200002c8 	.word	0x200002c8
 8005538:	08012478 	.word	0x08012478
 800553c:	0801247c 	.word	0x0801247c
 8005540:	080124a4 	.word	0x080124a4

08005544 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800554a:	f7fc fe9f 	bl	800228c <XPT2046_IsTouched>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 819d 	beq.w	8005890 <TouchWSLedActivity+0x34c>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005556:	48ae      	ldr	r0, [pc, #696]	; (8005810 <TouchWSLedActivity+0x2cc>)
 8005558:	f7fc f8ca 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800555c:	f001 fc42 	bl	8006de4 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	4bac      	ldr	r3, [pc, #688]	; (8005814 <TouchWSLedActivity+0x2d0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800556c:	f0c0 8190 	bcc.w	8005890 <TouchWSLedActivity+0x34c>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005570:	1d3a      	adds	r2, r7, #4
 8005572:	1dbb      	adds	r3, r7, #6
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f7fc fe4a 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 800557c:	4ba6      	ldr	r3, [pc, #664]	; (8005818 <TouchWSLedActivity+0x2d4>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d10b      	bne.n	800559c <TouchWSLedActivity+0x58>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8005584:	bf00      	nop
 8005586:	2201      	movs	r2, #1
 8005588:	49a4      	ldr	r1, [pc, #656]	; (800581c <TouchWSLedActivity+0x2d8>)
 800558a:	2001      	movs	r0, #1
 800558c:	f7fd f992 	bl	80028b4 <eeprom_read>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f7      	bne.n	8005586 <TouchWSLedActivity+0x42>
					WSLedChangeFlag = 0;
 8005596:	4ba2      	ldr	r3, [pc, #648]	; (8005820 <TouchWSLedActivity+0x2dc>)
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	2b09      	cmp	r3, #9
 80055a0:	d90f      	bls.n	80055c2 <TouchWSLedActivity+0x7e>
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	2b6e      	cmp	r3, #110	; 0x6e
 80055a6:	d80c      	bhi.n	80055c2 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80055a8:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80055aa:	2bd7      	cmp	r3, #215	; 0xd7
 80055ac:	d909      	bls.n	80055c2 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80055ae:	88bb      	ldrh	r3, [r7, #4]
 80055b0:	2bec      	cmp	r3, #236	; 0xec
 80055b2:	d806      	bhi.n	80055c2 <TouchWSLedActivity+0x7e>
				{
					State = MENUTFT_LIGHTS;
 80055b4:	4b9b      	ldr	r3, [pc, #620]	; (8005824 <TouchWSLedActivity+0x2e0>)
 80055b6:	2205      	movs	r2, #5
 80055b8:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80055ba:	4b9b      	ldr	r3, [pc, #620]	; (8005828 <TouchWSLedActivity+0x2e4>)
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e161      	b.n	8005886 <TouchWSLedActivity+0x342>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 80055c2:	88bb      	ldrh	r3, [r7, #4]
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	f240 80af 	bls.w	8005728 <TouchWSLedActivity+0x1e4>
 80055ca:	88bb      	ldrh	r3, [r7, #4]
 80055cc:	2b56      	cmp	r3, #86	; 0x56
 80055ce:	f200 80ab 	bhi.w	8005728 <TouchWSLedActivity+0x1e4>
				{

					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	2bd8      	cmp	r3, #216	; 0xd8
 80055d6:	d92f      	bls.n	8005638 <TouchWSLedActivity+0xf4>
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	2bf7      	cmp	r3, #247	; 0xf7
 80055dc:	d82c      	bhi.n	8005638 <TouchWSLedActivity+0xf4>
					{
						if(NrOfLeds < 98)
 80055de:	4b8f      	ldr	r3, [pc, #572]	; (800581c <TouchWSLedActivity+0x2d8>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b61      	cmp	r3, #97	; 0x61
 80055e4:	d806      	bhi.n	80055f4 <TouchWSLedActivity+0xb0>
						{
							NrOfLeds++;
 80055e6:	4b8d      	ldr	r3, [pc, #564]	; (800581c <TouchWSLedActivity+0x2d8>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	3301      	adds	r3, #1
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4b8b      	ldr	r3, [pc, #556]	; (800581c <TouchWSLedActivity+0x2d8>)
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	e002      	b.n	80055fa <TouchWSLedActivity+0xb6>
						}
						else
						{
							NrOfLeds = 1;
 80055f4:	4b89      	ldr	r3, [pc, #548]	; (800581c <TouchWSLedActivity+0x2d8>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	701a      	strb	r2, [r3, #0]
						}
						if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 80055fa:	4b88      	ldr	r3, [pc, #544]	; (800581c <TouchWSLedActivity+0x2d8>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b09      	cmp	r3, #9
 8005600:	d807      	bhi.n	8005612 <TouchWSLedActivity+0xce>
 8005602:	4b86      	ldr	r3, [pc, #536]	; (800581c <TouchWSLedActivity+0x2d8>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	4988      	ldr	r1, [pc, #544]	; (800582c <TouchWSLedActivity+0x2e8>)
 800560a:	4889      	ldr	r0, [pc, #548]	; (8005830 <TouchWSLedActivity+0x2ec>)
 800560c:	f008 ffb2 	bl	800e574 <siprintf>
 8005610:	e006      	b.n	8005620 <TouchWSLedActivity+0xdc>
						else sprintf((char*)Msg, " %d", NrOfLeds);
 8005612:	4b82      	ldr	r3, [pc, #520]	; (800581c <TouchWSLedActivity+0x2d8>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	4986      	ldr	r1, [pc, #536]	; (8005834 <TouchWSLedActivity+0x2f0>)
 800561a:	4885      	ldr	r0, [pc, #532]	; (8005830 <TouchWSLedActivity+0x2ec>)
 800561c:	f008 ffaa 	bl	800e574 <siprintf>
						EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005620:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	2301      	movs	r3, #1
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	2300      	movs	r3, #0
 800562c:	223c      	movs	r2, #60	; 0x3c
 800562e:	21ac      	movs	r1, #172	; 0xac
 8005630:	487f      	ldr	r0, [pc, #508]	; (8005830 <TouchWSLedActivity+0x2ec>)
 8005632:	f7fc fa77 	bl	8001b24 <EF_PutString>
 8005636:	e076      	b.n	8005726 <TouchWSLedActivity+0x1e2>
					}
					else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	2bfb      	cmp	r3, #251	; 0xfb
 800563c:	d941      	bls.n	80056c2 <TouchWSLedActivity+0x17e>
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8005644:	d83d      	bhi.n	80056c2 <TouchWSLedActivity+0x17e>
					{
						if(NrOfLeds < 90)
 8005646:	4b75      	ldr	r3, [pc, #468]	; (800581c <TouchWSLedActivity+0x2d8>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b59      	cmp	r3, #89	; 0x59
 800564c:	d806      	bhi.n	800565c <TouchWSLedActivity+0x118>
						{
							NrOfLeds = NrOfLeds + 10;
 800564e:	4b73      	ldr	r3, [pc, #460]	; (800581c <TouchWSLedActivity+0x2d8>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	330a      	adds	r3, #10
 8005654:	b2da      	uxtb	r2, r3
 8005656:	4b71      	ldr	r3, [pc, #452]	; (800581c <TouchWSLedActivity+0x2d8>)
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e013      	b.n	8005684 <TouchWSLedActivity+0x140>
						}
						else
						{
							NrOfLeds = (NrOfLeds + 10) % 99;
 800565c:	4b6f      	ldr	r3, [pc, #444]	; (800581c <TouchWSLedActivity+0x2d8>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	f103 020a 	add.w	r2, r3, #10
 8005664:	4b74      	ldr	r3, [pc, #464]	; (8005838 <TouchWSLedActivity+0x2f4>)
 8005666:	fb83 1302 	smull	r1, r3, r3, r2
 800566a:	4413      	add	r3, r2
 800566c:	1199      	asrs	r1, r3, #6
 800566e:	17d3      	asrs	r3, r2, #31
 8005670:	1ac9      	subs	r1, r1, r3
 8005672:	460b      	mov	r3, r1
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	440b      	add	r3, r1
 8005678:	0159      	lsls	r1, r3, #5
 800567a:	440b      	add	r3, r1
 800567c:	1ad1      	subs	r1, r2, r3
 800567e:	b2ca      	uxtb	r2, r1
 8005680:	4b66      	ldr	r3, [pc, #408]	; (800581c <TouchWSLedActivity+0x2d8>)
 8005682:	701a      	strb	r2, [r3, #0]
						}
					// Display String
					if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8005684:	4b65      	ldr	r3, [pc, #404]	; (800581c <TouchWSLedActivity+0x2d8>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b09      	cmp	r3, #9
 800568a:	d807      	bhi.n	800569c <TouchWSLedActivity+0x158>
 800568c:	4b63      	ldr	r3, [pc, #396]	; (800581c <TouchWSLedActivity+0x2d8>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	4966      	ldr	r1, [pc, #408]	; (800582c <TouchWSLedActivity+0x2e8>)
 8005694:	4866      	ldr	r0, [pc, #408]	; (8005830 <TouchWSLedActivity+0x2ec>)
 8005696:	f008 ff6d 	bl	800e574 <siprintf>
 800569a:	e006      	b.n	80056aa <TouchWSLedActivity+0x166>
					else sprintf((char*)Msg, " %d", NrOfLeds);
 800569c:	4b5f      	ldr	r3, [pc, #380]	; (800581c <TouchWSLedActivity+0x2d8>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	4964      	ldr	r1, [pc, #400]	; (8005834 <TouchWSLedActivity+0x2f0>)
 80056a4:	4862      	ldr	r0, [pc, #392]	; (8005830 <TouchWSLedActivity+0x2ec>)
 80056a6:	f008 ff65 	bl	800e574 <siprintf>
					EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80056aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80056ae:	9301      	str	r3, [sp, #4]
 80056b0:	2301      	movs	r3, #1
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	2300      	movs	r3, #0
 80056b6:	223c      	movs	r2, #60	; 0x3c
 80056b8:	21ac      	movs	r1, #172	; 0xac
 80056ba:	485d      	ldr	r0, [pc, #372]	; (8005830 <TouchWSLedActivity+0x2ec>)
 80056bc:	f7fc fa32 	bl	8001b24 <EF_PutString>
 80056c0:	e031      	b.n	8005726 <TouchWSLedActivity+0x1e2>
					}


					else if((x >= WS_LED_BUTTON_3_X)&&(x <= (WS_LED_BUTTON_3_X + WS_LED_BUTTON_W))) // OK - confirm and send number of LEDs
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 80056c8:	f240 80d6 	bls.w	8005878 <TouchWSLedActivity+0x334>
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 80056d2:	f080 80d1 	bcs.w	8005878 <TouchWSLedActivity+0x334>
					{
						SendComand(UCMD_WS_NUMBER_LED);
 80056d6:	2025      	movs	r0, #37	; 0x25
 80056d8:	f000 fb74 	bl	8005dc4 <SendComand>
						EF_SetFont(&arial_11ptFontInfo);
 80056dc:	4857      	ldr	r0, [pc, #348]	; (800583c <TouchWSLedActivity+0x2f8>)
 80056de:	f7fc f807 	bl	80016f0 <EF_SetFont>
						GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80056e2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	2305      	movs	r3, #5
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	2315      	movs	r3, #21
 80056ee:	221e      	movs	r2, #30
 80056f0:	2141      	movs	r1, #65	; 0x41
 80056f2:	f240 101f 	movw	r0, #287	; 0x11f
 80056f6:	f7fb ffaa 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OK");
 80056fa:	4951      	ldr	r1, [pc, #324]	; (8005840 <TouchWSLedActivity+0x2fc>)
 80056fc:	484c      	ldr	r0, [pc, #304]	; (8005830 <TouchWSLedActivity+0x2ec>)
 80056fe:	f008 ff39 	bl	800e574 <siprintf>
						EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005702:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	2300      	movs	r3, #0
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	2300      	movs	r3, #0
 800570e:	2243      	movs	r2, #67	; 0x43
 8005710:	f240 1123 	movw	r1, #291	; 0x123
 8005714:	4846      	ldr	r0, [pc, #280]	; (8005830 <TouchWSLedActivity+0x2ec>)
 8005716:	f7fc fa05 	bl	8001b24 <EF_PutString>
						// Write chosen number of LEDs to EEPROM memory
						eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
 800571a:	2201      	movs	r2, #1
 800571c:	493f      	ldr	r1, [pc, #252]	; (800581c <TouchWSLedActivity+0x2d8>)
 800571e:	2001      	movs	r0, #1
 8005720:	f7fd f8e6 	bl	80028f0 <eeprom_write>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8005724:	e0a8      	b.n	8005878 <TouchWSLedActivity+0x334>
 8005726:	e0a7      	b.n	8005878 <TouchWSLedActivity+0x334>
				}

				//
				// Check if it is second line button to change LEDs to WHITE
				//
				else if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8005728:	88bb      	ldrh	r3, [r7, #4]
 800572a:	2b5e      	cmp	r3, #94	; 0x5e
 800572c:	d924      	bls.n	8005778 <TouchWSLedActivity+0x234>
 800572e:	88bb      	ldrh	r3, [r7, #4]
 8005730:	2b74      	cmp	r3, #116	; 0x74
 8005732:	d821      	bhi.n	8005778 <TouchWSLedActivity+0x234>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	2b95      	cmp	r3, #149	; 0x95
 8005738:	d906      	bls.n	8005748 <TouchWSLedActivity+0x204>
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	2bbe      	cmp	r3, #190	; 0xbe
 800573e:	d803      	bhi.n	8005748 <TouchWSLedActivity+0x204>
					{
						SendComand(UCMD_WS_LED_WHITE_MAX);
 8005740:	201d      	movs	r0, #29
 8005742:	f000 fb3f 	bl	8005dc4 <SendComand>
 8005746:	e016      	b.n	8005776 <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	2bc9      	cmp	r3, #201	; 0xc9
 800574c:	d906      	bls.n	800575c <TouchWSLedActivity+0x218>
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	2bf2      	cmp	r3, #242	; 0xf2
 8005752:	d803      	bhi.n	800575c <TouchWSLedActivity+0x218>
					{
						SendComand(UCMD_WS_LED_WHITE_MID);
 8005754:	201e      	movs	r0, #30
 8005756:	f000 fb35 	bl	8005dc4 <SendComand>
 800575a:	e00c      	b.n	8005776 <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	2bfd      	cmp	r3, #253	; 0xfd
 8005760:	f240 808c 	bls.w	800587c <TouchWSLedActivity+0x338>
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800576a:	f200 8087 	bhi.w	800587c <TouchWSLedActivity+0x338>
					{
						SendComand(UCMD_WS_LED_WHITE_MIN);
 800576e:	201f      	movs	r0, #31
 8005770:	f000 fb28 	bl	8005dc4 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005774:	e082      	b.n	800587c <TouchWSLedActivity+0x338>
 8005776:	e081      	b.n	800587c <TouchWSLedActivity+0x338>
				}

				//
				// Check if it is third line button to change LEDs to BLUE
				//
				else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8005778:	88bb      	ldrh	r3, [r7, #4]
 800577a:	2b7c      	cmp	r3, #124	; 0x7c
 800577c:	d922      	bls.n	80057c4 <TouchWSLedActivity+0x280>
 800577e:	88bb      	ldrh	r3, [r7, #4]
 8005780:	2b92      	cmp	r3, #146	; 0x92
 8005782:	d81f      	bhi.n	80057c4 <TouchWSLedActivity+0x280>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	2b95      	cmp	r3, #149	; 0x95
 8005788:	d906      	bls.n	8005798 <TouchWSLedActivity+0x254>
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	2bbe      	cmp	r3, #190	; 0xbe
 800578e:	d803      	bhi.n	8005798 <TouchWSLedActivity+0x254>
					{
						SendComand(UCMD_WS_LED_BLUE_MAX);
 8005790:	2020      	movs	r0, #32
 8005792:	f000 fb17 	bl	8005dc4 <SendComand>
 8005796:	e014      	b.n	80057c2 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	2bc9      	cmp	r3, #201	; 0xc9
 800579c:	d906      	bls.n	80057ac <TouchWSLedActivity+0x268>
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	2bf2      	cmp	r3, #242	; 0xf2
 80057a2:	d803      	bhi.n	80057ac <TouchWSLedActivity+0x268>
					{
						SendComand(UCMD_WS_LED_BLUE_MID);
 80057a4:	2021      	movs	r0, #33	; 0x21
 80057a6:	f000 fb0d 	bl	8005dc4 <SendComand>
 80057aa:	e00a      	b.n	80057c2 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	2bfd      	cmp	r3, #253	; 0xfd
 80057b0:	d966      	bls.n	8005880 <TouchWSLedActivity+0x33c>
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80057b8:	d862      	bhi.n	8005880 <TouchWSLedActivity+0x33c>
					{
						SendComand(UCMD_WS_LED_BLUE_MIN);
 80057ba:	2022      	movs	r0, #34	; 0x22
 80057bc:	f000 fb02 	bl	8005dc4 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80057c0:	e05e      	b.n	8005880 <TouchWSLedActivity+0x33c>
 80057c2:	e05d      	b.n	8005880 <TouchWSLedActivity+0x33c>
				}

				//
				// Check if it is fourth line button to change LEDs to Predefined
				//
				else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 80057c4:	88bb      	ldrh	r3, [r7, #4]
 80057c6:	2b9b      	cmp	r3, #155	; 0x9b
 80057c8:	d93c      	bls.n	8005844 <TouchWSLedActivity+0x300>
 80057ca:	88bb      	ldrh	r3, [r7, #4]
 80057cc:	2bb1      	cmp	r3, #177	; 0xb1
 80057ce:	d839      	bhi.n	8005844 <TouchWSLedActivity+0x300>
				{
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	2b13      	cmp	r3, #19
 80057d4:	d906      	bls.n	80057e4 <TouchWSLedActivity+0x2a0>
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	2b64      	cmp	r3, #100	; 0x64
 80057da:	d803      	bhi.n	80057e4 <TouchWSLedActivity+0x2a0>
					{
						SendComand(UCMD_WS_LED_DAILY);
 80057dc:	2023      	movs	r0, #35	; 0x23
 80057de:	f000 faf1 	bl	8005dc4 <SendComand>
 80057e2:	e014      	b.n	800580e <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	2b77      	cmp	r3, #119	; 0x77
 80057e8:	d906      	bls.n	80057f8 <TouchWSLedActivity+0x2b4>
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	2bc8      	cmp	r3, #200	; 0xc8
 80057ee:	d803      	bhi.n	80057f8 <TouchWSLedActivity+0x2b4>
					{
						SendComand(UCMD_WS_LED_WHITE_OFF);
 80057f0:	201c      	movs	r0, #28
 80057f2:	f000 fae7 	bl	8005dc4 <SendComand>
 80057f6:	e00a      	b.n	800580e <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	2bdb      	cmp	r3, #219	; 0xdb
 80057fc:	d942      	bls.n	8005884 <TouchWSLedActivity+0x340>
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005804:	d83e      	bhi.n	8005884 <TouchWSLedActivity+0x340>
					{
						SendComand(UCMD_WS_LED_NIGHT);
 8005806:	2024      	movs	r0, #36	; 0x24
 8005808:	f000 fadc 	bl	8005dc4 <SendComand>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 800580c:	e03a      	b.n	8005884 <TouchWSLedActivity+0x340>
 800580e:	e039      	b.n	8005884 <TouchWSLedActivity+0x340>
 8005810:	08015220 	.word	0x08015220
 8005814:	20000258 	.word	0x20000258
 8005818:	20000256 	.word	0x20000256
 800581c:	20000032 	.word	0x20000032
 8005820:	20000257 	.word	0x20000257
 8005824:	2000025c 	.word	0x2000025c
 8005828:	20000255 	.word	0x20000255
 800582c:	080124b0 	.word	0x080124b0
 8005830:	200002c8 	.word	0x200002c8
 8005834:	080124b8 	.word	0x080124b8
 8005838:	a57eb503 	.word	0xa57eb503
 800583c:	080132a8 	.word	0x080132a8
 8005840:	080124bc 	.word	0x080124bc
				}

				//
				// Check if it is fifth line button to change LEDs to Predefined animations
				//
				else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8005844:	88bb      	ldrh	r3, [r7, #4]
 8005846:	2bba      	cmp	r3, #186	; 0xba
 8005848:	d91d      	bls.n	8005886 <TouchWSLedActivity+0x342>
 800584a:	88bb      	ldrh	r3, [r7, #4]
 800584c:	2bd0      	cmp	r3, #208	; 0xd0
 800584e:	d81a      	bhi.n	8005886 <TouchWSLedActivity+0x342>
				{
					if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	2b45      	cmp	r3, #69	; 0x45
 8005854:	d906      	bls.n	8005864 <TouchWSLedActivity+0x320>
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	2b96      	cmp	r3, #150	; 0x96
 800585a:	d803      	bhi.n	8005864 <TouchWSLedActivity+0x320>
					{
						SendComand(UCMD_WS_ANIMATION_SUNRISE);
 800585c:	2026      	movs	r0, #38	; 0x26
 800585e:	f000 fab1 	bl	8005dc4 <SendComand>
 8005862:	e010      	b.n	8005886 <TouchWSLedActivity+0x342>
					}
					else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	2ba9      	cmp	r3, #169	; 0xa9
 8005868:	d90d      	bls.n	8005886 <TouchWSLedActivity+0x342>
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	2bfa      	cmp	r3, #250	; 0xfa
 800586e:	d80a      	bhi.n	8005886 <TouchWSLedActivity+0x342>
					{
						SendComand(UCMD_WS_ANIMATION_SUNSET);
 8005870:	2027      	movs	r0, #39	; 0x27
 8005872:	f000 faa7 	bl	8005dc4 <SendComand>
 8005876:	e006      	b.n	8005886 <TouchWSLedActivity+0x342>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8005878:	bf00      	nop
 800587a:	e004      	b.n	8005886 <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800587c:	bf00      	nop
 800587e:	e002      	b.n	8005886 <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005880:	bf00      	nop
 8005882:	e000      	b.n	8005886 <TouchWSLedActivity+0x342>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005884:	bf00      	nop
					}
				}
				TimerTouch = HAL_GetTick();
 8005886:	f001 faad 	bl	8006de4 <HAL_GetTick>
 800588a:	4603      	mov	r3, r0
 800588c:	4a02      	ldr	r2, [pc, #8]	; (8005898 <TouchWSLedActivity+0x354>)
 800588e:	6013      	str	r3, [r2, #0]
			}
		}
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20000258 	.word	0x20000258

0800589c <UART_ParseLine>:
 * 	22	=>	LIGHTSSTATUS=?\n	// Podaj stan wszytskich swiatel
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b094      	sub	sp, #80	; 0x50
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 80058a4:	f107 0308 	add.w	r3, r7, #8
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f001 f842 	bl	8006934 <UARTDMA_GetLineFromReceiveBuffer>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d155      	bne.n	8005962 <UART_ParseLine+0xc6>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 80058b6:	f107 0308 	add.w	r3, r7, #8
 80058ba:	492c      	ldr	r1, [pc, #176]	; (800596c <UART_ParseLine+0xd0>)
 80058bc:	4618      	mov	r0, r3
 80058be:	f009 fcb3 	bl	800f228 <strtok>
 80058c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 80058c4:	492a      	ldr	r1, [pc, #168]	; (8005970 <UART_ParseLine+0xd4>)
 80058c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80058c8:	f7fa fc8a 	bl	80001e0 <strcmp>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d102      	bne.n	80058d8 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 80058d2:	f000 f85d 	bl	8005990 <UART_ParseLED>
	  {
		  UART_ParseAnswLightsStateStatus();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 80058d6:	e044      	b.n	8005962 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 80058d8:	4926      	ldr	r1, [pc, #152]	; (8005974 <UART_ParseLine+0xd8>)
 80058da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80058dc:	f7fa fc80 	bl	80001e0 <strcmp>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 80058e6:	f000 f8a1 	bl	8005a2c <UART_ParseAnswStatus>
}
 80058ea:	e03a      	b.n	8005962 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 80058ec:	4922      	ldr	r1, [pc, #136]	; (8005978 <UART_ParseLine+0xdc>)
 80058ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80058f0:	f7fa fc76 	bl	80001e0 <strcmp>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 80058fa:	f000 f89f 	bl	8005a3c <UART_ParseAnswTemp>
}
 80058fe:	e030      	b.n	8005962 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8005900:	491e      	ldr	r1, [pc, #120]	; (800597c <UART_ParseLine+0xe0>)
 8005902:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005904:	f7fa fc6c 	bl	80001e0 <strcmp>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 800590e:	f000 f939 	bl	8005b84 <UART_ParseAnswPres>
}
 8005912:	e026      	b.n	8005962 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8005914:	491a      	ldr	r1, [pc, #104]	; (8005980 <UART_ParseLine+0xe4>)
 8005916:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005918:	f7fa fc62 	bl	80001e0 <strcmp>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d102      	bne.n	8005928 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8005922:	f000 f975 	bl	8005c10 <UART_ParseAnswChangeRelayState>
}
 8005926:	e01c      	b.n	8005962 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8005928:	4916      	ldr	r1, [pc, #88]	; (8005984 <UART_ParseLine+0xe8>)
 800592a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800592c:	f7fa fc58 	bl	80001e0 <strcmp>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d102      	bne.n	800593c <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8005936:	f000 f972 	bl	8005c1e <UART_ParseAnswChangeLightState>
}
 800593a:	e012      	b.n	8005962 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 800593c:	4912      	ldr	r1, [pc, #72]	; (8005988 <UART_ParseLine+0xec>)
 800593e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005940:	f7fa fc4e 	bl	80001e0 <strcmp>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 800594a:	f000 f96f 	bl	8005c2c <UART_ParseAnswRelayStateStatus>
}
 800594e:	e008      	b.n	8005962 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8005950:	490e      	ldr	r1, [pc, #56]	; (800598c <UART_ParseLine+0xf0>)
 8005952:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005954:	f7fa fc44 	bl	80001e0 <strcmp>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <UART_ParseLine+0xc6>
		  UART_ParseAnswLightsStateStatus();
 800595e:	f000 f9cb 	bl	8005cf8 <UART_ParseAnswLightsStateStatus>
}
 8005962:	bf00      	nop
 8005964:	3750      	adds	r7, #80	; 0x50
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	080124c0 	.word	0x080124c0
 8005970:	080124c4 	.word	0x080124c4
 8005974:	080124c8 	.word	0x080124c8
 8005978:	080124d0 	.word	0x080124d0
 800597c:	080124d8 	.word	0x080124d8
 8005980:	080124e0 	.word	0x080124e0
 8005984:	080124ec 	.word	0x080124ec
 8005988:	080124f8 	.word	0x080124f8
 800598c:	08012504 	.word	0x08012504

08005990 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005996:	491f      	ldr	r1, [pc, #124]	; (8005a14 <UART_ParseLED+0x84>)
 8005998:	2000      	movs	r0, #0
 800599a:	f009 fc45 	bl	800f228 <strtok>
 800599e:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d031      	beq.n	8005a0c <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b2f      	cmp	r3, #47	; 0x2f
 80059ae:	d903      	bls.n	80059b8 <UART_ParseLED+0x28>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b39      	cmp	r3, #57	; 0x39
 80059b6:	d904      	bls.n	80059c2 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 80059b8:	4917      	ldr	r1, [pc, #92]	; (8005a18 <UART_ParseLED+0x88>)
 80059ba:	4818      	ldr	r0, [pc, #96]	; (8005a1c <UART_ParseLED+0x8c>)
 80059bc:	f000 ffeb 	bl	8006996 <UARTDMA_Print>
			return;	// And exit parsing
 80059c0:	e024      	b.n	8005a0c <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f007 ff1f 	bl	800d806 <atoi>
 80059c8:	4603      	mov	r3, r0
 80059ca:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10a      	bne.n	80059e8 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 80059d2:	2200      	movs	r2, #0
 80059d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059d8:	4811      	ldr	r0, [pc, #68]	; (8005a20 <UART_ParseLED+0x90>)
 80059da:	f002 f97f 	bl	8007cdc <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 80059de:	4911      	ldr	r1, [pc, #68]	; (8005a24 <UART_ParseLED+0x94>)
 80059e0:	480e      	ldr	r0, [pc, #56]	; (8005a1c <UART_ParseLED+0x8c>)
 80059e2:	f000 ffd8 	bl	8006996 <UARTDMA_Print>
 80059e6:	e011      	b.n	8005a0c <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 80059ee:	2201      	movs	r2, #1
 80059f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059f4:	480a      	ldr	r0, [pc, #40]	; (8005a20 <UART_ParseLED+0x90>)
 80059f6:	f002 f971 	bl	8007cdc <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 80059fa:	490b      	ldr	r1, [pc, #44]	; (8005a28 <UART_ParseLED+0x98>)
 80059fc:	4807      	ldr	r0, [pc, #28]	; (8005a1c <UART_ParseLED+0x8c>)
 80059fe:	f000 ffca 	bl	8006996 <UARTDMA_Print>
 8005a02:	e003      	b.n	8005a0c <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8005a04:	4904      	ldr	r1, [pc, #16]	; (8005a18 <UART_ParseLED+0x88>)
 8005a06:	4805      	ldr	r0, [pc, #20]	; (8005a1c <UART_ParseLED+0x8c>)
 8005a08:	f000 ffc5 	bl	8006996 <UARTDMA_Print>
		}
	}
}
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	08012510 	.word	0x08012510
 8005a18:	08012514 	.word	0x08012514
 8005a1c:	20000450 	.word	0x20000450
 8005a20:	40020800 	.word	0x40020800
 8005a24:	08012524 	.word	0x08012524
 8005a28:	08012530 	.word	0x08012530

08005a2c <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8005a46:	4947      	ldr	r1, [pc, #284]	; (8005b64 <UART_ParseAnswTemp+0x128>)
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f009 fbed 	bl	800f228 <strtok>
 8005a4e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8081 	beq.w	8005b5c <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 8005a5a:	68b8      	ldr	r0, [r7, #8]
 8005a5c:	f007 fed3 	bl	800d806 <atoi>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d010      	beq.n	8005a8e <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005a6c:	493d      	ldr	r1, [pc, #244]	; (8005b64 <UART_ParseAnswTemp+0x128>)
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f009 fbda 	bl	800f228 <strtok>
 8005a74:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f007 fec2 	bl	800d800 <atof>
 8005a7c:	ec53 2b10 	vmov	r2, r3, d0
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	f7fb f8c8 	bl	8000c18 <__aeabi_d2f>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	4a37      	ldr	r2, [pc, #220]	; (8005b68 <UART_ParseAnswTemp+0x12c>)
 8005a8c:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8005a8e:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <UART_ParseAnswTemp+0x130>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d162      	bne.n	8005b5c <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d119      	bne.n	8005ad0 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8005a9c:	4834      	ldr	r0, [pc, #208]	; (8005b70 <UART_ParseAnswTemp+0x134>)
 8005a9e:	f7fb fe27 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8005aa2:	4b31      	ldr	r3, [pc, #196]	; (8005b68 <UART_ParseAnswTemp+0x12c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fa fd66 	bl	8000578 <__aeabi_f2d>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4930      	ldr	r1, [pc, #192]	; (8005b74 <UART_ParseAnswTemp+0x138>)
 8005ab2:	4831      	ldr	r0, [pc, #196]	; (8005b78 <UART_ParseAnswTemp+0x13c>)
 8005ab4:	f008 fd5e 	bl	800e574 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005ab8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	2301      	movs	r3, #1
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2250      	movs	r2, #80	; 0x50
 8005ac6:	2114      	movs	r1, #20
 8005ac8:	482b      	ldr	r0, [pc, #172]	; (8005b78 <UART_ParseAnswTemp+0x13c>)
 8005aca:	f7fc f82b 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8005ace:	e045      	b.n	8005b5c <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d142      	bne.n	8005b5c <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 8005ad6:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <UART_ParseAnswTemp+0x12c>)
 8005ad8:	edd3 7a00 	vldr	s15, [r3]
 8005adc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae4:	d11d      	bne.n	8005b22 <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 8005ae6:	4b25      	ldr	r3, [pc, #148]	; (8005b7c <UART_ParseAnswTemp+0x140>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <UART_ParseAnswTemp+0x12c>)
 8005aec:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8005aee:	4820      	ldr	r0, [pc, #128]	; (8005b70 <UART_ParseAnswTemp+0x134>)
 8005af0:	f7fb fdfe 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8005af4:	4b1c      	ldr	r3, [pc, #112]	; (8005b68 <UART_ParseAnswTemp+0x12c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fa fd3d 	bl	8000578 <__aeabi_f2d>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	491f      	ldr	r1, [pc, #124]	; (8005b80 <UART_ParseAnswTemp+0x144>)
 8005b04:	481c      	ldr	r0, [pc, #112]	; (8005b78 <UART_ParseAnswTemp+0x13c>)
 8005b06:	f008 fd35 	bl	800e574 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005b0a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	2301      	movs	r3, #1
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2300      	movs	r3, #0
 8005b16:	226e      	movs	r2, #110	; 0x6e
 8005b18:	2114      	movs	r1, #20
 8005b1a:	4817      	ldr	r0, [pc, #92]	; (8005b78 <UART_ParseAnswTemp+0x13c>)
 8005b1c:	f7fc f802 	bl	8001b24 <EF_PutString>
	}
 8005b20:	e01c      	b.n	8005b5c <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8005b22:	4813      	ldr	r0, [pc, #76]	; (8005b70 <UART_ParseAnswTemp+0x134>)
 8005b24:	f7fb fde4 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <UART_ParseAnswTemp+0x12c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fa fd23 	bl	8000578 <__aeabi_f2d>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4912      	ldr	r1, [pc, #72]	; (8005b80 <UART_ParseAnswTemp+0x144>)
 8005b38:	480f      	ldr	r0, [pc, #60]	; (8005b78 <UART_ParseAnswTemp+0x13c>)
 8005b3a:	f008 fd1b 	bl	800e574 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005b3e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005b42:	9301      	str	r3, [sp, #4]
 8005b44:	2301      	movs	r3, #1
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	226e      	movs	r2, #110	; 0x6e
 8005b4c:	2114      	movs	r1, #20
 8005b4e:	480a      	ldr	r0, [pc, #40]	; (8005b78 <UART_ParseAnswTemp+0x13c>)
 8005b50:	f7fb ffe8 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 8005b54:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <UART_ParseAnswTemp+0x12c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <UART_ParseAnswTemp+0x140>)
 8005b5a:	6013      	str	r3, [r2, #0]
	}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	08012510 	.word	0x08012510
 8005b68:	20000260 	.word	0x20000260
 8005b6c:	2000025c 	.word	0x2000025c
 8005b70:	08015220 	.word	0x08015220
 8005b74:	0801253c 	.word	0x0801253c
 8005b78:	200002c8 	.word	0x200002c8
 8005b7c:	20000264 	.word	0x20000264
 8005b80:	08012550 	.word	0x08012550

08005b84 <UART_ParseAnswPres>:

//
// Parsing information about current presure
//"APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8005b8a:	491b      	ldr	r1, [pc, #108]	; (8005bf8 <UART_ParseAnswPres+0x74>)
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f009 fb4b 	bl	800f228 <strtok>
 8005b92:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d028      	beq.n	8005bee <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f007 fe2f 	bl	800d800 <atof>
 8005ba2:	ec53 2b10 	vmov	r2, r3, d0
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4619      	mov	r1, r3
 8005baa:	f7fb f835 	bl	8000c18 <__aeabi_d2f>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	4a12      	ldr	r2, [pc, #72]	; (8005bfc <UART_ParseAnswPres+0x78>)
 8005bb2:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <UART_ParseAnswPres+0x7c>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d118      	bne.n	8005bee <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005bbc:	4811      	ldr	r0, [pc, #68]	; (8005c04 <UART_ParseAnswPres+0x80>)
 8005bbe:	f7fb fd97 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8005bc2:	4b0e      	ldr	r3, [pc, #56]	; (8005bfc <UART_ParseAnswPres+0x78>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fa fcd6 	bl	8000578 <__aeabi_f2d>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	490d      	ldr	r1, [pc, #52]	; (8005c08 <UART_ParseAnswPres+0x84>)
 8005bd2:	480e      	ldr	r0, [pc, #56]	; (8005c0c <UART_ParseAnswPres+0x88>)
 8005bd4:	f008 fcce 	bl	800e574 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005bd8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	2301      	movs	r3, #1
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	2300      	movs	r3, #0
 8005be4:	22aa      	movs	r2, #170	; 0xaa
 8005be6:	2114      	movs	r1, #20
 8005be8:	4808      	ldr	r0, [pc, #32]	; (8005c0c <UART_ParseAnswPres+0x88>)
 8005bea:	f7fb ff9b 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	08012510 	.word	0x08012510
 8005bfc:	20000268 	.word	0x20000268
 8005c00:	2000025c 	.word	0x2000025c
 8005c04:	08015220 	.word	0x08015220
 8005c08:	08012564 	.word	0x08012564
 8005c0c:	200002c8 	.word	0x200002c8

08005c10 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
	//TODO!
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8005c1e:	b480      	push	{r7}
 8005c20:	af00      	add	r7, sp, #0
	//TODO!
}
 8005c22:	bf00      	nop
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8005c32:	2300      	movs	r3, #0
 8005c34:	71fb      	strb	r3, [r7, #7]
 8005c36:	e04a      	b.n	8005cce <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005c38:	4928      	ldr	r1, [pc, #160]	; (8005cdc <UART_ParseAnswRelayStateStatus+0xb0>)
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f009 faf4 	bl	800f228 <strtok>
 8005c40:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d02f      	beq.n	8005caa <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	71bb      	strb	r3, [r7, #6]
 8005c4e:	e025      	b.n	8005c9c <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8005c50:	79bb      	ldrb	r3, [r7, #6]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	4413      	add	r3, r2
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b2f      	cmp	r3, #47	; 0x2f
 8005c5a:	d905      	bls.n	8005c68 <UART_ParseAnswRelayStateStatus+0x3c>
 8005c5c:	79bb      	ldrb	r3, [r7, #6]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	4413      	add	r3, r2
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b39      	cmp	r3, #57	; 0x39
 8005c66:	d90e      	bls.n	8005c86 <UART_ParseAnswRelayStateStatus+0x5a>
 8005c68:	79bb      	ldrb	r3, [r7, #6]
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b2e      	cmp	r3, #46	; 0x2e
 8005c72:	d008      	beq.n	8005c86 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8005c74:	491a      	ldr	r1, [pc, #104]	; (8005ce0 <UART_ParseAnswRelayStateStatus+0xb4>)
 8005c76:	481b      	ldr	r0, [pc, #108]	; (8005ce4 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005c78:	f008 fc7c 	bl	800e574 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8005c7c:	4919      	ldr	r1, [pc, #100]	; (8005ce4 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005c7e:	481a      	ldr	r0, [pc, #104]	; (8005ce8 <UART_ParseAnswRelayStateStatus+0xbc>)
 8005c80:	f000 fe89 	bl	8006996 <UARTDMA_Print>
					return;	// And exit parsing
 8005c84:	e026      	b.n	8005cd4 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8005c86:	6838      	ldr	r0, [r7, #0]
 8005c88:	f007 fdbd 	bl	800d806 <atoi>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	b2d1      	uxtb	r1, r2
 8005c92:	4a16      	ldr	r2, [pc, #88]	; (8005cec <UART_ParseAnswRelayStateStatus+0xc0>)
 8005c94:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005c96:	79bb      	ldrb	r3, [r7, #6]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	71bb      	strb	r3, [r7, #6]
 8005c9c:	79bb      	ldrb	r3, [r7, #6]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1d3      	bne.n	8005c50 <UART_ParseAnswRelayStateStatus+0x24>
 8005ca8:	e008      	b.n	8005cbc <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8005caa:	4911      	ldr	r1, [pc, #68]	; (8005cf0 <UART_ParseAnswRelayStateStatus+0xc4>)
 8005cac:	480d      	ldr	r0, [pc, #52]	; (8005ce4 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005cae:	f008 fc61 	bl	800e574 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005cb2:	490c      	ldr	r1, [pc, #48]	; (8005ce4 <UART_ParseAnswRelayStateStatus+0xb8>)
 8005cb4:	480c      	ldr	r0, [pc, #48]	; (8005ce8 <UART_ParseAnswRelayStateStatus+0xbc>)
 8005cb6:	f000 fe6e 	bl	8006996 <UARTDMA_Print>
			return;	// And exit parsing
 8005cba:	e00b      	b.n	8005cd4 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <UART_ParseAnswRelayStateStatus+0xc8>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d101      	bne.n	8005cc8 <UART_ParseAnswRelayStateStatus+0x9c>
 8005cc4:	f7fd ffec 	bl	8003ca0 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	71fb      	strb	r3, [r7, #7]
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d9b1      	bls.n	8005c38 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	08012510 	.word	0x08012510
 8005ce0:	0801257c 	.word	0x0801257c
 8005ce4:	20000564 	.word	0x20000564
 8005ce8:	20000450 	.word	0x20000450
 8005cec:	20000274 	.word	0x20000274
 8005cf0:	08012590 	.word	0x08012590
 8005cf4:	2000025c 	.word	0x2000025c

08005cf8 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8005cfe:	2300      	movs	r3, #0
 8005d00:	71fb      	strb	r3, [r7, #7]
 8005d02:	e04a      	b.n	8005d9a <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005d04:	4928      	ldr	r1, [pc, #160]	; (8005da8 <UART_ParseAnswLightsStateStatus+0xb0>)
 8005d06:	2000      	movs	r0, #0
 8005d08:	f009 fa8e 	bl	800f228 <strtok>
 8005d0c:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02f      	beq.n	8005d76 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005d16:	2300      	movs	r3, #0
 8005d18:	71bb      	strb	r3, [r7, #6]
 8005d1a:	e025      	b.n	8005d68 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8005d1c:	79bb      	ldrb	r3, [r7, #6]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	4413      	add	r3, r2
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b2f      	cmp	r3, #47	; 0x2f
 8005d26:	d905      	bls.n	8005d34 <UART_ParseAnswLightsStateStatus+0x3c>
 8005d28:	79bb      	ldrb	r3, [r7, #6]
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b39      	cmp	r3, #57	; 0x39
 8005d32:	d90e      	bls.n	8005d52 <UART_ParseAnswLightsStateStatus+0x5a>
 8005d34:	79bb      	ldrb	r3, [r7, #6]
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	4413      	add	r3, r2
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d3e:	d008      	beq.n	8005d52 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8005d40:	491a      	ldr	r1, [pc, #104]	; (8005dac <UART_ParseAnswLightsStateStatus+0xb4>)
 8005d42:	481b      	ldr	r0, [pc, #108]	; (8005db0 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005d44:	f008 fc16 	bl	800e574 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8005d48:	4919      	ldr	r1, [pc, #100]	; (8005db0 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005d4a:	481a      	ldr	r0, [pc, #104]	; (8005db4 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005d4c:	f000 fe23 	bl	8006996 <UARTDMA_Print>
					return;	// And exit parsing
 8005d50:	e026      	b.n	8005da0 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8005d52:	6838      	ldr	r0, [r7, #0]
 8005d54:	f007 fd57 	bl	800d806 <atoi>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	b2d1      	uxtb	r1, r2
 8005d5e:	4a16      	ldr	r2, [pc, #88]	; (8005db8 <UART_ParseAnswLightsStateStatus+0xc0>)
 8005d60:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8005d62:	79bb      	ldrb	r3, [r7, #6]
 8005d64:	3301      	adds	r3, #1
 8005d66:	71bb      	strb	r3, [r7, #6]
 8005d68:	79bb      	ldrb	r3, [r7, #6]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1d3      	bne.n	8005d1c <UART_ParseAnswLightsStateStatus+0x24>
 8005d74:	e008      	b.n	8005d88 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8005d76:	4911      	ldr	r1, [pc, #68]	; (8005dbc <UART_ParseAnswLightsStateStatus+0xc4>)
 8005d78:	480d      	ldr	r0, [pc, #52]	; (8005db0 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005d7a:	f008 fbfb 	bl	800e574 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8005d7e:	490c      	ldr	r1, [pc, #48]	; (8005db0 <UART_ParseAnswLightsStateStatus+0xb8>)
 8005d80:	480c      	ldr	r0, [pc, #48]	; (8005db4 <UART_ParseAnswLightsStateStatus+0xbc>)
 8005d82:	f000 fe08 	bl	8006996 <UARTDMA_Print>
			return;	// And exit parsing
 8005d86:	e00b      	b.n	8005da0 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8005d88:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <UART_ParseAnswLightsStateStatus+0xc8>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b05      	cmp	r3, #5
 8005d8e:	d101      	bne.n	8005d94 <UART_ParseAnswLightsStateStatus+0x9c>
 8005d90:	f7fe f88e 	bl	8003eb0 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	3301      	adds	r3, #1
 8005d98:	71fb      	strb	r3, [r7, #7]
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d9b1      	bls.n	8005d04 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	08012510 	.word	0x08012510
 8005dac:	0801257c 	.word	0x0801257c
 8005db0:	20000564 	.word	0x20000564
 8005db4:	20000450 	.word	0x20000450
 8005db8:	20000278 	.word	0x20000278
 8005dbc:	08012590 	.word	0x08012590
 8005dc0:	2000025c 	.word	0x2000025c

08005dc4 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	2b27      	cmp	r3, #39	; 0x27
 8005dd6:	f200 8129 	bhi.w	800602c <SendComand+0x268>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <SendComand+0x1c>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005e81 	.word	0x08005e81
 8005de4:	08005e8b 	.word	0x08005e8b
 8005de8:	08005e95 	.word	0x08005e95
 8005dec:	08005e9f 	.word	0x08005e9f
 8005df0:	08005eb3 	.word	0x08005eb3
 8005df4:	08005ebd 	.word	0x08005ebd
 8005df8:	08005ec7 	.word	0x08005ec7
 8005dfc:	08005ed1 	.word	0x08005ed1
 8005e00:	08005edb 	.word	0x08005edb
 8005e04:	08005ee5 	.word	0x08005ee5
 8005e08:	08005eef 	.word	0x08005eef
 8005e0c:	08005ef9 	.word	0x08005ef9
 8005e10:	08005f03 	.word	0x08005f03
 8005e14:	08005f2b 	.word	0x08005f2b
 8005e18:	08005f35 	.word	0x08005f35
 8005e1c:	08005f3f 	.word	0x08005f3f
 8005e20:	08005f49 	.word	0x08005f49
 8005e24:	08005f53 	.word	0x08005f53
 8005e28:	08005f5d 	.word	0x08005f5d
 8005e2c:	08005f67 	.word	0x08005f67
 8005e30:	08005f71 	.word	0x08005f71
 8005e34:	08005f21 	.word	0x08005f21
 8005e38:	08005f8f 	.word	0x08005f8f
 8005e3c:	08005f0d 	.word	0x08005f0d
 8005e40:	08005f17 	.word	0x08005f17
 8005e44:	08005f7b 	.word	0x08005f7b
 8005e48:	08005f85 	.word	0x08005f85
 8005e4c:	08005ea9 	.word	0x08005ea9
 8005e50:	08005f99 	.word	0x08005f99
 8005e54:	08005fa3 	.word	0x08005fa3
 8005e58:	08005fad 	.word	0x08005fad
 8005e5c:	08005fb7 	.word	0x08005fb7
 8005e60:	08005fc1 	.word	0x08005fc1
 8005e64:	08005fcb 	.word	0x08005fcb
 8005e68:	08005fd5 	.word	0x08005fd5
 8005e6c:	08005fdf 	.word	0x08005fdf
 8005e70:	08005fe9 	.word	0x08005fe9
 8005e74:	08005ff3 	.word	0x08005ff3
 8005e78:	08006019 	.word	0x08006019
 8005e7c:	08006023 	.word	0x08006023
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8005e80:	496d      	ldr	r1, [pc, #436]	; (8006038 <SendComand+0x274>)
 8005e82:	486e      	ldr	r0, [pc, #440]	; (800603c <SendComand+0x278>)
 8005e84:	f000 fd87 	bl	8006996 <UARTDMA_Print>
			break;
 8005e88:	e0d0      	b.n	800602c <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8005e8a:	496d      	ldr	r1, [pc, #436]	; (8006040 <SendComand+0x27c>)
 8005e8c:	486b      	ldr	r0, [pc, #428]	; (800603c <SendComand+0x278>)
 8005e8e:	f000 fd82 	bl	8006996 <UARTDMA_Print>
			break;
 8005e92:	e0cb      	b.n	800602c <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8005e94:	496b      	ldr	r1, [pc, #428]	; (8006044 <SendComand+0x280>)
 8005e96:	4869      	ldr	r0, [pc, #420]	; (800603c <SendComand+0x278>)
 8005e98:	f000 fd7d 	bl	8006996 <UARTDMA_Print>
			break;
 8005e9c:	e0c6      	b.n	800602c <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8005e9e:	496a      	ldr	r1, [pc, #424]	; (8006048 <SendComand+0x284>)
 8005ea0:	4866      	ldr	r0, [pc, #408]	; (800603c <SendComand+0x278>)
 8005ea2:	f000 fd78 	bl	8006996 <UARTDMA_Print>
			break;
 8005ea6:	e0c1      	b.n	800602c <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8005ea8:	4968      	ldr	r1, [pc, #416]	; (800604c <SendComand+0x288>)
 8005eaa:	4864      	ldr	r0, [pc, #400]	; (800603c <SendComand+0x278>)
 8005eac:	f000 fd73 	bl	8006996 <UARTDMA_Print>
			break;
 8005eb0:	e0bc      	b.n	800602c <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8005eb2:	4967      	ldr	r1, [pc, #412]	; (8006050 <SendComand+0x28c>)
 8005eb4:	4861      	ldr	r0, [pc, #388]	; (800603c <SendComand+0x278>)
 8005eb6:	f000 fd6e 	bl	8006996 <UARTDMA_Print>
			break;
 8005eba:	e0b7      	b.n	800602c <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8005ebc:	4965      	ldr	r1, [pc, #404]	; (8006054 <SendComand+0x290>)
 8005ebe:	485f      	ldr	r0, [pc, #380]	; (800603c <SendComand+0x278>)
 8005ec0:	f000 fd69 	bl	8006996 <UARTDMA_Print>
			break;
 8005ec4:	e0b2      	b.n	800602c <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8005ec6:	4964      	ldr	r1, [pc, #400]	; (8006058 <SendComand+0x294>)
 8005ec8:	485c      	ldr	r0, [pc, #368]	; (800603c <SendComand+0x278>)
 8005eca:	f000 fd64 	bl	8006996 <UARTDMA_Print>
			break;
 8005ece:	e0ad      	b.n	800602c <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8005ed0:	4962      	ldr	r1, [pc, #392]	; (800605c <SendComand+0x298>)
 8005ed2:	485a      	ldr	r0, [pc, #360]	; (800603c <SendComand+0x278>)
 8005ed4:	f000 fd5f 	bl	8006996 <UARTDMA_Print>
			break;
 8005ed8:	e0a8      	b.n	800602c <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8005eda:	4961      	ldr	r1, [pc, #388]	; (8006060 <SendComand+0x29c>)
 8005edc:	4857      	ldr	r0, [pc, #348]	; (800603c <SendComand+0x278>)
 8005ede:	f000 fd5a 	bl	8006996 <UARTDMA_Print>
			break;
 8005ee2:	e0a3      	b.n	800602c <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8005ee4:	495f      	ldr	r1, [pc, #380]	; (8006064 <SendComand+0x2a0>)
 8005ee6:	4855      	ldr	r0, [pc, #340]	; (800603c <SendComand+0x278>)
 8005ee8:	f000 fd55 	bl	8006996 <UARTDMA_Print>
			break;
 8005eec:	e09e      	b.n	800602c <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8005eee:	495e      	ldr	r1, [pc, #376]	; (8006068 <SendComand+0x2a4>)
 8005ef0:	4852      	ldr	r0, [pc, #328]	; (800603c <SendComand+0x278>)
 8005ef2:	f000 fd50 	bl	8006996 <UARTDMA_Print>
			break;
 8005ef6:	e099      	b.n	800602c <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8005ef8:	495c      	ldr	r1, [pc, #368]	; (800606c <SendComand+0x2a8>)
 8005efa:	4850      	ldr	r0, [pc, #320]	; (800603c <SendComand+0x278>)
 8005efc:	f000 fd4b 	bl	8006996 <UARTDMA_Print>
			break;
 8005f00:	e094      	b.n	800602c <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8005f02:	495b      	ldr	r1, [pc, #364]	; (8006070 <SendComand+0x2ac>)
 8005f04:	484d      	ldr	r0, [pc, #308]	; (800603c <SendComand+0x278>)
 8005f06:	f000 fd46 	bl	8006996 <UARTDMA_Print>
			break;
 8005f0a:	e08f      	b.n	800602c <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8005f0c:	4959      	ldr	r1, [pc, #356]	; (8006074 <SendComand+0x2b0>)
 8005f0e:	484b      	ldr	r0, [pc, #300]	; (800603c <SendComand+0x278>)
 8005f10:	f000 fd41 	bl	8006996 <UARTDMA_Print>
			break;
 8005f14:	e08a      	b.n	800602c <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8005f16:	4958      	ldr	r1, [pc, #352]	; (8006078 <SendComand+0x2b4>)
 8005f18:	4848      	ldr	r0, [pc, #288]	; (800603c <SendComand+0x278>)
 8005f1a:	f000 fd3c 	bl	8006996 <UARTDMA_Print>
			break;
 8005f1e:	e085      	b.n	800602c <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8005f20:	4956      	ldr	r1, [pc, #344]	; (800607c <SendComand+0x2b8>)
 8005f22:	4846      	ldr	r0, [pc, #280]	; (800603c <SendComand+0x278>)
 8005f24:	f000 fd37 	bl	8006996 <UARTDMA_Print>
			break;
 8005f28:	e080      	b.n	800602c <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8005f2a:	4955      	ldr	r1, [pc, #340]	; (8006080 <SendComand+0x2bc>)
 8005f2c:	4843      	ldr	r0, [pc, #268]	; (800603c <SendComand+0x278>)
 8005f2e:	f000 fd32 	bl	8006996 <UARTDMA_Print>
			break;
 8005f32:	e07b      	b.n	800602c <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8005f34:	4953      	ldr	r1, [pc, #332]	; (8006084 <SendComand+0x2c0>)
 8005f36:	4841      	ldr	r0, [pc, #260]	; (800603c <SendComand+0x278>)
 8005f38:	f000 fd2d 	bl	8006996 <UARTDMA_Print>
			break;
 8005f3c:	e076      	b.n	800602c <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8005f3e:	4952      	ldr	r1, [pc, #328]	; (8006088 <SendComand+0x2c4>)
 8005f40:	483e      	ldr	r0, [pc, #248]	; (800603c <SendComand+0x278>)
 8005f42:	f000 fd28 	bl	8006996 <UARTDMA_Print>
			break;
 8005f46:	e071      	b.n	800602c <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8005f48:	4950      	ldr	r1, [pc, #320]	; (800608c <SendComand+0x2c8>)
 8005f4a:	483c      	ldr	r0, [pc, #240]	; (800603c <SendComand+0x278>)
 8005f4c:	f000 fd23 	bl	8006996 <UARTDMA_Print>
			break;
 8005f50:	e06c      	b.n	800602c <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8005f52:	494f      	ldr	r1, [pc, #316]	; (8006090 <SendComand+0x2cc>)
 8005f54:	4839      	ldr	r0, [pc, #228]	; (800603c <SendComand+0x278>)
 8005f56:	f000 fd1e 	bl	8006996 <UARTDMA_Print>
			break;
 8005f5a:	e067      	b.n	800602c <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8005f5c:	494d      	ldr	r1, [pc, #308]	; (8006094 <SendComand+0x2d0>)
 8005f5e:	4837      	ldr	r0, [pc, #220]	; (800603c <SendComand+0x278>)
 8005f60:	f000 fd19 	bl	8006996 <UARTDMA_Print>
			break;
 8005f64:	e062      	b.n	800602c <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8005f66:	494c      	ldr	r1, [pc, #304]	; (8006098 <SendComand+0x2d4>)
 8005f68:	4834      	ldr	r0, [pc, #208]	; (800603c <SendComand+0x278>)
 8005f6a:	f000 fd14 	bl	8006996 <UARTDMA_Print>
			break;
 8005f6e:	e05d      	b.n	800602c <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8005f70:	494a      	ldr	r1, [pc, #296]	; (800609c <SendComand+0x2d8>)
 8005f72:	4832      	ldr	r0, [pc, #200]	; (800603c <SendComand+0x278>)
 8005f74:	f000 fd0f 	bl	8006996 <UARTDMA_Print>
			break;
 8005f78:	e058      	b.n	800602c <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8005f7a:	4949      	ldr	r1, [pc, #292]	; (80060a0 <SendComand+0x2dc>)
 8005f7c:	482f      	ldr	r0, [pc, #188]	; (800603c <SendComand+0x278>)
 8005f7e:	f000 fd0a 	bl	8006996 <UARTDMA_Print>
			break;
 8005f82:	e053      	b.n	800602c <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8005f84:	4947      	ldr	r1, [pc, #284]	; (80060a4 <SendComand+0x2e0>)
 8005f86:	482d      	ldr	r0, [pc, #180]	; (800603c <SendComand+0x278>)
 8005f88:	f000 fd05 	bl	8006996 <UARTDMA_Print>
			break;
 8005f8c:	e04e      	b.n	800602c <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8005f8e:	4946      	ldr	r1, [pc, #280]	; (80060a8 <SendComand+0x2e4>)
 8005f90:	482a      	ldr	r0, [pc, #168]	; (800603c <SendComand+0x278>)
 8005f92:	f000 fd00 	bl	8006996 <UARTDMA_Print>
			break;
 8005f96:	e049      	b.n	800602c <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8005f98:	4944      	ldr	r1, [pc, #272]	; (80060ac <SendComand+0x2e8>)
 8005f9a:	4828      	ldr	r0, [pc, #160]	; (800603c <SendComand+0x278>)
 8005f9c:	f000 fcfb 	bl	8006996 <UARTDMA_Print>
			break;
 8005fa0:	e044      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8005fa2:	4943      	ldr	r1, [pc, #268]	; (80060b0 <SendComand+0x2ec>)
 8005fa4:	4825      	ldr	r0, [pc, #148]	; (800603c <SendComand+0x278>)
 8005fa6:	f000 fcf6 	bl	8006996 <UARTDMA_Print>
			break;
 8005faa:	e03f      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8005fac:	4941      	ldr	r1, [pc, #260]	; (80060b4 <SendComand+0x2f0>)
 8005fae:	4823      	ldr	r0, [pc, #140]	; (800603c <SendComand+0x278>)
 8005fb0:	f000 fcf1 	bl	8006996 <UARTDMA_Print>
			break;
 8005fb4:	e03a      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8005fb6:	4940      	ldr	r1, [pc, #256]	; (80060b8 <SendComand+0x2f4>)
 8005fb8:	4820      	ldr	r0, [pc, #128]	; (800603c <SendComand+0x278>)
 8005fba:	f000 fcec 	bl	8006996 <UARTDMA_Print>
			break;
 8005fbe:	e035      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8005fc0:	493e      	ldr	r1, [pc, #248]	; (80060bc <SendComand+0x2f8>)
 8005fc2:	481e      	ldr	r0, [pc, #120]	; (800603c <SendComand+0x278>)
 8005fc4:	f000 fce7 	bl	8006996 <UARTDMA_Print>
			break;
 8005fc8:	e030      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8005fca:	493d      	ldr	r1, [pc, #244]	; (80060c0 <SendComand+0x2fc>)
 8005fcc:	481b      	ldr	r0, [pc, #108]	; (800603c <SendComand+0x278>)
 8005fce:	f000 fce2 	bl	8006996 <UARTDMA_Print>
			break;
 8005fd2:	e02b      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8005fd4:	493b      	ldr	r1, [pc, #236]	; (80060c4 <SendComand+0x300>)
 8005fd6:	4819      	ldr	r0, [pc, #100]	; (800603c <SendComand+0x278>)
 8005fd8:	f000 fcdd 	bl	8006996 <UARTDMA_Print>
			break;
 8005fdc:	e026      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8005fde:	493a      	ldr	r1, [pc, #232]	; (80060c8 <SendComand+0x304>)
 8005fe0:	4816      	ldr	r0, [pc, #88]	; (800603c <SendComand+0x278>)
 8005fe2:	f000 fcd8 	bl	8006996 <UARTDMA_Print>
			break;
 8005fe6:	e021      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8005fe8:	4938      	ldr	r1, [pc, #224]	; (80060cc <SendComand+0x308>)
 8005fea:	4814      	ldr	r0, [pc, #80]	; (800603c <SendComand+0x278>)
 8005fec:	f000 fcd3 	bl	8006996 <UARTDMA_Print>
			break;
 8005ff0:	e01c      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8005ff2:	4b37      	ldr	r3, [pc, #220]	; (80060d0 <SendComand+0x30c>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d802      	bhi.n	8006000 <SendComand+0x23c>
 8005ffa:	4b35      	ldr	r3, [pc, #212]	; (80060d0 <SendComand+0x30c>)
 8005ffc:	2209      	movs	r2, #9
 8005ffe:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8006000:	4b33      	ldr	r3, [pc, #204]	; (80060d0 <SendComand+0x30c>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	4933      	ldr	r1, [pc, #204]	; (80060d4 <SendComand+0x310>)
 8006008:	4833      	ldr	r0, [pc, #204]	; (80060d8 <SendComand+0x314>)
 800600a:	f008 fab3 	bl	800e574 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800600e:	4932      	ldr	r1, [pc, #200]	; (80060d8 <SendComand+0x314>)
 8006010:	480a      	ldr	r0, [pc, #40]	; (800603c <SendComand+0x278>)
 8006012:	f000 fcc0 	bl	8006996 <UARTDMA_Print>
			break;
 8006016:	e009      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8006018:	4930      	ldr	r1, [pc, #192]	; (80060dc <SendComand+0x318>)
 800601a:	4808      	ldr	r0, [pc, #32]	; (800603c <SendComand+0x278>)
 800601c:	f000 fcbb 	bl	8006996 <UARTDMA_Print>
			break;
 8006020:	e004      	b.n	800602c <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8006022:	492f      	ldr	r1, [pc, #188]	; (80060e0 <SendComand+0x31c>)
 8006024:	4805      	ldr	r0, [pc, #20]	; (800603c <SendComand+0x278>)
 8006026:	f000 fcb6 	bl	8006996 <UARTDMA_Print>
			break;
 800602a:	bf00      	nop
		}
	return 1;
 800602c:	2301      	movs	r3, #1
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	080125ac 	.word	0x080125ac
 800603c:	20000450 	.word	0x20000450
 8006040:	080125b4 	.word	0x080125b4
 8006044:	080125bc 	.word	0x080125bc
 8006048:	080125c8 	.word	0x080125c8
 800604c:	080125d0 	.word	0x080125d0
 8006050:	080125d8 	.word	0x080125d8
 8006054:	080125e0 	.word	0x080125e0
 8006058:	080125f0 	.word	0x080125f0
 800605c:	08012600 	.word	0x08012600
 8006060:	08012610 	.word	0x08012610
 8006064:	08012620 	.word	0x08012620
 8006068:	08012630 	.word	0x08012630
 800606c:	08012640 	.word	0x08012640
 8006070:	08012650 	.word	0x08012650
 8006074:	08012660 	.word	0x08012660
 8006078:	08012670 	.word	0x08012670
 800607c:	08012680 	.word	0x08012680
 8006080:	08012690 	.word	0x08012690
 8006084:	080126a0 	.word	0x080126a0
 8006088:	080126b0 	.word	0x080126b0
 800608c:	080126c0 	.word	0x080126c0
 8006090:	080126d0 	.word	0x080126d0
 8006094:	080126e0 	.word	0x080126e0
 8006098:	080126f0 	.word	0x080126f0
 800609c:	08012700 	.word	0x08012700
 80060a0:	08012710 	.word	0x08012710
 80060a4:	08012720 	.word	0x08012720
 80060a8:	08012730 	.word	0x08012730
 80060ac:	08012740 	.word	0x08012740
 80060b0:	08012750 	.word	0x08012750
 80060b4:	08012760 	.word	0x08012760
 80060b8:	08012770 	.word	0x08012770
 80060bc:	08012780 	.word	0x08012780
 80060c0:	08012790 	.word	0x08012790
 80060c4:	080127a0 	.word	0x080127a0
 80060c8:	080127b0 	.word	0x080127b0
 80060cc:	080127c0 	.word	0x080127c0
 80060d0:	20000032 	.word	0x20000032
 80060d4:	080127d0 	.word	0x080127d0
 80060d8:	20000564 	.word	0x20000564
 80060dc:	080127e0 	.word	0x080127e0
 80060e0:	080127f0 	.word	0x080127f0

080060e4 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d101      	bne.n	80060fe <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 80060fa:	2301      	movs	r3, #1
 80060fc:	e018      	b.n	8006130 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4413      	add	r3, r2
 8006108:	789a      	ldrb	r2, [r3, #2]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	4b09      	ldr	r3, [pc, #36]	; (800613c <RB_Read+0x58>)
 8006116:	fb83 1302 	smull	r1, r3, r3, r2
 800611a:	1159      	asrs	r1, r3, #5
 800611c:	17d3      	asrs	r3, r2, #31
 800611e:	1ac9      	subs	r1, r1, r3
 8006120:	460b      	mov	r3, r1
 8006122:	019b      	lsls	r3, r3, #6
 8006124:	440b      	add	r3, r1
 8006126:	1ad1      	subs	r1, r2, r3
 8006128:	b2ca      	uxtb	r2, r1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	7e07e07f 	.word	0x7e07e07f

08006140 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <RB_Write+0x5c>)
 8006154:	fb83 1302 	smull	r1, r3, r3, r2
 8006158:	1159      	asrs	r1, r3, #5
 800615a:	17d3      	asrs	r3, r2, #31
 800615c:	1ac9      	subs	r1, r1, r3
 800615e:	460b      	mov	r3, r1
 8006160:	019b      	lsls	r3, r3, #6
 8006162:	440b      	add	r3, r1
 8006164:	1ad1      	subs	r1, r2, r3
 8006166:	460b      	mov	r3, r1
 8006168:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	7bfa      	ldrb	r2, [r7, #15]
 8006170:	429a      	cmp	r2, r3
 8006172:	d101      	bne.n	8006178 <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 8006174:	2301      	movs	r3, #1
 8006176:	e00a      	b.n	800618e <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4413      	add	r3, r2
 8006182:	78fa      	ldrb	r2, [r7, #3]
 8006184:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	7bfa      	ldrb	r2, [r7, #15]
 800618a:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	7e07e07f 	.word	0x7e07e07f

080061a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80061a4:	4b17      	ldr	r3, [pc, #92]	; (8006204 <MX_SPI1_Init+0x64>)
 80061a6:	4a18      	ldr	r2, [pc, #96]	; (8006208 <MX_SPI1_Init+0x68>)
 80061a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061aa:	4b16      	ldr	r3, [pc, #88]	; (8006204 <MX_SPI1_Init+0x64>)
 80061ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <MX_SPI1_Init+0x64>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061b8:	4b12      	ldr	r3, [pc, #72]	; (8006204 <MX_SPI1_Init+0x64>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <MX_SPI1_Init+0x64>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061c4:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <MX_SPI1_Init+0x64>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80061ca:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <MX_SPI1_Init+0x64>)
 80061cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80061d2:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <MX_SPI1_Init+0x64>)
 80061d4:	2210      	movs	r2, #16
 80061d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <MX_SPI1_Init+0x64>)
 80061da:	2200      	movs	r2, #0
 80061dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80061de:	4b09      	ldr	r3, [pc, #36]	; (8006204 <MX_SPI1_Init+0x64>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061e4:	4b07      	ldr	r3, [pc, #28]	; (8006204 <MX_SPI1_Init+0x64>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80061ea:	4b06      	ldr	r3, [pc, #24]	; (8006204 <MX_SPI1_Init+0x64>)
 80061ec:	220a      	movs	r2, #10
 80061ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80061f0:	4804      	ldr	r0, [pc, #16]	; (8006204 <MX_SPI1_Init+0x64>)
 80061f2:	f005 fb0b 	bl	800b80c <HAL_SPI_Init>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80061fc:	f7fe fa9c 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006200:	bf00      	nop
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000600 	.word	0x20000600
 8006208:	40013000 	.word	0x40013000

0800620c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006210:	4b17      	ldr	r3, [pc, #92]	; (8006270 <MX_SPI3_Init+0x64>)
 8006212:	4a18      	ldr	r2, [pc, #96]	; (8006274 <MX_SPI3_Init+0x68>)
 8006214:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006216:	4b16      	ldr	r3, [pc, #88]	; (8006270 <MX_SPI3_Init+0x64>)
 8006218:	f44f 7282 	mov.w	r2, #260	; 0x104
 800621c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800621e:	4b14      	ldr	r3, [pc, #80]	; (8006270 <MX_SPI3_Init+0x64>)
 8006220:	2200      	movs	r2, #0
 8006222:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006224:	4b12      	ldr	r3, [pc, #72]	; (8006270 <MX_SPI3_Init+0x64>)
 8006226:	2200      	movs	r2, #0
 8006228:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800622a:	4b11      	ldr	r3, [pc, #68]	; (8006270 <MX_SPI3_Init+0x64>)
 800622c:	2200      	movs	r2, #0
 800622e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <MX_SPI3_Init+0x64>)
 8006232:	2200      	movs	r2, #0
 8006234:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006236:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <MX_SPI3_Init+0x64>)
 8006238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800623c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <MX_SPI3_Init+0x64>)
 8006240:	2220      	movs	r2, #32
 8006242:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006244:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <MX_SPI3_Init+0x64>)
 8006246:	2200      	movs	r2, #0
 8006248:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800624a:	4b09      	ldr	r3, [pc, #36]	; (8006270 <MX_SPI3_Init+0x64>)
 800624c:	2200      	movs	r2, #0
 800624e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <MX_SPI3_Init+0x64>)
 8006252:	2200      	movs	r2, #0
 8006254:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8006256:	4b06      	ldr	r3, [pc, #24]	; (8006270 <MX_SPI3_Init+0x64>)
 8006258:	220a      	movs	r2, #10
 800625a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800625c:	4804      	ldr	r0, [pc, #16]	; (8006270 <MX_SPI3_Init+0x64>)
 800625e:	f005 fad5 	bl	800b80c <HAL_SPI_Init>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8006268:	f7fe fa66 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800626c:	bf00      	nop
 800626e:	bd80      	pop	{r7, pc}
 8006270:	200005a8 	.word	0x200005a8
 8006274:	40003c00 	.word	0x40003c00

08006278 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08c      	sub	sp, #48	; 0x30
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006280:	f107 031c 	add.w	r3, r7, #28
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	60da      	str	r2, [r3, #12]
 800628e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a32      	ldr	r2, [pc, #200]	; (8006360 <HAL_SPI_MspInit+0xe8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d12c      	bne.n	80062f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	4b31      	ldr	r3, [pc, #196]	; (8006364 <HAL_SPI_MspInit+0xec>)
 80062a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a2:	4a30      	ldr	r2, [pc, #192]	; (8006364 <HAL_SPI_MspInit+0xec>)
 80062a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062a8:	6453      	str	r3, [r2, #68]	; 0x44
 80062aa:	4b2e      	ldr	r3, [pc, #184]	; (8006364 <HAL_SPI_MspInit+0xec>)
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	4b2a      	ldr	r3, [pc, #168]	; (8006364 <HAL_SPI_MspInit+0xec>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	4a29      	ldr	r2, [pc, #164]	; (8006364 <HAL_SPI_MspInit+0xec>)
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	6313      	str	r3, [r2, #48]	; 0x30
 80062c6:	4b27      	ldr	r3, [pc, #156]	; (8006364 <HAL_SPI_MspInit+0xec>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80062d2:	23e0      	movs	r3, #224	; 0xe0
 80062d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d6:	2302      	movs	r3, #2
 80062d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062de:	2303      	movs	r3, #3
 80062e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80062e2:	2305      	movs	r3, #5
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062e6:	f107 031c 	add.w	r3, r7, #28
 80062ea:	4619      	mov	r1, r3
 80062ec:	481e      	ldr	r0, [pc, #120]	; (8006368 <HAL_SPI_MspInit+0xf0>)
 80062ee:	f001 fb59 	bl	80079a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80062f2:	e030      	b.n	8006356 <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1c      	ldr	r2, [pc, #112]	; (800636c <HAL_SPI_MspInit+0xf4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d12b      	bne.n	8006356 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	4b18      	ldr	r3, [pc, #96]	; (8006364 <HAL_SPI_MspInit+0xec>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	4a17      	ldr	r2, [pc, #92]	; (8006364 <HAL_SPI_MspInit+0xec>)
 8006308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630c:	6413      	str	r3, [r2, #64]	; 0x40
 800630e:	4b15      	ldr	r3, [pc, #84]	; (8006364 <HAL_SPI_MspInit+0xec>)
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <HAL_SPI_MspInit+0xec>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	4a10      	ldr	r2, [pc, #64]	; (8006364 <HAL_SPI_MspInit+0xec>)
 8006324:	f043 0302 	orr.w	r3, r3, #2
 8006328:	6313      	str	r3, [r2, #48]	; 0x30
 800632a:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <HAL_SPI_MspInit+0xec>)
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8006336:	2338      	movs	r3, #56	; 0x38
 8006338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800633a:	2302      	movs	r3, #2
 800633c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800633e:	2300      	movs	r3, #0
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006342:	2303      	movs	r3, #3
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006346:	2306      	movs	r3, #6
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800634a:	f107 031c 	add.w	r3, r7, #28
 800634e:	4619      	mov	r1, r3
 8006350:	4807      	ldr	r0, [pc, #28]	; (8006370 <HAL_SPI_MspInit+0xf8>)
 8006352:	f001 fb27 	bl	80079a4 <HAL_GPIO_Init>
}
 8006356:	bf00      	nop
 8006358:	3730      	adds	r7, #48	; 0x30
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40013000 	.word	0x40013000
 8006364:	40023800 	.word	0x40023800
 8006368:	40020000 	.word	0x40020000
 800636c:	40003c00 	.word	0x40003c00
 8006370:	40020400 	.word	0x40020400

08006374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	607b      	str	r3, [r7, #4]
 800637e:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <HAL_MspInit+0x4c>)
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	4a0f      	ldr	r2, [pc, #60]	; (80063c0 <HAL_MspInit+0x4c>)
 8006384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006388:	6453      	str	r3, [r2, #68]	; 0x44
 800638a:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <HAL_MspInit+0x4c>)
 800638c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006392:	607b      	str	r3, [r7, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006396:	2300      	movs	r3, #0
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <HAL_MspInit+0x4c>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	4a08      	ldr	r2, [pc, #32]	; (80063c0 <HAL_MspInit+0x4c>)
 80063a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a4:	6413      	str	r3, [r2, #64]	; 0x40
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_MspInit+0x4c>)
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40023800 	.word	0x40023800

080063c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063c8:	e7fe      	b.n	80063c8 <NMI_Handler+0x4>

080063ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063ca:	b480      	push	{r7}
 80063cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063ce:	e7fe      	b.n	80063ce <HardFault_Handler+0x4>

080063d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063d4:	e7fe      	b.n	80063d4 <MemManage_Handler+0x4>

080063d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063d6:	b480      	push	{r7}
 80063d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063da:	e7fe      	b.n	80063da <BusFault_Handler+0x4>

080063dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063e0:	e7fe      	b.n	80063e0 <UsageFault_Handler+0x4>

080063e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063e2:	b480      	push	{r7}
 80063e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063e6:	bf00      	nop
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063fe:	b480      	push	{r7}
 8006400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006410:	f000 fcd4 	bl	8006dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006414:	bf00      	nop
 8006416:	bd80      	pop	{r7, pc}

08006418 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 800641c:	2010      	movs	r0, #16
 800641e:	f001 fc91 	bl	8007d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800642c:	4802      	ldr	r0, [pc, #8]	; (8006438 <DMA1_Stream0_IRQHandler+0x10>)
 800642e:	f001 f841 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006432:	bf00      	nop
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	200003f0 	.word	0x200003f0

0800643c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006440:	4802      	ldr	r0, [pc, #8]	; (800644c <DMA1_Stream1_IRQHandler+0x10>)
 8006442:	f001 f837 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006446:	bf00      	nop
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	2000033c 	.word	0x2000033c

08006450 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8006454:	4802      	ldr	r0, [pc, #8]	; (8006460 <DMA1_Stream5_IRQHandler+0x10>)
 8006456:	f000 f9e9 	bl	800682c <UARTDMA_DmaReceiveIrqHandler>
	return;
 800645a:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000450 	.word	0x20000450

08006464 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006468:	4802      	ldr	r0, [pc, #8]	; (8006474 <DMA1_Stream6_IRQHandler+0x10>)
 800646a:	f001 f823 	bl	80074b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000748 	.word	0x20000748

08006478 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800647c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006480:	f001 fc60 	bl	8007d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006484:	bf00      	nop
 8006486:	bd80      	pop	{r7, pc}

08006488 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800648c:	4802      	ldr	r0, [pc, #8]	; (8006498 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800648e:	f005 feb2 	bl	800c1f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006492:	bf00      	nop
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000658 	.word	0x20000658

0800649c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80064a0:	4802      	ldr	r0, [pc, #8]	; (80064ac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80064a2:	f005 fea8 	bl	800c1f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80064a6:	bf00      	nop
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	200006a0 	.word	0x200006a0

080064b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80064b4:	4802      	ldr	r0, [pc, #8]	; (80064c0 <I2C1_EV_IRQHandler+0x10>)
 80064b6:	f002 fbe5 	bl	8008c84 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80064ba:	bf00      	nop
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	2000039c 	.word	0x2000039c

080064c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80064c8:	4802      	ldr	r0, [pc, #8]	; (80064d4 <I2C1_ER_IRQHandler+0x10>)
 80064ca:	f002 fd4c 	bl	8008f66 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80064ce:	bf00      	nop
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	2000039c 	.word	0x2000039c

080064d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80064dc:	4803      	ldr	r0, [pc, #12]	; (80064ec <USART2_IRQHandler+0x14>)
 80064de:	f000 f97b 	bl	80067d8 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80064e2:	4803      	ldr	r0, [pc, #12]	; (80064f0 <USART2_IRQHandler+0x18>)
 80064e4:	f006 f948 	bl	800c778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80064e8:	bf00      	nop
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000450 	.word	0x20000450
 80064f0:	200007a8 	.word	0x200007a8

080064f4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80064f8:	4802      	ldr	r0, [pc, #8]	; (8006504 <SPI3_IRQHandler+0x10>)
 80064fa:	f005 fbb3 	bl	800bc64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80064fe:	bf00      	nop
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	200005a8 	.word	0x200005a8

08006508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
	return 1;
 800650c:	2301      	movs	r3, #1
}
 800650e:	4618      	mov	r0, r3
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <_kill>:

int _kill(int pid, int sig)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006522:	f007 f975 	bl	800d810 <__errno>
 8006526:	4603      	mov	r3, r0
 8006528:	2216      	movs	r2, #22
 800652a:	601a      	str	r2, [r3, #0]
	return -1;
 800652c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <_exit>:

void _exit (int status)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006540:	f04f 31ff 	mov.w	r1, #4294967295
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ffe7 	bl	8006518 <_kill>
	while (1) {}		/* Make sure we hang here */
 800654a:	e7fe      	b.n	800654a <_exit+0x12>

0800654c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e00a      	b.n	8006574 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800655e:	f3af 8000 	nop.w
 8006562:	4601      	mov	r1, r0
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	60ba      	str	r2, [r7, #8]
 800656a:	b2ca      	uxtb	r2, r1
 800656c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	3301      	adds	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	429a      	cmp	r2, r3
 800657a:	dbf0      	blt.n	800655e <_read+0x12>
	}

return len;
 800657c:	687b      	ldr	r3, [r7, #4]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b086      	sub	sp, #24
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e009      	b.n	80065ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	60ba      	str	r2, [r7, #8]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	3301      	adds	r3, #1
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	dbf1      	blt.n	8006598 <_write+0x12>
	}
	return len;
 80065b4:	687b      	ldr	r3, [r7, #4]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <_close>:

int _close(int file)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
	return -1;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065e6:	605a      	str	r2, [r3, #4]
	return 0;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <_isatty>:

int _isatty(int file)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
	return 1;
 80065fe:	2301      	movs	r3, #1
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
	return 0;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006630:	4a14      	ldr	r2, [pc, #80]	; (8006684 <_sbrk+0x5c>)
 8006632:	4b15      	ldr	r3, [pc, #84]	; (8006688 <_sbrk+0x60>)
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800663c:	4b13      	ldr	r3, [pc, #76]	; (800668c <_sbrk+0x64>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d102      	bne.n	800664a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006644:	4b11      	ldr	r3, [pc, #68]	; (800668c <_sbrk+0x64>)
 8006646:	4a12      	ldr	r2, [pc, #72]	; (8006690 <_sbrk+0x68>)
 8006648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800664a:	4b10      	ldr	r3, [pc, #64]	; (800668c <_sbrk+0x64>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	429a      	cmp	r2, r3
 8006656:	d207      	bcs.n	8006668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006658:	f007 f8da 	bl	800d810 <__errno>
 800665c:	4603      	mov	r3, r0
 800665e:	220c      	movs	r2, #12
 8006660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006662:	f04f 33ff 	mov.w	r3, #4294967295
 8006666:	e009      	b.n	800667c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006668:	4b08      	ldr	r3, [pc, #32]	; (800668c <_sbrk+0x64>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800666e:	4b07      	ldr	r3, [pc, #28]	; (800668c <_sbrk+0x64>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4413      	add	r3, r2
 8006676:	4a05      	ldr	r2, [pc, #20]	; (800668c <_sbrk+0x64>)
 8006678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800667a:	68fb      	ldr	r3, [r7, #12]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20020000 	.word	0x20020000
 8006688:	00000400 	.word	0x00000400
 800668c:	20000280 	.word	0x20000280
 8006690:	20000800 	.word	0x20000800

08006694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006694:	b480      	push	{r7}
 8006696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006698:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <SystemInit+0x20>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	4a05      	ldr	r2, [pc, #20]	; (80066b4 <SystemInit+0x20>)
 80066a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80066a8:	bf00      	nop
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	e000ed00 	.word	0xe000ed00

080066b8 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80066bc:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <MX_TIM10_Init+0x40>)
 80066be:	4a0f      	ldr	r2, [pc, #60]	; (80066fc <MX_TIM10_Init+0x44>)
 80066c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80066c2:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <MX_TIM10_Init+0x40>)
 80066c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80066c8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ca:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <MX_TIM10_Init+0x40>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80066d0:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <MX_TIM10_Init+0x40>)
 80066d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80066d6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066d8:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <MX_TIM10_Init+0x40>)
 80066da:	2200      	movs	r2, #0
 80066dc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066de:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <MX_TIM10_Init+0x40>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80066e4:	4804      	ldr	r0, [pc, #16]	; (80066f8 <MX_TIM10_Init+0x40>)
 80066e6:	f005 fca5 	bl	800c034 <HAL_TIM_Base_Init>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80066f0:	f7fe f822 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80066f4:	bf00      	nop
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000658 	.word	0x20000658
 80066fc:	40014400 	.word	0x40014400

08006700 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006704:	4b0f      	ldr	r3, [pc, #60]	; (8006744 <MX_TIM11_Init+0x44>)
 8006706:	4a10      	ldr	r2, [pc, #64]	; (8006748 <MX_TIM11_Init+0x48>)
 8006708:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800670a:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <MX_TIM11_Init+0x44>)
 800670c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006710:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <MX_TIM11_Init+0x44>)
 8006714:	2200      	movs	r2, #0
 8006716:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <MX_TIM11_Init+0x44>)
 800671a:	f247 522f 	movw	r2, #29999	; 0x752f
 800671e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006720:	4b08      	ldr	r3, [pc, #32]	; (8006744 <MX_TIM11_Init+0x44>)
 8006722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006726:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006728:	4b06      	ldr	r3, [pc, #24]	; (8006744 <MX_TIM11_Init+0x44>)
 800672a:	2200      	movs	r2, #0
 800672c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800672e:	4805      	ldr	r0, [pc, #20]	; (8006744 <MX_TIM11_Init+0x44>)
 8006730:	f005 fc80 	bl	800c034 <HAL_TIM_Base_Init>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800673a:	f7fd fffd 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800673e:	bf00      	nop
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	200006a0 	.word	0x200006a0
 8006748:	40014800 	.word	0x40014800

0800674c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1c      	ldr	r2, [pc, #112]	; (80067cc <HAL_TIM_Base_MspInit+0x80>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d116      	bne.n	800678c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	4b1b      	ldr	r3, [pc, #108]	; (80067d0 <HAL_TIM_Base_MspInit+0x84>)
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	4a1a      	ldr	r2, [pc, #104]	; (80067d0 <HAL_TIM_Base_MspInit+0x84>)
 8006768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800676c:	6453      	str	r3, [r2, #68]	; 0x44
 800676e:	4b18      	ldr	r3, [pc, #96]	; (80067d0 <HAL_TIM_Base_MspInit+0x84>)
 8006770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800677a:	2200      	movs	r2, #0
 800677c:	2100      	movs	r1, #0
 800677e:	2019      	movs	r0, #25
 8006780:	f000 fc9f 	bl	80070c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006784:	2019      	movs	r0, #25
 8006786:	f000 fcb8 	bl	80070fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800678a:	e01a      	b.n	80067c2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a10      	ldr	r2, [pc, #64]	; (80067d4 <HAL_TIM_Base_MspInit+0x88>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d115      	bne.n	80067c2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006796:	2300      	movs	r3, #0
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <HAL_TIM_Base_MspInit+0x84>)
 800679c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679e:	4a0c      	ldr	r2, [pc, #48]	; (80067d0 <HAL_TIM_Base_MspInit+0x84>)
 80067a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067a4:	6453      	str	r3, [r2, #68]	; 0x44
 80067a6:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <HAL_TIM_Base_MspInit+0x84>)
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ae:	60bb      	str	r3, [r7, #8]
 80067b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80067b2:	2200      	movs	r2, #0
 80067b4:	2100      	movs	r1, #0
 80067b6:	201a      	movs	r0, #26
 80067b8:	f000 fc83 	bl	80070c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80067bc:	201a      	movs	r0, #26
 80067be:	f000 fc9c 	bl	80070fa <HAL_NVIC_EnableIRQ>
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40023800 	.word	0x40023800
 80067d4:	40014800 	.word	0x40014800

080067d8 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d017      	beq.n	8006820 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	60fb      	str	r3, [r7, #12]
	}
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683c:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b00      	cmp	r3, #0
 800684e:	d056      	beq.n	80068fe <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006858:	2220      	movs	r2, #32
 800685a:	409a      	lsls	r2, r3
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8006870:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3304      	adds	r3, #4
 8006876:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8006878:	2300      	movs	r3, #0
 800687a:	82fb      	strh	r3, [r7, #22]
 800687c:	e01a      	b.n	80068b4 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f103 0045 	add.w	r0, r3, #69	; 0x45
 8006884:	8afb      	ldrh	r3, [r7, #22]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4413      	add	r3, r2
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	4619      	mov	r1, r3
 800688e:	f7ff fc57 	bl	8006140 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8006892:	8afb      	ldrh	r3, [r7, #22]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	4413      	add	r3, r2
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b0a      	cmp	r3, #10
 800689c:	d107      	bne.n	80068ae <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80068a4:	3301      	adds	r3, #1
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80068ae:	8afb      	ldrh	r3, [r7, #22]
 80068b0:	3301      	adds	r3, #1
 80068b2:	82fb      	strh	r3, [r7, #22]
 80068b4:	8afa      	ldrh	r2, [r7, #22]
 80068b6:	89fb      	ldrh	r3, [r7, #14]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d3e0      	bcc.n	800687e <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c4:	223f      	movs	r2, #63	; 0x3f
 80068c6:	409a      	lsls	r2, r3
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1d1a      	adds	r2, r3, #4
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2241      	movs	r2, #65	; 0x41
 80068e4:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0201 	orr.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
	}
}
 80068fe:	bf00      	nop
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	33ca      	adds	r3, #202	; 0xca
 8006916:	78fa      	ldrb	r2, [r7, #3]
 8006918:	4611      	mov	r1, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fc10 	bl	8006140 <RB_Write>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01f      	beq.n	800698c <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800694c:	e013      	b.n	8006976 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b0a      	cmp	r3, #10
 8006954:	d10c      	bne.n	8006970 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006962:	3b01      	subs	r3, #1
 8006964:	b2da      	uxtb	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 800696c:	2300      	movs	r3, #0
 800696e:	e00e      	b.n	800698e <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3345      	adds	r3, #69	; 0x45
 800697a:	68f9      	ldr	r1, [r7, #12]
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff fbb1 	bl	80060e4 <RB_Read>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0e2      	beq.n	800694e <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8006988:	2300      	movs	r3, #0
 800698a:	e000      	b.n	800698e <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800698c:	2301      	movs	r3, #1
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80069a4:	e012      	b.n	80069cc <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 80069a6:	7afb      	ldrb	r3, [r7, #11]
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff ffab 	bl	8006906 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 80069b6:	7afb      	ldrb	r3, [r7, #11]
 80069b8:	2b0a      	cmp	r3, #10
 80069ba:	d107      	bne.n	80069cc <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80069c2:	3301      	adds	r3, #1
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	72fb      	strb	r3, [r7, #11]
 80069d2:	7afb      	ldrb	r3, [r7, #11]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e6      	bne.n	80069a6 <UARTDMA_Print+0x10>
		}
	}
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 80069f4:	2301      	movs	r3, #1
 80069f6:	e000      	b.n	80069fa <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8006a0e:	2300      	movs	r3, #0
 8006a10:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d027      	beq.n	8006a72 <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8006a22:	e013      	b.n	8006a4c <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8006a24:	7b7b      	ldrb	r3, [r7, #13]
 8006a26:	2b0a      	cmp	r3, #10
 8006a28:	d107      	bne.n	8006a3a <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8006a3a:	89fb      	ldrh	r3, [r7, #14]
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	81fa      	strh	r2, [r7, #14]
 8006a40:	4619      	mov	r1, r3
 8006a42:	7b7a      	ldrb	r2, [r7, #13]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	440b      	add	r3, r1
 8006a48:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	33ca      	adds	r3, #202	; 0xca
 8006a50:	f107 020d 	add.w	r2, r7, #13
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff fb44 	bl	80060e4 <RB_Read>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0e0      	beq.n	8006a24 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3389      	adds	r3, #137	; 0x89
 8006a6a:	89fa      	ldrh	r2, [r7, #14]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f005 fdd5 	bl	800c61c <HAL_UART_Transmit_DMA>
	}
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0210 	orr.w	r2, r2, #16
 8006a9c:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0210 	orr.w	r2, r2, #16
 8006ab4:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0210 	orr.w	r2, r2, #16
 8006acc:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	2241      	movs	r2, #65	; 0x41
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f005 fe1d 	bl	800c718 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0208 	bic.w	r2, r2, #8
 8006af4:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0208 	bic.w	r2, r2, #8
 8006b0c:	601a      	str	r2, [r3, #0]
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006b1c:	4b11      	ldr	r3, [pc, #68]	; (8006b64 <MX_USART2_UART_Init+0x4c>)
 8006b1e:	4a12      	ldr	r2, [pc, #72]	; (8006b68 <MX_USART2_UART_Init+0x50>)
 8006b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006b22:	4b10      	ldr	r3, [pc, #64]	; (8006b64 <MX_USART2_UART_Init+0x4c>)
 8006b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006b2a:	4b0e      	ldr	r3, [pc, #56]	; (8006b64 <MX_USART2_UART_Init+0x4c>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006b30:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <MX_USART2_UART_Init+0x4c>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006b36:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <MX_USART2_UART_Init+0x4c>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006b3c:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <MX_USART2_UART_Init+0x4c>)
 8006b3e:	220c      	movs	r2, #12
 8006b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b42:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <MX_USART2_UART_Init+0x4c>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b48:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <MX_USART2_UART_Init+0x4c>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b4e:	4805      	ldr	r0, [pc, #20]	; (8006b64 <MX_USART2_UART_Init+0x4c>)
 8006b50:	f005 fd16 	bl	800c580 <HAL_UART_Init>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006b5a:	f7fd fded 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006b5e:	bf00      	nop
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	200007a8 	.word	0x200007a8
 8006b68:	40004400 	.word	0x40004400

08006b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08a      	sub	sp, #40	; 0x28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b74:	f107 0314 	add.w	r3, r7, #20
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	605a      	str	r2, [r3, #4]
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	60da      	str	r2, [r3, #12]
 8006b82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a47      	ldr	r2, [pc, #284]	; (8006ca8 <HAL_UART_MspInit+0x13c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	f040 8088 	bne.w	8006ca0 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b90:	2300      	movs	r3, #0
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	4b45      	ldr	r3, [pc, #276]	; (8006cac <HAL_UART_MspInit+0x140>)
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	4a44      	ldr	r2, [pc, #272]	; (8006cac <HAL_UART_MspInit+0x140>)
 8006b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8006ba0:	4b42      	ldr	r3, [pc, #264]	; (8006cac <HAL_UART_MspInit+0x140>)
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	4b3e      	ldr	r3, [pc, #248]	; (8006cac <HAL_UART_MspInit+0x140>)
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb4:	4a3d      	ldr	r2, [pc, #244]	; (8006cac <HAL_UART_MspInit+0x140>)
 8006bb6:	f043 0301 	orr.w	r3, r3, #1
 8006bba:	6313      	str	r3, [r2, #48]	; 0x30
 8006bbc:	4b3b      	ldr	r3, [pc, #236]	; (8006cac <HAL_UART_MspInit+0x140>)
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006bc8:	230c      	movs	r3, #12
 8006bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006bd8:	2307      	movs	r3, #7
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bdc:	f107 0314 	add.w	r3, r7, #20
 8006be0:	4619      	mov	r1, r3
 8006be2:	4833      	ldr	r0, [pc, #204]	; (8006cb0 <HAL_UART_MspInit+0x144>)
 8006be4:	f000 fede 	bl	80079a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006be8:	4b32      	ldr	r3, [pc, #200]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006bea:	4a33      	ldr	r2, [pc, #204]	; (8006cb8 <HAL_UART_MspInit+0x14c>)
 8006bec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006bee:	4b31      	ldr	r3, [pc, #196]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006bf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006bf4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bf6:	4b2f      	ldr	r3, [pc, #188]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bfc:	4b2d      	ldr	r3, [pc, #180]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c02:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c08:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c0a:	4b2a      	ldr	r3, [pc, #168]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c10:	4b28      	ldr	r3, [pc, #160]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006c16:	4b27      	ldr	r3, [pc, #156]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006c1c:	4b25      	ldr	r3, [pc, #148]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006c28:	4822      	ldr	r0, [pc, #136]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006c2a:	f000 faab 	bl	8007184 <HAL_DMA_Init>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006c34:	f7fd fd80 	bl	8004738 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a1e      	ldr	r2, [pc, #120]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8006c3e:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <HAL_UART_MspInit+0x148>)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006c44:	4b1d      	ldr	r3, [pc, #116]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c46:	4a1e      	ldr	r2, [pc, #120]	; (8006cc0 <HAL_UART_MspInit+0x154>)
 8006c48:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006c4a:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c50:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c52:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c54:	2240      	movs	r2, #64	; 0x40
 8006c56:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c58:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c5e:	4b17      	ldr	r3, [pc, #92]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c64:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c66:	4b15      	ldr	r3, [pc, #84]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c6c:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006c72:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006c78:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006c84:	480d      	ldr	r0, [pc, #52]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c86:	f000 fa7d 	bl	8007184 <HAL_DMA_Init>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8006c90:	f7fd fd52 	bl	8004738 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a09      	ldr	r2, [pc, #36]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c98:	635a      	str	r2, [r3, #52]	; 0x34
 8006c9a:	4a08      	ldr	r2, [pc, #32]	; (8006cbc <HAL_UART_MspInit+0x150>)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	3728      	adds	r7, #40	; 0x28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40004400 	.word	0x40004400
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	40020000 	.word	0x40020000
 8006cb4:	200006e8 	.word	0x200006e8
 8006cb8:	40026088 	.word	0x40026088
 8006cbc:	20000748 	.word	0x20000748
 8006cc0:	400260a0 	.word	0x400260a0

08006cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006cc8:	480d      	ldr	r0, [pc, #52]	; (8006d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006cca:	490e      	ldr	r1, [pc, #56]	; (8006d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006ccc:	4a0e      	ldr	r2, [pc, #56]	; (8006d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006cd0:	e002      	b.n	8006cd8 <LoopCopyDataInit>

08006cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cd6:	3304      	adds	r3, #4

08006cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cdc:	d3f9      	bcc.n	8006cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cde:	4a0b      	ldr	r2, [pc, #44]	; (8006d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ce0:	4c0b      	ldr	r4, [pc, #44]	; (8006d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ce4:	e001      	b.n	8006cea <LoopFillZerobss>

08006ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ce8:	3204      	adds	r2, #4

08006cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006cec:	d3fb      	bcc.n	8006ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006cee:	f7ff fcd1 	bl	8006694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cf2:	f006 fd93 	bl	800d81c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006cf6:	f7fd fbe3 	bl	80044c0 <main>
  bx  lr    
 8006cfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d04:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8006d08:	08025e60 	.word	0x08025e60
  ldr r2, =_sbss
 8006d0c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8006d10:	20000800 	.word	0x20000800

08006d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d14:	e7fe      	b.n	8006d14 <ADC_IRQHandler>
	...

08006d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d1c:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <HAL_Init+0x40>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a0d      	ldr	r2, [pc, #52]	; (8006d58 <HAL_Init+0x40>)
 8006d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d28:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <HAL_Init+0x40>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <HAL_Init+0x40>)
 8006d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d34:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <HAL_Init+0x40>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a07      	ldr	r2, [pc, #28]	; (8006d58 <HAL_Init+0x40>)
 8006d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d40:	2003      	movs	r0, #3
 8006d42:	f000 f9b3 	bl	80070ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d46:	2000      	movs	r0, #0
 8006d48:	f000 f808 	bl	8006d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d4c:	f7ff fb12 	bl	8006374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40023c00 	.word	0x40023c00

08006d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d64:	4b12      	ldr	r3, [pc, #72]	; (8006db0 <HAL_InitTick+0x54>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4b12      	ldr	r3, [pc, #72]	; (8006db4 <HAL_InitTick+0x58>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f9d9 	bl	8007132 <HAL_SYSTICK_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e00e      	b.n	8006da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b0f      	cmp	r3, #15
 8006d8e:	d80a      	bhi.n	8006da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d90:	2200      	movs	r2, #0
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	f000 f993 	bl	80070c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d9c:	4a06      	ldr	r2, [pc, #24]	; (8006db8 <HAL_InitTick+0x5c>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e000      	b.n	8006da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000034 	.word	0x20000034
 8006db4:	2000003c 	.word	0x2000003c
 8006db8:	20000038 	.word	0x20000038

08006dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_IncTick+0x20>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <HAL_IncTick+0x24>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4413      	add	r3, r2
 8006dcc:	4a04      	ldr	r2, [pc, #16]	; (8006de0 <HAL_IncTick+0x24>)
 8006dce:	6013      	str	r3, [r2, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	2000003c 	.word	0x2000003c
 8006de0:	200007ec 	.word	0x200007ec

08006de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return uwTick;
 8006de8:	4b03      	ldr	r3, [pc, #12]	; (8006df8 <HAL_GetTick+0x14>)
 8006dea:	681b      	ldr	r3, [r3, #0]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	200007ec 	.word	0x200007ec

08006dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e04:	f7ff ffee 	bl	8006de4 <HAL_GetTick>
 8006e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d005      	beq.n	8006e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e16:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <HAL_Delay+0x44>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006e22:	bf00      	nop
 8006e24:	f7ff ffde 	bl	8006de4 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d8f7      	bhi.n	8006e24 <HAL_Delay+0x28>
  {
  }
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	2000003c 	.word	0x2000003c

08006e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <__NVIC_SetPriorityGrouping+0x44>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e60:	4013      	ands	r3, r2
 8006e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e76:	4a04      	ldr	r2, [pc, #16]	; (8006e88 <__NVIC_SetPriorityGrouping+0x44>)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	60d3      	str	r3, [r2, #12]
}
 8006e7c:	bf00      	nop
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	e000ed00 	.word	0xe000ed00

08006e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	0a1b      	lsrs	r3, r3, #8
 8006e96:	f003 0307 	and.w	r3, r3, #7
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	e000ed00 	.word	0xe000ed00

08006ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	db0b      	blt.n	8006ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	f003 021f 	and.w	r2, r3, #31
 8006ec0:	4907      	ldr	r1, [pc, #28]	; (8006ee0 <__NVIC_EnableIRQ+0x38>)
 8006ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	2001      	movs	r0, #1
 8006eca:	fa00 f202 	lsl.w	r2, r0, r2
 8006ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	e000e100 	.word	0xe000e100

08006ee4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	db12      	blt.n	8006f1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	f003 021f 	and.w	r2, r3, #31
 8006efc:	490a      	ldr	r1, [pc, #40]	; (8006f28 <__NVIC_DisableIRQ+0x44>)
 8006efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	2001      	movs	r0, #1
 8006f06:	fa00 f202 	lsl.w	r2, r0, r2
 8006f0a:	3320      	adds	r3, #32
 8006f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006f10:	f3bf 8f4f 	dsb	sy
}
 8006f14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f16:	f3bf 8f6f 	isb	sy
}
 8006f1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	e000e100 	.word	0xe000e100

08006f2c <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	db0e      	blt.n	8006f5c <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006f3e:	4a0b      	ldr	r2, [pc, #44]	; (8006f6c <__NVIC_GetPendingIRQ+0x40>)
 8006f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	3340      	adds	r3, #64	; 0x40
 8006f48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	fa22 f303 	lsr.w	r3, r2, r3
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	e000      	b.n	8006f5e <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8006f5c:	2300      	movs	r3, #0
  }
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	e000e100 	.word	0xe000e100

08006f70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	db0c      	blt.n	8006f9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	f003 021f 	and.w	r2, r3, #31
 8006f88:	4907      	ldr	r1, [pc, #28]	; (8006fa8 <__NVIC_ClearPendingIRQ+0x38>)
 8006f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f8e:	095b      	lsrs	r3, r3, #5
 8006f90:	2001      	movs	r0, #1
 8006f92:	fa00 f202 	lsl.w	r2, r0, r2
 8006f96:	3360      	adds	r3, #96	; 0x60
 8006f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	e000e100 	.word	0xe000e100

08006fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	6039      	str	r1, [r7, #0]
 8006fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	db0a      	blt.n	8006fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	490c      	ldr	r1, [pc, #48]	; (8006ff8 <__NVIC_SetPriority+0x4c>)
 8006fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fca:	0112      	lsls	r2, r2, #4
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	440b      	add	r3, r1
 8006fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006fd4:	e00a      	b.n	8006fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	4908      	ldr	r1, [pc, #32]	; (8006ffc <__NVIC_SetPriority+0x50>)
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	3b04      	subs	r3, #4
 8006fe4:	0112      	lsls	r2, r2, #4
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	440b      	add	r3, r1
 8006fea:	761a      	strb	r2, [r3, #24]
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	e000e100 	.word	0xe000e100
 8006ffc:	e000ed00 	.word	0xe000ed00

08007000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007000:	b480      	push	{r7}
 8007002:	b089      	sub	sp, #36	; 0x24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f1c3 0307 	rsb	r3, r3, #7
 800701a:	2b04      	cmp	r3, #4
 800701c:	bf28      	it	cs
 800701e:	2304      	movcs	r3, #4
 8007020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	3304      	adds	r3, #4
 8007026:	2b06      	cmp	r3, #6
 8007028:	d902      	bls.n	8007030 <NVIC_EncodePriority+0x30>
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	3b03      	subs	r3, #3
 800702e:	e000      	b.n	8007032 <NVIC_EncodePriority+0x32>
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007034:	f04f 32ff 	mov.w	r2, #4294967295
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	43da      	mvns	r2, r3
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	401a      	ands	r2, r3
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007048:	f04f 31ff 	mov.w	r1, #4294967295
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	fa01 f303 	lsl.w	r3, r1, r3
 8007052:	43d9      	mvns	r1, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007058:	4313      	orrs	r3, r2
         );
}
 800705a:	4618      	mov	r0, r3
 800705c:	3724      	adds	r7, #36	; 0x24
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3b01      	subs	r3, #1
 8007074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007078:	d301      	bcc.n	800707e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800707a:	2301      	movs	r3, #1
 800707c:	e00f      	b.n	800709e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800707e:	4a0a      	ldr	r2, [pc, #40]	; (80070a8 <SysTick_Config+0x40>)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3b01      	subs	r3, #1
 8007084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007086:	210f      	movs	r1, #15
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	f7ff ff8e 	bl	8006fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <SysTick_Config+0x40>)
 8007092:	2200      	movs	r2, #0
 8007094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007096:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <SysTick_Config+0x40>)
 8007098:	2207      	movs	r2, #7
 800709a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	e000e010 	.word	0xe000e010

080070ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff fec5 	bl	8006e44 <__NVIC_SetPriorityGrouping>
}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	4603      	mov	r3, r0
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
 80070ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80070d4:	f7ff feda 	bl	8006e8c <__NVIC_GetPriorityGrouping>
 80070d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	6978      	ldr	r0, [r7, #20]
 80070e0:	f7ff ff8e 	bl	8007000 <NVIC_EncodePriority>
 80070e4:	4602      	mov	r2, r0
 80070e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ea:	4611      	mov	r1, r2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff ff5d 	bl	8006fac <__NVIC_SetPriority>
}
 80070f2:	bf00      	nop
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	4603      	mov	r3, r0
 8007102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff fecd 	bl	8006ea8 <__NVIC_EnableIRQ>
}
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	4603      	mov	r3, r0
 800711e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fedd 	bl	8006ee4 <__NVIC_DisableIRQ>
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff ff94 	bl	8007068 <SysTick_Config>
 8007140:	4603      	mov	r3, r0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	4603      	mov	r3, r0
 8007152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8007154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fee7 	bl	8006f2c <__NVIC_GetPendingIRQ>
 800715e:	4603      	mov	r3, r0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff fefa 	bl	8006f70 <__NVIC_ClearPendingIRQ>
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007190:	f7ff fe28 	bl	8006de4 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e099      	b.n	80072d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0201 	bic.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071c0:	e00f      	b.n	80071e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071c2:	f7ff fe0f 	bl	8006de4 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b05      	cmp	r3, #5
 80071ce:	d908      	bls.n	80071e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2203      	movs	r2, #3
 80071da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e078      	b.n	80072d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e8      	bne.n	80071c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4b38      	ldr	r3, [pc, #224]	; (80072dc <HAL_DMA_Init+0x158>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800720e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800721a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	2b04      	cmp	r3, #4
 800723a:	d107      	bne.n	800724c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	4313      	orrs	r3, r2
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	2b04      	cmp	r3, #4
 8007274:	d117      	bne.n	80072a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00e      	beq.n	80072a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fb0f 	bl	80078ac <DMA_CheckFifoParam>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2240      	movs	r2, #64	; 0x40
 8007298:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80072a2:	2301      	movs	r3, #1
 80072a4:	e016      	b.n	80072d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fac6 	bl	8007840 <DMA_CalcBaseAndBitshift>
 80072b4:	4603      	mov	r3, r0
 80072b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072bc:	223f      	movs	r2, #63	; 0x3f
 80072be:	409a      	lsls	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	f010803f 	.word	0xf010803f

080072e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_DMA_Start_IT+0x26>
 8007302:	2302      	movs	r3, #2
 8007304:	e040      	b.n	8007388 <HAL_DMA_Start_IT+0xa8>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b01      	cmp	r3, #1
 8007318:	d12f      	bne.n	800737a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2202      	movs	r2, #2
 800731e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 fa58 	bl	80077e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007338:	223f      	movs	r2, #63	; 0x3f
 800733a:	409a      	lsls	r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0216 	orr.w	r2, r2, #22
 800734e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d007      	beq.n	8007368 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0208 	orr.w	r2, r2, #8
 8007366:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0201 	orr.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e005      	b.n	8007386 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007382:	2302      	movs	r3, #2
 8007384:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800739e:	f7ff fd21 	bl	8006de4 <HAL_GetTick>
 80073a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d008      	beq.n	80073c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2280      	movs	r2, #128	; 0x80
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e052      	b.n	8007468 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0216 	bic.w	r2, r2, #22
 80073d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695a      	ldr	r2, [r3, #20]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d103      	bne.n	80073f2 <HAL_DMA_Abort+0x62>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d007      	beq.n	8007402 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0208 	bic.w	r2, r2, #8
 8007400:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0201 	bic.w	r2, r2, #1
 8007410:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007412:	e013      	b.n	800743c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007414:	f7ff fce6 	bl	8006de4 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b05      	cmp	r3, #5
 8007420:	d90c      	bls.n	800743c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2203      	movs	r2, #3
 800742c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e015      	b.n	8007468 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e4      	bne.n	8007414 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744e:	223f      	movs	r2, #63	; 0x3f
 8007450:	409a      	lsls	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d004      	beq.n	800748e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2280      	movs	r2, #128	; 0x80
 8007488:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e00c      	b.n	80074a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2205      	movs	r2, #5
 8007492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074c0:	4b92      	ldr	r3, [pc, #584]	; (800770c <HAL_DMA_IRQHandler+0x258>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a92      	ldr	r2, [pc, #584]	; (8007710 <HAL_DMA_IRQHandler+0x25c>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	0a9b      	lsrs	r3, r3, #10
 80074cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074de:	2208      	movs	r2, #8
 80074e0:	409a      	lsls	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4013      	ands	r3, r2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01a      	beq.n	8007520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d013      	beq.n	8007520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0204 	bic.w	r2, r2, #4
 8007506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750c:	2208      	movs	r2, #8
 800750e:	409a      	lsls	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007518:	f043 0201 	orr.w	r2, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007524:	2201      	movs	r2, #1
 8007526:	409a      	lsls	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d012      	beq.n	8007556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007542:	2201      	movs	r2, #1
 8007544:	409a      	lsls	r2, r3
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754e:	f043 0202 	orr.w	r2, r3, #2
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755a:	2204      	movs	r2, #4
 800755c:	409a      	lsls	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4013      	ands	r3, r2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d012      	beq.n	800758c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007578:	2204      	movs	r2, #4
 800757a:	409a      	lsls	r2, r3
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007584:	f043 0204 	orr.w	r2, r3, #4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007590:	2210      	movs	r2, #16
 8007592:	409a      	lsls	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4013      	ands	r3, r2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d043      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d03c      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ae:	2210      	movs	r2, #16
 80075b0:	409a      	lsls	r2, r3
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d018      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d108      	bne.n	80075e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d024      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	e01f      	b.n	8007624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01b      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
 80075f4:	e016      	b.n	8007624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d107      	bne.n	8007614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0208 	bic.w	r2, r2, #8
 8007612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007628:	2220      	movs	r2, #32
 800762a:	409a      	lsls	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4013      	ands	r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 808e 	beq.w	8007752 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8086 	beq.w	8007752 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764a:	2220      	movs	r2, #32
 800764c:	409a      	lsls	r2, r3
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b05      	cmp	r3, #5
 800765c:	d136      	bne.n	80076cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0216 	bic.w	r2, r2, #22
 800766c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695a      	ldr	r2, [r3, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800767c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <HAL_DMA_IRQHandler+0x1da>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0208 	bic.w	r2, r2, #8
 800769c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a2:	223f      	movs	r2, #63	; 0x3f
 80076a4:	409a      	lsls	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d07d      	beq.n	80077be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
        }
        return;
 80076ca:	e078      	b.n	80077be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01c      	beq.n	8007714 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d108      	bne.n	80076fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d030      	beq.n	8007752 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
 80076f8:	e02b      	b.n	8007752 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d027      	beq.n	8007752 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
 800770a:	e022      	b.n	8007752 <HAL_DMA_IRQHandler+0x29e>
 800770c:	20000034 	.word	0x20000034
 8007710:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10f      	bne.n	8007742 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0210 	bic.w	r2, r2, #16
 8007730:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007756:	2b00      	cmp	r3, #0
 8007758:	d032      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d022      	beq.n	80077ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2205      	movs	r2, #5
 800776a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0201 	bic.w	r2, r2, #1
 800777c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	3301      	adds	r3, #1
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	429a      	cmp	r2, r3
 8007788:	d307      	bcc.n	800779a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f2      	bne.n	800777e <HAL_DMA_IRQHandler+0x2ca>
 8007798:	e000      	b.n	800779c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800779a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4798      	blx	r3
 80077bc:	e000      	b.n	80077c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80077be:	bf00      	nop
    }
  }
}
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop

080077c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077d6:	b2db      	uxtb	r3, r3
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007800:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d108      	bne.n	8007824 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007822:	e007      	b.n	8007834 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	60da      	str	r2, [r3, #12]
}
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	3b10      	subs	r3, #16
 8007850:	4a14      	ldr	r2, [pc, #80]	; (80078a4 <DMA_CalcBaseAndBitshift+0x64>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800785a:	4a13      	ldr	r2, [pc, #76]	; (80078a8 <DMA_CalcBaseAndBitshift+0x68>)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b03      	cmp	r3, #3
 800786c:	d909      	bls.n	8007882 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007876:	f023 0303 	bic.w	r3, r3, #3
 800787a:	1d1a      	adds	r2, r3, #4
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	659a      	str	r2, [r3, #88]	; 0x58
 8007880:	e007      	b.n	8007892 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800788a:	f023 0303 	bic.w	r3, r3, #3
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	aaaaaaab 	.word	0xaaaaaaab
 80078a8:	08025934 	.word	0x08025934

080078ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d11f      	bne.n	8007906 <DMA_CheckFifoParam+0x5a>
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d856      	bhi.n	800797a <DMA_CheckFifoParam+0xce>
 80078cc:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <DMA_CheckFifoParam+0x28>)
 80078ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d2:	bf00      	nop
 80078d4:	080078e5 	.word	0x080078e5
 80078d8:	080078f7 	.word	0x080078f7
 80078dc:	080078e5 	.word	0x080078e5
 80078e0:	0800797b 	.word	0x0800797b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d046      	beq.n	800797e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078f4:	e043      	b.n	800797e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078fe:	d140      	bne.n	8007982 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007904:	e03d      	b.n	8007982 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800790e:	d121      	bne.n	8007954 <DMA_CheckFifoParam+0xa8>
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b03      	cmp	r3, #3
 8007914:	d837      	bhi.n	8007986 <DMA_CheckFifoParam+0xda>
 8007916:	a201      	add	r2, pc, #4	; (adr r2, 800791c <DMA_CheckFifoParam+0x70>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	0800792d 	.word	0x0800792d
 8007920:	08007933 	.word	0x08007933
 8007924:	0800792d 	.word	0x0800792d
 8007928:	08007945 	.word	0x08007945
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	73fb      	strb	r3, [r7, #15]
      break;
 8007930:	e030      	b.n	8007994 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d025      	beq.n	800798a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007942:	e022      	b.n	800798a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800794c:	d11f      	bne.n	800798e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007952:	e01c      	b.n	800798e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d903      	bls.n	8007962 <DMA_CheckFifoParam+0xb6>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b03      	cmp	r3, #3
 800795e:	d003      	beq.n	8007968 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007960:	e018      	b.n	8007994 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	73fb      	strb	r3, [r7, #15]
      break;
 8007966:	e015      	b.n	8007994 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00e      	beq.n	8007992 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	73fb      	strb	r3, [r7, #15]
      break;
 8007978:	e00b      	b.n	8007992 <DMA_CheckFifoParam+0xe6>
      break;
 800797a:	bf00      	nop
 800797c:	e00a      	b.n	8007994 <DMA_CheckFifoParam+0xe8>
      break;
 800797e:	bf00      	nop
 8007980:	e008      	b.n	8007994 <DMA_CheckFifoParam+0xe8>
      break;
 8007982:	bf00      	nop
 8007984:	e006      	b.n	8007994 <DMA_CheckFifoParam+0xe8>
      break;
 8007986:	bf00      	nop
 8007988:	e004      	b.n	8007994 <DMA_CheckFifoParam+0xe8>
      break;
 800798a:	bf00      	nop
 800798c:	e002      	b.n	8007994 <DMA_CheckFifoParam+0xe8>
      break;   
 800798e:	bf00      	nop
 8007990:	e000      	b.n	8007994 <DMA_CheckFifoParam+0xe8>
      break;
 8007992:	bf00      	nop
    }
  } 
  
  return status; 
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop

080079a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b089      	sub	sp, #36	; 0x24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079ba:	2300      	movs	r3, #0
 80079bc:	61fb      	str	r3, [r7, #28]
 80079be:	e159      	b.n	8007c74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80079c0:	2201      	movs	r2, #1
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	fa02 f303 	lsl.w	r3, r2, r3
 80079c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	4013      	ands	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	429a      	cmp	r2, r3
 80079da:	f040 8148 	bne.w	8007c6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f003 0303 	and.w	r3, r3, #3
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d005      	beq.n	80079f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d130      	bne.n	8007a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	2203      	movs	r2, #3
 8007a02:	fa02 f303 	lsl.w	r3, r2, r3
 8007a06:	43db      	mvns	r3, r3
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	fa02 f303 	lsl.w	r3, r2, r3
 8007a34:	43db      	mvns	r3, r3
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	091b      	lsrs	r3, r3, #4
 8007a42:	f003 0201 	and.w	r2, r3, #1
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d017      	beq.n	8007a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	2203      	movs	r2, #3
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	43db      	mvns	r3, r3
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	fa02 f303 	lsl.w	r3, r2, r3
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f003 0303 	and.w	r3, r3, #3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d123      	bne.n	8007ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	08da      	lsrs	r2, r3, #3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3208      	adds	r2, #8
 8007aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	220f      	movs	r2, #15
 8007ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8007abc:	43db      	mvns	r3, r3
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	691a      	ldr	r2, [r3, #16]
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	08da      	lsrs	r2, r3, #3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3208      	adds	r2, #8
 8007ae2:	69b9      	ldr	r1, [r7, #24]
 8007ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	2203      	movs	r2, #3
 8007af4:	fa02 f303 	lsl.w	r3, r2, r3
 8007af8:	43db      	mvns	r3, r3
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	4013      	ands	r3, r2
 8007afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f003 0203 	and.w	r2, r3, #3
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80a2 	beq.w	8007c6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	4b57      	ldr	r3, [pc, #348]	; (8007c8c <HAL_GPIO_Init+0x2e8>)
 8007b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b32:	4a56      	ldr	r2, [pc, #344]	; (8007c8c <HAL_GPIO_Init+0x2e8>)
 8007b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b38:	6453      	str	r3, [r2, #68]	; 0x44
 8007b3a:	4b54      	ldr	r3, [pc, #336]	; (8007c8c <HAL_GPIO_Init+0x2e8>)
 8007b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b46:	4a52      	ldr	r2, [pc, #328]	; (8007c90 <HAL_GPIO_Init+0x2ec>)
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	089b      	lsrs	r3, r3, #2
 8007b4c:	3302      	adds	r3, #2
 8007b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	f003 0303 	and.w	r3, r3, #3
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	220f      	movs	r2, #15
 8007b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b62:	43db      	mvns	r3, r3
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	4013      	ands	r3, r2
 8007b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a49      	ldr	r2, [pc, #292]	; (8007c94 <HAL_GPIO_Init+0x2f0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d019      	beq.n	8007ba6 <HAL_GPIO_Init+0x202>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a48      	ldr	r2, [pc, #288]	; (8007c98 <HAL_GPIO_Init+0x2f4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d013      	beq.n	8007ba2 <HAL_GPIO_Init+0x1fe>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a47      	ldr	r2, [pc, #284]	; (8007c9c <HAL_GPIO_Init+0x2f8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00d      	beq.n	8007b9e <HAL_GPIO_Init+0x1fa>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a46      	ldr	r2, [pc, #280]	; (8007ca0 <HAL_GPIO_Init+0x2fc>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d007      	beq.n	8007b9a <HAL_GPIO_Init+0x1f6>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a45      	ldr	r2, [pc, #276]	; (8007ca4 <HAL_GPIO_Init+0x300>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d101      	bne.n	8007b96 <HAL_GPIO_Init+0x1f2>
 8007b92:	2304      	movs	r3, #4
 8007b94:	e008      	b.n	8007ba8 <HAL_GPIO_Init+0x204>
 8007b96:	2307      	movs	r3, #7
 8007b98:	e006      	b.n	8007ba8 <HAL_GPIO_Init+0x204>
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e004      	b.n	8007ba8 <HAL_GPIO_Init+0x204>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e002      	b.n	8007ba8 <HAL_GPIO_Init+0x204>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <HAL_GPIO_Init+0x204>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	69fa      	ldr	r2, [r7, #28]
 8007baa:	f002 0203 	and.w	r2, r2, #3
 8007bae:	0092      	lsls	r2, r2, #2
 8007bb0:	4093      	lsls	r3, r2
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bb8:	4935      	ldr	r1, [pc, #212]	; (8007c90 <HAL_GPIO_Init+0x2ec>)
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	089b      	lsrs	r3, r3, #2
 8007bbe:	3302      	adds	r3, #2
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007bc6:	4b38      	ldr	r3, [pc, #224]	; (8007ca8 <HAL_GPIO_Init+0x304>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	43db      	mvns	r3, r3
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007bea:	4a2f      	ldr	r2, [pc, #188]	; (8007ca8 <HAL_GPIO_Init+0x304>)
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007bf0:	4b2d      	ldr	r3, [pc, #180]	; (8007ca8 <HAL_GPIO_Init+0x304>)
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	43db      	mvns	r3, r3
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c14:	4a24      	ldr	r2, [pc, #144]	; (8007ca8 <HAL_GPIO_Init+0x304>)
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c1a:	4b23      	ldr	r3, [pc, #140]	; (8007ca8 <HAL_GPIO_Init+0x304>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	43db      	mvns	r3, r3
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	4013      	ands	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007c3e:	4a1a      	ldr	r2, [pc, #104]	; (8007ca8 <HAL_GPIO_Init+0x304>)
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007c44:	4b18      	ldr	r3, [pc, #96]	; (8007ca8 <HAL_GPIO_Init+0x304>)
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	43db      	mvns	r3, r3
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	4013      	ands	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007c68:	4a0f      	ldr	r2, [pc, #60]	; (8007ca8 <HAL_GPIO_Init+0x304>)
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	3301      	adds	r3, #1
 8007c72:	61fb      	str	r3, [r7, #28]
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	2b0f      	cmp	r3, #15
 8007c78:	f67f aea2 	bls.w	80079c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	3724      	adds	r7, #36	; 0x24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	40013800 	.word	0x40013800
 8007c94:	40020000 	.word	0x40020000
 8007c98:	40020400 	.word	0x40020400
 8007c9c:	40020800 	.word	0x40020800
 8007ca0:	40020c00 	.word	0x40020c00
 8007ca4:	40021000 	.word	0x40021000
 8007ca8:	40013c00 	.word	0x40013c00

08007cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691a      	ldr	r2, [r3, #16]
 8007cbc:	887b      	ldrh	r3, [r7, #2]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	73fb      	strb	r3, [r7, #15]
 8007cc8:	e001      	b.n	8007cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	807b      	strh	r3, [r7, #2]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007cec:	787b      	ldrb	r3, [r7, #1]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cf2:	887a      	ldrh	r2, [r7, #2]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007cf8:	e003      	b.n	8007d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007cfa:	887b      	ldrh	r3, [r7, #2]
 8007cfc:	041a      	lsls	r2, r3, #16
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	619a      	str	r2, [r3, #24]
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d20:	887a      	ldrh	r2, [r7, #2]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4013      	ands	r3, r2
 8007d26:	041a      	lsls	r2, r3, #16
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	43d9      	mvns	r1, r3
 8007d2c:	887b      	ldrh	r3, [r7, #2]
 8007d2e:	400b      	ands	r3, r1
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	619a      	str	r2, [r3, #24]
}
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
	...

08007d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007d4e:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	4013      	ands	r3, r2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d006      	beq.n	8007d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d5a:	4a05      	ldr	r2, [pc, #20]	; (8007d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fc fcd4 	bl	8004710 <HAL_GPIO_EXTI_Callback>
  }
}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	40013c00 	.word	0x40013c00

08007d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e12b      	b.n	8007fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7fc fa86 	bl	80042ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2224      	movs	r2, #36	; 0x24
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0201 	bic.w	r2, r2, #1
 8007db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007dd8:	f003 fcf0 	bl	800b7bc <HAL_RCC_GetPCLK1Freq>
 8007ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	4a81      	ldr	r2, [pc, #516]	; (8007fe8 <HAL_I2C_Init+0x274>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d807      	bhi.n	8007df8 <HAL_I2C_Init+0x84>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4a80      	ldr	r2, [pc, #512]	; (8007fec <HAL_I2C_Init+0x278>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	bf94      	ite	ls
 8007df0:	2301      	movls	r3, #1
 8007df2:	2300      	movhi	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	e006      	b.n	8007e06 <HAL_I2C_Init+0x92>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4a7d      	ldr	r2, [pc, #500]	; (8007ff0 <HAL_I2C_Init+0x27c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	bf94      	ite	ls
 8007e00:	2301      	movls	r3, #1
 8007e02:	2300      	movhi	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e0e7      	b.n	8007fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4a78      	ldr	r2, [pc, #480]	; (8007ff4 <HAL_I2C_Init+0x280>)
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	0c9b      	lsrs	r3, r3, #18
 8007e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	4a6a      	ldr	r2, [pc, #424]	; (8007fe8 <HAL_I2C_Init+0x274>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d802      	bhi.n	8007e48 <HAL_I2C_Init+0xd4>
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	3301      	adds	r3, #1
 8007e46:	e009      	b.n	8007e5c <HAL_I2C_Init+0xe8>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007e4e:	fb02 f303 	mul.w	r3, r2, r3
 8007e52:	4a69      	ldr	r2, [pc, #420]	; (8007ff8 <HAL_I2C_Init+0x284>)
 8007e54:	fba2 2303 	umull	r2, r3, r2, r3
 8007e58:	099b      	lsrs	r3, r3, #6
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6812      	ldr	r2, [r2, #0]
 8007e60:	430b      	orrs	r3, r1
 8007e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	495c      	ldr	r1, [pc, #368]	; (8007fe8 <HAL_I2C_Init+0x274>)
 8007e78:	428b      	cmp	r3, r1
 8007e7a:	d819      	bhi.n	8007eb0 <HAL_I2C_Init+0x13c>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	1e59      	subs	r1, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e8a:	1c59      	adds	r1, r3, #1
 8007e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e90:	400b      	ands	r3, r1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <HAL_I2C_Init+0x138>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	1e59      	subs	r1, r3, #1
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007eaa:	e051      	b.n	8007f50 <HAL_I2C_Init+0x1dc>
 8007eac:	2304      	movs	r3, #4
 8007eae:	e04f      	b.n	8007f50 <HAL_I2C_Init+0x1dc>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d111      	bne.n	8007edc <HAL_I2C_Init+0x168>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	1e58      	subs	r0, r3, #1
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6859      	ldr	r1, [r3, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	440b      	add	r3, r1
 8007ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007eca:	3301      	adds	r3, #1
 8007ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2301      	moveq	r3, #1
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	e012      	b.n	8007f02 <HAL_I2C_Init+0x18e>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	1e58      	subs	r0, r3, #1
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6859      	ldr	r1, [r3, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	0099      	lsls	r1, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bf0c      	ite	eq
 8007efc:	2301      	moveq	r3, #1
 8007efe:	2300      	movne	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <HAL_I2C_Init+0x196>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e022      	b.n	8007f50 <HAL_I2C_Init+0x1dc>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10e      	bne.n	8007f30 <HAL_I2C_Init+0x1bc>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	1e58      	subs	r0, r3, #1
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6859      	ldr	r1, [r3, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	440b      	add	r3, r1
 8007f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f24:	3301      	adds	r3, #1
 8007f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f2e:	e00f      	b.n	8007f50 <HAL_I2C_Init+0x1dc>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	1e58      	subs	r0, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6859      	ldr	r1, [r3, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	0099      	lsls	r1, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f46:	3301      	adds	r3, #1
 8007f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f50:	6879      	ldr	r1, [r7, #4]
 8007f52:	6809      	ldr	r1, [r1, #0]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69da      	ldr	r2, [r3, #28]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6911      	ldr	r1, [r2, #16]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	68d2      	ldr	r2, [r2, #12]
 8007f8a:	4311      	orrs	r1, r2
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	6812      	ldr	r2, [r2, #0]
 8007f90:	430b      	orrs	r3, r1
 8007f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	695a      	ldr	r2, [r3, #20]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2220      	movs	r2, #32
 8007fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	000186a0 	.word	0x000186a0
 8007fec:	001e847f 	.word	0x001e847f
 8007ff0:	003d08ff 	.word	0x003d08ff
 8007ff4:	431bde83 	.word	0x431bde83
 8007ff8:	10624dd3 	.word	0x10624dd3

08007ffc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af02      	add	r7, sp, #8
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	607a      	str	r2, [r7, #4]
 8008006:	461a      	mov	r2, r3
 8008008:	460b      	mov	r3, r1
 800800a:	817b      	strh	r3, [r7, #10]
 800800c:	4613      	mov	r3, r2
 800800e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008010:	f7fe fee8 	bl	8006de4 <HAL_GetTick>
 8008014:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b20      	cmp	r3, #32
 8008020:	f040 80e0 	bne.w	80081e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	2319      	movs	r3, #25
 800802a:	2201      	movs	r2, #1
 800802c:	4970      	ldr	r1, [pc, #448]	; (80081f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f002 fd7a 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800803a:	2302      	movs	r3, #2
 800803c:	e0d3      	b.n	80081e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <HAL_I2C_Master_Transmit+0x50>
 8008048:	2302      	movs	r3, #2
 800804a:	e0cc      	b.n	80081e6 <HAL_I2C_Master_Transmit+0x1ea>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b01      	cmp	r3, #1
 8008060:	d007      	beq.n	8008072 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0201 	orr.w	r2, r2, #1
 8008070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008080:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2221      	movs	r2, #33	; 0x21
 8008086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2210      	movs	r2, #16
 800808e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	893a      	ldrh	r2, [r7, #8]
 80080a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4a50      	ldr	r2, [pc, #320]	; (80081f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80080b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80080b4:	8979      	ldrh	r1, [r7, #10]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f002 f9be 	bl	800a43c <I2C_MasterRequestWrite>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e08d      	b.n	80081e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	613b      	str	r3, [r7, #16]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	613b      	str	r3, [r7, #16]
 80080de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80080e0:	e066      	b.n	80081b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	6a39      	ldr	r1, [r7, #32]
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f002 fdf4 	bl	800acd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00d      	beq.n	800810e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d107      	bne.n	800810a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e06b      	b.n	80081e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	781a      	ldrb	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008136:	3b01      	subs	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b04      	cmp	r3, #4
 800814a:	d11b      	bne.n	8008184 <HAL_I2C_Master_Transmit+0x188>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008150:	2b00      	cmp	r3, #0
 8008152:	d017      	beq.n	8008184 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816e:	b29b      	uxth	r3, r3
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	6a39      	ldr	r1, [r7, #32]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f002 fde4 	bl	800ad56 <I2C_WaitOnBTFFlagUntilTimeout>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00d      	beq.n	80081b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	2b04      	cmp	r3, #4
 800819a:	d107      	bne.n	80081ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e01a      	b.n	80081e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d194      	bne.n	80080e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	e000      	b.n	80081e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80081e4:	2302      	movs	r3, #2
  }
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	00100002 	.word	0x00100002
 80081f4:	ffff0000 	.word	0xffff0000

080081f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08c      	sub	sp, #48	; 0x30
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	607a      	str	r2, [r7, #4]
 8008202:	461a      	mov	r2, r3
 8008204:	460b      	mov	r3, r1
 8008206:	817b      	strh	r3, [r7, #10]
 8008208:	4613      	mov	r3, r2
 800820a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800820c:	f7fe fdea 	bl	8006de4 <HAL_GetTick>
 8008210:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b20      	cmp	r3, #32
 800821c:	f040 820b 	bne.w	8008636 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	2319      	movs	r3, #25
 8008226:	2201      	movs	r2, #1
 8008228:	497c      	ldr	r1, [pc, #496]	; (800841c <HAL_I2C_Master_Receive+0x224>)
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f002 fc7c 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008236:	2302      	movs	r3, #2
 8008238:	e1fe      	b.n	8008638 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_I2C_Master_Receive+0x50>
 8008244:	2302      	movs	r3, #2
 8008246:	e1f7      	b.n	8008638 <HAL_I2C_Master_Receive+0x440>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b01      	cmp	r3, #1
 800825c:	d007      	beq.n	800826e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f042 0201 	orr.w	r2, r2, #1
 800826c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800827c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2222      	movs	r2, #34	; 0x22
 8008282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2210      	movs	r2, #16
 800828a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	893a      	ldrh	r2, [r7, #8]
 800829e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4a5c      	ldr	r2, [pc, #368]	; (8008420 <HAL_I2C_Master_Receive+0x228>)
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80082b0:	8979      	ldrh	r1, [r7, #10]
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f002 f942 	bl	800a540 <I2C_MasterRequestRead>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e1b8      	b.n	8008638 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d113      	bne.n	80082f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ce:	2300      	movs	r3, #0
 80082d0:	623b      	str	r3, [r7, #32]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	623b      	str	r3, [r7, #32]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	623b      	str	r3, [r7, #32]
 80082e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	e18c      	b.n	8008610 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d11b      	bne.n	8008336 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800830c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800830e:	2300      	movs	r3, #0
 8008310:	61fb      	str	r3, [r7, #28]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	61fb      	str	r3, [r7, #28]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	61fb      	str	r3, [r7, #28]
 8008322:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	e16c      	b.n	8008610 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800833a:	2b02      	cmp	r3, #2
 800833c:	d11b      	bne.n	8008376 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800834c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800835c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800835e:	2300      	movs	r3, #0
 8008360:	61bb      	str	r3, [r7, #24]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	61bb      	str	r3, [r7, #24]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	61bb      	str	r3, [r7, #24]
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	e14c      	b.n	8008610 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008386:	2300      	movs	r3, #0
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	617b      	str	r3, [r7, #20]
 800839a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800839c:	e138      	b.n	8008610 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	f200 80f1 	bhi.w	800858a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d123      	bne.n	80083f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f002 fd41 	bl	800ae3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e139      	b.n	8008638 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	b2d2      	uxtb	r2, r2
 80083d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	3b01      	subs	r3, #1
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083f6:	e10b      	b.n	8008610 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d14e      	bne.n	800849e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	2200      	movs	r2, #0
 8008408:	4906      	ldr	r1, [pc, #24]	; (8008424 <HAL_I2C_Master_Receive+0x22c>)
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f002 fb8c 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e10e      	b.n	8008638 <HAL_I2C_Master_Receive+0x440>
 800841a:	bf00      	nop
 800841c:	00100002 	.word	0x00100002
 8008420:	ffff0000 	.word	0xffff0000
 8008424:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691a      	ldr	r2, [r3, #16]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	b2d2      	uxtb	r2, r2
 8008444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008454:	3b01      	subs	r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008460:	b29b      	uxth	r3, r3
 8008462:	3b01      	subs	r3, #1
 8008464:	b29a      	uxth	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691a      	ldr	r2, [r3, #16]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	b2d2      	uxtb	r2, r2
 8008476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800849c:	e0b8      	b.n	8008610 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	2200      	movs	r2, #0
 80084a6:	4966      	ldr	r1, [pc, #408]	; (8008640 <HAL_I2C_Master_Receive+0x448>)
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f002 fb3d 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e0bf      	b.n	8008638 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691a      	ldr	r2, [r3, #16]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084e4:	3b01      	subs	r3, #1
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	3b01      	subs	r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	2200      	movs	r2, #0
 8008502:	494f      	ldr	r1, [pc, #316]	; (8008640 <HAL_I2C_Master_Receive+0x448>)
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f002 fb0f 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e091      	b.n	8008638 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	691a      	ldr	r2, [r3, #16]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	b2d2      	uxtb	r2, r2
 8008530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008540:	3b01      	subs	r3, #1
 8008542:	b29a      	uxth	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854c:	b29b      	uxth	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	b29a      	uxth	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	b2d2      	uxtb	r2, r2
 8008562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008572:	3b01      	subs	r3, #1
 8008574:	b29a      	uxth	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800857e:	b29b      	uxth	r3, r3
 8008580:	3b01      	subs	r3, #1
 8008582:	b29a      	uxth	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008588:	e042      	b.n	8008610 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800858a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800858c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f002 fc54 	bl	800ae3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e04c      	b.n	8008638 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	b2d2      	uxtb	r2, r2
 80085aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	1c5a      	adds	r2, r3, #1
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d118      	bne.n	8008610 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	691a      	ldr	r2, [r3, #16]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	b2d2      	uxtb	r2, r2
 80085ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085fa:	3b01      	subs	r3, #1
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008606:	b29b      	uxth	r3, r3
 8008608:	3b01      	subs	r3, #1
 800860a:	b29a      	uxth	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008614:	2b00      	cmp	r3, #0
 8008616:	f47f aec2 	bne.w	800839e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2220      	movs	r2, #32
 800861e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e000      	b.n	8008638 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008636:	2302      	movs	r3, #2
  }
}
 8008638:	4618      	mov	r0, r3
 800863a:	3728      	adds	r7, #40	; 0x28
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	00010004 	.word	0x00010004

08008644 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af02      	add	r7, sp, #8
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	461a      	mov	r2, r3
 8008652:	4603      	mov	r3, r0
 8008654:	817b      	strh	r3, [r7, #10]
 8008656:	460b      	mov	r3, r1
 8008658:	813b      	strh	r3, [r7, #8]
 800865a:	4613      	mov	r3, r2
 800865c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800865e:	f7fe fbc1 	bl	8006de4 <HAL_GetTick>
 8008662:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b20      	cmp	r3, #32
 800866e:	f040 80d9 	bne.w	8008824 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	2319      	movs	r3, #25
 8008678:	2201      	movs	r2, #1
 800867a:	496d      	ldr	r1, [pc, #436]	; (8008830 <HAL_I2C_Mem_Write+0x1ec>)
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f002 fa53 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008688:	2302      	movs	r3, #2
 800868a:	e0cc      	b.n	8008826 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008692:	2b01      	cmp	r3, #1
 8008694:	d101      	bne.n	800869a <HAL_I2C_Mem_Write+0x56>
 8008696:	2302      	movs	r3, #2
 8008698:	e0c5      	b.n	8008826 <HAL_I2C_Mem_Write+0x1e2>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d007      	beq.n	80086c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f042 0201 	orr.w	r2, r2, #1
 80086be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2221      	movs	r2, #33	; 0x21
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2240      	movs	r2, #64	; 0x40
 80086dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a3a      	ldr	r2, [r7, #32]
 80086ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4a4d      	ldr	r2, [pc, #308]	; (8008834 <HAL_I2C_Mem_Write+0x1f0>)
 8008700:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008702:	88f8      	ldrh	r0, [r7, #6]
 8008704:	893a      	ldrh	r2, [r7, #8]
 8008706:	8979      	ldrh	r1, [r7, #10]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	4603      	mov	r3, r0
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f001 ffe2 	bl	800a6dc <I2C_RequestMemoryWrite>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d052      	beq.n	80087c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e081      	b.n	8008826 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f002 fad4 	bl	800acd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00d      	beq.n	800874e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	2b04      	cmp	r3, #4
 8008738:	d107      	bne.n	800874a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008748:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e06b      	b.n	8008826 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	781a      	ldrb	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008768:	3b01      	subs	r3, #1
 800876a:	b29a      	uxth	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008774:	b29b      	uxth	r3, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b04      	cmp	r3, #4
 800878a:	d11b      	bne.n	80087c4 <HAL_I2C_Mem_Write+0x180>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008790:	2b00      	cmp	r3, #0
 8008792:	d017      	beq.n	80087c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	781a      	ldrb	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ae:	3b01      	subs	r3, #1
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	3b01      	subs	r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1aa      	bne.n	8008722 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f002 fac0 	bl	800ad56 <I2C_WaitOnBTFFlagUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00d      	beq.n	80087f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d107      	bne.n	80087f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e016      	b.n	8008826 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	e000      	b.n	8008826 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008824:	2302      	movs	r3, #2
  }
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	00100002 	.word	0x00100002
 8008834:	ffff0000 	.word	0xffff0000

08008838 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08c      	sub	sp, #48	; 0x30
 800883c:	af02      	add	r7, sp, #8
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	4608      	mov	r0, r1
 8008842:	4611      	mov	r1, r2
 8008844:	461a      	mov	r2, r3
 8008846:	4603      	mov	r3, r0
 8008848:	817b      	strh	r3, [r7, #10]
 800884a:	460b      	mov	r3, r1
 800884c:	813b      	strh	r3, [r7, #8]
 800884e:	4613      	mov	r3, r2
 8008850:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008852:	f7fe fac7 	bl	8006de4 <HAL_GetTick>
 8008856:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b20      	cmp	r3, #32
 8008862:	f040 8208 	bne.w	8008c76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	2319      	movs	r3, #25
 800886c:	2201      	movs	r2, #1
 800886e:	497b      	ldr	r1, [pc, #492]	; (8008a5c <HAL_I2C_Mem_Read+0x224>)
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f002 f959 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800887c:	2302      	movs	r3, #2
 800887e:	e1fb      	b.n	8008c78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <HAL_I2C_Mem_Read+0x56>
 800888a:	2302      	movs	r3, #2
 800888c:	e1f4      	b.n	8008c78 <HAL_I2C_Mem_Read+0x440>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d007      	beq.n	80088b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0201 	orr.w	r2, r2, #1
 80088b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2222      	movs	r2, #34	; 0x22
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2240      	movs	r2, #64	; 0x40
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80088e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4a5b      	ldr	r2, [pc, #364]	; (8008a60 <HAL_I2C_Mem_Read+0x228>)
 80088f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088f6:	88f8      	ldrh	r0, [r7, #6]
 80088f8:	893a      	ldrh	r2, [r7, #8]
 80088fa:	8979      	ldrh	r1, [r7, #10]
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	4603      	mov	r3, r0
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f001 ff7e 	bl	800a808 <I2C_RequestMemoryRead>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e1b0      	b.n	8008c78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891a:	2b00      	cmp	r3, #0
 800891c:	d113      	bne.n	8008946 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800891e:	2300      	movs	r3, #0
 8008920:	623b      	str	r3, [r7, #32]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	623b      	str	r3, [r7, #32]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	623b      	str	r3, [r7, #32]
 8008932:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	e184      	b.n	8008c50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800894a:	2b01      	cmp	r3, #1
 800894c:	d11b      	bne.n	8008986 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800895c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800895e:	2300      	movs	r3, #0
 8008960:	61fb      	str	r3, [r7, #28]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	61fb      	str	r3, [r7, #28]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	61fb      	str	r3, [r7, #28]
 8008972:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e164      	b.n	8008c50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800898a:	2b02      	cmp	r3, #2
 800898c:	d11b      	bne.n	80089c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800899c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089ae:	2300      	movs	r3, #0
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	61bb      	str	r3, [r7, #24]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	61bb      	str	r3, [r7, #24]
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	e144      	b.n	8008c50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089c6:	2300      	movs	r3, #0
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	617b      	str	r3, [r7, #20]
 80089da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80089dc:	e138      	b.n	8008c50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	f200 80f1 	bhi.w	8008bca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d123      	bne.n	8008a38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f002 fa21 	bl	800ae3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e139      	b.n	8008c78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a36:	e10b      	b.n	8008c50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d14e      	bne.n	8008ade <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a46:	2200      	movs	r2, #0
 8008a48:	4906      	ldr	r1, [pc, #24]	; (8008a64 <HAL_I2C_Mem_Read+0x22c>)
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f002 f86c 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d008      	beq.n	8008a68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e10e      	b.n	8008c78 <HAL_I2C_Mem_Read+0x440>
 8008a5a:	bf00      	nop
 8008a5c:	00100002 	.word	0x00100002
 8008a60:	ffff0000 	.word	0xffff0000
 8008a64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a94:	3b01      	subs	r3, #1
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	691a      	ldr	r2, [r3, #16]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	b2d2      	uxtb	r2, r2
 8008ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008adc:	e0b8      	b.n	8008c50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	4966      	ldr	r1, [pc, #408]	; (8008c80 <HAL_I2C_Mem_Read+0x448>)
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f002 f81d 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e0bf      	b.n	8008c78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691a      	ldr	r2, [r3, #16]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	2200      	movs	r2, #0
 8008b42:	494f      	ldr	r1, [pc, #316]	; (8008c80 <HAL_I2C_Mem_Read+0x448>)
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f001 ffef 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e091      	b.n	8008c78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	b2d2      	uxtb	r2, r2
 8008b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	b2d2      	uxtb	r2, r2
 8008ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bc8:	e042      	b.n	8008c50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f002 f934 	bl	800ae3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e04c      	b.n	8008c78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	691a      	ldr	r2, [r3, #16]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	b2d2      	uxtb	r2, r2
 8008bea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	f003 0304 	and.w	r3, r3, #4
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d118      	bne.n	8008c50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	b2d2      	uxtb	r2, r2
 8008c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f47f aec2 	bne.w	80089de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	e000      	b.n	8008c78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008c76:	2302      	movs	r3, #2
  }
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3728      	adds	r7, #40	; 0x28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	00010004 	.word	0x00010004

08008c84 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ca4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	2b10      	cmp	r3, #16
 8008cb2:	d003      	beq.n	8008cbc <HAL_I2C_EV_IRQHandler+0x38>
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	2b40      	cmp	r3, #64	; 0x40
 8008cb8:	f040 80c1 	bne.w	8008e3e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10d      	bne.n	8008cf2 <HAL_I2C_EV_IRQHandler+0x6e>
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008cdc:	d003      	beq.n	8008ce6 <HAL_I2C_EV_IRQHandler+0x62>
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008ce4:	d101      	bne.n	8008cea <HAL_I2C_EV_IRQHandler+0x66>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e000      	b.n	8008cec <HAL_I2C_EV_IRQHandler+0x68>
 8008cea:	2300      	movs	r3, #0
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	f000 8132 	beq.w	8008f56 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00c      	beq.n	8008d16 <HAL_I2C_EV_IRQHandler+0x92>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	0a5b      	lsrs	r3, r3, #9
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d006      	beq.n	8008d16 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f002 f91c 	bl	800af46 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fd79 	bl	8009806 <I2C_Master_SB>
 8008d14:	e092      	b.n	8008e3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	08db      	lsrs	r3, r3, #3
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d009      	beq.n	8008d36 <HAL_I2C_EV_IRQHandler+0xb2>
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	0a5b      	lsrs	r3, r3, #9
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fdef 	bl	8009912 <I2C_Master_ADD10>
 8008d34:	e082      	b.n	8008e3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d009      	beq.n	8008d56 <HAL_I2C_EV_IRQHandler+0xd2>
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	0a5b      	lsrs	r3, r3, #9
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fe09 	bl	8009966 <I2C_Master_ADDR>
 8008d54:	e072      	b.n	8008e3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	089b      	lsrs	r3, r3, #2
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d03b      	beq.n	8008dda <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d70:	f000 80f3 	beq.w	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	09db      	lsrs	r3, r3, #7
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00f      	beq.n	8008da0 <HAL_I2C_EV_IRQHandler+0x11c>
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	0a9b      	lsrs	r3, r3, #10
 8008d84:	f003 0301 	and.w	r3, r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d009      	beq.n	8008da0 <HAL_I2C_EV_IRQHandler+0x11c>
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	089b      	lsrs	r3, r3, #2
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d103      	bne.n	8008da0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f9f3 	bl	8009184 <I2C_MasterTransmit_TXE>
 8008d9e:	e04d      	b.n	8008e3c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	089b      	lsrs	r3, r3, #2
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 80d6 	beq.w	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	0a5b      	lsrs	r3, r3, #9
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 80cf 	beq.w	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	2b21      	cmp	r3, #33	; 0x21
 8008dc0:	d103      	bne.n	8008dca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa7a 	bl	80092bc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dc8:	e0c7      	b.n	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	f040 80c4 	bne.w	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fae8 	bl	80093a8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dd8:	e0bf      	b.n	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008de8:	f000 80b7 	beq.w	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	099b      	lsrs	r3, r3, #6
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00f      	beq.n	8008e18 <HAL_I2C_EV_IRQHandler+0x194>
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	0a9b      	lsrs	r3, r3, #10
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d009      	beq.n	8008e18 <HAL_I2C_EV_IRQHandler+0x194>
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	089b      	lsrs	r3, r3, #2
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d103      	bne.n	8008e18 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fb5d 	bl	80094d0 <I2C_MasterReceive_RXNE>
 8008e16:	e011      	b.n	8008e3c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	089b      	lsrs	r3, r3, #2
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 809a 	beq.w	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	0a5b      	lsrs	r3, r3, #9
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 8093 	beq.w	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fbfc 	bl	8009632 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e3a:	e08e      	b.n	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008e3c:	e08d      	b.n	8008f5a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d004      	beq.n	8008e50 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	61fb      	str	r3, [r7, #28]
 8008e4e:	e007      	b.n	8008e60 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d012      	beq.n	8008e92 <HAL_I2C_EV_IRQHandler+0x20e>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	0a5b      	lsrs	r3, r3, #9
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00c      	beq.n	8008e92 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008e88:	69b9      	ldr	r1, [r7, #24]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 ffba 	bl	8009e04 <I2C_Slave_ADDR>
 8008e90:	e066      	b.n	8008f60 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	091b      	lsrs	r3, r3, #4
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <HAL_I2C_EV_IRQHandler+0x22e>
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	0a5b      	lsrs	r3, r3, #9
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fff4 	bl	8009e98 <I2C_Slave_STOPF>
 8008eb0:	e056      	b.n	8008f60 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b21      	cmp	r3, #33	; 0x21
 8008eb6:	d002      	beq.n	8008ebe <HAL_I2C_EV_IRQHandler+0x23a>
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2b29      	cmp	r3, #41	; 0x29
 8008ebc:	d125      	bne.n	8008f0a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	09db      	lsrs	r3, r3, #7
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00f      	beq.n	8008eea <HAL_I2C_EV_IRQHandler+0x266>
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	0a9b      	lsrs	r3, r3, #10
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d009      	beq.n	8008eea <HAL_I2C_EV_IRQHandler+0x266>
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	089b      	lsrs	r3, r3, #2
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d103      	bne.n	8008eea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fed0 	bl	8009c88 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ee8:	e039      	b.n	8008f5e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	089b      	lsrs	r3, r3, #2
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d033      	beq.n	8008f5e <HAL_I2C_EV_IRQHandler+0x2da>
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	0a5b      	lsrs	r3, r3, #9
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d02d      	beq.n	8008f5e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fefd 	bl	8009d02 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f08:	e029      	b.n	8008f5e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	099b      	lsrs	r3, r3, #6
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00f      	beq.n	8008f36 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	0a9b      	lsrs	r3, r3, #10
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d009      	beq.n	8008f36 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	089b      	lsrs	r3, r3, #2
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d103      	bne.n	8008f36 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 ff08 	bl	8009d44 <I2C_SlaveReceive_RXNE>
 8008f34:	e014      	b.n	8008f60 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	089b      	lsrs	r3, r3, #2
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00e      	beq.n	8008f60 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	0a5b      	lsrs	r3, r3, #9
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d008      	beq.n	8008f60 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 ff36 	bl	8009dc0 <I2C_SlaveReceive_BTF>
 8008f54:	e004      	b.n	8008f60 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008f56:	bf00      	nop
 8008f58:	e002      	b.n	8008f60 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f5a:	bf00      	nop
 8008f5c:	e000      	b.n	8008f60 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f5e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b08a      	sub	sp, #40	; 0x28
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f88:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00e      	beq.n	8008fb4 <HAL_I2C_ER_IRQHandler+0x4e>
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	0a1b      	lsrs	r3, r3, #8
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d008      	beq.n	8008fb4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	f043 0301 	orr.w	r3, r3, #1
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fb2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	0a5b      	lsrs	r3, r3, #9
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00e      	beq.n	8008fde <HAL_I2C_ER_IRQHandler+0x78>
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	0a1b      	lsrs	r3, r3, #8
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d008      	beq.n	8008fde <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	f043 0302 	orr.w	r3, r3, #2
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008fdc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	0a9b      	lsrs	r3, r3, #10
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d03f      	beq.n	800906a <HAL_I2C_ER_IRQHandler+0x104>
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	0a1b      	lsrs	r3, r3, #8
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d039      	beq.n	800906a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008ff6:	7efb      	ldrb	r3, [r7, #27]
 8008ff8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009008:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009010:	7ebb      	ldrb	r3, [r7, #26]
 8009012:	2b20      	cmp	r3, #32
 8009014:	d112      	bne.n	800903c <HAL_I2C_ER_IRQHandler+0xd6>
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10f      	bne.n	800903c <HAL_I2C_ER_IRQHandler+0xd6>
 800901c:	7cfb      	ldrb	r3, [r7, #19]
 800901e:	2b21      	cmp	r3, #33	; 0x21
 8009020:	d008      	beq.n	8009034 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009022:	7cfb      	ldrb	r3, [r7, #19]
 8009024:	2b29      	cmp	r3, #41	; 0x29
 8009026:	d005      	beq.n	8009034 <HAL_I2C_ER_IRQHandler+0xce>
 8009028:	7cfb      	ldrb	r3, [r7, #19]
 800902a:	2b28      	cmp	r3, #40	; 0x28
 800902c:	d106      	bne.n	800903c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b21      	cmp	r3, #33	; 0x21
 8009032:	d103      	bne.n	800903c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f001 f85f 	bl	800a0f8 <I2C_Slave_AF>
 800903a:	e016      	b.n	800906a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009044:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	f043 0304 	orr.w	r3, r3, #4
 800904c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800904e:	7efb      	ldrb	r3, [r7, #27]
 8009050:	2b10      	cmp	r3, #16
 8009052:	d002      	beq.n	800905a <HAL_I2C_ER_IRQHandler+0xf4>
 8009054:	7efb      	ldrb	r3, [r7, #27]
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d107      	bne.n	800906a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009068:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	0adb      	lsrs	r3, r3, #11
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00e      	beq.n	8009094 <HAL_I2C_ER_IRQHandler+0x12e>
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	0a1b      	lsrs	r3, r3, #8
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d008      	beq.n	8009094 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	f043 0308 	orr.w	r3, r3, #8
 8009088:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009092:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	2b00      	cmp	r3, #0
 8009098:	d008      	beq.n	80090ac <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	431a      	orrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 f896 	bl	800a1d8 <I2C_ITError>
  }
}
 80090ac:	bf00      	nop
 80090ae:	3728      	adds	r7, #40	; 0x28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
 8009110:	4613      	mov	r3, r2
 8009112:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009192:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800919a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d150      	bne.n	800924c <I2C_MasterTransmit_TXE+0xc8>
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	2b21      	cmp	r3, #33	; 0x21
 80091ae:	d14d      	bne.n	800924c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b08      	cmp	r3, #8
 80091b4:	d01d      	beq.n	80091f2 <I2C_MasterTransmit_TXE+0x6e>
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b20      	cmp	r3, #32
 80091ba:	d01a      	beq.n	80091f2 <I2C_MasterTransmit_TXE+0x6e>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80091c2:	d016      	beq.n	80091f2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091d2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2211      	movs	r2, #17
 80091d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff ff62 	bl	80090b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80091f0:	e060      	b.n	80092b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009200:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009210:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2220      	movs	r2, #32
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b40      	cmp	r3, #64	; 0x40
 800922a:	d107      	bne.n	800923c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f7ff ff7d 	bl	8009134 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800923a:	e03b      	b.n	80092b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff ff35 	bl	80090b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800924a:	e033      	b.n	80092b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	2b21      	cmp	r3, #33	; 0x21
 8009250:	d005      	beq.n	800925e <I2C_MasterTransmit_TXE+0xda>
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	2b40      	cmp	r3, #64	; 0x40
 8009256:	d12d      	bne.n	80092b4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	2b22      	cmp	r3, #34	; 0x22
 800925c:	d12a      	bne.n	80092b4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009262:	b29b      	uxth	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d108      	bne.n	800927a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009276:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009278:	e01c      	b.n	80092b4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d103      	bne.n	800928e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f88e 	bl	80093a8 <I2C_MemoryTransmit_TXE_BTF>
}
 800928c:	e012      	b.n	80092b4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	781a      	ldrb	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80092b2:	e7ff      	b.n	80092b4 <I2C_MasterTransmit_TXE+0x130>
 80092b4:	bf00      	nop
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b21      	cmp	r3, #33	; 0x21
 80092d4:	d164      	bne.n	80093a0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092da:	b29b      	uxth	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d012      	beq.n	8009306 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	781a      	ldrb	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	3b01      	subs	r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009304:	e04c      	b.n	80093a0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b08      	cmp	r3, #8
 800930a:	d01d      	beq.n	8009348 <I2C_MasterTransmit_BTF+0x8c>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b20      	cmp	r3, #32
 8009310:	d01a      	beq.n	8009348 <I2C_MasterTransmit_BTF+0x8c>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009318:	d016      	beq.n	8009348 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009328:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2211      	movs	r2, #17
 800932e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff feb7 	bl	80090b4 <HAL_I2C_MasterTxCpltCallback>
}
 8009346:	e02b      	b.n	80093a0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009356:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009366:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b40      	cmp	r3, #64	; 0x40
 8009380:	d107      	bne.n	8009392 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff fed2 	bl	8009134 <HAL_I2C_MemTxCpltCallback>
}
 8009390:	e006      	b.n	80093a0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff fe8a 	bl	80090b4 <HAL_I2C_MasterTxCpltCallback>
}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d11d      	bne.n	80093fc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d10b      	bne.n	80093e0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d8:	1c9a      	adds	r2, r3, #2
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80093de:	e073      	b.n	80094c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	121b      	asrs	r3, r3, #8
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f4:	1c5a      	adds	r2, r3, #1
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80093fa:	e065      	b.n	80094c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009400:	2b01      	cmp	r3, #1
 8009402:	d10b      	bne.n	800941c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009408:	b2da      	uxtb	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	651a      	str	r2, [r3, #80]	; 0x50
}
 800941a:	e055      	b.n	80094c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009420:	2b02      	cmp	r3, #2
 8009422:	d151      	bne.n	80094c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	2b22      	cmp	r3, #34	; 0x22
 8009428:	d10d      	bne.n	8009446 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009438:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009444:	e040      	b.n	80094c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d015      	beq.n	800947c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	2b21      	cmp	r3, #33	; 0x21
 8009454:	d112      	bne.n	800947c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945a:	781a      	ldrb	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800947a:	e025      	b.n	80094c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d120      	bne.n	80094c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	2b21      	cmp	r3, #33	; 0x21
 800948a:	d11d      	bne.n	80094c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800949a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff fe36 	bl	8009134 <HAL_I2C_MemTxCpltCallback>
}
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b22      	cmp	r3, #34	; 0x22
 80094e2:	f040 80a2 	bne.w	800962a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d921      	bls.n	8009538 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	691a      	ldr	r2, [r3, #16]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	b2d2      	uxtb	r2, r2
 8009500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800951e:	b29b      	uxth	r3, r3
 8009520:	2b03      	cmp	r3, #3
 8009522:	f040 8082 	bne.w	800962a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009534:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8009536:	e078      	b.n	800962a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953c:	2b02      	cmp	r3, #2
 800953e:	d074      	beq.n	800962a <I2C_MasterReceive_RXNE+0x15a>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d002      	beq.n	800954c <I2C_MasterReceive_RXNE+0x7c>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d16e      	bne.n	800962a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f001 fc43 	bl	800add8 <I2C_WaitOnSTOPRequestThroughIT>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d142      	bne.n	80095de <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009566:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009576:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	691a      	ldr	r2, [r3, #16]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009594:	b29b      	uxth	r3, r3
 8009596:	3b01      	subs	r3, #1
 8009598:	b29a      	uxth	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2220      	movs	r2, #32
 80095a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b40      	cmp	r3, #64	; 0x40
 80095b0:	d10a      	bne.n	80095c8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff fdc1 	bl	8009148 <HAL_I2C_MemRxCpltCallback>
}
 80095c6:	e030      	b.n	800962a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2212      	movs	r2, #18
 80095d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7ff fd76 	bl	80090c8 <HAL_I2C_MasterRxCpltCallback>
}
 80095dc:	e025      	b.n	800962a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80095ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691a      	ldr	r2, [r3, #16]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	b2d2      	uxtb	r2, r2
 80095fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800960a:	b29b      	uxth	r3, r3
 800960c:	3b01      	subs	r3, #1
 800960e:	b29a      	uxth	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2220      	movs	r2, #32
 8009618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7ff fd99 	bl	800915c <HAL_I2C_ErrorCallback>
}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009644:	b29b      	uxth	r3, r3
 8009646:	2b04      	cmp	r3, #4
 8009648:	d11b      	bne.n	8009682 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009658:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	691a      	ldr	r2, [r3, #16]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	b2d2      	uxtb	r2, r2
 8009666:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	1c5a      	adds	r2, r3, #1
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009676:	b29b      	uxth	r3, r3
 8009678:	3b01      	subs	r3, #1
 800967a:	b29a      	uxth	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009680:	e0bd      	b.n	80097fe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009686:	b29b      	uxth	r3, r3
 8009688:	2b03      	cmp	r3, #3
 800968a:	d129      	bne.n	80096e0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800969a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d00a      	beq.n	80096b8 <I2C_MasterReceive_BTF+0x86>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d007      	beq.n	80096b8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	691a      	ldr	r2, [r3, #16]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80096de:	e08e      	b.n	80097fe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d176      	bne.n	80097d8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d002      	beq.n	80096f6 <I2C_MasterReceive_BTF+0xc4>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b10      	cmp	r3, #16
 80096f4:	d108      	bne.n	8009708 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	e019      	b.n	800973c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b04      	cmp	r3, #4
 800970c:	d002      	beq.n	8009714 <I2C_MasterReceive_BTF+0xe2>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d108      	bne.n	8009726 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	e00a      	b.n	800973c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2b10      	cmp	r3, #16
 800972a:	d007      	beq.n	800973c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800973a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691a      	ldr	r2, [r3, #16]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	b2d2      	uxtb	r2, r2
 8009748:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009758:	b29b      	uxth	r3, r3
 800975a:	3b01      	subs	r3, #1
 800975c:	b29a      	uxth	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976c:	b2d2      	uxtb	r2, r2
 800976e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977e:	b29b      	uxth	r3, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	b29a      	uxth	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009796:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b40      	cmp	r3, #64	; 0x40
 80097aa:	d10a      	bne.n	80097c2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7ff fcc4 	bl	8009148 <HAL_I2C_MemRxCpltCallback>
}
 80097c0:	e01d      	b.n	80097fe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2212      	movs	r2, #18
 80097ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7ff fc79 	bl	80090c8 <HAL_I2C_MasterRxCpltCallback>
}
 80097d6:	e012      	b.n	80097fe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	691a      	ldr	r2, [r3, #16]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	b2d2      	uxtb	r2, r2
 80097e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80097fe:	bf00      	nop
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b40      	cmp	r3, #64	; 0x40
 8009818:	d117      	bne.n	800984a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981e:	2b00      	cmp	r3, #0
 8009820:	d109      	bne.n	8009836 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009826:	b2db      	uxtb	r3, r3
 8009828:	461a      	mov	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009832:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009834:	e067      	b.n	8009906 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f043 0301 	orr.w	r3, r3, #1
 8009840:	b2da      	uxtb	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	611a      	str	r2, [r3, #16]
}
 8009848:	e05d      	b.n	8009906 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009852:	d133      	bne.n	80098bc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b21      	cmp	r3, #33	; 0x21
 800985e:	d109      	bne.n	8009874 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009864:	b2db      	uxtb	r3, r3
 8009866:	461a      	mov	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009870:	611a      	str	r2, [r3, #16]
 8009872:	e008      	b.n	8009886 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f043 0301 	orr.w	r3, r3, #1
 800987e:	b2da      	uxtb	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988a:	2b00      	cmp	r3, #0
 800988c:	d004      	beq.n	8009898 <I2C_Master_SB+0x92>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d108      	bne.n	80098aa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	2b00      	cmp	r3, #0
 800989e:	d032      	beq.n	8009906 <I2C_Master_SB+0x100>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d02d      	beq.n	8009906 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098b8:	605a      	str	r2, [r3, #4]
}
 80098ba:	e024      	b.n	8009906 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10e      	bne.n	80098e2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	11db      	asrs	r3, r3, #7
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	f003 0306 	and.w	r3, r3, #6
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f063 030f 	orn	r3, r3, #15
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	611a      	str	r2, [r3, #16]
}
 80098e0:	e011      	b.n	8009906 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d10d      	bne.n	8009906 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	11db      	asrs	r3, r3, #7
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	f003 0306 	and.w	r3, r3, #6
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	f063 030e 	orn	r3, r3, #14
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	611a      	str	r2, [r3, #16]
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991e:	b2da      	uxtb	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800992a:	2b00      	cmp	r3, #0
 800992c:	d004      	beq.n	8009938 <I2C_Master_ADD10+0x26>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d108      	bne.n	800994a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00c      	beq.n	800995a <I2C_Master_ADD10+0x48>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009946:	2b00      	cmp	r3, #0
 8009948:	d007      	beq.n	800995a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009958:	605a      	str	r2, [r3, #4]
  }
}
 800995a:	bf00      	nop
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009966:	b480      	push	{r7}
 8009968:	b091      	sub	sp, #68	; 0x44
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009974:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009982:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b22      	cmp	r3, #34	; 0x22
 800998e:	f040 8169 	bne.w	8009c64 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10f      	bne.n	80099ba <I2C_Master_ADDR+0x54>
 800999a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800999e:	2b40      	cmp	r3, #64	; 0x40
 80099a0:	d10b      	bne.n	80099ba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099a2:	2300      	movs	r3, #0
 80099a4:	633b      	str	r3, [r7, #48]	; 0x30
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	633b      	str	r3, [r7, #48]	; 0x30
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	633b      	str	r3, [r7, #48]	; 0x30
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	e160      	b.n	8009c7c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d11d      	bne.n	80099fe <I2C_Master_ADDR+0x98>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80099ca:	d118      	bne.n	80099fe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099cc:	2300      	movs	r3, #0
 80099ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099f0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	651a      	str	r2, [r3, #80]	; 0x50
 80099fc:	e13e      	b.n	8009c7c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d113      	bne.n	8009a30 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a08:	2300      	movs	r3, #0
 8009a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	e115      	b.n	8009c5c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	f040 808a 	bne.w	8009b50 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a42:	d137      	bne.n	8009ab4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a52:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a62:	d113      	bne.n	8009a8c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a72:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a74:	2300      	movs	r3, #0
 8009a76:	627b      	str	r3, [r7, #36]	; 0x24
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	627b      	str	r3, [r7, #36]	; 0x24
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	e0e7      	b.n	8009c5c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	623b      	str	r3, [r7, #32]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	623b      	str	r3, [r7, #32]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	623b      	str	r3, [r7, #32]
 8009aa0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	e0d3      	b.n	8009c5c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab6:	2b08      	cmp	r3, #8
 8009ab8:	d02e      	beq.n	8009b18 <I2C_Master_ADDR+0x1b2>
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	2b20      	cmp	r3, #32
 8009abe:	d02b      	beq.n	8009b18 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac2:	2b12      	cmp	r3, #18
 8009ac4:	d102      	bne.n	8009acc <I2C_Master_ADDR+0x166>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d125      	bne.n	8009b18 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	d00e      	beq.n	8009af0 <I2C_Master_ADDR+0x18a>
 8009ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d00b      	beq.n	8009af0 <I2C_Master_ADDR+0x18a>
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	2b10      	cmp	r3, #16
 8009adc:	d008      	beq.n	8009af0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	e007      	b.n	8009b00 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009afe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b00:	2300      	movs	r3, #0
 8009b02:	61fb      	str	r3, [r7, #28]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	61fb      	str	r3, [r7, #28]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	61fb      	str	r3, [r7, #28]
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	e0a1      	b.n	8009c5c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b26:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b28:	2300      	movs	r3, #0
 8009b2a:	61bb      	str	r3, [r7, #24]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	61bb      	str	r3, [r7, #24]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	61bb      	str	r3, [r7, #24]
 8009b3c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	e085      	b.n	8009c5c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d14d      	bne.n	8009bf6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	d016      	beq.n	8009b8e <I2C_Master_ADDR+0x228>
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d013      	beq.n	8009b8e <I2C_Master_ADDR+0x228>
 8009b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b68:	2b10      	cmp	r3, #16
 8009b6a:	d010      	beq.n	8009b8e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b7a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	e007      	b.n	8009b9e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b9c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bac:	d117      	bne.n	8009bde <I2C_Master_ADDR+0x278>
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009bb4:	d00b      	beq.n	8009bce <I2C_Master_ADDR+0x268>
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d008      	beq.n	8009bce <I2C_Master_ADDR+0x268>
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	2b08      	cmp	r3, #8
 8009bc0:	d005      	beq.n	8009bce <I2C_Master_ADDR+0x268>
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc4:	2b10      	cmp	r3, #16
 8009bc6:	d002      	beq.n	8009bce <I2C_Master_ADDR+0x268>
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	d107      	bne.n	8009bde <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009bdc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bde:	2300      	movs	r3, #0
 8009be0:	617b      	str	r3, [r7, #20]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	617b      	str	r3, [r7, #20]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	e032      	b.n	8009c5c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c04:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c14:	d117      	bne.n	8009c46 <I2C_Master_ADDR+0x2e0>
 8009c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c1c:	d00b      	beq.n	8009c36 <I2C_Master_ADDR+0x2d0>
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d008      	beq.n	8009c36 <I2C_Master_ADDR+0x2d0>
 8009c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c26:	2b08      	cmp	r3, #8
 8009c28:	d005      	beq.n	8009c36 <I2C_Master_ADDR+0x2d0>
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2c:	2b10      	cmp	r3, #16
 8009c2e:	d002      	beq.n	8009c36 <I2C_Master_ADDR+0x2d0>
 8009c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d107      	bne.n	8009c46 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c46:	2300      	movs	r3, #0
 8009c48:	613b      	str	r3, [r7, #16]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	613b      	str	r3, [r7, #16]
 8009c5a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009c62:	e00b      	b.n	8009c7c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c64:	2300      	movs	r3, #0
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	68fb      	ldr	r3, [r7, #12]
}
 8009c7a:	e7ff      	b.n	8009c7c <I2C_Master_ADDR+0x316>
 8009c7c:	bf00      	nop
 8009c7e:	3744      	adds	r7, #68	; 0x44
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d02b      	beq.n	8009cfa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	781a      	ldrb	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d114      	bne.n	8009cfa <I2C_SlaveTransmit_TXE+0x72>
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
 8009cd2:	2b29      	cmp	r3, #41	; 0x29
 8009cd4:	d111      	bne.n	8009cfa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ce4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2221      	movs	r2, #33	; 0x21
 8009cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2228      	movs	r2, #40	; 0x28
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff f9f1 	bl	80090dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009cfa:	bf00      	nop
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d011      	beq.n	8009d38 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	781a      	ldrb	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	3b01      	subs	r3, #1
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d02c      	beq.n	8009db8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	691a      	ldr	r2, [r3, #16]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	b2d2      	uxtb	r2, r2
 8009d6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d114      	bne.n	8009db8 <I2C_SlaveReceive_RXNE+0x74>
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	2b2a      	cmp	r3, #42	; 0x2a
 8009d92:	d111      	bne.n	8009db8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009da2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2222      	movs	r2, #34	; 0x22
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2228      	movs	r2, #40	; 0x28
 8009dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff f99c 	bl	80090f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d012      	beq.n	8009df8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	691a      	ldr	r2, [r3, #16]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ddc:	b2d2      	uxtb	r2, r2
 8009dde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	3b01      	subs	r3, #1
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009e1e:	2b28      	cmp	r3, #40	; 0x28
 8009e20:	d127      	bne.n	8009e72 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e30:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	089b      	lsrs	r3, r3, #2
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	09db      	lsrs	r3, r3, #7
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d103      	bne.n	8009e56 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	81bb      	strh	r3, [r7, #12]
 8009e54:	e002      	b.n	8009e5c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009e64:	89ba      	ldrh	r2, [r7, #12]
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff f94a 	bl	8009104 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009e70:	e00e      	b.n	8009e90 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e72:	2300      	movs	r3, #0
 8009e74:	60bb      	str	r3, [r7, #8]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	60bb      	str	r3, [r7, #8]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	60bb      	str	r3, [r7, #8]
 8009e86:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009e90:	bf00      	nop
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009eb6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60bb      	str	r3, [r7, #8]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	60bb      	str	r3, [r7, #8]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 0201 	orr.w	r2, r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ee4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ef4:	d172      	bne.n	8009fdc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	2b22      	cmp	r3, #34	; 0x22
 8009efa:	d002      	beq.n	8009f02 <I2C_Slave_STOPF+0x6a>
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	2b2a      	cmp	r3, #42	; 0x2a
 8009f00:	d135      	bne.n	8009f6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1e:	f043 0204 	orr.w	r2, r3, #4
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fd fc44 	bl	80077c8 <HAL_DMA_GetState>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d049      	beq.n	8009fda <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4a:	4a69      	ldr	r2, [pc, #420]	; (800a0f0 <I2C_Slave_STOPF+0x258>)
 8009f4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fd fa8c 	bl	8007470 <HAL_DMA_Abort_IT>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d03d      	beq.n	8009fda <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f68:	4610      	mov	r0, r2
 8009f6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f6c:	e035      	b.n	8009fda <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d005      	beq.n	8009f92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8a:	f043 0204 	orr.w	r2, r3, #4
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fa0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fd fc0e 	bl	80077c8 <HAL_DMA_GetState>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d014      	beq.n	8009fdc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb6:	4a4e      	ldr	r2, [pc, #312]	; (800a0f0 <I2C_Slave_STOPF+0x258>)
 8009fb8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fd fa56 	bl	8007470 <HAL_DMA_Abort_IT>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d008      	beq.n	8009fdc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4798      	blx	r3
 8009fd8:	e000      	b.n	8009fdc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fda:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d03e      	beq.n	800a064 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	695b      	ldr	r3, [r3, #20]
 8009fec:	f003 0304 	and.w	r3, r3, #4
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d112      	bne.n	800a01a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	691a      	ldr	r2, [r3, #16]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	b2d2      	uxtb	r2, r2
 800a000:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	1c5a      	adds	r2, r3, #1
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a010:	b29b      	uxth	r3, r3
 800a012:	3b01      	subs	r3, #1
 800a014:	b29a      	uxth	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a024:	2b40      	cmp	r3, #64	; 0x40
 800a026:	d112      	bne.n	800a04e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	691a      	ldr	r2, [r3, #16]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a044:	b29b      	uxth	r3, r3
 800a046:	3b01      	subs	r3, #1
 800a048:	b29a      	uxth	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a052:	b29b      	uxth	r3, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05c:	f043 0204 	orr.w	r2, r3, #4
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f8b3 	bl	800a1d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a072:	e039      	b.n	800a0e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	2b2a      	cmp	r3, #42	; 0x2a
 800a078:	d109      	bne.n	800a08e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2228      	movs	r2, #40	; 0x28
 800a084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff f831 	bl	80090f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b28      	cmp	r3, #40	; 0x28
 800a098:	d111      	bne.n	800a0be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a15      	ldr	r2, [pc, #84]	; (800a0f4 <I2C_Slave_STOPF+0x25c>)
 800a09e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7ff f832 	bl	8009120 <HAL_I2C_ListenCpltCallback>
}
 800a0bc:	e014      	b.n	800a0e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c2:	2b22      	cmp	r3, #34	; 0x22
 800a0c4:	d002      	beq.n	800a0cc <I2C_Slave_STOPF+0x234>
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	2b22      	cmp	r3, #34	; 0x22
 800a0ca:	d10d      	bne.n	800a0e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7ff f804 	bl	80090f0 <HAL_I2C_SlaveRxCpltCallback>
}
 800a0e8:	bf00      	nop
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	0800a9d9 	.word	0x0800a9d9
 800a0f4:	ffff0000 	.word	0xffff0000

0800a0f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a106:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b08      	cmp	r3, #8
 800a112:	d002      	beq.n	800a11a <I2C_Slave_AF+0x22>
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b20      	cmp	r3, #32
 800a118:	d129      	bne.n	800a16e <I2C_Slave_AF+0x76>
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
 800a11c:	2b28      	cmp	r3, #40	; 0x28
 800a11e:	d126      	bne.n	800a16e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a2c      	ldr	r2, [pc, #176]	; (800a1d4 <I2C_Slave_AF+0xdc>)
 800a124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a134:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a13e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a14e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2220      	movs	r2, #32
 800a15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7fe ffda 	bl	8009120 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a16c:	e02e      	b.n	800a1cc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	2b21      	cmp	r3, #33	; 0x21
 800a172:	d126      	bne.n	800a1c2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a17      	ldr	r2, [pc, #92]	; (800a1d4 <I2C_Slave_AF+0xdc>)
 800a178:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2221      	movs	r2, #33	; 0x21
 800a17e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2220      	movs	r2, #32
 800a184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a19e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a1a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1b8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7fe ff8e 	bl	80090dc <HAL_I2C_SlaveTxCpltCallback>
}
 800a1c0:	e004      	b.n	800a1cc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a1ca:	615a      	str	r2, [r3, #20]
}
 800a1cc:	bf00      	nop
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	ffff0000 	.word	0xffff0000

0800a1d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	2b10      	cmp	r3, #16
 800a1f4:	d002      	beq.n	800a1fc <I2C_ITError+0x24>
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b40      	cmp	r3, #64	; 0x40
 800a1fa:	d10a      	bne.n	800a212 <I2C_ITError+0x3a>
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	2b22      	cmp	r3, #34	; 0x22
 800a200:	d107      	bne.n	800a212 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a210:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a218:	2b28      	cmp	r3, #40	; 0x28
 800a21a:	d107      	bne.n	800a22c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2228      	movs	r2, #40	; 0x28
 800a226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a22a:	e015      	b.n	800a258 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a23a:	d00a      	beq.n	800a252 <I2C_ITError+0x7a>
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	2b60      	cmp	r3, #96	; 0x60
 800a240:	d007      	beq.n	800a252 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2220      	movs	r2, #32
 800a246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a266:	d162      	bne.n	800a32e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a276:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b01      	cmp	r3, #1
 800a284:	d020      	beq.n	800a2c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28a:	4a6a      	ldr	r2, [pc, #424]	; (800a434 <I2C_ITError+0x25c>)
 800a28c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a292:	4618      	mov	r0, r3
 800a294:	f7fd f8ec 	bl	8007470 <HAL_DMA_Abort_IT>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 8089 	beq.w	800a3b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f022 0201 	bic.w	r2, r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	4798      	blx	r3
 800a2c6:	e074      	b.n	800a3b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2cc:	4a59      	ldr	r2, [pc, #356]	; (800a434 <I2C_ITError+0x25c>)
 800a2ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fd f8cb 	bl	8007470 <HAL_DMA_Abort_IT>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d068      	beq.n	800a3b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	695b      	ldr	r3, [r3, #20]
 800a2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ea:	2b40      	cmp	r3, #64	; 0x40
 800a2ec:	d10b      	bne.n	800a306 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	691a      	ldr	r2, [r3, #16]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f8:	b2d2      	uxtb	r2, r2
 800a2fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	1c5a      	adds	r2, r3, #1
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f022 0201 	bic.w	r2, r2, #1
 800a314:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2220      	movs	r2, #32
 800a31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a328:	4610      	mov	r0, r2
 800a32a:	4798      	blx	r3
 800a32c:	e041      	b.n	800a3b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b60      	cmp	r3, #96	; 0x60
 800a338:	d125      	bne.n	800a386 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a352:	2b40      	cmp	r3, #64	; 0x40
 800a354:	d10b      	bne.n	800a36e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	b2d2      	uxtb	r2, r2
 800a362:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a368:	1c5a      	adds	r2, r3, #1
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0201 	bic.w	r2, r2, #1
 800a37c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7fe fef6 	bl	8009170 <HAL_I2C_AbortCpltCallback>
 800a384:	e015      	b.n	800a3b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a390:	2b40      	cmp	r3, #64	; 0x40
 800a392:	d10b      	bne.n	800a3ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	691a      	ldr	r2, [r3, #16]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	b2d2      	uxtb	r2, r2
 800a3a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7fe fed5 	bl	800915c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10e      	bne.n	800a3e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d109      	bne.n	800a3e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d104      	bne.n	800a3e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d007      	beq.n	800a3f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685a      	ldr	r2, [r3, #4]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a3ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b04      	cmp	r3, #4
 800a402:	d113      	bne.n	800a42c <I2C_ITError+0x254>
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	2b28      	cmp	r3, #40	; 0x28
 800a408:	d110      	bne.n	800a42c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a0a      	ldr	r2, [pc, #40]	; (800a438 <I2C_ITError+0x260>)
 800a40e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2220      	movs	r2, #32
 800a41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7fe fe7a 	bl	8009120 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a42c:	bf00      	nop
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	0800a9d9 	.word	0x0800a9d9
 800a438:	ffff0000 	.word	0xffff0000

0800a43c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b088      	sub	sp, #32
 800a440:	af02      	add	r7, sp, #8
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	607a      	str	r2, [r7, #4]
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	460b      	mov	r3, r1
 800a44a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2b08      	cmp	r3, #8
 800a456:	d006      	beq.n	800a466 <I2C_MasterRequestWrite+0x2a>
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d003      	beq.n	800a466 <I2C_MasterRequestWrite+0x2a>
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a464:	d108      	bne.n	800a478 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	e00b      	b.n	800a490 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47c:	2b12      	cmp	r3, #18
 800a47e:	d107      	bne.n	800a490 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a48e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 fb43 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00d      	beq.n	800a4c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4b6:	d103      	bne.n	800a4c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e035      	b.n	800a530 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4cc:	d108      	bne.n	800a4e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a4ce:	897b      	ldrh	r3, [r7, #10]
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a4dc:	611a      	str	r2, [r3, #16]
 800a4de:	e01b      	b.n	800a518 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a4e0:	897b      	ldrh	r3, [r7, #10]
 800a4e2:	11db      	asrs	r3, r3, #7
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	f003 0306 	and.w	r3, r3, #6
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	f063 030f 	orn	r3, r3, #15
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	490e      	ldr	r1, [pc, #56]	; (800a538 <I2C_MasterRequestWrite+0xfc>)
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f000 fb69 	bl	800abd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d001      	beq.n	800a50e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e010      	b.n	800a530 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a50e:	897b      	ldrh	r3, [r7, #10]
 800a510:	b2da      	uxtb	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	4907      	ldr	r1, [pc, #28]	; (800a53c <I2C_MasterRequestWrite+0x100>)
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f000 fb59 	bl	800abd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	00010008 	.word	0x00010008
 800a53c:	00010002 	.word	0x00010002

0800a540 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af02      	add	r7, sp, #8
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	607a      	str	r2, [r7, #4]
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	460b      	mov	r3, r1
 800a54e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a554:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a564:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2b08      	cmp	r3, #8
 800a56a:	d006      	beq.n	800a57a <I2C_MasterRequestRead+0x3a>
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d003      	beq.n	800a57a <I2C_MasterRequestRead+0x3a>
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a578:	d108      	bne.n	800a58c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	e00b      	b.n	800a5a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a590:	2b11      	cmp	r3, #17
 800a592:	d107      	bne.n	800a5a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 fab9 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00d      	beq.n	800a5d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ca:	d103      	bne.n	800a5d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e079      	b.n	800a6cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5e0:	d108      	bne.n	800a5f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a5e2:	897b      	ldrh	r3, [r7, #10]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	f043 0301 	orr.w	r3, r3, #1
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	611a      	str	r2, [r3, #16]
 800a5f2:	e05f      	b.n	800a6b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a5f4:	897b      	ldrh	r3, [r7, #10]
 800a5f6:	11db      	asrs	r3, r3, #7
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	f003 0306 	and.w	r3, r3, #6
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	f063 030f 	orn	r3, r3, #15
 800a604:	b2da      	uxtb	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	4930      	ldr	r1, [pc, #192]	; (800a6d4 <I2C_MasterRequestRead+0x194>)
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 fadf 	bl	800abd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e054      	b.n	800a6cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a622:	897b      	ldrh	r3, [r7, #10]
 800a624:	b2da      	uxtb	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	4929      	ldr	r1, [pc, #164]	; (800a6d8 <I2C_MasterRequestRead+0x198>)
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 facf 	bl	800abd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e044      	b.n	800a6cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a642:	2300      	movs	r3, #0
 800a644:	613b      	str	r3, [r7, #16]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	695b      	ldr	r3, [r3, #20]
 800a64c:	613b      	str	r3, [r7, #16]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	613b      	str	r3, [r7, #16]
 800a656:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a666:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 fa57 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00d      	beq.n	800a69c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a68e:	d103      	bne.n	800a698 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a696:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e017      	b.n	800a6cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a69c:	897b      	ldrh	r3, [r7, #10]
 800a69e:	11db      	asrs	r3, r3, #7
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 0306 	and.w	r3, r3, #6
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	f063 030e 	orn	r3, r3, #14
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	4907      	ldr	r1, [pc, #28]	; (800a6d8 <I2C_MasterRequestRead+0x198>)
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 fa8b 	bl	800abd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e000      	b.n	800a6cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	00010008 	.word	0x00010008
 800a6d8:	00010002 	.word	0x00010002

0800a6dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b088      	sub	sp, #32
 800a6e0:	af02      	add	r7, sp, #8
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	4608      	mov	r0, r1
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	817b      	strh	r3, [r7, #10]
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	813b      	strh	r3, [r7, #8]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a704:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 fa08 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00d      	beq.n	800a73a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a72c:	d103      	bne.n	800a736 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a734:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	e05f      	b.n	800a7fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a73a:	897b      	ldrh	r3, [r7, #10]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	461a      	mov	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a748:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	6a3a      	ldr	r2, [r7, #32]
 800a74e:	492d      	ldr	r1, [pc, #180]	; (800a804 <I2C_RequestMemoryWrite+0x128>)
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f000 fa40 	bl	800abd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e04c      	b.n	800a7fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a760:	2300      	movs	r3, #0
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	617b      	str	r3, [r7, #20]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	617b      	str	r3, [r7, #20]
 800a774:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a778:	6a39      	ldr	r1, [r7, #32]
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 faaa 	bl	800acd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00d      	beq.n	800a7a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d107      	bne.n	800a79e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a79c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e02b      	b.n	800a7fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7a2:	88fb      	ldrh	r3, [r7, #6]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d105      	bne.n	800a7b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7a8:	893b      	ldrh	r3, [r7, #8]
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	611a      	str	r2, [r3, #16]
 800a7b2:	e021      	b.n	800a7f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a7b4:	893b      	ldrh	r3, [r7, #8]
 800a7b6:	0a1b      	lsrs	r3, r3, #8
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c4:	6a39      	ldr	r1, [r7, #32]
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 fa84 	bl	800acd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00d      	beq.n	800a7ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	2b04      	cmp	r3, #4
 800a7d8:	d107      	bne.n	800a7ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e005      	b.n	800a7fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7ee:	893b      	ldrh	r3, [r7, #8]
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3718      	adds	r7, #24
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	00010002 	.word	0x00010002

0800a808 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af02      	add	r7, sp, #8
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	4608      	mov	r0, r1
 800a812:	4611      	mov	r1, r2
 800a814:	461a      	mov	r2, r3
 800a816:	4603      	mov	r3, r0
 800a818:	817b      	strh	r3, [r7, #10]
 800a81a:	460b      	mov	r3, r1
 800a81c:	813b      	strh	r3, [r7, #8]
 800a81e:	4613      	mov	r3, r2
 800a820:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a830:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a840:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	2200      	movs	r2, #0
 800a84a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 f96a 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00d      	beq.n	800a876 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a868:	d103      	bne.n	800a872 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a870:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a872:	2303      	movs	r3, #3
 800a874:	e0aa      	b.n	800a9cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a876:	897b      	ldrh	r3, [r7, #10]
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a884:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	6a3a      	ldr	r2, [r7, #32]
 800a88a:	4952      	ldr	r1, [pc, #328]	; (800a9d4 <I2C_RequestMemoryRead+0x1cc>)
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f9a2 	bl	800abd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e097      	b.n	800a9cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a89c:	2300      	movs	r3, #0
 800a89e:	617b      	str	r3, [r7, #20]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	617b      	str	r3, [r7, #20]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b4:	6a39      	ldr	r1, [r7, #32]
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 fa0c 	bl	800acd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00d      	beq.n	800a8de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	d107      	bne.n	800a8da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e076      	b.n	800a9cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a8de:	88fb      	ldrh	r3, [r7, #6]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d105      	bne.n	800a8f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8e4:	893b      	ldrh	r3, [r7, #8]
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	611a      	str	r2, [r3, #16]
 800a8ee:	e021      	b.n	800a934 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a8f0:	893b      	ldrh	r3, [r7, #8]
 800a8f2:	0a1b      	lsrs	r3, r3, #8
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a900:	6a39      	ldr	r1, [r7, #32]
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 f9e6 	bl	800acd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00d      	beq.n	800a92a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a912:	2b04      	cmp	r3, #4
 800a914:	d107      	bne.n	800a926 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a924:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e050      	b.n	800a9cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a92a:	893b      	ldrh	r3, [r7, #8]
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a936:	6a39      	ldr	r1, [r7, #32]
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f000 f9cb 	bl	800acd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00d      	beq.n	800a960 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a948:	2b04      	cmp	r3, #4
 800a94a:	d107      	bne.n	800a95c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a95a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e035      	b.n	800a9cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a96e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	6a3b      	ldr	r3, [r7, #32]
 800a976:	2200      	movs	r2, #0
 800a978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f8d3 	bl	800ab28 <I2C_WaitOnFlagUntilTimeout>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00d      	beq.n	800a9a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a996:	d103      	bne.n	800a9a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a99e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	e013      	b.n	800a9cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a9a4:	897b      	ldrh	r3, [r7, #10]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	f043 0301 	orr.w	r3, r3, #1
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	6a3a      	ldr	r2, [r7, #32]
 800a9b8:	4906      	ldr	r1, [pc, #24]	; (800a9d4 <I2C_RequestMemoryRead+0x1cc>)
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 f90b 	bl	800abd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e000      	b.n	800a9cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	00010002 	.word	0x00010002

0800a9d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a9f2:	4b4b      	ldr	r3, [pc, #300]	; (800ab20 <I2C_DMAAbort+0x148>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	08db      	lsrs	r3, r3, #3
 800a9f8:	4a4a      	ldr	r2, [pc, #296]	; (800ab24 <I2C_DMAAbort+0x14c>)
 800a9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fe:	0a1a      	lsrs	r2, r3, #8
 800aa00:	4613      	mov	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	00da      	lsls	r2, r3, #3
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d106      	bne.n	800aa20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa16:	f043 0220 	orr.w	r2, r3, #32
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800aa1e:	e00a      	b.n	800aa36 <I2C_DMAAbort+0x5e>
    }
    count--;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa34:	d0ea      	beq.n	800aa0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa42:	2200      	movs	r2, #0
 800aa44:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa52:	2200      	movs	r2, #0
 800aa54:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa78:	2200      	movs	r2, #0
 800aa7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d003      	beq.n	800aa8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa88:	2200      	movs	r2, #0
 800aa8a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f022 0201 	bic.w	r2, r2, #1
 800aa9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b60      	cmp	r3, #96	; 0x60
 800aaa6:	d10e      	bne.n	800aac6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2220      	movs	r2, #32
 800aaac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2200      	movs	r2, #0
 800aabc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800aabe:	6978      	ldr	r0, [r7, #20]
 800aac0:	f7fe fb56 	bl	8009170 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aac4:	e027      	b.n	800ab16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800aac6:	7cfb      	ldrb	r3, [r7, #19]
 800aac8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aacc:	2b28      	cmp	r3, #40	; 0x28
 800aace:	d117      	bne.n	800ab00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f042 0201 	orr.w	r2, r2, #1
 800aade:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aaee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2228      	movs	r2, #40	; 0x28
 800aafa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aafe:	e007      	b.n	800ab10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2220      	movs	r2, #32
 800ab04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800ab10:	6978      	ldr	r0, [r7, #20]
 800ab12:	f7fe fb23 	bl	800915c <HAL_I2C_ErrorCallback>
}
 800ab16:	bf00      	nop
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	20000034 	.word	0x20000034
 800ab24:	14f8b589 	.word	0x14f8b589

0800ab28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	4613      	mov	r3, r2
 800ab36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab38:	e025      	b.n	800ab86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab40:	d021      	beq.n	800ab86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab42:	f7fc f94f 	bl	8006de4 <HAL_GetTick>
 800ab46:	4602      	mov	r2, r0
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d302      	bcc.n	800ab58 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d116      	bne.n	800ab86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2220      	movs	r2, #32
 800ab62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	f043 0220 	orr.w	r2, r3, #32
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e023      	b.n	800abce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	0c1b      	lsrs	r3, r3, #16
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d10d      	bne.n	800abac <I2C_WaitOnFlagUntilTimeout+0x84>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	43da      	mvns	r2, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bf0c      	ite	eq
 800aba2:	2301      	moveq	r3, #1
 800aba4:	2300      	movne	r3, #0
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	e00c      	b.n	800abc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	43da      	mvns	r2, r3
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	4013      	ands	r3, r2
 800abb8:	b29b      	uxth	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	bf0c      	ite	eq
 800abbe:	2301      	moveq	r3, #1
 800abc0:	2300      	movne	r3, #0
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	461a      	mov	r2, r3
 800abc6:	79fb      	ldrb	r3, [r7, #7]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d0b6      	beq.n	800ab3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	607a      	str	r2, [r7, #4]
 800abe2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800abe4:	e051      	b.n	800ac8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abf4:	d123      	bne.n	800ac3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ac0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	f043 0204 	orr.w	r2, r3, #4
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e046      	b.n	800accc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac44:	d021      	beq.n	800ac8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac46:	f7fc f8cd 	bl	8006de4 <HAL_GetTick>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d302      	bcc.n	800ac5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d116      	bne.n	800ac8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2220      	movs	r2, #32
 800ac66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	f043 0220 	orr.w	r2, r3, #32
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e020      	b.n	800accc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	0c1b      	lsrs	r3, r3, #16
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d10c      	bne.n	800acae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	43da      	mvns	r2, r3
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	4013      	ands	r3, r2
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	bf14      	ite	ne
 800aca6:	2301      	movne	r3, #1
 800aca8:	2300      	moveq	r3, #0
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	e00b      	b.n	800acc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	43da      	mvns	r2, r3
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	4013      	ands	r3, r2
 800acba:	b29b      	uxth	r3, r3
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bf14      	ite	ne
 800acc0:	2301      	movne	r3, #1
 800acc2:	2300      	moveq	r3, #0
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d18d      	bne.n	800abe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ace0:	e02d      	b.n	800ad3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f000 f900 	bl	800aee8 <I2C_IsAcknowledgeFailed>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e02d      	b.n	800ad4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf8:	d021      	beq.n	800ad3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acfa:	f7fc f873 	bl	8006de4 <HAL_GetTick>
 800acfe:	4602      	mov	r2, r0
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	1ad3      	subs	r3, r2, r3
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d302      	bcc.n	800ad10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d116      	bne.n	800ad3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2220      	movs	r2, #32
 800ad1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2a:	f043 0220 	orr.w	r2, r3, #32
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e007      	b.n	800ad4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad48:	2b80      	cmp	r3, #128	; 0x80
 800ad4a:	d1ca      	bne.n	800ace2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad62:	e02d      	b.n	800adc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 f8bf 	bl	800aee8 <I2C_IsAcknowledgeFailed>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e02d      	b.n	800add0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7a:	d021      	beq.n	800adc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad7c:	f7fc f832 	bl	8006de4 <HAL_GetTick>
 800ad80:	4602      	mov	r2, r0
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d302      	bcc.n	800ad92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d116      	bne.n	800adc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	f043 0220 	orr.w	r2, r3, #32
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e007      	b.n	800add0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	f003 0304 	and.w	r3, r3, #4
 800adca:	2b04      	cmp	r3, #4
 800adcc:	d1ca      	bne.n	800ad64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ade0:	2300      	movs	r3, #0
 800ade2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ade4:	4b13      	ldr	r3, [pc, #76]	; (800ae34 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	08db      	lsrs	r3, r3, #3
 800adea:	4a13      	ldr	r2, [pc, #76]	; (800ae38 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800adec:	fba2 2303 	umull	r2, r3, r2, r3
 800adf0:	0a1a      	lsrs	r2, r3, #8
 800adf2:	4613      	mov	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3b01      	subs	r3, #1
 800adfe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d107      	bne.n	800ae16 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0a:	f043 0220 	orr.w	r2, r3, #32
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e008      	b.n	800ae28 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae24:	d0e9      	beq.n	800adfa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3714      	adds	r7, #20
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	20000034 	.word	0x20000034
 800ae38:	14f8b589 	.word	0x14f8b589

0800ae3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ae48:	e042      	b.n	800aed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	695b      	ldr	r3, [r3, #20]
 800ae50:	f003 0310 	and.w	r3, r3, #16
 800ae54:	2b10      	cmp	r3, #16
 800ae56:	d119      	bne.n	800ae8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f06f 0210 	mvn.w	r2, #16
 800ae60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2220      	movs	r2, #32
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e029      	b.n	800aee0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae8c:	f7fb ffaa 	bl	8006de4 <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d302      	bcc.n	800aea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d116      	bne.n	800aed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebc:	f043 0220 	orr.w	r2, r3, #32
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e007      	b.n	800aee0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeda:	2b40      	cmp	r3, #64	; 0x40
 800aedc:	d1b5      	bne.n	800ae4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aefa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aefe:	d11b      	bne.n	800af38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800af08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2220      	movs	r2, #32
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af24:	f043 0204 	orr.w	r2, r3, #4
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e000      	b.n	800af3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800af46:	b480      	push	{r7}
 800af48:	b083      	sub	sp, #12
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af52:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800af56:	d103      	bne.n	800af60 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800af5e:	e007      	b.n	800af70 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800af68:	d102      	bne.n	800af70 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2208      	movs	r2, #8
 800af6e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e264      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	2b00      	cmp	r3, #0
 800af98:	d075      	beq.n	800b086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af9a:	4ba3      	ldr	r3, [pc, #652]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	f003 030c 	and.w	r3, r3, #12
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	d00c      	beq.n	800afc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800afa6:	4ba0      	ldr	r3, [pc, #640]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800afae:	2b08      	cmp	r3, #8
 800afb0:	d112      	bne.n	800afd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800afb2:	4b9d      	ldr	r3, [pc, #628]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afbe:	d10b      	bne.n	800afd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afc0:	4b99      	ldr	r3, [pc, #612]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d05b      	beq.n	800b084 <HAL_RCC_OscConfig+0x108>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d157      	bne.n	800b084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	e23f      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afe0:	d106      	bne.n	800aff0 <HAL_RCC_OscConfig+0x74>
 800afe2:	4b91      	ldr	r3, [pc, #580]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a90      	ldr	r2, [pc, #576]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800afe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afec:	6013      	str	r3, [r2, #0]
 800afee:	e01d      	b.n	800b02c <HAL_RCC_OscConfig+0xb0>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aff8:	d10c      	bne.n	800b014 <HAL_RCC_OscConfig+0x98>
 800affa:	4b8b      	ldr	r3, [pc, #556]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a8a      	ldr	r2, [pc, #552]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	4b88      	ldr	r3, [pc, #544]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a87      	ldr	r2, [pc, #540]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b00c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	e00b      	b.n	800b02c <HAL_RCC_OscConfig+0xb0>
 800b014:	4b84      	ldr	r3, [pc, #528]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a83      	ldr	r2, [pc, #524]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b01a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b01e:	6013      	str	r3, [r2, #0]
 800b020:	4b81      	ldr	r3, [pc, #516]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a80      	ldr	r2, [pc, #512]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b02a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d013      	beq.n	800b05c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b034:	f7fb fed6 	bl	8006de4 <HAL_GetTick>
 800b038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b03a:	e008      	b.n	800b04e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b03c:	f7fb fed2 	bl	8006de4 <HAL_GetTick>
 800b040:	4602      	mov	r2, r0
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	2b64      	cmp	r3, #100	; 0x64
 800b048:	d901      	bls.n	800b04e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b04a:	2303      	movs	r3, #3
 800b04c:	e204      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b04e:	4b76      	ldr	r3, [pc, #472]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0f0      	beq.n	800b03c <HAL_RCC_OscConfig+0xc0>
 800b05a:	e014      	b.n	800b086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b05c:	f7fb fec2 	bl	8006de4 <HAL_GetTick>
 800b060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b062:	e008      	b.n	800b076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b064:	f7fb febe 	bl	8006de4 <HAL_GetTick>
 800b068:	4602      	mov	r2, r0
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	2b64      	cmp	r3, #100	; 0x64
 800b070:	d901      	bls.n	800b076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e1f0      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b076:	4b6c      	ldr	r3, [pc, #432]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1f0      	bne.n	800b064 <HAL_RCC_OscConfig+0xe8>
 800b082:	e000      	b.n	800b086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0302 	and.w	r3, r3, #2
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d063      	beq.n	800b15a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b092:	4b65      	ldr	r3, [pc, #404]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f003 030c 	and.w	r3, r3, #12
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00b      	beq.n	800b0b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b09e:	4b62      	ldr	r3, [pc, #392]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b0a6:	2b08      	cmp	r3, #8
 800b0a8:	d11c      	bne.n	800b0e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b0aa:	4b5f      	ldr	r3, [pc, #380]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d116      	bne.n	800b0e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0b6:	4b5c      	ldr	r3, [pc, #368]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0302 	and.w	r3, r3, #2
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d005      	beq.n	800b0ce <HAL_RCC_OscConfig+0x152>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d001      	beq.n	800b0ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e1c4      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0ce:	4b56      	ldr	r3, [pc, #344]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	00db      	lsls	r3, r3, #3
 800b0dc:	4952      	ldr	r1, [pc, #328]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0e2:	e03a      	b.n	800b15a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d020      	beq.n	800b12e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b0ec:	4b4f      	ldr	r3, [pc, #316]	; (800b22c <HAL_RCC_OscConfig+0x2b0>)
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0f2:	f7fb fe77 	bl	8006de4 <HAL_GetTick>
 800b0f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0f8:	e008      	b.n	800b10c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0fa:	f7fb fe73 	bl	8006de4 <HAL_GetTick>
 800b0fe:	4602      	mov	r2, r0
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	2b02      	cmp	r3, #2
 800b106:	d901      	bls.n	800b10c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e1a5      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b10c:	4b46      	ldr	r3, [pc, #280]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 0302 	and.w	r3, r3, #2
 800b114:	2b00      	cmp	r3, #0
 800b116:	d0f0      	beq.n	800b0fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b118:	4b43      	ldr	r3, [pc, #268]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	00db      	lsls	r3, r3, #3
 800b126:	4940      	ldr	r1, [pc, #256]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b128:	4313      	orrs	r3, r2
 800b12a:	600b      	str	r3, [r1, #0]
 800b12c:	e015      	b.n	800b15a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b12e:	4b3f      	ldr	r3, [pc, #252]	; (800b22c <HAL_RCC_OscConfig+0x2b0>)
 800b130:	2200      	movs	r2, #0
 800b132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b134:	f7fb fe56 	bl	8006de4 <HAL_GetTick>
 800b138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b13a:	e008      	b.n	800b14e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b13c:	f7fb fe52 	bl	8006de4 <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	2b02      	cmp	r3, #2
 800b148:	d901      	bls.n	800b14e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e184      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b14e:	4b36      	ldr	r3, [pc, #216]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 0302 	and.w	r3, r3, #2
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1f0      	bne.n	800b13c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f003 0308 	and.w	r3, r3, #8
 800b162:	2b00      	cmp	r3, #0
 800b164:	d030      	beq.n	800b1c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d016      	beq.n	800b19c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b16e:	4b30      	ldr	r3, [pc, #192]	; (800b230 <HAL_RCC_OscConfig+0x2b4>)
 800b170:	2201      	movs	r2, #1
 800b172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b174:	f7fb fe36 	bl	8006de4 <HAL_GetTick>
 800b178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b17a:	e008      	b.n	800b18e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b17c:	f7fb fe32 	bl	8006de4 <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	2b02      	cmp	r3, #2
 800b188:	d901      	bls.n	800b18e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e164      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b18e:	4b26      	ldr	r3, [pc, #152]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b192:	f003 0302 	and.w	r3, r3, #2
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0f0      	beq.n	800b17c <HAL_RCC_OscConfig+0x200>
 800b19a:	e015      	b.n	800b1c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b19c:	4b24      	ldr	r3, [pc, #144]	; (800b230 <HAL_RCC_OscConfig+0x2b4>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1a2:	f7fb fe1f 	bl	8006de4 <HAL_GetTick>
 800b1a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1a8:	e008      	b.n	800b1bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b1aa:	f7fb fe1b 	bl	8006de4 <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d901      	bls.n	800b1bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e14d      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1bc:	4b1a      	ldr	r3, [pc, #104]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b1be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1c0:	f003 0302 	and.w	r3, r3, #2
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1f0      	bne.n	800b1aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 0304 	and.w	r3, r3, #4
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 80a0 	beq.w	800b316 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1da:	4b13      	ldr	r3, [pc, #76]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10f      	bne.n	800b206 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60bb      	str	r3, [r7, #8]
 800b1ea:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ee:	4a0e      	ldr	r2, [pc, #56]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b1f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1f4:	6413      	str	r3, [r2, #64]	; 0x40
 800b1f6:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <HAL_RCC_OscConfig+0x2ac>)
 800b1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1fe:	60bb      	str	r3, [r7, #8]
 800b200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b202:	2301      	movs	r3, #1
 800b204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b206:	4b0b      	ldr	r3, [pc, #44]	; (800b234 <HAL_RCC_OscConfig+0x2b8>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d121      	bne.n	800b256 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b212:	4b08      	ldr	r3, [pc, #32]	; (800b234 <HAL_RCC_OscConfig+0x2b8>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a07      	ldr	r2, [pc, #28]	; (800b234 <HAL_RCC_OscConfig+0x2b8>)
 800b218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b21c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b21e:	f7fb fde1 	bl	8006de4 <HAL_GetTick>
 800b222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b224:	e011      	b.n	800b24a <HAL_RCC_OscConfig+0x2ce>
 800b226:	bf00      	nop
 800b228:	40023800 	.word	0x40023800
 800b22c:	42470000 	.word	0x42470000
 800b230:	42470e80 	.word	0x42470e80
 800b234:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b238:	f7fb fdd4 	bl	8006de4 <HAL_GetTick>
 800b23c:	4602      	mov	r2, r0
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	2b02      	cmp	r3, #2
 800b244:	d901      	bls.n	800b24a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e106      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b24a:	4b85      	ldr	r3, [pc, #532]	; (800b460 <HAL_RCC_OscConfig+0x4e4>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b252:	2b00      	cmp	r3, #0
 800b254:	d0f0      	beq.n	800b238 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d106      	bne.n	800b26c <HAL_RCC_OscConfig+0x2f0>
 800b25e:	4b81      	ldr	r3, [pc, #516]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b262:	4a80      	ldr	r2, [pc, #512]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b264:	f043 0301 	orr.w	r3, r3, #1
 800b268:	6713      	str	r3, [r2, #112]	; 0x70
 800b26a:	e01c      	b.n	800b2a6 <HAL_RCC_OscConfig+0x32a>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	2b05      	cmp	r3, #5
 800b272:	d10c      	bne.n	800b28e <HAL_RCC_OscConfig+0x312>
 800b274:	4b7b      	ldr	r3, [pc, #492]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b278:	4a7a      	ldr	r2, [pc, #488]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b27a:	f043 0304 	orr.w	r3, r3, #4
 800b27e:	6713      	str	r3, [r2, #112]	; 0x70
 800b280:	4b78      	ldr	r3, [pc, #480]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b284:	4a77      	ldr	r2, [pc, #476]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b286:	f043 0301 	orr.w	r3, r3, #1
 800b28a:	6713      	str	r3, [r2, #112]	; 0x70
 800b28c:	e00b      	b.n	800b2a6 <HAL_RCC_OscConfig+0x32a>
 800b28e:	4b75      	ldr	r3, [pc, #468]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b292:	4a74      	ldr	r2, [pc, #464]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b294:	f023 0301 	bic.w	r3, r3, #1
 800b298:	6713      	str	r3, [r2, #112]	; 0x70
 800b29a:	4b72      	ldr	r3, [pc, #456]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29e:	4a71      	ldr	r2, [pc, #452]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b2a0:	f023 0304 	bic.w	r3, r3, #4
 800b2a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d015      	beq.n	800b2da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2ae:	f7fb fd99 	bl	8006de4 <HAL_GetTick>
 800b2b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2b4:	e00a      	b.n	800b2cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b2b6:	f7fb fd95 	bl	8006de4 <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d901      	bls.n	800b2cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e0c5      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2cc:	4b65      	ldr	r3, [pc, #404]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b2ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d0:	f003 0302 	and.w	r3, r3, #2
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d0ee      	beq.n	800b2b6 <HAL_RCC_OscConfig+0x33a>
 800b2d8:	e014      	b.n	800b304 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b2da:	f7fb fd83 	bl	8006de4 <HAL_GetTick>
 800b2de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2e0:	e00a      	b.n	800b2f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b2e2:	f7fb fd7f 	bl	8006de4 <HAL_GetTick>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d901      	bls.n	800b2f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e0af      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2f8:	4b5a      	ldr	r3, [pc, #360]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fc:	f003 0302 	and.w	r3, r3, #2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1ee      	bne.n	800b2e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d105      	bne.n	800b316 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b30a:	4b56      	ldr	r3, [pc, #344]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30e:	4a55      	ldr	r2, [pc, #340]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	699b      	ldr	r3, [r3, #24]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f000 809b 	beq.w	800b456 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b320:	4b50      	ldr	r3, [pc, #320]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f003 030c 	and.w	r3, r3, #12
 800b328:	2b08      	cmp	r3, #8
 800b32a:	d05c      	beq.n	800b3e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	2b02      	cmp	r3, #2
 800b332:	d141      	bne.n	800b3b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b334:	4b4c      	ldr	r3, [pc, #304]	; (800b468 <HAL_RCC_OscConfig+0x4ec>)
 800b336:	2200      	movs	r2, #0
 800b338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b33a:	f7fb fd53 	bl	8006de4 <HAL_GetTick>
 800b33e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b340:	e008      	b.n	800b354 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b342:	f7fb fd4f 	bl	8006de4 <HAL_GetTick>
 800b346:	4602      	mov	r2, r0
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d901      	bls.n	800b354 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e081      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b354:	4b43      	ldr	r3, [pc, #268]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1f0      	bne.n	800b342 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	69da      	ldr	r2, [r3, #28]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a1b      	ldr	r3, [r3, #32]
 800b368:	431a      	orrs	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36e:	019b      	lsls	r3, r3, #6
 800b370:	431a      	orrs	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b376:	085b      	lsrs	r3, r3, #1
 800b378:	3b01      	subs	r3, #1
 800b37a:	041b      	lsls	r3, r3, #16
 800b37c:	431a      	orrs	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b382:	061b      	lsls	r3, r3, #24
 800b384:	4937      	ldr	r1, [pc, #220]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b386:	4313      	orrs	r3, r2
 800b388:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b38a:	4b37      	ldr	r3, [pc, #220]	; (800b468 <HAL_RCC_OscConfig+0x4ec>)
 800b38c:	2201      	movs	r2, #1
 800b38e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b390:	f7fb fd28 	bl	8006de4 <HAL_GetTick>
 800b394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b396:	e008      	b.n	800b3aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b398:	f7fb fd24 	bl	8006de4 <HAL_GetTick>
 800b39c:	4602      	mov	r2, r0
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d901      	bls.n	800b3aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e056      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3aa:	4b2e      	ldr	r3, [pc, #184]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d0f0      	beq.n	800b398 <HAL_RCC_OscConfig+0x41c>
 800b3b6:	e04e      	b.n	800b456 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3b8:	4b2b      	ldr	r3, [pc, #172]	; (800b468 <HAL_RCC_OscConfig+0x4ec>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3be:	f7fb fd11 	bl	8006de4 <HAL_GetTick>
 800b3c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3c4:	e008      	b.n	800b3d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b3c6:	f7fb fd0d 	bl	8006de4 <HAL_GetTick>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d901      	bls.n	800b3d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	e03f      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3d8:	4b22      	ldr	r3, [pc, #136]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1f0      	bne.n	800b3c6 <HAL_RCC_OscConfig+0x44a>
 800b3e4:	e037      	b.n	800b456 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d101      	bne.n	800b3f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e032      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b3f2:	4b1c      	ldr	r3, [pc, #112]	; (800b464 <HAL_RCC_OscConfig+0x4e8>)
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d028      	beq.n	800b452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d121      	bne.n	800b452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b418:	429a      	cmp	r2, r3
 800b41a:	d11a      	bne.n	800b452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b422:	4013      	ands	r3, r2
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b428:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d111      	bne.n	800b452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b438:	085b      	lsrs	r3, r3, #1
 800b43a:	3b01      	subs	r3, #1
 800b43c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b43e:	429a      	cmp	r2, r3
 800b440:	d107      	bne.n	800b452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b44e:	429a      	cmp	r2, r3
 800b450:	d001      	beq.n	800b456 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e000      	b.n	800b458 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	40007000 	.word	0x40007000
 800b464:	40023800 	.word	0x40023800
 800b468:	42470060 	.word	0x42470060

0800b46c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	e0cc      	b.n	800b61a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b480:	4b68      	ldr	r3, [pc, #416]	; (800b624 <HAL_RCC_ClockConfig+0x1b8>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0307 	and.w	r3, r3, #7
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d90c      	bls.n	800b4a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b48e:	4b65      	ldr	r3, [pc, #404]	; (800b624 <HAL_RCC_ClockConfig+0x1b8>)
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	b2d2      	uxtb	r2, r2
 800b494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b496:	4b63      	ldr	r3, [pc, #396]	; (800b624 <HAL_RCC_ClockConfig+0x1b8>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0307 	and.w	r3, r3, #7
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d001      	beq.n	800b4a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e0b8      	b.n	800b61a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 0302 	and.w	r3, r3, #2
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d020      	beq.n	800b4f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 0304 	and.w	r3, r3, #4
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d005      	beq.n	800b4cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4c0:	4b59      	ldr	r3, [pc, #356]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	4a58      	ldr	r2, [pc, #352]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b4c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b4ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0308 	and.w	r3, r3, #8
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d005      	beq.n	800b4e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4d8:	4b53      	ldr	r3, [pc, #332]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	4a52      	ldr	r2, [pc, #328]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b4de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b4e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4e4:	4b50      	ldr	r3, [pc, #320]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	494d      	ldr	r1, [pc, #308]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d044      	beq.n	800b58c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d107      	bne.n	800b51a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b50a:	4b47      	ldr	r3, [pc, #284]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d119      	bne.n	800b54a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e07f      	b.n	800b61a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d003      	beq.n	800b52a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b526:	2b03      	cmp	r3, #3
 800b528:	d107      	bne.n	800b53a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b52a:	4b3f      	ldr	r3, [pc, #252]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b532:	2b00      	cmp	r3, #0
 800b534:	d109      	bne.n	800b54a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e06f      	b.n	800b61a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b53a:	4b3b      	ldr	r3, [pc, #236]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 0302 	and.w	r3, r3, #2
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	e067      	b.n	800b61a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b54a:	4b37      	ldr	r3, [pc, #220]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	f023 0203 	bic.w	r2, r3, #3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	4934      	ldr	r1, [pc, #208]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b558:	4313      	orrs	r3, r2
 800b55a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b55c:	f7fb fc42 	bl	8006de4 <HAL_GetTick>
 800b560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b562:	e00a      	b.n	800b57a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b564:	f7fb fc3e 	bl	8006de4 <HAL_GetTick>
 800b568:	4602      	mov	r2, r0
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b572:	4293      	cmp	r3, r2
 800b574:	d901      	bls.n	800b57a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	e04f      	b.n	800b61a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b57a:	4b2b      	ldr	r3, [pc, #172]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f003 020c 	and.w	r2, r3, #12
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	429a      	cmp	r2, r3
 800b58a:	d1eb      	bne.n	800b564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b58c:	4b25      	ldr	r3, [pc, #148]	; (800b624 <HAL_RCC_ClockConfig+0x1b8>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 0307 	and.w	r3, r3, #7
 800b594:	683a      	ldr	r2, [r7, #0]
 800b596:	429a      	cmp	r2, r3
 800b598:	d20c      	bcs.n	800b5b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b59a:	4b22      	ldr	r3, [pc, #136]	; (800b624 <HAL_RCC_ClockConfig+0x1b8>)
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	b2d2      	uxtb	r2, r2
 800b5a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5a2:	4b20      	ldr	r3, [pc, #128]	; (800b624 <HAL_RCC_ClockConfig+0x1b8>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d001      	beq.n	800b5b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e032      	b.n	800b61a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 0304 	and.w	r3, r3, #4
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d008      	beq.n	800b5d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5c0:	4b19      	ldr	r3, [pc, #100]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	4916      	ldr	r1, [pc, #88]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f003 0308 	and.w	r3, r3, #8
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d009      	beq.n	800b5f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b5de:	4b12      	ldr	r3, [pc, #72]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	490e      	ldr	r1, [pc, #56]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b5f2:	f000 f821 	bl	800b638 <HAL_RCC_GetSysClockFreq>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <HAL_RCC_ClockConfig+0x1bc>)
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	091b      	lsrs	r3, r3, #4
 800b5fe:	f003 030f 	and.w	r3, r3, #15
 800b602:	490a      	ldr	r1, [pc, #40]	; (800b62c <HAL_RCC_ClockConfig+0x1c0>)
 800b604:	5ccb      	ldrb	r3, [r1, r3]
 800b606:	fa22 f303 	lsr.w	r3, r2, r3
 800b60a:	4a09      	ldr	r2, [pc, #36]	; (800b630 <HAL_RCC_ClockConfig+0x1c4>)
 800b60c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b60e:	4b09      	ldr	r3, [pc, #36]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4618      	mov	r0, r3
 800b614:	f7fb fba2 	bl	8006d5c <HAL_InitTick>

  return HAL_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	40023c00 	.word	0x40023c00
 800b628:	40023800 	.word	0x40023800
 800b62c:	0802591c 	.word	0x0802591c
 800b630:	20000034 	.word	0x20000034
 800b634:	20000038 	.word	0x20000038

0800b638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b638:	b5b0      	push	{r4, r5, r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b63e:	2100      	movs	r1, #0
 800b640:	6079      	str	r1, [r7, #4]
 800b642:	2100      	movs	r1, #0
 800b644:	60f9      	str	r1, [r7, #12]
 800b646:	2100      	movs	r1, #0
 800b648:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b64a:	2100      	movs	r1, #0
 800b64c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b64e:	4952      	ldr	r1, [pc, #328]	; (800b798 <HAL_RCC_GetSysClockFreq+0x160>)
 800b650:	6889      	ldr	r1, [r1, #8]
 800b652:	f001 010c 	and.w	r1, r1, #12
 800b656:	2908      	cmp	r1, #8
 800b658:	d00d      	beq.n	800b676 <HAL_RCC_GetSysClockFreq+0x3e>
 800b65a:	2908      	cmp	r1, #8
 800b65c:	f200 8094 	bhi.w	800b788 <HAL_RCC_GetSysClockFreq+0x150>
 800b660:	2900      	cmp	r1, #0
 800b662:	d002      	beq.n	800b66a <HAL_RCC_GetSysClockFreq+0x32>
 800b664:	2904      	cmp	r1, #4
 800b666:	d003      	beq.n	800b670 <HAL_RCC_GetSysClockFreq+0x38>
 800b668:	e08e      	b.n	800b788 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b66a:	4b4c      	ldr	r3, [pc, #304]	; (800b79c <HAL_RCC_GetSysClockFreq+0x164>)
 800b66c:	60bb      	str	r3, [r7, #8]
       break;
 800b66e:	e08e      	b.n	800b78e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b670:	4b4b      	ldr	r3, [pc, #300]	; (800b7a0 <HAL_RCC_GetSysClockFreq+0x168>)
 800b672:	60bb      	str	r3, [r7, #8]
      break;
 800b674:	e08b      	b.n	800b78e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b676:	4948      	ldr	r1, [pc, #288]	; (800b798 <HAL_RCC_GetSysClockFreq+0x160>)
 800b678:	6849      	ldr	r1, [r1, #4]
 800b67a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b67e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b680:	4945      	ldr	r1, [pc, #276]	; (800b798 <HAL_RCC_GetSysClockFreq+0x160>)
 800b682:	6849      	ldr	r1, [r1, #4]
 800b684:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b688:	2900      	cmp	r1, #0
 800b68a:	d024      	beq.n	800b6d6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b68c:	4942      	ldr	r1, [pc, #264]	; (800b798 <HAL_RCC_GetSysClockFreq+0x160>)
 800b68e:	6849      	ldr	r1, [r1, #4]
 800b690:	0989      	lsrs	r1, r1, #6
 800b692:	4608      	mov	r0, r1
 800b694:	f04f 0100 	mov.w	r1, #0
 800b698:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b69c:	f04f 0500 	mov.w	r5, #0
 800b6a0:	ea00 0204 	and.w	r2, r0, r4
 800b6a4:	ea01 0305 	and.w	r3, r1, r5
 800b6a8:	493d      	ldr	r1, [pc, #244]	; (800b7a0 <HAL_RCC_GetSysClockFreq+0x168>)
 800b6aa:	fb01 f003 	mul.w	r0, r1, r3
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	fb01 f102 	mul.w	r1, r1, r2
 800b6b4:	1844      	adds	r4, r0, r1
 800b6b6:	493a      	ldr	r1, [pc, #232]	; (800b7a0 <HAL_RCC_GetSysClockFreq+0x168>)
 800b6b8:	fba2 0101 	umull	r0, r1, r2, r1
 800b6bc:	1863      	adds	r3, r4, r1
 800b6be:	4619      	mov	r1, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f04f 0300 	mov.w	r3, #0
 800b6c8:	f7f5 faf6 	bl	8000cb8 <__aeabi_uldivmod>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	60fb      	str	r3, [r7, #12]
 800b6d4:	e04a      	b.n	800b76c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6d6:	4b30      	ldr	r3, [pc, #192]	; (800b798 <HAL_RCC_GetSysClockFreq+0x160>)
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	099b      	lsrs	r3, r3, #6
 800b6dc:	461a      	mov	r2, r3
 800b6de:	f04f 0300 	mov.w	r3, #0
 800b6e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b6e6:	f04f 0100 	mov.w	r1, #0
 800b6ea:	ea02 0400 	and.w	r4, r2, r0
 800b6ee:	ea03 0501 	and.w	r5, r3, r1
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f04f 0200 	mov.w	r2, #0
 800b6fa:	f04f 0300 	mov.w	r3, #0
 800b6fe:	014b      	lsls	r3, r1, #5
 800b700:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b704:	0142      	lsls	r2, r0, #5
 800b706:	4610      	mov	r0, r2
 800b708:	4619      	mov	r1, r3
 800b70a:	1b00      	subs	r0, r0, r4
 800b70c:	eb61 0105 	sbc.w	r1, r1, r5
 800b710:	f04f 0200 	mov.w	r2, #0
 800b714:	f04f 0300 	mov.w	r3, #0
 800b718:	018b      	lsls	r3, r1, #6
 800b71a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b71e:	0182      	lsls	r2, r0, #6
 800b720:	1a12      	subs	r2, r2, r0
 800b722:	eb63 0301 	sbc.w	r3, r3, r1
 800b726:	f04f 0000 	mov.w	r0, #0
 800b72a:	f04f 0100 	mov.w	r1, #0
 800b72e:	00d9      	lsls	r1, r3, #3
 800b730:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b734:	00d0      	lsls	r0, r2, #3
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	1912      	adds	r2, r2, r4
 800b73c:	eb45 0303 	adc.w	r3, r5, r3
 800b740:	f04f 0000 	mov.w	r0, #0
 800b744:	f04f 0100 	mov.w	r1, #0
 800b748:	0299      	lsls	r1, r3, #10
 800b74a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b74e:	0290      	lsls	r0, r2, #10
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	4610      	mov	r0, r2
 800b756:	4619      	mov	r1, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	461a      	mov	r2, r3
 800b75c:	f04f 0300 	mov.w	r3, #0
 800b760:	f7f5 faaa 	bl	8000cb8 <__aeabi_uldivmod>
 800b764:	4602      	mov	r2, r0
 800b766:	460b      	mov	r3, r1
 800b768:	4613      	mov	r3, r2
 800b76a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b76c:	4b0a      	ldr	r3, [pc, #40]	; (800b798 <HAL_RCC_GetSysClockFreq+0x160>)
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	0c1b      	lsrs	r3, r3, #16
 800b772:	f003 0303 	and.w	r3, r3, #3
 800b776:	3301      	adds	r3, #1
 800b778:	005b      	lsls	r3, r3, #1
 800b77a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	fbb2 f3f3 	udiv	r3, r2, r3
 800b784:	60bb      	str	r3, [r7, #8]
      break;
 800b786:	e002      	b.n	800b78e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b788:	4b04      	ldr	r3, [pc, #16]	; (800b79c <HAL_RCC_GetSysClockFreq+0x164>)
 800b78a:	60bb      	str	r3, [r7, #8]
      break;
 800b78c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b78e:	68bb      	ldr	r3, [r7, #8]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bdb0      	pop	{r4, r5, r7, pc}
 800b798:	40023800 	.word	0x40023800
 800b79c:	00f42400 	.word	0x00f42400
 800b7a0:	017d7840 	.word	0x017d7840

0800b7a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7a8:	4b03      	ldr	r3, [pc, #12]	; (800b7b8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	20000034 	.word	0x20000034

0800b7bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b7c0:	f7ff fff0 	bl	800b7a4 <HAL_RCC_GetHCLKFreq>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	4b05      	ldr	r3, [pc, #20]	; (800b7dc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	0a9b      	lsrs	r3, r3, #10
 800b7cc:	f003 0307 	and.w	r3, r3, #7
 800b7d0:	4903      	ldr	r1, [pc, #12]	; (800b7e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b7d2:	5ccb      	ldrb	r3, [r1, r3]
 800b7d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	40023800 	.word	0x40023800
 800b7e0:	0802592c 	.word	0x0802592c

0800b7e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b7e8:	f7ff ffdc 	bl	800b7a4 <HAL_RCC_GetHCLKFreq>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	4b05      	ldr	r3, [pc, #20]	; (800b804 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	0b5b      	lsrs	r3, r3, #13
 800b7f4:	f003 0307 	and.w	r3, r3, #7
 800b7f8:	4903      	ldr	r1, [pc, #12]	; (800b808 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7fa:	5ccb      	ldrb	r3, [r1, r3]
 800b7fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b800:	4618      	mov	r0, r3
 800b802:	bd80      	pop	{r7, pc}
 800b804:	40023800 	.word	0x40023800
 800b808:	0802592c 	.word	0x0802592c

0800b80c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e07b      	b.n	800b916 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b822:	2b00      	cmp	r3, #0
 800b824:	d108      	bne.n	800b838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b82e:	d009      	beq.n	800b844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	61da      	str	r2, [r3, #28]
 800b836:	e005      	b.n	800b844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d106      	bne.n	800b864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7fa fd0a 	bl	8006278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2202      	movs	r2, #2
 800b868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b87a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b88c:	431a      	orrs	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b896:	431a      	orrs	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	f003 0302 	and.w	r3, r3, #2
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	431a      	orrs	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8b4:	431a      	orrs	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	69db      	ldr	r3, [r3, #28]
 800b8ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8be:	431a      	orrs	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a1b      	ldr	r3, [r3, #32]
 800b8c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8c8:	ea42 0103 	orr.w	r1, r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	0c1b      	lsrs	r3, r3, #16
 800b8e2:	f003 0104 	and.w	r1, r3, #4
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	f003 0210 	and.w	r2, r3, #16
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69da      	ldr	r2, [r3, #28]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b904:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b08c      	sub	sp, #48	; 0x30
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b92c:	2301      	movs	r3, #1
 800b92e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d101      	bne.n	800b944 <HAL_SPI_TransmitReceive+0x26>
 800b940:	2302      	movs	r3, #2
 800b942:	e18a      	b.n	800bc5a <HAL_SPI_TransmitReceive+0x33c>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b94c:	f7fb fa4a 	bl	8006de4 <HAL_GetTick>
 800b950:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b962:	887b      	ldrh	r3, [r7, #2]
 800b964:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d00f      	beq.n	800b98e <HAL_SPI_TransmitReceive+0x70>
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b974:	d107      	bne.n	800b986 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d103      	bne.n	800b986 <HAL_SPI_TransmitReceive+0x68>
 800b97e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b982:	2b04      	cmp	r3, #4
 800b984:	d003      	beq.n	800b98e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b986:	2302      	movs	r3, #2
 800b988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b98c:	e15b      	b.n	800bc46 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d005      	beq.n	800b9a0 <HAL_SPI_TransmitReceive+0x82>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <HAL_SPI_TransmitReceive+0x82>
 800b99a:	887b      	ldrh	r3, [r7, #2]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d103      	bne.n	800b9a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b9a6:	e14e      	b.n	800bc46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	d003      	beq.n	800b9bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2205      	movs	r2, #5
 800b9b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	887a      	ldrh	r2, [r7, #2]
 800b9cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	887a      	ldrh	r2, [r7, #2]
 800b9d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	68ba      	ldr	r2, [r7, #8]
 800b9d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	887a      	ldrh	r2, [r7, #2]
 800b9de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	887a      	ldrh	r2, [r7, #2]
 800b9e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9fc:	2b40      	cmp	r3, #64	; 0x40
 800b9fe:	d007      	beq.n	800ba10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba18:	d178      	bne.n	800bb0c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d002      	beq.n	800ba28 <HAL_SPI_TransmitReceive+0x10a>
 800ba22:	8b7b      	ldrh	r3, [r7, #26]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d166      	bne.n	800baf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2c:	881a      	ldrh	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba38:	1c9a      	adds	r2, r3, #2
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	3b01      	subs	r3, #1
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba4c:	e053      	b.n	800baf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f003 0302 	and.w	r3, r3, #2
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d11b      	bne.n	800ba94 <HAL_SPI_TransmitReceive+0x176>
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d016      	beq.n	800ba94 <HAL_SPI_TransmitReceive+0x176>
 800ba66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d113      	bne.n	800ba94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba70:	881a      	ldrh	r2, [r3, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7c:	1c9a      	adds	r2, r3, #2
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba90:	2300      	movs	r3, #0
 800ba92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f003 0301 	and.w	r3, r3, #1
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d119      	bne.n	800bad6 <HAL_SPI_TransmitReceive+0x1b8>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d014      	beq.n	800bad6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68da      	ldr	r2, [r3, #12]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab6:	b292      	uxth	r2, r2
 800bab8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800babe:	1c9a      	adds	r2, r3, #2
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bac8:	b29b      	uxth	r3, r3
 800baca:	3b01      	subs	r3, #1
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bad2:	2301      	movs	r3, #1
 800bad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bad6:	f7fb f985 	bl	8006de4 <HAL_GetTick>
 800bada:	4602      	mov	r2, r0
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d807      	bhi.n	800baf6 <HAL_SPI_TransmitReceive+0x1d8>
 800bae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baec:	d003      	beq.n	800baf6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800baf4:	e0a7      	b.n	800bc46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1a6      	bne.n	800ba4e <HAL_SPI_TransmitReceive+0x130>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1a1      	bne.n	800ba4e <HAL_SPI_TransmitReceive+0x130>
 800bb0a:	e07c      	b.n	800bc06 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <HAL_SPI_TransmitReceive+0x1fc>
 800bb14:	8b7b      	ldrh	r3, [r7, #26]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d16b      	bne.n	800bbf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	330c      	adds	r3, #12
 800bb24:	7812      	ldrb	r2, [r2, #0]
 800bb26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2c:	1c5a      	adds	r2, r3, #1
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb40:	e057      	b.n	800bbf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f003 0302 	and.w	r3, r3, #2
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d11c      	bne.n	800bb8a <HAL_SPI_TransmitReceive+0x26c>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d017      	beq.n	800bb8a <HAL_SPI_TransmitReceive+0x26c>
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d114      	bne.n	800bb8a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	330c      	adds	r3, #12
 800bb6a:	7812      	ldrb	r2, [r2, #0]
 800bb6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d119      	bne.n	800bbcc <HAL_SPI_TransmitReceive+0x2ae>
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d014      	beq.n	800bbcc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68da      	ldr	r2, [r3, #12]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbac:	b2d2      	uxtb	r2, r2
 800bbae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bbcc:	f7fb f90a 	bl	8006de4 <HAL_GetTick>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d803      	bhi.n	800bbe4 <HAL_SPI_TransmitReceive+0x2c6>
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe2:	d102      	bne.n	800bbea <HAL_SPI_TransmitReceive+0x2cc>
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d103      	bne.n	800bbf2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bbea:	2303      	movs	r3, #3
 800bbec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bbf0:	e029      	b.n	800bc46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1a2      	bne.n	800bb42 <HAL_SPI_TransmitReceive+0x224>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d19d      	bne.n	800bb42 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 f9d0 	bl	800bfb0 <SPI_EndRxTxTransaction>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d006      	beq.n	800bc24 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2220      	movs	r2, #32
 800bc20:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bc22:	e010      	b.n	800bc46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10b      	bne.n	800bc44 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	617b      	str	r3, [r7, #20]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	617b      	str	r3, [r7, #20]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	617b      	str	r3, [r7, #20]
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	e000      	b.n	800bc46 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bc44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3730      	adds	r7, #48	; 0x30
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	099b      	lsrs	r3, r3, #6
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10f      	bne.n	800bca8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	099b      	lsrs	r3, r3, #6
 800bc96:	f003 0301 	and.w	r3, r3, #1
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d004      	beq.n	800bca8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	4798      	blx	r3
    return;
 800bca6:	e0d7      	b.n	800be58 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	085b      	lsrs	r3, r3, #1
 800bcac:	f003 0301 	and.w	r3, r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00a      	beq.n	800bcca <HAL_SPI_IRQHandler+0x66>
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	09db      	lsrs	r3, r3, #7
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d004      	beq.n	800bcca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	4798      	blx	r3
    return;
 800bcc8:	e0c6      	b.n	800be58 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	095b      	lsrs	r3, r3, #5
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10c      	bne.n	800bcf0 <HAL_SPI_IRQHandler+0x8c>
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	099b      	lsrs	r3, r3, #6
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d106      	bne.n	800bcf0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	0a1b      	lsrs	r3, r3, #8
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 80b4 	beq.w	800be58 <HAL_SPI_IRQHandler+0x1f4>
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	095b      	lsrs	r3, r3, #5
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f000 80ad 	beq.w	800be58 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	099b      	lsrs	r3, r3, #6
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d023      	beq.n	800bd52 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	d011      	beq.n	800bd3a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd1a:	f043 0204 	orr.w	r2, r3, #4
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd22:	2300      	movs	r3, #0
 800bd24:	617b      	str	r3, [r7, #20]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	617b      	str	r3, [r7, #20]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	617b      	str	r3, [r7, #20]
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	e00b      	b.n	800bd52 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	613b      	str	r3, [r7, #16]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	613b      	str	r3, [r7, #16]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	613b      	str	r3, [r7, #16]
 800bd4e:	693b      	ldr	r3, [r7, #16]
        return;
 800bd50:	e082      	b.n	800be58 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	095b      	lsrs	r3, r3, #5
 800bd56:	f003 0301 	and.w	r3, r3, #1
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d014      	beq.n	800bd88 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd62:	f043 0201 	orr.w	r2, r3, #1
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	60fb      	str	r3, [r7, #12]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd84:	601a      	str	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	0a1b      	lsrs	r3, r3, #8
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00c      	beq.n	800bdae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd98:	f043 0208 	orr.w	r2, r3, #8
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bda0:	2300      	movs	r3, #0
 800bda2:	60bb      	str	r3, [r7, #8]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	60bb      	str	r3, [r7, #8]
 800bdac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d04f      	beq.n	800be56 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bdc4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	f003 0302 	and.w	r3, r3, #2
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d104      	bne.n	800bde2 <HAL_SPI_IRQHandler+0x17e>
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	f003 0301 	and.w	r3, r3, #1
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d034      	beq.n	800be4c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f022 0203 	bic.w	r2, r2, #3
 800bdf0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d011      	beq.n	800be1e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdfe:	4a18      	ldr	r2, [pc, #96]	; (800be60 <HAL_SPI_IRQHandler+0x1fc>)
 800be00:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be06:	4618      	mov	r0, r3
 800be08:	f7fb fb32 	bl	8007470 <HAL_DMA_Abort_IT>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d005      	beq.n	800be1e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be22:	2b00      	cmp	r3, #0
 800be24:	d016      	beq.n	800be54 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be2a:	4a0d      	ldr	r2, [pc, #52]	; (800be60 <HAL_SPI_IRQHandler+0x1fc>)
 800be2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be32:	4618      	mov	r0, r3
 800be34:	f7fb fb1c 	bl	8007470 <HAL_DMA_Abort_IT>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00a      	beq.n	800be54 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800be4a:	e003      	b.n	800be54 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f809 	bl	800be64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800be52:	e000      	b.n	800be56 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800be54:	bf00      	nop
    return;
 800be56:	bf00      	nop
  }
}
 800be58:	3720      	adds	r7, #32
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	0800be79 	.word	0x0800be79

0800be64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800be6c:	bf00      	nop
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2200      	movs	r2, #0
 800be8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f7ff ffe6 	bl	800be64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be98:	bf00      	nop
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	603b      	str	r3, [r7, #0]
 800beac:	4613      	mov	r3, r2
 800beae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800beb0:	f7fa ff98 	bl	8006de4 <HAL_GetTick>
 800beb4:	4602      	mov	r2, r0
 800beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb8:	1a9b      	subs	r3, r3, r2
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	4413      	add	r3, r2
 800bebe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bec0:	f7fa ff90 	bl	8006de4 <HAL_GetTick>
 800bec4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bec6:	4b39      	ldr	r3, [pc, #228]	; (800bfac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	015b      	lsls	r3, r3, #5
 800becc:	0d1b      	lsrs	r3, r3, #20
 800bece:	69fa      	ldr	r2, [r7, #28]
 800bed0:	fb02 f303 	mul.w	r3, r2, r3
 800bed4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bed6:	e054      	b.n	800bf82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bede:	d050      	beq.n	800bf82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bee0:	f7fa ff80 	bl	8006de4 <HAL_GetTick>
 800bee4:	4602      	mov	r2, r0
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	69fa      	ldr	r2, [r7, #28]
 800beec:	429a      	cmp	r2, r3
 800beee:	d902      	bls.n	800bef6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d13d      	bne.n	800bf72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf0e:	d111      	bne.n	800bf34 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf18:	d004      	beq.n	800bf24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf22:	d107      	bne.n	800bf34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf3c:	d10f      	bne.n	800bf5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf4c:	601a      	str	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	e017      	b.n	800bfa2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	689a      	ldr	r2, [r3, #8]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	bf0c      	ite	eq
 800bf92:	2301      	moveq	r3, #1
 800bf94:	2300      	movne	r3, #0
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	461a      	mov	r2, r3
 800bf9a:	79fb      	ldrb	r3, [r7, #7]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d19b      	bne.n	800bed8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3720      	adds	r7, #32
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	20000034 	.word	0x20000034

0800bfb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b088      	sub	sp, #32
 800bfb4:	af02      	add	r7, sp, #8
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bfbc:	4b1b      	ldr	r3, [pc, #108]	; (800c02c <SPI_EndRxTxTransaction+0x7c>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a1b      	ldr	r2, [pc, #108]	; (800c030 <SPI_EndRxTxTransaction+0x80>)
 800bfc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc6:	0d5b      	lsrs	r3, r3, #21
 800bfc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bfcc:	fb02 f303 	mul.w	r3, r2, r3
 800bfd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bfda:	d112      	bne.n	800c002 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	2180      	movs	r1, #128	; 0x80
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f7ff ff5a 	bl	800bea0 <SPI_WaitFlagStateUntilTimeout>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d016      	beq.n	800c020 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff6:	f043 0220 	orr.w	r2, r3, #32
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bffe:	2303      	movs	r3, #3
 800c000:	e00f      	b.n	800c022 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00a      	beq.n	800c01e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c018:	2b80      	cmp	r3, #128	; 0x80
 800c01a:	d0f2      	beq.n	800c002 <SPI_EndRxTxTransaction+0x52>
 800c01c:	e000      	b.n	800c020 <SPI_EndRxTxTransaction+0x70>
        break;
 800c01e:	bf00      	nop
  }

  return HAL_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	20000034 	.word	0x20000034
 800c030:	165e9f81 	.word	0x165e9f81

0800c034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e041      	b.n	800c0ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d106      	bne.n	800c060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f7fa fb76 	bl	800674c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2202      	movs	r2, #2
 800c064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	3304      	adds	r3, #4
 800c070:	4619      	mov	r1, r3
 800c072:	4610      	mov	r0, r2
 800c074:	f000 f9f0 	bl	800c458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2201      	movs	r2, #1
 800c084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
	...

0800c0d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d001      	beq.n	800c0ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e044      	b.n	800c176 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68da      	ldr	r2, [r3, #12]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f042 0201 	orr.w	r2, r2, #1
 800c102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a1e      	ldr	r2, [pc, #120]	; (800c184 <HAL_TIM_Base_Start_IT+0xb0>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d018      	beq.n	800c140 <HAL_TIM_Base_Start_IT+0x6c>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c116:	d013      	beq.n	800c140 <HAL_TIM_Base_Start_IT+0x6c>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a1a      	ldr	r2, [pc, #104]	; (800c188 <HAL_TIM_Base_Start_IT+0xb4>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d00e      	beq.n	800c140 <HAL_TIM_Base_Start_IT+0x6c>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a19      	ldr	r2, [pc, #100]	; (800c18c <HAL_TIM_Base_Start_IT+0xb8>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d009      	beq.n	800c140 <HAL_TIM_Base_Start_IT+0x6c>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a17      	ldr	r2, [pc, #92]	; (800c190 <HAL_TIM_Base_Start_IT+0xbc>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d004      	beq.n	800c140 <HAL_TIM_Base_Start_IT+0x6c>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a16      	ldr	r2, [pc, #88]	; (800c194 <HAL_TIM_Base_Start_IT+0xc0>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d111      	bne.n	800c164 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f003 0307 	and.w	r3, r3, #7
 800c14a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b06      	cmp	r3, #6
 800c150:	d010      	beq.n	800c174 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f042 0201 	orr.w	r2, r2, #1
 800c160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c162:	e007      	b.n	800c174 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f042 0201 	orr.w	r2, r2, #1
 800c172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	40010000 	.word	0x40010000
 800c188:	40000400 	.word	0x40000400
 800c18c:	40000800 	.word	0x40000800
 800c190:	40000c00 	.word	0x40000c00
 800c194:	40014000 	.word	0x40014000

0800c198 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68da      	ldr	r2, [r3, #12]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f022 0201 	bic.w	r2, r2, #1
 800c1ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	6a1a      	ldr	r2, [r3, #32]
 800c1b6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10f      	bne.n	800c1e0 <HAL_TIM_Base_Stop_IT+0x48>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	6a1a      	ldr	r2, [r3, #32]
 800c1c6:	f240 4344 	movw	r3, #1092	; 0x444
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d107      	bne.n	800c1e0 <HAL_TIM_Base_Stop_IT+0x48>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f022 0201 	bic.w	r2, r2, #1
 800c1de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b082      	sub	sp, #8
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	f003 0302 	and.w	r3, r3, #2
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d122      	bne.n	800c252 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	f003 0302 	and.w	r3, r3, #2
 800c216:	2b02      	cmp	r3, #2
 800c218:	d11b      	bne.n	800c252 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f06f 0202 	mvn.w	r2, #2
 800c222:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	f003 0303 	and.w	r3, r3, #3
 800c234:	2b00      	cmp	r3, #0
 800c236:	d003      	beq.n	800c240 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f8ee 	bl	800c41a <HAL_TIM_IC_CaptureCallback>
 800c23e:	e005      	b.n	800c24c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f8e0 	bl	800c406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f8f1 	bl	800c42e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	f003 0304 	and.w	r3, r3, #4
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d122      	bne.n	800c2a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	f003 0304 	and.w	r3, r3, #4
 800c26a:	2b04      	cmp	r3, #4
 800c26c:	d11b      	bne.n	800c2a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f06f 0204 	mvn.w	r2, #4
 800c276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 f8c4 	bl	800c41a <HAL_TIM_IC_CaptureCallback>
 800c292:	e005      	b.n	800c2a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f8b6 	bl	800c406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f8c7 	bl	800c42e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	f003 0308 	and.w	r3, r3, #8
 800c2b0:	2b08      	cmp	r3, #8
 800c2b2:	d122      	bne.n	800c2fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	f003 0308 	and.w	r3, r3, #8
 800c2be:	2b08      	cmp	r3, #8
 800c2c0:	d11b      	bne.n	800c2fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f06f 0208 	mvn.w	r2, #8
 800c2ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	69db      	ldr	r3, [r3, #28]
 800c2d8:	f003 0303 	and.w	r3, r3, #3
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 f89a 	bl	800c41a <HAL_TIM_IC_CaptureCallback>
 800c2e6:	e005      	b.n	800c2f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f88c 	bl	800c406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f89d 	bl	800c42e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	f003 0310 	and.w	r3, r3, #16
 800c304:	2b10      	cmp	r3, #16
 800c306:	d122      	bne.n	800c34e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	f003 0310 	and.w	r3, r3, #16
 800c312:	2b10      	cmp	r3, #16
 800c314:	d11b      	bne.n	800c34e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f06f 0210 	mvn.w	r2, #16
 800c31e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2208      	movs	r2, #8
 800c324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f870 	bl	800c41a <HAL_TIM_IC_CaptureCallback>
 800c33a:	e005      	b.n	800c348 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f862 	bl	800c406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f873 	bl	800c42e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	691b      	ldr	r3, [r3, #16]
 800c354:	f003 0301 	and.w	r3, r3, #1
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d10e      	bne.n	800c37a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	f003 0301 	and.w	r3, r3, #1
 800c366:	2b01      	cmp	r3, #1
 800c368:	d107      	bne.n	800c37a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f06f 0201 	mvn.w	r2, #1
 800c372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f7f8 f995 	bl	80046a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c384:	2b80      	cmp	r3, #128	; 0x80
 800c386:	d10e      	bne.n	800c3a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c392:	2b80      	cmp	r3, #128	; 0x80
 800c394:	d107      	bne.n	800c3a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c39e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 f8e3 	bl	800c56c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b0:	2b40      	cmp	r3, #64	; 0x40
 800c3b2:	d10e      	bne.n	800c3d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3be:	2b40      	cmp	r3, #64	; 0x40
 800c3c0:	d107      	bne.n	800c3d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c3ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 f838 	bl	800c442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	f003 0320 	and.w	r3, r3, #32
 800c3dc:	2b20      	cmp	r3, #32
 800c3de:	d10e      	bne.n	800c3fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	f003 0320 	and.w	r3, r3, #32
 800c3ea:	2b20      	cmp	r3, #32
 800c3ec:	d107      	bne.n	800c3fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f06f 0220 	mvn.w	r2, #32
 800c3f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 f8ad 	bl	800c558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3fe:	bf00      	nop
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c406:	b480      	push	{r7}
 800c408:	b083      	sub	sp, #12
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c40e:	bf00      	nop
 800c410:	370c      	adds	r7, #12
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr

0800c41a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c41a:	b480      	push	{r7}
 800c41c:	b083      	sub	sp, #12
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c422:	bf00      	nop
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c42e:	b480      	push	{r7}
 800c430:	b083      	sub	sp, #12
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c436:	bf00      	nop
 800c438:	370c      	adds	r7, #12
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c442:	b480      	push	{r7}
 800c444:	b083      	sub	sp, #12
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c44a:	bf00      	nop
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
	...

0800c458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a34      	ldr	r2, [pc, #208]	; (800c53c <TIM_Base_SetConfig+0xe4>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d00f      	beq.n	800c490 <TIM_Base_SetConfig+0x38>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c476:	d00b      	beq.n	800c490 <TIM_Base_SetConfig+0x38>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4a31      	ldr	r2, [pc, #196]	; (800c540 <TIM_Base_SetConfig+0xe8>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d007      	beq.n	800c490 <TIM_Base_SetConfig+0x38>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4a30      	ldr	r2, [pc, #192]	; (800c544 <TIM_Base_SetConfig+0xec>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d003      	beq.n	800c490 <TIM_Base_SetConfig+0x38>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4a2f      	ldr	r2, [pc, #188]	; (800c548 <TIM_Base_SetConfig+0xf0>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d108      	bne.n	800c4a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a25      	ldr	r2, [pc, #148]	; (800c53c <TIM_Base_SetConfig+0xe4>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d01b      	beq.n	800c4e2 <TIM_Base_SetConfig+0x8a>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4b0:	d017      	beq.n	800c4e2 <TIM_Base_SetConfig+0x8a>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a22      	ldr	r2, [pc, #136]	; (800c540 <TIM_Base_SetConfig+0xe8>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d013      	beq.n	800c4e2 <TIM_Base_SetConfig+0x8a>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a21      	ldr	r2, [pc, #132]	; (800c544 <TIM_Base_SetConfig+0xec>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d00f      	beq.n	800c4e2 <TIM_Base_SetConfig+0x8a>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a20      	ldr	r2, [pc, #128]	; (800c548 <TIM_Base_SetConfig+0xf0>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d00b      	beq.n	800c4e2 <TIM_Base_SetConfig+0x8a>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a1f      	ldr	r2, [pc, #124]	; (800c54c <TIM_Base_SetConfig+0xf4>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d007      	beq.n	800c4e2 <TIM_Base_SetConfig+0x8a>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a1e      	ldr	r2, [pc, #120]	; (800c550 <TIM_Base_SetConfig+0xf8>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d003      	beq.n	800c4e2 <TIM_Base_SetConfig+0x8a>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4a1d      	ldr	r2, [pc, #116]	; (800c554 <TIM_Base_SetConfig+0xfc>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d108      	bne.n	800c4f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	689a      	ldr	r2, [r3, #8]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a08      	ldr	r2, [pc, #32]	; (800c53c <TIM_Base_SetConfig+0xe4>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d103      	bne.n	800c528 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	691a      	ldr	r2, [r3, #16]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2201      	movs	r2, #1
 800c52c:	615a      	str	r2, [r3, #20]
}
 800c52e:	bf00      	nop
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	40010000 	.word	0x40010000
 800c540:	40000400 	.word	0x40000400
 800c544:	40000800 	.word	0x40000800
 800c548:	40000c00 	.word	0x40000c00
 800c54c:	40014000 	.word	0x40014000
 800c550:	40014400 	.word	0x40014400
 800c554:	40014800 	.word	0x40014800

0800c558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c560:	bf00      	nop
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c574:	bf00      	nop
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e03f      	b.n	800c612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d106      	bne.n	800c5ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7fa fae0 	bl	8006b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2224      	movs	r2, #36	; 0x24
 800c5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	68da      	ldr	r2, [r3, #12]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 ff53 	bl	800d470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	691a      	ldr	r2, [r3, #16]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	695a      	ldr	r2, [r3, #20]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68da      	ldr	r2, [r3, #12]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c5f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2220      	movs	r2, #32
 800c604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2220      	movs	r2, #32
 800c60c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
	...

0800c61c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b08c      	sub	sp, #48	; 0x30
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	4613      	mov	r3, r2
 800c628:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b20      	cmp	r3, #32
 800c634:	d165      	bne.n	800c702 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d002      	beq.n	800c642 <HAL_UART_Transmit_DMA+0x26>
 800c63c:	88fb      	ldrh	r3, [r7, #6]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d101      	bne.n	800c646 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	e05e      	b.n	800c704 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d101      	bne.n	800c654 <HAL_UART_Transmit_DMA+0x38>
 800c650:	2302      	movs	r3, #2
 800c652:	e057      	b.n	800c704 <HAL_UART_Transmit_DMA+0xe8>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	88fa      	ldrh	r2, [r7, #6]
 800c666:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	88fa      	ldrh	r2, [r7, #6]
 800c66c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2221      	movs	r2, #33	; 0x21
 800c678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c680:	4a22      	ldr	r2, [pc, #136]	; (800c70c <HAL_UART_Transmit_DMA+0xf0>)
 800c682:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c688:	4a21      	ldr	r2, [pc, #132]	; (800c710 <HAL_UART_Transmit_DMA+0xf4>)
 800c68a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c690:	4a20      	ldr	r2, [pc, #128]	; (800c714 <HAL_UART_Transmit_DMA+0xf8>)
 800c692:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c698:	2200      	movs	r2, #0
 800c69a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800c69c:	f107 0308 	add.w	r3, r7, #8
 800c6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a8:	6819      	ldr	r1, [r3, #0]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	88fb      	ldrh	r3, [r7, #6]
 800c6b4:	f7fa fe14 	bl	80072e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c6c0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3314      	adds	r3, #20
 800c6d0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	e853 3f00 	ldrex	r3, [r3]
 800c6d8:	617b      	str	r3, [r7, #20]
   return(result);
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	3314      	adds	r3, #20
 800c6e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6ea:	627a      	str	r2, [r7, #36]	; 0x24
 800c6ec:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ee:	6a39      	ldr	r1, [r7, #32]
 800c6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f2:	e841 2300 	strex	r3, r2, [r1]
 800c6f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1e5      	bne.n	800c6ca <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	e000      	b.n	800c704 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c702:	2302      	movs	r3, #2
  }
}
 800c704:	4618      	mov	r0, r3
 800c706:	3730      	adds	r7, #48	; 0x30
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	0800cd11 	.word	0x0800cd11
 800c710:	0800cdab 	.word	0x0800cdab
 800c714:	0800cf23 	.word	0x0800cf23

0800c718 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	4613      	mov	r3, r2
 800c724:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	2b20      	cmp	r3, #32
 800c730:	d11d      	bne.n	800c76e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <HAL_UART_Receive_DMA+0x26>
 800c738:	88fb      	ldrh	r3, [r7, #6]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d101      	bne.n	800c742 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c73e:	2301      	movs	r3, #1
 800c740:	e016      	b.n	800c770 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d101      	bne.n	800c750 <HAL_UART_Receive_DMA+0x38>
 800c74c:	2302      	movs	r3, #2
 800c74e:	e00f      	b.n	800c770 <HAL_UART_Receive_DMA+0x58>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c75e:	88fb      	ldrh	r3, [r7, #6]
 800c760:	461a      	mov	r2, r3
 800c762:	68b9      	ldr	r1, [r7, #8]
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f000 fc27 	bl	800cfb8 <UART_Start_Receive_DMA>
 800c76a:	4603      	mov	r3, r0
 800c76c:	e000      	b.n	800c770 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c76e:	2302      	movs	r3, #2
  }
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b0ba      	sub	sp, #232	; 0xe8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	695b      	ldr	r3, [r3, #20]
 800c79a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7ae:	f003 030f 	and.w	r3, r3, #15
 800c7b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c7b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d10f      	bne.n	800c7de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7c2:	f003 0320 	and.w	r3, r3, #32
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d009      	beq.n	800c7de <HAL_UART_IRQHandler+0x66>
 800c7ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7ce:	f003 0320 	and.w	r3, r3, #32
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d003      	beq.n	800c7de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fd8f 	bl	800d2fa <UART_Receive_IT>
      return;
 800c7dc:	e256      	b.n	800cc8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c7de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 80de 	beq.w	800c9a4 <HAL_UART_IRQHandler+0x22c>
 800c7e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7ec:	f003 0301 	and.w	r3, r3, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d106      	bne.n	800c802 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 80d1 	beq.w	800c9a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00b      	beq.n	800c826 <HAL_UART_IRQHandler+0xae>
 800c80e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c816:	2b00      	cmp	r3, #0
 800c818:	d005      	beq.n	800c826 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81e:	f043 0201 	orr.w	r2, r3, #1
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c82a:	f003 0304 	and.w	r3, r3, #4
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00b      	beq.n	800c84a <HAL_UART_IRQHandler+0xd2>
 800c832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d005      	beq.n	800c84a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c842:	f043 0202 	orr.w	r2, r3, #2
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c84e:	f003 0302 	and.w	r3, r3, #2
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00b      	beq.n	800c86e <HAL_UART_IRQHandler+0xf6>
 800c856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c85a:	f003 0301 	and.w	r3, r3, #1
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d005      	beq.n	800c86e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c866:	f043 0204 	orr.w	r2, r3, #4
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c872:	f003 0308 	and.w	r3, r3, #8
 800c876:	2b00      	cmp	r3, #0
 800c878:	d011      	beq.n	800c89e <HAL_UART_IRQHandler+0x126>
 800c87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c87e:	f003 0320 	and.w	r3, r3, #32
 800c882:	2b00      	cmp	r3, #0
 800c884:	d105      	bne.n	800c892 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c88a:	f003 0301 	and.w	r3, r3, #1
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d005      	beq.n	800c89e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c896:	f043 0208 	orr.w	r2, r3, #8
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 81ed 	beq.w	800cc82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8ac:	f003 0320 	and.w	r3, r3, #32
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d008      	beq.n	800c8c6 <HAL_UART_IRQHandler+0x14e>
 800c8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8b8:	f003 0320 	and.w	r3, r3, #32
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 fd1a 	bl	800d2fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	695b      	ldr	r3, [r3, #20]
 800c8cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d0:	2b40      	cmp	r3, #64	; 0x40
 800c8d2:	bf0c      	ite	eq
 800c8d4:	2301      	moveq	r3, #1
 800c8d6:	2300      	movne	r3, #0
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e2:	f003 0308 	and.w	r3, r3, #8
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d103      	bne.n	800c8f2 <HAL_UART_IRQHandler+0x17a>
 800c8ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d04f      	beq.n	800c992 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fc22 	bl	800d13c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	695b      	ldr	r3, [r3, #20]
 800c8fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c902:	2b40      	cmp	r3, #64	; 0x40
 800c904:	d141      	bne.n	800c98a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3314      	adds	r3, #20
 800c90c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c914:	e853 3f00 	ldrex	r3, [r3]
 800c918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c91c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	3314      	adds	r3, #20
 800c92e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c932:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c93e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c942:	e841 2300 	strex	r3, r2, [r1]
 800c946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c94a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d1d9      	bne.n	800c906 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c956:	2b00      	cmp	r3, #0
 800c958:	d013      	beq.n	800c982 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95e:	4a7d      	ldr	r2, [pc, #500]	; (800cb54 <HAL_UART_IRQHandler+0x3dc>)
 800c960:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c966:	4618      	mov	r0, r3
 800c968:	f7fa fd82 	bl	8007470 <HAL_DMA_Abort_IT>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d016      	beq.n	800c9a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c97c:	4610      	mov	r0, r2
 800c97e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c980:	e00e      	b.n	800c9a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 f9ae 	bl	800cce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c988:	e00a      	b.n	800c9a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f9aa 	bl	800cce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c990:	e006      	b.n	800c9a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f9a6 	bl	800cce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c99e:	e170      	b.n	800cc82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9a0:	bf00      	nop
    return;
 800c9a2:	e16e      	b.n	800cc82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	f040 814a 	bne.w	800cc42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c9ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9b2:	f003 0310 	and.w	r3, r3, #16
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 8143 	beq.w	800cc42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c9bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9c0:	f003 0310 	and.w	r3, r3, #16
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 813c 	beq.w	800cc42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	60bb      	str	r3, [r7, #8]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	60bb      	str	r3, [r7, #8]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	60bb      	str	r3, [r7, #8]
 800c9de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	695b      	ldr	r3, [r3, #20]
 800c9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9ea:	2b40      	cmp	r3, #64	; 0x40
 800c9ec:	f040 80b4 	bne.w	800cb58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c9fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f000 8140 	beq.w	800cc86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ca0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	f080 8139 	bcs.w	800cc86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ca1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca20:	69db      	ldr	r3, [r3, #28]
 800ca22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca26:	f000 8088 	beq.w	800cb3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	330c      	adds	r3, #12
 800ca30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca38:	e853 3f00 	ldrex	r3, [r3]
 800ca3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ca40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	330c      	adds	r3, #12
 800ca52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ca56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ca62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ca66:	e841 2300 	strex	r3, r2, [r1]
 800ca6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ca6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1d9      	bne.n	800ca2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	3314      	adds	r3, #20
 800ca7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca80:	e853 3f00 	ldrex	r3, [r3]
 800ca84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ca86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca88:	f023 0301 	bic.w	r3, r3, #1
 800ca8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	3314      	adds	r3, #20
 800ca96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ca9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ca9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800caa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800caa6:	e841 2300 	strex	r3, r2, [r1]
 800caaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800caac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1e1      	bne.n	800ca76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3314      	adds	r3, #20
 800cab8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cabc:	e853 3f00 	ldrex	r3, [r3]
 800cac0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3314      	adds	r3, #20
 800cad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cad6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cad8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cada:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cadc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cade:	e841 2300 	strex	r3, r2, [r1]
 800cae2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1e3      	bne.n	800cab2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2220      	movs	r2, #32
 800caee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	330c      	adds	r3, #12
 800cafe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb02:	e853 3f00 	ldrex	r3, [r3]
 800cb06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cb08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb0a:	f023 0310 	bic.w	r3, r3, #16
 800cb0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	330c      	adds	r3, #12
 800cb18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cb1c:	65ba      	str	r2, [r7, #88]	; 0x58
 800cb1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb24:	e841 2300 	strex	r3, r2, [r1]
 800cb28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cb2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1e3      	bne.n	800caf8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fa fc2b 	bl	8007390 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	4619      	mov	r1, r3
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f8d4 	bl	800ccf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb50:	e099      	b.n	800cc86 <HAL_UART_IRQHandler+0x50e>
 800cb52:	bf00      	nop
 800cb54:	0800d203 	.word	0x0800d203
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 808b 	beq.w	800cc8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800cb74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 8086 	beq.w	800cc8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	330c      	adds	r3, #12
 800cb84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	e853 3f00 	ldrex	r3, [r3]
 800cb8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	330c      	adds	r3, #12
 800cb9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cba2:	647a      	str	r2, [r7, #68]	; 0x44
 800cba4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbaa:	e841 2300 	strex	r3, r2, [r1]
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1e3      	bne.n	800cb7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3314      	adds	r3, #20
 800cbbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	e853 3f00 	ldrex	r3, [r3]
 800cbc4:	623b      	str	r3, [r7, #32]
   return(result);
 800cbc6:	6a3b      	ldr	r3, [r7, #32]
 800cbc8:	f023 0301 	bic.w	r3, r3, #1
 800cbcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3314      	adds	r3, #20
 800cbd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cbda:	633a      	str	r2, [r7, #48]	; 0x30
 800cbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbe2:	e841 2300 	strex	r3, r2, [r1]
 800cbe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1e3      	bne.n	800cbb6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2220      	movs	r2, #32
 800cbf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	330c      	adds	r3, #12
 800cc02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	e853 3f00 	ldrex	r3, [r3]
 800cc0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f023 0310 	bic.w	r3, r3, #16
 800cc12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	330c      	adds	r3, #12
 800cc1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cc20:	61fa      	str	r2, [r7, #28]
 800cc22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc24:	69b9      	ldr	r1, [r7, #24]
 800cc26:	69fa      	ldr	r2, [r7, #28]
 800cc28:	e841 2300 	strex	r3, r2, [r1]
 800cc2c:	617b      	str	r3, [r7, #20]
   return(result);
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1e3      	bne.n	800cbfc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cc34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cc38:	4619      	mov	r1, r3
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 f85c 	bl	800ccf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cc40:	e023      	b.n	800cc8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cc42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d009      	beq.n	800cc62 <HAL_UART_IRQHandler+0x4ea>
 800cc4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d003      	beq.n	800cc62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fae5 	bl	800d22a <UART_Transmit_IT>
    return;
 800cc60:	e014      	b.n	800cc8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cc62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00e      	beq.n	800cc8c <HAL_UART_IRQHandler+0x514>
 800cc6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d008      	beq.n	800cc8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fb25 	bl	800d2ca <UART_EndTransmit_IT>
    return;
 800cc80:	e004      	b.n	800cc8c <HAL_UART_IRQHandler+0x514>
    return;
 800cc82:	bf00      	nop
 800cc84:	e002      	b.n	800cc8c <HAL_UART_IRQHandler+0x514>
      return;
 800cc86:	bf00      	nop
 800cc88:	e000      	b.n	800cc8c <HAL_UART_IRQHandler+0x514>
      return;
 800cc8a:	bf00      	nop
  }
}
 800cc8c:	37e8      	adds	r7, #232	; 0xe8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop

0800cc94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	460b      	mov	r3, r1
 800cd02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b090      	sub	sp, #64	; 0x40
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d137      	bne.n	800cd9c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800cd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd2e:	2200      	movs	r2, #0
 800cd30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	3314      	adds	r3, #20
 800cd38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3c:	e853 3f00 	ldrex	r3, [r3]
 800cd40:	623b      	str	r3, [r7, #32]
   return(result);
 800cd42:	6a3b      	ldr	r3, [r7, #32]
 800cd44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd48:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3314      	adds	r3, #20
 800cd50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd52:	633a      	str	r2, [r7, #48]	; 0x30
 800cd54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd5a:	e841 2300 	strex	r3, r2, [r1]
 800cd5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1e5      	bne.n	800cd32 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	330c      	adds	r3, #12
 800cd6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	e853 3f00 	ldrex	r3, [r3]
 800cd74:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd7c:	637b      	str	r3, [r7, #52]	; 0x34
 800cd7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	330c      	adds	r3, #12
 800cd84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd86:	61fa      	str	r2, [r7, #28]
 800cd88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd8a:	69b9      	ldr	r1, [r7, #24]
 800cd8c:	69fa      	ldr	r2, [r7, #28]
 800cd8e:	e841 2300 	strex	r3, r2, [r1]
 800cd92:	617b      	str	r3, [r7, #20]
   return(result);
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d1e5      	bne.n	800cd66 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd9a:	e002      	b.n	800cda2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cd9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cd9e:	f7ff ff79 	bl	800cc94 <HAL_UART_TxCpltCallback>
}
 800cda2:	bf00      	nop
 800cda4:	3740      	adds	r7, #64	; 0x40
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b084      	sub	sp, #16
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f7ff ff75 	bl	800cca8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdbe:	bf00      	nop
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b09c      	sub	sp, #112	; 0x70
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d172      	bne.n	800cec8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cde2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cde4:	2200      	movs	r2, #0
 800cde6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cde8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	330c      	adds	r3, #12
 800cdee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdf2:	e853 3f00 	ldrex	r3, [r3]
 800cdf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cdf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdfe:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	330c      	adds	r3, #12
 800ce06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce08:	65ba      	str	r2, [r7, #88]	; 0x58
 800ce0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce10:	e841 2300 	strex	r3, r2, [r1]
 800ce14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1e5      	bne.n	800cde8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	3314      	adds	r3, #20
 800ce22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	e853 3f00 	ldrex	r3, [r3]
 800ce2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce2e:	f023 0301 	bic.w	r3, r3, #1
 800ce32:	667b      	str	r3, [r7, #100]	; 0x64
 800ce34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3314      	adds	r3, #20
 800ce3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce3c:	647a      	str	r2, [r7, #68]	; 0x44
 800ce3e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce44:	e841 2300 	strex	r3, r2, [r1]
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1e5      	bne.n	800ce1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3314      	adds	r3, #20
 800ce56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5a:	e853 3f00 	ldrex	r3, [r3]
 800ce5e:	623b      	str	r3, [r7, #32]
   return(result);
 800ce60:	6a3b      	ldr	r3, [r7, #32]
 800ce62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce66:	663b      	str	r3, [r7, #96]	; 0x60
 800ce68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	3314      	adds	r3, #20
 800ce6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce70:	633a      	str	r2, [r7, #48]	; 0x30
 800ce72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce78:	e841 2300 	strex	r3, r2, [r1]
 800ce7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d1e5      	bne.n	800ce50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce86:	2220      	movs	r2, #32
 800ce88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d119      	bne.n	800cec8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	330c      	adds	r3, #12
 800ce9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	e853 3f00 	ldrex	r3, [r3]
 800cea2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f023 0310 	bic.w	r3, r3, #16
 800ceaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	330c      	adds	r3, #12
 800ceb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ceb4:	61fa      	str	r2, [r7, #28]
 800ceb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb8:	69b9      	ldr	r1, [r7, #24]
 800ceba:	69fa      	ldr	r2, [r7, #28]
 800cebc:	e841 2300 	strex	r3, r2, [r1]
 800cec0:	617b      	str	r3, [r7, #20]
   return(result);
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1e5      	bne.n	800ce94 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d106      	bne.n	800cede <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ced0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ced2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ced4:	4619      	mov	r1, r3
 800ced6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ced8:	f7ff ff0e 	bl	800ccf8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cedc:	e002      	b.n	800cee4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800cede:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cee0:	f7ff feec 	bl	800ccbc <HAL_UART_RxCpltCallback>
}
 800cee4:	bf00      	nop
 800cee6:	3770      	adds	r7, #112	; 0x70
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d108      	bne.n	800cf14 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf06:	085b      	lsrs	r3, r3, #1
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f7ff fef3 	bl	800ccf8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf12:	e002      	b.n	800cf1a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f7ff fedb 	bl	800ccd0 <HAL_UART_RxHalfCpltCallback>
}
 800cf1a:	bf00      	nop
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b084      	sub	sp, #16
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf32:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	695b      	ldr	r3, [r3, #20]
 800cf3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf3e:	2b80      	cmp	r3, #128	; 0x80
 800cf40:	bf0c      	ite	eq
 800cf42:	2301      	moveq	r3, #1
 800cf44:	2300      	movne	r3, #0
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	2b21      	cmp	r3, #33	; 0x21
 800cf54:	d108      	bne.n	800cf68 <UART_DMAError+0x46>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d005      	beq.n	800cf68 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cf62:	68b8      	ldr	r0, [r7, #8]
 800cf64:	f000 f8c2 	bl	800d0ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf72:	2b40      	cmp	r3, #64	; 0x40
 800cf74:	bf0c      	ite	eq
 800cf76:	2301      	moveq	r3, #1
 800cf78:	2300      	movne	r3, #0
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	2b22      	cmp	r3, #34	; 0x22
 800cf88:	d108      	bne.n	800cf9c <UART_DMAError+0x7a>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d005      	beq.n	800cf9c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	2200      	movs	r2, #0
 800cf94:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cf96:	68b8      	ldr	r0, [r7, #8]
 800cf98:	f000 f8d0 	bl	800d13c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa0:	f043 0210 	orr.w	r2, r3, #16
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfa8:	68b8      	ldr	r0, [r7, #8]
 800cfaa:	f7ff fe9b 	bl	800cce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfae:	bf00      	nop
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
	...

0800cfb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b098      	sub	sp, #96	; 0x60
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cfc6:	68ba      	ldr	r2, [r7, #8]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	88fa      	ldrh	r2, [r7, #6]
 800cfd0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2222      	movs	r2, #34	; 0x22
 800cfdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe4:	4a3e      	ldr	r2, [pc, #248]	; (800d0e0 <UART_Start_Receive_DMA+0x128>)
 800cfe6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfec:	4a3d      	ldr	r2, [pc, #244]	; (800d0e4 <UART_Start_Receive_DMA+0x12c>)
 800cfee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff4:	4a3c      	ldr	r2, [pc, #240]	; (800d0e8 <UART_Start_Receive_DMA+0x130>)
 800cff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffc:	2200      	movs	r2, #0
 800cffe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d000:	f107 0308 	add.w	r3, r7, #8
 800d004:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	3304      	adds	r3, #4
 800d010:	4619      	mov	r1, r3
 800d012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	88fb      	ldrh	r3, [r7, #6]
 800d018:	f7fa f962 	bl	80072e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d01c:	2300      	movs	r3, #0
 800d01e:	613b      	str	r3, [r7, #16]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	613b      	str	r3, [r7, #16]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	613b      	str	r3, [r7, #16]
 800d030:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	330c      	adds	r3, #12
 800d040:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d044:	e853 3f00 	ldrex	r3, [r3]
 800d048:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d04c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d050:	65bb      	str	r3, [r7, #88]	; 0x58
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	330c      	adds	r3, #12
 800d058:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d05a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d05c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d05e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d062:	e841 2300 	strex	r3, r2, [r1]
 800d066:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1e5      	bne.n	800d03a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3314      	adds	r3, #20
 800d074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d078:	e853 3f00 	ldrex	r3, [r3]
 800d07c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	f043 0301 	orr.w	r3, r3, #1
 800d084:	657b      	str	r3, [r7, #84]	; 0x54
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	3314      	adds	r3, #20
 800d08c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d08e:	63ba      	str	r2, [r7, #56]	; 0x38
 800d090:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d092:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d096:	e841 2300 	strex	r3, r2, [r1]
 800d09a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1e5      	bne.n	800d06e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	3314      	adds	r3, #20
 800d0a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	e853 3f00 	ldrex	r3, [r3]
 800d0b0:	617b      	str	r3, [r7, #20]
   return(result);
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0b8:	653b      	str	r3, [r7, #80]	; 0x50
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	3314      	adds	r3, #20
 800d0c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0c2:	627a      	str	r2, [r7, #36]	; 0x24
 800d0c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c6:	6a39      	ldr	r1, [r7, #32]
 800d0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ca:	e841 2300 	strex	r3, r2, [r1]
 800d0ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1e5      	bne.n	800d0a2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3760      	adds	r7, #96	; 0x60
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	0800cdc7 	.word	0x0800cdc7
 800d0e4:	0800ceed 	.word	0x0800ceed
 800d0e8:	0800cf23 	.word	0x0800cf23

0800d0ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b089      	sub	sp, #36	; 0x24
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	330c      	adds	r3, #12
 800d0fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	e853 3f00 	ldrex	r3, [r3]
 800d102:	60bb      	str	r3, [r7, #8]
   return(result);
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d10a:	61fb      	str	r3, [r7, #28]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	330c      	adds	r3, #12
 800d112:	69fa      	ldr	r2, [r7, #28]
 800d114:	61ba      	str	r2, [r7, #24]
 800d116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d118:	6979      	ldr	r1, [r7, #20]
 800d11a:	69ba      	ldr	r2, [r7, #24]
 800d11c:	e841 2300 	strex	r3, r2, [r1]
 800d120:	613b      	str	r3, [r7, #16]
   return(result);
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d1e5      	bne.n	800d0f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2220      	movs	r2, #32
 800d12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d130:	bf00      	nop
 800d132:	3724      	adds	r7, #36	; 0x24
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b095      	sub	sp, #84	; 0x54
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	330c      	adds	r3, #12
 800d14a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d14e:	e853 3f00 	ldrex	r3, [r3]
 800d152:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d156:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d15a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	330c      	adds	r3, #12
 800d162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d164:	643a      	str	r2, [r7, #64]	; 0x40
 800d166:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d168:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d16a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d16c:	e841 2300 	strex	r3, r2, [r1]
 800d170:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d174:	2b00      	cmp	r3, #0
 800d176:	d1e5      	bne.n	800d144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	3314      	adds	r3, #20
 800d17e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d180:	6a3b      	ldr	r3, [r7, #32]
 800d182:	e853 3f00 	ldrex	r3, [r3]
 800d186:	61fb      	str	r3, [r7, #28]
   return(result);
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	f023 0301 	bic.w	r3, r3, #1
 800d18e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3314      	adds	r3, #20
 800d196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d19a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d19e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1a0:	e841 2300 	strex	r3, r2, [r1]
 800d1a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1e5      	bne.n	800d178 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d119      	bne.n	800d1e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	330c      	adds	r3, #12
 800d1ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	e853 3f00 	ldrex	r3, [r3]
 800d1c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	f023 0310 	bic.w	r3, r3, #16
 800d1ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	330c      	adds	r3, #12
 800d1d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1d4:	61ba      	str	r2, [r7, #24]
 800d1d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d8:	6979      	ldr	r1, [r7, #20]
 800d1da:	69ba      	ldr	r2, [r7, #24]
 800d1dc:	e841 2300 	strex	r3, r2, [r1]
 800d1e0:	613b      	str	r3, [r7, #16]
   return(result);
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d1e5      	bne.n	800d1b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2220      	movs	r2, #32
 800d1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d1f6:	bf00      	nop
 800d1f8:	3754      	adds	r7, #84	; 0x54
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b084      	sub	sp, #16
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2200      	movs	r2, #0
 800d214:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f7ff fd61 	bl	800cce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d222:	bf00      	nop
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d22a:	b480      	push	{r7}
 800d22c:	b085      	sub	sp, #20
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b21      	cmp	r3, #33	; 0x21
 800d23c:	d13e      	bne.n	800d2bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d246:	d114      	bne.n	800d272 <UART_Transmit_IT+0x48>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d110      	bne.n	800d272 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a1b      	ldr	r3, [r3, #32]
 800d254:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	461a      	mov	r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d264:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a1b      	ldr	r3, [r3, #32]
 800d26a:	1c9a      	adds	r2, r3, #2
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	621a      	str	r2, [r3, #32]
 800d270:	e008      	b.n	800d284 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a1b      	ldr	r3, [r3, #32]
 800d276:	1c59      	adds	r1, r3, #1
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	6211      	str	r1, [r2, #32]
 800d27c:	781a      	ldrb	r2, [r3, #0]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d288:	b29b      	uxth	r3, r3
 800d28a:	3b01      	subs	r3, #1
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	4619      	mov	r1, r3
 800d292:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10f      	bne.n	800d2b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68da      	ldr	r2, [r3, #12]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d2a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	68da      	ldr	r2, [r3, #12]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e000      	b.n	800d2be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d2bc:	2302      	movs	r3, #2
  }
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3714      	adds	r7, #20
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b082      	sub	sp, #8
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	68da      	ldr	r2, [r3, #12]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2220      	movs	r2, #32
 800d2e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff fcd2 	bl	800cc94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b08c      	sub	sp, #48	; 0x30
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b22      	cmp	r3, #34	; 0x22
 800d30c:	f040 80ab 	bne.w	800d466 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d318:	d117      	bne.n	800d34a <UART_Receive_IT+0x50>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	691b      	ldr	r3, [r3, #16]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d113      	bne.n	800d34a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d322:	2300      	movs	r3, #0
 800d324:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d32a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	b29b      	uxth	r3, r3
 800d334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d338:	b29a      	uxth	r2, r3
 800d33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d342:	1c9a      	adds	r2, r3, #2
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	629a      	str	r2, [r3, #40]	; 0x28
 800d348:	e026      	b.n	800d398 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d350:	2300      	movs	r3, #0
 800d352:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d35c:	d007      	beq.n	800d36e <UART_Receive_IT+0x74>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10a      	bne.n	800d37c <UART_Receive_IT+0x82>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	691b      	ldr	r3, [r3, #16]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d106      	bne.n	800d37c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	b2da      	uxtb	r2, r3
 800d376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d378:	701a      	strb	r2, [r3, #0]
 800d37a:	e008      	b.n	800d38e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	3b01      	subs	r3, #1
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d15a      	bne.n	800d462 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f022 0220 	bic.w	r2, r2, #32
 800d3ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	68da      	ldr	r2, [r3, #12]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d3ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	695a      	ldr	r2, [r3, #20]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f022 0201 	bic.w	r2, r2, #1
 800d3da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2220      	movs	r2, #32
 800d3e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d135      	bne.n	800d458 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	330c      	adds	r3, #12
 800d3f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	e853 3f00 	ldrex	r3, [r3]
 800d400:	613b      	str	r3, [r7, #16]
   return(result);
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	f023 0310 	bic.w	r3, r3, #16
 800d408:	627b      	str	r3, [r7, #36]	; 0x24
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	330c      	adds	r3, #12
 800d410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d412:	623a      	str	r2, [r7, #32]
 800d414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d416:	69f9      	ldr	r1, [r7, #28]
 800d418:	6a3a      	ldr	r2, [r7, #32]
 800d41a:	e841 2300 	strex	r3, r2, [r1]
 800d41e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d420:	69bb      	ldr	r3, [r7, #24]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1e5      	bne.n	800d3f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f003 0310 	and.w	r3, r3, #16
 800d430:	2b10      	cmp	r3, #16
 800d432:	d10a      	bne.n	800d44a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d434:	2300      	movs	r3, #0
 800d436:	60fb      	str	r3, [r7, #12]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d44e:	4619      	mov	r1, r3
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f7ff fc51 	bl	800ccf8 <HAL_UARTEx_RxEventCallback>
 800d456:	e002      	b.n	800d45e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f7ff fc2f 	bl	800ccbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	e002      	b.n	800d468 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	e000      	b.n	800d468 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d466:	2302      	movs	r3, #2
  }
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3730      	adds	r7, #48	; 0x30
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d474:	b09f      	sub	sp, #124	; 0x7c
 800d476:	af00      	add	r7, sp, #0
 800d478:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d47a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	691b      	ldr	r3, [r3, #16]
 800d480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d486:	68d9      	ldr	r1, [r3, #12]
 800d488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	ea40 0301 	orr.w	r3, r0, r1
 800d490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d494:	689a      	ldr	r2, [r3, #8]
 800d496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d498:	691b      	ldr	r3, [r3, #16]
 800d49a:	431a      	orrs	r2, r3
 800d49c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d49e:	695b      	ldr	r3, [r3, #20]
 800d4a0:	431a      	orrs	r2, r3
 800d4a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a4:	69db      	ldr	r3, [r3, #28]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d4b4:	f021 010c 	bic.w	r1, r1, #12
 800d4b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4be:	430b      	orrs	r3, r1
 800d4c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d4c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	695b      	ldr	r3, [r3, #20]
 800d4c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d4cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ce:	6999      	ldr	r1, [r3, #24]
 800d4d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	ea40 0301 	orr.w	r3, r0, r1
 800d4d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d4da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	4bc5      	ldr	r3, [pc, #788]	; (800d7f4 <UART_SetConfig+0x384>)
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d004      	beq.n	800d4ee <UART_SetConfig+0x7e>
 800d4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	4bc3      	ldr	r3, [pc, #780]	; (800d7f8 <UART_SetConfig+0x388>)
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d103      	bne.n	800d4f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d4ee:	f7fe f979 	bl	800b7e4 <HAL_RCC_GetPCLK2Freq>
 800d4f2:	6778      	str	r0, [r7, #116]	; 0x74
 800d4f4:	e002      	b.n	800d4fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d4f6:	f7fe f961 	bl	800b7bc <HAL_RCC_GetPCLK1Freq>
 800d4fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4fe:	69db      	ldr	r3, [r3, #28]
 800d500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d504:	f040 80b6 	bne.w	800d674 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d50a:	461c      	mov	r4, r3
 800d50c:	f04f 0500 	mov.w	r5, #0
 800d510:	4622      	mov	r2, r4
 800d512:	462b      	mov	r3, r5
 800d514:	1891      	adds	r1, r2, r2
 800d516:	6439      	str	r1, [r7, #64]	; 0x40
 800d518:	415b      	adcs	r3, r3
 800d51a:	647b      	str	r3, [r7, #68]	; 0x44
 800d51c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d520:	1912      	adds	r2, r2, r4
 800d522:	eb45 0303 	adc.w	r3, r5, r3
 800d526:	f04f 0000 	mov.w	r0, #0
 800d52a:	f04f 0100 	mov.w	r1, #0
 800d52e:	00d9      	lsls	r1, r3, #3
 800d530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d534:	00d0      	lsls	r0, r2, #3
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	1911      	adds	r1, r2, r4
 800d53c:	6639      	str	r1, [r7, #96]	; 0x60
 800d53e:	416b      	adcs	r3, r5
 800d540:	667b      	str	r3, [r7, #100]	; 0x64
 800d542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	461a      	mov	r2, r3
 800d548:	f04f 0300 	mov.w	r3, #0
 800d54c:	1891      	adds	r1, r2, r2
 800d54e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d550:	415b      	adcs	r3, r3
 800d552:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d554:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d558:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d55c:	f7f3 fbac 	bl	8000cb8 <__aeabi_uldivmod>
 800d560:	4602      	mov	r2, r0
 800d562:	460b      	mov	r3, r1
 800d564:	4ba5      	ldr	r3, [pc, #660]	; (800d7fc <UART_SetConfig+0x38c>)
 800d566:	fba3 2302 	umull	r2, r3, r3, r2
 800d56a:	095b      	lsrs	r3, r3, #5
 800d56c:	011e      	lsls	r6, r3, #4
 800d56e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d570:	461c      	mov	r4, r3
 800d572:	f04f 0500 	mov.w	r5, #0
 800d576:	4622      	mov	r2, r4
 800d578:	462b      	mov	r3, r5
 800d57a:	1891      	adds	r1, r2, r2
 800d57c:	6339      	str	r1, [r7, #48]	; 0x30
 800d57e:	415b      	adcs	r3, r3
 800d580:	637b      	str	r3, [r7, #52]	; 0x34
 800d582:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d586:	1912      	adds	r2, r2, r4
 800d588:	eb45 0303 	adc.w	r3, r5, r3
 800d58c:	f04f 0000 	mov.w	r0, #0
 800d590:	f04f 0100 	mov.w	r1, #0
 800d594:	00d9      	lsls	r1, r3, #3
 800d596:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d59a:	00d0      	lsls	r0, r2, #3
 800d59c:	4602      	mov	r2, r0
 800d59e:	460b      	mov	r3, r1
 800d5a0:	1911      	adds	r1, r2, r4
 800d5a2:	65b9      	str	r1, [r7, #88]	; 0x58
 800d5a4:	416b      	adcs	r3, r5
 800d5a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	f04f 0300 	mov.w	r3, #0
 800d5b2:	1891      	adds	r1, r2, r2
 800d5b4:	62b9      	str	r1, [r7, #40]	; 0x28
 800d5b6:	415b      	adcs	r3, r3
 800d5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d5be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d5c2:	f7f3 fb79 	bl	8000cb8 <__aeabi_uldivmod>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	4b8c      	ldr	r3, [pc, #560]	; (800d7fc <UART_SetConfig+0x38c>)
 800d5cc:	fba3 1302 	umull	r1, r3, r3, r2
 800d5d0:	095b      	lsrs	r3, r3, #5
 800d5d2:	2164      	movs	r1, #100	; 0x64
 800d5d4:	fb01 f303 	mul.w	r3, r1, r3
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	3332      	adds	r3, #50	; 0x32
 800d5de:	4a87      	ldr	r2, [pc, #540]	; (800d7fc <UART_SetConfig+0x38c>)
 800d5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e4:	095b      	lsrs	r3, r3, #5
 800d5e6:	005b      	lsls	r3, r3, #1
 800d5e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d5ec:	441e      	add	r6, r3
 800d5ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f04f 0100 	mov.w	r1, #0
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	1894      	adds	r4, r2, r2
 800d5fc:	623c      	str	r4, [r7, #32]
 800d5fe:	415b      	adcs	r3, r3
 800d600:	627b      	str	r3, [r7, #36]	; 0x24
 800d602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d606:	1812      	adds	r2, r2, r0
 800d608:	eb41 0303 	adc.w	r3, r1, r3
 800d60c:	f04f 0400 	mov.w	r4, #0
 800d610:	f04f 0500 	mov.w	r5, #0
 800d614:	00dd      	lsls	r5, r3, #3
 800d616:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d61a:	00d4      	lsls	r4, r2, #3
 800d61c:	4622      	mov	r2, r4
 800d61e:	462b      	mov	r3, r5
 800d620:	1814      	adds	r4, r2, r0
 800d622:	653c      	str	r4, [r7, #80]	; 0x50
 800d624:	414b      	adcs	r3, r1
 800d626:	657b      	str	r3, [r7, #84]	; 0x54
 800d628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	461a      	mov	r2, r3
 800d62e:	f04f 0300 	mov.w	r3, #0
 800d632:	1891      	adds	r1, r2, r2
 800d634:	61b9      	str	r1, [r7, #24]
 800d636:	415b      	adcs	r3, r3
 800d638:	61fb      	str	r3, [r7, #28]
 800d63a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d63e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d642:	f7f3 fb39 	bl	8000cb8 <__aeabi_uldivmod>
 800d646:	4602      	mov	r2, r0
 800d648:	460b      	mov	r3, r1
 800d64a:	4b6c      	ldr	r3, [pc, #432]	; (800d7fc <UART_SetConfig+0x38c>)
 800d64c:	fba3 1302 	umull	r1, r3, r3, r2
 800d650:	095b      	lsrs	r3, r3, #5
 800d652:	2164      	movs	r1, #100	; 0x64
 800d654:	fb01 f303 	mul.w	r3, r1, r3
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	00db      	lsls	r3, r3, #3
 800d65c:	3332      	adds	r3, #50	; 0x32
 800d65e:	4a67      	ldr	r2, [pc, #412]	; (800d7fc <UART_SetConfig+0x38c>)
 800d660:	fba2 2303 	umull	r2, r3, r2, r3
 800d664:	095b      	lsrs	r3, r3, #5
 800d666:	f003 0207 	and.w	r2, r3, #7
 800d66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4432      	add	r2, r6
 800d670:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d672:	e0b9      	b.n	800d7e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d676:	461c      	mov	r4, r3
 800d678:	f04f 0500 	mov.w	r5, #0
 800d67c:	4622      	mov	r2, r4
 800d67e:	462b      	mov	r3, r5
 800d680:	1891      	adds	r1, r2, r2
 800d682:	6139      	str	r1, [r7, #16]
 800d684:	415b      	adcs	r3, r3
 800d686:	617b      	str	r3, [r7, #20]
 800d688:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d68c:	1912      	adds	r2, r2, r4
 800d68e:	eb45 0303 	adc.w	r3, r5, r3
 800d692:	f04f 0000 	mov.w	r0, #0
 800d696:	f04f 0100 	mov.w	r1, #0
 800d69a:	00d9      	lsls	r1, r3, #3
 800d69c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d6a0:	00d0      	lsls	r0, r2, #3
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	eb12 0804 	adds.w	r8, r2, r4
 800d6aa:	eb43 0905 	adc.w	r9, r3, r5
 800d6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f04f 0100 	mov.w	r1, #0
 800d6b8:	f04f 0200 	mov.w	r2, #0
 800d6bc:	f04f 0300 	mov.w	r3, #0
 800d6c0:	008b      	lsls	r3, r1, #2
 800d6c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d6c6:	0082      	lsls	r2, r0, #2
 800d6c8:	4640      	mov	r0, r8
 800d6ca:	4649      	mov	r1, r9
 800d6cc:	f7f3 faf4 	bl	8000cb8 <__aeabi_uldivmod>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	4b49      	ldr	r3, [pc, #292]	; (800d7fc <UART_SetConfig+0x38c>)
 800d6d6:	fba3 2302 	umull	r2, r3, r3, r2
 800d6da:	095b      	lsrs	r3, r3, #5
 800d6dc:	011e      	lsls	r6, r3, #4
 800d6de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f04f 0100 	mov.w	r1, #0
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	1894      	adds	r4, r2, r2
 800d6ec:	60bc      	str	r4, [r7, #8]
 800d6ee:	415b      	adcs	r3, r3
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d6f6:	1812      	adds	r2, r2, r0
 800d6f8:	eb41 0303 	adc.w	r3, r1, r3
 800d6fc:	f04f 0400 	mov.w	r4, #0
 800d700:	f04f 0500 	mov.w	r5, #0
 800d704:	00dd      	lsls	r5, r3, #3
 800d706:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d70a:	00d4      	lsls	r4, r2, #3
 800d70c:	4622      	mov	r2, r4
 800d70e:	462b      	mov	r3, r5
 800d710:	1814      	adds	r4, r2, r0
 800d712:	64bc      	str	r4, [r7, #72]	; 0x48
 800d714:	414b      	adcs	r3, r1
 800d716:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f04f 0100 	mov.w	r1, #0
 800d722:	f04f 0200 	mov.w	r2, #0
 800d726:	f04f 0300 	mov.w	r3, #0
 800d72a:	008b      	lsls	r3, r1, #2
 800d72c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d730:	0082      	lsls	r2, r0, #2
 800d732:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d736:	f7f3 fabf 	bl	8000cb8 <__aeabi_uldivmod>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4b2f      	ldr	r3, [pc, #188]	; (800d7fc <UART_SetConfig+0x38c>)
 800d740:	fba3 1302 	umull	r1, r3, r3, r2
 800d744:	095b      	lsrs	r3, r3, #5
 800d746:	2164      	movs	r1, #100	; 0x64
 800d748:	fb01 f303 	mul.w	r3, r1, r3
 800d74c:	1ad3      	subs	r3, r2, r3
 800d74e:	011b      	lsls	r3, r3, #4
 800d750:	3332      	adds	r3, #50	; 0x32
 800d752:	4a2a      	ldr	r2, [pc, #168]	; (800d7fc <UART_SetConfig+0x38c>)
 800d754:	fba2 2303 	umull	r2, r3, r2, r3
 800d758:	095b      	lsrs	r3, r3, #5
 800d75a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d75e:	441e      	add	r6, r3
 800d760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d762:	4618      	mov	r0, r3
 800d764:	f04f 0100 	mov.w	r1, #0
 800d768:	4602      	mov	r2, r0
 800d76a:	460b      	mov	r3, r1
 800d76c:	1894      	adds	r4, r2, r2
 800d76e:	603c      	str	r4, [r7, #0]
 800d770:	415b      	adcs	r3, r3
 800d772:	607b      	str	r3, [r7, #4]
 800d774:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d778:	1812      	adds	r2, r2, r0
 800d77a:	eb41 0303 	adc.w	r3, r1, r3
 800d77e:	f04f 0400 	mov.w	r4, #0
 800d782:	f04f 0500 	mov.w	r5, #0
 800d786:	00dd      	lsls	r5, r3, #3
 800d788:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d78c:	00d4      	lsls	r4, r2, #3
 800d78e:	4622      	mov	r2, r4
 800d790:	462b      	mov	r3, r5
 800d792:	eb12 0a00 	adds.w	sl, r2, r0
 800d796:	eb43 0b01 	adc.w	fp, r3, r1
 800d79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f04f 0100 	mov.w	r1, #0
 800d7a4:	f04f 0200 	mov.w	r2, #0
 800d7a8:	f04f 0300 	mov.w	r3, #0
 800d7ac:	008b      	lsls	r3, r1, #2
 800d7ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d7b2:	0082      	lsls	r2, r0, #2
 800d7b4:	4650      	mov	r0, sl
 800d7b6:	4659      	mov	r1, fp
 800d7b8:	f7f3 fa7e 	bl	8000cb8 <__aeabi_uldivmod>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	460b      	mov	r3, r1
 800d7c0:	4b0e      	ldr	r3, [pc, #56]	; (800d7fc <UART_SetConfig+0x38c>)
 800d7c2:	fba3 1302 	umull	r1, r3, r3, r2
 800d7c6:	095b      	lsrs	r3, r3, #5
 800d7c8:	2164      	movs	r1, #100	; 0x64
 800d7ca:	fb01 f303 	mul.w	r3, r1, r3
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	011b      	lsls	r3, r3, #4
 800d7d2:	3332      	adds	r3, #50	; 0x32
 800d7d4:	4a09      	ldr	r2, [pc, #36]	; (800d7fc <UART_SetConfig+0x38c>)
 800d7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d7da:	095b      	lsrs	r3, r3, #5
 800d7dc:	f003 020f 	and.w	r2, r3, #15
 800d7e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4432      	add	r2, r6
 800d7e6:	609a      	str	r2, [r3, #8]
}
 800d7e8:	bf00      	nop
 800d7ea:	377c      	adds	r7, #124	; 0x7c
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f2:	bf00      	nop
 800d7f4:	40011000 	.word	0x40011000
 800d7f8:	40011400 	.word	0x40011400
 800d7fc:	51eb851f 	.word	0x51eb851f

0800d800 <atof>:
 800d800:	2100      	movs	r1, #0
 800d802:	f001 bd05 	b.w	800f210 <strtod>

0800d806 <atoi>:
 800d806:	220a      	movs	r2, #10
 800d808:	2100      	movs	r1, #0
 800d80a:	f001 bdef 	b.w	800f3ec <strtol>
	...

0800d810 <__errno>:
 800d810:	4b01      	ldr	r3, [pc, #4]	; (800d818 <__errno+0x8>)
 800d812:	6818      	ldr	r0, [r3, #0]
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	20000040 	.word	0x20000040

0800d81c <__libc_init_array>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	4d0d      	ldr	r5, [pc, #52]	; (800d854 <__libc_init_array+0x38>)
 800d820:	4c0d      	ldr	r4, [pc, #52]	; (800d858 <__libc_init_array+0x3c>)
 800d822:	1b64      	subs	r4, r4, r5
 800d824:	10a4      	asrs	r4, r4, #2
 800d826:	2600      	movs	r6, #0
 800d828:	42a6      	cmp	r6, r4
 800d82a:	d109      	bne.n	800d840 <__libc_init_array+0x24>
 800d82c:	4d0b      	ldr	r5, [pc, #44]	; (800d85c <__libc_init_array+0x40>)
 800d82e:	4c0c      	ldr	r4, [pc, #48]	; (800d860 <__libc_init_array+0x44>)
 800d830:	f004 fcb8 	bl	80121a4 <_init>
 800d834:	1b64      	subs	r4, r4, r5
 800d836:	10a4      	asrs	r4, r4, #2
 800d838:	2600      	movs	r6, #0
 800d83a:	42a6      	cmp	r6, r4
 800d83c:	d105      	bne.n	800d84a <__libc_init_array+0x2e>
 800d83e:	bd70      	pop	{r4, r5, r6, pc}
 800d840:	f855 3b04 	ldr.w	r3, [r5], #4
 800d844:	4798      	blx	r3
 800d846:	3601      	adds	r6, #1
 800d848:	e7ee      	b.n	800d828 <__libc_init_array+0xc>
 800d84a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d84e:	4798      	blx	r3
 800d850:	3601      	adds	r6, #1
 800d852:	e7f2      	b.n	800d83a <__libc_init_array+0x1e>
 800d854:	08025e58 	.word	0x08025e58
 800d858:	08025e58 	.word	0x08025e58
 800d85c:	08025e58 	.word	0x08025e58
 800d860:	08025e5c 	.word	0x08025e5c

0800d864 <memset>:
 800d864:	4402      	add	r2, r0
 800d866:	4603      	mov	r3, r0
 800d868:	4293      	cmp	r3, r2
 800d86a:	d100      	bne.n	800d86e <memset+0xa>
 800d86c:	4770      	bx	lr
 800d86e:	f803 1b01 	strb.w	r1, [r3], #1
 800d872:	e7f9      	b.n	800d868 <memset+0x4>

0800d874 <__cvt>:
 800d874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d878:	ec55 4b10 	vmov	r4, r5, d0
 800d87c:	2d00      	cmp	r5, #0
 800d87e:	460e      	mov	r6, r1
 800d880:	4619      	mov	r1, r3
 800d882:	462b      	mov	r3, r5
 800d884:	bfbb      	ittet	lt
 800d886:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d88a:	461d      	movlt	r5, r3
 800d88c:	2300      	movge	r3, #0
 800d88e:	232d      	movlt	r3, #45	; 0x2d
 800d890:	700b      	strb	r3, [r1, #0]
 800d892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d894:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d898:	4691      	mov	r9, r2
 800d89a:	f023 0820 	bic.w	r8, r3, #32
 800d89e:	bfbc      	itt	lt
 800d8a0:	4622      	movlt	r2, r4
 800d8a2:	4614      	movlt	r4, r2
 800d8a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8a8:	d005      	beq.n	800d8b6 <__cvt+0x42>
 800d8aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d8ae:	d100      	bne.n	800d8b2 <__cvt+0x3e>
 800d8b0:	3601      	adds	r6, #1
 800d8b2:	2102      	movs	r1, #2
 800d8b4:	e000      	b.n	800d8b8 <__cvt+0x44>
 800d8b6:	2103      	movs	r1, #3
 800d8b8:	ab03      	add	r3, sp, #12
 800d8ba:	9301      	str	r3, [sp, #4]
 800d8bc:	ab02      	add	r3, sp, #8
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	ec45 4b10 	vmov	d0, r4, r5
 800d8c4:	4653      	mov	r3, sl
 800d8c6:	4632      	mov	r2, r6
 800d8c8:	f001 fe46 	bl	800f558 <_dtoa_r>
 800d8cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d8d0:	4607      	mov	r7, r0
 800d8d2:	d102      	bne.n	800d8da <__cvt+0x66>
 800d8d4:	f019 0f01 	tst.w	r9, #1
 800d8d8:	d022      	beq.n	800d920 <__cvt+0xac>
 800d8da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8de:	eb07 0906 	add.w	r9, r7, r6
 800d8e2:	d110      	bne.n	800d906 <__cvt+0x92>
 800d8e4:	783b      	ldrb	r3, [r7, #0]
 800d8e6:	2b30      	cmp	r3, #48	; 0x30
 800d8e8:	d10a      	bne.n	800d900 <__cvt+0x8c>
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	f7f3 f901 	bl	8000af8 <__aeabi_dcmpeq>
 800d8f6:	b918      	cbnz	r0, 800d900 <__cvt+0x8c>
 800d8f8:	f1c6 0601 	rsb	r6, r6, #1
 800d8fc:	f8ca 6000 	str.w	r6, [sl]
 800d900:	f8da 3000 	ldr.w	r3, [sl]
 800d904:	4499      	add	r9, r3
 800d906:	2200      	movs	r2, #0
 800d908:	2300      	movs	r3, #0
 800d90a:	4620      	mov	r0, r4
 800d90c:	4629      	mov	r1, r5
 800d90e:	f7f3 f8f3 	bl	8000af8 <__aeabi_dcmpeq>
 800d912:	b108      	cbz	r0, 800d918 <__cvt+0xa4>
 800d914:	f8cd 900c 	str.w	r9, [sp, #12]
 800d918:	2230      	movs	r2, #48	; 0x30
 800d91a:	9b03      	ldr	r3, [sp, #12]
 800d91c:	454b      	cmp	r3, r9
 800d91e:	d307      	bcc.n	800d930 <__cvt+0xbc>
 800d920:	9b03      	ldr	r3, [sp, #12]
 800d922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d924:	1bdb      	subs	r3, r3, r7
 800d926:	4638      	mov	r0, r7
 800d928:	6013      	str	r3, [r2, #0]
 800d92a:	b004      	add	sp, #16
 800d92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d930:	1c59      	adds	r1, r3, #1
 800d932:	9103      	str	r1, [sp, #12]
 800d934:	701a      	strb	r2, [r3, #0]
 800d936:	e7f0      	b.n	800d91a <__cvt+0xa6>

0800d938 <__exponent>:
 800d938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d93a:	4603      	mov	r3, r0
 800d93c:	2900      	cmp	r1, #0
 800d93e:	bfb8      	it	lt
 800d940:	4249      	neglt	r1, r1
 800d942:	f803 2b02 	strb.w	r2, [r3], #2
 800d946:	bfb4      	ite	lt
 800d948:	222d      	movlt	r2, #45	; 0x2d
 800d94a:	222b      	movge	r2, #43	; 0x2b
 800d94c:	2909      	cmp	r1, #9
 800d94e:	7042      	strb	r2, [r0, #1]
 800d950:	dd2a      	ble.n	800d9a8 <__exponent+0x70>
 800d952:	f10d 0407 	add.w	r4, sp, #7
 800d956:	46a4      	mov	ip, r4
 800d958:	270a      	movs	r7, #10
 800d95a:	46a6      	mov	lr, r4
 800d95c:	460a      	mov	r2, r1
 800d95e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d962:	fb07 1516 	mls	r5, r7, r6, r1
 800d966:	3530      	adds	r5, #48	; 0x30
 800d968:	2a63      	cmp	r2, #99	; 0x63
 800d96a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d96e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d972:	4631      	mov	r1, r6
 800d974:	dcf1      	bgt.n	800d95a <__exponent+0x22>
 800d976:	3130      	adds	r1, #48	; 0x30
 800d978:	f1ae 0502 	sub.w	r5, lr, #2
 800d97c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d980:	1c44      	adds	r4, r0, #1
 800d982:	4629      	mov	r1, r5
 800d984:	4561      	cmp	r1, ip
 800d986:	d30a      	bcc.n	800d99e <__exponent+0x66>
 800d988:	f10d 0209 	add.w	r2, sp, #9
 800d98c:	eba2 020e 	sub.w	r2, r2, lr
 800d990:	4565      	cmp	r5, ip
 800d992:	bf88      	it	hi
 800d994:	2200      	movhi	r2, #0
 800d996:	4413      	add	r3, r2
 800d998:	1a18      	subs	r0, r3, r0
 800d99a:	b003      	add	sp, #12
 800d99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d99e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d9a6:	e7ed      	b.n	800d984 <__exponent+0x4c>
 800d9a8:	2330      	movs	r3, #48	; 0x30
 800d9aa:	3130      	adds	r1, #48	; 0x30
 800d9ac:	7083      	strb	r3, [r0, #2]
 800d9ae:	70c1      	strb	r1, [r0, #3]
 800d9b0:	1d03      	adds	r3, r0, #4
 800d9b2:	e7f1      	b.n	800d998 <__exponent+0x60>

0800d9b4 <_printf_float>:
 800d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	ed2d 8b02 	vpush	{d8}
 800d9bc:	b08d      	sub	sp, #52	; 0x34
 800d9be:	460c      	mov	r4, r1
 800d9c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d9c4:	4616      	mov	r6, r2
 800d9c6:	461f      	mov	r7, r3
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	f002 ff33 	bl	8010834 <_localeconv_r>
 800d9ce:	f8d0 a000 	ldr.w	sl, [r0]
 800d9d2:	4650      	mov	r0, sl
 800d9d4:	f7f2 fc0e 	bl	80001f4 <strlen>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	930a      	str	r3, [sp, #40]	; 0x28
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	9305      	str	r3, [sp, #20]
 800d9e0:	f8d8 3000 	ldr.w	r3, [r8]
 800d9e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d9e8:	3307      	adds	r3, #7
 800d9ea:	f023 0307 	bic.w	r3, r3, #7
 800d9ee:	f103 0208 	add.w	r2, r3, #8
 800d9f2:	f8c8 2000 	str.w	r2, [r8]
 800d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d9fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800da02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da06:	9307      	str	r3, [sp, #28]
 800da08:	f8cd 8018 	str.w	r8, [sp, #24]
 800da0c:	ee08 0a10 	vmov	s16, r0
 800da10:	4b9f      	ldr	r3, [pc, #636]	; (800dc90 <_printf_float+0x2dc>)
 800da12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da16:	f04f 32ff 	mov.w	r2, #4294967295
 800da1a:	f7f3 f89f 	bl	8000b5c <__aeabi_dcmpun>
 800da1e:	bb88      	cbnz	r0, 800da84 <_printf_float+0xd0>
 800da20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da24:	4b9a      	ldr	r3, [pc, #616]	; (800dc90 <_printf_float+0x2dc>)
 800da26:	f04f 32ff 	mov.w	r2, #4294967295
 800da2a:	f7f3 f879 	bl	8000b20 <__aeabi_dcmple>
 800da2e:	bb48      	cbnz	r0, 800da84 <_printf_float+0xd0>
 800da30:	2200      	movs	r2, #0
 800da32:	2300      	movs	r3, #0
 800da34:	4640      	mov	r0, r8
 800da36:	4649      	mov	r1, r9
 800da38:	f7f3 f868 	bl	8000b0c <__aeabi_dcmplt>
 800da3c:	b110      	cbz	r0, 800da44 <_printf_float+0x90>
 800da3e:	232d      	movs	r3, #45	; 0x2d
 800da40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da44:	4b93      	ldr	r3, [pc, #588]	; (800dc94 <_printf_float+0x2e0>)
 800da46:	4894      	ldr	r0, [pc, #592]	; (800dc98 <_printf_float+0x2e4>)
 800da48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800da4c:	bf94      	ite	ls
 800da4e:	4698      	movls	r8, r3
 800da50:	4680      	movhi	r8, r0
 800da52:	2303      	movs	r3, #3
 800da54:	6123      	str	r3, [r4, #16]
 800da56:	9b05      	ldr	r3, [sp, #20]
 800da58:	f023 0204 	bic.w	r2, r3, #4
 800da5c:	6022      	str	r2, [r4, #0]
 800da5e:	f04f 0900 	mov.w	r9, #0
 800da62:	9700      	str	r7, [sp, #0]
 800da64:	4633      	mov	r3, r6
 800da66:	aa0b      	add	r2, sp, #44	; 0x2c
 800da68:	4621      	mov	r1, r4
 800da6a:	4628      	mov	r0, r5
 800da6c:	f000 f9d8 	bl	800de20 <_printf_common>
 800da70:	3001      	adds	r0, #1
 800da72:	f040 8090 	bne.w	800db96 <_printf_float+0x1e2>
 800da76:	f04f 30ff 	mov.w	r0, #4294967295
 800da7a:	b00d      	add	sp, #52	; 0x34
 800da7c:	ecbd 8b02 	vpop	{d8}
 800da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da84:	4642      	mov	r2, r8
 800da86:	464b      	mov	r3, r9
 800da88:	4640      	mov	r0, r8
 800da8a:	4649      	mov	r1, r9
 800da8c:	f7f3 f866 	bl	8000b5c <__aeabi_dcmpun>
 800da90:	b140      	cbz	r0, 800daa4 <_printf_float+0xf0>
 800da92:	464b      	mov	r3, r9
 800da94:	2b00      	cmp	r3, #0
 800da96:	bfbc      	itt	lt
 800da98:	232d      	movlt	r3, #45	; 0x2d
 800da9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800da9e:	487f      	ldr	r0, [pc, #508]	; (800dc9c <_printf_float+0x2e8>)
 800daa0:	4b7f      	ldr	r3, [pc, #508]	; (800dca0 <_printf_float+0x2ec>)
 800daa2:	e7d1      	b.n	800da48 <_printf_float+0x94>
 800daa4:	6863      	ldr	r3, [r4, #4]
 800daa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800daaa:	9206      	str	r2, [sp, #24]
 800daac:	1c5a      	adds	r2, r3, #1
 800daae:	d13f      	bne.n	800db30 <_printf_float+0x17c>
 800dab0:	2306      	movs	r3, #6
 800dab2:	6063      	str	r3, [r4, #4]
 800dab4:	9b05      	ldr	r3, [sp, #20]
 800dab6:	6861      	ldr	r1, [r4, #4]
 800dab8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dabc:	2300      	movs	r3, #0
 800dabe:	9303      	str	r3, [sp, #12]
 800dac0:	ab0a      	add	r3, sp, #40	; 0x28
 800dac2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dac6:	ab09      	add	r3, sp, #36	; 0x24
 800dac8:	ec49 8b10 	vmov	d0, r8, r9
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	6022      	str	r2, [r4, #0]
 800dad0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dad4:	4628      	mov	r0, r5
 800dad6:	f7ff fecd 	bl	800d874 <__cvt>
 800dada:	9b06      	ldr	r3, [sp, #24]
 800dadc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dade:	2b47      	cmp	r3, #71	; 0x47
 800dae0:	4680      	mov	r8, r0
 800dae2:	d108      	bne.n	800daf6 <_printf_float+0x142>
 800dae4:	1cc8      	adds	r0, r1, #3
 800dae6:	db02      	blt.n	800daee <_printf_float+0x13a>
 800dae8:	6863      	ldr	r3, [r4, #4]
 800daea:	4299      	cmp	r1, r3
 800daec:	dd41      	ble.n	800db72 <_printf_float+0x1be>
 800daee:	f1ab 0b02 	sub.w	fp, fp, #2
 800daf2:	fa5f fb8b 	uxtb.w	fp, fp
 800daf6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dafa:	d820      	bhi.n	800db3e <_printf_float+0x18a>
 800dafc:	3901      	subs	r1, #1
 800dafe:	465a      	mov	r2, fp
 800db00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800db04:	9109      	str	r1, [sp, #36]	; 0x24
 800db06:	f7ff ff17 	bl	800d938 <__exponent>
 800db0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db0c:	1813      	adds	r3, r2, r0
 800db0e:	2a01      	cmp	r2, #1
 800db10:	4681      	mov	r9, r0
 800db12:	6123      	str	r3, [r4, #16]
 800db14:	dc02      	bgt.n	800db1c <_printf_float+0x168>
 800db16:	6822      	ldr	r2, [r4, #0]
 800db18:	07d2      	lsls	r2, r2, #31
 800db1a:	d501      	bpl.n	800db20 <_printf_float+0x16c>
 800db1c:	3301      	adds	r3, #1
 800db1e:	6123      	str	r3, [r4, #16]
 800db20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800db24:	2b00      	cmp	r3, #0
 800db26:	d09c      	beq.n	800da62 <_printf_float+0xae>
 800db28:	232d      	movs	r3, #45	; 0x2d
 800db2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db2e:	e798      	b.n	800da62 <_printf_float+0xae>
 800db30:	9a06      	ldr	r2, [sp, #24]
 800db32:	2a47      	cmp	r2, #71	; 0x47
 800db34:	d1be      	bne.n	800dab4 <_printf_float+0x100>
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1bc      	bne.n	800dab4 <_printf_float+0x100>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e7b9      	b.n	800dab2 <_printf_float+0xfe>
 800db3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800db42:	d118      	bne.n	800db76 <_printf_float+0x1c2>
 800db44:	2900      	cmp	r1, #0
 800db46:	6863      	ldr	r3, [r4, #4]
 800db48:	dd0b      	ble.n	800db62 <_printf_float+0x1ae>
 800db4a:	6121      	str	r1, [r4, #16]
 800db4c:	b913      	cbnz	r3, 800db54 <_printf_float+0x1a0>
 800db4e:	6822      	ldr	r2, [r4, #0]
 800db50:	07d0      	lsls	r0, r2, #31
 800db52:	d502      	bpl.n	800db5a <_printf_float+0x1a6>
 800db54:	3301      	adds	r3, #1
 800db56:	440b      	add	r3, r1
 800db58:	6123      	str	r3, [r4, #16]
 800db5a:	65a1      	str	r1, [r4, #88]	; 0x58
 800db5c:	f04f 0900 	mov.w	r9, #0
 800db60:	e7de      	b.n	800db20 <_printf_float+0x16c>
 800db62:	b913      	cbnz	r3, 800db6a <_printf_float+0x1b6>
 800db64:	6822      	ldr	r2, [r4, #0]
 800db66:	07d2      	lsls	r2, r2, #31
 800db68:	d501      	bpl.n	800db6e <_printf_float+0x1ba>
 800db6a:	3302      	adds	r3, #2
 800db6c:	e7f4      	b.n	800db58 <_printf_float+0x1a4>
 800db6e:	2301      	movs	r3, #1
 800db70:	e7f2      	b.n	800db58 <_printf_float+0x1a4>
 800db72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800db76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db78:	4299      	cmp	r1, r3
 800db7a:	db05      	blt.n	800db88 <_printf_float+0x1d4>
 800db7c:	6823      	ldr	r3, [r4, #0]
 800db7e:	6121      	str	r1, [r4, #16]
 800db80:	07d8      	lsls	r0, r3, #31
 800db82:	d5ea      	bpl.n	800db5a <_printf_float+0x1a6>
 800db84:	1c4b      	adds	r3, r1, #1
 800db86:	e7e7      	b.n	800db58 <_printf_float+0x1a4>
 800db88:	2900      	cmp	r1, #0
 800db8a:	bfd4      	ite	le
 800db8c:	f1c1 0202 	rsble	r2, r1, #2
 800db90:	2201      	movgt	r2, #1
 800db92:	4413      	add	r3, r2
 800db94:	e7e0      	b.n	800db58 <_printf_float+0x1a4>
 800db96:	6823      	ldr	r3, [r4, #0]
 800db98:	055a      	lsls	r2, r3, #21
 800db9a:	d407      	bmi.n	800dbac <_printf_float+0x1f8>
 800db9c:	6923      	ldr	r3, [r4, #16]
 800db9e:	4642      	mov	r2, r8
 800dba0:	4631      	mov	r1, r6
 800dba2:	4628      	mov	r0, r5
 800dba4:	47b8      	blx	r7
 800dba6:	3001      	adds	r0, #1
 800dba8:	d12c      	bne.n	800dc04 <_printf_float+0x250>
 800dbaa:	e764      	b.n	800da76 <_printf_float+0xc2>
 800dbac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dbb0:	f240 80e0 	bls.w	800dd74 <_printf_float+0x3c0>
 800dbb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dbb8:	2200      	movs	r2, #0
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f7f2 ff9c 	bl	8000af8 <__aeabi_dcmpeq>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d034      	beq.n	800dc2e <_printf_float+0x27a>
 800dbc4:	4a37      	ldr	r2, [pc, #220]	; (800dca4 <_printf_float+0x2f0>)
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	4631      	mov	r1, r6
 800dbca:	4628      	mov	r0, r5
 800dbcc:	47b8      	blx	r7
 800dbce:	3001      	adds	r0, #1
 800dbd0:	f43f af51 	beq.w	800da76 <_printf_float+0xc2>
 800dbd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	db02      	blt.n	800dbe2 <_printf_float+0x22e>
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	07d8      	lsls	r0, r3, #31
 800dbe0:	d510      	bpl.n	800dc04 <_printf_float+0x250>
 800dbe2:	ee18 3a10 	vmov	r3, s16
 800dbe6:	4652      	mov	r2, sl
 800dbe8:	4631      	mov	r1, r6
 800dbea:	4628      	mov	r0, r5
 800dbec:	47b8      	blx	r7
 800dbee:	3001      	adds	r0, #1
 800dbf0:	f43f af41 	beq.w	800da76 <_printf_float+0xc2>
 800dbf4:	f04f 0800 	mov.w	r8, #0
 800dbf8:	f104 091a 	add.w	r9, r4, #26
 800dbfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	4543      	cmp	r3, r8
 800dc02:	dc09      	bgt.n	800dc18 <_printf_float+0x264>
 800dc04:	6823      	ldr	r3, [r4, #0]
 800dc06:	079b      	lsls	r3, r3, #30
 800dc08:	f100 8105 	bmi.w	800de16 <_printf_float+0x462>
 800dc0c:	68e0      	ldr	r0, [r4, #12]
 800dc0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc10:	4298      	cmp	r0, r3
 800dc12:	bfb8      	it	lt
 800dc14:	4618      	movlt	r0, r3
 800dc16:	e730      	b.n	800da7a <_printf_float+0xc6>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	464a      	mov	r2, r9
 800dc1c:	4631      	mov	r1, r6
 800dc1e:	4628      	mov	r0, r5
 800dc20:	47b8      	blx	r7
 800dc22:	3001      	adds	r0, #1
 800dc24:	f43f af27 	beq.w	800da76 <_printf_float+0xc2>
 800dc28:	f108 0801 	add.w	r8, r8, #1
 800dc2c:	e7e6      	b.n	800dbfc <_printf_float+0x248>
 800dc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	dc39      	bgt.n	800dca8 <_printf_float+0x2f4>
 800dc34:	4a1b      	ldr	r2, [pc, #108]	; (800dca4 <_printf_float+0x2f0>)
 800dc36:	2301      	movs	r3, #1
 800dc38:	4631      	mov	r1, r6
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	47b8      	blx	r7
 800dc3e:	3001      	adds	r0, #1
 800dc40:	f43f af19 	beq.w	800da76 <_printf_float+0xc2>
 800dc44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	d102      	bne.n	800dc52 <_printf_float+0x29e>
 800dc4c:	6823      	ldr	r3, [r4, #0]
 800dc4e:	07d9      	lsls	r1, r3, #31
 800dc50:	d5d8      	bpl.n	800dc04 <_printf_float+0x250>
 800dc52:	ee18 3a10 	vmov	r3, s16
 800dc56:	4652      	mov	r2, sl
 800dc58:	4631      	mov	r1, r6
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	47b8      	blx	r7
 800dc5e:	3001      	adds	r0, #1
 800dc60:	f43f af09 	beq.w	800da76 <_printf_float+0xc2>
 800dc64:	f04f 0900 	mov.w	r9, #0
 800dc68:	f104 0a1a 	add.w	sl, r4, #26
 800dc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc6e:	425b      	negs	r3, r3
 800dc70:	454b      	cmp	r3, r9
 800dc72:	dc01      	bgt.n	800dc78 <_printf_float+0x2c4>
 800dc74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc76:	e792      	b.n	800db9e <_printf_float+0x1ea>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	4652      	mov	r2, sl
 800dc7c:	4631      	mov	r1, r6
 800dc7e:	4628      	mov	r0, r5
 800dc80:	47b8      	blx	r7
 800dc82:	3001      	adds	r0, #1
 800dc84:	f43f aef7 	beq.w	800da76 <_printf_float+0xc2>
 800dc88:	f109 0901 	add.w	r9, r9, #1
 800dc8c:	e7ee      	b.n	800dc6c <_printf_float+0x2b8>
 800dc8e:	bf00      	nop
 800dc90:	7fefffff 	.word	0x7fefffff
 800dc94:	08025940 	.word	0x08025940
 800dc98:	08025944 	.word	0x08025944
 800dc9c:	0802594c 	.word	0x0802594c
 800dca0:	08025948 	.word	0x08025948
 800dca4:	08025950 	.word	0x08025950
 800dca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dcac:	429a      	cmp	r2, r3
 800dcae:	bfa8      	it	ge
 800dcb0:	461a      	movge	r2, r3
 800dcb2:	2a00      	cmp	r2, #0
 800dcb4:	4691      	mov	r9, r2
 800dcb6:	dc37      	bgt.n	800dd28 <_printf_float+0x374>
 800dcb8:	f04f 0b00 	mov.w	fp, #0
 800dcbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcc0:	f104 021a 	add.w	r2, r4, #26
 800dcc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dcc6:	9305      	str	r3, [sp, #20]
 800dcc8:	eba3 0309 	sub.w	r3, r3, r9
 800dccc:	455b      	cmp	r3, fp
 800dcce:	dc33      	bgt.n	800dd38 <_printf_float+0x384>
 800dcd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	db3b      	blt.n	800dd50 <_printf_float+0x39c>
 800dcd8:	6823      	ldr	r3, [r4, #0]
 800dcda:	07da      	lsls	r2, r3, #31
 800dcdc:	d438      	bmi.n	800dd50 <_printf_float+0x39c>
 800dcde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dce0:	9b05      	ldr	r3, [sp, #20]
 800dce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	eba2 0901 	sub.w	r9, r2, r1
 800dcea:	4599      	cmp	r9, r3
 800dcec:	bfa8      	it	ge
 800dcee:	4699      	movge	r9, r3
 800dcf0:	f1b9 0f00 	cmp.w	r9, #0
 800dcf4:	dc35      	bgt.n	800dd62 <_printf_float+0x3ae>
 800dcf6:	f04f 0800 	mov.w	r8, #0
 800dcfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcfe:	f104 0a1a 	add.w	sl, r4, #26
 800dd02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd06:	1a9b      	subs	r3, r3, r2
 800dd08:	eba3 0309 	sub.w	r3, r3, r9
 800dd0c:	4543      	cmp	r3, r8
 800dd0e:	f77f af79 	ble.w	800dc04 <_printf_float+0x250>
 800dd12:	2301      	movs	r3, #1
 800dd14:	4652      	mov	r2, sl
 800dd16:	4631      	mov	r1, r6
 800dd18:	4628      	mov	r0, r5
 800dd1a:	47b8      	blx	r7
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	f43f aeaa 	beq.w	800da76 <_printf_float+0xc2>
 800dd22:	f108 0801 	add.w	r8, r8, #1
 800dd26:	e7ec      	b.n	800dd02 <_printf_float+0x34e>
 800dd28:	4613      	mov	r3, r2
 800dd2a:	4631      	mov	r1, r6
 800dd2c:	4642      	mov	r2, r8
 800dd2e:	4628      	mov	r0, r5
 800dd30:	47b8      	blx	r7
 800dd32:	3001      	adds	r0, #1
 800dd34:	d1c0      	bne.n	800dcb8 <_printf_float+0x304>
 800dd36:	e69e      	b.n	800da76 <_printf_float+0xc2>
 800dd38:	2301      	movs	r3, #1
 800dd3a:	4631      	mov	r1, r6
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	9205      	str	r2, [sp, #20]
 800dd40:	47b8      	blx	r7
 800dd42:	3001      	adds	r0, #1
 800dd44:	f43f ae97 	beq.w	800da76 <_printf_float+0xc2>
 800dd48:	9a05      	ldr	r2, [sp, #20]
 800dd4a:	f10b 0b01 	add.w	fp, fp, #1
 800dd4e:	e7b9      	b.n	800dcc4 <_printf_float+0x310>
 800dd50:	ee18 3a10 	vmov	r3, s16
 800dd54:	4652      	mov	r2, sl
 800dd56:	4631      	mov	r1, r6
 800dd58:	4628      	mov	r0, r5
 800dd5a:	47b8      	blx	r7
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	d1be      	bne.n	800dcde <_printf_float+0x32a>
 800dd60:	e689      	b.n	800da76 <_printf_float+0xc2>
 800dd62:	9a05      	ldr	r2, [sp, #20]
 800dd64:	464b      	mov	r3, r9
 800dd66:	4442      	add	r2, r8
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	47b8      	blx	r7
 800dd6e:	3001      	adds	r0, #1
 800dd70:	d1c1      	bne.n	800dcf6 <_printf_float+0x342>
 800dd72:	e680      	b.n	800da76 <_printf_float+0xc2>
 800dd74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd76:	2a01      	cmp	r2, #1
 800dd78:	dc01      	bgt.n	800dd7e <_printf_float+0x3ca>
 800dd7a:	07db      	lsls	r3, r3, #31
 800dd7c:	d538      	bpl.n	800ddf0 <_printf_float+0x43c>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	4642      	mov	r2, r8
 800dd82:	4631      	mov	r1, r6
 800dd84:	4628      	mov	r0, r5
 800dd86:	47b8      	blx	r7
 800dd88:	3001      	adds	r0, #1
 800dd8a:	f43f ae74 	beq.w	800da76 <_printf_float+0xc2>
 800dd8e:	ee18 3a10 	vmov	r3, s16
 800dd92:	4652      	mov	r2, sl
 800dd94:	4631      	mov	r1, r6
 800dd96:	4628      	mov	r0, r5
 800dd98:	47b8      	blx	r7
 800dd9a:	3001      	adds	r0, #1
 800dd9c:	f43f ae6b 	beq.w	800da76 <_printf_float+0xc2>
 800dda0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dda4:	2200      	movs	r2, #0
 800dda6:	2300      	movs	r3, #0
 800dda8:	f7f2 fea6 	bl	8000af8 <__aeabi_dcmpeq>
 800ddac:	b9d8      	cbnz	r0, 800dde6 <_printf_float+0x432>
 800ddae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb0:	f108 0201 	add.w	r2, r8, #1
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	4631      	mov	r1, r6
 800ddb8:	4628      	mov	r0, r5
 800ddba:	47b8      	blx	r7
 800ddbc:	3001      	adds	r0, #1
 800ddbe:	d10e      	bne.n	800ddde <_printf_float+0x42a>
 800ddc0:	e659      	b.n	800da76 <_printf_float+0xc2>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	4652      	mov	r2, sl
 800ddc6:	4631      	mov	r1, r6
 800ddc8:	4628      	mov	r0, r5
 800ddca:	47b8      	blx	r7
 800ddcc:	3001      	adds	r0, #1
 800ddce:	f43f ae52 	beq.w	800da76 <_printf_float+0xc2>
 800ddd2:	f108 0801 	add.w	r8, r8, #1
 800ddd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddd8:	3b01      	subs	r3, #1
 800ddda:	4543      	cmp	r3, r8
 800dddc:	dcf1      	bgt.n	800ddc2 <_printf_float+0x40e>
 800ddde:	464b      	mov	r3, r9
 800dde0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dde4:	e6dc      	b.n	800dba0 <_printf_float+0x1ec>
 800dde6:	f04f 0800 	mov.w	r8, #0
 800ddea:	f104 0a1a 	add.w	sl, r4, #26
 800ddee:	e7f2      	b.n	800ddd6 <_printf_float+0x422>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	4642      	mov	r2, r8
 800ddf4:	e7df      	b.n	800ddb6 <_printf_float+0x402>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	464a      	mov	r2, r9
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	47b8      	blx	r7
 800de00:	3001      	adds	r0, #1
 800de02:	f43f ae38 	beq.w	800da76 <_printf_float+0xc2>
 800de06:	f108 0801 	add.w	r8, r8, #1
 800de0a:	68e3      	ldr	r3, [r4, #12]
 800de0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de0e:	1a5b      	subs	r3, r3, r1
 800de10:	4543      	cmp	r3, r8
 800de12:	dcf0      	bgt.n	800ddf6 <_printf_float+0x442>
 800de14:	e6fa      	b.n	800dc0c <_printf_float+0x258>
 800de16:	f04f 0800 	mov.w	r8, #0
 800de1a:	f104 0919 	add.w	r9, r4, #25
 800de1e:	e7f4      	b.n	800de0a <_printf_float+0x456>

0800de20 <_printf_common>:
 800de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de24:	4616      	mov	r6, r2
 800de26:	4699      	mov	r9, r3
 800de28:	688a      	ldr	r2, [r1, #8]
 800de2a:	690b      	ldr	r3, [r1, #16]
 800de2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de30:	4293      	cmp	r3, r2
 800de32:	bfb8      	it	lt
 800de34:	4613      	movlt	r3, r2
 800de36:	6033      	str	r3, [r6, #0]
 800de38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de3c:	4607      	mov	r7, r0
 800de3e:	460c      	mov	r4, r1
 800de40:	b10a      	cbz	r2, 800de46 <_printf_common+0x26>
 800de42:	3301      	adds	r3, #1
 800de44:	6033      	str	r3, [r6, #0]
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	0699      	lsls	r1, r3, #26
 800de4a:	bf42      	ittt	mi
 800de4c:	6833      	ldrmi	r3, [r6, #0]
 800de4e:	3302      	addmi	r3, #2
 800de50:	6033      	strmi	r3, [r6, #0]
 800de52:	6825      	ldr	r5, [r4, #0]
 800de54:	f015 0506 	ands.w	r5, r5, #6
 800de58:	d106      	bne.n	800de68 <_printf_common+0x48>
 800de5a:	f104 0a19 	add.w	sl, r4, #25
 800de5e:	68e3      	ldr	r3, [r4, #12]
 800de60:	6832      	ldr	r2, [r6, #0]
 800de62:	1a9b      	subs	r3, r3, r2
 800de64:	42ab      	cmp	r3, r5
 800de66:	dc26      	bgt.n	800deb6 <_printf_common+0x96>
 800de68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de6c:	1e13      	subs	r3, r2, #0
 800de6e:	6822      	ldr	r2, [r4, #0]
 800de70:	bf18      	it	ne
 800de72:	2301      	movne	r3, #1
 800de74:	0692      	lsls	r2, r2, #26
 800de76:	d42b      	bmi.n	800ded0 <_printf_common+0xb0>
 800de78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de7c:	4649      	mov	r1, r9
 800de7e:	4638      	mov	r0, r7
 800de80:	47c0      	blx	r8
 800de82:	3001      	adds	r0, #1
 800de84:	d01e      	beq.n	800dec4 <_printf_common+0xa4>
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	68e5      	ldr	r5, [r4, #12]
 800de8a:	6832      	ldr	r2, [r6, #0]
 800de8c:	f003 0306 	and.w	r3, r3, #6
 800de90:	2b04      	cmp	r3, #4
 800de92:	bf08      	it	eq
 800de94:	1aad      	subeq	r5, r5, r2
 800de96:	68a3      	ldr	r3, [r4, #8]
 800de98:	6922      	ldr	r2, [r4, #16]
 800de9a:	bf0c      	ite	eq
 800de9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dea0:	2500      	movne	r5, #0
 800dea2:	4293      	cmp	r3, r2
 800dea4:	bfc4      	itt	gt
 800dea6:	1a9b      	subgt	r3, r3, r2
 800dea8:	18ed      	addgt	r5, r5, r3
 800deaa:	2600      	movs	r6, #0
 800deac:	341a      	adds	r4, #26
 800deae:	42b5      	cmp	r5, r6
 800deb0:	d11a      	bne.n	800dee8 <_printf_common+0xc8>
 800deb2:	2000      	movs	r0, #0
 800deb4:	e008      	b.n	800dec8 <_printf_common+0xa8>
 800deb6:	2301      	movs	r3, #1
 800deb8:	4652      	mov	r2, sl
 800deba:	4649      	mov	r1, r9
 800debc:	4638      	mov	r0, r7
 800debe:	47c0      	blx	r8
 800dec0:	3001      	adds	r0, #1
 800dec2:	d103      	bne.n	800decc <_printf_common+0xac>
 800dec4:	f04f 30ff 	mov.w	r0, #4294967295
 800dec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800decc:	3501      	adds	r5, #1
 800dece:	e7c6      	b.n	800de5e <_printf_common+0x3e>
 800ded0:	18e1      	adds	r1, r4, r3
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	2030      	movs	r0, #48	; 0x30
 800ded6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800deda:	4422      	add	r2, r4
 800dedc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dee4:	3302      	adds	r3, #2
 800dee6:	e7c7      	b.n	800de78 <_printf_common+0x58>
 800dee8:	2301      	movs	r3, #1
 800deea:	4622      	mov	r2, r4
 800deec:	4649      	mov	r1, r9
 800deee:	4638      	mov	r0, r7
 800def0:	47c0      	blx	r8
 800def2:	3001      	adds	r0, #1
 800def4:	d0e6      	beq.n	800dec4 <_printf_common+0xa4>
 800def6:	3601      	adds	r6, #1
 800def8:	e7d9      	b.n	800deae <_printf_common+0x8e>
	...

0800defc <_printf_i>:
 800defc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df00:	460c      	mov	r4, r1
 800df02:	4691      	mov	r9, r2
 800df04:	7e27      	ldrb	r7, [r4, #24]
 800df06:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df08:	2f78      	cmp	r7, #120	; 0x78
 800df0a:	4680      	mov	r8, r0
 800df0c:	469a      	mov	sl, r3
 800df0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df12:	d807      	bhi.n	800df24 <_printf_i+0x28>
 800df14:	2f62      	cmp	r7, #98	; 0x62
 800df16:	d80a      	bhi.n	800df2e <_printf_i+0x32>
 800df18:	2f00      	cmp	r7, #0
 800df1a:	f000 80d8 	beq.w	800e0ce <_printf_i+0x1d2>
 800df1e:	2f58      	cmp	r7, #88	; 0x58
 800df20:	f000 80a3 	beq.w	800e06a <_printf_i+0x16e>
 800df24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df2c:	e03a      	b.n	800dfa4 <_printf_i+0xa8>
 800df2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df32:	2b15      	cmp	r3, #21
 800df34:	d8f6      	bhi.n	800df24 <_printf_i+0x28>
 800df36:	a001      	add	r0, pc, #4	; (adr r0, 800df3c <_printf_i+0x40>)
 800df38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800df3c:	0800df95 	.word	0x0800df95
 800df40:	0800dfa9 	.word	0x0800dfa9
 800df44:	0800df25 	.word	0x0800df25
 800df48:	0800df25 	.word	0x0800df25
 800df4c:	0800df25 	.word	0x0800df25
 800df50:	0800df25 	.word	0x0800df25
 800df54:	0800dfa9 	.word	0x0800dfa9
 800df58:	0800df25 	.word	0x0800df25
 800df5c:	0800df25 	.word	0x0800df25
 800df60:	0800df25 	.word	0x0800df25
 800df64:	0800df25 	.word	0x0800df25
 800df68:	0800e0b5 	.word	0x0800e0b5
 800df6c:	0800dfd9 	.word	0x0800dfd9
 800df70:	0800e097 	.word	0x0800e097
 800df74:	0800df25 	.word	0x0800df25
 800df78:	0800df25 	.word	0x0800df25
 800df7c:	0800e0d7 	.word	0x0800e0d7
 800df80:	0800df25 	.word	0x0800df25
 800df84:	0800dfd9 	.word	0x0800dfd9
 800df88:	0800df25 	.word	0x0800df25
 800df8c:	0800df25 	.word	0x0800df25
 800df90:	0800e09f 	.word	0x0800e09f
 800df94:	680b      	ldr	r3, [r1, #0]
 800df96:	1d1a      	adds	r2, r3, #4
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	600a      	str	r2, [r1, #0]
 800df9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dfa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e0a3      	b.n	800e0f0 <_printf_i+0x1f4>
 800dfa8:	6825      	ldr	r5, [r4, #0]
 800dfaa:	6808      	ldr	r0, [r1, #0]
 800dfac:	062e      	lsls	r6, r5, #24
 800dfae:	f100 0304 	add.w	r3, r0, #4
 800dfb2:	d50a      	bpl.n	800dfca <_printf_i+0xce>
 800dfb4:	6805      	ldr	r5, [r0, #0]
 800dfb6:	600b      	str	r3, [r1, #0]
 800dfb8:	2d00      	cmp	r5, #0
 800dfba:	da03      	bge.n	800dfc4 <_printf_i+0xc8>
 800dfbc:	232d      	movs	r3, #45	; 0x2d
 800dfbe:	426d      	negs	r5, r5
 800dfc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfc4:	485e      	ldr	r0, [pc, #376]	; (800e140 <_printf_i+0x244>)
 800dfc6:	230a      	movs	r3, #10
 800dfc8:	e019      	b.n	800dffe <_printf_i+0x102>
 800dfca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dfce:	6805      	ldr	r5, [r0, #0]
 800dfd0:	600b      	str	r3, [r1, #0]
 800dfd2:	bf18      	it	ne
 800dfd4:	b22d      	sxthne	r5, r5
 800dfd6:	e7ef      	b.n	800dfb8 <_printf_i+0xbc>
 800dfd8:	680b      	ldr	r3, [r1, #0]
 800dfda:	6825      	ldr	r5, [r4, #0]
 800dfdc:	1d18      	adds	r0, r3, #4
 800dfde:	6008      	str	r0, [r1, #0]
 800dfe0:	0628      	lsls	r0, r5, #24
 800dfe2:	d501      	bpl.n	800dfe8 <_printf_i+0xec>
 800dfe4:	681d      	ldr	r5, [r3, #0]
 800dfe6:	e002      	b.n	800dfee <_printf_i+0xf2>
 800dfe8:	0669      	lsls	r1, r5, #25
 800dfea:	d5fb      	bpl.n	800dfe4 <_printf_i+0xe8>
 800dfec:	881d      	ldrh	r5, [r3, #0]
 800dfee:	4854      	ldr	r0, [pc, #336]	; (800e140 <_printf_i+0x244>)
 800dff0:	2f6f      	cmp	r7, #111	; 0x6f
 800dff2:	bf0c      	ite	eq
 800dff4:	2308      	moveq	r3, #8
 800dff6:	230a      	movne	r3, #10
 800dff8:	2100      	movs	r1, #0
 800dffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dffe:	6866      	ldr	r6, [r4, #4]
 800e000:	60a6      	str	r6, [r4, #8]
 800e002:	2e00      	cmp	r6, #0
 800e004:	bfa2      	ittt	ge
 800e006:	6821      	ldrge	r1, [r4, #0]
 800e008:	f021 0104 	bicge.w	r1, r1, #4
 800e00c:	6021      	strge	r1, [r4, #0]
 800e00e:	b90d      	cbnz	r5, 800e014 <_printf_i+0x118>
 800e010:	2e00      	cmp	r6, #0
 800e012:	d04d      	beq.n	800e0b0 <_printf_i+0x1b4>
 800e014:	4616      	mov	r6, r2
 800e016:	fbb5 f1f3 	udiv	r1, r5, r3
 800e01a:	fb03 5711 	mls	r7, r3, r1, r5
 800e01e:	5dc7      	ldrb	r7, [r0, r7]
 800e020:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e024:	462f      	mov	r7, r5
 800e026:	42bb      	cmp	r3, r7
 800e028:	460d      	mov	r5, r1
 800e02a:	d9f4      	bls.n	800e016 <_printf_i+0x11a>
 800e02c:	2b08      	cmp	r3, #8
 800e02e:	d10b      	bne.n	800e048 <_printf_i+0x14c>
 800e030:	6823      	ldr	r3, [r4, #0]
 800e032:	07df      	lsls	r7, r3, #31
 800e034:	d508      	bpl.n	800e048 <_printf_i+0x14c>
 800e036:	6923      	ldr	r3, [r4, #16]
 800e038:	6861      	ldr	r1, [r4, #4]
 800e03a:	4299      	cmp	r1, r3
 800e03c:	bfde      	ittt	le
 800e03e:	2330      	movle	r3, #48	; 0x30
 800e040:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e044:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e048:	1b92      	subs	r2, r2, r6
 800e04a:	6122      	str	r2, [r4, #16]
 800e04c:	f8cd a000 	str.w	sl, [sp]
 800e050:	464b      	mov	r3, r9
 800e052:	aa03      	add	r2, sp, #12
 800e054:	4621      	mov	r1, r4
 800e056:	4640      	mov	r0, r8
 800e058:	f7ff fee2 	bl	800de20 <_printf_common>
 800e05c:	3001      	adds	r0, #1
 800e05e:	d14c      	bne.n	800e0fa <_printf_i+0x1fe>
 800e060:	f04f 30ff 	mov.w	r0, #4294967295
 800e064:	b004      	add	sp, #16
 800e066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e06a:	4835      	ldr	r0, [pc, #212]	; (800e140 <_printf_i+0x244>)
 800e06c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e070:	6823      	ldr	r3, [r4, #0]
 800e072:	680e      	ldr	r6, [r1, #0]
 800e074:	061f      	lsls	r7, r3, #24
 800e076:	f856 5b04 	ldr.w	r5, [r6], #4
 800e07a:	600e      	str	r6, [r1, #0]
 800e07c:	d514      	bpl.n	800e0a8 <_printf_i+0x1ac>
 800e07e:	07d9      	lsls	r1, r3, #31
 800e080:	bf44      	itt	mi
 800e082:	f043 0320 	orrmi.w	r3, r3, #32
 800e086:	6023      	strmi	r3, [r4, #0]
 800e088:	b91d      	cbnz	r5, 800e092 <_printf_i+0x196>
 800e08a:	6823      	ldr	r3, [r4, #0]
 800e08c:	f023 0320 	bic.w	r3, r3, #32
 800e090:	6023      	str	r3, [r4, #0]
 800e092:	2310      	movs	r3, #16
 800e094:	e7b0      	b.n	800dff8 <_printf_i+0xfc>
 800e096:	6823      	ldr	r3, [r4, #0]
 800e098:	f043 0320 	orr.w	r3, r3, #32
 800e09c:	6023      	str	r3, [r4, #0]
 800e09e:	2378      	movs	r3, #120	; 0x78
 800e0a0:	4828      	ldr	r0, [pc, #160]	; (800e144 <_printf_i+0x248>)
 800e0a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e0a6:	e7e3      	b.n	800e070 <_printf_i+0x174>
 800e0a8:	065e      	lsls	r6, r3, #25
 800e0aa:	bf48      	it	mi
 800e0ac:	b2ad      	uxthmi	r5, r5
 800e0ae:	e7e6      	b.n	800e07e <_printf_i+0x182>
 800e0b0:	4616      	mov	r6, r2
 800e0b2:	e7bb      	b.n	800e02c <_printf_i+0x130>
 800e0b4:	680b      	ldr	r3, [r1, #0]
 800e0b6:	6826      	ldr	r6, [r4, #0]
 800e0b8:	6960      	ldr	r0, [r4, #20]
 800e0ba:	1d1d      	adds	r5, r3, #4
 800e0bc:	600d      	str	r5, [r1, #0]
 800e0be:	0635      	lsls	r5, r6, #24
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	d501      	bpl.n	800e0c8 <_printf_i+0x1cc>
 800e0c4:	6018      	str	r0, [r3, #0]
 800e0c6:	e002      	b.n	800e0ce <_printf_i+0x1d2>
 800e0c8:	0671      	lsls	r1, r6, #25
 800e0ca:	d5fb      	bpl.n	800e0c4 <_printf_i+0x1c8>
 800e0cc:	8018      	strh	r0, [r3, #0]
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	6123      	str	r3, [r4, #16]
 800e0d2:	4616      	mov	r6, r2
 800e0d4:	e7ba      	b.n	800e04c <_printf_i+0x150>
 800e0d6:	680b      	ldr	r3, [r1, #0]
 800e0d8:	1d1a      	adds	r2, r3, #4
 800e0da:	600a      	str	r2, [r1, #0]
 800e0dc:	681e      	ldr	r6, [r3, #0]
 800e0de:	6862      	ldr	r2, [r4, #4]
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	f7f2 f894 	bl	8000210 <memchr>
 800e0e8:	b108      	cbz	r0, 800e0ee <_printf_i+0x1f2>
 800e0ea:	1b80      	subs	r0, r0, r6
 800e0ec:	6060      	str	r0, [r4, #4]
 800e0ee:	6863      	ldr	r3, [r4, #4]
 800e0f0:	6123      	str	r3, [r4, #16]
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0f8:	e7a8      	b.n	800e04c <_printf_i+0x150>
 800e0fa:	6923      	ldr	r3, [r4, #16]
 800e0fc:	4632      	mov	r2, r6
 800e0fe:	4649      	mov	r1, r9
 800e100:	4640      	mov	r0, r8
 800e102:	47d0      	blx	sl
 800e104:	3001      	adds	r0, #1
 800e106:	d0ab      	beq.n	800e060 <_printf_i+0x164>
 800e108:	6823      	ldr	r3, [r4, #0]
 800e10a:	079b      	lsls	r3, r3, #30
 800e10c:	d413      	bmi.n	800e136 <_printf_i+0x23a>
 800e10e:	68e0      	ldr	r0, [r4, #12]
 800e110:	9b03      	ldr	r3, [sp, #12]
 800e112:	4298      	cmp	r0, r3
 800e114:	bfb8      	it	lt
 800e116:	4618      	movlt	r0, r3
 800e118:	e7a4      	b.n	800e064 <_printf_i+0x168>
 800e11a:	2301      	movs	r3, #1
 800e11c:	4632      	mov	r2, r6
 800e11e:	4649      	mov	r1, r9
 800e120:	4640      	mov	r0, r8
 800e122:	47d0      	blx	sl
 800e124:	3001      	adds	r0, #1
 800e126:	d09b      	beq.n	800e060 <_printf_i+0x164>
 800e128:	3501      	adds	r5, #1
 800e12a:	68e3      	ldr	r3, [r4, #12]
 800e12c:	9903      	ldr	r1, [sp, #12]
 800e12e:	1a5b      	subs	r3, r3, r1
 800e130:	42ab      	cmp	r3, r5
 800e132:	dcf2      	bgt.n	800e11a <_printf_i+0x21e>
 800e134:	e7eb      	b.n	800e10e <_printf_i+0x212>
 800e136:	2500      	movs	r5, #0
 800e138:	f104 0619 	add.w	r6, r4, #25
 800e13c:	e7f5      	b.n	800e12a <_printf_i+0x22e>
 800e13e:	bf00      	nop
 800e140:	08025952 	.word	0x08025952
 800e144:	08025963 	.word	0x08025963

0800e148 <_scanf_float>:
 800e148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14c:	b087      	sub	sp, #28
 800e14e:	4617      	mov	r7, r2
 800e150:	9303      	str	r3, [sp, #12]
 800e152:	688b      	ldr	r3, [r1, #8]
 800e154:	1e5a      	subs	r2, r3, #1
 800e156:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e15a:	bf83      	ittte	hi
 800e15c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e160:	195b      	addhi	r3, r3, r5
 800e162:	9302      	strhi	r3, [sp, #8]
 800e164:	2300      	movls	r3, #0
 800e166:	bf86      	itte	hi
 800e168:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e16c:	608b      	strhi	r3, [r1, #8]
 800e16e:	9302      	strls	r3, [sp, #8]
 800e170:	680b      	ldr	r3, [r1, #0]
 800e172:	468b      	mov	fp, r1
 800e174:	2500      	movs	r5, #0
 800e176:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e17a:	f84b 3b1c 	str.w	r3, [fp], #28
 800e17e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e182:	4680      	mov	r8, r0
 800e184:	460c      	mov	r4, r1
 800e186:	465e      	mov	r6, fp
 800e188:	46aa      	mov	sl, r5
 800e18a:	46a9      	mov	r9, r5
 800e18c:	9501      	str	r5, [sp, #4]
 800e18e:	68a2      	ldr	r2, [r4, #8]
 800e190:	b152      	cbz	r2, 800e1a8 <_scanf_float+0x60>
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	2b4e      	cmp	r3, #78	; 0x4e
 800e198:	d864      	bhi.n	800e264 <_scanf_float+0x11c>
 800e19a:	2b40      	cmp	r3, #64	; 0x40
 800e19c:	d83c      	bhi.n	800e218 <_scanf_float+0xd0>
 800e19e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e1a2:	b2c8      	uxtb	r0, r1
 800e1a4:	280e      	cmp	r0, #14
 800e1a6:	d93a      	bls.n	800e21e <_scanf_float+0xd6>
 800e1a8:	f1b9 0f00 	cmp.w	r9, #0
 800e1ac:	d003      	beq.n	800e1b6 <_scanf_float+0x6e>
 800e1ae:	6823      	ldr	r3, [r4, #0]
 800e1b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1b4:	6023      	str	r3, [r4, #0]
 800e1b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1ba:	f1ba 0f01 	cmp.w	sl, #1
 800e1be:	f200 8113 	bhi.w	800e3e8 <_scanf_float+0x2a0>
 800e1c2:	455e      	cmp	r6, fp
 800e1c4:	f200 8105 	bhi.w	800e3d2 <_scanf_float+0x28a>
 800e1c8:	2501      	movs	r5, #1
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	b007      	add	sp, #28
 800e1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e1d6:	2a0d      	cmp	r2, #13
 800e1d8:	d8e6      	bhi.n	800e1a8 <_scanf_float+0x60>
 800e1da:	a101      	add	r1, pc, #4	; (adr r1, 800e1e0 <_scanf_float+0x98>)
 800e1dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e1e0:	0800e31f 	.word	0x0800e31f
 800e1e4:	0800e1a9 	.word	0x0800e1a9
 800e1e8:	0800e1a9 	.word	0x0800e1a9
 800e1ec:	0800e1a9 	.word	0x0800e1a9
 800e1f0:	0800e37f 	.word	0x0800e37f
 800e1f4:	0800e357 	.word	0x0800e357
 800e1f8:	0800e1a9 	.word	0x0800e1a9
 800e1fc:	0800e1a9 	.word	0x0800e1a9
 800e200:	0800e32d 	.word	0x0800e32d
 800e204:	0800e1a9 	.word	0x0800e1a9
 800e208:	0800e1a9 	.word	0x0800e1a9
 800e20c:	0800e1a9 	.word	0x0800e1a9
 800e210:	0800e1a9 	.word	0x0800e1a9
 800e214:	0800e2e5 	.word	0x0800e2e5
 800e218:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e21c:	e7db      	b.n	800e1d6 <_scanf_float+0x8e>
 800e21e:	290e      	cmp	r1, #14
 800e220:	d8c2      	bhi.n	800e1a8 <_scanf_float+0x60>
 800e222:	a001      	add	r0, pc, #4	; (adr r0, 800e228 <_scanf_float+0xe0>)
 800e224:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e228:	0800e2d7 	.word	0x0800e2d7
 800e22c:	0800e1a9 	.word	0x0800e1a9
 800e230:	0800e2d7 	.word	0x0800e2d7
 800e234:	0800e36b 	.word	0x0800e36b
 800e238:	0800e1a9 	.word	0x0800e1a9
 800e23c:	0800e285 	.word	0x0800e285
 800e240:	0800e2c1 	.word	0x0800e2c1
 800e244:	0800e2c1 	.word	0x0800e2c1
 800e248:	0800e2c1 	.word	0x0800e2c1
 800e24c:	0800e2c1 	.word	0x0800e2c1
 800e250:	0800e2c1 	.word	0x0800e2c1
 800e254:	0800e2c1 	.word	0x0800e2c1
 800e258:	0800e2c1 	.word	0x0800e2c1
 800e25c:	0800e2c1 	.word	0x0800e2c1
 800e260:	0800e2c1 	.word	0x0800e2c1
 800e264:	2b6e      	cmp	r3, #110	; 0x6e
 800e266:	d809      	bhi.n	800e27c <_scanf_float+0x134>
 800e268:	2b60      	cmp	r3, #96	; 0x60
 800e26a:	d8b2      	bhi.n	800e1d2 <_scanf_float+0x8a>
 800e26c:	2b54      	cmp	r3, #84	; 0x54
 800e26e:	d077      	beq.n	800e360 <_scanf_float+0x218>
 800e270:	2b59      	cmp	r3, #89	; 0x59
 800e272:	d199      	bne.n	800e1a8 <_scanf_float+0x60>
 800e274:	2d07      	cmp	r5, #7
 800e276:	d197      	bne.n	800e1a8 <_scanf_float+0x60>
 800e278:	2508      	movs	r5, #8
 800e27a:	e029      	b.n	800e2d0 <_scanf_float+0x188>
 800e27c:	2b74      	cmp	r3, #116	; 0x74
 800e27e:	d06f      	beq.n	800e360 <_scanf_float+0x218>
 800e280:	2b79      	cmp	r3, #121	; 0x79
 800e282:	e7f6      	b.n	800e272 <_scanf_float+0x12a>
 800e284:	6821      	ldr	r1, [r4, #0]
 800e286:	05c8      	lsls	r0, r1, #23
 800e288:	d51a      	bpl.n	800e2c0 <_scanf_float+0x178>
 800e28a:	9b02      	ldr	r3, [sp, #8]
 800e28c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e290:	6021      	str	r1, [r4, #0]
 800e292:	f109 0901 	add.w	r9, r9, #1
 800e296:	b11b      	cbz	r3, 800e2a0 <_scanf_float+0x158>
 800e298:	3b01      	subs	r3, #1
 800e29a:	3201      	adds	r2, #1
 800e29c:	9302      	str	r3, [sp, #8]
 800e29e:	60a2      	str	r2, [r4, #8]
 800e2a0:	68a3      	ldr	r3, [r4, #8]
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	60a3      	str	r3, [r4, #8]
 800e2a6:	6923      	ldr	r3, [r4, #16]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	6123      	str	r3, [r4, #16]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	607b      	str	r3, [r7, #4]
 800e2b4:	f340 8084 	ble.w	800e3c0 <_scanf_float+0x278>
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	603b      	str	r3, [r7, #0]
 800e2be:	e766      	b.n	800e18e <_scanf_float+0x46>
 800e2c0:	eb1a 0f05 	cmn.w	sl, r5
 800e2c4:	f47f af70 	bne.w	800e1a8 <_scanf_float+0x60>
 800e2c8:	6822      	ldr	r2, [r4, #0]
 800e2ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e2ce:	6022      	str	r2, [r4, #0]
 800e2d0:	f806 3b01 	strb.w	r3, [r6], #1
 800e2d4:	e7e4      	b.n	800e2a0 <_scanf_float+0x158>
 800e2d6:	6822      	ldr	r2, [r4, #0]
 800e2d8:	0610      	lsls	r0, r2, #24
 800e2da:	f57f af65 	bpl.w	800e1a8 <_scanf_float+0x60>
 800e2de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2e2:	e7f4      	b.n	800e2ce <_scanf_float+0x186>
 800e2e4:	f1ba 0f00 	cmp.w	sl, #0
 800e2e8:	d10e      	bne.n	800e308 <_scanf_float+0x1c0>
 800e2ea:	f1b9 0f00 	cmp.w	r9, #0
 800e2ee:	d10e      	bne.n	800e30e <_scanf_float+0x1c6>
 800e2f0:	6822      	ldr	r2, [r4, #0]
 800e2f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e2f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e2fa:	d108      	bne.n	800e30e <_scanf_float+0x1c6>
 800e2fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e300:	6022      	str	r2, [r4, #0]
 800e302:	f04f 0a01 	mov.w	sl, #1
 800e306:	e7e3      	b.n	800e2d0 <_scanf_float+0x188>
 800e308:	f1ba 0f02 	cmp.w	sl, #2
 800e30c:	d055      	beq.n	800e3ba <_scanf_float+0x272>
 800e30e:	2d01      	cmp	r5, #1
 800e310:	d002      	beq.n	800e318 <_scanf_float+0x1d0>
 800e312:	2d04      	cmp	r5, #4
 800e314:	f47f af48 	bne.w	800e1a8 <_scanf_float+0x60>
 800e318:	3501      	adds	r5, #1
 800e31a:	b2ed      	uxtb	r5, r5
 800e31c:	e7d8      	b.n	800e2d0 <_scanf_float+0x188>
 800e31e:	f1ba 0f01 	cmp.w	sl, #1
 800e322:	f47f af41 	bne.w	800e1a8 <_scanf_float+0x60>
 800e326:	f04f 0a02 	mov.w	sl, #2
 800e32a:	e7d1      	b.n	800e2d0 <_scanf_float+0x188>
 800e32c:	b97d      	cbnz	r5, 800e34e <_scanf_float+0x206>
 800e32e:	f1b9 0f00 	cmp.w	r9, #0
 800e332:	f47f af3c 	bne.w	800e1ae <_scanf_float+0x66>
 800e336:	6822      	ldr	r2, [r4, #0]
 800e338:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e33c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e340:	f47f af39 	bne.w	800e1b6 <_scanf_float+0x6e>
 800e344:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e348:	6022      	str	r2, [r4, #0]
 800e34a:	2501      	movs	r5, #1
 800e34c:	e7c0      	b.n	800e2d0 <_scanf_float+0x188>
 800e34e:	2d03      	cmp	r5, #3
 800e350:	d0e2      	beq.n	800e318 <_scanf_float+0x1d0>
 800e352:	2d05      	cmp	r5, #5
 800e354:	e7de      	b.n	800e314 <_scanf_float+0x1cc>
 800e356:	2d02      	cmp	r5, #2
 800e358:	f47f af26 	bne.w	800e1a8 <_scanf_float+0x60>
 800e35c:	2503      	movs	r5, #3
 800e35e:	e7b7      	b.n	800e2d0 <_scanf_float+0x188>
 800e360:	2d06      	cmp	r5, #6
 800e362:	f47f af21 	bne.w	800e1a8 <_scanf_float+0x60>
 800e366:	2507      	movs	r5, #7
 800e368:	e7b2      	b.n	800e2d0 <_scanf_float+0x188>
 800e36a:	6822      	ldr	r2, [r4, #0]
 800e36c:	0591      	lsls	r1, r2, #22
 800e36e:	f57f af1b 	bpl.w	800e1a8 <_scanf_float+0x60>
 800e372:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e376:	6022      	str	r2, [r4, #0]
 800e378:	f8cd 9004 	str.w	r9, [sp, #4]
 800e37c:	e7a8      	b.n	800e2d0 <_scanf_float+0x188>
 800e37e:	6822      	ldr	r2, [r4, #0]
 800e380:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e384:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e388:	d006      	beq.n	800e398 <_scanf_float+0x250>
 800e38a:	0550      	lsls	r0, r2, #21
 800e38c:	f57f af0c 	bpl.w	800e1a8 <_scanf_float+0x60>
 800e390:	f1b9 0f00 	cmp.w	r9, #0
 800e394:	f43f af0f 	beq.w	800e1b6 <_scanf_float+0x6e>
 800e398:	0591      	lsls	r1, r2, #22
 800e39a:	bf58      	it	pl
 800e39c:	9901      	ldrpl	r1, [sp, #4]
 800e39e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e3a2:	bf58      	it	pl
 800e3a4:	eba9 0101 	subpl.w	r1, r9, r1
 800e3a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e3ac:	bf58      	it	pl
 800e3ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e3b2:	6022      	str	r2, [r4, #0]
 800e3b4:	f04f 0900 	mov.w	r9, #0
 800e3b8:	e78a      	b.n	800e2d0 <_scanf_float+0x188>
 800e3ba:	f04f 0a03 	mov.w	sl, #3
 800e3be:	e787      	b.n	800e2d0 <_scanf_float+0x188>
 800e3c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e3c4:	4639      	mov	r1, r7
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	4798      	blx	r3
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	f43f aedf 	beq.w	800e18e <_scanf_float+0x46>
 800e3d0:	e6ea      	b.n	800e1a8 <_scanf_float+0x60>
 800e3d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e3da:	463a      	mov	r2, r7
 800e3dc:	4640      	mov	r0, r8
 800e3de:	4798      	blx	r3
 800e3e0:	6923      	ldr	r3, [r4, #16]
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	6123      	str	r3, [r4, #16]
 800e3e6:	e6ec      	b.n	800e1c2 <_scanf_float+0x7a>
 800e3e8:	1e6b      	subs	r3, r5, #1
 800e3ea:	2b06      	cmp	r3, #6
 800e3ec:	d825      	bhi.n	800e43a <_scanf_float+0x2f2>
 800e3ee:	2d02      	cmp	r5, #2
 800e3f0:	d836      	bhi.n	800e460 <_scanf_float+0x318>
 800e3f2:	455e      	cmp	r6, fp
 800e3f4:	f67f aee8 	bls.w	800e1c8 <_scanf_float+0x80>
 800e3f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e400:	463a      	mov	r2, r7
 800e402:	4640      	mov	r0, r8
 800e404:	4798      	blx	r3
 800e406:	6923      	ldr	r3, [r4, #16]
 800e408:	3b01      	subs	r3, #1
 800e40a:	6123      	str	r3, [r4, #16]
 800e40c:	e7f1      	b.n	800e3f2 <_scanf_float+0x2aa>
 800e40e:	9802      	ldr	r0, [sp, #8]
 800e410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e414:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e418:	9002      	str	r0, [sp, #8]
 800e41a:	463a      	mov	r2, r7
 800e41c:	4640      	mov	r0, r8
 800e41e:	4798      	blx	r3
 800e420:	6923      	ldr	r3, [r4, #16]
 800e422:	3b01      	subs	r3, #1
 800e424:	6123      	str	r3, [r4, #16]
 800e426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e42a:	fa5f fa8a 	uxtb.w	sl, sl
 800e42e:	f1ba 0f02 	cmp.w	sl, #2
 800e432:	d1ec      	bne.n	800e40e <_scanf_float+0x2c6>
 800e434:	3d03      	subs	r5, #3
 800e436:	b2ed      	uxtb	r5, r5
 800e438:	1b76      	subs	r6, r6, r5
 800e43a:	6823      	ldr	r3, [r4, #0]
 800e43c:	05da      	lsls	r2, r3, #23
 800e43e:	d52f      	bpl.n	800e4a0 <_scanf_float+0x358>
 800e440:	055b      	lsls	r3, r3, #21
 800e442:	d510      	bpl.n	800e466 <_scanf_float+0x31e>
 800e444:	455e      	cmp	r6, fp
 800e446:	f67f aebf 	bls.w	800e1c8 <_scanf_float+0x80>
 800e44a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e44e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e452:	463a      	mov	r2, r7
 800e454:	4640      	mov	r0, r8
 800e456:	4798      	blx	r3
 800e458:	6923      	ldr	r3, [r4, #16]
 800e45a:	3b01      	subs	r3, #1
 800e45c:	6123      	str	r3, [r4, #16]
 800e45e:	e7f1      	b.n	800e444 <_scanf_float+0x2fc>
 800e460:	46aa      	mov	sl, r5
 800e462:	9602      	str	r6, [sp, #8]
 800e464:	e7df      	b.n	800e426 <_scanf_float+0x2de>
 800e466:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e46a:	6923      	ldr	r3, [r4, #16]
 800e46c:	2965      	cmp	r1, #101	; 0x65
 800e46e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e472:	f106 35ff 	add.w	r5, r6, #4294967295
 800e476:	6123      	str	r3, [r4, #16]
 800e478:	d00c      	beq.n	800e494 <_scanf_float+0x34c>
 800e47a:	2945      	cmp	r1, #69	; 0x45
 800e47c:	d00a      	beq.n	800e494 <_scanf_float+0x34c>
 800e47e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e482:	463a      	mov	r2, r7
 800e484:	4640      	mov	r0, r8
 800e486:	4798      	blx	r3
 800e488:	6923      	ldr	r3, [r4, #16]
 800e48a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e48e:	3b01      	subs	r3, #1
 800e490:	1eb5      	subs	r5, r6, #2
 800e492:	6123      	str	r3, [r4, #16]
 800e494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e498:	463a      	mov	r2, r7
 800e49a:	4640      	mov	r0, r8
 800e49c:	4798      	blx	r3
 800e49e:	462e      	mov	r6, r5
 800e4a0:	6825      	ldr	r5, [r4, #0]
 800e4a2:	f015 0510 	ands.w	r5, r5, #16
 800e4a6:	d158      	bne.n	800e55a <_scanf_float+0x412>
 800e4a8:	7035      	strb	r5, [r6, #0]
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e4b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4b4:	d11c      	bne.n	800e4f0 <_scanf_float+0x3a8>
 800e4b6:	9b01      	ldr	r3, [sp, #4]
 800e4b8:	454b      	cmp	r3, r9
 800e4ba:	eba3 0209 	sub.w	r2, r3, r9
 800e4be:	d124      	bne.n	800e50a <_scanf_float+0x3c2>
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	4659      	mov	r1, fp
 800e4c4:	4640      	mov	r0, r8
 800e4c6:	f000 fe9d 	bl	800f204 <_strtod_r>
 800e4ca:	9b03      	ldr	r3, [sp, #12]
 800e4cc:	6821      	ldr	r1, [r4, #0]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f011 0f02 	tst.w	r1, #2
 800e4d4:	ec57 6b10 	vmov	r6, r7, d0
 800e4d8:	f103 0204 	add.w	r2, r3, #4
 800e4dc:	d020      	beq.n	800e520 <_scanf_float+0x3d8>
 800e4de:	9903      	ldr	r1, [sp, #12]
 800e4e0:	600a      	str	r2, [r1, #0]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	e9c3 6700 	strd	r6, r7, [r3]
 800e4e8:	68e3      	ldr	r3, [r4, #12]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	60e3      	str	r3, [r4, #12]
 800e4ee:	e66c      	b.n	800e1ca <_scanf_float+0x82>
 800e4f0:	9b04      	ldr	r3, [sp, #16]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d0e4      	beq.n	800e4c0 <_scanf_float+0x378>
 800e4f6:	9905      	ldr	r1, [sp, #20]
 800e4f8:	230a      	movs	r3, #10
 800e4fa:	462a      	mov	r2, r5
 800e4fc:	3101      	adds	r1, #1
 800e4fe:	4640      	mov	r0, r8
 800e500:	f000 ff72 	bl	800f3e8 <_strtol_r>
 800e504:	9b04      	ldr	r3, [sp, #16]
 800e506:	9e05      	ldr	r6, [sp, #20]
 800e508:	1ac2      	subs	r2, r0, r3
 800e50a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e50e:	429e      	cmp	r6, r3
 800e510:	bf28      	it	cs
 800e512:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e516:	4912      	ldr	r1, [pc, #72]	; (800e560 <_scanf_float+0x418>)
 800e518:	4630      	mov	r0, r6
 800e51a:	f000 f82b 	bl	800e574 <siprintf>
 800e51e:	e7cf      	b.n	800e4c0 <_scanf_float+0x378>
 800e520:	f011 0f04 	tst.w	r1, #4
 800e524:	9903      	ldr	r1, [sp, #12]
 800e526:	600a      	str	r2, [r1, #0]
 800e528:	d1db      	bne.n	800e4e2 <_scanf_float+0x39a>
 800e52a:	f8d3 8000 	ldr.w	r8, [r3]
 800e52e:	ee10 2a10 	vmov	r2, s0
 800e532:	ee10 0a10 	vmov	r0, s0
 800e536:	463b      	mov	r3, r7
 800e538:	4639      	mov	r1, r7
 800e53a:	f7f2 fb0f 	bl	8000b5c <__aeabi_dcmpun>
 800e53e:	b128      	cbz	r0, 800e54c <_scanf_float+0x404>
 800e540:	4808      	ldr	r0, [pc, #32]	; (800e564 <_scanf_float+0x41c>)
 800e542:	f000 f811 	bl	800e568 <nanf>
 800e546:	ed88 0a00 	vstr	s0, [r8]
 800e54a:	e7cd      	b.n	800e4e8 <_scanf_float+0x3a0>
 800e54c:	4630      	mov	r0, r6
 800e54e:	4639      	mov	r1, r7
 800e550:	f7f2 fb62 	bl	8000c18 <__aeabi_d2f>
 800e554:	f8c8 0000 	str.w	r0, [r8]
 800e558:	e7c6      	b.n	800e4e8 <_scanf_float+0x3a0>
 800e55a:	2500      	movs	r5, #0
 800e55c:	e635      	b.n	800e1ca <_scanf_float+0x82>
 800e55e:	bf00      	nop
 800e560:	08025974 	.word	0x08025974
 800e564:	08025a83 	.word	0x08025a83

0800e568 <nanf>:
 800e568:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e570 <nanf+0x8>
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	7fc00000 	.word	0x7fc00000

0800e574 <siprintf>:
 800e574:	b40e      	push	{r1, r2, r3}
 800e576:	b500      	push	{lr}
 800e578:	b09c      	sub	sp, #112	; 0x70
 800e57a:	ab1d      	add	r3, sp, #116	; 0x74
 800e57c:	9002      	str	r0, [sp, #8]
 800e57e:	9006      	str	r0, [sp, #24]
 800e580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e584:	4809      	ldr	r0, [pc, #36]	; (800e5ac <siprintf+0x38>)
 800e586:	9107      	str	r1, [sp, #28]
 800e588:	9104      	str	r1, [sp, #16]
 800e58a:	4909      	ldr	r1, [pc, #36]	; (800e5b0 <siprintf+0x3c>)
 800e58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e590:	9105      	str	r1, [sp, #20]
 800e592:	6800      	ldr	r0, [r0, #0]
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	a902      	add	r1, sp, #8
 800e598:	f002 ff48 	bl	801142c <_svfiprintf_r>
 800e59c:	9b02      	ldr	r3, [sp, #8]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	701a      	strb	r2, [r3, #0]
 800e5a2:	b01c      	add	sp, #112	; 0x70
 800e5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5a8:	b003      	add	sp, #12
 800e5aa:	4770      	bx	lr
 800e5ac:	20000040 	.word	0x20000040
 800e5b0:	ffff0208 	.word	0xffff0208

0800e5b4 <sulp>:
 800e5b4:	b570      	push	{r4, r5, r6, lr}
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	460d      	mov	r5, r1
 800e5ba:	ec45 4b10 	vmov	d0, r4, r5
 800e5be:	4616      	mov	r6, r2
 800e5c0:	f002 fcd0 	bl	8010f64 <__ulp>
 800e5c4:	ec51 0b10 	vmov	r0, r1, d0
 800e5c8:	b17e      	cbz	r6, 800e5ea <sulp+0x36>
 800e5ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e5ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	dd09      	ble.n	800e5ea <sulp+0x36>
 800e5d6:	051b      	lsls	r3, r3, #20
 800e5d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e5dc:	2400      	movs	r4, #0
 800e5de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e5e2:	4622      	mov	r2, r4
 800e5e4:	462b      	mov	r3, r5
 800e5e6:	f7f2 f81f 	bl	8000628 <__aeabi_dmul>
 800e5ea:	bd70      	pop	{r4, r5, r6, pc}
 800e5ec:	0000      	movs	r0, r0
	...

0800e5f0 <_strtod_l>:
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	b0a3      	sub	sp, #140	; 0x8c
 800e5f6:	461f      	mov	r7, r3
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	931e      	str	r3, [sp, #120]	; 0x78
 800e5fc:	4ba4      	ldr	r3, [pc, #656]	; (800e890 <_strtod_l+0x2a0>)
 800e5fe:	9219      	str	r2, [sp, #100]	; 0x64
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	9307      	str	r3, [sp, #28]
 800e604:	4604      	mov	r4, r0
 800e606:	4618      	mov	r0, r3
 800e608:	4688      	mov	r8, r1
 800e60a:	f7f1 fdf3 	bl	80001f4 <strlen>
 800e60e:	f04f 0a00 	mov.w	sl, #0
 800e612:	4605      	mov	r5, r0
 800e614:	f04f 0b00 	mov.w	fp, #0
 800e618:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e61c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e61e:	781a      	ldrb	r2, [r3, #0]
 800e620:	2a2b      	cmp	r2, #43	; 0x2b
 800e622:	d04c      	beq.n	800e6be <_strtod_l+0xce>
 800e624:	d839      	bhi.n	800e69a <_strtod_l+0xaa>
 800e626:	2a0d      	cmp	r2, #13
 800e628:	d832      	bhi.n	800e690 <_strtod_l+0xa0>
 800e62a:	2a08      	cmp	r2, #8
 800e62c:	d832      	bhi.n	800e694 <_strtod_l+0xa4>
 800e62e:	2a00      	cmp	r2, #0
 800e630:	d03c      	beq.n	800e6ac <_strtod_l+0xbc>
 800e632:	2300      	movs	r3, #0
 800e634:	930e      	str	r3, [sp, #56]	; 0x38
 800e636:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e638:	7833      	ldrb	r3, [r6, #0]
 800e63a:	2b30      	cmp	r3, #48	; 0x30
 800e63c:	f040 80b4 	bne.w	800e7a8 <_strtod_l+0x1b8>
 800e640:	7873      	ldrb	r3, [r6, #1]
 800e642:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e646:	2b58      	cmp	r3, #88	; 0x58
 800e648:	d16c      	bne.n	800e724 <_strtod_l+0x134>
 800e64a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e64c:	9301      	str	r3, [sp, #4]
 800e64e:	ab1e      	add	r3, sp, #120	; 0x78
 800e650:	9702      	str	r7, [sp, #8]
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	4a8f      	ldr	r2, [pc, #572]	; (800e894 <_strtod_l+0x2a4>)
 800e656:	ab1f      	add	r3, sp, #124	; 0x7c
 800e658:	a91d      	add	r1, sp, #116	; 0x74
 800e65a:	4620      	mov	r0, r4
 800e65c:	f001 fde2 	bl	8010224 <__gethex>
 800e660:	f010 0707 	ands.w	r7, r0, #7
 800e664:	4605      	mov	r5, r0
 800e666:	d005      	beq.n	800e674 <_strtod_l+0x84>
 800e668:	2f06      	cmp	r7, #6
 800e66a:	d12a      	bne.n	800e6c2 <_strtod_l+0xd2>
 800e66c:	3601      	adds	r6, #1
 800e66e:	2300      	movs	r3, #0
 800e670:	961d      	str	r6, [sp, #116]	; 0x74
 800e672:	930e      	str	r3, [sp, #56]	; 0x38
 800e674:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e676:	2b00      	cmp	r3, #0
 800e678:	f040 8596 	bne.w	800f1a8 <_strtod_l+0xbb8>
 800e67c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e67e:	b1db      	cbz	r3, 800e6b8 <_strtod_l+0xc8>
 800e680:	4652      	mov	r2, sl
 800e682:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e686:	ec43 2b10 	vmov	d0, r2, r3
 800e68a:	b023      	add	sp, #140	; 0x8c
 800e68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e690:	2a20      	cmp	r2, #32
 800e692:	d1ce      	bne.n	800e632 <_strtod_l+0x42>
 800e694:	3301      	adds	r3, #1
 800e696:	931d      	str	r3, [sp, #116]	; 0x74
 800e698:	e7c0      	b.n	800e61c <_strtod_l+0x2c>
 800e69a:	2a2d      	cmp	r2, #45	; 0x2d
 800e69c:	d1c9      	bne.n	800e632 <_strtod_l+0x42>
 800e69e:	2201      	movs	r2, #1
 800e6a0:	920e      	str	r2, [sp, #56]	; 0x38
 800e6a2:	1c5a      	adds	r2, r3, #1
 800e6a4:	921d      	str	r2, [sp, #116]	; 0x74
 800e6a6:	785b      	ldrb	r3, [r3, #1]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1c4      	bne.n	800e636 <_strtod_l+0x46>
 800e6ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e6ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f040 8576 	bne.w	800f1a4 <_strtod_l+0xbb4>
 800e6b8:	4652      	mov	r2, sl
 800e6ba:	465b      	mov	r3, fp
 800e6bc:	e7e3      	b.n	800e686 <_strtod_l+0x96>
 800e6be:	2200      	movs	r2, #0
 800e6c0:	e7ee      	b.n	800e6a0 <_strtod_l+0xb0>
 800e6c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e6c4:	b13a      	cbz	r2, 800e6d6 <_strtod_l+0xe6>
 800e6c6:	2135      	movs	r1, #53	; 0x35
 800e6c8:	a820      	add	r0, sp, #128	; 0x80
 800e6ca:	f002 fd56 	bl	801117a <__copybits>
 800e6ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f002 f91b 	bl	801090c <_Bfree>
 800e6d6:	3f01      	subs	r7, #1
 800e6d8:	2f05      	cmp	r7, #5
 800e6da:	d807      	bhi.n	800e6ec <_strtod_l+0xfc>
 800e6dc:	e8df f007 	tbb	[pc, r7]
 800e6e0:	1d180b0e 	.word	0x1d180b0e
 800e6e4:	030e      	.short	0x030e
 800e6e6:	f04f 0b00 	mov.w	fp, #0
 800e6ea:	46da      	mov	sl, fp
 800e6ec:	0728      	lsls	r0, r5, #28
 800e6ee:	d5c1      	bpl.n	800e674 <_strtod_l+0x84>
 800e6f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e6f4:	e7be      	b.n	800e674 <_strtod_l+0x84>
 800e6f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e6fa:	e7f7      	b.n	800e6ec <_strtod_l+0xfc>
 800e6fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e700:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e702:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e706:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e70a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e70e:	e7ed      	b.n	800e6ec <_strtod_l+0xfc>
 800e710:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e898 <_strtod_l+0x2a8>
 800e714:	f04f 0a00 	mov.w	sl, #0
 800e718:	e7e8      	b.n	800e6ec <_strtod_l+0xfc>
 800e71a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e71e:	f04f 3aff 	mov.w	sl, #4294967295
 800e722:	e7e3      	b.n	800e6ec <_strtod_l+0xfc>
 800e724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e726:	1c5a      	adds	r2, r3, #1
 800e728:	921d      	str	r2, [sp, #116]	; 0x74
 800e72a:	785b      	ldrb	r3, [r3, #1]
 800e72c:	2b30      	cmp	r3, #48	; 0x30
 800e72e:	d0f9      	beq.n	800e724 <_strtod_l+0x134>
 800e730:	2b00      	cmp	r3, #0
 800e732:	d09f      	beq.n	800e674 <_strtod_l+0x84>
 800e734:	2301      	movs	r3, #1
 800e736:	f04f 0900 	mov.w	r9, #0
 800e73a:	9304      	str	r3, [sp, #16]
 800e73c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e73e:	930a      	str	r3, [sp, #40]	; 0x28
 800e740:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e744:	464f      	mov	r7, r9
 800e746:	220a      	movs	r2, #10
 800e748:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e74a:	7806      	ldrb	r6, [r0, #0]
 800e74c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e750:	b2d9      	uxtb	r1, r3
 800e752:	2909      	cmp	r1, #9
 800e754:	d92a      	bls.n	800e7ac <_strtod_l+0x1bc>
 800e756:	9907      	ldr	r1, [sp, #28]
 800e758:	462a      	mov	r2, r5
 800e75a:	f003 f8d9 	bl	8011910 <strncmp>
 800e75e:	b398      	cbz	r0, 800e7c8 <_strtod_l+0x1d8>
 800e760:	2000      	movs	r0, #0
 800e762:	4633      	mov	r3, r6
 800e764:	463d      	mov	r5, r7
 800e766:	9007      	str	r0, [sp, #28]
 800e768:	4602      	mov	r2, r0
 800e76a:	2b65      	cmp	r3, #101	; 0x65
 800e76c:	d001      	beq.n	800e772 <_strtod_l+0x182>
 800e76e:	2b45      	cmp	r3, #69	; 0x45
 800e770:	d118      	bne.n	800e7a4 <_strtod_l+0x1b4>
 800e772:	b91d      	cbnz	r5, 800e77c <_strtod_l+0x18c>
 800e774:	9b04      	ldr	r3, [sp, #16]
 800e776:	4303      	orrs	r3, r0
 800e778:	d098      	beq.n	800e6ac <_strtod_l+0xbc>
 800e77a:	2500      	movs	r5, #0
 800e77c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e780:	f108 0301 	add.w	r3, r8, #1
 800e784:	931d      	str	r3, [sp, #116]	; 0x74
 800e786:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e78a:	2b2b      	cmp	r3, #43	; 0x2b
 800e78c:	d075      	beq.n	800e87a <_strtod_l+0x28a>
 800e78e:	2b2d      	cmp	r3, #45	; 0x2d
 800e790:	d07b      	beq.n	800e88a <_strtod_l+0x29a>
 800e792:	f04f 0c00 	mov.w	ip, #0
 800e796:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e79a:	2909      	cmp	r1, #9
 800e79c:	f240 8082 	bls.w	800e8a4 <_strtod_l+0x2b4>
 800e7a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e7a4:	2600      	movs	r6, #0
 800e7a6:	e09d      	b.n	800e8e4 <_strtod_l+0x2f4>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e7c4      	b.n	800e736 <_strtod_l+0x146>
 800e7ac:	2f08      	cmp	r7, #8
 800e7ae:	bfd8      	it	le
 800e7b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e7b2:	f100 0001 	add.w	r0, r0, #1
 800e7b6:	bfda      	itte	le
 800e7b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e7bc:	9309      	strle	r3, [sp, #36]	; 0x24
 800e7be:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e7c2:	3701      	adds	r7, #1
 800e7c4:	901d      	str	r0, [sp, #116]	; 0x74
 800e7c6:	e7bf      	b.n	800e748 <_strtod_l+0x158>
 800e7c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7ca:	195a      	adds	r2, r3, r5
 800e7cc:	921d      	str	r2, [sp, #116]	; 0x74
 800e7ce:	5d5b      	ldrb	r3, [r3, r5]
 800e7d0:	2f00      	cmp	r7, #0
 800e7d2:	d037      	beq.n	800e844 <_strtod_l+0x254>
 800e7d4:	9007      	str	r0, [sp, #28]
 800e7d6:	463d      	mov	r5, r7
 800e7d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e7dc:	2a09      	cmp	r2, #9
 800e7de:	d912      	bls.n	800e806 <_strtod_l+0x216>
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	e7c2      	b.n	800e76a <_strtod_l+0x17a>
 800e7e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	921d      	str	r2, [sp, #116]	; 0x74
 800e7ea:	785b      	ldrb	r3, [r3, #1]
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	2b30      	cmp	r3, #48	; 0x30
 800e7f0:	d0f8      	beq.n	800e7e4 <_strtod_l+0x1f4>
 800e7f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e7f6:	2a08      	cmp	r2, #8
 800e7f8:	f200 84db 	bhi.w	800f1b2 <_strtod_l+0xbc2>
 800e7fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e7fe:	9007      	str	r0, [sp, #28]
 800e800:	2000      	movs	r0, #0
 800e802:	920a      	str	r2, [sp, #40]	; 0x28
 800e804:	4605      	mov	r5, r0
 800e806:	3b30      	subs	r3, #48	; 0x30
 800e808:	f100 0201 	add.w	r2, r0, #1
 800e80c:	d014      	beq.n	800e838 <_strtod_l+0x248>
 800e80e:	9907      	ldr	r1, [sp, #28]
 800e810:	4411      	add	r1, r2
 800e812:	9107      	str	r1, [sp, #28]
 800e814:	462a      	mov	r2, r5
 800e816:	eb00 0e05 	add.w	lr, r0, r5
 800e81a:	210a      	movs	r1, #10
 800e81c:	4572      	cmp	r2, lr
 800e81e:	d113      	bne.n	800e848 <_strtod_l+0x258>
 800e820:	182a      	adds	r2, r5, r0
 800e822:	2a08      	cmp	r2, #8
 800e824:	f105 0501 	add.w	r5, r5, #1
 800e828:	4405      	add	r5, r0
 800e82a:	dc1c      	bgt.n	800e866 <_strtod_l+0x276>
 800e82c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e82e:	220a      	movs	r2, #10
 800e830:	fb02 3301 	mla	r3, r2, r1, r3
 800e834:	9309      	str	r3, [sp, #36]	; 0x24
 800e836:	2200      	movs	r2, #0
 800e838:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e83a:	1c59      	adds	r1, r3, #1
 800e83c:	911d      	str	r1, [sp, #116]	; 0x74
 800e83e:	785b      	ldrb	r3, [r3, #1]
 800e840:	4610      	mov	r0, r2
 800e842:	e7c9      	b.n	800e7d8 <_strtod_l+0x1e8>
 800e844:	4638      	mov	r0, r7
 800e846:	e7d2      	b.n	800e7ee <_strtod_l+0x1fe>
 800e848:	2a08      	cmp	r2, #8
 800e84a:	dc04      	bgt.n	800e856 <_strtod_l+0x266>
 800e84c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e84e:	434e      	muls	r6, r1
 800e850:	9609      	str	r6, [sp, #36]	; 0x24
 800e852:	3201      	adds	r2, #1
 800e854:	e7e2      	b.n	800e81c <_strtod_l+0x22c>
 800e856:	f102 0c01 	add.w	ip, r2, #1
 800e85a:	f1bc 0f10 	cmp.w	ip, #16
 800e85e:	bfd8      	it	le
 800e860:	fb01 f909 	mulle.w	r9, r1, r9
 800e864:	e7f5      	b.n	800e852 <_strtod_l+0x262>
 800e866:	2d10      	cmp	r5, #16
 800e868:	bfdc      	itt	le
 800e86a:	220a      	movle	r2, #10
 800e86c:	fb02 3909 	mlale	r9, r2, r9, r3
 800e870:	e7e1      	b.n	800e836 <_strtod_l+0x246>
 800e872:	2300      	movs	r3, #0
 800e874:	9307      	str	r3, [sp, #28]
 800e876:	2201      	movs	r2, #1
 800e878:	e77c      	b.n	800e774 <_strtod_l+0x184>
 800e87a:	f04f 0c00 	mov.w	ip, #0
 800e87e:	f108 0302 	add.w	r3, r8, #2
 800e882:	931d      	str	r3, [sp, #116]	; 0x74
 800e884:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e888:	e785      	b.n	800e796 <_strtod_l+0x1a6>
 800e88a:	f04f 0c01 	mov.w	ip, #1
 800e88e:	e7f6      	b.n	800e87e <_strtod_l+0x28e>
 800e890:	08025c6c 	.word	0x08025c6c
 800e894:	0802597c 	.word	0x0802597c
 800e898:	7ff00000 	.word	0x7ff00000
 800e89c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e89e:	1c59      	adds	r1, r3, #1
 800e8a0:	911d      	str	r1, [sp, #116]	; 0x74
 800e8a2:	785b      	ldrb	r3, [r3, #1]
 800e8a4:	2b30      	cmp	r3, #48	; 0x30
 800e8a6:	d0f9      	beq.n	800e89c <_strtod_l+0x2ac>
 800e8a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e8ac:	2908      	cmp	r1, #8
 800e8ae:	f63f af79 	bhi.w	800e7a4 <_strtod_l+0x1b4>
 800e8b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e8b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8b8:	9308      	str	r3, [sp, #32]
 800e8ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8bc:	1c59      	adds	r1, r3, #1
 800e8be:	911d      	str	r1, [sp, #116]	; 0x74
 800e8c0:	785b      	ldrb	r3, [r3, #1]
 800e8c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e8c6:	2e09      	cmp	r6, #9
 800e8c8:	d937      	bls.n	800e93a <_strtod_l+0x34a>
 800e8ca:	9e08      	ldr	r6, [sp, #32]
 800e8cc:	1b89      	subs	r1, r1, r6
 800e8ce:	2908      	cmp	r1, #8
 800e8d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e8d4:	dc02      	bgt.n	800e8dc <_strtod_l+0x2ec>
 800e8d6:	4576      	cmp	r6, lr
 800e8d8:	bfa8      	it	ge
 800e8da:	4676      	movge	r6, lr
 800e8dc:	f1bc 0f00 	cmp.w	ip, #0
 800e8e0:	d000      	beq.n	800e8e4 <_strtod_l+0x2f4>
 800e8e2:	4276      	negs	r6, r6
 800e8e4:	2d00      	cmp	r5, #0
 800e8e6:	d14f      	bne.n	800e988 <_strtod_l+0x398>
 800e8e8:	9904      	ldr	r1, [sp, #16]
 800e8ea:	4301      	orrs	r1, r0
 800e8ec:	f47f aec2 	bne.w	800e674 <_strtod_l+0x84>
 800e8f0:	2a00      	cmp	r2, #0
 800e8f2:	f47f aedb 	bne.w	800e6ac <_strtod_l+0xbc>
 800e8f6:	2b69      	cmp	r3, #105	; 0x69
 800e8f8:	d027      	beq.n	800e94a <_strtod_l+0x35a>
 800e8fa:	dc24      	bgt.n	800e946 <_strtod_l+0x356>
 800e8fc:	2b49      	cmp	r3, #73	; 0x49
 800e8fe:	d024      	beq.n	800e94a <_strtod_l+0x35a>
 800e900:	2b4e      	cmp	r3, #78	; 0x4e
 800e902:	f47f aed3 	bne.w	800e6ac <_strtod_l+0xbc>
 800e906:	499e      	ldr	r1, [pc, #632]	; (800eb80 <_strtod_l+0x590>)
 800e908:	a81d      	add	r0, sp, #116	; 0x74
 800e90a:	f001 fee3 	bl	80106d4 <__match>
 800e90e:	2800      	cmp	r0, #0
 800e910:	f43f aecc 	beq.w	800e6ac <_strtod_l+0xbc>
 800e914:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	2b28      	cmp	r3, #40	; 0x28
 800e91a:	d12d      	bne.n	800e978 <_strtod_l+0x388>
 800e91c:	4999      	ldr	r1, [pc, #612]	; (800eb84 <_strtod_l+0x594>)
 800e91e:	aa20      	add	r2, sp, #128	; 0x80
 800e920:	a81d      	add	r0, sp, #116	; 0x74
 800e922:	f001 feeb 	bl	80106fc <__hexnan>
 800e926:	2805      	cmp	r0, #5
 800e928:	d126      	bne.n	800e978 <_strtod_l+0x388>
 800e92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e92c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e930:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e934:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e938:	e69c      	b.n	800e674 <_strtod_l+0x84>
 800e93a:	210a      	movs	r1, #10
 800e93c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e940:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e944:	e7b9      	b.n	800e8ba <_strtod_l+0x2ca>
 800e946:	2b6e      	cmp	r3, #110	; 0x6e
 800e948:	e7db      	b.n	800e902 <_strtod_l+0x312>
 800e94a:	498f      	ldr	r1, [pc, #572]	; (800eb88 <_strtod_l+0x598>)
 800e94c:	a81d      	add	r0, sp, #116	; 0x74
 800e94e:	f001 fec1 	bl	80106d4 <__match>
 800e952:	2800      	cmp	r0, #0
 800e954:	f43f aeaa 	beq.w	800e6ac <_strtod_l+0xbc>
 800e958:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e95a:	498c      	ldr	r1, [pc, #560]	; (800eb8c <_strtod_l+0x59c>)
 800e95c:	3b01      	subs	r3, #1
 800e95e:	a81d      	add	r0, sp, #116	; 0x74
 800e960:	931d      	str	r3, [sp, #116]	; 0x74
 800e962:	f001 feb7 	bl	80106d4 <__match>
 800e966:	b910      	cbnz	r0, 800e96e <_strtod_l+0x37e>
 800e968:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e96a:	3301      	adds	r3, #1
 800e96c:	931d      	str	r3, [sp, #116]	; 0x74
 800e96e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800eb9c <_strtod_l+0x5ac>
 800e972:	f04f 0a00 	mov.w	sl, #0
 800e976:	e67d      	b.n	800e674 <_strtod_l+0x84>
 800e978:	4885      	ldr	r0, [pc, #532]	; (800eb90 <_strtod_l+0x5a0>)
 800e97a:	f002 ffb1 	bl	80118e0 <nan>
 800e97e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e982:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e986:	e675      	b.n	800e674 <_strtod_l+0x84>
 800e988:	9b07      	ldr	r3, [sp, #28]
 800e98a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e98c:	1af3      	subs	r3, r6, r3
 800e98e:	2f00      	cmp	r7, #0
 800e990:	bf08      	it	eq
 800e992:	462f      	moveq	r7, r5
 800e994:	2d10      	cmp	r5, #16
 800e996:	9308      	str	r3, [sp, #32]
 800e998:	46a8      	mov	r8, r5
 800e99a:	bfa8      	it	ge
 800e99c:	f04f 0810 	movge.w	r8, #16
 800e9a0:	f7f1 fdc8 	bl	8000534 <__aeabi_ui2d>
 800e9a4:	2d09      	cmp	r5, #9
 800e9a6:	4682      	mov	sl, r0
 800e9a8:	468b      	mov	fp, r1
 800e9aa:	dd13      	ble.n	800e9d4 <_strtod_l+0x3e4>
 800e9ac:	4b79      	ldr	r3, [pc, #484]	; (800eb94 <_strtod_l+0x5a4>)
 800e9ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e9b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e9b6:	f7f1 fe37 	bl	8000628 <__aeabi_dmul>
 800e9ba:	4682      	mov	sl, r0
 800e9bc:	4648      	mov	r0, r9
 800e9be:	468b      	mov	fp, r1
 800e9c0:	f7f1 fdb8 	bl	8000534 <__aeabi_ui2d>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	4650      	mov	r0, sl
 800e9ca:	4659      	mov	r1, fp
 800e9cc:	f7f1 fc76 	bl	80002bc <__adddf3>
 800e9d0:	4682      	mov	sl, r0
 800e9d2:	468b      	mov	fp, r1
 800e9d4:	2d0f      	cmp	r5, #15
 800e9d6:	dc38      	bgt.n	800ea4a <_strtod_l+0x45a>
 800e9d8:	9b08      	ldr	r3, [sp, #32]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f43f ae4a 	beq.w	800e674 <_strtod_l+0x84>
 800e9e0:	dd24      	ble.n	800ea2c <_strtod_l+0x43c>
 800e9e2:	2b16      	cmp	r3, #22
 800e9e4:	dc0b      	bgt.n	800e9fe <_strtod_l+0x40e>
 800e9e6:	4d6b      	ldr	r5, [pc, #428]	; (800eb94 <_strtod_l+0x5a4>)
 800e9e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e9ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e9f0:	4652      	mov	r2, sl
 800e9f2:	465b      	mov	r3, fp
 800e9f4:	f7f1 fe18 	bl	8000628 <__aeabi_dmul>
 800e9f8:	4682      	mov	sl, r0
 800e9fa:	468b      	mov	fp, r1
 800e9fc:	e63a      	b.n	800e674 <_strtod_l+0x84>
 800e9fe:	9a08      	ldr	r2, [sp, #32]
 800ea00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ea04:	4293      	cmp	r3, r2
 800ea06:	db20      	blt.n	800ea4a <_strtod_l+0x45a>
 800ea08:	4c62      	ldr	r4, [pc, #392]	; (800eb94 <_strtod_l+0x5a4>)
 800ea0a:	f1c5 050f 	rsb	r5, r5, #15
 800ea0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ea12:	4652      	mov	r2, sl
 800ea14:	465b      	mov	r3, fp
 800ea16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea1a:	f7f1 fe05 	bl	8000628 <__aeabi_dmul>
 800ea1e:	9b08      	ldr	r3, [sp, #32]
 800ea20:	1b5d      	subs	r5, r3, r5
 800ea22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ea26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ea2a:	e7e3      	b.n	800e9f4 <_strtod_l+0x404>
 800ea2c:	9b08      	ldr	r3, [sp, #32]
 800ea2e:	3316      	adds	r3, #22
 800ea30:	db0b      	blt.n	800ea4a <_strtod_l+0x45a>
 800ea32:	9b07      	ldr	r3, [sp, #28]
 800ea34:	4a57      	ldr	r2, [pc, #348]	; (800eb94 <_strtod_l+0x5a4>)
 800ea36:	1b9e      	subs	r6, r3, r6
 800ea38:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ea3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ea40:	4650      	mov	r0, sl
 800ea42:	4659      	mov	r1, fp
 800ea44:	f7f1 ff1a 	bl	800087c <__aeabi_ddiv>
 800ea48:	e7d6      	b.n	800e9f8 <_strtod_l+0x408>
 800ea4a:	9b08      	ldr	r3, [sp, #32]
 800ea4c:	eba5 0808 	sub.w	r8, r5, r8
 800ea50:	4498      	add	r8, r3
 800ea52:	f1b8 0f00 	cmp.w	r8, #0
 800ea56:	dd71      	ble.n	800eb3c <_strtod_l+0x54c>
 800ea58:	f018 030f 	ands.w	r3, r8, #15
 800ea5c:	d00a      	beq.n	800ea74 <_strtod_l+0x484>
 800ea5e:	494d      	ldr	r1, [pc, #308]	; (800eb94 <_strtod_l+0x5a4>)
 800ea60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea64:	4652      	mov	r2, sl
 800ea66:	465b      	mov	r3, fp
 800ea68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea6c:	f7f1 fddc 	bl	8000628 <__aeabi_dmul>
 800ea70:	4682      	mov	sl, r0
 800ea72:	468b      	mov	fp, r1
 800ea74:	f038 080f 	bics.w	r8, r8, #15
 800ea78:	d04d      	beq.n	800eb16 <_strtod_l+0x526>
 800ea7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ea7e:	dd22      	ble.n	800eac6 <_strtod_l+0x4d6>
 800ea80:	2500      	movs	r5, #0
 800ea82:	462e      	mov	r6, r5
 800ea84:	9509      	str	r5, [sp, #36]	; 0x24
 800ea86:	9507      	str	r5, [sp, #28]
 800ea88:	2322      	movs	r3, #34	; 0x22
 800ea8a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800eb9c <_strtod_l+0x5ac>
 800ea8e:	6023      	str	r3, [r4, #0]
 800ea90:	f04f 0a00 	mov.w	sl, #0
 800ea94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f43f adec 	beq.w	800e674 <_strtod_l+0x84>
 800ea9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f001 ff34 	bl	801090c <_Bfree>
 800eaa4:	9907      	ldr	r1, [sp, #28]
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f001 ff30 	bl	801090c <_Bfree>
 800eaac:	4631      	mov	r1, r6
 800eaae:	4620      	mov	r0, r4
 800eab0:	f001 ff2c 	bl	801090c <_Bfree>
 800eab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eab6:	4620      	mov	r0, r4
 800eab8:	f001 ff28 	bl	801090c <_Bfree>
 800eabc:	4629      	mov	r1, r5
 800eabe:	4620      	mov	r0, r4
 800eac0:	f001 ff24 	bl	801090c <_Bfree>
 800eac4:	e5d6      	b.n	800e674 <_strtod_l+0x84>
 800eac6:	2300      	movs	r3, #0
 800eac8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800eacc:	4650      	mov	r0, sl
 800eace:	4659      	mov	r1, fp
 800ead0:	4699      	mov	r9, r3
 800ead2:	f1b8 0f01 	cmp.w	r8, #1
 800ead6:	dc21      	bgt.n	800eb1c <_strtod_l+0x52c>
 800ead8:	b10b      	cbz	r3, 800eade <_strtod_l+0x4ee>
 800eada:	4682      	mov	sl, r0
 800eadc:	468b      	mov	fp, r1
 800eade:	4b2e      	ldr	r3, [pc, #184]	; (800eb98 <_strtod_l+0x5a8>)
 800eae0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800eae4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800eae8:	4652      	mov	r2, sl
 800eaea:	465b      	mov	r3, fp
 800eaec:	e9d9 0100 	ldrd	r0, r1, [r9]
 800eaf0:	f7f1 fd9a 	bl	8000628 <__aeabi_dmul>
 800eaf4:	4b29      	ldr	r3, [pc, #164]	; (800eb9c <_strtod_l+0x5ac>)
 800eaf6:	460a      	mov	r2, r1
 800eaf8:	400b      	ands	r3, r1
 800eafa:	4929      	ldr	r1, [pc, #164]	; (800eba0 <_strtod_l+0x5b0>)
 800eafc:	428b      	cmp	r3, r1
 800eafe:	4682      	mov	sl, r0
 800eb00:	d8be      	bhi.n	800ea80 <_strtod_l+0x490>
 800eb02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800eb06:	428b      	cmp	r3, r1
 800eb08:	bf86      	itte	hi
 800eb0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800eba4 <_strtod_l+0x5b4>
 800eb0e:	f04f 3aff 	movhi.w	sl, #4294967295
 800eb12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800eb16:	2300      	movs	r3, #0
 800eb18:	9304      	str	r3, [sp, #16]
 800eb1a:	e081      	b.n	800ec20 <_strtod_l+0x630>
 800eb1c:	f018 0f01 	tst.w	r8, #1
 800eb20:	d007      	beq.n	800eb32 <_strtod_l+0x542>
 800eb22:	4b1d      	ldr	r3, [pc, #116]	; (800eb98 <_strtod_l+0x5a8>)
 800eb24:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800eb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2c:	f7f1 fd7c 	bl	8000628 <__aeabi_dmul>
 800eb30:	2301      	movs	r3, #1
 800eb32:	f109 0901 	add.w	r9, r9, #1
 800eb36:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eb3a:	e7ca      	b.n	800ead2 <_strtod_l+0x4e2>
 800eb3c:	d0eb      	beq.n	800eb16 <_strtod_l+0x526>
 800eb3e:	f1c8 0800 	rsb	r8, r8, #0
 800eb42:	f018 020f 	ands.w	r2, r8, #15
 800eb46:	d00a      	beq.n	800eb5e <_strtod_l+0x56e>
 800eb48:	4b12      	ldr	r3, [pc, #72]	; (800eb94 <_strtod_l+0x5a4>)
 800eb4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb4e:	4650      	mov	r0, sl
 800eb50:	4659      	mov	r1, fp
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	f7f1 fe91 	bl	800087c <__aeabi_ddiv>
 800eb5a:	4682      	mov	sl, r0
 800eb5c:	468b      	mov	fp, r1
 800eb5e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800eb62:	d0d8      	beq.n	800eb16 <_strtod_l+0x526>
 800eb64:	f1b8 0f1f 	cmp.w	r8, #31
 800eb68:	dd1e      	ble.n	800eba8 <_strtod_l+0x5b8>
 800eb6a:	2500      	movs	r5, #0
 800eb6c:	462e      	mov	r6, r5
 800eb6e:	9509      	str	r5, [sp, #36]	; 0x24
 800eb70:	9507      	str	r5, [sp, #28]
 800eb72:	2322      	movs	r3, #34	; 0x22
 800eb74:	f04f 0a00 	mov.w	sl, #0
 800eb78:	f04f 0b00 	mov.w	fp, #0
 800eb7c:	6023      	str	r3, [r4, #0]
 800eb7e:	e789      	b.n	800ea94 <_strtod_l+0x4a4>
 800eb80:	0802594d 	.word	0x0802594d
 800eb84:	08025990 	.word	0x08025990
 800eb88:	08025945 	.word	0x08025945
 800eb8c:	08025b88 	.word	0x08025b88
 800eb90:	08025a83 	.word	0x08025a83
 800eb94:	08025d08 	.word	0x08025d08
 800eb98:	08025ce0 	.word	0x08025ce0
 800eb9c:	7ff00000 	.word	0x7ff00000
 800eba0:	7ca00000 	.word	0x7ca00000
 800eba4:	7fefffff 	.word	0x7fefffff
 800eba8:	f018 0310 	ands.w	r3, r8, #16
 800ebac:	bf18      	it	ne
 800ebae:	236a      	movne	r3, #106	; 0x6a
 800ebb0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ef68 <_strtod_l+0x978>
 800ebb4:	9304      	str	r3, [sp, #16]
 800ebb6:	4650      	mov	r0, sl
 800ebb8:	4659      	mov	r1, fp
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f018 0f01 	tst.w	r8, #1
 800ebc0:	d004      	beq.n	800ebcc <_strtod_l+0x5dc>
 800ebc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ebc6:	f7f1 fd2f 	bl	8000628 <__aeabi_dmul>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ebd0:	f109 0908 	add.w	r9, r9, #8
 800ebd4:	d1f2      	bne.n	800ebbc <_strtod_l+0x5cc>
 800ebd6:	b10b      	cbz	r3, 800ebdc <_strtod_l+0x5ec>
 800ebd8:	4682      	mov	sl, r0
 800ebda:	468b      	mov	fp, r1
 800ebdc:	9b04      	ldr	r3, [sp, #16]
 800ebde:	b1bb      	cbz	r3, 800ec10 <_strtod_l+0x620>
 800ebe0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ebe4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	4659      	mov	r1, fp
 800ebec:	dd10      	ble.n	800ec10 <_strtod_l+0x620>
 800ebee:	2b1f      	cmp	r3, #31
 800ebf0:	f340 8128 	ble.w	800ee44 <_strtod_l+0x854>
 800ebf4:	2b34      	cmp	r3, #52	; 0x34
 800ebf6:	bfde      	ittt	le
 800ebf8:	3b20      	suble	r3, #32
 800ebfa:	f04f 32ff 	movle.w	r2, #4294967295
 800ebfe:	fa02 f303 	lslle.w	r3, r2, r3
 800ec02:	f04f 0a00 	mov.w	sl, #0
 800ec06:	bfcc      	ite	gt
 800ec08:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ec0c:	ea03 0b01 	andle.w	fp, r3, r1
 800ec10:	2200      	movs	r2, #0
 800ec12:	2300      	movs	r3, #0
 800ec14:	4650      	mov	r0, sl
 800ec16:	4659      	mov	r1, fp
 800ec18:	f7f1 ff6e 	bl	8000af8 <__aeabi_dcmpeq>
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	d1a4      	bne.n	800eb6a <_strtod_l+0x57a>
 800ec20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec22:	9300      	str	r3, [sp, #0]
 800ec24:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ec26:	462b      	mov	r3, r5
 800ec28:	463a      	mov	r2, r7
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f001 feda 	bl	80109e4 <__s2b>
 800ec30:	9009      	str	r0, [sp, #36]	; 0x24
 800ec32:	2800      	cmp	r0, #0
 800ec34:	f43f af24 	beq.w	800ea80 <_strtod_l+0x490>
 800ec38:	9b07      	ldr	r3, [sp, #28]
 800ec3a:	1b9e      	subs	r6, r3, r6
 800ec3c:	9b08      	ldr	r3, [sp, #32]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	bfb4      	ite	lt
 800ec42:	4633      	movlt	r3, r6
 800ec44:	2300      	movge	r3, #0
 800ec46:	9310      	str	r3, [sp, #64]	; 0x40
 800ec48:	9b08      	ldr	r3, [sp, #32]
 800ec4a:	2500      	movs	r5, #0
 800ec4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ec50:	9318      	str	r3, [sp, #96]	; 0x60
 800ec52:	462e      	mov	r6, r5
 800ec54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec56:	4620      	mov	r0, r4
 800ec58:	6859      	ldr	r1, [r3, #4]
 800ec5a:	f001 fe17 	bl	801088c <_Balloc>
 800ec5e:	9007      	str	r0, [sp, #28]
 800ec60:	2800      	cmp	r0, #0
 800ec62:	f43f af11 	beq.w	800ea88 <_strtod_l+0x498>
 800ec66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec68:	691a      	ldr	r2, [r3, #16]
 800ec6a:	3202      	adds	r2, #2
 800ec6c:	f103 010c 	add.w	r1, r3, #12
 800ec70:	0092      	lsls	r2, r2, #2
 800ec72:	300c      	adds	r0, #12
 800ec74:	f001 fdfc 	bl	8010870 <memcpy>
 800ec78:	ec4b ab10 	vmov	d0, sl, fp
 800ec7c:	aa20      	add	r2, sp, #128	; 0x80
 800ec7e:	a91f      	add	r1, sp, #124	; 0x7c
 800ec80:	4620      	mov	r0, r4
 800ec82:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ec86:	f002 f9e9 	bl	801105c <__d2b>
 800ec8a:	901e      	str	r0, [sp, #120]	; 0x78
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	f43f aefb 	beq.w	800ea88 <_strtod_l+0x498>
 800ec92:	2101      	movs	r1, #1
 800ec94:	4620      	mov	r0, r4
 800ec96:	f001 ff3f 	bl	8010b18 <__i2b>
 800ec9a:	4606      	mov	r6, r0
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	f43f aef3 	beq.w	800ea88 <_strtod_l+0x498>
 800eca2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eca4:	9904      	ldr	r1, [sp, #16]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	bfab      	itete	ge
 800ecaa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ecac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ecae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ecb0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ecb4:	bfac      	ite	ge
 800ecb6:	eb03 0902 	addge.w	r9, r3, r2
 800ecba:	1ad7      	sublt	r7, r2, r3
 800ecbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ecbe:	eba3 0801 	sub.w	r8, r3, r1
 800ecc2:	4490      	add	r8, r2
 800ecc4:	4ba3      	ldr	r3, [pc, #652]	; (800ef54 <_strtod_l+0x964>)
 800ecc6:	f108 38ff 	add.w	r8, r8, #4294967295
 800ecca:	4598      	cmp	r8, r3
 800eccc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ecd0:	f280 80cc 	bge.w	800ee6c <_strtod_l+0x87c>
 800ecd4:	eba3 0308 	sub.w	r3, r3, r8
 800ecd8:	2b1f      	cmp	r3, #31
 800ecda:	eba2 0203 	sub.w	r2, r2, r3
 800ecde:	f04f 0101 	mov.w	r1, #1
 800ece2:	f300 80b6 	bgt.w	800ee52 <_strtod_l+0x862>
 800ece6:	fa01 f303 	lsl.w	r3, r1, r3
 800ecea:	9311      	str	r3, [sp, #68]	; 0x44
 800ecec:	2300      	movs	r3, #0
 800ecee:	930c      	str	r3, [sp, #48]	; 0x30
 800ecf0:	eb09 0802 	add.w	r8, r9, r2
 800ecf4:	9b04      	ldr	r3, [sp, #16]
 800ecf6:	45c1      	cmp	r9, r8
 800ecf8:	4417      	add	r7, r2
 800ecfa:	441f      	add	r7, r3
 800ecfc:	464b      	mov	r3, r9
 800ecfe:	bfa8      	it	ge
 800ed00:	4643      	movge	r3, r8
 800ed02:	42bb      	cmp	r3, r7
 800ed04:	bfa8      	it	ge
 800ed06:	463b      	movge	r3, r7
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	bfc2      	ittt	gt
 800ed0c:	eba8 0803 	subgt.w	r8, r8, r3
 800ed10:	1aff      	subgt	r7, r7, r3
 800ed12:	eba9 0903 	subgt.w	r9, r9, r3
 800ed16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	dd17      	ble.n	800ed4c <_strtod_l+0x75c>
 800ed1c:	4631      	mov	r1, r6
 800ed1e:	461a      	mov	r2, r3
 800ed20:	4620      	mov	r0, r4
 800ed22:	f001 ffb5 	bl	8010c90 <__pow5mult>
 800ed26:	4606      	mov	r6, r0
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	f43f aead 	beq.w	800ea88 <_strtod_l+0x498>
 800ed2e:	4601      	mov	r1, r0
 800ed30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ed32:	4620      	mov	r0, r4
 800ed34:	f001 ff06 	bl	8010b44 <__multiply>
 800ed38:	900f      	str	r0, [sp, #60]	; 0x3c
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	f43f aea4 	beq.w	800ea88 <_strtod_l+0x498>
 800ed40:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ed42:	4620      	mov	r0, r4
 800ed44:	f001 fde2 	bl	801090c <_Bfree>
 800ed48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed4a:	931e      	str	r3, [sp, #120]	; 0x78
 800ed4c:	f1b8 0f00 	cmp.w	r8, #0
 800ed50:	f300 8091 	bgt.w	800ee76 <_strtod_l+0x886>
 800ed54:	9b08      	ldr	r3, [sp, #32]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	dd08      	ble.n	800ed6c <_strtod_l+0x77c>
 800ed5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ed5c:	9907      	ldr	r1, [sp, #28]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f001 ff96 	bl	8010c90 <__pow5mult>
 800ed64:	9007      	str	r0, [sp, #28]
 800ed66:	2800      	cmp	r0, #0
 800ed68:	f43f ae8e 	beq.w	800ea88 <_strtod_l+0x498>
 800ed6c:	2f00      	cmp	r7, #0
 800ed6e:	dd08      	ble.n	800ed82 <_strtod_l+0x792>
 800ed70:	9907      	ldr	r1, [sp, #28]
 800ed72:	463a      	mov	r2, r7
 800ed74:	4620      	mov	r0, r4
 800ed76:	f001 ffe5 	bl	8010d44 <__lshift>
 800ed7a:	9007      	str	r0, [sp, #28]
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	f43f ae83 	beq.w	800ea88 <_strtod_l+0x498>
 800ed82:	f1b9 0f00 	cmp.w	r9, #0
 800ed86:	dd08      	ble.n	800ed9a <_strtod_l+0x7aa>
 800ed88:	4631      	mov	r1, r6
 800ed8a:	464a      	mov	r2, r9
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	f001 ffd9 	bl	8010d44 <__lshift>
 800ed92:	4606      	mov	r6, r0
 800ed94:	2800      	cmp	r0, #0
 800ed96:	f43f ae77 	beq.w	800ea88 <_strtod_l+0x498>
 800ed9a:	9a07      	ldr	r2, [sp, #28]
 800ed9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f002 f858 	bl	8010e54 <__mdiff>
 800eda4:	4605      	mov	r5, r0
 800eda6:	2800      	cmp	r0, #0
 800eda8:	f43f ae6e 	beq.w	800ea88 <_strtod_l+0x498>
 800edac:	68c3      	ldr	r3, [r0, #12]
 800edae:	930f      	str	r3, [sp, #60]	; 0x3c
 800edb0:	2300      	movs	r3, #0
 800edb2:	60c3      	str	r3, [r0, #12]
 800edb4:	4631      	mov	r1, r6
 800edb6:	f002 f831 	bl	8010e1c <__mcmp>
 800edba:	2800      	cmp	r0, #0
 800edbc:	da65      	bge.n	800ee8a <_strtod_l+0x89a>
 800edbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edc0:	ea53 030a 	orrs.w	r3, r3, sl
 800edc4:	f040 8087 	bne.w	800eed6 <_strtod_l+0x8e6>
 800edc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f040 8082 	bne.w	800eed6 <_strtod_l+0x8e6>
 800edd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800edd6:	0d1b      	lsrs	r3, r3, #20
 800edd8:	051b      	lsls	r3, r3, #20
 800edda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800edde:	d97a      	bls.n	800eed6 <_strtod_l+0x8e6>
 800ede0:	696b      	ldr	r3, [r5, #20]
 800ede2:	b913      	cbnz	r3, 800edea <_strtod_l+0x7fa>
 800ede4:	692b      	ldr	r3, [r5, #16]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	dd75      	ble.n	800eed6 <_strtod_l+0x8e6>
 800edea:	4629      	mov	r1, r5
 800edec:	2201      	movs	r2, #1
 800edee:	4620      	mov	r0, r4
 800edf0:	f001 ffa8 	bl	8010d44 <__lshift>
 800edf4:	4631      	mov	r1, r6
 800edf6:	4605      	mov	r5, r0
 800edf8:	f002 f810 	bl	8010e1c <__mcmp>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	dd6a      	ble.n	800eed6 <_strtod_l+0x8e6>
 800ee00:	9904      	ldr	r1, [sp, #16]
 800ee02:	4a55      	ldr	r2, [pc, #340]	; (800ef58 <_strtod_l+0x968>)
 800ee04:	465b      	mov	r3, fp
 800ee06:	2900      	cmp	r1, #0
 800ee08:	f000 8085 	beq.w	800ef16 <_strtod_l+0x926>
 800ee0c:	ea02 010b 	and.w	r1, r2, fp
 800ee10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ee14:	dc7f      	bgt.n	800ef16 <_strtod_l+0x926>
 800ee16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ee1a:	f77f aeaa 	ble.w	800eb72 <_strtod_l+0x582>
 800ee1e:	4a4f      	ldr	r2, [pc, #316]	; (800ef5c <_strtod_l+0x96c>)
 800ee20:	2300      	movs	r3, #0
 800ee22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ee26:	4650      	mov	r0, sl
 800ee28:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ee2c:	4659      	mov	r1, fp
 800ee2e:	f7f1 fbfb 	bl	8000628 <__aeabi_dmul>
 800ee32:	460b      	mov	r3, r1
 800ee34:	4303      	orrs	r3, r0
 800ee36:	bf08      	it	eq
 800ee38:	2322      	moveq	r3, #34	; 0x22
 800ee3a:	4682      	mov	sl, r0
 800ee3c:	468b      	mov	fp, r1
 800ee3e:	bf08      	it	eq
 800ee40:	6023      	streq	r3, [r4, #0]
 800ee42:	e62b      	b.n	800ea9c <_strtod_l+0x4ac>
 800ee44:	f04f 32ff 	mov.w	r2, #4294967295
 800ee48:	fa02 f303 	lsl.w	r3, r2, r3
 800ee4c:	ea03 0a0a 	and.w	sl, r3, sl
 800ee50:	e6de      	b.n	800ec10 <_strtod_l+0x620>
 800ee52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ee56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ee5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ee5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ee62:	fa01 f308 	lsl.w	r3, r1, r8
 800ee66:	930c      	str	r3, [sp, #48]	; 0x30
 800ee68:	9111      	str	r1, [sp, #68]	; 0x44
 800ee6a:	e741      	b.n	800ecf0 <_strtod_l+0x700>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	930c      	str	r3, [sp, #48]	; 0x30
 800ee70:	2301      	movs	r3, #1
 800ee72:	9311      	str	r3, [sp, #68]	; 0x44
 800ee74:	e73c      	b.n	800ecf0 <_strtod_l+0x700>
 800ee76:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee78:	4642      	mov	r2, r8
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f001 ff62 	bl	8010d44 <__lshift>
 800ee80:	901e      	str	r0, [sp, #120]	; 0x78
 800ee82:	2800      	cmp	r0, #0
 800ee84:	f47f af66 	bne.w	800ed54 <_strtod_l+0x764>
 800ee88:	e5fe      	b.n	800ea88 <_strtod_l+0x498>
 800ee8a:	465f      	mov	r7, fp
 800ee8c:	d16e      	bne.n	800ef6c <_strtod_l+0x97c>
 800ee8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee94:	b342      	cbz	r2, 800eee8 <_strtod_l+0x8f8>
 800ee96:	4a32      	ldr	r2, [pc, #200]	; (800ef60 <_strtod_l+0x970>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d128      	bne.n	800eeee <_strtod_l+0x8fe>
 800ee9c:	9b04      	ldr	r3, [sp, #16]
 800ee9e:	4650      	mov	r0, sl
 800eea0:	b1eb      	cbz	r3, 800eede <_strtod_l+0x8ee>
 800eea2:	4a2d      	ldr	r2, [pc, #180]	; (800ef58 <_strtod_l+0x968>)
 800eea4:	403a      	ands	r2, r7
 800eea6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800eeaa:	f04f 31ff 	mov.w	r1, #4294967295
 800eeae:	d819      	bhi.n	800eee4 <_strtod_l+0x8f4>
 800eeb0:	0d12      	lsrs	r2, r2, #20
 800eeb2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eeb6:	fa01 f303 	lsl.w	r3, r1, r3
 800eeba:	4298      	cmp	r0, r3
 800eebc:	d117      	bne.n	800eeee <_strtod_l+0x8fe>
 800eebe:	4b29      	ldr	r3, [pc, #164]	; (800ef64 <_strtod_l+0x974>)
 800eec0:	429f      	cmp	r7, r3
 800eec2:	d102      	bne.n	800eeca <_strtod_l+0x8da>
 800eec4:	3001      	adds	r0, #1
 800eec6:	f43f addf 	beq.w	800ea88 <_strtod_l+0x498>
 800eeca:	4b23      	ldr	r3, [pc, #140]	; (800ef58 <_strtod_l+0x968>)
 800eecc:	403b      	ands	r3, r7
 800eece:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eed2:	f04f 0a00 	mov.w	sl, #0
 800eed6:	9b04      	ldr	r3, [sp, #16]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d1a0      	bne.n	800ee1e <_strtod_l+0x82e>
 800eedc:	e5de      	b.n	800ea9c <_strtod_l+0x4ac>
 800eede:	f04f 33ff 	mov.w	r3, #4294967295
 800eee2:	e7ea      	b.n	800eeba <_strtod_l+0x8ca>
 800eee4:	460b      	mov	r3, r1
 800eee6:	e7e8      	b.n	800eeba <_strtod_l+0x8ca>
 800eee8:	ea53 030a 	orrs.w	r3, r3, sl
 800eeec:	d088      	beq.n	800ee00 <_strtod_l+0x810>
 800eeee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eef0:	b1db      	cbz	r3, 800ef2a <_strtod_l+0x93a>
 800eef2:	423b      	tst	r3, r7
 800eef4:	d0ef      	beq.n	800eed6 <_strtod_l+0x8e6>
 800eef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eef8:	9a04      	ldr	r2, [sp, #16]
 800eefa:	4650      	mov	r0, sl
 800eefc:	4659      	mov	r1, fp
 800eefe:	b1c3      	cbz	r3, 800ef32 <_strtod_l+0x942>
 800ef00:	f7ff fb58 	bl	800e5b4 <sulp>
 800ef04:	4602      	mov	r2, r0
 800ef06:	460b      	mov	r3, r1
 800ef08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef0c:	f7f1 f9d6 	bl	80002bc <__adddf3>
 800ef10:	4682      	mov	sl, r0
 800ef12:	468b      	mov	fp, r1
 800ef14:	e7df      	b.n	800eed6 <_strtod_l+0x8e6>
 800ef16:	4013      	ands	r3, r2
 800ef18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ef1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ef20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ef24:	f04f 3aff 	mov.w	sl, #4294967295
 800ef28:	e7d5      	b.n	800eed6 <_strtod_l+0x8e6>
 800ef2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef2c:	ea13 0f0a 	tst.w	r3, sl
 800ef30:	e7e0      	b.n	800eef4 <_strtod_l+0x904>
 800ef32:	f7ff fb3f 	bl	800e5b4 <sulp>
 800ef36:	4602      	mov	r2, r0
 800ef38:	460b      	mov	r3, r1
 800ef3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef3e:	f7f1 f9bb 	bl	80002b8 <__aeabi_dsub>
 800ef42:	2200      	movs	r2, #0
 800ef44:	2300      	movs	r3, #0
 800ef46:	4682      	mov	sl, r0
 800ef48:	468b      	mov	fp, r1
 800ef4a:	f7f1 fdd5 	bl	8000af8 <__aeabi_dcmpeq>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d0c1      	beq.n	800eed6 <_strtod_l+0x8e6>
 800ef52:	e60e      	b.n	800eb72 <_strtod_l+0x582>
 800ef54:	fffffc02 	.word	0xfffffc02
 800ef58:	7ff00000 	.word	0x7ff00000
 800ef5c:	39500000 	.word	0x39500000
 800ef60:	000fffff 	.word	0x000fffff
 800ef64:	7fefffff 	.word	0x7fefffff
 800ef68:	080259a8 	.word	0x080259a8
 800ef6c:	4631      	mov	r1, r6
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f002 f8d0 	bl	8011114 <__ratio>
 800ef74:	ec59 8b10 	vmov	r8, r9, d0
 800ef78:	ee10 0a10 	vmov	r0, s0
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ef82:	4649      	mov	r1, r9
 800ef84:	f7f1 fdcc 	bl	8000b20 <__aeabi_dcmple>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d07c      	beq.n	800f086 <_strtod_l+0xa96>
 800ef8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d04c      	beq.n	800f02c <_strtod_l+0xa3c>
 800ef92:	4b95      	ldr	r3, [pc, #596]	; (800f1e8 <_strtod_l+0xbf8>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ef9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f1e8 <_strtod_l+0xbf8>
 800ef9e:	f04f 0800 	mov.w	r8, #0
 800efa2:	4b92      	ldr	r3, [pc, #584]	; (800f1ec <_strtod_l+0xbfc>)
 800efa4:	403b      	ands	r3, r7
 800efa6:	9311      	str	r3, [sp, #68]	; 0x44
 800efa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efaa:	4b91      	ldr	r3, [pc, #580]	; (800f1f0 <_strtod_l+0xc00>)
 800efac:	429a      	cmp	r2, r3
 800efae:	f040 80b2 	bne.w	800f116 <_strtod_l+0xb26>
 800efb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800efb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800efba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800efbe:	ec4b ab10 	vmov	d0, sl, fp
 800efc2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800efc6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800efca:	f001 ffcb 	bl	8010f64 <__ulp>
 800efce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800efd2:	ec53 2b10 	vmov	r2, r3, d0
 800efd6:	f7f1 fb27 	bl	8000628 <__aeabi_dmul>
 800efda:	4652      	mov	r2, sl
 800efdc:	465b      	mov	r3, fp
 800efde:	f7f1 f96d 	bl	80002bc <__adddf3>
 800efe2:	460b      	mov	r3, r1
 800efe4:	4981      	ldr	r1, [pc, #516]	; (800f1ec <_strtod_l+0xbfc>)
 800efe6:	4a83      	ldr	r2, [pc, #524]	; (800f1f4 <_strtod_l+0xc04>)
 800efe8:	4019      	ands	r1, r3
 800efea:	4291      	cmp	r1, r2
 800efec:	4682      	mov	sl, r0
 800efee:	d95e      	bls.n	800f0ae <_strtod_l+0xabe>
 800eff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eff2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d103      	bne.n	800f002 <_strtod_l+0xa12>
 800effa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800effc:	3301      	adds	r3, #1
 800effe:	f43f ad43 	beq.w	800ea88 <_strtod_l+0x498>
 800f002:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f200 <_strtod_l+0xc10>
 800f006:	f04f 3aff 	mov.w	sl, #4294967295
 800f00a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f00c:	4620      	mov	r0, r4
 800f00e:	f001 fc7d 	bl	801090c <_Bfree>
 800f012:	9907      	ldr	r1, [sp, #28]
 800f014:	4620      	mov	r0, r4
 800f016:	f001 fc79 	bl	801090c <_Bfree>
 800f01a:	4631      	mov	r1, r6
 800f01c:	4620      	mov	r0, r4
 800f01e:	f001 fc75 	bl	801090c <_Bfree>
 800f022:	4629      	mov	r1, r5
 800f024:	4620      	mov	r0, r4
 800f026:	f001 fc71 	bl	801090c <_Bfree>
 800f02a:	e613      	b.n	800ec54 <_strtod_l+0x664>
 800f02c:	f1ba 0f00 	cmp.w	sl, #0
 800f030:	d11b      	bne.n	800f06a <_strtod_l+0xa7a>
 800f032:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f036:	b9f3      	cbnz	r3, 800f076 <_strtod_l+0xa86>
 800f038:	4b6b      	ldr	r3, [pc, #428]	; (800f1e8 <_strtod_l+0xbf8>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	4640      	mov	r0, r8
 800f03e:	4649      	mov	r1, r9
 800f040:	f7f1 fd64 	bl	8000b0c <__aeabi_dcmplt>
 800f044:	b9d0      	cbnz	r0, 800f07c <_strtod_l+0xa8c>
 800f046:	4640      	mov	r0, r8
 800f048:	4649      	mov	r1, r9
 800f04a:	4b6b      	ldr	r3, [pc, #428]	; (800f1f8 <_strtod_l+0xc08>)
 800f04c:	2200      	movs	r2, #0
 800f04e:	f7f1 faeb 	bl	8000628 <__aeabi_dmul>
 800f052:	4680      	mov	r8, r0
 800f054:	4689      	mov	r9, r1
 800f056:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f05a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f05e:	931b      	str	r3, [sp, #108]	; 0x6c
 800f060:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f064:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f068:	e79b      	b.n	800efa2 <_strtod_l+0x9b2>
 800f06a:	f1ba 0f01 	cmp.w	sl, #1
 800f06e:	d102      	bne.n	800f076 <_strtod_l+0xa86>
 800f070:	2f00      	cmp	r7, #0
 800f072:	f43f ad7e 	beq.w	800eb72 <_strtod_l+0x582>
 800f076:	4b61      	ldr	r3, [pc, #388]	; (800f1fc <_strtod_l+0xc0c>)
 800f078:	2200      	movs	r2, #0
 800f07a:	e78c      	b.n	800ef96 <_strtod_l+0x9a6>
 800f07c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f1f8 <_strtod_l+0xc08>
 800f080:	f04f 0800 	mov.w	r8, #0
 800f084:	e7e7      	b.n	800f056 <_strtod_l+0xa66>
 800f086:	4b5c      	ldr	r3, [pc, #368]	; (800f1f8 <_strtod_l+0xc08>)
 800f088:	4640      	mov	r0, r8
 800f08a:	4649      	mov	r1, r9
 800f08c:	2200      	movs	r2, #0
 800f08e:	f7f1 facb 	bl	8000628 <__aeabi_dmul>
 800f092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f094:	4680      	mov	r8, r0
 800f096:	4689      	mov	r9, r1
 800f098:	b933      	cbnz	r3, 800f0a8 <_strtod_l+0xab8>
 800f09a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f09e:	9012      	str	r0, [sp, #72]	; 0x48
 800f0a0:	9313      	str	r3, [sp, #76]	; 0x4c
 800f0a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f0a6:	e7dd      	b.n	800f064 <_strtod_l+0xa74>
 800f0a8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f0ac:	e7f9      	b.n	800f0a2 <_strtod_l+0xab2>
 800f0ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f0b2:	9b04      	ldr	r3, [sp, #16]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1a8      	bne.n	800f00a <_strtod_l+0xa1a>
 800f0b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f0bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f0be:	0d1b      	lsrs	r3, r3, #20
 800f0c0:	051b      	lsls	r3, r3, #20
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d1a1      	bne.n	800f00a <_strtod_l+0xa1a>
 800f0c6:	4640      	mov	r0, r8
 800f0c8:	4649      	mov	r1, r9
 800f0ca:	f7f1 fe0d 	bl	8000ce8 <__aeabi_d2lz>
 800f0ce:	f7f1 fa7d 	bl	80005cc <__aeabi_l2d>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	4640      	mov	r0, r8
 800f0d8:	4649      	mov	r1, r9
 800f0da:	f7f1 f8ed 	bl	80002b8 <__aeabi_dsub>
 800f0de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0e4:	ea43 030a 	orr.w	r3, r3, sl
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	4680      	mov	r8, r0
 800f0ec:	4689      	mov	r9, r1
 800f0ee:	d053      	beq.n	800f198 <_strtod_l+0xba8>
 800f0f0:	a335      	add	r3, pc, #212	; (adr r3, 800f1c8 <_strtod_l+0xbd8>)
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	f7f1 fd09 	bl	8000b0c <__aeabi_dcmplt>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	f47f acce 	bne.w	800ea9c <_strtod_l+0x4ac>
 800f100:	a333      	add	r3, pc, #204	; (adr r3, 800f1d0 <_strtod_l+0xbe0>)
 800f102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f106:	4640      	mov	r0, r8
 800f108:	4649      	mov	r1, r9
 800f10a:	f7f1 fd1d 	bl	8000b48 <__aeabi_dcmpgt>
 800f10e:	2800      	cmp	r0, #0
 800f110:	f43f af7b 	beq.w	800f00a <_strtod_l+0xa1a>
 800f114:	e4c2      	b.n	800ea9c <_strtod_l+0x4ac>
 800f116:	9b04      	ldr	r3, [sp, #16]
 800f118:	b333      	cbz	r3, 800f168 <_strtod_l+0xb78>
 800f11a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f11c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f120:	d822      	bhi.n	800f168 <_strtod_l+0xb78>
 800f122:	a32d      	add	r3, pc, #180	; (adr r3, 800f1d8 <_strtod_l+0xbe8>)
 800f124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f128:	4640      	mov	r0, r8
 800f12a:	4649      	mov	r1, r9
 800f12c:	f7f1 fcf8 	bl	8000b20 <__aeabi_dcmple>
 800f130:	b1a0      	cbz	r0, 800f15c <_strtod_l+0xb6c>
 800f132:	4649      	mov	r1, r9
 800f134:	4640      	mov	r0, r8
 800f136:	f7f1 fd4f 	bl	8000bd8 <__aeabi_d2uiz>
 800f13a:	2801      	cmp	r0, #1
 800f13c:	bf38      	it	cc
 800f13e:	2001      	movcc	r0, #1
 800f140:	f7f1 f9f8 	bl	8000534 <__aeabi_ui2d>
 800f144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f146:	4680      	mov	r8, r0
 800f148:	4689      	mov	r9, r1
 800f14a:	bb13      	cbnz	r3, 800f192 <_strtod_l+0xba2>
 800f14c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f150:	9014      	str	r0, [sp, #80]	; 0x50
 800f152:	9315      	str	r3, [sp, #84]	; 0x54
 800f154:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f158:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f15c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f15e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f160:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f164:	1a9b      	subs	r3, r3, r2
 800f166:	930d      	str	r3, [sp, #52]	; 0x34
 800f168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f16c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f170:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f174:	f001 fef6 	bl	8010f64 <__ulp>
 800f178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f17c:	ec53 2b10 	vmov	r2, r3, d0
 800f180:	f7f1 fa52 	bl	8000628 <__aeabi_dmul>
 800f184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f188:	f7f1 f898 	bl	80002bc <__adddf3>
 800f18c:	4682      	mov	sl, r0
 800f18e:	468b      	mov	fp, r1
 800f190:	e78f      	b.n	800f0b2 <_strtod_l+0xac2>
 800f192:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f196:	e7dd      	b.n	800f154 <_strtod_l+0xb64>
 800f198:	a311      	add	r3, pc, #68	; (adr r3, 800f1e0 <_strtod_l+0xbf0>)
 800f19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19e:	f7f1 fcb5 	bl	8000b0c <__aeabi_dcmplt>
 800f1a2:	e7b4      	b.n	800f10e <_strtod_l+0xb1e>
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	930e      	str	r3, [sp, #56]	; 0x38
 800f1a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f1aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f1ac:	6013      	str	r3, [r2, #0]
 800f1ae:	f7ff ba65 	b.w	800e67c <_strtod_l+0x8c>
 800f1b2:	2b65      	cmp	r3, #101	; 0x65
 800f1b4:	f43f ab5d 	beq.w	800e872 <_strtod_l+0x282>
 800f1b8:	2b45      	cmp	r3, #69	; 0x45
 800f1ba:	f43f ab5a 	beq.w	800e872 <_strtod_l+0x282>
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f7ff bb92 	b.w	800e8e8 <_strtod_l+0x2f8>
 800f1c4:	f3af 8000 	nop.w
 800f1c8:	94a03595 	.word	0x94a03595
 800f1cc:	3fdfffff 	.word	0x3fdfffff
 800f1d0:	35afe535 	.word	0x35afe535
 800f1d4:	3fe00000 	.word	0x3fe00000
 800f1d8:	ffc00000 	.word	0xffc00000
 800f1dc:	41dfffff 	.word	0x41dfffff
 800f1e0:	94a03595 	.word	0x94a03595
 800f1e4:	3fcfffff 	.word	0x3fcfffff
 800f1e8:	3ff00000 	.word	0x3ff00000
 800f1ec:	7ff00000 	.word	0x7ff00000
 800f1f0:	7fe00000 	.word	0x7fe00000
 800f1f4:	7c9fffff 	.word	0x7c9fffff
 800f1f8:	3fe00000 	.word	0x3fe00000
 800f1fc:	bff00000 	.word	0xbff00000
 800f200:	7fefffff 	.word	0x7fefffff

0800f204 <_strtod_r>:
 800f204:	4b01      	ldr	r3, [pc, #4]	; (800f20c <_strtod_r+0x8>)
 800f206:	f7ff b9f3 	b.w	800e5f0 <_strtod_l>
 800f20a:	bf00      	nop
 800f20c:	200000a8 	.word	0x200000a8

0800f210 <strtod>:
 800f210:	460a      	mov	r2, r1
 800f212:	4601      	mov	r1, r0
 800f214:	4802      	ldr	r0, [pc, #8]	; (800f220 <strtod+0x10>)
 800f216:	4b03      	ldr	r3, [pc, #12]	; (800f224 <strtod+0x14>)
 800f218:	6800      	ldr	r0, [r0, #0]
 800f21a:	f7ff b9e9 	b.w	800e5f0 <_strtod_l>
 800f21e:	bf00      	nop
 800f220:	20000040 	.word	0x20000040
 800f224:	200000a8 	.word	0x200000a8

0800f228 <strtok>:
 800f228:	4b16      	ldr	r3, [pc, #88]	; (800f284 <strtok+0x5c>)
 800f22a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f22c:	681e      	ldr	r6, [r3, #0]
 800f22e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800f230:	4605      	mov	r5, r0
 800f232:	b9fc      	cbnz	r4, 800f274 <strtok+0x4c>
 800f234:	2050      	movs	r0, #80	; 0x50
 800f236:	9101      	str	r1, [sp, #4]
 800f238:	f001 fb00 	bl	801083c <malloc>
 800f23c:	9901      	ldr	r1, [sp, #4]
 800f23e:	65b0      	str	r0, [r6, #88]	; 0x58
 800f240:	4602      	mov	r2, r0
 800f242:	b920      	cbnz	r0, 800f24e <strtok+0x26>
 800f244:	4b10      	ldr	r3, [pc, #64]	; (800f288 <strtok+0x60>)
 800f246:	4811      	ldr	r0, [pc, #68]	; (800f28c <strtok+0x64>)
 800f248:	2157      	movs	r1, #87	; 0x57
 800f24a:	f000 f8d9 	bl	800f400 <__assert_func>
 800f24e:	e9c0 4400 	strd	r4, r4, [r0]
 800f252:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f256:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f25a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f25e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f262:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f266:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f26a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f26e:	6184      	str	r4, [r0, #24]
 800f270:	7704      	strb	r4, [r0, #28]
 800f272:	6244      	str	r4, [r0, #36]	; 0x24
 800f274:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800f276:	2301      	movs	r3, #1
 800f278:	4628      	mov	r0, r5
 800f27a:	b002      	add	sp, #8
 800f27c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f280:	f000 b806 	b.w	800f290 <__strtok_r>
 800f284:	20000040 	.word	0x20000040
 800f288:	080259d0 	.word	0x080259d0
 800f28c:	080259e7 	.word	0x080259e7

0800f290 <__strtok_r>:
 800f290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f292:	b908      	cbnz	r0, 800f298 <__strtok_r+0x8>
 800f294:	6810      	ldr	r0, [r2, #0]
 800f296:	b188      	cbz	r0, 800f2bc <__strtok_r+0x2c>
 800f298:	4604      	mov	r4, r0
 800f29a:	4620      	mov	r0, r4
 800f29c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f2a0:	460f      	mov	r7, r1
 800f2a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f2a6:	b91e      	cbnz	r6, 800f2b0 <__strtok_r+0x20>
 800f2a8:	b965      	cbnz	r5, 800f2c4 <__strtok_r+0x34>
 800f2aa:	6015      	str	r5, [r2, #0]
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	e005      	b.n	800f2bc <__strtok_r+0x2c>
 800f2b0:	42b5      	cmp	r5, r6
 800f2b2:	d1f6      	bne.n	800f2a2 <__strtok_r+0x12>
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d1f0      	bne.n	800f29a <__strtok_r+0xa>
 800f2b8:	6014      	str	r4, [r2, #0]
 800f2ba:	7003      	strb	r3, [r0, #0]
 800f2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2be:	461c      	mov	r4, r3
 800f2c0:	e00c      	b.n	800f2dc <__strtok_r+0x4c>
 800f2c2:	b915      	cbnz	r5, 800f2ca <__strtok_r+0x3a>
 800f2c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f2c8:	460e      	mov	r6, r1
 800f2ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f2ce:	42ab      	cmp	r3, r5
 800f2d0:	d1f7      	bne.n	800f2c2 <__strtok_r+0x32>
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d0f3      	beq.n	800f2be <__strtok_r+0x2e>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f2dc:	6014      	str	r4, [r2, #0]
 800f2de:	e7ed      	b.n	800f2bc <__strtok_r+0x2c>

0800f2e0 <_strtol_l.isra.0>:
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2e6:	d001      	beq.n	800f2ec <_strtol_l.isra.0+0xc>
 800f2e8:	2b24      	cmp	r3, #36	; 0x24
 800f2ea:	d906      	bls.n	800f2fa <_strtol_l.isra.0+0x1a>
 800f2ec:	f7fe fa90 	bl	800d810 <__errno>
 800f2f0:	2316      	movs	r3, #22
 800f2f2:	6003      	str	r3, [r0, #0]
 800f2f4:	2000      	movs	r0, #0
 800f2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2fa:	4f3a      	ldr	r7, [pc, #232]	; (800f3e4 <_strtol_l.isra.0+0x104>)
 800f2fc:	468e      	mov	lr, r1
 800f2fe:	4676      	mov	r6, lr
 800f300:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f304:	5de5      	ldrb	r5, [r4, r7]
 800f306:	f015 0508 	ands.w	r5, r5, #8
 800f30a:	d1f8      	bne.n	800f2fe <_strtol_l.isra.0+0x1e>
 800f30c:	2c2d      	cmp	r4, #45	; 0x2d
 800f30e:	d134      	bne.n	800f37a <_strtol_l.isra.0+0x9a>
 800f310:	f89e 4000 	ldrb.w	r4, [lr]
 800f314:	f04f 0801 	mov.w	r8, #1
 800f318:	f106 0e02 	add.w	lr, r6, #2
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d05c      	beq.n	800f3da <_strtol_l.isra.0+0xfa>
 800f320:	2b10      	cmp	r3, #16
 800f322:	d10c      	bne.n	800f33e <_strtol_l.isra.0+0x5e>
 800f324:	2c30      	cmp	r4, #48	; 0x30
 800f326:	d10a      	bne.n	800f33e <_strtol_l.isra.0+0x5e>
 800f328:	f89e 4000 	ldrb.w	r4, [lr]
 800f32c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f330:	2c58      	cmp	r4, #88	; 0x58
 800f332:	d14d      	bne.n	800f3d0 <_strtol_l.isra.0+0xf0>
 800f334:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f338:	2310      	movs	r3, #16
 800f33a:	f10e 0e02 	add.w	lr, lr, #2
 800f33e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f342:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f346:	2600      	movs	r6, #0
 800f348:	fbbc f9f3 	udiv	r9, ip, r3
 800f34c:	4635      	mov	r5, r6
 800f34e:	fb03 ca19 	mls	sl, r3, r9, ip
 800f352:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f356:	2f09      	cmp	r7, #9
 800f358:	d818      	bhi.n	800f38c <_strtol_l.isra.0+0xac>
 800f35a:	463c      	mov	r4, r7
 800f35c:	42a3      	cmp	r3, r4
 800f35e:	dd24      	ble.n	800f3aa <_strtol_l.isra.0+0xca>
 800f360:	2e00      	cmp	r6, #0
 800f362:	db1f      	blt.n	800f3a4 <_strtol_l.isra.0+0xc4>
 800f364:	45a9      	cmp	r9, r5
 800f366:	d31d      	bcc.n	800f3a4 <_strtol_l.isra.0+0xc4>
 800f368:	d101      	bne.n	800f36e <_strtol_l.isra.0+0x8e>
 800f36a:	45a2      	cmp	sl, r4
 800f36c:	db1a      	blt.n	800f3a4 <_strtol_l.isra.0+0xc4>
 800f36e:	fb05 4503 	mla	r5, r5, r3, r4
 800f372:	2601      	movs	r6, #1
 800f374:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f378:	e7eb      	b.n	800f352 <_strtol_l.isra.0+0x72>
 800f37a:	2c2b      	cmp	r4, #43	; 0x2b
 800f37c:	bf08      	it	eq
 800f37e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f382:	46a8      	mov	r8, r5
 800f384:	bf08      	it	eq
 800f386:	f106 0e02 	addeq.w	lr, r6, #2
 800f38a:	e7c7      	b.n	800f31c <_strtol_l.isra.0+0x3c>
 800f38c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f390:	2f19      	cmp	r7, #25
 800f392:	d801      	bhi.n	800f398 <_strtol_l.isra.0+0xb8>
 800f394:	3c37      	subs	r4, #55	; 0x37
 800f396:	e7e1      	b.n	800f35c <_strtol_l.isra.0+0x7c>
 800f398:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f39c:	2f19      	cmp	r7, #25
 800f39e:	d804      	bhi.n	800f3aa <_strtol_l.isra.0+0xca>
 800f3a0:	3c57      	subs	r4, #87	; 0x57
 800f3a2:	e7db      	b.n	800f35c <_strtol_l.isra.0+0x7c>
 800f3a4:	f04f 36ff 	mov.w	r6, #4294967295
 800f3a8:	e7e4      	b.n	800f374 <_strtol_l.isra.0+0x94>
 800f3aa:	2e00      	cmp	r6, #0
 800f3ac:	da05      	bge.n	800f3ba <_strtol_l.isra.0+0xda>
 800f3ae:	2322      	movs	r3, #34	; 0x22
 800f3b0:	6003      	str	r3, [r0, #0]
 800f3b2:	4665      	mov	r5, ip
 800f3b4:	b942      	cbnz	r2, 800f3c8 <_strtol_l.isra.0+0xe8>
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	e79d      	b.n	800f2f6 <_strtol_l.isra.0+0x16>
 800f3ba:	f1b8 0f00 	cmp.w	r8, #0
 800f3be:	d000      	beq.n	800f3c2 <_strtol_l.isra.0+0xe2>
 800f3c0:	426d      	negs	r5, r5
 800f3c2:	2a00      	cmp	r2, #0
 800f3c4:	d0f7      	beq.n	800f3b6 <_strtol_l.isra.0+0xd6>
 800f3c6:	b10e      	cbz	r6, 800f3cc <_strtol_l.isra.0+0xec>
 800f3c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f3cc:	6011      	str	r1, [r2, #0]
 800f3ce:	e7f2      	b.n	800f3b6 <_strtol_l.isra.0+0xd6>
 800f3d0:	2430      	movs	r4, #48	; 0x30
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1b3      	bne.n	800f33e <_strtol_l.isra.0+0x5e>
 800f3d6:	2308      	movs	r3, #8
 800f3d8:	e7b1      	b.n	800f33e <_strtol_l.isra.0+0x5e>
 800f3da:	2c30      	cmp	r4, #48	; 0x30
 800f3dc:	d0a4      	beq.n	800f328 <_strtol_l.isra.0+0x48>
 800f3de:	230a      	movs	r3, #10
 800f3e0:	e7ad      	b.n	800f33e <_strtol_l.isra.0+0x5e>
 800f3e2:	bf00      	nop
 800f3e4:	08025a85 	.word	0x08025a85

0800f3e8 <_strtol_r>:
 800f3e8:	f7ff bf7a 	b.w	800f2e0 <_strtol_l.isra.0>

0800f3ec <strtol>:
 800f3ec:	4613      	mov	r3, r2
 800f3ee:	460a      	mov	r2, r1
 800f3f0:	4601      	mov	r1, r0
 800f3f2:	4802      	ldr	r0, [pc, #8]	; (800f3fc <strtol+0x10>)
 800f3f4:	6800      	ldr	r0, [r0, #0]
 800f3f6:	f7ff bf73 	b.w	800f2e0 <_strtol_l.isra.0>
 800f3fa:	bf00      	nop
 800f3fc:	20000040 	.word	0x20000040

0800f400 <__assert_func>:
 800f400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f402:	4614      	mov	r4, r2
 800f404:	461a      	mov	r2, r3
 800f406:	4b09      	ldr	r3, [pc, #36]	; (800f42c <__assert_func+0x2c>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4605      	mov	r5, r0
 800f40c:	68d8      	ldr	r0, [r3, #12]
 800f40e:	b14c      	cbz	r4, 800f424 <__assert_func+0x24>
 800f410:	4b07      	ldr	r3, [pc, #28]	; (800f430 <__assert_func+0x30>)
 800f412:	9100      	str	r1, [sp, #0]
 800f414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f418:	4906      	ldr	r1, [pc, #24]	; (800f434 <__assert_func+0x34>)
 800f41a:	462b      	mov	r3, r5
 800f41c:	f000 fe88 	bl	8010130 <fiprintf>
 800f420:	f002 fb56 	bl	8011ad0 <abort>
 800f424:	4b04      	ldr	r3, [pc, #16]	; (800f438 <__assert_func+0x38>)
 800f426:	461c      	mov	r4, r3
 800f428:	e7f3      	b.n	800f412 <__assert_func+0x12>
 800f42a:	bf00      	nop
 800f42c:	20000040 	.word	0x20000040
 800f430:	08025a48 	.word	0x08025a48
 800f434:	08025a55 	.word	0x08025a55
 800f438:	08025a83 	.word	0x08025a83

0800f43c <quorem>:
 800f43c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f440:	6903      	ldr	r3, [r0, #16]
 800f442:	690c      	ldr	r4, [r1, #16]
 800f444:	42a3      	cmp	r3, r4
 800f446:	4607      	mov	r7, r0
 800f448:	f2c0 8081 	blt.w	800f54e <quorem+0x112>
 800f44c:	3c01      	subs	r4, #1
 800f44e:	f101 0814 	add.w	r8, r1, #20
 800f452:	f100 0514 	add.w	r5, r0, #20
 800f456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f45a:	9301      	str	r3, [sp, #4]
 800f45c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f464:	3301      	adds	r3, #1
 800f466:	429a      	cmp	r2, r3
 800f468:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f46c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f470:	fbb2 f6f3 	udiv	r6, r2, r3
 800f474:	d331      	bcc.n	800f4da <quorem+0x9e>
 800f476:	f04f 0e00 	mov.w	lr, #0
 800f47a:	4640      	mov	r0, r8
 800f47c:	46ac      	mov	ip, r5
 800f47e:	46f2      	mov	sl, lr
 800f480:	f850 2b04 	ldr.w	r2, [r0], #4
 800f484:	b293      	uxth	r3, r2
 800f486:	fb06 e303 	mla	r3, r6, r3, lr
 800f48a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f48e:	b29b      	uxth	r3, r3
 800f490:	ebaa 0303 	sub.w	r3, sl, r3
 800f494:	0c12      	lsrs	r2, r2, #16
 800f496:	f8dc a000 	ldr.w	sl, [ip]
 800f49a:	fb06 e202 	mla	r2, r6, r2, lr
 800f49e:	fa13 f38a 	uxtah	r3, r3, sl
 800f4a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f4a6:	fa1f fa82 	uxth.w	sl, r2
 800f4aa:	f8dc 2000 	ldr.w	r2, [ip]
 800f4ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f4b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4bc:	4581      	cmp	r9, r0
 800f4be:	f84c 3b04 	str.w	r3, [ip], #4
 800f4c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f4c6:	d2db      	bcs.n	800f480 <quorem+0x44>
 800f4c8:	f855 300b 	ldr.w	r3, [r5, fp]
 800f4cc:	b92b      	cbnz	r3, 800f4da <quorem+0x9e>
 800f4ce:	9b01      	ldr	r3, [sp, #4]
 800f4d0:	3b04      	subs	r3, #4
 800f4d2:	429d      	cmp	r5, r3
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	d32e      	bcc.n	800f536 <quorem+0xfa>
 800f4d8:	613c      	str	r4, [r7, #16]
 800f4da:	4638      	mov	r0, r7
 800f4dc:	f001 fc9e 	bl	8010e1c <__mcmp>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	db24      	blt.n	800f52e <quorem+0xf2>
 800f4e4:	3601      	adds	r6, #1
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	f04f 0c00 	mov.w	ip, #0
 800f4ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800f4f0:	f8d0 e000 	ldr.w	lr, [r0]
 800f4f4:	b293      	uxth	r3, r2
 800f4f6:	ebac 0303 	sub.w	r3, ip, r3
 800f4fa:	0c12      	lsrs	r2, r2, #16
 800f4fc:	fa13 f38e 	uxtah	r3, r3, lr
 800f500:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f508:	b29b      	uxth	r3, r3
 800f50a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f50e:	45c1      	cmp	r9, r8
 800f510:	f840 3b04 	str.w	r3, [r0], #4
 800f514:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f518:	d2e8      	bcs.n	800f4ec <quorem+0xb0>
 800f51a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f51e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f522:	b922      	cbnz	r2, 800f52e <quorem+0xf2>
 800f524:	3b04      	subs	r3, #4
 800f526:	429d      	cmp	r5, r3
 800f528:	461a      	mov	r2, r3
 800f52a:	d30a      	bcc.n	800f542 <quorem+0x106>
 800f52c:	613c      	str	r4, [r7, #16]
 800f52e:	4630      	mov	r0, r6
 800f530:	b003      	add	sp, #12
 800f532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f536:	6812      	ldr	r2, [r2, #0]
 800f538:	3b04      	subs	r3, #4
 800f53a:	2a00      	cmp	r2, #0
 800f53c:	d1cc      	bne.n	800f4d8 <quorem+0x9c>
 800f53e:	3c01      	subs	r4, #1
 800f540:	e7c7      	b.n	800f4d2 <quorem+0x96>
 800f542:	6812      	ldr	r2, [r2, #0]
 800f544:	3b04      	subs	r3, #4
 800f546:	2a00      	cmp	r2, #0
 800f548:	d1f0      	bne.n	800f52c <quorem+0xf0>
 800f54a:	3c01      	subs	r4, #1
 800f54c:	e7eb      	b.n	800f526 <quorem+0xea>
 800f54e:	2000      	movs	r0, #0
 800f550:	e7ee      	b.n	800f530 <quorem+0xf4>
 800f552:	0000      	movs	r0, r0
 800f554:	0000      	movs	r0, r0
	...

0800f558 <_dtoa_r>:
 800f558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55c:	ed2d 8b02 	vpush	{d8}
 800f560:	ec57 6b10 	vmov	r6, r7, d0
 800f564:	b095      	sub	sp, #84	; 0x54
 800f566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f568:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f56c:	9105      	str	r1, [sp, #20]
 800f56e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f572:	4604      	mov	r4, r0
 800f574:	9209      	str	r2, [sp, #36]	; 0x24
 800f576:	930f      	str	r3, [sp, #60]	; 0x3c
 800f578:	b975      	cbnz	r5, 800f598 <_dtoa_r+0x40>
 800f57a:	2010      	movs	r0, #16
 800f57c:	f001 f95e 	bl	801083c <malloc>
 800f580:	4602      	mov	r2, r0
 800f582:	6260      	str	r0, [r4, #36]	; 0x24
 800f584:	b920      	cbnz	r0, 800f590 <_dtoa_r+0x38>
 800f586:	4bb2      	ldr	r3, [pc, #712]	; (800f850 <_dtoa_r+0x2f8>)
 800f588:	21ea      	movs	r1, #234	; 0xea
 800f58a:	48b2      	ldr	r0, [pc, #712]	; (800f854 <_dtoa_r+0x2fc>)
 800f58c:	f7ff ff38 	bl	800f400 <__assert_func>
 800f590:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f594:	6005      	str	r5, [r0, #0]
 800f596:	60c5      	str	r5, [r0, #12]
 800f598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f59a:	6819      	ldr	r1, [r3, #0]
 800f59c:	b151      	cbz	r1, 800f5b4 <_dtoa_r+0x5c>
 800f59e:	685a      	ldr	r2, [r3, #4]
 800f5a0:	604a      	str	r2, [r1, #4]
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	4093      	lsls	r3, r2
 800f5a6:	608b      	str	r3, [r1, #8]
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f001 f9af 	bl	801090c <_Bfree>
 800f5ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	601a      	str	r2, [r3, #0]
 800f5b4:	1e3b      	subs	r3, r7, #0
 800f5b6:	bfb9      	ittee	lt
 800f5b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f5bc:	9303      	strlt	r3, [sp, #12]
 800f5be:	2300      	movge	r3, #0
 800f5c0:	f8c8 3000 	strge.w	r3, [r8]
 800f5c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f5c8:	4ba3      	ldr	r3, [pc, #652]	; (800f858 <_dtoa_r+0x300>)
 800f5ca:	bfbc      	itt	lt
 800f5cc:	2201      	movlt	r2, #1
 800f5ce:	f8c8 2000 	strlt.w	r2, [r8]
 800f5d2:	ea33 0309 	bics.w	r3, r3, r9
 800f5d6:	d11b      	bne.n	800f610 <_dtoa_r+0xb8>
 800f5d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5da:	f242 730f 	movw	r3, #9999	; 0x270f
 800f5de:	6013      	str	r3, [r2, #0]
 800f5e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5e4:	4333      	orrs	r3, r6
 800f5e6:	f000 857a 	beq.w	80100de <_dtoa_r+0xb86>
 800f5ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5ec:	b963      	cbnz	r3, 800f608 <_dtoa_r+0xb0>
 800f5ee:	4b9b      	ldr	r3, [pc, #620]	; (800f85c <_dtoa_r+0x304>)
 800f5f0:	e024      	b.n	800f63c <_dtoa_r+0xe4>
 800f5f2:	4b9b      	ldr	r3, [pc, #620]	; (800f860 <_dtoa_r+0x308>)
 800f5f4:	9300      	str	r3, [sp, #0]
 800f5f6:	3308      	adds	r3, #8
 800f5f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5fa:	6013      	str	r3, [r2, #0]
 800f5fc:	9800      	ldr	r0, [sp, #0]
 800f5fe:	b015      	add	sp, #84	; 0x54
 800f600:	ecbd 8b02 	vpop	{d8}
 800f604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f608:	4b94      	ldr	r3, [pc, #592]	; (800f85c <_dtoa_r+0x304>)
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	3303      	adds	r3, #3
 800f60e:	e7f3      	b.n	800f5f8 <_dtoa_r+0xa0>
 800f610:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f614:	2200      	movs	r2, #0
 800f616:	ec51 0b17 	vmov	r0, r1, d7
 800f61a:	2300      	movs	r3, #0
 800f61c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f620:	f7f1 fa6a 	bl	8000af8 <__aeabi_dcmpeq>
 800f624:	4680      	mov	r8, r0
 800f626:	b158      	cbz	r0, 800f640 <_dtoa_r+0xe8>
 800f628:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f62a:	2301      	movs	r3, #1
 800f62c:	6013      	str	r3, [r2, #0]
 800f62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f630:	2b00      	cmp	r3, #0
 800f632:	f000 8551 	beq.w	80100d8 <_dtoa_r+0xb80>
 800f636:	488b      	ldr	r0, [pc, #556]	; (800f864 <_dtoa_r+0x30c>)
 800f638:	6018      	str	r0, [r3, #0]
 800f63a:	1e43      	subs	r3, r0, #1
 800f63c:	9300      	str	r3, [sp, #0]
 800f63e:	e7dd      	b.n	800f5fc <_dtoa_r+0xa4>
 800f640:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f644:	aa12      	add	r2, sp, #72	; 0x48
 800f646:	a913      	add	r1, sp, #76	; 0x4c
 800f648:	4620      	mov	r0, r4
 800f64a:	f001 fd07 	bl	801105c <__d2b>
 800f64e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f652:	4683      	mov	fp, r0
 800f654:	2d00      	cmp	r5, #0
 800f656:	d07c      	beq.n	800f752 <_dtoa_r+0x1fa>
 800f658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f65a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f65e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f662:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f666:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f66a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f66e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f672:	4b7d      	ldr	r3, [pc, #500]	; (800f868 <_dtoa_r+0x310>)
 800f674:	2200      	movs	r2, #0
 800f676:	4630      	mov	r0, r6
 800f678:	4639      	mov	r1, r7
 800f67a:	f7f0 fe1d 	bl	80002b8 <__aeabi_dsub>
 800f67e:	a36e      	add	r3, pc, #440	; (adr r3, 800f838 <_dtoa_r+0x2e0>)
 800f680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f684:	f7f0 ffd0 	bl	8000628 <__aeabi_dmul>
 800f688:	a36d      	add	r3, pc, #436	; (adr r3, 800f840 <_dtoa_r+0x2e8>)
 800f68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68e:	f7f0 fe15 	bl	80002bc <__adddf3>
 800f692:	4606      	mov	r6, r0
 800f694:	4628      	mov	r0, r5
 800f696:	460f      	mov	r7, r1
 800f698:	f7f0 ff5c 	bl	8000554 <__aeabi_i2d>
 800f69c:	a36a      	add	r3, pc, #424	; (adr r3, 800f848 <_dtoa_r+0x2f0>)
 800f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a2:	f7f0 ffc1 	bl	8000628 <__aeabi_dmul>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	4630      	mov	r0, r6
 800f6ac:	4639      	mov	r1, r7
 800f6ae:	f7f0 fe05 	bl	80002bc <__adddf3>
 800f6b2:	4606      	mov	r6, r0
 800f6b4:	460f      	mov	r7, r1
 800f6b6:	f7f1 fa67 	bl	8000b88 <__aeabi_d2iz>
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	4682      	mov	sl, r0
 800f6be:	2300      	movs	r3, #0
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	4639      	mov	r1, r7
 800f6c4:	f7f1 fa22 	bl	8000b0c <__aeabi_dcmplt>
 800f6c8:	b148      	cbz	r0, 800f6de <_dtoa_r+0x186>
 800f6ca:	4650      	mov	r0, sl
 800f6cc:	f7f0 ff42 	bl	8000554 <__aeabi_i2d>
 800f6d0:	4632      	mov	r2, r6
 800f6d2:	463b      	mov	r3, r7
 800f6d4:	f7f1 fa10 	bl	8000af8 <__aeabi_dcmpeq>
 800f6d8:	b908      	cbnz	r0, 800f6de <_dtoa_r+0x186>
 800f6da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6de:	f1ba 0f16 	cmp.w	sl, #22
 800f6e2:	d854      	bhi.n	800f78e <_dtoa_r+0x236>
 800f6e4:	4b61      	ldr	r3, [pc, #388]	; (800f86c <_dtoa_r+0x314>)
 800f6e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f6f2:	f7f1 fa0b 	bl	8000b0c <__aeabi_dcmplt>
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	d04b      	beq.n	800f792 <_dtoa_r+0x23a>
 800f6fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6fe:	2300      	movs	r3, #0
 800f700:	930e      	str	r3, [sp, #56]	; 0x38
 800f702:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f704:	1b5d      	subs	r5, r3, r5
 800f706:	1e6b      	subs	r3, r5, #1
 800f708:	9304      	str	r3, [sp, #16]
 800f70a:	bf43      	ittte	mi
 800f70c:	2300      	movmi	r3, #0
 800f70e:	f1c5 0801 	rsbmi	r8, r5, #1
 800f712:	9304      	strmi	r3, [sp, #16]
 800f714:	f04f 0800 	movpl.w	r8, #0
 800f718:	f1ba 0f00 	cmp.w	sl, #0
 800f71c:	db3b      	blt.n	800f796 <_dtoa_r+0x23e>
 800f71e:	9b04      	ldr	r3, [sp, #16]
 800f720:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f724:	4453      	add	r3, sl
 800f726:	9304      	str	r3, [sp, #16]
 800f728:	2300      	movs	r3, #0
 800f72a:	9306      	str	r3, [sp, #24]
 800f72c:	9b05      	ldr	r3, [sp, #20]
 800f72e:	2b09      	cmp	r3, #9
 800f730:	d869      	bhi.n	800f806 <_dtoa_r+0x2ae>
 800f732:	2b05      	cmp	r3, #5
 800f734:	bfc4      	itt	gt
 800f736:	3b04      	subgt	r3, #4
 800f738:	9305      	strgt	r3, [sp, #20]
 800f73a:	9b05      	ldr	r3, [sp, #20]
 800f73c:	f1a3 0302 	sub.w	r3, r3, #2
 800f740:	bfcc      	ite	gt
 800f742:	2500      	movgt	r5, #0
 800f744:	2501      	movle	r5, #1
 800f746:	2b03      	cmp	r3, #3
 800f748:	d869      	bhi.n	800f81e <_dtoa_r+0x2c6>
 800f74a:	e8df f003 	tbb	[pc, r3]
 800f74e:	4e2c      	.short	0x4e2c
 800f750:	5a4c      	.short	0x5a4c
 800f752:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f756:	441d      	add	r5, r3
 800f758:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f75c:	2b20      	cmp	r3, #32
 800f75e:	bfc1      	itttt	gt
 800f760:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f764:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f768:	fa09 f303 	lslgt.w	r3, r9, r3
 800f76c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f770:	bfda      	itte	le
 800f772:	f1c3 0320 	rsble	r3, r3, #32
 800f776:	fa06 f003 	lslle.w	r0, r6, r3
 800f77a:	4318      	orrgt	r0, r3
 800f77c:	f7f0 feda 	bl	8000534 <__aeabi_ui2d>
 800f780:	2301      	movs	r3, #1
 800f782:	4606      	mov	r6, r0
 800f784:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f788:	3d01      	subs	r5, #1
 800f78a:	9310      	str	r3, [sp, #64]	; 0x40
 800f78c:	e771      	b.n	800f672 <_dtoa_r+0x11a>
 800f78e:	2301      	movs	r3, #1
 800f790:	e7b6      	b.n	800f700 <_dtoa_r+0x1a8>
 800f792:	900e      	str	r0, [sp, #56]	; 0x38
 800f794:	e7b5      	b.n	800f702 <_dtoa_r+0x1aa>
 800f796:	f1ca 0300 	rsb	r3, sl, #0
 800f79a:	9306      	str	r3, [sp, #24]
 800f79c:	2300      	movs	r3, #0
 800f79e:	eba8 080a 	sub.w	r8, r8, sl
 800f7a2:	930d      	str	r3, [sp, #52]	; 0x34
 800f7a4:	e7c2      	b.n	800f72c <_dtoa_r+0x1d4>
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	9308      	str	r3, [sp, #32]
 800f7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	dc39      	bgt.n	800f824 <_dtoa_r+0x2cc>
 800f7b0:	f04f 0901 	mov.w	r9, #1
 800f7b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f7b8:	464b      	mov	r3, r9
 800f7ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f7be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	6042      	str	r2, [r0, #4]
 800f7c4:	2204      	movs	r2, #4
 800f7c6:	f102 0614 	add.w	r6, r2, #20
 800f7ca:	429e      	cmp	r6, r3
 800f7cc:	6841      	ldr	r1, [r0, #4]
 800f7ce:	d92f      	bls.n	800f830 <_dtoa_r+0x2d8>
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	f001 f85b 	bl	801088c <_Balloc>
 800f7d6:	9000      	str	r0, [sp, #0]
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d14b      	bne.n	800f874 <_dtoa_r+0x31c>
 800f7dc:	4b24      	ldr	r3, [pc, #144]	; (800f870 <_dtoa_r+0x318>)
 800f7de:	4602      	mov	r2, r0
 800f7e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f7e4:	e6d1      	b.n	800f58a <_dtoa_r+0x32>
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e7de      	b.n	800f7a8 <_dtoa_r+0x250>
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	9308      	str	r3, [sp, #32]
 800f7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f0:	eb0a 0903 	add.w	r9, sl, r3
 800f7f4:	f109 0301 	add.w	r3, r9, #1
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	9301      	str	r3, [sp, #4]
 800f7fc:	bfb8      	it	lt
 800f7fe:	2301      	movlt	r3, #1
 800f800:	e7dd      	b.n	800f7be <_dtoa_r+0x266>
 800f802:	2301      	movs	r3, #1
 800f804:	e7f2      	b.n	800f7ec <_dtoa_r+0x294>
 800f806:	2501      	movs	r5, #1
 800f808:	2300      	movs	r3, #0
 800f80a:	9305      	str	r3, [sp, #20]
 800f80c:	9508      	str	r5, [sp, #32]
 800f80e:	f04f 39ff 	mov.w	r9, #4294967295
 800f812:	2200      	movs	r2, #0
 800f814:	f8cd 9004 	str.w	r9, [sp, #4]
 800f818:	2312      	movs	r3, #18
 800f81a:	9209      	str	r2, [sp, #36]	; 0x24
 800f81c:	e7cf      	b.n	800f7be <_dtoa_r+0x266>
 800f81e:	2301      	movs	r3, #1
 800f820:	9308      	str	r3, [sp, #32]
 800f822:	e7f4      	b.n	800f80e <_dtoa_r+0x2b6>
 800f824:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f828:	f8cd 9004 	str.w	r9, [sp, #4]
 800f82c:	464b      	mov	r3, r9
 800f82e:	e7c6      	b.n	800f7be <_dtoa_r+0x266>
 800f830:	3101      	adds	r1, #1
 800f832:	6041      	str	r1, [r0, #4]
 800f834:	0052      	lsls	r2, r2, #1
 800f836:	e7c6      	b.n	800f7c6 <_dtoa_r+0x26e>
 800f838:	636f4361 	.word	0x636f4361
 800f83c:	3fd287a7 	.word	0x3fd287a7
 800f840:	8b60c8b3 	.word	0x8b60c8b3
 800f844:	3fc68a28 	.word	0x3fc68a28
 800f848:	509f79fb 	.word	0x509f79fb
 800f84c:	3fd34413 	.word	0x3fd34413
 800f850:	080259d0 	.word	0x080259d0
 800f854:	08025b92 	.word	0x08025b92
 800f858:	7ff00000 	.word	0x7ff00000
 800f85c:	08025b8e 	.word	0x08025b8e
 800f860:	08025b85 	.word	0x08025b85
 800f864:	08025951 	.word	0x08025951
 800f868:	3ff80000 	.word	0x3ff80000
 800f86c:	08025d08 	.word	0x08025d08
 800f870:	08025bf1 	.word	0x08025bf1
 800f874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f876:	9a00      	ldr	r2, [sp, #0]
 800f878:	601a      	str	r2, [r3, #0]
 800f87a:	9b01      	ldr	r3, [sp, #4]
 800f87c:	2b0e      	cmp	r3, #14
 800f87e:	f200 80ad 	bhi.w	800f9dc <_dtoa_r+0x484>
 800f882:	2d00      	cmp	r5, #0
 800f884:	f000 80aa 	beq.w	800f9dc <_dtoa_r+0x484>
 800f888:	f1ba 0f00 	cmp.w	sl, #0
 800f88c:	dd36      	ble.n	800f8fc <_dtoa_r+0x3a4>
 800f88e:	4ac3      	ldr	r2, [pc, #780]	; (800fb9c <_dtoa_r+0x644>)
 800f890:	f00a 030f 	and.w	r3, sl, #15
 800f894:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f898:	ed93 7b00 	vldr	d7, [r3]
 800f89c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f8a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f8a4:	eeb0 8a47 	vmov.f32	s16, s14
 800f8a8:	eef0 8a67 	vmov.f32	s17, s15
 800f8ac:	d016      	beq.n	800f8dc <_dtoa_r+0x384>
 800f8ae:	4bbc      	ldr	r3, [pc, #752]	; (800fba0 <_dtoa_r+0x648>)
 800f8b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f8b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f8b8:	f7f0 ffe0 	bl	800087c <__aeabi_ddiv>
 800f8bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8c0:	f007 070f 	and.w	r7, r7, #15
 800f8c4:	2503      	movs	r5, #3
 800f8c6:	4eb6      	ldr	r6, [pc, #728]	; (800fba0 <_dtoa_r+0x648>)
 800f8c8:	b957      	cbnz	r7, 800f8e0 <_dtoa_r+0x388>
 800f8ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8ce:	ec53 2b18 	vmov	r2, r3, d8
 800f8d2:	f7f0 ffd3 	bl	800087c <__aeabi_ddiv>
 800f8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8da:	e029      	b.n	800f930 <_dtoa_r+0x3d8>
 800f8dc:	2502      	movs	r5, #2
 800f8de:	e7f2      	b.n	800f8c6 <_dtoa_r+0x36e>
 800f8e0:	07f9      	lsls	r1, r7, #31
 800f8e2:	d508      	bpl.n	800f8f6 <_dtoa_r+0x39e>
 800f8e4:	ec51 0b18 	vmov	r0, r1, d8
 800f8e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f8ec:	f7f0 fe9c 	bl	8000628 <__aeabi_dmul>
 800f8f0:	ec41 0b18 	vmov	d8, r0, r1
 800f8f4:	3501      	adds	r5, #1
 800f8f6:	107f      	asrs	r7, r7, #1
 800f8f8:	3608      	adds	r6, #8
 800f8fa:	e7e5      	b.n	800f8c8 <_dtoa_r+0x370>
 800f8fc:	f000 80a6 	beq.w	800fa4c <_dtoa_r+0x4f4>
 800f900:	f1ca 0600 	rsb	r6, sl, #0
 800f904:	4ba5      	ldr	r3, [pc, #660]	; (800fb9c <_dtoa_r+0x644>)
 800f906:	4fa6      	ldr	r7, [pc, #664]	; (800fba0 <_dtoa_r+0x648>)
 800f908:	f006 020f 	and.w	r2, r6, #15
 800f90c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f914:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f918:	f7f0 fe86 	bl	8000628 <__aeabi_dmul>
 800f91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f920:	1136      	asrs	r6, r6, #4
 800f922:	2300      	movs	r3, #0
 800f924:	2502      	movs	r5, #2
 800f926:	2e00      	cmp	r6, #0
 800f928:	f040 8085 	bne.w	800fa36 <_dtoa_r+0x4de>
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1d2      	bne.n	800f8d6 <_dtoa_r+0x37e>
 800f930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f932:	2b00      	cmp	r3, #0
 800f934:	f000 808c 	beq.w	800fa50 <_dtoa_r+0x4f8>
 800f938:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f93c:	4b99      	ldr	r3, [pc, #612]	; (800fba4 <_dtoa_r+0x64c>)
 800f93e:	2200      	movs	r2, #0
 800f940:	4630      	mov	r0, r6
 800f942:	4639      	mov	r1, r7
 800f944:	f7f1 f8e2 	bl	8000b0c <__aeabi_dcmplt>
 800f948:	2800      	cmp	r0, #0
 800f94a:	f000 8081 	beq.w	800fa50 <_dtoa_r+0x4f8>
 800f94e:	9b01      	ldr	r3, [sp, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d07d      	beq.n	800fa50 <_dtoa_r+0x4f8>
 800f954:	f1b9 0f00 	cmp.w	r9, #0
 800f958:	dd3c      	ble.n	800f9d4 <_dtoa_r+0x47c>
 800f95a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f95e:	9307      	str	r3, [sp, #28]
 800f960:	2200      	movs	r2, #0
 800f962:	4b91      	ldr	r3, [pc, #580]	; (800fba8 <_dtoa_r+0x650>)
 800f964:	4630      	mov	r0, r6
 800f966:	4639      	mov	r1, r7
 800f968:	f7f0 fe5e 	bl	8000628 <__aeabi_dmul>
 800f96c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f970:	3501      	adds	r5, #1
 800f972:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f976:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f97a:	4628      	mov	r0, r5
 800f97c:	f7f0 fdea 	bl	8000554 <__aeabi_i2d>
 800f980:	4632      	mov	r2, r6
 800f982:	463b      	mov	r3, r7
 800f984:	f7f0 fe50 	bl	8000628 <__aeabi_dmul>
 800f988:	4b88      	ldr	r3, [pc, #544]	; (800fbac <_dtoa_r+0x654>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	f7f0 fc96 	bl	80002bc <__adddf3>
 800f990:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f998:	9303      	str	r3, [sp, #12]
 800f99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d15c      	bne.n	800fa5a <_dtoa_r+0x502>
 800f9a0:	4b83      	ldr	r3, [pc, #524]	; (800fbb0 <_dtoa_r+0x658>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	4639      	mov	r1, r7
 800f9a8:	f7f0 fc86 	bl	80002b8 <__aeabi_dsub>
 800f9ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9b0:	4606      	mov	r6, r0
 800f9b2:	460f      	mov	r7, r1
 800f9b4:	f7f1 f8c8 	bl	8000b48 <__aeabi_dcmpgt>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	f040 8296 	bne.w	800feea <_dtoa_r+0x992>
 800f9be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9c8:	4639      	mov	r1, r7
 800f9ca:	f7f1 f89f 	bl	8000b0c <__aeabi_dcmplt>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	f040 8288 	bne.w	800fee4 <_dtoa_r+0x98c>
 800f9d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f9d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	f2c0 8158 	blt.w	800fc94 <_dtoa_r+0x73c>
 800f9e4:	f1ba 0f0e 	cmp.w	sl, #14
 800f9e8:	f300 8154 	bgt.w	800fc94 <_dtoa_r+0x73c>
 800f9ec:	4b6b      	ldr	r3, [pc, #428]	; (800fb9c <_dtoa_r+0x644>)
 800f9ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f9f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	f280 80e3 	bge.w	800fbc4 <_dtoa_r+0x66c>
 800f9fe:	9b01      	ldr	r3, [sp, #4]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f300 80df 	bgt.w	800fbc4 <_dtoa_r+0x66c>
 800fa06:	f040 826d 	bne.w	800fee4 <_dtoa_r+0x98c>
 800fa0a:	4b69      	ldr	r3, [pc, #420]	; (800fbb0 <_dtoa_r+0x658>)
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	4640      	mov	r0, r8
 800fa10:	4649      	mov	r1, r9
 800fa12:	f7f0 fe09 	bl	8000628 <__aeabi_dmul>
 800fa16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa1a:	f7f1 f88b 	bl	8000b34 <__aeabi_dcmpge>
 800fa1e:	9e01      	ldr	r6, [sp, #4]
 800fa20:	4637      	mov	r7, r6
 800fa22:	2800      	cmp	r0, #0
 800fa24:	f040 8243 	bne.w	800feae <_dtoa_r+0x956>
 800fa28:	9d00      	ldr	r5, [sp, #0]
 800fa2a:	2331      	movs	r3, #49	; 0x31
 800fa2c:	f805 3b01 	strb.w	r3, [r5], #1
 800fa30:	f10a 0a01 	add.w	sl, sl, #1
 800fa34:	e23f      	b.n	800feb6 <_dtoa_r+0x95e>
 800fa36:	07f2      	lsls	r2, r6, #31
 800fa38:	d505      	bpl.n	800fa46 <_dtoa_r+0x4ee>
 800fa3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa3e:	f7f0 fdf3 	bl	8000628 <__aeabi_dmul>
 800fa42:	3501      	adds	r5, #1
 800fa44:	2301      	movs	r3, #1
 800fa46:	1076      	asrs	r6, r6, #1
 800fa48:	3708      	adds	r7, #8
 800fa4a:	e76c      	b.n	800f926 <_dtoa_r+0x3ce>
 800fa4c:	2502      	movs	r5, #2
 800fa4e:	e76f      	b.n	800f930 <_dtoa_r+0x3d8>
 800fa50:	9b01      	ldr	r3, [sp, #4]
 800fa52:	f8cd a01c 	str.w	sl, [sp, #28]
 800fa56:	930c      	str	r3, [sp, #48]	; 0x30
 800fa58:	e78d      	b.n	800f976 <_dtoa_r+0x41e>
 800fa5a:	9900      	ldr	r1, [sp, #0]
 800fa5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fa5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa60:	4b4e      	ldr	r3, [pc, #312]	; (800fb9c <_dtoa_r+0x644>)
 800fa62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa66:	4401      	add	r1, r0
 800fa68:	9102      	str	r1, [sp, #8]
 800fa6a:	9908      	ldr	r1, [sp, #32]
 800fa6c:	eeb0 8a47 	vmov.f32	s16, s14
 800fa70:	eef0 8a67 	vmov.f32	s17, s15
 800fa74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa7c:	2900      	cmp	r1, #0
 800fa7e:	d045      	beq.n	800fb0c <_dtoa_r+0x5b4>
 800fa80:	494c      	ldr	r1, [pc, #304]	; (800fbb4 <_dtoa_r+0x65c>)
 800fa82:	2000      	movs	r0, #0
 800fa84:	f7f0 fefa 	bl	800087c <__aeabi_ddiv>
 800fa88:	ec53 2b18 	vmov	r2, r3, d8
 800fa8c:	f7f0 fc14 	bl	80002b8 <__aeabi_dsub>
 800fa90:	9d00      	ldr	r5, [sp, #0]
 800fa92:	ec41 0b18 	vmov	d8, r0, r1
 800fa96:	4639      	mov	r1, r7
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f7f1 f875 	bl	8000b88 <__aeabi_d2iz>
 800fa9e:	900c      	str	r0, [sp, #48]	; 0x30
 800faa0:	f7f0 fd58 	bl	8000554 <__aeabi_i2d>
 800faa4:	4602      	mov	r2, r0
 800faa6:	460b      	mov	r3, r1
 800faa8:	4630      	mov	r0, r6
 800faaa:	4639      	mov	r1, r7
 800faac:	f7f0 fc04 	bl	80002b8 <__aeabi_dsub>
 800fab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fab2:	3330      	adds	r3, #48	; 0x30
 800fab4:	f805 3b01 	strb.w	r3, [r5], #1
 800fab8:	ec53 2b18 	vmov	r2, r3, d8
 800fabc:	4606      	mov	r6, r0
 800fabe:	460f      	mov	r7, r1
 800fac0:	f7f1 f824 	bl	8000b0c <__aeabi_dcmplt>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	d165      	bne.n	800fb94 <_dtoa_r+0x63c>
 800fac8:	4632      	mov	r2, r6
 800faca:	463b      	mov	r3, r7
 800facc:	4935      	ldr	r1, [pc, #212]	; (800fba4 <_dtoa_r+0x64c>)
 800face:	2000      	movs	r0, #0
 800fad0:	f7f0 fbf2 	bl	80002b8 <__aeabi_dsub>
 800fad4:	ec53 2b18 	vmov	r2, r3, d8
 800fad8:	f7f1 f818 	bl	8000b0c <__aeabi_dcmplt>
 800fadc:	2800      	cmp	r0, #0
 800fade:	f040 80b9 	bne.w	800fc54 <_dtoa_r+0x6fc>
 800fae2:	9b02      	ldr	r3, [sp, #8]
 800fae4:	429d      	cmp	r5, r3
 800fae6:	f43f af75 	beq.w	800f9d4 <_dtoa_r+0x47c>
 800faea:	4b2f      	ldr	r3, [pc, #188]	; (800fba8 <_dtoa_r+0x650>)
 800faec:	ec51 0b18 	vmov	r0, r1, d8
 800faf0:	2200      	movs	r2, #0
 800faf2:	f7f0 fd99 	bl	8000628 <__aeabi_dmul>
 800faf6:	4b2c      	ldr	r3, [pc, #176]	; (800fba8 <_dtoa_r+0x650>)
 800faf8:	ec41 0b18 	vmov	d8, r0, r1
 800fafc:	2200      	movs	r2, #0
 800fafe:	4630      	mov	r0, r6
 800fb00:	4639      	mov	r1, r7
 800fb02:	f7f0 fd91 	bl	8000628 <__aeabi_dmul>
 800fb06:	4606      	mov	r6, r0
 800fb08:	460f      	mov	r7, r1
 800fb0a:	e7c4      	b.n	800fa96 <_dtoa_r+0x53e>
 800fb0c:	ec51 0b17 	vmov	r0, r1, d7
 800fb10:	f7f0 fd8a 	bl	8000628 <__aeabi_dmul>
 800fb14:	9b02      	ldr	r3, [sp, #8]
 800fb16:	9d00      	ldr	r5, [sp, #0]
 800fb18:	930c      	str	r3, [sp, #48]	; 0x30
 800fb1a:	ec41 0b18 	vmov	d8, r0, r1
 800fb1e:	4639      	mov	r1, r7
 800fb20:	4630      	mov	r0, r6
 800fb22:	f7f1 f831 	bl	8000b88 <__aeabi_d2iz>
 800fb26:	9011      	str	r0, [sp, #68]	; 0x44
 800fb28:	f7f0 fd14 	bl	8000554 <__aeabi_i2d>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	4630      	mov	r0, r6
 800fb32:	4639      	mov	r1, r7
 800fb34:	f7f0 fbc0 	bl	80002b8 <__aeabi_dsub>
 800fb38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb3a:	3330      	adds	r3, #48	; 0x30
 800fb3c:	f805 3b01 	strb.w	r3, [r5], #1
 800fb40:	9b02      	ldr	r3, [sp, #8]
 800fb42:	429d      	cmp	r5, r3
 800fb44:	4606      	mov	r6, r0
 800fb46:	460f      	mov	r7, r1
 800fb48:	f04f 0200 	mov.w	r2, #0
 800fb4c:	d134      	bne.n	800fbb8 <_dtoa_r+0x660>
 800fb4e:	4b19      	ldr	r3, [pc, #100]	; (800fbb4 <_dtoa_r+0x65c>)
 800fb50:	ec51 0b18 	vmov	r0, r1, d8
 800fb54:	f7f0 fbb2 	bl	80002bc <__adddf3>
 800fb58:	4602      	mov	r2, r0
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	4639      	mov	r1, r7
 800fb60:	f7f0 fff2 	bl	8000b48 <__aeabi_dcmpgt>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	d175      	bne.n	800fc54 <_dtoa_r+0x6fc>
 800fb68:	ec53 2b18 	vmov	r2, r3, d8
 800fb6c:	4911      	ldr	r1, [pc, #68]	; (800fbb4 <_dtoa_r+0x65c>)
 800fb6e:	2000      	movs	r0, #0
 800fb70:	f7f0 fba2 	bl	80002b8 <__aeabi_dsub>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	4630      	mov	r0, r6
 800fb7a:	4639      	mov	r1, r7
 800fb7c:	f7f0 ffc6 	bl	8000b0c <__aeabi_dcmplt>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	f43f af27 	beq.w	800f9d4 <_dtoa_r+0x47c>
 800fb86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb88:	1e6b      	subs	r3, r5, #1
 800fb8a:	930c      	str	r3, [sp, #48]	; 0x30
 800fb8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb90:	2b30      	cmp	r3, #48	; 0x30
 800fb92:	d0f8      	beq.n	800fb86 <_dtoa_r+0x62e>
 800fb94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fb98:	e04a      	b.n	800fc30 <_dtoa_r+0x6d8>
 800fb9a:	bf00      	nop
 800fb9c:	08025d08 	.word	0x08025d08
 800fba0:	08025ce0 	.word	0x08025ce0
 800fba4:	3ff00000 	.word	0x3ff00000
 800fba8:	40240000 	.word	0x40240000
 800fbac:	401c0000 	.word	0x401c0000
 800fbb0:	40140000 	.word	0x40140000
 800fbb4:	3fe00000 	.word	0x3fe00000
 800fbb8:	4baf      	ldr	r3, [pc, #700]	; (800fe78 <_dtoa_r+0x920>)
 800fbba:	f7f0 fd35 	bl	8000628 <__aeabi_dmul>
 800fbbe:	4606      	mov	r6, r0
 800fbc0:	460f      	mov	r7, r1
 800fbc2:	e7ac      	b.n	800fb1e <_dtoa_r+0x5c6>
 800fbc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fbc8:	9d00      	ldr	r5, [sp, #0]
 800fbca:	4642      	mov	r2, r8
 800fbcc:	464b      	mov	r3, r9
 800fbce:	4630      	mov	r0, r6
 800fbd0:	4639      	mov	r1, r7
 800fbd2:	f7f0 fe53 	bl	800087c <__aeabi_ddiv>
 800fbd6:	f7f0 ffd7 	bl	8000b88 <__aeabi_d2iz>
 800fbda:	9002      	str	r0, [sp, #8]
 800fbdc:	f7f0 fcba 	bl	8000554 <__aeabi_i2d>
 800fbe0:	4642      	mov	r2, r8
 800fbe2:	464b      	mov	r3, r9
 800fbe4:	f7f0 fd20 	bl	8000628 <__aeabi_dmul>
 800fbe8:	4602      	mov	r2, r0
 800fbea:	460b      	mov	r3, r1
 800fbec:	4630      	mov	r0, r6
 800fbee:	4639      	mov	r1, r7
 800fbf0:	f7f0 fb62 	bl	80002b8 <__aeabi_dsub>
 800fbf4:	9e02      	ldr	r6, [sp, #8]
 800fbf6:	9f01      	ldr	r7, [sp, #4]
 800fbf8:	3630      	adds	r6, #48	; 0x30
 800fbfa:	f805 6b01 	strb.w	r6, [r5], #1
 800fbfe:	9e00      	ldr	r6, [sp, #0]
 800fc00:	1bae      	subs	r6, r5, r6
 800fc02:	42b7      	cmp	r7, r6
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	d137      	bne.n	800fc7a <_dtoa_r+0x722>
 800fc0a:	f7f0 fb57 	bl	80002bc <__adddf3>
 800fc0e:	4642      	mov	r2, r8
 800fc10:	464b      	mov	r3, r9
 800fc12:	4606      	mov	r6, r0
 800fc14:	460f      	mov	r7, r1
 800fc16:	f7f0 ff97 	bl	8000b48 <__aeabi_dcmpgt>
 800fc1a:	b9c8      	cbnz	r0, 800fc50 <_dtoa_r+0x6f8>
 800fc1c:	4642      	mov	r2, r8
 800fc1e:	464b      	mov	r3, r9
 800fc20:	4630      	mov	r0, r6
 800fc22:	4639      	mov	r1, r7
 800fc24:	f7f0 ff68 	bl	8000af8 <__aeabi_dcmpeq>
 800fc28:	b110      	cbz	r0, 800fc30 <_dtoa_r+0x6d8>
 800fc2a:	9b02      	ldr	r3, [sp, #8]
 800fc2c:	07d9      	lsls	r1, r3, #31
 800fc2e:	d40f      	bmi.n	800fc50 <_dtoa_r+0x6f8>
 800fc30:	4620      	mov	r0, r4
 800fc32:	4659      	mov	r1, fp
 800fc34:	f000 fe6a 	bl	801090c <_Bfree>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	702b      	strb	r3, [r5, #0]
 800fc3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc3e:	f10a 0001 	add.w	r0, sl, #1
 800fc42:	6018      	str	r0, [r3, #0]
 800fc44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	f43f acd8 	beq.w	800f5fc <_dtoa_r+0xa4>
 800fc4c:	601d      	str	r5, [r3, #0]
 800fc4e:	e4d5      	b.n	800f5fc <_dtoa_r+0xa4>
 800fc50:	f8cd a01c 	str.w	sl, [sp, #28]
 800fc54:	462b      	mov	r3, r5
 800fc56:	461d      	mov	r5, r3
 800fc58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc5c:	2a39      	cmp	r2, #57	; 0x39
 800fc5e:	d108      	bne.n	800fc72 <_dtoa_r+0x71a>
 800fc60:	9a00      	ldr	r2, [sp, #0]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d1f7      	bne.n	800fc56 <_dtoa_r+0x6fe>
 800fc66:	9a07      	ldr	r2, [sp, #28]
 800fc68:	9900      	ldr	r1, [sp, #0]
 800fc6a:	3201      	adds	r2, #1
 800fc6c:	9207      	str	r2, [sp, #28]
 800fc6e:	2230      	movs	r2, #48	; 0x30
 800fc70:	700a      	strb	r2, [r1, #0]
 800fc72:	781a      	ldrb	r2, [r3, #0]
 800fc74:	3201      	adds	r2, #1
 800fc76:	701a      	strb	r2, [r3, #0]
 800fc78:	e78c      	b.n	800fb94 <_dtoa_r+0x63c>
 800fc7a:	4b7f      	ldr	r3, [pc, #508]	; (800fe78 <_dtoa_r+0x920>)
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f7f0 fcd3 	bl	8000628 <__aeabi_dmul>
 800fc82:	2200      	movs	r2, #0
 800fc84:	2300      	movs	r3, #0
 800fc86:	4606      	mov	r6, r0
 800fc88:	460f      	mov	r7, r1
 800fc8a:	f7f0 ff35 	bl	8000af8 <__aeabi_dcmpeq>
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d09b      	beq.n	800fbca <_dtoa_r+0x672>
 800fc92:	e7cd      	b.n	800fc30 <_dtoa_r+0x6d8>
 800fc94:	9a08      	ldr	r2, [sp, #32]
 800fc96:	2a00      	cmp	r2, #0
 800fc98:	f000 80c4 	beq.w	800fe24 <_dtoa_r+0x8cc>
 800fc9c:	9a05      	ldr	r2, [sp, #20]
 800fc9e:	2a01      	cmp	r2, #1
 800fca0:	f300 80a8 	bgt.w	800fdf4 <_dtoa_r+0x89c>
 800fca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fca6:	2a00      	cmp	r2, #0
 800fca8:	f000 80a0 	beq.w	800fdec <_dtoa_r+0x894>
 800fcac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fcb0:	9e06      	ldr	r6, [sp, #24]
 800fcb2:	4645      	mov	r5, r8
 800fcb4:	9a04      	ldr	r2, [sp, #16]
 800fcb6:	2101      	movs	r1, #1
 800fcb8:	441a      	add	r2, r3
 800fcba:	4620      	mov	r0, r4
 800fcbc:	4498      	add	r8, r3
 800fcbe:	9204      	str	r2, [sp, #16]
 800fcc0:	f000 ff2a 	bl	8010b18 <__i2b>
 800fcc4:	4607      	mov	r7, r0
 800fcc6:	2d00      	cmp	r5, #0
 800fcc8:	dd0b      	ble.n	800fce2 <_dtoa_r+0x78a>
 800fcca:	9b04      	ldr	r3, [sp, #16]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	dd08      	ble.n	800fce2 <_dtoa_r+0x78a>
 800fcd0:	42ab      	cmp	r3, r5
 800fcd2:	9a04      	ldr	r2, [sp, #16]
 800fcd4:	bfa8      	it	ge
 800fcd6:	462b      	movge	r3, r5
 800fcd8:	eba8 0803 	sub.w	r8, r8, r3
 800fcdc:	1aed      	subs	r5, r5, r3
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	9304      	str	r3, [sp, #16]
 800fce2:	9b06      	ldr	r3, [sp, #24]
 800fce4:	b1fb      	cbz	r3, 800fd26 <_dtoa_r+0x7ce>
 800fce6:	9b08      	ldr	r3, [sp, #32]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f000 809f 	beq.w	800fe2c <_dtoa_r+0x8d4>
 800fcee:	2e00      	cmp	r6, #0
 800fcf0:	dd11      	ble.n	800fd16 <_dtoa_r+0x7be>
 800fcf2:	4639      	mov	r1, r7
 800fcf4:	4632      	mov	r2, r6
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f000 ffca 	bl	8010c90 <__pow5mult>
 800fcfc:	465a      	mov	r2, fp
 800fcfe:	4601      	mov	r1, r0
 800fd00:	4607      	mov	r7, r0
 800fd02:	4620      	mov	r0, r4
 800fd04:	f000 ff1e 	bl	8010b44 <__multiply>
 800fd08:	4659      	mov	r1, fp
 800fd0a:	9007      	str	r0, [sp, #28]
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f000 fdfd 	bl	801090c <_Bfree>
 800fd12:	9b07      	ldr	r3, [sp, #28]
 800fd14:	469b      	mov	fp, r3
 800fd16:	9b06      	ldr	r3, [sp, #24]
 800fd18:	1b9a      	subs	r2, r3, r6
 800fd1a:	d004      	beq.n	800fd26 <_dtoa_r+0x7ce>
 800fd1c:	4659      	mov	r1, fp
 800fd1e:	4620      	mov	r0, r4
 800fd20:	f000 ffb6 	bl	8010c90 <__pow5mult>
 800fd24:	4683      	mov	fp, r0
 800fd26:	2101      	movs	r1, #1
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f000 fef5 	bl	8010b18 <__i2b>
 800fd2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	4606      	mov	r6, r0
 800fd34:	dd7c      	ble.n	800fe30 <_dtoa_r+0x8d8>
 800fd36:	461a      	mov	r2, r3
 800fd38:	4601      	mov	r1, r0
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f000 ffa8 	bl	8010c90 <__pow5mult>
 800fd40:	9b05      	ldr	r3, [sp, #20]
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	4606      	mov	r6, r0
 800fd46:	dd76      	ble.n	800fe36 <_dtoa_r+0x8de>
 800fd48:	2300      	movs	r3, #0
 800fd4a:	9306      	str	r3, [sp, #24]
 800fd4c:	6933      	ldr	r3, [r6, #16]
 800fd4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fd52:	6918      	ldr	r0, [r3, #16]
 800fd54:	f000 fe90 	bl	8010a78 <__hi0bits>
 800fd58:	f1c0 0020 	rsb	r0, r0, #32
 800fd5c:	9b04      	ldr	r3, [sp, #16]
 800fd5e:	4418      	add	r0, r3
 800fd60:	f010 001f 	ands.w	r0, r0, #31
 800fd64:	f000 8086 	beq.w	800fe74 <_dtoa_r+0x91c>
 800fd68:	f1c0 0320 	rsb	r3, r0, #32
 800fd6c:	2b04      	cmp	r3, #4
 800fd6e:	dd7f      	ble.n	800fe70 <_dtoa_r+0x918>
 800fd70:	f1c0 001c 	rsb	r0, r0, #28
 800fd74:	9b04      	ldr	r3, [sp, #16]
 800fd76:	4403      	add	r3, r0
 800fd78:	4480      	add	r8, r0
 800fd7a:	4405      	add	r5, r0
 800fd7c:	9304      	str	r3, [sp, #16]
 800fd7e:	f1b8 0f00 	cmp.w	r8, #0
 800fd82:	dd05      	ble.n	800fd90 <_dtoa_r+0x838>
 800fd84:	4659      	mov	r1, fp
 800fd86:	4642      	mov	r2, r8
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f000 ffdb 	bl	8010d44 <__lshift>
 800fd8e:	4683      	mov	fp, r0
 800fd90:	9b04      	ldr	r3, [sp, #16]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	dd05      	ble.n	800fda2 <_dtoa_r+0x84a>
 800fd96:	4631      	mov	r1, r6
 800fd98:	461a      	mov	r2, r3
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f000 ffd2 	bl	8010d44 <__lshift>
 800fda0:	4606      	mov	r6, r0
 800fda2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d069      	beq.n	800fe7c <_dtoa_r+0x924>
 800fda8:	4631      	mov	r1, r6
 800fdaa:	4658      	mov	r0, fp
 800fdac:	f001 f836 	bl	8010e1c <__mcmp>
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	da63      	bge.n	800fe7c <_dtoa_r+0x924>
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	4659      	mov	r1, fp
 800fdb8:	220a      	movs	r2, #10
 800fdba:	4620      	mov	r0, r4
 800fdbc:	f000 fdc8 	bl	8010950 <__multadd>
 800fdc0:	9b08      	ldr	r3, [sp, #32]
 800fdc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdc6:	4683      	mov	fp, r0
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	f000 818f 	beq.w	80100ec <_dtoa_r+0xb94>
 800fdce:	4639      	mov	r1, r7
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	220a      	movs	r2, #10
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f000 fdbb 	bl	8010950 <__multadd>
 800fdda:	f1b9 0f00 	cmp.w	r9, #0
 800fdde:	4607      	mov	r7, r0
 800fde0:	f300 808e 	bgt.w	800ff00 <_dtoa_r+0x9a8>
 800fde4:	9b05      	ldr	r3, [sp, #20]
 800fde6:	2b02      	cmp	r3, #2
 800fde8:	dc50      	bgt.n	800fe8c <_dtoa_r+0x934>
 800fdea:	e089      	b.n	800ff00 <_dtoa_r+0x9a8>
 800fdec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fdee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fdf2:	e75d      	b.n	800fcb0 <_dtoa_r+0x758>
 800fdf4:	9b01      	ldr	r3, [sp, #4]
 800fdf6:	1e5e      	subs	r6, r3, #1
 800fdf8:	9b06      	ldr	r3, [sp, #24]
 800fdfa:	42b3      	cmp	r3, r6
 800fdfc:	bfbf      	itttt	lt
 800fdfe:	9b06      	ldrlt	r3, [sp, #24]
 800fe00:	9606      	strlt	r6, [sp, #24]
 800fe02:	1af2      	sublt	r2, r6, r3
 800fe04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fe06:	bfb6      	itet	lt
 800fe08:	189b      	addlt	r3, r3, r2
 800fe0a:	1b9e      	subge	r6, r3, r6
 800fe0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fe0e:	9b01      	ldr	r3, [sp, #4]
 800fe10:	bfb8      	it	lt
 800fe12:	2600      	movlt	r6, #0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	bfb5      	itete	lt
 800fe18:	eba8 0503 	sublt.w	r5, r8, r3
 800fe1c:	9b01      	ldrge	r3, [sp, #4]
 800fe1e:	2300      	movlt	r3, #0
 800fe20:	4645      	movge	r5, r8
 800fe22:	e747      	b.n	800fcb4 <_dtoa_r+0x75c>
 800fe24:	9e06      	ldr	r6, [sp, #24]
 800fe26:	9f08      	ldr	r7, [sp, #32]
 800fe28:	4645      	mov	r5, r8
 800fe2a:	e74c      	b.n	800fcc6 <_dtoa_r+0x76e>
 800fe2c:	9a06      	ldr	r2, [sp, #24]
 800fe2e:	e775      	b.n	800fd1c <_dtoa_r+0x7c4>
 800fe30:	9b05      	ldr	r3, [sp, #20]
 800fe32:	2b01      	cmp	r3, #1
 800fe34:	dc18      	bgt.n	800fe68 <_dtoa_r+0x910>
 800fe36:	9b02      	ldr	r3, [sp, #8]
 800fe38:	b9b3      	cbnz	r3, 800fe68 <_dtoa_r+0x910>
 800fe3a:	9b03      	ldr	r3, [sp, #12]
 800fe3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe40:	b9a3      	cbnz	r3, 800fe6c <_dtoa_r+0x914>
 800fe42:	9b03      	ldr	r3, [sp, #12]
 800fe44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe48:	0d1b      	lsrs	r3, r3, #20
 800fe4a:	051b      	lsls	r3, r3, #20
 800fe4c:	b12b      	cbz	r3, 800fe5a <_dtoa_r+0x902>
 800fe4e:	9b04      	ldr	r3, [sp, #16]
 800fe50:	3301      	adds	r3, #1
 800fe52:	9304      	str	r3, [sp, #16]
 800fe54:	f108 0801 	add.w	r8, r8, #1
 800fe58:	2301      	movs	r3, #1
 800fe5a:	9306      	str	r3, [sp, #24]
 800fe5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f47f af74 	bne.w	800fd4c <_dtoa_r+0x7f4>
 800fe64:	2001      	movs	r0, #1
 800fe66:	e779      	b.n	800fd5c <_dtoa_r+0x804>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	e7f6      	b.n	800fe5a <_dtoa_r+0x902>
 800fe6c:	9b02      	ldr	r3, [sp, #8]
 800fe6e:	e7f4      	b.n	800fe5a <_dtoa_r+0x902>
 800fe70:	d085      	beq.n	800fd7e <_dtoa_r+0x826>
 800fe72:	4618      	mov	r0, r3
 800fe74:	301c      	adds	r0, #28
 800fe76:	e77d      	b.n	800fd74 <_dtoa_r+0x81c>
 800fe78:	40240000 	.word	0x40240000
 800fe7c:	9b01      	ldr	r3, [sp, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	dc38      	bgt.n	800fef4 <_dtoa_r+0x99c>
 800fe82:	9b05      	ldr	r3, [sp, #20]
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	dd35      	ble.n	800fef4 <_dtoa_r+0x99c>
 800fe88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fe8c:	f1b9 0f00 	cmp.w	r9, #0
 800fe90:	d10d      	bne.n	800feae <_dtoa_r+0x956>
 800fe92:	4631      	mov	r1, r6
 800fe94:	464b      	mov	r3, r9
 800fe96:	2205      	movs	r2, #5
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f000 fd59 	bl	8010950 <__multadd>
 800fe9e:	4601      	mov	r1, r0
 800fea0:	4606      	mov	r6, r0
 800fea2:	4658      	mov	r0, fp
 800fea4:	f000 ffba 	bl	8010e1c <__mcmp>
 800fea8:	2800      	cmp	r0, #0
 800feaa:	f73f adbd 	bgt.w	800fa28 <_dtoa_r+0x4d0>
 800feae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feb0:	9d00      	ldr	r5, [sp, #0]
 800feb2:	ea6f 0a03 	mvn.w	sl, r3
 800feb6:	f04f 0800 	mov.w	r8, #0
 800feba:	4631      	mov	r1, r6
 800febc:	4620      	mov	r0, r4
 800febe:	f000 fd25 	bl	801090c <_Bfree>
 800fec2:	2f00      	cmp	r7, #0
 800fec4:	f43f aeb4 	beq.w	800fc30 <_dtoa_r+0x6d8>
 800fec8:	f1b8 0f00 	cmp.w	r8, #0
 800fecc:	d005      	beq.n	800feda <_dtoa_r+0x982>
 800fece:	45b8      	cmp	r8, r7
 800fed0:	d003      	beq.n	800feda <_dtoa_r+0x982>
 800fed2:	4641      	mov	r1, r8
 800fed4:	4620      	mov	r0, r4
 800fed6:	f000 fd19 	bl	801090c <_Bfree>
 800feda:	4639      	mov	r1, r7
 800fedc:	4620      	mov	r0, r4
 800fede:	f000 fd15 	bl	801090c <_Bfree>
 800fee2:	e6a5      	b.n	800fc30 <_dtoa_r+0x6d8>
 800fee4:	2600      	movs	r6, #0
 800fee6:	4637      	mov	r7, r6
 800fee8:	e7e1      	b.n	800feae <_dtoa_r+0x956>
 800feea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800feec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fef0:	4637      	mov	r7, r6
 800fef2:	e599      	b.n	800fa28 <_dtoa_r+0x4d0>
 800fef4:	9b08      	ldr	r3, [sp, #32]
 800fef6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	f000 80fd 	beq.w	80100fa <_dtoa_r+0xba2>
 800ff00:	2d00      	cmp	r5, #0
 800ff02:	dd05      	ble.n	800ff10 <_dtoa_r+0x9b8>
 800ff04:	4639      	mov	r1, r7
 800ff06:	462a      	mov	r2, r5
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f000 ff1b 	bl	8010d44 <__lshift>
 800ff0e:	4607      	mov	r7, r0
 800ff10:	9b06      	ldr	r3, [sp, #24]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d05c      	beq.n	800ffd0 <_dtoa_r+0xa78>
 800ff16:	6879      	ldr	r1, [r7, #4]
 800ff18:	4620      	mov	r0, r4
 800ff1a:	f000 fcb7 	bl	801088c <_Balloc>
 800ff1e:	4605      	mov	r5, r0
 800ff20:	b928      	cbnz	r0, 800ff2e <_dtoa_r+0x9d6>
 800ff22:	4b80      	ldr	r3, [pc, #512]	; (8010124 <_dtoa_r+0xbcc>)
 800ff24:	4602      	mov	r2, r0
 800ff26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ff2a:	f7ff bb2e 	b.w	800f58a <_dtoa_r+0x32>
 800ff2e:	693a      	ldr	r2, [r7, #16]
 800ff30:	3202      	adds	r2, #2
 800ff32:	0092      	lsls	r2, r2, #2
 800ff34:	f107 010c 	add.w	r1, r7, #12
 800ff38:	300c      	adds	r0, #12
 800ff3a:	f000 fc99 	bl	8010870 <memcpy>
 800ff3e:	2201      	movs	r2, #1
 800ff40:	4629      	mov	r1, r5
 800ff42:	4620      	mov	r0, r4
 800ff44:	f000 fefe 	bl	8010d44 <__lshift>
 800ff48:	9b00      	ldr	r3, [sp, #0]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	9301      	str	r3, [sp, #4]
 800ff4e:	9b00      	ldr	r3, [sp, #0]
 800ff50:	444b      	add	r3, r9
 800ff52:	9307      	str	r3, [sp, #28]
 800ff54:	9b02      	ldr	r3, [sp, #8]
 800ff56:	f003 0301 	and.w	r3, r3, #1
 800ff5a:	46b8      	mov	r8, r7
 800ff5c:	9306      	str	r3, [sp, #24]
 800ff5e:	4607      	mov	r7, r0
 800ff60:	9b01      	ldr	r3, [sp, #4]
 800ff62:	4631      	mov	r1, r6
 800ff64:	3b01      	subs	r3, #1
 800ff66:	4658      	mov	r0, fp
 800ff68:	9302      	str	r3, [sp, #8]
 800ff6a:	f7ff fa67 	bl	800f43c <quorem>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	3330      	adds	r3, #48	; 0x30
 800ff72:	9004      	str	r0, [sp, #16]
 800ff74:	4641      	mov	r1, r8
 800ff76:	4658      	mov	r0, fp
 800ff78:	9308      	str	r3, [sp, #32]
 800ff7a:	f000 ff4f 	bl	8010e1c <__mcmp>
 800ff7e:	463a      	mov	r2, r7
 800ff80:	4681      	mov	r9, r0
 800ff82:	4631      	mov	r1, r6
 800ff84:	4620      	mov	r0, r4
 800ff86:	f000 ff65 	bl	8010e54 <__mdiff>
 800ff8a:	68c2      	ldr	r2, [r0, #12]
 800ff8c:	9b08      	ldr	r3, [sp, #32]
 800ff8e:	4605      	mov	r5, r0
 800ff90:	bb02      	cbnz	r2, 800ffd4 <_dtoa_r+0xa7c>
 800ff92:	4601      	mov	r1, r0
 800ff94:	4658      	mov	r0, fp
 800ff96:	f000 ff41 	bl	8010e1c <__mcmp>
 800ff9a:	9b08      	ldr	r3, [sp, #32]
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	4629      	mov	r1, r5
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ffa6:	f000 fcb1 	bl	801090c <_Bfree>
 800ffaa:	9b05      	ldr	r3, [sp, #20]
 800ffac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffae:	9d01      	ldr	r5, [sp, #4]
 800ffb0:	ea43 0102 	orr.w	r1, r3, r2
 800ffb4:	9b06      	ldr	r3, [sp, #24]
 800ffb6:	430b      	orrs	r3, r1
 800ffb8:	9b08      	ldr	r3, [sp, #32]
 800ffba:	d10d      	bne.n	800ffd8 <_dtoa_r+0xa80>
 800ffbc:	2b39      	cmp	r3, #57	; 0x39
 800ffbe:	d029      	beq.n	8010014 <_dtoa_r+0xabc>
 800ffc0:	f1b9 0f00 	cmp.w	r9, #0
 800ffc4:	dd01      	ble.n	800ffca <_dtoa_r+0xa72>
 800ffc6:	9b04      	ldr	r3, [sp, #16]
 800ffc8:	3331      	adds	r3, #49	; 0x31
 800ffca:	9a02      	ldr	r2, [sp, #8]
 800ffcc:	7013      	strb	r3, [r2, #0]
 800ffce:	e774      	b.n	800feba <_dtoa_r+0x962>
 800ffd0:	4638      	mov	r0, r7
 800ffd2:	e7b9      	b.n	800ff48 <_dtoa_r+0x9f0>
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	e7e2      	b.n	800ff9e <_dtoa_r+0xa46>
 800ffd8:	f1b9 0f00 	cmp.w	r9, #0
 800ffdc:	db06      	blt.n	800ffec <_dtoa_r+0xa94>
 800ffde:	9905      	ldr	r1, [sp, #20]
 800ffe0:	ea41 0909 	orr.w	r9, r1, r9
 800ffe4:	9906      	ldr	r1, [sp, #24]
 800ffe6:	ea59 0101 	orrs.w	r1, r9, r1
 800ffea:	d120      	bne.n	801002e <_dtoa_r+0xad6>
 800ffec:	2a00      	cmp	r2, #0
 800ffee:	ddec      	ble.n	800ffca <_dtoa_r+0xa72>
 800fff0:	4659      	mov	r1, fp
 800fff2:	2201      	movs	r2, #1
 800fff4:	4620      	mov	r0, r4
 800fff6:	9301      	str	r3, [sp, #4]
 800fff8:	f000 fea4 	bl	8010d44 <__lshift>
 800fffc:	4631      	mov	r1, r6
 800fffe:	4683      	mov	fp, r0
 8010000:	f000 ff0c 	bl	8010e1c <__mcmp>
 8010004:	2800      	cmp	r0, #0
 8010006:	9b01      	ldr	r3, [sp, #4]
 8010008:	dc02      	bgt.n	8010010 <_dtoa_r+0xab8>
 801000a:	d1de      	bne.n	800ffca <_dtoa_r+0xa72>
 801000c:	07da      	lsls	r2, r3, #31
 801000e:	d5dc      	bpl.n	800ffca <_dtoa_r+0xa72>
 8010010:	2b39      	cmp	r3, #57	; 0x39
 8010012:	d1d8      	bne.n	800ffc6 <_dtoa_r+0xa6e>
 8010014:	9a02      	ldr	r2, [sp, #8]
 8010016:	2339      	movs	r3, #57	; 0x39
 8010018:	7013      	strb	r3, [r2, #0]
 801001a:	462b      	mov	r3, r5
 801001c:	461d      	mov	r5, r3
 801001e:	3b01      	subs	r3, #1
 8010020:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010024:	2a39      	cmp	r2, #57	; 0x39
 8010026:	d050      	beq.n	80100ca <_dtoa_r+0xb72>
 8010028:	3201      	adds	r2, #1
 801002a:	701a      	strb	r2, [r3, #0]
 801002c:	e745      	b.n	800feba <_dtoa_r+0x962>
 801002e:	2a00      	cmp	r2, #0
 8010030:	dd03      	ble.n	801003a <_dtoa_r+0xae2>
 8010032:	2b39      	cmp	r3, #57	; 0x39
 8010034:	d0ee      	beq.n	8010014 <_dtoa_r+0xabc>
 8010036:	3301      	adds	r3, #1
 8010038:	e7c7      	b.n	800ffca <_dtoa_r+0xa72>
 801003a:	9a01      	ldr	r2, [sp, #4]
 801003c:	9907      	ldr	r1, [sp, #28]
 801003e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010042:	428a      	cmp	r2, r1
 8010044:	d02a      	beq.n	801009c <_dtoa_r+0xb44>
 8010046:	4659      	mov	r1, fp
 8010048:	2300      	movs	r3, #0
 801004a:	220a      	movs	r2, #10
 801004c:	4620      	mov	r0, r4
 801004e:	f000 fc7f 	bl	8010950 <__multadd>
 8010052:	45b8      	cmp	r8, r7
 8010054:	4683      	mov	fp, r0
 8010056:	f04f 0300 	mov.w	r3, #0
 801005a:	f04f 020a 	mov.w	r2, #10
 801005e:	4641      	mov	r1, r8
 8010060:	4620      	mov	r0, r4
 8010062:	d107      	bne.n	8010074 <_dtoa_r+0xb1c>
 8010064:	f000 fc74 	bl	8010950 <__multadd>
 8010068:	4680      	mov	r8, r0
 801006a:	4607      	mov	r7, r0
 801006c:	9b01      	ldr	r3, [sp, #4]
 801006e:	3301      	adds	r3, #1
 8010070:	9301      	str	r3, [sp, #4]
 8010072:	e775      	b.n	800ff60 <_dtoa_r+0xa08>
 8010074:	f000 fc6c 	bl	8010950 <__multadd>
 8010078:	4639      	mov	r1, r7
 801007a:	4680      	mov	r8, r0
 801007c:	2300      	movs	r3, #0
 801007e:	220a      	movs	r2, #10
 8010080:	4620      	mov	r0, r4
 8010082:	f000 fc65 	bl	8010950 <__multadd>
 8010086:	4607      	mov	r7, r0
 8010088:	e7f0      	b.n	801006c <_dtoa_r+0xb14>
 801008a:	f1b9 0f00 	cmp.w	r9, #0
 801008e:	9a00      	ldr	r2, [sp, #0]
 8010090:	bfcc      	ite	gt
 8010092:	464d      	movgt	r5, r9
 8010094:	2501      	movle	r5, #1
 8010096:	4415      	add	r5, r2
 8010098:	f04f 0800 	mov.w	r8, #0
 801009c:	4659      	mov	r1, fp
 801009e:	2201      	movs	r2, #1
 80100a0:	4620      	mov	r0, r4
 80100a2:	9301      	str	r3, [sp, #4]
 80100a4:	f000 fe4e 	bl	8010d44 <__lshift>
 80100a8:	4631      	mov	r1, r6
 80100aa:	4683      	mov	fp, r0
 80100ac:	f000 feb6 	bl	8010e1c <__mcmp>
 80100b0:	2800      	cmp	r0, #0
 80100b2:	dcb2      	bgt.n	801001a <_dtoa_r+0xac2>
 80100b4:	d102      	bne.n	80100bc <_dtoa_r+0xb64>
 80100b6:	9b01      	ldr	r3, [sp, #4]
 80100b8:	07db      	lsls	r3, r3, #31
 80100ba:	d4ae      	bmi.n	801001a <_dtoa_r+0xac2>
 80100bc:	462b      	mov	r3, r5
 80100be:	461d      	mov	r5, r3
 80100c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100c4:	2a30      	cmp	r2, #48	; 0x30
 80100c6:	d0fa      	beq.n	80100be <_dtoa_r+0xb66>
 80100c8:	e6f7      	b.n	800feba <_dtoa_r+0x962>
 80100ca:	9a00      	ldr	r2, [sp, #0]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d1a5      	bne.n	801001c <_dtoa_r+0xac4>
 80100d0:	f10a 0a01 	add.w	sl, sl, #1
 80100d4:	2331      	movs	r3, #49	; 0x31
 80100d6:	e779      	b.n	800ffcc <_dtoa_r+0xa74>
 80100d8:	4b13      	ldr	r3, [pc, #76]	; (8010128 <_dtoa_r+0xbd0>)
 80100da:	f7ff baaf 	b.w	800f63c <_dtoa_r+0xe4>
 80100de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f47f aa86 	bne.w	800f5f2 <_dtoa_r+0x9a>
 80100e6:	4b11      	ldr	r3, [pc, #68]	; (801012c <_dtoa_r+0xbd4>)
 80100e8:	f7ff baa8 	b.w	800f63c <_dtoa_r+0xe4>
 80100ec:	f1b9 0f00 	cmp.w	r9, #0
 80100f0:	dc03      	bgt.n	80100fa <_dtoa_r+0xba2>
 80100f2:	9b05      	ldr	r3, [sp, #20]
 80100f4:	2b02      	cmp	r3, #2
 80100f6:	f73f aec9 	bgt.w	800fe8c <_dtoa_r+0x934>
 80100fa:	9d00      	ldr	r5, [sp, #0]
 80100fc:	4631      	mov	r1, r6
 80100fe:	4658      	mov	r0, fp
 8010100:	f7ff f99c 	bl	800f43c <quorem>
 8010104:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010108:	f805 3b01 	strb.w	r3, [r5], #1
 801010c:	9a00      	ldr	r2, [sp, #0]
 801010e:	1aaa      	subs	r2, r5, r2
 8010110:	4591      	cmp	r9, r2
 8010112:	ddba      	ble.n	801008a <_dtoa_r+0xb32>
 8010114:	4659      	mov	r1, fp
 8010116:	2300      	movs	r3, #0
 8010118:	220a      	movs	r2, #10
 801011a:	4620      	mov	r0, r4
 801011c:	f000 fc18 	bl	8010950 <__multadd>
 8010120:	4683      	mov	fp, r0
 8010122:	e7eb      	b.n	80100fc <_dtoa_r+0xba4>
 8010124:	08025bf1 	.word	0x08025bf1
 8010128:	08025950 	.word	0x08025950
 801012c:	08025b85 	.word	0x08025b85

08010130 <fiprintf>:
 8010130:	b40e      	push	{r1, r2, r3}
 8010132:	b503      	push	{r0, r1, lr}
 8010134:	4601      	mov	r1, r0
 8010136:	ab03      	add	r3, sp, #12
 8010138:	4805      	ldr	r0, [pc, #20]	; (8010150 <fiprintf+0x20>)
 801013a:	f853 2b04 	ldr.w	r2, [r3], #4
 801013e:	6800      	ldr	r0, [r0, #0]
 8010140:	9301      	str	r3, [sp, #4]
 8010142:	f001 fa9d 	bl	8011680 <_vfiprintf_r>
 8010146:	b002      	add	sp, #8
 8010148:	f85d eb04 	ldr.w	lr, [sp], #4
 801014c:	b003      	add	sp, #12
 801014e:	4770      	bx	lr
 8010150:	20000040 	.word	0x20000040

08010154 <rshift>:
 8010154:	6903      	ldr	r3, [r0, #16]
 8010156:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801015a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801015e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010162:	f100 0414 	add.w	r4, r0, #20
 8010166:	dd45      	ble.n	80101f4 <rshift+0xa0>
 8010168:	f011 011f 	ands.w	r1, r1, #31
 801016c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010170:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010174:	d10c      	bne.n	8010190 <rshift+0x3c>
 8010176:	f100 0710 	add.w	r7, r0, #16
 801017a:	4629      	mov	r1, r5
 801017c:	42b1      	cmp	r1, r6
 801017e:	d334      	bcc.n	80101ea <rshift+0x96>
 8010180:	1a9b      	subs	r3, r3, r2
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	1eea      	subs	r2, r5, #3
 8010186:	4296      	cmp	r6, r2
 8010188:	bf38      	it	cc
 801018a:	2300      	movcc	r3, #0
 801018c:	4423      	add	r3, r4
 801018e:	e015      	b.n	80101bc <rshift+0x68>
 8010190:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010194:	f1c1 0820 	rsb	r8, r1, #32
 8010198:	40cf      	lsrs	r7, r1
 801019a:	f105 0e04 	add.w	lr, r5, #4
 801019e:	46a1      	mov	r9, r4
 80101a0:	4576      	cmp	r6, lr
 80101a2:	46f4      	mov	ip, lr
 80101a4:	d815      	bhi.n	80101d2 <rshift+0x7e>
 80101a6:	1a9b      	subs	r3, r3, r2
 80101a8:	009a      	lsls	r2, r3, #2
 80101aa:	3a04      	subs	r2, #4
 80101ac:	3501      	adds	r5, #1
 80101ae:	42ae      	cmp	r6, r5
 80101b0:	bf38      	it	cc
 80101b2:	2200      	movcc	r2, #0
 80101b4:	18a3      	adds	r3, r4, r2
 80101b6:	50a7      	str	r7, [r4, r2]
 80101b8:	b107      	cbz	r7, 80101bc <rshift+0x68>
 80101ba:	3304      	adds	r3, #4
 80101bc:	1b1a      	subs	r2, r3, r4
 80101be:	42a3      	cmp	r3, r4
 80101c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80101c4:	bf08      	it	eq
 80101c6:	2300      	moveq	r3, #0
 80101c8:	6102      	str	r2, [r0, #16]
 80101ca:	bf08      	it	eq
 80101cc:	6143      	streq	r3, [r0, #20]
 80101ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101d2:	f8dc c000 	ldr.w	ip, [ip]
 80101d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80101da:	ea4c 0707 	orr.w	r7, ip, r7
 80101de:	f849 7b04 	str.w	r7, [r9], #4
 80101e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80101e6:	40cf      	lsrs	r7, r1
 80101e8:	e7da      	b.n	80101a0 <rshift+0x4c>
 80101ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80101ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80101f2:	e7c3      	b.n	801017c <rshift+0x28>
 80101f4:	4623      	mov	r3, r4
 80101f6:	e7e1      	b.n	80101bc <rshift+0x68>

080101f8 <__hexdig_fun>:
 80101f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80101fc:	2b09      	cmp	r3, #9
 80101fe:	d802      	bhi.n	8010206 <__hexdig_fun+0xe>
 8010200:	3820      	subs	r0, #32
 8010202:	b2c0      	uxtb	r0, r0
 8010204:	4770      	bx	lr
 8010206:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801020a:	2b05      	cmp	r3, #5
 801020c:	d801      	bhi.n	8010212 <__hexdig_fun+0x1a>
 801020e:	3847      	subs	r0, #71	; 0x47
 8010210:	e7f7      	b.n	8010202 <__hexdig_fun+0xa>
 8010212:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010216:	2b05      	cmp	r3, #5
 8010218:	d801      	bhi.n	801021e <__hexdig_fun+0x26>
 801021a:	3827      	subs	r0, #39	; 0x27
 801021c:	e7f1      	b.n	8010202 <__hexdig_fun+0xa>
 801021e:	2000      	movs	r0, #0
 8010220:	4770      	bx	lr
	...

08010224 <__gethex>:
 8010224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010228:	ed2d 8b02 	vpush	{d8}
 801022c:	b089      	sub	sp, #36	; 0x24
 801022e:	ee08 0a10 	vmov	s16, r0
 8010232:	9304      	str	r3, [sp, #16]
 8010234:	4bbc      	ldr	r3, [pc, #752]	; (8010528 <__gethex+0x304>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	9301      	str	r3, [sp, #4]
 801023a:	4618      	mov	r0, r3
 801023c:	468b      	mov	fp, r1
 801023e:	4690      	mov	r8, r2
 8010240:	f7ef ffd8 	bl	80001f4 <strlen>
 8010244:	9b01      	ldr	r3, [sp, #4]
 8010246:	f8db 2000 	ldr.w	r2, [fp]
 801024a:	4403      	add	r3, r0
 801024c:	4682      	mov	sl, r0
 801024e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010252:	9305      	str	r3, [sp, #20]
 8010254:	1c93      	adds	r3, r2, #2
 8010256:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801025a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801025e:	32fe      	adds	r2, #254	; 0xfe
 8010260:	18d1      	adds	r1, r2, r3
 8010262:	461f      	mov	r7, r3
 8010264:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010268:	9100      	str	r1, [sp, #0]
 801026a:	2830      	cmp	r0, #48	; 0x30
 801026c:	d0f8      	beq.n	8010260 <__gethex+0x3c>
 801026e:	f7ff ffc3 	bl	80101f8 <__hexdig_fun>
 8010272:	4604      	mov	r4, r0
 8010274:	2800      	cmp	r0, #0
 8010276:	d13a      	bne.n	80102ee <__gethex+0xca>
 8010278:	9901      	ldr	r1, [sp, #4]
 801027a:	4652      	mov	r2, sl
 801027c:	4638      	mov	r0, r7
 801027e:	f001 fb47 	bl	8011910 <strncmp>
 8010282:	4605      	mov	r5, r0
 8010284:	2800      	cmp	r0, #0
 8010286:	d168      	bne.n	801035a <__gethex+0x136>
 8010288:	f817 000a 	ldrb.w	r0, [r7, sl]
 801028c:	eb07 060a 	add.w	r6, r7, sl
 8010290:	f7ff ffb2 	bl	80101f8 <__hexdig_fun>
 8010294:	2800      	cmp	r0, #0
 8010296:	d062      	beq.n	801035e <__gethex+0x13a>
 8010298:	4633      	mov	r3, r6
 801029a:	7818      	ldrb	r0, [r3, #0]
 801029c:	2830      	cmp	r0, #48	; 0x30
 801029e:	461f      	mov	r7, r3
 80102a0:	f103 0301 	add.w	r3, r3, #1
 80102a4:	d0f9      	beq.n	801029a <__gethex+0x76>
 80102a6:	f7ff ffa7 	bl	80101f8 <__hexdig_fun>
 80102aa:	2301      	movs	r3, #1
 80102ac:	fab0 f480 	clz	r4, r0
 80102b0:	0964      	lsrs	r4, r4, #5
 80102b2:	4635      	mov	r5, r6
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	463a      	mov	r2, r7
 80102b8:	4616      	mov	r6, r2
 80102ba:	3201      	adds	r2, #1
 80102bc:	7830      	ldrb	r0, [r6, #0]
 80102be:	f7ff ff9b 	bl	80101f8 <__hexdig_fun>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	d1f8      	bne.n	80102b8 <__gethex+0x94>
 80102c6:	9901      	ldr	r1, [sp, #4]
 80102c8:	4652      	mov	r2, sl
 80102ca:	4630      	mov	r0, r6
 80102cc:	f001 fb20 	bl	8011910 <strncmp>
 80102d0:	b980      	cbnz	r0, 80102f4 <__gethex+0xd0>
 80102d2:	b94d      	cbnz	r5, 80102e8 <__gethex+0xc4>
 80102d4:	eb06 050a 	add.w	r5, r6, sl
 80102d8:	462a      	mov	r2, r5
 80102da:	4616      	mov	r6, r2
 80102dc:	3201      	adds	r2, #1
 80102de:	7830      	ldrb	r0, [r6, #0]
 80102e0:	f7ff ff8a 	bl	80101f8 <__hexdig_fun>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d1f8      	bne.n	80102da <__gethex+0xb6>
 80102e8:	1bad      	subs	r5, r5, r6
 80102ea:	00ad      	lsls	r5, r5, #2
 80102ec:	e004      	b.n	80102f8 <__gethex+0xd4>
 80102ee:	2400      	movs	r4, #0
 80102f0:	4625      	mov	r5, r4
 80102f2:	e7e0      	b.n	80102b6 <__gethex+0x92>
 80102f4:	2d00      	cmp	r5, #0
 80102f6:	d1f7      	bne.n	80102e8 <__gethex+0xc4>
 80102f8:	7833      	ldrb	r3, [r6, #0]
 80102fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80102fe:	2b50      	cmp	r3, #80	; 0x50
 8010300:	d13b      	bne.n	801037a <__gethex+0x156>
 8010302:	7873      	ldrb	r3, [r6, #1]
 8010304:	2b2b      	cmp	r3, #43	; 0x2b
 8010306:	d02c      	beq.n	8010362 <__gethex+0x13e>
 8010308:	2b2d      	cmp	r3, #45	; 0x2d
 801030a:	d02e      	beq.n	801036a <__gethex+0x146>
 801030c:	1c71      	adds	r1, r6, #1
 801030e:	f04f 0900 	mov.w	r9, #0
 8010312:	7808      	ldrb	r0, [r1, #0]
 8010314:	f7ff ff70 	bl	80101f8 <__hexdig_fun>
 8010318:	1e43      	subs	r3, r0, #1
 801031a:	b2db      	uxtb	r3, r3
 801031c:	2b18      	cmp	r3, #24
 801031e:	d82c      	bhi.n	801037a <__gethex+0x156>
 8010320:	f1a0 0210 	sub.w	r2, r0, #16
 8010324:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010328:	f7ff ff66 	bl	80101f8 <__hexdig_fun>
 801032c:	1e43      	subs	r3, r0, #1
 801032e:	b2db      	uxtb	r3, r3
 8010330:	2b18      	cmp	r3, #24
 8010332:	d91d      	bls.n	8010370 <__gethex+0x14c>
 8010334:	f1b9 0f00 	cmp.w	r9, #0
 8010338:	d000      	beq.n	801033c <__gethex+0x118>
 801033a:	4252      	negs	r2, r2
 801033c:	4415      	add	r5, r2
 801033e:	f8cb 1000 	str.w	r1, [fp]
 8010342:	b1e4      	cbz	r4, 801037e <__gethex+0x15a>
 8010344:	9b00      	ldr	r3, [sp, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	bf14      	ite	ne
 801034a:	2700      	movne	r7, #0
 801034c:	2706      	moveq	r7, #6
 801034e:	4638      	mov	r0, r7
 8010350:	b009      	add	sp, #36	; 0x24
 8010352:	ecbd 8b02 	vpop	{d8}
 8010356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035a:	463e      	mov	r6, r7
 801035c:	4625      	mov	r5, r4
 801035e:	2401      	movs	r4, #1
 8010360:	e7ca      	b.n	80102f8 <__gethex+0xd4>
 8010362:	f04f 0900 	mov.w	r9, #0
 8010366:	1cb1      	adds	r1, r6, #2
 8010368:	e7d3      	b.n	8010312 <__gethex+0xee>
 801036a:	f04f 0901 	mov.w	r9, #1
 801036e:	e7fa      	b.n	8010366 <__gethex+0x142>
 8010370:	230a      	movs	r3, #10
 8010372:	fb03 0202 	mla	r2, r3, r2, r0
 8010376:	3a10      	subs	r2, #16
 8010378:	e7d4      	b.n	8010324 <__gethex+0x100>
 801037a:	4631      	mov	r1, r6
 801037c:	e7df      	b.n	801033e <__gethex+0x11a>
 801037e:	1bf3      	subs	r3, r6, r7
 8010380:	3b01      	subs	r3, #1
 8010382:	4621      	mov	r1, r4
 8010384:	2b07      	cmp	r3, #7
 8010386:	dc0b      	bgt.n	80103a0 <__gethex+0x17c>
 8010388:	ee18 0a10 	vmov	r0, s16
 801038c:	f000 fa7e 	bl	801088c <_Balloc>
 8010390:	4604      	mov	r4, r0
 8010392:	b940      	cbnz	r0, 80103a6 <__gethex+0x182>
 8010394:	4b65      	ldr	r3, [pc, #404]	; (801052c <__gethex+0x308>)
 8010396:	4602      	mov	r2, r0
 8010398:	21de      	movs	r1, #222	; 0xde
 801039a:	4865      	ldr	r0, [pc, #404]	; (8010530 <__gethex+0x30c>)
 801039c:	f7ff f830 	bl	800f400 <__assert_func>
 80103a0:	3101      	adds	r1, #1
 80103a2:	105b      	asrs	r3, r3, #1
 80103a4:	e7ee      	b.n	8010384 <__gethex+0x160>
 80103a6:	f100 0914 	add.w	r9, r0, #20
 80103aa:	f04f 0b00 	mov.w	fp, #0
 80103ae:	f1ca 0301 	rsb	r3, sl, #1
 80103b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80103b6:	f8cd b000 	str.w	fp, [sp]
 80103ba:	9306      	str	r3, [sp, #24]
 80103bc:	42b7      	cmp	r7, r6
 80103be:	d340      	bcc.n	8010442 <__gethex+0x21e>
 80103c0:	9802      	ldr	r0, [sp, #8]
 80103c2:	9b00      	ldr	r3, [sp, #0]
 80103c4:	f840 3b04 	str.w	r3, [r0], #4
 80103c8:	eba0 0009 	sub.w	r0, r0, r9
 80103cc:	1080      	asrs	r0, r0, #2
 80103ce:	0146      	lsls	r6, r0, #5
 80103d0:	6120      	str	r0, [r4, #16]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f000 fb50 	bl	8010a78 <__hi0bits>
 80103d8:	1a30      	subs	r0, r6, r0
 80103da:	f8d8 6000 	ldr.w	r6, [r8]
 80103de:	42b0      	cmp	r0, r6
 80103e0:	dd63      	ble.n	80104aa <__gethex+0x286>
 80103e2:	1b87      	subs	r7, r0, r6
 80103e4:	4639      	mov	r1, r7
 80103e6:	4620      	mov	r0, r4
 80103e8:	f000 feea 	bl	80111c0 <__any_on>
 80103ec:	4682      	mov	sl, r0
 80103ee:	b1a8      	cbz	r0, 801041c <__gethex+0x1f8>
 80103f0:	1e7b      	subs	r3, r7, #1
 80103f2:	1159      	asrs	r1, r3, #5
 80103f4:	f003 021f 	and.w	r2, r3, #31
 80103f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80103fc:	f04f 0a01 	mov.w	sl, #1
 8010400:	fa0a f202 	lsl.w	r2, sl, r2
 8010404:	420a      	tst	r2, r1
 8010406:	d009      	beq.n	801041c <__gethex+0x1f8>
 8010408:	4553      	cmp	r3, sl
 801040a:	dd05      	ble.n	8010418 <__gethex+0x1f4>
 801040c:	1eb9      	subs	r1, r7, #2
 801040e:	4620      	mov	r0, r4
 8010410:	f000 fed6 	bl	80111c0 <__any_on>
 8010414:	2800      	cmp	r0, #0
 8010416:	d145      	bne.n	80104a4 <__gethex+0x280>
 8010418:	f04f 0a02 	mov.w	sl, #2
 801041c:	4639      	mov	r1, r7
 801041e:	4620      	mov	r0, r4
 8010420:	f7ff fe98 	bl	8010154 <rshift>
 8010424:	443d      	add	r5, r7
 8010426:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801042a:	42ab      	cmp	r3, r5
 801042c:	da4c      	bge.n	80104c8 <__gethex+0x2a4>
 801042e:	ee18 0a10 	vmov	r0, s16
 8010432:	4621      	mov	r1, r4
 8010434:	f000 fa6a 	bl	801090c <_Bfree>
 8010438:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801043a:	2300      	movs	r3, #0
 801043c:	6013      	str	r3, [r2, #0]
 801043e:	27a3      	movs	r7, #163	; 0xa3
 8010440:	e785      	b.n	801034e <__gethex+0x12a>
 8010442:	1e73      	subs	r3, r6, #1
 8010444:	9a05      	ldr	r2, [sp, #20]
 8010446:	9303      	str	r3, [sp, #12]
 8010448:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801044c:	4293      	cmp	r3, r2
 801044e:	d019      	beq.n	8010484 <__gethex+0x260>
 8010450:	f1bb 0f20 	cmp.w	fp, #32
 8010454:	d107      	bne.n	8010466 <__gethex+0x242>
 8010456:	9b02      	ldr	r3, [sp, #8]
 8010458:	9a00      	ldr	r2, [sp, #0]
 801045a:	f843 2b04 	str.w	r2, [r3], #4
 801045e:	9302      	str	r3, [sp, #8]
 8010460:	2300      	movs	r3, #0
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	469b      	mov	fp, r3
 8010466:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801046a:	f7ff fec5 	bl	80101f8 <__hexdig_fun>
 801046e:	9b00      	ldr	r3, [sp, #0]
 8010470:	f000 000f 	and.w	r0, r0, #15
 8010474:	fa00 f00b 	lsl.w	r0, r0, fp
 8010478:	4303      	orrs	r3, r0
 801047a:	9300      	str	r3, [sp, #0]
 801047c:	f10b 0b04 	add.w	fp, fp, #4
 8010480:	9b03      	ldr	r3, [sp, #12]
 8010482:	e00d      	b.n	80104a0 <__gethex+0x27c>
 8010484:	9b03      	ldr	r3, [sp, #12]
 8010486:	9a06      	ldr	r2, [sp, #24]
 8010488:	4413      	add	r3, r2
 801048a:	42bb      	cmp	r3, r7
 801048c:	d3e0      	bcc.n	8010450 <__gethex+0x22c>
 801048e:	4618      	mov	r0, r3
 8010490:	9901      	ldr	r1, [sp, #4]
 8010492:	9307      	str	r3, [sp, #28]
 8010494:	4652      	mov	r2, sl
 8010496:	f001 fa3b 	bl	8011910 <strncmp>
 801049a:	9b07      	ldr	r3, [sp, #28]
 801049c:	2800      	cmp	r0, #0
 801049e:	d1d7      	bne.n	8010450 <__gethex+0x22c>
 80104a0:	461e      	mov	r6, r3
 80104a2:	e78b      	b.n	80103bc <__gethex+0x198>
 80104a4:	f04f 0a03 	mov.w	sl, #3
 80104a8:	e7b8      	b.n	801041c <__gethex+0x1f8>
 80104aa:	da0a      	bge.n	80104c2 <__gethex+0x29e>
 80104ac:	1a37      	subs	r7, r6, r0
 80104ae:	4621      	mov	r1, r4
 80104b0:	ee18 0a10 	vmov	r0, s16
 80104b4:	463a      	mov	r2, r7
 80104b6:	f000 fc45 	bl	8010d44 <__lshift>
 80104ba:	1bed      	subs	r5, r5, r7
 80104bc:	4604      	mov	r4, r0
 80104be:	f100 0914 	add.w	r9, r0, #20
 80104c2:	f04f 0a00 	mov.w	sl, #0
 80104c6:	e7ae      	b.n	8010426 <__gethex+0x202>
 80104c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80104cc:	42a8      	cmp	r0, r5
 80104ce:	dd72      	ble.n	80105b6 <__gethex+0x392>
 80104d0:	1b45      	subs	r5, r0, r5
 80104d2:	42ae      	cmp	r6, r5
 80104d4:	dc36      	bgt.n	8010544 <__gethex+0x320>
 80104d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80104da:	2b02      	cmp	r3, #2
 80104dc:	d02a      	beq.n	8010534 <__gethex+0x310>
 80104de:	2b03      	cmp	r3, #3
 80104e0:	d02c      	beq.n	801053c <__gethex+0x318>
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d115      	bne.n	8010512 <__gethex+0x2ee>
 80104e6:	42ae      	cmp	r6, r5
 80104e8:	d113      	bne.n	8010512 <__gethex+0x2ee>
 80104ea:	2e01      	cmp	r6, #1
 80104ec:	d10b      	bne.n	8010506 <__gethex+0x2e2>
 80104ee:	9a04      	ldr	r2, [sp, #16]
 80104f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80104f4:	6013      	str	r3, [r2, #0]
 80104f6:	2301      	movs	r3, #1
 80104f8:	6123      	str	r3, [r4, #16]
 80104fa:	f8c9 3000 	str.w	r3, [r9]
 80104fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010500:	2762      	movs	r7, #98	; 0x62
 8010502:	601c      	str	r4, [r3, #0]
 8010504:	e723      	b.n	801034e <__gethex+0x12a>
 8010506:	1e71      	subs	r1, r6, #1
 8010508:	4620      	mov	r0, r4
 801050a:	f000 fe59 	bl	80111c0 <__any_on>
 801050e:	2800      	cmp	r0, #0
 8010510:	d1ed      	bne.n	80104ee <__gethex+0x2ca>
 8010512:	ee18 0a10 	vmov	r0, s16
 8010516:	4621      	mov	r1, r4
 8010518:	f000 f9f8 	bl	801090c <_Bfree>
 801051c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801051e:	2300      	movs	r3, #0
 8010520:	6013      	str	r3, [r2, #0]
 8010522:	2750      	movs	r7, #80	; 0x50
 8010524:	e713      	b.n	801034e <__gethex+0x12a>
 8010526:	bf00      	nop
 8010528:	08025c6c 	.word	0x08025c6c
 801052c:	08025bf1 	.word	0x08025bf1
 8010530:	08025c02 	.word	0x08025c02
 8010534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010536:	2b00      	cmp	r3, #0
 8010538:	d1eb      	bne.n	8010512 <__gethex+0x2ee>
 801053a:	e7d8      	b.n	80104ee <__gethex+0x2ca>
 801053c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1d5      	bne.n	80104ee <__gethex+0x2ca>
 8010542:	e7e6      	b.n	8010512 <__gethex+0x2ee>
 8010544:	1e6f      	subs	r7, r5, #1
 8010546:	f1ba 0f00 	cmp.w	sl, #0
 801054a:	d131      	bne.n	80105b0 <__gethex+0x38c>
 801054c:	b127      	cbz	r7, 8010558 <__gethex+0x334>
 801054e:	4639      	mov	r1, r7
 8010550:	4620      	mov	r0, r4
 8010552:	f000 fe35 	bl	80111c0 <__any_on>
 8010556:	4682      	mov	sl, r0
 8010558:	117b      	asrs	r3, r7, #5
 801055a:	2101      	movs	r1, #1
 801055c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010560:	f007 071f 	and.w	r7, r7, #31
 8010564:	fa01 f707 	lsl.w	r7, r1, r7
 8010568:	421f      	tst	r7, r3
 801056a:	4629      	mov	r1, r5
 801056c:	4620      	mov	r0, r4
 801056e:	bf18      	it	ne
 8010570:	f04a 0a02 	orrne.w	sl, sl, #2
 8010574:	1b76      	subs	r6, r6, r5
 8010576:	f7ff fded 	bl	8010154 <rshift>
 801057a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801057e:	2702      	movs	r7, #2
 8010580:	f1ba 0f00 	cmp.w	sl, #0
 8010584:	d048      	beq.n	8010618 <__gethex+0x3f4>
 8010586:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801058a:	2b02      	cmp	r3, #2
 801058c:	d015      	beq.n	80105ba <__gethex+0x396>
 801058e:	2b03      	cmp	r3, #3
 8010590:	d017      	beq.n	80105c2 <__gethex+0x39e>
 8010592:	2b01      	cmp	r3, #1
 8010594:	d109      	bne.n	80105aa <__gethex+0x386>
 8010596:	f01a 0f02 	tst.w	sl, #2
 801059a:	d006      	beq.n	80105aa <__gethex+0x386>
 801059c:	f8d9 0000 	ldr.w	r0, [r9]
 80105a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80105a4:	f01a 0f01 	tst.w	sl, #1
 80105a8:	d10e      	bne.n	80105c8 <__gethex+0x3a4>
 80105aa:	f047 0710 	orr.w	r7, r7, #16
 80105ae:	e033      	b.n	8010618 <__gethex+0x3f4>
 80105b0:	f04f 0a01 	mov.w	sl, #1
 80105b4:	e7d0      	b.n	8010558 <__gethex+0x334>
 80105b6:	2701      	movs	r7, #1
 80105b8:	e7e2      	b.n	8010580 <__gethex+0x35c>
 80105ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105bc:	f1c3 0301 	rsb	r3, r3, #1
 80105c0:	9315      	str	r3, [sp, #84]	; 0x54
 80105c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d0f0      	beq.n	80105aa <__gethex+0x386>
 80105c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80105cc:	f104 0314 	add.w	r3, r4, #20
 80105d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80105d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80105d8:	f04f 0c00 	mov.w	ip, #0
 80105dc:	4618      	mov	r0, r3
 80105de:	f853 2b04 	ldr.w	r2, [r3], #4
 80105e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80105e6:	d01c      	beq.n	8010622 <__gethex+0x3fe>
 80105e8:	3201      	adds	r2, #1
 80105ea:	6002      	str	r2, [r0, #0]
 80105ec:	2f02      	cmp	r7, #2
 80105ee:	f104 0314 	add.w	r3, r4, #20
 80105f2:	d13f      	bne.n	8010674 <__gethex+0x450>
 80105f4:	f8d8 2000 	ldr.w	r2, [r8]
 80105f8:	3a01      	subs	r2, #1
 80105fa:	42b2      	cmp	r2, r6
 80105fc:	d10a      	bne.n	8010614 <__gethex+0x3f0>
 80105fe:	1171      	asrs	r1, r6, #5
 8010600:	2201      	movs	r2, #1
 8010602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010606:	f006 061f 	and.w	r6, r6, #31
 801060a:	fa02 f606 	lsl.w	r6, r2, r6
 801060e:	421e      	tst	r6, r3
 8010610:	bf18      	it	ne
 8010612:	4617      	movne	r7, r2
 8010614:	f047 0720 	orr.w	r7, r7, #32
 8010618:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801061a:	601c      	str	r4, [r3, #0]
 801061c:	9b04      	ldr	r3, [sp, #16]
 801061e:	601d      	str	r5, [r3, #0]
 8010620:	e695      	b.n	801034e <__gethex+0x12a>
 8010622:	4299      	cmp	r1, r3
 8010624:	f843 cc04 	str.w	ip, [r3, #-4]
 8010628:	d8d8      	bhi.n	80105dc <__gethex+0x3b8>
 801062a:	68a3      	ldr	r3, [r4, #8]
 801062c:	459b      	cmp	fp, r3
 801062e:	db19      	blt.n	8010664 <__gethex+0x440>
 8010630:	6861      	ldr	r1, [r4, #4]
 8010632:	ee18 0a10 	vmov	r0, s16
 8010636:	3101      	adds	r1, #1
 8010638:	f000 f928 	bl	801088c <_Balloc>
 801063c:	4681      	mov	r9, r0
 801063e:	b918      	cbnz	r0, 8010648 <__gethex+0x424>
 8010640:	4b1a      	ldr	r3, [pc, #104]	; (80106ac <__gethex+0x488>)
 8010642:	4602      	mov	r2, r0
 8010644:	2184      	movs	r1, #132	; 0x84
 8010646:	e6a8      	b.n	801039a <__gethex+0x176>
 8010648:	6922      	ldr	r2, [r4, #16]
 801064a:	3202      	adds	r2, #2
 801064c:	f104 010c 	add.w	r1, r4, #12
 8010650:	0092      	lsls	r2, r2, #2
 8010652:	300c      	adds	r0, #12
 8010654:	f000 f90c 	bl	8010870 <memcpy>
 8010658:	4621      	mov	r1, r4
 801065a:	ee18 0a10 	vmov	r0, s16
 801065e:	f000 f955 	bl	801090c <_Bfree>
 8010662:	464c      	mov	r4, r9
 8010664:	6923      	ldr	r3, [r4, #16]
 8010666:	1c5a      	adds	r2, r3, #1
 8010668:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801066c:	6122      	str	r2, [r4, #16]
 801066e:	2201      	movs	r2, #1
 8010670:	615a      	str	r2, [r3, #20]
 8010672:	e7bb      	b.n	80105ec <__gethex+0x3c8>
 8010674:	6922      	ldr	r2, [r4, #16]
 8010676:	455a      	cmp	r2, fp
 8010678:	dd0b      	ble.n	8010692 <__gethex+0x46e>
 801067a:	2101      	movs	r1, #1
 801067c:	4620      	mov	r0, r4
 801067e:	f7ff fd69 	bl	8010154 <rshift>
 8010682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010686:	3501      	adds	r5, #1
 8010688:	42ab      	cmp	r3, r5
 801068a:	f6ff aed0 	blt.w	801042e <__gethex+0x20a>
 801068e:	2701      	movs	r7, #1
 8010690:	e7c0      	b.n	8010614 <__gethex+0x3f0>
 8010692:	f016 061f 	ands.w	r6, r6, #31
 8010696:	d0fa      	beq.n	801068e <__gethex+0x46a>
 8010698:	449a      	add	sl, r3
 801069a:	f1c6 0620 	rsb	r6, r6, #32
 801069e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80106a2:	f000 f9e9 	bl	8010a78 <__hi0bits>
 80106a6:	42b0      	cmp	r0, r6
 80106a8:	dbe7      	blt.n	801067a <__gethex+0x456>
 80106aa:	e7f0      	b.n	801068e <__gethex+0x46a>
 80106ac:	08025bf1 	.word	0x08025bf1

080106b0 <L_shift>:
 80106b0:	f1c2 0208 	rsb	r2, r2, #8
 80106b4:	0092      	lsls	r2, r2, #2
 80106b6:	b570      	push	{r4, r5, r6, lr}
 80106b8:	f1c2 0620 	rsb	r6, r2, #32
 80106bc:	6843      	ldr	r3, [r0, #4]
 80106be:	6804      	ldr	r4, [r0, #0]
 80106c0:	fa03 f506 	lsl.w	r5, r3, r6
 80106c4:	432c      	orrs	r4, r5
 80106c6:	40d3      	lsrs	r3, r2
 80106c8:	6004      	str	r4, [r0, #0]
 80106ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80106ce:	4288      	cmp	r0, r1
 80106d0:	d3f4      	bcc.n	80106bc <L_shift+0xc>
 80106d2:	bd70      	pop	{r4, r5, r6, pc}

080106d4 <__match>:
 80106d4:	b530      	push	{r4, r5, lr}
 80106d6:	6803      	ldr	r3, [r0, #0]
 80106d8:	3301      	adds	r3, #1
 80106da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106de:	b914      	cbnz	r4, 80106e6 <__match+0x12>
 80106e0:	6003      	str	r3, [r0, #0]
 80106e2:	2001      	movs	r0, #1
 80106e4:	bd30      	pop	{r4, r5, pc}
 80106e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80106ee:	2d19      	cmp	r5, #25
 80106f0:	bf98      	it	ls
 80106f2:	3220      	addls	r2, #32
 80106f4:	42a2      	cmp	r2, r4
 80106f6:	d0f0      	beq.n	80106da <__match+0x6>
 80106f8:	2000      	movs	r0, #0
 80106fa:	e7f3      	b.n	80106e4 <__match+0x10>

080106fc <__hexnan>:
 80106fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010700:	680b      	ldr	r3, [r1, #0]
 8010702:	6801      	ldr	r1, [r0, #0]
 8010704:	115e      	asrs	r6, r3, #5
 8010706:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801070a:	f013 031f 	ands.w	r3, r3, #31
 801070e:	b087      	sub	sp, #28
 8010710:	bf18      	it	ne
 8010712:	3604      	addne	r6, #4
 8010714:	2500      	movs	r5, #0
 8010716:	1f37      	subs	r7, r6, #4
 8010718:	4682      	mov	sl, r0
 801071a:	4690      	mov	r8, r2
 801071c:	9301      	str	r3, [sp, #4]
 801071e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010722:	46b9      	mov	r9, r7
 8010724:	463c      	mov	r4, r7
 8010726:	9502      	str	r5, [sp, #8]
 8010728:	46ab      	mov	fp, r5
 801072a:	784a      	ldrb	r2, [r1, #1]
 801072c:	1c4b      	adds	r3, r1, #1
 801072e:	9303      	str	r3, [sp, #12]
 8010730:	b342      	cbz	r2, 8010784 <__hexnan+0x88>
 8010732:	4610      	mov	r0, r2
 8010734:	9105      	str	r1, [sp, #20]
 8010736:	9204      	str	r2, [sp, #16]
 8010738:	f7ff fd5e 	bl	80101f8 <__hexdig_fun>
 801073c:	2800      	cmp	r0, #0
 801073e:	d14f      	bne.n	80107e0 <__hexnan+0xe4>
 8010740:	9a04      	ldr	r2, [sp, #16]
 8010742:	9905      	ldr	r1, [sp, #20]
 8010744:	2a20      	cmp	r2, #32
 8010746:	d818      	bhi.n	801077a <__hexnan+0x7e>
 8010748:	9b02      	ldr	r3, [sp, #8]
 801074a:	459b      	cmp	fp, r3
 801074c:	dd13      	ble.n	8010776 <__hexnan+0x7a>
 801074e:	454c      	cmp	r4, r9
 8010750:	d206      	bcs.n	8010760 <__hexnan+0x64>
 8010752:	2d07      	cmp	r5, #7
 8010754:	dc04      	bgt.n	8010760 <__hexnan+0x64>
 8010756:	462a      	mov	r2, r5
 8010758:	4649      	mov	r1, r9
 801075a:	4620      	mov	r0, r4
 801075c:	f7ff ffa8 	bl	80106b0 <L_shift>
 8010760:	4544      	cmp	r4, r8
 8010762:	d950      	bls.n	8010806 <__hexnan+0x10a>
 8010764:	2300      	movs	r3, #0
 8010766:	f1a4 0904 	sub.w	r9, r4, #4
 801076a:	f844 3c04 	str.w	r3, [r4, #-4]
 801076e:	f8cd b008 	str.w	fp, [sp, #8]
 8010772:	464c      	mov	r4, r9
 8010774:	461d      	mov	r5, r3
 8010776:	9903      	ldr	r1, [sp, #12]
 8010778:	e7d7      	b.n	801072a <__hexnan+0x2e>
 801077a:	2a29      	cmp	r2, #41	; 0x29
 801077c:	d156      	bne.n	801082c <__hexnan+0x130>
 801077e:	3102      	adds	r1, #2
 8010780:	f8ca 1000 	str.w	r1, [sl]
 8010784:	f1bb 0f00 	cmp.w	fp, #0
 8010788:	d050      	beq.n	801082c <__hexnan+0x130>
 801078a:	454c      	cmp	r4, r9
 801078c:	d206      	bcs.n	801079c <__hexnan+0xa0>
 801078e:	2d07      	cmp	r5, #7
 8010790:	dc04      	bgt.n	801079c <__hexnan+0xa0>
 8010792:	462a      	mov	r2, r5
 8010794:	4649      	mov	r1, r9
 8010796:	4620      	mov	r0, r4
 8010798:	f7ff ff8a 	bl	80106b0 <L_shift>
 801079c:	4544      	cmp	r4, r8
 801079e:	d934      	bls.n	801080a <__hexnan+0x10e>
 80107a0:	f1a8 0204 	sub.w	r2, r8, #4
 80107a4:	4623      	mov	r3, r4
 80107a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80107aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80107ae:	429f      	cmp	r7, r3
 80107b0:	d2f9      	bcs.n	80107a6 <__hexnan+0xaa>
 80107b2:	1b3b      	subs	r3, r7, r4
 80107b4:	f023 0303 	bic.w	r3, r3, #3
 80107b8:	3304      	adds	r3, #4
 80107ba:	3401      	adds	r4, #1
 80107bc:	3e03      	subs	r6, #3
 80107be:	42b4      	cmp	r4, r6
 80107c0:	bf88      	it	hi
 80107c2:	2304      	movhi	r3, #4
 80107c4:	4443      	add	r3, r8
 80107c6:	2200      	movs	r2, #0
 80107c8:	f843 2b04 	str.w	r2, [r3], #4
 80107cc:	429f      	cmp	r7, r3
 80107ce:	d2fb      	bcs.n	80107c8 <__hexnan+0xcc>
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	b91b      	cbnz	r3, 80107dc <__hexnan+0xe0>
 80107d4:	4547      	cmp	r7, r8
 80107d6:	d127      	bne.n	8010828 <__hexnan+0x12c>
 80107d8:	2301      	movs	r3, #1
 80107da:	603b      	str	r3, [r7, #0]
 80107dc:	2005      	movs	r0, #5
 80107de:	e026      	b.n	801082e <__hexnan+0x132>
 80107e0:	3501      	adds	r5, #1
 80107e2:	2d08      	cmp	r5, #8
 80107e4:	f10b 0b01 	add.w	fp, fp, #1
 80107e8:	dd06      	ble.n	80107f8 <__hexnan+0xfc>
 80107ea:	4544      	cmp	r4, r8
 80107ec:	d9c3      	bls.n	8010776 <__hexnan+0x7a>
 80107ee:	2300      	movs	r3, #0
 80107f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80107f4:	2501      	movs	r5, #1
 80107f6:	3c04      	subs	r4, #4
 80107f8:	6822      	ldr	r2, [r4, #0]
 80107fa:	f000 000f 	and.w	r0, r0, #15
 80107fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010802:	6022      	str	r2, [r4, #0]
 8010804:	e7b7      	b.n	8010776 <__hexnan+0x7a>
 8010806:	2508      	movs	r5, #8
 8010808:	e7b5      	b.n	8010776 <__hexnan+0x7a>
 801080a:	9b01      	ldr	r3, [sp, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d0df      	beq.n	80107d0 <__hexnan+0xd4>
 8010810:	f04f 32ff 	mov.w	r2, #4294967295
 8010814:	f1c3 0320 	rsb	r3, r3, #32
 8010818:	fa22 f303 	lsr.w	r3, r2, r3
 801081c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010820:	401a      	ands	r2, r3
 8010822:	f846 2c04 	str.w	r2, [r6, #-4]
 8010826:	e7d3      	b.n	80107d0 <__hexnan+0xd4>
 8010828:	3f04      	subs	r7, #4
 801082a:	e7d1      	b.n	80107d0 <__hexnan+0xd4>
 801082c:	2004      	movs	r0, #4
 801082e:	b007      	add	sp, #28
 8010830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010834 <_localeconv_r>:
 8010834:	4800      	ldr	r0, [pc, #0]	; (8010838 <_localeconv_r+0x4>)
 8010836:	4770      	bx	lr
 8010838:	20000198 	.word	0x20000198

0801083c <malloc>:
 801083c:	4b02      	ldr	r3, [pc, #8]	; (8010848 <malloc+0xc>)
 801083e:	4601      	mov	r1, r0
 8010840:	6818      	ldr	r0, [r3, #0]
 8010842:	f000 bd3d 	b.w	80112c0 <_malloc_r>
 8010846:	bf00      	nop
 8010848:	20000040 	.word	0x20000040

0801084c <__ascii_mbtowc>:
 801084c:	b082      	sub	sp, #8
 801084e:	b901      	cbnz	r1, 8010852 <__ascii_mbtowc+0x6>
 8010850:	a901      	add	r1, sp, #4
 8010852:	b142      	cbz	r2, 8010866 <__ascii_mbtowc+0x1a>
 8010854:	b14b      	cbz	r3, 801086a <__ascii_mbtowc+0x1e>
 8010856:	7813      	ldrb	r3, [r2, #0]
 8010858:	600b      	str	r3, [r1, #0]
 801085a:	7812      	ldrb	r2, [r2, #0]
 801085c:	1e10      	subs	r0, r2, #0
 801085e:	bf18      	it	ne
 8010860:	2001      	movne	r0, #1
 8010862:	b002      	add	sp, #8
 8010864:	4770      	bx	lr
 8010866:	4610      	mov	r0, r2
 8010868:	e7fb      	b.n	8010862 <__ascii_mbtowc+0x16>
 801086a:	f06f 0001 	mvn.w	r0, #1
 801086e:	e7f8      	b.n	8010862 <__ascii_mbtowc+0x16>

08010870 <memcpy>:
 8010870:	440a      	add	r2, r1
 8010872:	4291      	cmp	r1, r2
 8010874:	f100 33ff 	add.w	r3, r0, #4294967295
 8010878:	d100      	bne.n	801087c <memcpy+0xc>
 801087a:	4770      	bx	lr
 801087c:	b510      	push	{r4, lr}
 801087e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010886:	4291      	cmp	r1, r2
 8010888:	d1f9      	bne.n	801087e <memcpy+0xe>
 801088a:	bd10      	pop	{r4, pc}

0801088c <_Balloc>:
 801088c:	b570      	push	{r4, r5, r6, lr}
 801088e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010890:	4604      	mov	r4, r0
 8010892:	460d      	mov	r5, r1
 8010894:	b976      	cbnz	r6, 80108b4 <_Balloc+0x28>
 8010896:	2010      	movs	r0, #16
 8010898:	f7ff ffd0 	bl	801083c <malloc>
 801089c:	4602      	mov	r2, r0
 801089e:	6260      	str	r0, [r4, #36]	; 0x24
 80108a0:	b920      	cbnz	r0, 80108ac <_Balloc+0x20>
 80108a2:	4b18      	ldr	r3, [pc, #96]	; (8010904 <_Balloc+0x78>)
 80108a4:	4818      	ldr	r0, [pc, #96]	; (8010908 <_Balloc+0x7c>)
 80108a6:	2166      	movs	r1, #102	; 0x66
 80108a8:	f7fe fdaa 	bl	800f400 <__assert_func>
 80108ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108b0:	6006      	str	r6, [r0, #0]
 80108b2:	60c6      	str	r6, [r0, #12]
 80108b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80108b6:	68f3      	ldr	r3, [r6, #12]
 80108b8:	b183      	cbz	r3, 80108dc <_Balloc+0x50>
 80108ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80108c2:	b9b8      	cbnz	r0, 80108f4 <_Balloc+0x68>
 80108c4:	2101      	movs	r1, #1
 80108c6:	fa01 f605 	lsl.w	r6, r1, r5
 80108ca:	1d72      	adds	r2, r6, #5
 80108cc:	0092      	lsls	r2, r2, #2
 80108ce:	4620      	mov	r0, r4
 80108d0:	f000 fc97 	bl	8011202 <_calloc_r>
 80108d4:	b160      	cbz	r0, 80108f0 <_Balloc+0x64>
 80108d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80108da:	e00e      	b.n	80108fa <_Balloc+0x6e>
 80108dc:	2221      	movs	r2, #33	; 0x21
 80108de:	2104      	movs	r1, #4
 80108e0:	4620      	mov	r0, r4
 80108e2:	f000 fc8e 	bl	8011202 <_calloc_r>
 80108e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108e8:	60f0      	str	r0, [r6, #12]
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1e4      	bne.n	80108ba <_Balloc+0x2e>
 80108f0:	2000      	movs	r0, #0
 80108f2:	bd70      	pop	{r4, r5, r6, pc}
 80108f4:	6802      	ldr	r2, [r0, #0]
 80108f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80108fa:	2300      	movs	r3, #0
 80108fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010900:	e7f7      	b.n	80108f2 <_Balloc+0x66>
 8010902:	bf00      	nop
 8010904:	080259d0 	.word	0x080259d0
 8010908:	08025c80 	.word	0x08025c80

0801090c <_Bfree>:
 801090c:	b570      	push	{r4, r5, r6, lr}
 801090e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010910:	4605      	mov	r5, r0
 8010912:	460c      	mov	r4, r1
 8010914:	b976      	cbnz	r6, 8010934 <_Bfree+0x28>
 8010916:	2010      	movs	r0, #16
 8010918:	f7ff ff90 	bl	801083c <malloc>
 801091c:	4602      	mov	r2, r0
 801091e:	6268      	str	r0, [r5, #36]	; 0x24
 8010920:	b920      	cbnz	r0, 801092c <_Bfree+0x20>
 8010922:	4b09      	ldr	r3, [pc, #36]	; (8010948 <_Bfree+0x3c>)
 8010924:	4809      	ldr	r0, [pc, #36]	; (801094c <_Bfree+0x40>)
 8010926:	218a      	movs	r1, #138	; 0x8a
 8010928:	f7fe fd6a 	bl	800f400 <__assert_func>
 801092c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010930:	6006      	str	r6, [r0, #0]
 8010932:	60c6      	str	r6, [r0, #12]
 8010934:	b13c      	cbz	r4, 8010946 <_Bfree+0x3a>
 8010936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010938:	6862      	ldr	r2, [r4, #4]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010940:	6021      	str	r1, [r4, #0]
 8010942:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010946:	bd70      	pop	{r4, r5, r6, pc}
 8010948:	080259d0 	.word	0x080259d0
 801094c:	08025c80 	.word	0x08025c80

08010950 <__multadd>:
 8010950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010954:	690e      	ldr	r6, [r1, #16]
 8010956:	4607      	mov	r7, r0
 8010958:	4698      	mov	r8, r3
 801095a:	460c      	mov	r4, r1
 801095c:	f101 0014 	add.w	r0, r1, #20
 8010960:	2300      	movs	r3, #0
 8010962:	6805      	ldr	r5, [r0, #0]
 8010964:	b2a9      	uxth	r1, r5
 8010966:	fb02 8101 	mla	r1, r2, r1, r8
 801096a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801096e:	0c2d      	lsrs	r5, r5, #16
 8010970:	fb02 c505 	mla	r5, r2, r5, ip
 8010974:	b289      	uxth	r1, r1
 8010976:	3301      	adds	r3, #1
 8010978:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801097c:	429e      	cmp	r6, r3
 801097e:	f840 1b04 	str.w	r1, [r0], #4
 8010982:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010986:	dcec      	bgt.n	8010962 <__multadd+0x12>
 8010988:	f1b8 0f00 	cmp.w	r8, #0
 801098c:	d022      	beq.n	80109d4 <__multadd+0x84>
 801098e:	68a3      	ldr	r3, [r4, #8]
 8010990:	42b3      	cmp	r3, r6
 8010992:	dc19      	bgt.n	80109c8 <__multadd+0x78>
 8010994:	6861      	ldr	r1, [r4, #4]
 8010996:	4638      	mov	r0, r7
 8010998:	3101      	adds	r1, #1
 801099a:	f7ff ff77 	bl	801088c <_Balloc>
 801099e:	4605      	mov	r5, r0
 80109a0:	b928      	cbnz	r0, 80109ae <__multadd+0x5e>
 80109a2:	4602      	mov	r2, r0
 80109a4:	4b0d      	ldr	r3, [pc, #52]	; (80109dc <__multadd+0x8c>)
 80109a6:	480e      	ldr	r0, [pc, #56]	; (80109e0 <__multadd+0x90>)
 80109a8:	21b5      	movs	r1, #181	; 0xb5
 80109aa:	f7fe fd29 	bl	800f400 <__assert_func>
 80109ae:	6922      	ldr	r2, [r4, #16]
 80109b0:	3202      	adds	r2, #2
 80109b2:	f104 010c 	add.w	r1, r4, #12
 80109b6:	0092      	lsls	r2, r2, #2
 80109b8:	300c      	adds	r0, #12
 80109ba:	f7ff ff59 	bl	8010870 <memcpy>
 80109be:	4621      	mov	r1, r4
 80109c0:	4638      	mov	r0, r7
 80109c2:	f7ff ffa3 	bl	801090c <_Bfree>
 80109c6:	462c      	mov	r4, r5
 80109c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80109cc:	3601      	adds	r6, #1
 80109ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80109d2:	6126      	str	r6, [r4, #16]
 80109d4:	4620      	mov	r0, r4
 80109d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109da:	bf00      	nop
 80109dc:	08025bf1 	.word	0x08025bf1
 80109e0:	08025c80 	.word	0x08025c80

080109e4 <__s2b>:
 80109e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109e8:	460c      	mov	r4, r1
 80109ea:	4615      	mov	r5, r2
 80109ec:	461f      	mov	r7, r3
 80109ee:	2209      	movs	r2, #9
 80109f0:	3308      	adds	r3, #8
 80109f2:	4606      	mov	r6, r0
 80109f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80109f8:	2100      	movs	r1, #0
 80109fa:	2201      	movs	r2, #1
 80109fc:	429a      	cmp	r2, r3
 80109fe:	db09      	blt.n	8010a14 <__s2b+0x30>
 8010a00:	4630      	mov	r0, r6
 8010a02:	f7ff ff43 	bl	801088c <_Balloc>
 8010a06:	b940      	cbnz	r0, 8010a1a <__s2b+0x36>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	4b19      	ldr	r3, [pc, #100]	; (8010a70 <__s2b+0x8c>)
 8010a0c:	4819      	ldr	r0, [pc, #100]	; (8010a74 <__s2b+0x90>)
 8010a0e:	21ce      	movs	r1, #206	; 0xce
 8010a10:	f7fe fcf6 	bl	800f400 <__assert_func>
 8010a14:	0052      	lsls	r2, r2, #1
 8010a16:	3101      	adds	r1, #1
 8010a18:	e7f0      	b.n	80109fc <__s2b+0x18>
 8010a1a:	9b08      	ldr	r3, [sp, #32]
 8010a1c:	6143      	str	r3, [r0, #20]
 8010a1e:	2d09      	cmp	r5, #9
 8010a20:	f04f 0301 	mov.w	r3, #1
 8010a24:	6103      	str	r3, [r0, #16]
 8010a26:	dd16      	ble.n	8010a56 <__s2b+0x72>
 8010a28:	f104 0909 	add.w	r9, r4, #9
 8010a2c:	46c8      	mov	r8, r9
 8010a2e:	442c      	add	r4, r5
 8010a30:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010a34:	4601      	mov	r1, r0
 8010a36:	3b30      	subs	r3, #48	; 0x30
 8010a38:	220a      	movs	r2, #10
 8010a3a:	4630      	mov	r0, r6
 8010a3c:	f7ff ff88 	bl	8010950 <__multadd>
 8010a40:	45a0      	cmp	r8, r4
 8010a42:	d1f5      	bne.n	8010a30 <__s2b+0x4c>
 8010a44:	f1a5 0408 	sub.w	r4, r5, #8
 8010a48:	444c      	add	r4, r9
 8010a4a:	1b2d      	subs	r5, r5, r4
 8010a4c:	1963      	adds	r3, r4, r5
 8010a4e:	42bb      	cmp	r3, r7
 8010a50:	db04      	blt.n	8010a5c <__s2b+0x78>
 8010a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a56:	340a      	adds	r4, #10
 8010a58:	2509      	movs	r5, #9
 8010a5a:	e7f6      	b.n	8010a4a <__s2b+0x66>
 8010a5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010a60:	4601      	mov	r1, r0
 8010a62:	3b30      	subs	r3, #48	; 0x30
 8010a64:	220a      	movs	r2, #10
 8010a66:	4630      	mov	r0, r6
 8010a68:	f7ff ff72 	bl	8010950 <__multadd>
 8010a6c:	e7ee      	b.n	8010a4c <__s2b+0x68>
 8010a6e:	bf00      	nop
 8010a70:	08025bf1 	.word	0x08025bf1
 8010a74:	08025c80 	.word	0x08025c80

08010a78 <__hi0bits>:
 8010a78:	0c03      	lsrs	r3, r0, #16
 8010a7a:	041b      	lsls	r3, r3, #16
 8010a7c:	b9d3      	cbnz	r3, 8010ab4 <__hi0bits+0x3c>
 8010a7e:	0400      	lsls	r0, r0, #16
 8010a80:	2310      	movs	r3, #16
 8010a82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010a86:	bf04      	itt	eq
 8010a88:	0200      	lsleq	r0, r0, #8
 8010a8a:	3308      	addeq	r3, #8
 8010a8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010a90:	bf04      	itt	eq
 8010a92:	0100      	lsleq	r0, r0, #4
 8010a94:	3304      	addeq	r3, #4
 8010a96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010a9a:	bf04      	itt	eq
 8010a9c:	0080      	lsleq	r0, r0, #2
 8010a9e:	3302      	addeq	r3, #2
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	db05      	blt.n	8010ab0 <__hi0bits+0x38>
 8010aa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010aa8:	f103 0301 	add.w	r3, r3, #1
 8010aac:	bf08      	it	eq
 8010aae:	2320      	moveq	r3, #32
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	4770      	bx	lr
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	e7e4      	b.n	8010a82 <__hi0bits+0xa>

08010ab8 <__lo0bits>:
 8010ab8:	6803      	ldr	r3, [r0, #0]
 8010aba:	f013 0207 	ands.w	r2, r3, #7
 8010abe:	4601      	mov	r1, r0
 8010ac0:	d00b      	beq.n	8010ada <__lo0bits+0x22>
 8010ac2:	07da      	lsls	r2, r3, #31
 8010ac4:	d424      	bmi.n	8010b10 <__lo0bits+0x58>
 8010ac6:	0798      	lsls	r0, r3, #30
 8010ac8:	bf49      	itett	mi
 8010aca:	085b      	lsrmi	r3, r3, #1
 8010acc:	089b      	lsrpl	r3, r3, #2
 8010ace:	2001      	movmi	r0, #1
 8010ad0:	600b      	strmi	r3, [r1, #0]
 8010ad2:	bf5c      	itt	pl
 8010ad4:	600b      	strpl	r3, [r1, #0]
 8010ad6:	2002      	movpl	r0, #2
 8010ad8:	4770      	bx	lr
 8010ada:	b298      	uxth	r0, r3
 8010adc:	b9b0      	cbnz	r0, 8010b0c <__lo0bits+0x54>
 8010ade:	0c1b      	lsrs	r3, r3, #16
 8010ae0:	2010      	movs	r0, #16
 8010ae2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010ae6:	bf04      	itt	eq
 8010ae8:	0a1b      	lsreq	r3, r3, #8
 8010aea:	3008      	addeq	r0, #8
 8010aec:	071a      	lsls	r2, r3, #28
 8010aee:	bf04      	itt	eq
 8010af0:	091b      	lsreq	r3, r3, #4
 8010af2:	3004      	addeq	r0, #4
 8010af4:	079a      	lsls	r2, r3, #30
 8010af6:	bf04      	itt	eq
 8010af8:	089b      	lsreq	r3, r3, #2
 8010afa:	3002      	addeq	r0, #2
 8010afc:	07da      	lsls	r2, r3, #31
 8010afe:	d403      	bmi.n	8010b08 <__lo0bits+0x50>
 8010b00:	085b      	lsrs	r3, r3, #1
 8010b02:	f100 0001 	add.w	r0, r0, #1
 8010b06:	d005      	beq.n	8010b14 <__lo0bits+0x5c>
 8010b08:	600b      	str	r3, [r1, #0]
 8010b0a:	4770      	bx	lr
 8010b0c:	4610      	mov	r0, r2
 8010b0e:	e7e8      	b.n	8010ae2 <__lo0bits+0x2a>
 8010b10:	2000      	movs	r0, #0
 8010b12:	4770      	bx	lr
 8010b14:	2020      	movs	r0, #32
 8010b16:	4770      	bx	lr

08010b18 <__i2b>:
 8010b18:	b510      	push	{r4, lr}
 8010b1a:	460c      	mov	r4, r1
 8010b1c:	2101      	movs	r1, #1
 8010b1e:	f7ff feb5 	bl	801088c <_Balloc>
 8010b22:	4602      	mov	r2, r0
 8010b24:	b928      	cbnz	r0, 8010b32 <__i2b+0x1a>
 8010b26:	4b05      	ldr	r3, [pc, #20]	; (8010b3c <__i2b+0x24>)
 8010b28:	4805      	ldr	r0, [pc, #20]	; (8010b40 <__i2b+0x28>)
 8010b2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010b2e:	f7fe fc67 	bl	800f400 <__assert_func>
 8010b32:	2301      	movs	r3, #1
 8010b34:	6144      	str	r4, [r0, #20]
 8010b36:	6103      	str	r3, [r0, #16]
 8010b38:	bd10      	pop	{r4, pc}
 8010b3a:	bf00      	nop
 8010b3c:	08025bf1 	.word	0x08025bf1
 8010b40:	08025c80 	.word	0x08025c80

08010b44 <__multiply>:
 8010b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b48:	4614      	mov	r4, r2
 8010b4a:	690a      	ldr	r2, [r1, #16]
 8010b4c:	6923      	ldr	r3, [r4, #16]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	bfb8      	it	lt
 8010b52:	460b      	movlt	r3, r1
 8010b54:	460d      	mov	r5, r1
 8010b56:	bfbc      	itt	lt
 8010b58:	4625      	movlt	r5, r4
 8010b5a:	461c      	movlt	r4, r3
 8010b5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010b60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010b64:	68ab      	ldr	r3, [r5, #8]
 8010b66:	6869      	ldr	r1, [r5, #4]
 8010b68:	eb0a 0709 	add.w	r7, sl, r9
 8010b6c:	42bb      	cmp	r3, r7
 8010b6e:	b085      	sub	sp, #20
 8010b70:	bfb8      	it	lt
 8010b72:	3101      	addlt	r1, #1
 8010b74:	f7ff fe8a 	bl	801088c <_Balloc>
 8010b78:	b930      	cbnz	r0, 8010b88 <__multiply+0x44>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	4b42      	ldr	r3, [pc, #264]	; (8010c88 <__multiply+0x144>)
 8010b7e:	4843      	ldr	r0, [pc, #268]	; (8010c8c <__multiply+0x148>)
 8010b80:	f240 115d 	movw	r1, #349	; 0x15d
 8010b84:	f7fe fc3c 	bl	800f400 <__assert_func>
 8010b88:	f100 0614 	add.w	r6, r0, #20
 8010b8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010b90:	4633      	mov	r3, r6
 8010b92:	2200      	movs	r2, #0
 8010b94:	4543      	cmp	r3, r8
 8010b96:	d31e      	bcc.n	8010bd6 <__multiply+0x92>
 8010b98:	f105 0c14 	add.w	ip, r5, #20
 8010b9c:	f104 0314 	add.w	r3, r4, #20
 8010ba0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010ba4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010ba8:	9202      	str	r2, [sp, #8]
 8010baa:	ebac 0205 	sub.w	r2, ip, r5
 8010bae:	3a15      	subs	r2, #21
 8010bb0:	f022 0203 	bic.w	r2, r2, #3
 8010bb4:	3204      	adds	r2, #4
 8010bb6:	f105 0115 	add.w	r1, r5, #21
 8010bba:	458c      	cmp	ip, r1
 8010bbc:	bf38      	it	cc
 8010bbe:	2204      	movcc	r2, #4
 8010bc0:	9201      	str	r2, [sp, #4]
 8010bc2:	9a02      	ldr	r2, [sp, #8]
 8010bc4:	9303      	str	r3, [sp, #12]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d808      	bhi.n	8010bdc <__multiply+0x98>
 8010bca:	2f00      	cmp	r7, #0
 8010bcc:	dc55      	bgt.n	8010c7a <__multiply+0x136>
 8010bce:	6107      	str	r7, [r0, #16]
 8010bd0:	b005      	add	sp, #20
 8010bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd6:	f843 2b04 	str.w	r2, [r3], #4
 8010bda:	e7db      	b.n	8010b94 <__multiply+0x50>
 8010bdc:	f8b3 a000 	ldrh.w	sl, [r3]
 8010be0:	f1ba 0f00 	cmp.w	sl, #0
 8010be4:	d020      	beq.n	8010c28 <__multiply+0xe4>
 8010be6:	f105 0e14 	add.w	lr, r5, #20
 8010bea:	46b1      	mov	r9, r6
 8010bec:	2200      	movs	r2, #0
 8010bee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010bf2:	f8d9 b000 	ldr.w	fp, [r9]
 8010bf6:	b2a1      	uxth	r1, r4
 8010bf8:	fa1f fb8b 	uxth.w	fp, fp
 8010bfc:	fb0a b101 	mla	r1, sl, r1, fp
 8010c00:	4411      	add	r1, r2
 8010c02:	f8d9 2000 	ldr.w	r2, [r9]
 8010c06:	0c24      	lsrs	r4, r4, #16
 8010c08:	0c12      	lsrs	r2, r2, #16
 8010c0a:	fb0a 2404 	mla	r4, sl, r4, r2
 8010c0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010c12:	b289      	uxth	r1, r1
 8010c14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010c18:	45f4      	cmp	ip, lr
 8010c1a:	f849 1b04 	str.w	r1, [r9], #4
 8010c1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010c22:	d8e4      	bhi.n	8010bee <__multiply+0xaa>
 8010c24:	9901      	ldr	r1, [sp, #4]
 8010c26:	5072      	str	r2, [r6, r1]
 8010c28:	9a03      	ldr	r2, [sp, #12]
 8010c2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010c2e:	3304      	adds	r3, #4
 8010c30:	f1b9 0f00 	cmp.w	r9, #0
 8010c34:	d01f      	beq.n	8010c76 <__multiply+0x132>
 8010c36:	6834      	ldr	r4, [r6, #0]
 8010c38:	f105 0114 	add.w	r1, r5, #20
 8010c3c:	46b6      	mov	lr, r6
 8010c3e:	f04f 0a00 	mov.w	sl, #0
 8010c42:	880a      	ldrh	r2, [r1, #0]
 8010c44:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010c48:	fb09 b202 	mla	r2, r9, r2, fp
 8010c4c:	4492      	add	sl, r2
 8010c4e:	b2a4      	uxth	r4, r4
 8010c50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010c54:	f84e 4b04 	str.w	r4, [lr], #4
 8010c58:	f851 4b04 	ldr.w	r4, [r1], #4
 8010c5c:	f8be 2000 	ldrh.w	r2, [lr]
 8010c60:	0c24      	lsrs	r4, r4, #16
 8010c62:	fb09 2404 	mla	r4, r9, r4, r2
 8010c66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010c6a:	458c      	cmp	ip, r1
 8010c6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010c70:	d8e7      	bhi.n	8010c42 <__multiply+0xfe>
 8010c72:	9a01      	ldr	r2, [sp, #4]
 8010c74:	50b4      	str	r4, [r6, r2]
 8010c76:	3604      	adds	r6, #4
 8010c78:	e7a3      	b.n	8010bc2 <__multiply+0x7e>
 8010c7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d1a5      	bne.n	8010bce <__multiply+0x8a>
 8010c82:	3f01      	subs	r7, #1
 8010c84:	e7a1      	b.n	8010bca <__multiply+0x86>
 8010c86:	bf00      	nop
 8010c88:	08025bf1 	.word	0x08025bf1
 8010c8c:	08025c80 	.word	0x08025c80

08010c90 <__pow5mult>:
 8010c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c94:	4615      	mov	r5, r2
 8010c96:	f012 0203 	ands.w	r2, r2, #3
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	460f      	mov	r7, r1
 8010c9e:	d007      	beq.n	8010cb0 <__pow5mult+0x20>
 8010ca0:	4c25      	ldr	r4, [pc, #148]	; (8010d38 <__pow5mult+0xa8>)
 8010ca2:	3a01      	subs	r2, #1
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010caa:	f7ff fe51 	bl	8010950 <__multadd>
 8010cae:	4607      	mov	r7, r0
 8010cb0:	10ad      	asrs	r5, r5, #2
 8010cb2:	d03d      	beq.n	8010d30 <__pow5mult+0xa0>
 8010cb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010cb6:	b97c      	cbnz	r4, 8010cd8 <__pow5mult+0x48>
 8010cb8:	2010      	movs	r0, #16
 8010cba:	f7ff fdbf 	bl	801083c <malloc>
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	6270      	str	r0, [r6, #36]	; 0x24
 8010cc2:	b928      	cbnz	r0, 8010cd0 <__pow5mult+0x40>
 8010cc4:	4b1d      	ldr	r3, [pc, #116]	; (8010d3c <__pow5mult+0xac>)
 8010cc6:	481e      	ldr	r0, [pc, #120]	; (8010d40 <__pow5mult+0xb0>)
 8010cc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010ccc:	f7fe fb98 	bl	800f400 <__assert_func>
 8010cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010cd4:	6004      	str	r4, [r0, #0]
 8010cd6:	60c4      	str	r4, [r0, #12]
 8010cd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ce0:	b94c      	cbnz	r4, 8010cf6 <__pow5mult+0x66>
 8010ce2:	f240 2171 	movw	r1, #625	; 0x271
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	f7ff ff16 	bl	8010b18 <__i2b>
 8010cec:	2300      	movs	r3, #0
 8010cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	6003      	str	r3, [r0, #0]
 8010cf6:	f04f 0900 	mov.w	r9, #0
 8010cfa:	07eb      	lsls	r3, r5, #31
 8010cfc:	d50a      	bpl.n	8010d14 <__pow5mult+0x84>
 8010cfe:	4639      	mov	r1, r7
 8010d00:	4622      	mov	r2, r4
 8010d02:	4630      	mov	r0, r6
 8010d04:	f7ff ff1e 	bl	8010b44 <__multiply>
 8010d08:	4639      	mov	r1, r7
 8010d0a:	4680      	mov	r8, r0
 8010d0c:	4630      	mov	r0, r6
 8010d0e:	f7ff fdfd 	bl	801090c <_Bfree>
 8010d12:	4647      	mov	r7, r8
 8010d14:	106d      	asrs	r5, r5, #1
 8010d16:	d00b      	beq.n	8010d30 <__pow5mult+0xa0>
 8010d18:	6820      	ldr	r0, [r4, #0]
 8010d1a:	b938      	cbnz	r0, 8010d2c <__pow5mult+0x9c>
 8010d1c:	4622      	mov	r2, r4
 8010d1e:	4621      	mov	r1, r4
 8010d20:	4630      	mov	r0, r6
 8010d22:	f7ff ff0f 	bl	8010b44 <__multiply>
 8010d26:	6020      	str	r0, [r4, #0]
 8010d28:	f8c0 9000 	str.w	r9, [r0]
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	e7e4      	b.n	8010cfa <__pow5mult+0x6a>
 8010d30:	4638      	mov	r0, r7
 8010d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d36:	bf00      	nop
 8010d38:	08025dd0 	.word	0x08025dd0
 8010d3c:	080259d0 	.word	0x080259d0
 8010d40:	08025c80 	.word	0x08025c80

08010d44 <__lshift>:
 8010d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d48:	460c      	mov	r4, r1
 8010d4a:	6849      	ldr	r1, [r1, #4]
 8010d4c:	6923      	ldr	r3, [r4, #16]
 8010d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d52:	68a3      	ldr	r3, [r4, #8]
 8010d54:	4607      	mov	r7, r0
 8010d56:	4691      	mov	r9, r2
 8010d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d5c:	f108 0601 	add.w	r6, r8, #1
 8010d60:	42b3      	cmp	r3, r6
 8010d62:	db0b      	blt.n	8010d7c <__lshift+0x38>
 8010d64:	4638      	mov	r0, r7
 8010d66:	f7ff fd91 	bl	801088c <_Balloc>
 8010d6a:	4605      	mov	r5, r0
 8010d6c:	b948      	cbnz	r0, 8010d82 <__lshift+0x3e>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	4b28      	ldr	r3, [pc, #160]	; (8010e14 <__lshift+0xd0>)
 8010d72:	4829      	ldr	r0, [pc, #164]	; (8010e18 <__lshift+0xd4>)
 8010d74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010d78:	f7fe fb42 	bl	800f400 <__assert_func>
 8010d7c:	3101      	adds	r1, #1
 8010d7e:	005b      	lsls	r3, r3, #1
 8010d80:	e7ee      	b.n	8010d60 <__lshift+0x1c>
 8010d82:	2300      	movs	r3, #0
 8010d84:	f100 0114 	add.w	r1, r0, #20
 8010d88:	f100 0210 	add.w	r2, r0, #16
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	4553      	cmp	r3, sl
 8010d90:	db33      	blt.n	8010dfa <__lshift+0xb6>
 8010d92:	6920      	ldr	r0, [r4, #16]
 8010d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d98:	f104 0314 	add.w	r3, r4, #20
 8010d9c:	f019 091f 	ands.w	r9, r9, #31
 8010da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010da4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010da8:	d02b      	beq.n	8010e02 <__lshift+0xbe>
 8010daa:	f1c9 0e20 	rsb	lr, r9, #32
 8010dae:	468a      	mov	sl, r1
 8010db0:	2200      	movs	r2, #0
 8010db2:	6818      	ldr	r0, [r3, #0]
 8010db4:	fa00 f009 	lsl.w	r0, r0, r9
 8010db8:	4302      	orrs	r2, r0
 8010dba:	f84a 2b04 	str.w	r2, [sl], #4
 8010dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dc2:	459c      	cmp	ip, r3
 8010dc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010dc8:	d8f3      	bhi.n	8010db2 <__lshift+0x6e>
 8010dca:	ebac 0304 	sub.w	r3, ip, r4
 8010dce:	3b15      	subs	r3, #21
 8010dd0:	f023 0303 	bic.w	r3, r3, #3
 8010dd4:	3304      	adds	r3, #4
 8010dd6:	f104 0015 	add.w	r0, r4, #21
 8010dda:	4584      	cmp	ip, r0
 8010ddc:	bf38      	it	cc
 8010dde:	2304      	movcc	r3, #4
 8010de0:	50ca      	str	r2, [r1, r3]
 8010de2:	b10a      	cbz	r2, 8010de8 <__lshift+0xa4>
 8010de4:	f108 0602 	add.w	r6, r8, #2
 8010de8:	3e01      	subs	r6, #1
 8010dea:	4638      	mov	r0, r7
 8010dec:	612e      	str	r6, [r5, #16]
 8010dee:	4621      	mov	r1, r4
 8010df0:	f7ff fd8c 	bl	801090c <_Bfree>
 8010df4:	4628      	mov	r0, r5
 8010df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010dfe:	3301      	adds	r3, #1
 8010e00:	e7c5      	b.n	8010d8e <__lshift+0x4a>
 8010e02:	3904      	subs	r1, #4
 8010e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e08:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e0c:	459c      	cmp	ip, r3
 8010e0e:	d8f9      	bhi.n	8010e04 <__lshift+0xc0>
 8010e10:	e7ea      	b.n	8010de8 <__lshift+0xa4>
 8010e12:	bf00      	nop
 8010e14:	08025bf1 	.word	0x08025bf1
 8010e18:	08025c80 	.word	0x08025c80

08010e1c <__mcmp>:
 8010e1c:	b530      	push	{r4, r5, lr}
 8010e1e:	6902      	ldr	r2, [r0, #16]
 8010e20:	690c      	ldr	r4, [r1, #16]
 8010e22:	1b12      	subs	r2, r2, r4
 8010e24:	d10e      	bne.n	8010e44 <__mcmp+0x28>
 8010e26:	f100 0314 	add.w	r3, r0, #20
 8010e2a:	3114      	adds	r1, #20
 8010e2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010e30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010e34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010e38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010e3c:	42a5      	cmp	r5, r4
 8010e3e:	d003      	beq.n	8010e48 <__mcmp+0x2c>
 8010e40:	d305      	bcc.n	8010e4e <__mcmp+0x32>
 8010e42:	2201      	movs	r2, #1
 8010e44:	4610      	mov	r0, r2
 8010e46:	bd30      	pop	{r4, r5, pc}
 8010e48:	4283      	cmp	r3, r0
 8010e4a:	d3f3      	bcc.n	8010e34 <__mcmp+0x18>
 8010e4c:	e7fa      	b.n	8010e44 <__mcmp+0x28>
 8010e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e52:	e7f7      	b.n	8010e44 <__mcmp+0x28>

08010e54 <__mdiff>:
 8010e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e58:	460c      	mov	r4, r1
 8010e5a:	4606      	mov	r6, r0
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	4620      	mov	r0, r4
 8010e60:	4617      	mov	r7, r2
 8010e62:	f7ff ffdb 	bl	8010e1c <__mcmp>
 8010e66:	1e05      	subs	r5, r0, #0
 8010e68:	d110      	bne.n	8010e8c <__mdiff+0x38>
 8010e6a:	4629      	mov	r1, r5
 8010e6c:	4630      	mov	r0, r6
 8010e6e:	f7ff fd0d 	bl	801088c <_Balloc>
 8010e72:	b930      	cbnz	r0, 8010e82 <__mdiff+0x2e>
 8010e74:	4b39      	ldr	r3, [pc, #228]	; (8010f5c <__mdiff+0x108>)
 8010e76:	4602      	mov	r2, r0
 8010e78:	f240 2132 	movw	r1, #562	; 0x232
 8010e7c:	4838      	ldr	r0, [pc, #224]	; (8010f60 <__mdiff+0x10c>)
 8010e7e:	f7fe fabf 	bl	800f400 <__assert_func>
 8010e82:	2301      	movs	r3, #1
 8010e84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e8c:	bfa4      	itt	ge
 8010e8e:	463b      	movge	r3, r7
 8010e90:	4627      	movge	r7, r4
 8010e92:	4630      	mov	r0, r6
 8010e94:	6879      	ldr	r1, [r7, #4]
 8010e96:	bfa6      	itte	ge
 8010e98:	461c      	movge	r4, r3
 8010e9a:	2500      	movge	r5, #0
 8010e9c:	2501      	movlt	r5, #1
 8010e9e:	f7ff fcf5 	bl	801088c <_Balloc>
 8010ea2:	b920      	cbnz	r0, 8010eae <__mdiff+0x5a>
 8010ea4:	4b2d      	ldr	r3, [pc, #180]	; (8010f5c <__mdiff+0x108>)
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010eac:	e7e6      	b.n	8010e7c <__mdiff+0x28>
 8010eae:	693e      	ldr	r6, [r7, #16]
 8010eb0:	60c5      	str	r5, [r0, #12]
 8010eb2:	6925      	ldr	r5, [r4, #16]
 8010eb4:	f107 0114 	add.w	r1, r7, #20
 8010eb8:	f104 0914 	add.w	r9, r4, #20
 8010ebc:	f100 0e14 	add.w	lr, r0, #20
 8010ec0:	f107 0210 	add.w	r2, r7, #16
 8010ec4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010ec8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010ecc:	46f2      	mov	sl, lr
 8010ece:	2700      	movs	r7, #0
 8010ed0:	f859 3b04 	ldr.w	r3, [r9], #4
 8010ed4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010ed8:	fa1f f883 	uxth.w	r8, r3
 8010edc:	fa17 f78b 	uxtah	r7, r7, fp
 8010ee0:	0c1b      	lsrs	r3, r3, #16
 8010ee2:	eba7 0808 	sub.w	r8, r7, r8
 8010ee6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010eea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010eee:	fa1f f888 	uxth.w	r8, r8
 8010ef2:	141f      	asrs	r7, r3, #16
 8010ef4:	454d      	cmp	r5, r9
 8010ef6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010efa:	f84a 3b04 	str.w	r3, [sl], #4
 8010efe:	d8e7      	bhi.n	8010ed0 <__mdiff+0x7c>
 8010f00:	1b2b      	subs	r3, r5, r4
 8010f02:	3b15      	subs	r3, #21
 8010f04:	f023 0303 	bic.w	r3, r3, #3
 8010f08:	3304      	adds	r3, #4
 8010f0a:	3415      	adds	r4, #21
 8010f0c:	42a5      	cmp	r5, r4
 8010f0e:	bf38      	it	cc
 8010f10:	2304      	movcc	r3, #4
 8010f12:	4419      	add	r1, r3
 8010f14:	4473      	add	r3, lr
 8010f16:	469e      	mov	lr, r3
 8010f18:	460d      	mov	r5, r1
 8010f1a:	4565      	cmp	r5, ip
 8010f1c:	d30e      	bcc.n	8010f3c <__mdiff+0xe8>
 8010f1e:	f10c 0203 	add.w	r2, ip, #3
 8010f22:	1a52      	subs	r2, r2, r1
 8010f24:	f022 0203 	bic.w	r2, r2, #3
 8010f28:	3903      	subs	r1, #3
 8010f2a:	458c      	cmp	ip, r1
 8010f2c:	bf38      	it	cc
 8010f2e:	2200      	movcc	r2, #0
 8010f30:	441a      	add	r2, r3
 8010f32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010f36:	b17b      	cbz	r3, 8010f58 <__mdiff+0x104>
 8010f38:	6106      	str	r6, [r0, #16]
 8010f3a:	e7a5      	b.n	8010e88 <__mdiff+0x34>
 8010f3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8010f40:	fa17 f488 	uxtah	r4, r7, r8
 8010f44:	1422      	asrs	r2, r4, #16
 8010f46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010f4a:	b2a4      	uxth	r4, r4
 8010f4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010f50:	f84e 4b04 	str.w	r4, [lr], #4
 8010f54:	1417      	asrs	r7, r2, #16
 8010f56:	e7e0      	b.n	8010f1a <__mdiff+0xc6>
 8010f58:	3e01      	subs	r6, #1
 8010f5a:	e7ea      	b.n	8010f32 <__mdiff+0xde>
 8010f5c:	08025bf1 	.word	0x08025bf1
 8010f60:	08025c80 	.word	0x08025c80

08010f64 <__ulp>:
 8010f64:	b082      	sub	sp, #8
 8010f66:	ed8d 0b00 	vstr	d0, [sp]
 8010f6a:	9b01      	ldr	r3, [sp, #4]
 8010f6c:	4912      	ldr	r1, [pc, #72]	; (8010fb8 <__ulp+0x54>)
 8010f6e:	4019      	ands	r1, r3
 8010f70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010f74:	2900      	cmp	r1, #0
 8010f76:	dd05      	ble.n	8010f84 <__ulp+0x20>
 8010f78:	2200      	movs	r2, #0
 8010f7a:	460b      	mov	r3, r1
 8010f7c:	ec43 2b10 	vmov	d0, r2, r3
 8010f80:	b002      	add	sp, #8
 8010f82:	4770      	bx	lr
 8010f84:	4249      	negs	r1, r1
 8010f86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010f8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010f8e:	f04f 0200 	mov.w	r2, #0
 8010f92:	f04f 0300 	mov.w	r3, #0
 8010f96:	da04      	bge.n	8010fa2 <__ulp+0x3e>
 8010f98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010f9c:	fa41 f300 	asr.w	r3, r1, r0
 8010fa0:	e7ec      	b.n	8010f7c <__ulp+0x18>
 8010fa2:	f1a0 0114 	sub.w	r1, r0, #20
 8010fa6:	291e      	cmp	r1, #30
 8010fa8:	bfda      	itte	le
 8010faa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010fae:	fa20 f101 	lsrle.w	r1, r0, r1
 8010fb2:	2101      	movgt	r1, #1
 8010fb4:	460a      	mov	r2, r1
 8010fb6:	e7e1      	b.n	8010f7c <__ulp+0x18>
 8010fb8:	7ff00000 	.word	0x7ff00000

08010fbc <__b2d>:
 8010fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fbe:	6905      	ldr	r5, [r0, #16]
 8010fc0:	f100 0714 	add.w	r7, r0, #20
 8010fc4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010fc8:	1f2e      	subs	r6, r5, #4
 8010fca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010fce:	4620      	mov	r0, r4
 8010fd0:	f7ff fd52 	bl	8010a78 <__hi0bits>
 8010fd4:	f1c0 0320 	rsb	r3, r0, #32
 8010fd8:	280a      	cmp	r0, #10
 8010fda:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011058 <__b2d+0x9c>
 8010fde:	600b      	str	r3, [r1, #0]
 8010fe0:	dc14      	bgt.n	801100c <__b2d+0x50>
 8010fe2:	f1c0 0e0b 	rsb	lr, r0, #11
 8010fe6:	fa24 f10e 	lsr.w	r1, r4, lr
 8010fea:	42b7      	cmp	r7, r6
 8010fec:	ea41 030c 	orr.w	r3, r1, ip
 8010ff0:	bf34      	ite	cc
 8010ff2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010ff6:	2100      	movcs	r1, #0
 8010ff8:	3015      	adds	r0, #21
 8010ffa:	fa04 f000 	lsl.w	r0, r4, r0
 8010ffe:	fa21 f10e 	lsr.w	r1, r1, lr
 8011002:	ea40 0201 	orr.w	r2, r0, r1
 8011006:	ec43 2b10 	vmov	d0, r2, r3
 801100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801100c:	42b7      	cmp	r7, r6
 801100e:	bf3a      	itte	cc
 8011010:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011014:	f1a5 0608 	subcc.w	r6, r5, #8
 8011018:	2100      	movcs	r1, #0
 801101a:	380b      	subs	r0, #11
 801101c:	d017      	beq.n	801104e <__b2d+0x92>
 801101e:	f1c0 0c20 	rsb	ip, r0, #32
 8011022:	fa04 f500 	lsl.w	r5, r4, r0
 8011026:	42be      	cmp	r6, r7
 8011028:	fa21 f40c 	lsr.w	r4, r1, ip
 801102c:	ea45 0504 	orr.w	r5, r5, r4
 8011030:	bf8c      	ite	hi
 8011032:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011036:	2400      	movls	r4, #0
 8011038:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801103c:	fa01 f000 	lsl.w	r0, r1, r0
 8011040:	fa24 f40c 	lsr.w	r4, r4, ip
 8011044:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011048:	ea40 0204 	orr.w	r2, r0, r4
 801104c:	e7db      	b.n	8011006 <__b2d+0x4a>
 801104e:	ea44 030c 	orr.w	r3, r4, ip
 8011052:	460a      	mov	r2, r1
 8011054:	e7d7      	b.n	8011006 <__b2d+0x4a>
 8011056:	bf00      	nop
 8011058:	3ff00000 	.word	0x3ff00000

0801105c <__d2b>:
 801105c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011060:	4689      	mov	r9, r1
 8011062:	2101      	movs	r1, #1
 8011064:	ec57 6b10 	vmov	r6, r7, d0
 8011068:	4690      	mov	r8, r2
 801106a:	f7ff fc0f 	bl	801088c <_Balloc>
 801106e:	4604      	mov	r4, r0
 8011070:	b930      	cbnz	r0, 8011080 <__d2b+0x24>
 8011072:	4602      	mov	r2, r0
 8011074:	4b25      	ldr	r3, [pc, #148]	; (801110c <__d2b+0xb0>)
 8011076:	4826      	ldr	r0, [pc, #152]	; (8011110 <__d2b+0xb4>)
 8011078:	f240 310a 	movw	r1, #778	; 0x30a
 801107c:	f7fe f9c0 	bl	800f400 <__assert_func>
 8011080:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011084:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011088:	bb35      	cbnz	r5, 80110d8 <__d2b+0x7c>
 801108a:	2e00      	cmp	r6, #0
 801108c:	9301      	str	r3, [sp, #4]
 801108e:	d028      	beq.n	80110e2 <__d2b+0x86>
 8011090:	4668      	mov	r0, sp
 8011092:	9600      	str	r6, [sp, #0]
 8011094:	f7ff fd10 	bl	8010ab8 <__lo0bits>
 8011098:	9900      	ldr	r1, [sp, #0]
 801109a:	b300      	cbz	r0, 80110de <__d2b+0x82>
 801109c:	9a01      	ldr	r2, [sp, #4]
 801109e:	f1c0 0320 	rsb	r3, r0, #32
 80110a2:	fa02 f303 	lsl.w	r3, r2, r3
 80110a6:	430b      	orrs	r3, r1
 80110a8:	40c2      	lsrs	r2, r0
 80110aa:	6163      	str	r3, [r4, #20]
 80110ac:	9201      	str	r2, [sp, #4]
 80110ae:	9b01      	ldr	r3, [sp, #4]
 80110b0:	61a3      	str	r3, [r4, #24]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	bf14      	ite	ne
 80110b6:	2202      	movne	r2, #2
 80110b8:	2201      	moveq	r2, #1
 80110ba:	6122      	str	r2, [r4, #16]
 80110bc:	b1d5      	cbz	r5, 80110f4 <__d2b+0x98>
 80110be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80110c2:	4405      	add	r5, r0
 80110c4:	f8c9 5000 	str.w	r5, [r9]
 80110c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80110cc:	f8c8 0000 	str.w	r0, [r8]
 80110d0:	4620      	mov	r0, r4
 80110d2:	b003      	add	sp, #12
 80110d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80110dc:	e7d5      	b.n	801108a <__d2b+0x2e>
 80110de:	6161      	str	r1, [r4, #20]
 80110e0:	e7e5      	b.n	80110ae <__d2b+0x52>
 80110e2:	a801      	add	r0, sp, #4
 80110e4:	f7ff fce8 	bl	8010ab8 <__lo0bits>
 80110e8:	9b01      	ldr	r3, [sp, #4]
 80110ea:	6163      	str	r3, [r4, #20]
 80110ec:	2201      	movs	r2, #1
 80110ee:	6122      	str	r2, [r4, #16]
 80110f0:	3020      	adds	r0, #32
 80110f2:	e7e3      	b.n	80110bc <__d2b+0x60>
 80110f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80110f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80110fc:	f8c9 0000 	str.w	r0, [r9]
 8011100:	6918      	ldr	r0, [r3, #16]
 8011102:	f7ff fcb9 	bl	8010a78 <__hi0bits>
 8011106:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801110a:	e7df      	b.n	80110cc <__d2b+0x70>
 801110c:	08025bf1 	.word	0x08025bf1
 8011110:	08025c80 	.word	0x08025c80

08011114 <__ratio>:
 8011114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011118:	4688      	mov	r8, r1
 801111a:	4669      	mov	r1, sp
 801111c:	4681      	mov	r9, r0
 801111e:	f7ff ff4d 	bl	8010fbc <__b2d>
 8011122:	a901      	add	r1, sp, #4
 8011124:	4640      	mov	r0, r8
 8011126:	ec55 4b10 	vmov	r4, r5, d0
 801112a:	f7ff ff47 	bl	8010fbc <__b2d>
 801112e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011132:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011136:	eba3 0c02 	sub.w	ip, r3, r2
 801113a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801113e:	1a9b      	subs	r3, r3, r2
 8011140:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011144:	ec51 0b10 	vmov	r0, r1, d0
 8011148:	2b00      	cmp	r3, #0
 801114a:	bfd6      	itet	le
 801114c:	460a      	movle	r2, r1
 801114e:	462a      	movgt	r2, r5
 8011150:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011154:	468b      	mov	fp, r1
 8011156:	462f      	mov	r7, r5
 8011158:	bfd4      	ite	le
 801115a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801115e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011162:	4620      	mov	r0, r4
 8011164:	ee10 2a10 	vmov	r2, s0
 8011168:	465b      	mov	r3, fp
 801116a:	4639      	mov	r1, r7
 801116c:	f7ef fb86 	bl	800087c <__aeabi_ddiv>
 8011170:	ec41 0b10 	vmov	d0, r0, r1
 8011174:	b003      	add	sp, #12
 8011176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801117a <__copybits>:
 801117a:	3901      	subs	r1, #1
 801117c:	b570      	push	{r4, r5, r6, lr}
 801117e:	1149      	asrs	r1, r1, #5
 8011180:	6914      	ldr	r4, [r2, #16]
 8011182:	3101      	adds	r1, #1
 8011184:	f102 0314 	add.w	r3, r2, #20
 8011188:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801118c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011190:	1f05      	subs	r5, r0, #4
 8011192:	42a3      	cmp	r3, r4
 8011194:	d30c      	bcc.n	80111b0 <__copybits+0x36>
 8011196:	1aa3      	subs	r3, r4, r2
 8011198:	3b11      	subs	r3, #17
 801119a:	f023 0303 	bic.w	r3, r3, #3
 801119e:	3211      	adds	r2, #17
 80111a0:	42a2      	cmp	r2, r4
 80111a2:	bf88      	it	hi
 80111a4:	2300      	movhi	r3, #0
 80111a6:	4418      	add	r0, r3
 80111a8:	2300      	movs	r3, #0
 80111aa:	4288      	cmp	r0, r1
 80111ac:	d305      	bcc.n	80111ba <__copybits+0x40>
 80111ae:	bd70      	pop	{r4, r5, r6, pc}
 80111b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80111b4:	f845 6f04 	str.w	r6, [r5, #4]!
 80111b8:	e7eb      	b.n	8011192 <__copybits+0x18>
 80111ba:	f840 3b04 	str.w	r3, [r0], #4
 80111be:	e7f4      	b.n	80111aa <__copybits+0x30>

080111c0 <__any_on>:
 80111c0:	f100 0214 	add.w	r2, r0, #20
 80111c4:	6900      	ldr	r0, [r0, #16]
 80111c6:	114b      	asrs	r3, r1, #5
 80111c8:	4298      	cmp	r0, r3
 80111ca:	b510      	push	{r4, lr}
 80111cc:	db11      	blt.n	80111f2 <__any_on+0x32>
 80111ce:	dd0a      	ble.n	80111e6 <__any_on+0x26>
 80111d0:	f011 011f 	ands.w	r1, r1, #31
 80111d4:	d007      	beq.n	80111e6 <__any_on+0x26>
 80111d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80111da:	fa24 f001 	lsr.w	r0, r4, r1
 80111de:	fa00 f101 	lsl.w	r1, r0, r1
 80111e2:	428c      	cmp	r4, r1
 80111e4:	d10b      	bne.n	80111fe <__any_on+0x3e>
 80111e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80111ea:	4293      	cmp	r3, r2
 80111ec:	d803      	bhi.n	80111f6 <__any_on+0x36>
 80111ee:	2000      	movs	r0, #0
 80111f0:	bd10      	pop	{r4, pc}
 80111f2:	4603      	mov	r3, r0
 80111f4:	e7f7      	b.n	80111e6 <__any_on+0x26>
 80111f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80111fa:	2900      	cmp	r1, #0
 80111fc:	d0f5      	beq.n	80111ea <__any_on+0x2a>
 80111fe:	2001      	movs	r0, #1
 8011200:	e7f6      	b.n	80111f0 <__any_on+0x30>

08011202 <_calloc_r>:
 8011202:	b513      	push	{r0, r1, r4, lr}
 8011204:	434a      	muls	r2, r1
 8011206:	4611      	mov	r1, r2
 8011208:	9201      	str	r2, [sp, #4]
 801120a:	f000 f859 	bl	80112c0 <_malloc_r>
 801120e:	4604      	mov	r4, r0
 8011210:	b118      	cbz	r0, 801121a <_calloc_r+0x18>
 8011212:	9a01      	ldr	r2, [sp, #4]
 8011214:	2100      	movs	r1, #0
 8011216:	f7fc fb25 	bl	800d864 <memset>
 801121a:	4620      	mov	r0, r4
 801121c:	b002      	add	sp, #8
 801121e:	bd10      	pop	{r4, pc}

08011220 <_free_r>:
 8011220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011222:	2900      	cmp	r1, #0
 8011224:	d048      	beq.n	80112b8 <_free_r+0x98>
 8011226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801122a:	9001      	str	r0, [sp, #4]
 801122c:	2b00      	cmp	r3, #0
 801122e:	f1a1 0404 	sub.w	r4, r1, #4
 8011232:	bfb8      	it	lt
 8011234:	18e4      	addlt	r4, r4, r3
 8011236:	f000 fe8b 	bl	8011f50 <__malloc_lock>
 801123a:	4a20      	ldr	r2, [pc, #128]	; (80112bc <_free_r+0x9c>)
 801123c:	9801      	ldr	r0, [sp, #4]
 801123e:	6813      	ldr	r3, [r2, #0]
 8011240:	4615      	mov	r5, r2
 8011242:	b933      	cbnz	r3, 8011252 <_free_r+0x32>
 8011244:	6063      	str	r3, [r4, #4]
 8011246:	6014      	str	r4, [r2, #0]
 8011248:	b003      	add	sp, #12
 801124a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801124e:	f000 be85 	b.w	8011f5c <__malloc_unlock>
 8011252:	42a3      	cmp	r3, r4
 8011254:	d90b      	bls.n	801126e <_free_r+0x4e>
 8011256:	6821      	ldr	r1, [r4, #0]
 8011258:	1862      	adds	r2, r4, r1
 801125a:	4293      	cmp	r3, r2
 801125c:	bf04      	itt	eq
 801125e:	681a      	ldreq	r2, [r3, #0]
 8011260:	685b      	ldreq	r3, [r3, #4]
 8011262:	6063      	str	r3, [r4, #4]
 8011264:	bf04      	itt	eq
 8011266:	1852      	addeq	r2, r2, r1
 8011268:	6022      	streq	r2, [r4, #0]
 801126a:	602c      	str	r4, [r5, #0]
 801126c:	e7ec      	b.n	8011248 <_free_r+0x28>
 801126e:	461a      	mov	r2, r3
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	b10b      	cbz	r3, 8011278 <_free_r+0x58>
 8011274:	42a3      	cmp	r3, r4
 8011276:	d9fa      	bls.n	801126e <_free_r+0x4e>
 8011278:	6811      	ldr	r1, [r2, #0]
 801127a:	1855      	adds	r5, r2, r1
 801127c:	42a5      	cmp	r5, r4
 801127e:	d10b      	bne.n	8011298 <_free_r+0x78>
 8011280:	6824      	ldr	r4, [r4, #0]
 8011282:	4421      	add	r1, r4
 8011284:	1854      	adds	r4, r2, r1
 8011286:	42a3      	cmp	r3, r4
 8011288:	6011      	str	r1, [r2, #0]
 801128a:	d1dd      	bne.n	8011248 <_free_r+0x28>
 801128c:	681c      	ldr	r4, [r3, #0]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	6053      	str	r3, [r2, #4]
 8011292:	4421      	add	r1, r4
 8011294:	6011      	str	r1, [r2, #0]
 8011296:	e7d7      	b.n	8011248 <_free_r+0x28>
 8011298:	d902      	bls.n	80112a0 <_free_r+0x80>
 801129a:	230c      	movs	r3, #12
 801129c:	6003      	str	r3, [r0, #0]
 801129e:	e7d3      	b.n	8011248 <_free_r+0x28>
 80112a0:	6825      	ldr	r5, [r4, #0]
 80112a2:	1961      	adds	r1, r4, r5
 80112a4:	428b      	cmp	r3, r1
 80112a6:	bf04      	itt	eq
 80112a8:	6819      	ldreq	r1, [r3, #0]
 80112aa:	685b      	ldreq	r3, [r3, #4]
 80112ac:	6063      	str	r3, [r4, #4]
 80112ae:	bf04      	itt	eq
 80112b0:	1949      	addeq	r1, r1, r5
 80112b2:	6021      	streq	r1, [r4, #0]
 80112b4:	6054      	str	r4, [r2, #4]
 80112b6:	e7c7      	b.n	8011248 <_free_r+0x28>
 80112b8:	b003      	add	sp, #12
 80112ba:	bd30      	pop	{r4, r5, pc}
 80112bc:	20000284 	.word	0x20000284

080112c0 <_malloc_r>:
 80112c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112c2:	1ccd      	adds	r5, r1, #3
 80112c4:	f025 0503 	bic.w	r5, r5, #3
 80112c8:	3508      	adds	r5, #8
 80112ca:	2d0c      	cmp	r5, #12
 80112cc:	bf38      	it	cc
 80112ce:	250c      	movcc	r5, #12
 80112d0:	2d00      	cmp	r5, #0
 80112d2:	4606      	mov	r6, r0
 80112d4:	db01      	blt.n	80112da <_malloc_r+0x1a>
 80112d6:	42a9      	cmp	r1, r5
 80112d8:	d903      	bls.n	80112e2 <_malloc_r+0x22>
 80112da:	230c      	movs	r3, #12
 80112dc:	6033      	str	r3, [r6, #0]
 80112de:	2000      	movs	r0, #0
 80112e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112e2:	f000 fe35 	bl	8011f50 <__malloc_lock>
 80112e6:	4921      	ldr	r1, [pc, #132]	; (801136c <_malloc_r+0xac>)
 80112e8:	680a      	ldr	r2, [r1, #0]
 80112ea:	4614      	mov	r4, r2
 80112ec:	b99c      	cbnz	r4, 8011316 <_malloc_r+0x56>
 80112ee:	4f20      	ldr	r7, [pc, #128]	; (8011370 <_malloc_r+0xb0>)
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	b923      	cbnz	r3, 80112fe <_malloc_r+0x3e>
 80112f4:	4621      	mov	r1, r4
 80112f6:	4630      	mov	r0, r6
 80112f8:	f000 fafa 	bl	80118f0 <_sbrk_r>
 80112fc:	6038      	str	r0, [r7, #0]
 80112fe:	4629      	mov	r1, r5
 8011300:	4630      	mov	r0, r6
 8011302:	f000 faf5 	bl	80118f0 <_sbrk_r>
 8011306:	1c43      	adds	r3, r0, #1
 8011308:	d123      	bne.n	8011352 <_malloc_r+0x92>
 801130a:	230c      	movs	r3, #12
 801130c:	6033      	str	r3, [r6, #0]
 801130e:	4630      	mov	r0, r6
 8011310:	f000 fe24 	bl	8011f5c <__malloc_unlock>
 8011314:	e7e3      	b.n	80112de <_malloc_r+0x1e>
 8011316:	6823      	ldr	r3, [r4, #0]
 8011318:	1b5b      	subs	r3, r3, r5
 801131a:	d417      	bmi.n	801134c <_malloc_r+0x8c>
 801131c:	2b0b      	cmp	r3, #11
 801131e:	d903      	bls.n	8011328 <_malloc_r+0x68>
 8011320:	6023      	str	r3, [r4, #0]
 8011322:	441c      	add	r4, r3
 8011324:	6025      	str	r5, [r4, #0]
 8011326:	e004      	b.n	8011332 <_malloc_r+0x72>
 8011328:	6863      	ldr	r3, [r4, #4]
 801132a:	42a2      	cmp	r2, r4
 801132c:	bf0c      	ite	eq
 801132e:	600b      	streq	r3, [r1, #0]
 8011330:	6053      	strne	r3, [r2, #4]
 8011332:	4630      	mov	r0, r6
 8011334:	f000 fe12 	bl	8011f5c <__malloc_unlock>
 8011338:	f104 000b 	add.w	r0, r4, #11
 801133c:	1d23      	adds	r3, r4, #4
 801133e:	f020 0007 	bic.w	r0, r0, #7
 8011342:	1ac2      	subs	r2, r0, r3
 8011344:	d0cc      	beq.n	80112e0 <_malloc_r+0x20>
 8011346:	1a1b      	subs	r3, r3, r0
 8011348:	50a3      	str	r3, [r4, r2]
 801134a:	e7c9      	b.n	80112e0 <_malloc_r+0x20>
 801134c:	4622      	mov	r2, r4
 801134e:	6864      	ldr	r4, [r4, #4]
 8011350:	e7cc      	b.n	80112ec <_malloc_r+0x2c>
 8011352:	1cc4      	adds	r4, r0, #3
 8011354:	f024 0403 	bic.w	r4, r4, #3
 8011358:	42a0      	cmp	r0, r4
 801135a:	d0e3      	beq.n	8011324 <_malloc_r+0x64>
 801135c:	1a21      	subs	r1, r4, r0
 801135e:	4630      	mov	r0, r6
 8011360:	f000 fac6 	bl	80118f0 <_sbrk_r>
 8011364:	3001      	adds	r0, #1
 8011366:	d1dd      	bne.n	8011324 <_malloc_r+0x64>
 8011368:	e7cf      	b.n	801130a <_malloc_r+0x4a>
 801136a:	bf00      	nop
 801136c:	20000284 	.word	0x20000284
 8011370:	20000288 	.word	0x20000288

08011374 <__ssputs_r>:
 8011374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011378:	688e      	ldr	r6, [r1, #8]
 801137a:	429e      	cmp	r6, r3
 801137c:	4682      	mov	sl, r0
 801137e:	460c      	mov	r4, r1
 8011380:	4690      	mov	r8, r2
 8011382:	461f      	mov	r7, r3
 8011384:	d838      	bhi.n	80113f8 <__ssputs_r+0x84>
 8011386:	898a      	ldrh	r2, [r1, #12]
 8011388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801138c:	d032      	beq.n	80113f4 <__ssputs_r+0x80>
 801138e:	6825      	ldr	r5, [r4, #0]
 8011390:	6909      	ldr	r1, [r1, #16]
 8011392:	eba5 0901 	sub.w	r9, r5, r1
 8011396:	6965      	ldr	r5, [r4, #20]
 8011398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801139c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80113a0:	3301      	adds	r3, #1
 80113a2:	444b      	add	r3, r9
 80113a4:	106d      	asrs	r5, r5, #1
 80113a6:	429d      	cmp	r5, r3
 80113a8:	bf38      	it	cc
 80113aa:	461d      	movcc	r5, r3
 80113ac:	0553      	lsls	r3, r2, #21
 80113ae:	d531      	bpl.n	8011414 <__ssputs_r+0xa0>
 80113b0:	4629      	mov	r1, r5
 80113b2:	f7ff ff85 	bl	80112c0 <_malloc_r>
 80113b6:	4606      	mov	r6, r0
 80113b8:	b950      	cbnz	r0, 80113d0 <__ssputs_r+0x5c>
 80113ba:	230c      	movs	r3, #12
 80113bc:	f8ca 3000 	str.w	r3, [sl]
 80113c0:	89a3      	ldrh	r3, [r4, #12]
 80113c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113c6:	81a3      	strh	r3, [r4, #12]
 80113c8:	f04f 30ff 	mov.w	r0, #4294967295
 80113cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113d0:	6921      	ldr	r1, [r4, #16]
 80113d2:	464a      	mov	r2, r9
 80113d4:	f7ff fa4c 	bl	8010870 <memcpy>
 80113d8:	89a3      	ldrh	r3, [r4, #12]
 80113da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80113de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113e2:	81a3      	strh	r3, [r4, #12]
 80113e4:	6126      	str	r6, [r4, #16]
 80113e6:	6165      	str	r5, [r4, #20]
 80113e8:	444e      	add	r6, r9
 80113ea:	eba5 0509 	sub.w	r5, r5, r9
 80113ee:	6026      	str	r6, [r4, #0]
 80113f0:	60a5      	str	r5, [r4, #8]
 80113f2:	463e      	mov	r6, r7
 80113f4:	42be      	cmp	r6, r7
 80113f6:	d900      	bls.n	80113fa <__ssputs_r+0x86>
 80113f8:	463e      	mov	r6, r7
 80113fa:	4632      	mov	r2, r6
 80113fc:	6820      	ldr	r0, [r4, #0]
 80113fe:	4641      	mov	r1, r8
 8011400:	f000 fd8c 	bl	8011f1c <memmove>
 8011404:	68a3      	ldr	r3, [r4, #8]
 8011406:	6822      	ldr	r2, [r4, #0]
 8011408:	1b9b      	subs	r3, r3, r6
 801140a:	4432      	add	r2, r6
 801140c:	60a3      	str	r3, [r4, #8]
 801140e:	6022      	str	r2, [r4, #0]
 8011410:	2000      	movs	r0, #0
 8011412:	e7db      	b.n	80113cc <__ssputs_r+0x58>
 8011414:	462a      	mov	r2, r5
 8011416:	f000 fda7 	bl	8011f68 <_realloc_r>
 801141a:	4606      	mov	r6, r0
 801141c:	2800      	cmp	r0, #0
 801141e:	d1e1      	bne.n	80113e4 <__ssputs_r+0x70>
 8011420:	6921      	ldr	r1, [r4, #16]
 8011422:	4650      	mov	r0, sl
 8011424:	f7ff fefc 	bl	8011220 <_free_r>
 8011428:	e7c7      	b.n	80113ba <__ssputs_r+0x46>
	...

0801142c <_svfiprintf_r>:
 801142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011430:	4698      	mov	r8, r3
 8011432:	898b      	ldrh	r3, [r1, #12]
 8011434:	061b      	lsls	r3, r3, #24
 8011436:	b09d      	sub	sp, #116	; 0x74
 8011438:	4607      	mov	r7, r0
 801143a:	460d      	mov	r5, r1
 801143c:	4614      	mov	r4, r2
 801143e:	d50e      	bpl.n	801145e <_svfiprintf_r+0x32>
 8011440:	690b      	ldr	r3, [r1, #16]
 8011442:	b963      	cbnz	r3, 801145e <_svfiprintf_r+0x32>
 8011444:	2140      	movs	r1, #64	; 0x40
 8011446:	f7ff ff3b 	bl	80112c0 <_malloc_r>
 801144a:	6028      	str	r0, [r5, #0]
 801144c:	6128      	str	r0, [r5, #16]
 801144e:	b920      	cbnz	r0, 801145a <_svfiprintf_r+0x2e>
 8011450:	230c      	movs	r3, #12
 8011452:	603b      	str	r3, [r7, #0]
 8011454:	f04f 30ff 	mov.w	r0, #4294967295
 8011458:	e0d1      	b.n	80115fe <_svfiprintf_r+0x1d2>
 801145a:	2340      	movs	r3, #64	; 0x40
 801145c:	616b      	str	r3, [r5, #20]
 801145e:	2300      	movs	r3, #0
 8011460:	9309      	str	r3, [sp, #36]	; 0x24
 8011462:	2320      	movs	r3, #32
 8011464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011468:	f8cd 800c 	str.w	r8, [sp, #12]
 801146c:	2330      	movs	r3, #48	; 0x30
 801146e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011618 <_svfiprintf_r+0x1ec>
 8011472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011476:	f04f 0901 	mov.w	r9, #1
 801147a:	4623      	mov	r3, r4
 801147c:	469a      	mov	sl, r3
 801147e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011482:	b10a      	cbz	r2, 8011488 <_svfiprintf_r+0x5c>
 8011484:	2a25      	cmp	r2, #37	; 0x25
 8011486:	d1f9      	bne.n	801147c <_svfiprintf_r+0x50>
 8011488:	ebba 0b04 	subs.w	fp, sl, r4
 801148c:	d00b      	beq.n	80114a6 <_svfiprintf_r+0x7a>
 801148e:	465b      	mov	r3, fp
 8011490:	4622      	mov	r2, r4
 8011492:	4629      	mov	r1, r5
 8011494:	4638      	mov	r0, r7
 8011496:	f7ff ff6d 	bl	8011374 <__ssputs_r>
 801149a:	3001      	adds	r0, #1
 801149c:	f000 80aa 	beq.w	80115f4 <_svfiprintf_r+0x1c8>
 80114a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114a2:	445a      	add	r2, fp
 80114a4:	9209      	str	r2, [sp, #36]	; 0x24
 80114a6:	f89a 3000 	ldrb.w	r3, [sl]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	f000 80a2 	beq.w	80115f4 <_svfiprintf_r+0x1c8>
 80114b0:	2300      	movs	r3, #0
 80114b2:	f04f 32ff 	mov.w	r2, #4294967295
 80114b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114ba:	f10a 0a01 	add.w	sl, sl, #1
 80114be:	9304      	str	r3, [sp, #16]
 80114c0:	9307      	str	r3, [sp, #28]
 80114c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80114c6:	931a      	str	r3, [sp, #104]	; 0x68
 80114c8:	4654      	mov	r4, sl
 80114ca:	2205      	movs	r2, #5
 80114cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114d0:	4851      	ldr	r0, [pc, #324]	; (8011618 <_svfiprintf_r+0x1ec>)
 80114d2:	f7ee fe9d 	bl	8000210 <memchr>
 80114d6:	9a04      	ldr	r2, [sp, #16]
 80114d8:	b9d8      	cbnz	r0, 8011512 <_svfiprintf_r+0xe6>
 80114da:	06d0      	lsls	r0, r2, #27
 80114dc:	bf44      	itt	mi
 80114de:	2320      	movmi	r3, #32
 80114e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114e4:	0711      	lsls	r1, r2, #28
 80114e6:	bf44      	itt	mi
 80114e8:	232b      	movmi	r3, #43	; 0x2b
 80114ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114ee:	f89a 3000 	ldrb.w	r3, [sl]
 80114f2:	2b2a      	cmp	r3, #42	; 0x2a
 80114f4:	d015      	beq.n	8011522 <_svfiprintf_r+0xf6>
 80114f6:	9a07      	ldr	r2, [sp, #28]
 80114f8:	4654      	mov	r4, sl
 80114fa:	2000      	movs	r0, #0
 80114fc:	f04f 0c0a 	mov.w	ip, #10
 8011500:	4621      	mov	r1, r4
 8011502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011506:	3b30      	subs	r3, #48	; 0x30
 8011508:	2b09      	cmp	r3, #9
 801150a:	d94e      	bls.n	80115aa <_svfiprintf_r+0x17e>
 801150c:	b1b0      	cbz	r0, 801153c <_svfiprintf_r+0x110>
 801150e:	9207      	str	r2, [sp, #28]
 8011510:	e014      	b.n	801153c <_svfiprintf_r+0x110>
 8011512:	eba0 0308 	sub.w	r3, r0, r8
 8011516:	fa09 f303 	lsl.w	r3, r9, r3
 801151a:	4313      	orrs	r3, r2
 801151c:	9304      	str	r3, [sp, #16]
 801151e:	46a2      	mov	sl, r4
 8011520:	e7d2      	b.n	80114c8 <_svfiprintf_r+0x9c>
 8011522:	9b03      	ldr	r3, [sp, #12]
 8011524:	1d19      	adds	r1, r3, #4
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	9103      	str	r1, [sp, #12]
 801152a:	2b00      	cmp	r3, #0
 801152c:	bfbb      	ittet	lt
 801152e:	425b      	neglt	r3, r3
 8011530:	f042 0202 	orrlt.w	r2, r2, #2
 8011534:	9307      	strge	r3, [sp, #28]
 8011536:	9307      	strlt	r3, [sp, #28]
 8011538:	bfb8      	it	lt
 801153a:	9204      	strlt	r2, [sp, #16]
 801153c:	7823      	ldrb	r3, [r4, #0]
 801153e:	2b2e      	cmp	r3, #46	; 0x2e
 8011540:	d10c      	bne.n	801155c <_svfiprintf_r+0x130>
 8011542:	7863      	ldrb	r3, [r4, #1]
 8011544:	2b2a      	cmp	r3, #42	; 0x2a
 8011546:	d135      	bne.n	80115b4 <_svfiprintf_r+0x188>
 8011548:	9b03      	ldr	r3, [sp, #12]
 801154a:	1d1a      	adds	r2, r3, #4
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	9203      	str	r2, [sp, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	bfb8      	it	lt
 8011554:	f04f 33ff 	movlt.w	r3, #4294967295
 8011558:	3402      	adds	r4, #2
 801155a:	9305      	str	r3, [sp, #20]
 801155c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011628 <_svfiprintf_r+0x1fc>
 8011560:	7821      	ldrb	r1, [r4, #0]
 8011562:	2203      	movs	r2, #3
 8011564:	4650      	mov	r0, sl
 8011566:	f7ee fe53 	bl	8000210 <memchr>
 801156a:	b140      	cbz	r0, 801157e <_svfiprintf_r+0x152>
 801156c:	2340      	movs	r3, #64	; 0x40
 801156e:	eba0 000a 	sub.w	r0, r0, sl
 8011572:	fa03 f000 	lsl.w	r0, r3, r0
 8011576:	9b04      	ldr	r3, [sp, #16]
 8011578:	4303      	orrs	r3, r0
 801157a:	3401      	adds	r4, #1
 801157c:	9304      	str	r3, [sp, #16]
 801157e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011582:	4826      	ldr	r0, [pc, #152]	; (801161c <_svfiprintf_r+0x1f0>)
 8011584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011588:	2206      	movs	r2, #6
 801158a:	f7ee fe41 	bl	8000210 <memchr>
 801158e:	2800      	cmp	r0, #0
 8011590:	d038      	beq.n	8011604 <_svfiprintf_r+0x1d8>
 8011592:	4b23      	ldr	r3, [pc, #140]	; (8011620 <_svfiprintf_r+0x1f4>)
 8011594:	bb1b      	cbnz	r3, 80115de <_svfiprintf_r+0x1b2>
 8011596:	9b03      	ldr	r3, [sp, #12]
 8011598:	3307      	adds	r3, #7
 801159a:	f023 0307 	bic.w	r3, r3, #7
 801159e:	3308      	adds	r3, #8
 80115a0:	9303      	str	r3, [sp, #12]
 80115a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115a4:	4433      	add	r3, r6
 80115a6:	9309      	str	r3, [sp, #36]	; 0x24
 80115a8:	e767      	b.n	801147a <_svfiprintf_r+0x4e>
 80115aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80115ae:	460c      	mov	r4, r1
 80115b0:	2001      	movs	r0, #1
 80115b2:	e7a5      	b.n	8011500 <_svfiprintf_r+0xd4>
 80115b4:	2300      	movs	r3, #0
 80115b6:	3401      	adds	r4, #1
 80115b8:	9305      	str	r3, [sp, #20]
 80115ba:	4619      	mov	r1, r3
 80115bc:	f04f 0c0a 	mov.w	ip, #10
 80115c0:	4620      	mov	r0, r4
 80115c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115c6:	3a30      	subs	r2, #48	; 0x30
 80115c8:	2a09      	cmp	r2, #9
 80115ca:	d903      	bls.n	80115d4 <_svfiprintf_r+0x1a8>
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d0c5      	beq.n	801155c <_svfiprintf_r+0x130>
 80115d0:	9105      	str	r1, [sp, #20]
 80115d2:	e7c3      	b.n	801155c <_svfiprintf_r+0x130>
 80115d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80115d8:	4604      	mov	r4, r0
 80115da:	2301      	movs	r3, #1
 80115dc:	e7f0      	b.n	80115c0 <_svfiprintf_r+0x194>
 80115de:	ab03      	add	r3, sp, #12
 80115e0:	9300      	str	r3, [sp, #0]
 80115e2:	462a      	mov	r2, r5
 80115e4:	4b0f      	ldr	r3, [pc, #60]	; (8011624 <_svfiprintf_r+0x1f8>)
 80115e6:	a904      	add	r1, sp, #16
 80115e8:	4638      	mov	r0, r7
 80115ea:	f7fc f9e3 	bl	800d9b4 <_printf_float>
 80115ee:	1c42      	adds	r2, r0, #1
 80115f0:	4606      	mov	r6, r0
 80115f2:	d1d6      	bne.n	80115a2 <_svfiprintf_r+0x176>
 80115f4:	89ab      	ldrh	r3, [r5, #12]
 80115f6:	065b      	lsls	r3, r3, #25
 80115f8:	f53f af2c 	bmi.w	8011454 <_svfiprintf_r+0x28>
 80115fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115fe:	b01d      	add	sp, #116	; 0x74
 8011600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011604:	ab03      	add	r3, sp, #12
 8011606:	9300      	str	r3, [sp, #0]
 8011608:	462a      	mov	r2, r5
 801160a:	4b06      	ldr	r3, [pc, #24]	; (8011624 <_svfiprintf_r+0x1f8>)
 801160c:	a904      	add	r1, sp, #16
 801160e:	4638      	mov	r0, r7
 8011610:	f7fc fc74 	bl	800defc <_printf_i>
 8011614:	e7eb      	b.n	80115ee <_svfiprintf_r+0x1c2>
 8011616:	bf00      	nop
 8011618:	08025ddc 	.word	0x08025ddc
 801161c:	08025de6 	.word	0x08025de6
 8011620:	0800d9b5 	.word	0x0800d9b5
 8011624:	08011375 	.word	0x08011375
 8011628:	08025de2 	.word	0x08025de2

0801162c <__sfputc_r>:
 801162c:	6893      	ldr	r3, [r2, #8]
 801162e:	3b01      	subs	r3, #1
 8011630:	2b00      	cmp	r3, #0
 8011632:	b410      	push	{r4}
 8011634:	6093      	str	r3, [r2, #8]
 8011636:	da08      	bge.n	801164a <__sfputc_r+0x1e>
 8011638:	6994      	ldr	r4, [r2, #24]
 801163a:	42a3      	cmp	r3, r4
 801163c:	db01      	blt.n	8011642 <__sfputc_r+0x16>
 801163e:	290a      	cmp	r1, #10
 8011640:	d103      	bne.n	801164a <__sfputc_r+0x1e>
 8011642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011646:	f000 b975 	b.w	8011934 <__swbuf_r>
 801164a:	6813      	ldr	r3, [r2, #0]
 801164c:	1c58      	adds	r0, r3, #1
 801164e:	6010      	str	r0, [r2, #0]
 8011650:	7019      	strb	r1, [r3, #0]
 8011652:	4608      	mov	r0, r1
 8011654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011658:	4770      	bx	lr

0801165a <__sfputs_r>:
 801165a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165c:	4606      	mov	r6, r0
 801165e:	460f      	mov	r7, r1
 8011660:	4614      	mov	r4, r2
 8011662:	18d5      	adds	r5, r2, r3
 8011664:	42ac      	cmp	r4, r5
 8011666:	d101      	bne.n	801166c <__sfputs_r+0x12>
 8011668:	2000      	movs	r0, #0
 801166a:	e007      	b.n	801167c <__sfputs_r+0x22>
 801166c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011670:	463a      	mov	r2, r7
 8011672:	4630      	mov	r0, r6
 8011674:	f7ff ffda 	bl	801162c <__sfputc_r>
 8011678:	1c43      	adds	r3, r0, #1
 801167a:	d1f3      	bne.n	8011664 <__sfputs_r+0xa>
 801167c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011680 <_vfiprintf_r>:
 8011680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	460d      	mov	r5, r1
 8011686:	b09d      	sub	sp, #116	; 0x74
 8011688:	4614      	mov	r4, r2
 801168a:	4698      	mov	r8, r3
 801168c:	4606      	mov	r6, r0
 801168e:	b118      	cbz	r0, 8011698 <_vfiprintf_r+0x18>
 8011690:	6983      	ldr	r3, [r0, #24]
 8011692:	b90b      	cbnz	r3, 8011698 <_vfiprintf_r+0x18>
 8011694:	f000 fb3e 	bl	8011d14 <__sinit>
 8011698:	4b89      	ldr	r3, [pc, #548]	; (80118c0 <_vfiprintf_r+0x240>)
 801169a:	429d      	cmp	r5, r3
 801169c:	d11b      	bne.n	80116d6 <_vfiprintf_r+0x56>
 801169e:	6875      	ldr	r5, [r6, #4]
 80116a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116a2:	07d9      	lsls	r1, r3, #31
 80116a4:	d405      	bmi.n	80116b2 <_vfiprintf_r+0x32>
 80116a6:	89ab      	ldrh	r3, [r5, #12]
 80116a8:	059a      	lsls	r2, r3, #22
 80116aa:	d402      	bmi.n	80116b2 <_vfiprintf_r+0x32>
 80116ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116ae:	f000 fbcf 	bl	8011e50 <__retarget_lock_acquire_recursive>
 80116b2:	89ab      	ldrh	r3, [r5, #12]
 80116b4:	071b      	lsls	r3, r3, #28
 80116b6:	d501      	bpl.n	80116bc <_vfiprintf_r+0x3c>
 80116b8:	692b      	ldr	r3, [r5, #16]
 80116ba:	b9eb      	cbnz	r3, 80116f8 <_vfiprintf_r+0x78>
 80116bc:	4629      	mov	r1, r5
 80116be:	4630      	mov	r0, r6
 80116c0:	f000 f998 	bl	80119f4 <__swsetup_r>
 80116c4:	b1c0      	cbz	r0, 80116f8 <_vfiprintf_r+0x78>
 80116c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116c8:	07dc      	lsls	r4, r3, #31
 80116ca:	d50e      	bpl.n	80116ea <_vfiprintf_r+0x6a>
 80116cc:	f04f 30ff 	mov.w	r0, #4294967295
 80116d0:	b01d      	add	sp, #116	; 0x74
 80116d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116d6:	4b7b      	ldr	r3, [pc, #492]	; (80118c4 <_vfiprintf_r+0x244>)
 80116d8:	429d      	cmp	r5, r3
 80116da:	d101      	bne.n	80116e0 <_vfiprintf_r+0x60>
 80116dc:	68b5      	ldr	r5, [r6, #8]
 80116de:	e7df      	b.n	80116a0 <_vfiprintf_r+0x20>
 80116e0:	4b79      	ldr	r3, [pc, #484]	; (80118c8 <_vfiprintf_r+0x248>)
 80116e2:	429d      	cmp	r5, r3
 80116e4:	bf08      	it	eq
 80116e6:	68f5      	ldreq	r5, [r6, #12]
 80116e8:	e7da      	b.n	80116a0 <_vfiprintf_r+0x20>
 80116ea:	89ab      	ldrh	r3, [r5, #12]
 80116ec:	0598      	lsls	r0, r3, #22
 80116ee:	d4ed      	bmi.n	80116cc <_vfiprintf_r+0x4c>
 80116f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116f2:	f000 fbae 	bl	8011e52 <__retarget_lock_release_recursive>
 80116f6:	e7e9      	b.n	80116cc <_vfiprintf_r+0x4c>
 80116f8:	2300      	movs	r3, #0
 80116fa:	9309      	str	r3, [sp, #36]	; 0x24
 80116fc:	2320      	movs	r3, #32
 80116fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011702:	f8cd 800c 	str.w	r8, [sp, #12]
 8011706:	2330      	movs	r3, #48	; 0x30
 8011708:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80118cc <_vfiprintf_r+0x24c>
 801170c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011710:	f04f 0901 	mov.w	r9, #1
 8011714:	4623      	mov	r3, r4
 8011716:	469a      	mov	sl, r3
 8011718:	f813 2b01 	ldrb.w	r2, [r3], #1
 801171c:	b10a      	cbz	r2, 8011722 <_vfiprintf_r+0xa2>
 801171e:	2a25      	cmp	r2, #37	; 0x25
 8011720:	d1f9      	bne.n	8011716 <_vfiprintf_r+0x96>
 8011722:	ebba 0b04 	subs.w	fp, sl, r4
 8011726:	d00b      	beq.n	8011740 <_vfiprintf_r+0xc0>
 8011728:	465b      	mov	r3, fp
 801172a:	4622      	mov	r2, r4
 801172c:	4629      	mov	r1, r5
 801172e:	4630      	mov	r0, r6
 8011730:	f7ff ff93 	bl	801165a <__sfputs_r>
 8011734:	3001      	adds	r0, #1
 8011736:	f000 80aa 	beq.w	801188e <_vfiprintf_r+0x20e>
 801173a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801173c:	445a      	add	r2, fp
 801173e:	9209      	str	r2, [sp, #36]	; 0x24
 8011740:	f89a 3000 	ldrb.w	r3, [sl]
 8011744:	2b00      	cmp	r3, #0
 8011746:	f000 80a2 	beq.w	801188e <_vfiprintf_r+0x20e>
 801174a:	2300      	movs	r3, #0
 801174c:	f04f 32ff 	mov.w	r2, #4294967295
 8011750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011754:	f10a 0a01 	add.w	sl, sl, #1
 8011758:	9304      	str	r3, [sp, #16]
 801175a:	9307      	str	r3, [sp, #28]
 801175c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011760:	931a      	str	r3, [sp, #104]	; 0x68
 8011762:	4654      	mov	r4, sl
 8011764:	2205      	movs	r2, #5
 8011766:	f814 1b01 	ldrb.w	r1, [r4], #1
 801176a:	4858      	ldr	r0, [pc, #352]	; (80118cc <_vfiprintf_r+0x24c>)
 801176c:	f7ee fd50 	bl	8000210 <memchr>
 8011770:	9a04      	ldr	r2, [sp, #16]
 8011772:	b9d8      	cbnz	r0, 80117ac <_vfiprintf_r+0x12c>
 8011774:	06d1      	lsls	r1, r2, #27
 8011776:	bf44      	itt	mi
 8011778:	2320      	movmi	r3, #32
 801177a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801177e:	0713      	lsls	r3, r2, #28
 8011780:	bf44      	itt	mi
 8011782:	232b      	movmi	r3, #43	; 0x2b
 8011784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011788:	f89a 3000 	ldrb.w	r3, [sl]
 801178c:	2b2a      	cmp	r3, #42	; 0x2a
 801178e:	d015      	beq.n	80117bc <_vfiprintf_r+0x13c>
 8011790:	9a07      	ldr	r2, [sp, #28]
 8011792:	4654      	mov	r4, sl
 8011794:	2000      	movs	r0, #0
 8011796:	f04f 0c0a 	mov.w	ip, #10
 801179a:	4621      	mov	r1, r4
 801179c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117a0:	3b30      	subs	r3, #48	; 0x30
 80117a2:	2b09      	cmp	r3, #9
 80117a4:	d94e      	bls.n	8011844 <_vfiprintf_r+0x1c4>
 80117a6:	b1b0      	cbz	r0, 80117d6 <_vfiprintf_r+0x156>
 80117a8:	9207      	str	r2, [sp, #28]
 80117aa:	e014      	b.n	80117d6 <_vfiprintf_r+0x156>
 80117ac:	eba0 0308 	sub.w	r3, r0, r8
 80117b0:	fa09 f303 	lsl.w	r3, r9, r3
 80117b4:	4313      	orrs	r3, r2
 80117b6:	9304      	str	r3, [sp, #16]
 80117b8:	46a2      	mov	sl, r4
 80117ba:	e7d2      	b.n	8011762 <_vfiprintf_r+0xe2>
 80117bc:	9b03      	ldr	r3, [sp, #12]
 80117be:	1d19      	adds	r1, r3, #4
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	9103      	str	r1, [sp, #12]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	bfbb      	ittet	lt
 80117c8:	425b      	neglt	r3, r3
 80117ca:	f042 0202 	orrlt.w	r2, r2, #2
 80117ce:	9307      	strge	r3, [sp, #28]
 80117d0:	9307      	strlt	r3, [sp, #28]
 80117d2:	bfb8      	it	lt
 80117d4:	9204      	strlt	r2, [sp, #16]
 80117d6:	7823      	ldrb	r3, [r4, #0]
 80117d8:	2b2e      	cmp	r3, #46	; 0x2e
 80117da:	d10c      	bne.n	80117f6 <_vfiprintf_r+0x176>
 80117dc:	7863      	ldrb	r3, [r4, #1]
 80117de:	2b2a      	cmp	r3, #42	; 0x2a
 80117e0:	d135      	bne.n	801184e <_vfiprintf_r+0x1ce>
 80117e2:	9b03      	ldr	r3, [sp, #12]
 80117e4:	1d1a      	adds	r2, r3, #4
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	9203      	str	r2, [sp, #12]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	bfb8      	it	lt
 80117ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80117f2:	3402      	adds	r4, #2
 80117f4:	9305      	str	r3, [sp, #20]
 80117f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80118dc <_vfiprintf_r+0x25c>
 80117fa:	7821      	ldrb	r1, [r4, #0]
 80117fc:	2203      	movs	r2, #3
 80117fe:	4650      	mov	r0, sl
 8011800:	f7ee fd06 	bl	8000210 <memchr>
 8011804:	b140      	cbz	r0, 8011818 <_vfiprintf_r+0x198>
 8011806:	2340      	movs	r3, #64	; 0x40
 8011808:	eba0 000a 	sub.w	r0, r0, sl
 801180c:	fa03 f000 	lsl.w	r0, r3, r0
 8011810:	9b04      	ldr	r3, [sp, #16]
 8011812:	4303      	orrs	r3, r0
 8011814:	3401      	adds	r4, #1
 8011816:	9304      	str	r3, [sp, #16]
 8011818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801181c:	482c      	ldr	r0, [pc, #176]	; (80118d0 <_vfiprintf_r+0x250>)
 801181e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011822:	2206      	movs	r2, #6
 8011824:	f7ee fcf4 	bl	8000210 <memchr>
 8011828:	2800      	cmp	r0, #0
 801182a:	d03f      	beq.n	80118ac <_vfiprintf_r+0x22c>
 801182c:	4b29      	ldr	r3, [pc, #164]	; (80118d4 <_vfiprintf_r+0x254>)
 801182e:	bb1b      	cbnz	r3, 8011878 <_vfiprintf_r+0x1f8>
 8011830:	9b03      	ldr	r3, [sp, #12]
 8011832:	3307      	adds	r3, #7
 8011834:	f023 0307 	bic.w	r3, r3, #7
 8011838:	3308      	adds	r3, #8
 801183a:	9303      	str	r3, [sp, #12]
 801183c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801183e:	443b      	add	r3, r7
 8011840:	9309      	str	r3, [sp, #36]	; 0x24
 8011842:	e767      	b.n	8011714 <_vfiprintf_r+0x94>
 8011844:	fb0c 3202 	mla	r2, ip, r2, r3
 8011848:	460c      	mov	r4, r1
 801184a:	2001      	movs	r0, #1
 801184c:	e7a5      	b.n	801179a <_vfiprintf_r+0x11a>
 801184e:	2300      	movs	r3, #0
 8011850:	3401      	adds	r4, #1
 8011852:	9305      	str	r3, [sp, #20]
 8011854:	4619      	mov	r1, r3
 8011856:	f04f 0c0a 	mov.w	ip, #10
 801185a:	4620      	mov	r0, r4
 801185c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011860:	3a30      	subs	r2, #48	; 0x30
 8011862:	2a09      	cmp	r2, #9
 8011864:	d903      	bls.n	801186e <_vfiprintf_r+0x1ee>
 8011866:	2b00      	cmp	r3, #0
 8011868:	d0c5      	beq.n	80117f6 <_vfiprintf_r+0x176>
 801186a:	9105      	str	r1, [sp, #20]
 801186c:	e7c3      	b.n	80117f6 <_vfiprintf_r+0x176>
 801186e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011872:	4604      	mov	r4, r0
 8011874:	2301      	movs	r3, #1
 8011876:	e7f0      	b.n	801185a <_vfiprintf_r+0x1da>
 8011878:	ab03      	add	r3, sp, #12
 801187a:	9300      	str	r3, [sp, #0]
 801187c:	462a      	mov	r2, r5
 801187e:	4b16      	ldr	r3, [pc, #88]	; (80118d8 <_vfiprintf_r+0x258>)
 8011880:	a904      	add	r1, sp, #16
 8011882:	4630      	mov	r0, r6
 8011884:	f7fc f896 	bl	800d9b4 <_printf_float>
 8011888:	4607      	mov	r7, r0
 801188a:	1c78      	adds	r0, r7, #1
 801188c:	d1d6      	bne.n	801183c <_vfiprintf_r+0x1bc>
 801188e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011890:	07d9      	lsls	r1, r3, #31
 8011892:	d405      	bmi.n	80118a0 <_vfiprintf_r+0x220>
 8011894:	89ab      	ldrh	r3, [r5, #12]
 8011896:	059a      	lsls	r2, r3, #22
 8011898:	d402      	bmi.n	80118a0 <_vfiprintf_r+0x220>
 801189a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801189c:	f000 fad9 	bl	8011e52 <__retarget_lock_release_recursive>
 80118a0:	89ab      	ldrh	r3, [r5, #12]
 80118a2:	065b      	lsls	r3, r3, #25
 80118a4:	f53f af12 	bmi.w	80116cc <_vfiprintf_r+0x4c>
 80118a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118aa:	e711      	b.n	80116d0 <_vfiprintf_r+0x50>
 80118ac:	ab03      	add	r3, sp, #12
 80118ae:	9300      	str	r3, [sp, #0]
 80118b0:	462a      	mov	r2, r5
 80118b2:	4b09      	ldr	r3, [pc, #36]	; (80118d8 <_vfiprintf_r+0x258>)
 80118b4:	a904      	add	r1, sp, #16
 80118b6:	4630      	mov	r0, r6
 80118b8:	f7fc fb20 	bl	800defc <_printf_i>
 80118bc:	e7e4      	b.n	8011888 <_vfiprintf_r+0x208>
 80118be:	bf00      	nop
 80118c0:	08025e10 	.word	0x08025e10
 80118c4:	08025e30 	.word	0x08025e30
 80118c8:	08025df0 	.word	0x08025df0
 80118cc:	08025ddc 	.word	0x08025ddc
 80118d0:	08025de6 	.word	0x08025de6
 80118d4:	0800d9b5 	.word	0x0800d9b5
 80118d8:	0801165b 	.word	0x0801165b
 80118dc:	08025de2 	.word	0x08025de2

080118e0 <nan>:
 80118e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80118e8 <nan+0x8>
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop
 80118e8:	00000000 	.word	0x00000000
 80118ec:	7ff80000 	.word	0x7ff80000

080118f0 <_sbrk_r>:
 80118f0:	b538      	push	{r3, r4, r5, lr}
 80118f2:	4d06      	ldr	r5, [pc, #24]	; (801190c <_sbrk_r+0x1c>)
 80118f4:	2300      	movs	r3, #0
 80118f6:	4604      	mov	r4, r0
 80118f8:	4608      	mov	r0, r1
 80118fa:	602b      	str	r3, [r5, #0]
 80118fc:	f7f4 fe94 	bl	8006628 <_sbrk>
 8011900:	1c43      	adds	r3, r0, #1
 8011902:	d102      	bne.n	801190a <_sbrk_r+0x1a>
 8011904:	682b      	ldr	r3, [r5, #0]
 8011906:	b103      	cbz	r3, 801190a <_sbrk_r+0x1a>
 8011908:	6023      	str	r3, [r4, #0]
 801190a:	bd38      	pop	{r3, r4, r5, pc}
 801190c:	200007fc 	.word	0x200007fc

08011910 <strncmp>:
 8011910:	b510      	push	{r4, lr}
 8011912:	b16a      	cbz	r2, 8011930 <strncmp+0x20>
 8011914:	3901      	subs	r1, #1
 8011916:	1884      	adds	r4, r0, r2
 8011918:	f810 3b01 	ldrb.w	r3, [r0], #1
 801191c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011920:	4293      	cmp	r3, r2
 8011922:	d103      	bne.n	801192c <strncmp+0x1c>
 8011924:	42a0      	cmp	r0, r4
 8011926:	d001      	beq.n	801192c <strncmp+0x1c>
 8011928:	2b00      	cmp	r3, #0
 801192a:	d1f5      	bne.n	8011918 <strncmp+0x8>
 801192c:	1a98      	subs	r0, r3, r2
 801192e:	bd10      	pop	{r4, pc}
 8011930:	4610      	mov	r0, r2
 8011932:	e7fc      	b.n	801192e <strncmp+0x1e>

08011934 <__swbuf_r>:
 8011934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011936:	460e      	mov	r6, r1
 8011938:	4614      	mov	r4, r2
 801193a:	4605      	mov	r5, r0
 801193c:	b118      	cbz	r0, 8011946 <__swbuf_r+0x12>
 801193e:	6983      	ldr	r3, [r0, #24]
 8011940:	b90b      	cbnz	r3, 8011946 <__swbuf_r+0x12>
 8011942:	f000 f9e7 	bl	8011d14 <__sinit>
 8011946:	4b21      	ldr	r3, [pc, #132]	; (80119cc <__swbuf_r+0x98>)
 8011948:	429c      	cmp	r4, r3
 801194a:	d12b      	bne.n	80119a4 <__swbuf_r+0x70>
 801194c:	686c      	ldr	r4, [r5, #4]
 801194e:	69a3      	ldr	r3, [r4, #24]
 8011950:	60a3      	str	r3, [r4, #8]
 8011952:	89a3      	ldrh	r3, [r4, #12]
 8011954:	071a      	lsls	r2, r3, #28
 8011956:	d52f      	bpl.n	80119b8 <__swbuf_r+0x84>
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	b36b      	cbz	r3, 80119b8 <__swbuf_r+0x84>
 801195c:	6923      	ldr	r3, [r4, #16]
 801195e:	6820      	ldr	r0, [r4, #0]
 8011960:	1ac0      	subs	r0, r0, r3
 8011962:	6963      	ldr	r3, [r4, #20]
 8011964:	b2f6      	uxtb	r6, r6
 8011966:	4283      	cmp	r3, r0
 8011968:	4637      	mov	r7, r6
 801196a:	dc04      	bgt.n	8011976 <__swbuf_r+0x42>
 801196c:	4621      	mov	r1, r4
 801196e:	4628      	mov	r0, r5
 8011970:	f000 f93c 	bl	8011bec <_fflush_r>
 8011974:	bb30      	cbnz	r0, 80119c4 <__swbuf_r+0x90>
 8011976:	68a3      	ldr	r3, [r4, #8]
 8011978:	3b01      	subs	r3, #1
 801197a:	60a3      	str	r3, [r4, #8]
 801197c:	6823      	ldr	r3, [r4, #0]
 801197e:	1c5a      	adds	r2, r3, #1
 8011980:	6022      	str	r2, [r4, #0]
 8011982:	701e      	strb	r6, [r3, #0]
 8011984:	6963      	ldr	r3, [r4, #20]
 8011986:	3001      	adds	r0, #1
 8011988:	4283      	cmp	r3, r0
 801198a:	d004      	beq.n	8011996 <__swbuf_r+0x62>
 801198c:	89a3      	ldrh	r3, [r4, #12]
 801198e:	07db      	lsls	r3, r3, #31
 8011990:	d506      	bpl.n	80119a0 <__swbuf_r+0x6c>
 8011992:	2e0a      	cmp	r6, #10
 8011994:	d104      	bne.n	80119a0 <__swbuf_r+0x6c>
 8011996:	4621      	mov	r1, r4
 8011998:	4628      	mov	r0, r5
 801199a:	f000 f927 	bl	8011bec <_fflush_r>
 801199e:	b988      	cbnz	r0, 80119c4 <__swbuf_r+0x90>
 80119a0:	4638      	mov	r0, r7
 80119a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119a4:	4b0a      	ldr	r3, [pc, #40]	; (80119d0 <__swbuf_r+0x9c>)
 80119a6:	429c      	cmp	r4, r3
 80119a8:	d101      	bne.n	80119ae <__swbuf_r+0x7a>
 80119aa:	68ac      	ldr	r4, [r5, #8]
 80119ac:	e7cf      	b.n	801194e <__swbuf_r+0x1a>
 80119ae:	4b09      	ldr	r3, [pc, #36]	; (80119d4 <__swbuf_r+0xa0>)
 80119b0:	429c      	cmp	r4, r3
 80119b2:	bf08      	it	eq
 80119b4:	68ec      	ldreq	r4, [r5, #12]
 80119b6:	e7ca      	b.n	801194e <__swbuf_r+0x1a>
 80119b8:	4621      	mov	r1, r4
 80119ba:	4628      	mov	r0, r5
 80119bc:	f000 f81a 	bl	80119f4 <__swsetup_r>
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d0cb      	beq.n	801195c <__swbuf_r+0x28>
 80119c4:	f04f 37ff 	mov.w	r7, #4294967295
 80119c8:	e7ea      	b.n	80119a0 <__swbuf_r+0x6c>
 80119ca:	bf00      	nop
 80119cc:	08025e10 	.word	0x08025e10
 80119d0:	08025e30 	.word	0x08025e30
 80119d4:	08025df0 	.word	0x08025df0

080119d8 <__ascii_wctomb>:
 80119d8:	b149      	cbz	r1, 80119ee <__ascii_wctomb+0x16>
 80119da:	2aff      	cmp	r2, #255	; 0xff
 80119dc:	bf85      	ittet	hi
 80119de:	238a      	movhi	r3, #138	; 0x8a
 80119e0:	6003      	strhi	r3, [r0, #0]
 80119e2:	700a      	strbls	r2, [r1, #0]
 80119e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80119e8:	bf98      	it	ls
 80119ea:	2001      	movls	r0, #1
 80119ec:	4770      	bx	lr
 80119ee:	4608      	mov	r0, r1
 80119f0:	4770      	bx	lr
	...

080119f4 <__swsetup_r>:
 80119f4:	4b32      	ldr	r3, [pc, #200]	; (8011ac0 <__swsetup_r+0xcc>)
 80119f6:	b570      	push	{r4, r5, r6, lr}
 80119f8:	681d      	ldr	r5, [r3, #0]
 80119fa:	4606      	mov	r6, r0
 80119fc:	460c      	mov	r4, r1
 80119fe:	b125      	cbz	r5, 8011a0a <__swsetup_r+0x16>
 8011a00:	69ab      	ldr	r3, [r5, #24]
 8011a02:	b913      	cbnz	r3, 8011a0a <__swsetup_r+0x16>
 8011a04:	4628      	mov	r0, r5
 8011a06:	f000 f985 	bl	8011d14 <__sinit>
 8011a0a:	4b2e      	ldr	r3, [pc, #184]	; (8011ac4 <__swsetup_r+0xd0>)
 8011a0c:	429c      	cmp	r4, r3
 8011a0e:	d10f      	bne.n	8011a30 <__swsetup_r+0x3c>
 8011a10:	686c      	ldr	r4, [r5, #4]
 8011a12:	89a3      	ldrh	r3, [r4, #12]
 8011a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a18:	0719      	lsls	r1, r3, #28
 8011a1a:	d42c      	bmi.n	8011a76 <__swsetup_r+0x82>
 8011a1c:	06dd      	lsls	r5, r3, #27
 8011a1e:	d411      	bmi.n	8011a44 <__swsetup_r+0x50>
 8011a20:	2309      	movs	r3, #9
 8011a22:	6033      	str	r3, [r6, #0]
 8011a24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011a28:	81a3      	strh	r3, [r4, #12]
 8011a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2e:	e03e      	b.n	8011aae <__swsetup_r+0xba>
 8011a30:	4b25      	ldr	r3, [pc, #148]	; (8011ac8 <__swsetup_r+0xd4>)
 8011a32:	429c      	cmp	r4, r3
 8011a34:	d101      	bne.n	8011a3a <__swsetup_r+0x46>
 8011a36:	68ac      	ldr	r4, [r5, #8]
 8011a38:	e7eb      	b.n	8011a12 <__swsetup_r+0x1e>
 8011a3a:	4b24      	ldr	r3, [pc, #144]	; (8011acc <__swsetup_r+0xd8>)
 8011a3c:	429c      	cmp	r4, r3
 8011a3e:	bf08      	it	eq
 8011a40:	68ec      	ldreq	r4, [r5, #12]
 8011a42:	e7e6      	b.n	8011a12 <__swsetup_r+0x1e>
 8011a44:	0758      	lsls	r0, r3, #29
 8011a46:	d512      	bpl.n	8011a6e <__swsetup_r+0x7a>
 8011a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a4a:	b141      	cbz	r1, 8011a5e <__swsetup_r+0x6a>
 8011a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a50:	4299      	cmp	r1, r3
 8011a52:	d002      	beq.n	8011a5a <__swsetup_r+0x66>
 8011a54:	4630      	mov	r0, r6
 8011a56:	f7ff fbe3 	bl	8011220 <_free_r>
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	6363      	str	r3, [r4, #52]	; 0x34
 8011a5e:	89a3      	ldrh	r3, [r4, #12]
 8011a60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011a64:	81a3      	strh	r3, [r4, #12]
 8011a66:	2300      	movs	r3, #0
 8011a68:	6063      	str	r3, [r4, #4]
 8011a6a:	6923      	ldr	r3, [r4, #16]
 8011a6c:	6023      	str	r3, [r4, #0]
 8011a6e:	89a3      	ldrh	r3, [r4, #12]
 8011a70:	f043 0308 	orr.w	r3, r3, #8
 8011a74:	81a3      	strh	r3, [r4, #12]
 8011a76:	6923      	ldr	r3, [r4, #16]
 8011a78:	b94b      	cbnz	r3, 8011a8e <__swsetup_r+0x9a>
 8011a7a:	89a3      	ldrh	r3, [r4, #12]
 8011a7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a84:	d003      	beq.n	8011a8e <__swsetup_r+0x9a>
 8011a86:	4621      	mov	r1, r4
 8011a88:	4630      	mov	r0, r6
 8011a8a:	f000 fa07 	bl	8011e9c <__smakebuf_r>
 8011a8e:	89a0      	ldrh	r0, [r4, #12]
 8011a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a94:	f010 0301 	ands.w	r3, r0, #1
 8011a98:	d00a      	beq.n	8011ab0 <__swsetup_r+0xbc>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	60a3      	str	r3, [r4, #8]
 8011a9e:	6963      	ldr	r3, [r4, #20]
 8011aa0:	425b      	negs	r3, r3
 8011aa2:	61a3      	str	r3, [r4, #24]
 8011aa4:	6923      	ldr	r3, [r4, #16]
 8011aa6:	b943      	cbnz	r3, 8011aba <__swsetup_r+0xc6>
 8011aa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011aac:	d1ba      	bne.n	8011a24 <__swsetup_r+0x30>
 8011aae:	bd70      	pop	{r4, r5, r6, pc}
 8011ab0:	0781      	lsls	r1, r0, #30
 8011ab2:	bf58      	it	pl
 8011ab4:	6963      	ldrpl	r3, [r4, #20]
 8011ab6:	60a3      	str	r3, [r4, #8]
 8011ab8:	e7f4      	b.n	8011aa4 <__swsetup_r+0xb0>
 8011aba:	2000      	movs	r0, #0
 8011abc:	e7f7      	b.n	8011aae <__swsetup_r+0xba>
 8011abe:	bf00      	nop
 8011ac0:	20000040 	.word	0x20000040
 8011ac4:	08025e10 	.word	0x08025e10
 8011ac8:	08025e30 	.word	0x08025e30
 8011acc:	08025df0 	.word	0x08025df0

08011ad0 <abort>:
 8011ad0:	b508      	push	{r3, lr}
 8011ad2:	2006      	movs	r0, #6
 8011ad4:	f000 fa96 	bl	8012004 <raise>
 8011ad8:	2001      	movs	r0, #1
 8011ada:	f7f4 fd2d 	bl	8006538 <_exit>
	...

08011ae0 <__sflush_r>:
 8011ae0:	898a      	ldrh	r2, [r1, #12]
 8011ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ae6:	4605      	mov	r5, r0
 8011ae8:	0710      	lsls	r0, r2, #28
 8011aea:	460c      	mov	r4, r1
 8011aec:	d458      	bmi.n	8011ba0 <__sflush_r+0xc0>
 8011aee:	684b      	ldr	r3, [r1, #4]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	dc05      	bgt.n	8011b00 <__sflush_r+0x20>
 8011af4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	dc02      	bgt.n	8011b00 <__sflush_r+0x20>
 8011afa:	2000      	movs	r0, #0
 8011afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b02:	2e00      	cmp	r6, #0
 8011b04:	d0f9      	beq.n	8011afa <__sflush_r+0x1a>
 8011b06:	2300      	movs	r3, #0
 8011b08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b0c:	682f      	ldr	r7, [r5, #0]
 8011b0e:	602b      	str	r3, [r5, #0]
 8011b10:	d032      	beq.n	8011b78 <__sflush_r+0x98>
 8011b12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b14:	89a3      	ldrh	r3, [r4, #12]
 8011b16:	075a      	lsls	r2, r3, #29
 8011b18:	d505      	bpl.n	8011b26 <__sflush_r+0x46>
 8011b1a:	6863      	ldr	r3, [r4, #4]
 8011b1c:	1ac0      	subs	r0, r0, r3
 8011b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b20:	b10b      	cbz	r3, 8011b26 <__sflush_r+0x46>
 8011b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b24:	1ac0      	subs	r0, r0, r3
 8011b26:	2300      	movs	r3, #0
 8011b28:	4602      	mov	r2, r0
 8011b2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b2c:	6a21      	ldr	r1, [r4, #32]
 8011b2e:	4628      	mov	r0, r5
 8011b30:	47b0      	blx	r6
 8011b32:	1c43      	adds	r3, r0, #1
 8011b34:	89a3      	ldrh	r3, [r4, #12]
 8011b36:	d106      	bne.n	8011b46 <__sflush_r+0x66>
 8011b38:	6829      	ldr	r1, [r5, #0]
 8011b3a:	291d      	cmp	r1, #29
 8011b3c:	d82c      	bhi.n	8011b98 <__sflush_r+0xb8>
 8011b3e:	4a2a      	ldr	r2, [pc, #168]	; (8011be8 <__sflush_r+0x108>)
 8011b40:	40ca      	lsrs	r2, r1
 8011b42:	07d6      	lsls	r6, r2, #31
 8011b44:	d528      	bpl.n	8011b98 <__sflush_r+0xb8>
 8011b46:	2200      	movs	r2, #0
 8011b48:	6062      	str	r2, [r4, #4]
 8011b4a:	04d9      	lsls	r1, r3, #19
 8011b4c:	6922      	ldr	r2, [r4, #16]
 8011b4e:	6022      	str	r2, [r4, #0]
 8011b50:	d504      	bpl.n	8011b5c <__sflush_r+0x7c>
 8011b52:	1c42      	adds	r2, r0, #1
 8011b54:	d101      	bne.n	8011b5a <__sflush_r+0x7a>
 8011b56:	682b      	ldr	r3, [r5, #0]
 8011b58:	b903      	cbnz	r3, 8011b5c <__sflush_r+0x7c>
 8011b5a:	6560      	str	r0, [r4, #84]	; 0x54
 8011b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b5e:	602f      	str	r7, [r5, #0]
 8011b60:	2900      	cmp	r1, #0
 8011b62:	d0ca      	beq.n	8011afa <__sflush_r+0x1a>
 8011b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b68:	4299      	cmp	r1, r3
 8011b6a:	d002      	beq.n	8011b72 <__sflush_r+0x92>
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	f7ff fb57 	bl	8011220 <_free_r>
 8011b72:	2000      	movs	r0, #0
 8011b74:	6360      	str	r0, [r4, #52]	; 0x34
 8011b76:	e7c1      	b.n	8011afc <__sflush_r+0x1c>
 8011b78:	6a21      	ldr	r1, [r4, #32]
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	47b0      	blx	r6
 8011b80:	1c41      	adds	r1, r0, #1
 8011b82:	d1c7      	bne.n	8011b14 <__sflush_r+0x34>
 8011b84:	682b      	ldr	r3, [r5, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d0c4      	beq.n	8011b14 <__sflush_r+0x34>
 8011b8a:	2b1d      	cmp	r3, #29
 8011b8c:	d001      	beq.n	8011b92 <__sflush_r+0xb2>
 8011b8e:	2b16      	cmp	r3, #22
 8011b90:	d101      	bne.n	8011b96 <__sflush_r+0xb6>
 8011b92:	602f      	str	r7, [r5, #0]
 8011b94:	e7b1      	b.n	8011afa <__sflush_r+0x1a>
 8011b96:	89a3      	ldrh	r3, [r4, #12]
 8011b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b9c:	81a3      	strh	r3, [r4, #12]
 8011b9e:	e7ad      	b.n	8011afc <__sflush_r+0x1c>
 8011ba0:	690f      	ldr	r7, [r1, #16]
 8011ba2:	2f00      	cmp	r7, #0
 8011ba4:	d0a9      	beq.n	8011afa <__sflush_r+0x1a>
 8011ba6:	0793      	lsls	r3, r2, #30
 8011ba8:	680e      	ldr	r6, [r1, #0]
 8011baa:	bf08      	it	eq
 8011bac:	694b      	ldreq	r3, [r1, #20]
 8011bae:	600f      	str	r7, [r1, #0]
 8011bb0:	bf18      	it	ne
 8011bb2:	2300      	movne	r3, #0
 8011bb4:	eba6 0807 	sub.w	r8, r6, r7
 8011bb8:	608b      	str	r3, [r1, #8]
 8011bba:	f1b8 0f00 	cmp.w	r8, #0
 8011bbe:	dd9c      	ble.n	8011afa <__sflush_r+0x1a>
 8011bc0:	6a21      	ldr	r1, [r4, #32]
 8011bc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011bc4:	4643      	mov	r3, r8
 8011bc6:	463a      	mov	r2, r7
 8011bc8:	4628      	mov	r0, r5
 8011bca:	47b0      	blx	r6
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	dc06      	bgt.n	8011bde <__sflush_r+0xfe>
 8011bd0:	89a3      	ldrh	r3, [r4, #12]
 8011bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bd6:	81a3      	strh	r3, [r4, #12]
 8011bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011bdc:	e78e      	b.n	8011afc <__sflush_r+0x1c>
 8011bde:	4407      	add	r7, r0
 8011be0:	eba8 0800 	sub.w	r8, r8, r0
 8011be4:	e7e9      	b.n	8011bba <__sflush_r+0xda>
 8011be6:	bf00      	nop
 8011be8:	20400001 	.word	0x20400001

08011bec <_fflush_r>:
 8011bec:	b538      	push	{r3, r4, r5, lr}
 8011bee:	690b      	ldr	r3, [r1, #16]
 8011bf0:	4605      	mov	r5, r0
 8011bf2:	460c      	mov	r4, r1
 8011bf4:	b913      	cbnz	r3, 8011bfc <_fflush_r+0x10>
 8011bf6:	2500      	movs	r5, #0
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	bd38      	pop	{r3, r4, r5, pc}
 8011bfc:	b118      	cbz	r0, 8011c06 <_fflush_r+0x1a>
 8011bfe:	6983      	ldr	r3, [r0, #24]
 8011c00:	b90b      	cbnz	r3, 8011c06 <_fflush_r+0x1a>
 8011c02:	f000 f887 	bl	8011d14 <__sinit>
 8011c06:	4b14      	ldr	r3, [pc, #80]	; (8011c58 <_fflush_r+0x6c>)
 8011c08:	429c      	cmp	r4, r3
 8011c0a:	d11b      	bne.n	8011c44 <_fflush_r+0x58>
 8011c0c:	686c      	ldr	r4, [r5, #4]
 8011c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d0ef      	beq.n	8011bf6 <_fflush_r+0xa>
 8011c16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c18:	07d0      	lsls	r0, r2, #31
 8011c1a:	d404      	bmi.n	8011c26 <_fflush_r+0x3a>
 8011c1c:	0599      	lsls	r1, r3, #22
 8011c1e:	d402      	bmi.n	8011c26 <_fflush_r+0x3a>
 8011c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c22:	f000 f915 	bl	8011e50 <__retarget_lock_acquire_recursive>
 8011c26:	4628      	mov	r0, r5
 8011c28:	4621      	mov	r1, r4
 8011c2a:	f7ff ff59 	bl	8011ae0 <__sflush_r>
 8011c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c30:	07da      	lsls	r2, r3, #31
 8011c32:	4605      	mov	r5, r0
 8011c34:	d4e0      	bmi.n	8011bf8 <_fflush_r+0xc>
 8011c36:	89a3      	ldrh	r3, [r4, #12]
 8011c38:	059b      	lsls	r3, r3, #22
 8011c3a:	d4dd      	bmi.n	8011bf8 <_fflush_r+0xc>
 8011c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c3e:	f000 f908 	bl	8011e52 <__retarget_lock_release_recursive>
 8011c42:	e7d9      	b.n	8011bf8 <_fflush_r+0xc>
 8011c44:	4b05      	ldr	r3, [pc, #20]	; (8011c5c <_fflush_r+0x70>)
 8011c46:	429c      	cmp	r4, r3
 8011c48:	d101      	bne.n	8011c4e <_fflush_r+0x62>
 8011c4a:	68ac      	ldr	r4, [r5, #8]
 8011c4c:	e7df      	b.n	8011c0e <_fflush_r+0x22>
 8011c4e:	4b04      	ldr	r3, [pc, #16]	; (8011c60 <_fflush_r+0x74>)
 8011c50:	429c      	cmp	r4, r3
 8011c52:	bf08      	it	eq
 8011c54:	68ec      	ldreq	r4, [r5, #12]
 8011c56:	e7da      	b.n	8011c0e <_fflush_r+0x22>
 8011c58:	08025e10 	.word	0x08025e10
 8011c5c:	08025e30 	.word	0x08025e30
 8011c60:	08025df0 	.word	0x08025df0

08011c64 <std>:
 8011c64:	2300      	movs	r3, #0
 8011c66:	b510      	push	{r4, lr}
 8011c68:	4604      	mov	r4, r0
 8011c6a:	e9c0 3300 	strd	r3, r3, [r0]
 8011c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c72:	6083      	str	r3, [r0, #8]
 8011c74:	8181      	strh	r1, [r0, #12]
 8011c76:	6643      	str	r3, [r0, #100]	; 0x64
 8011c78:	81c2      	strh	r2, [r0, #14]
 8011c7a:	6183      	str	r3, [r0, #24]
 8011c7c:	4619      	mov	r1, r3
 8011c7e:	2208      	movs	r2, #8
 8011c80:	305c      	adds	r0, #92	; 0x5c
 8011c82:	f7fb fdef 	bl	800d864 <memset>
 8011c86:	4b05      	ldr	r3, [pc, #20]	; (8011c9c <std+0x38>)
 8011c88:	6263      	str	r3, [r4, #36]	; 0x24
 8011c8a:	4b05      	ldr	r3, [pc, #20]	; (8011ca0 <std+0x3c>)
 8011c8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c8e:	4b05      	ldr	r3, [pc, #20]	; (8011ca4 <std+0x40>)
 8011c90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c92:	4b05      	ldr	r3, [pc, #20]	; (8011ca8 <std+0x44>)
 8011c94:	6224      	str	r4, [r4, #32]
 8011c96:	6323      	str	r3, [r4, #48]	; 0x30
 8011c98:	bd10      	pop	{r4, pc}
 8011c9a:	bf00      	nop
 8011c9c:	0801203d 	.word	0x0801203d
 8011ca0:	0801205f 	.word	0x0801205f
 8011ca4:	08012097 	.word	0x08012097
 8011ca8:	080120bb 	.word	0x080120bb

08011cac <_cleanup_r>:
 8011cac:	4901      	ldr	r1, [pc, #4]	; (8011cb4 <_cleanup_r+0x8>)
 8011cae:	f000 b8af 	b.w	8011e10 <_fwalk_reent>
 8011cb2:	bf00      	nop
 8011cb4:	08011bed 	.word	0x08011bed

08011cb8 <__sfmoreglue>:
 8011cb8:	b570      	push	{r4, r5, r6, lr}
 8011cba:	1e4a      	subs	r2, r1, #1
 8011cbc:	2568      	movs	r5, #104	; 0x68
 8011cbe:	4355      	muls	r5, r2
 8011cc0:	460e      	mov	r6, r1
 8011cc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011cc6:	f7ff fafb 	bl	80112c0 <_malloc_r>
 8011cca:	4604      	mov	r4, r0
 8011ccc:	b140      	cbz	r0, 8011ce0 <__sfmoreglue+0x28>
 8011cce:	2100      	movs	r1, #0
 8011cd0:	e9c0 1600 	strd	r1, r6, [r0]
 8011cd4:	300c      	adds	r0, #12
 8011cd6:	60a0      	str	r0, [r4, #8]
 8011cd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011cdc:	f7fb fdc2 	bl	800d864 <memset>
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	bd70      	pop	{r4, r5, r6, pc}

08011ce4 <__sfp_lock_acquire>:
 8011ce4:	4801      	ldr	r0, [pc, #4]	; (8011cec <__sfp_lock_acquire+0x8>)
 8011ce6:	f000 b8b3 	b.w	8011e50 <__retarget_lock_acquire_recursive>
 8011cea:	bf00      	nop
 8011cec:	200007f8 	.word	0x200007f8

08011cf0 <__sfp_lock_release>:
 8011cf0:	4801      	ldr	r0, [pc, #4]	; (8011cf8 <__sfp_lock_release+0x8>)
 8011cf2:	f000 b8ae 	b.w	8011e52 <__retarget_lock_release_recursive>
 8011cf6:	bf00      	nop
 8011cf8:	200007f8 	.word	0x200007f8

08011cfc <__sinit_lock_acquire>:
 8011cfc:	4801      	ldr	r0, [pc, #4]	; (8011d04 <__sinit_lock_acquire+0x8>)
 8011cfe:	f000 b8a7 	b.w	8011e50 <__retarget_lock_acquire_recursive>
 8011d02:	bf00      	nop
 8011d04:	200007f3 	.word	0x200007f3

08011d08 <__sinit_lock_release>:
 8011d08:	4801      	ldr	r0, [pc, #4]	; (8011d10 <__sinit_lock_release+0x8>)
 8011d0a:	f000 b8a2 	b.w	8011e52 <__retarget_lock_release_recursive>
 8011d0e:	bf00      	nop
 8011d10:	200007f3 	.word	0x200007f3

08011d14 <__sinit>:
 8011d14:	b510      	push	{r4, lr}
 8011d16:	4604      	mov	r4, r0
 8011d18:	f7ff fff0 	bl	8011cfc <__sinit_lock_acquire>
 8011d1c:	69a3      	ldr	r3, [r4, #24]
 8011d1e:	b11b      	cbz	r3, 8011d28 <__sinit+0x14>
 8011d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d24:	f7ff bff0 	b.w	8011d08 <__sinit_lock_release>
 8011d28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011d2c:	6523      	str	r3, [r4, #80]	; 0x50
 8011d2e:	4b13      	ldr	r3, [pc, #76]	; (8011d7c <__sinit+0x68>)
 8011d30:	4a13      	ldr	r2, [pc, #76]	; (8011d80 <__sinit+0x6c>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	62a2      	str	r2, [r4, #40]	; 0x28
 8011d36:	42a3      	cmp	r3, r4
 8011d38:	bf04      	itt	eq
 8011d3a:	2301      	moveq	r3, #1
 8011d3c:	61a3      	streq	r3, [r4, #24]
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f000 f820 	bl	8011d84 <__sfp>
 8011d44:	6060      	str	r0, [r4, #4]
 8011d46:	4620      	mov	r0, r4
 8011d48:	f000 f81c 	bl	8011d84 <__sfp>
 8011d4c:	60a0      	str	r0, [r4, #8]
 8011d4e:	4620      	mov	r0, r4
 8011d50:	f000 f818 	bl	8011d84 <__sfp>
 8011d54:	2200      	movs	r2, #0
 8011d56:	60e0      	str	r0, [r4, #12]
 8011d58:	2104      	movs	r1, #4
 8011d5a:	6860      	ldr	r0, [r4, #4]
 8011d5c:	f7ff ff82 	bl	8011c64 <std>
 8011d60:	68a0      	ldr	r0, [r4, #8]
 8011d62:	2201      	movs	r2, #1
 8011d64:	2109      	movs	r1, #9
 8011d66:	f7ff ff7d 	bl	8011c64 <std>
 8011d6a:	68e0      	ldr	r0, [r4, #12]
 8011d6c:	2202      	movs	r2, #2
 8011d6e:	2112      	movs	r1, #18
 8011d70:	f7ff ff78 	bl	8011c64 <std>
 8011d74:	2301      	movs	r3, #1
 8011d76:	61a3      	str	r3, [r4, #24]
 8011d78:	e7d2      	b.n	8011d20 <__sinit+0xc>
 8011d7a:	bf00      	nop
 8011d7c:	0802593c 	.word	0x0802593c
 8011d80:	08011cad 	.word	0x08011cad

08011d84 <__sfp>:
 8011d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d86:	4607      	mov	r7, r0
 8011d88:	f7ff ffac 	bl	8011ce4 <__sfp_lock_acquire>
 8011d8c:	4b1e      	ldr	r3, [pc, #120]	; (8011e08 <__sfp+0x84>)
 8011d8e:	681e      	ldr	r6, [r3, #0]
 8011d90:	69b3      	ldr	r3, [r6, #24]
 8011d92:	b913      	cbnz	r3, 8011d9a <__sfp+0x16>
 8011d94:	4630      	mov	r0, r6
 8011d96:	f7ff ffbd 	bl	8011d14 <__sinit>
 8011d9a:	3648      	adds	r6, #72	; 0x48
 8011d9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011da0:	3b01      	subs	r3, #1
 8011da2:	d503      	bpl.n	8011dac <__sfp+0x28>
 8011da4:	6833      	ldr	r3, [r6, #0]
 8011da6:	b30b      	cbz	r3, 8011dec <__sfp+0x68>
 8011da8:	6836      	ldr	r6, [r6, #0]
 8011daa:	e7f7      	b.n	8011d9c <__sfp+0x18>
 8011dac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011db0:	b9d5      	cbnz	r5, 8011de8 <__sfp+0x64>
 8011db2:	4b16      	ldr	r3, [pc, #88]	; (8011e0c <__sfp+0x88>)
 8011db4:	60e3      	str	r3, [r4, #12]
 8011db6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011dba:	6665      	str	r5, [r4, #100]	; 0x64
 8011dbc:	f000 f847 	bl	8011e4e <__retarget_lock_init_recursive>
 8011dc0:	f7ff ff96 	bl	8011cf0 <__sfp_lock_release>
 8011dc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011dc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011dcc:	6025      	str	r5, [r4, #0]
 8011dce:	61a5      	str	r5, [r4, #24]
 8011dd0:	2208      	movs	r2, #8
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011dd8:	f7fb fd44 	bl	800d864 <memset>
 8011ddc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011de0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011de4:	4620      	mov	r0, r4
 8011de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de8:	3468      	adds	r4, #104	; 0x68
 8011dea:	e7d9      	b.n	8011da0 <__sfp+0x1c>
 8011dec:	2104      	movs	r1, #4
 8011dee:	4638      	mov	r0, r7
 8011df0:	f7ff ff62 	bl	8011cb8 <__sfmoreglue>
 8011df4:	4604      	mov	r4, r0
 8011df6:	6030      	str	r0, [r6, #0]
 8011df8:	2800      	cmp	r0, #0
 8011dfa:	d1d5      	bne.n	8011da8 <__sfp+0x24>
 8011dfc:	f7ff ff78 	bl	8011cf0 <__sfp_lock_release>
 8011e00:	230c      	movs	r3, #12
 8011e02:	603b      	str	r3, [r7, #0]
 8011e04:	e7ee      	b.n	8011de4 <__sfp+0x60>
 8011e06:	bf00      	nop
 8011e08:	0802593c 	.word	0x0802593c
 8011e0c:	ffff0001 	.word	0xffff0001

08011e10 <_fwalk_reent>:
 8011e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e14:	4606      	mov	r6, r0
 8011e16:	4688      	mov	r8, r1
 8011e18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011e1c:	2700      	movs	r7, #0
 8011e1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e22:	f1b9 0901 	subs.w	r9, r9, #1
 8011e26:	d505      	bpl.n	8011e34 <_fwalk_reent+0x24>
 8011e28:	6824      	ldr	r4, [r4, #0]
 8011e2a:	2c00      	cmp	r4, #0
 8011e2c:	d1f7      	bne.n	8011e1e <_fwalk_reent+0xe>
 8011e2e:	4638      	mov	r0, r7
 8011e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e34:	89ab      	ldrh	r3, [r5, #12]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d907      	bls.n	8011e4a <_fwalk_reent+0x3a>
 8011e3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	d003      	beq.n	8011e4a <_fwalk_reent+0x3a>
 8011e42:	4629      	mov	r1, r5
 8011e44:	4630      	mov	r0, r6
 8011e46:	47c0      	blx	r8
 8011e48:	4307      	orrs	r7, r0
 8011e4a:	3568      	adds	r5, #104	; 0x68
 8011e4c:	e7e9      	b.n	8011e22 <_fwalk_reent+0x12>

08011e4e <__retarget_lock_init_recursive>:
 8011e4e:	4770      	bx	lr

08011e50 <__retarget_lock_acquire_recursive>:
 8011e50:	4770      	bx	lr

08011e52 <__retarget_lock_release_recursive>:
 8011e52:	4770      	bx	lr

08011e54 <__swhatbuf_r>:
 8011e54:	b570      	push	{r4, r5, r6, lr}
 8011e56:	460e      	mov	r6, r1
 8011e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e5c:	2900      	cmp	r1, #0
 8011e5e:	b096      	sub	sp, #88	; 0x58
 8011e60:	4614      	mov	r4, r2
 8011e62:	461d      	mov	r5, r3
 8011e64:	da07      	bge.n	8011e76 <__swhatbuf_r+0x22>
 8011e66:	2300      	movs	r3, #0
 8011e68:	602b      	str	r3, [r5, #0]
 8011e6a:	89b3      	ldrh	r3, [r6, #12]
 8011e6c:	061a      	lsls	r2, r3, #24
 8011e6e:	d410      	bmi.n	8011e92 <__swhatbuf_r+0x3e>
 8011e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e74:	e00e      	b.n	8011e94 <__swhatbuf_r+0x40>
 8011e76:	466a      	mov	r2, sp
 8011e78:	f000 f946 	bl	8012108 <_fstat_r>
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	dbf2      	blt.n	8011e66 <__swhatbuf_r+0x12>
 8011e80:	9a01      	ldr	r2, [sp, #4]
 8011e82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e8a:	425a      	negs	r2, r3
 8011e8c:	415a      	adcs	r2, r3
 8011e8e:	602a      	str	r2, [r5, #0]
 8011e90:	e7ee      	b.n	8011e70 <__swhatbuf_r+0x1c>
 8011e92:	2340      	movs	r3, #64	; 0x40
 8011e94:	2000      	movs	r0, #0
 8011e96:	6023      	str	r3, [r4, #0]
 8011e98:	b016      	add	sp, #88	; 0x58
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}

08011e9c <__smakebuf_r>:
 8011e9c:	898b      	ldrh	r3, [r1, #12]
 8011e9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ea0:	079d      	lsls	r5, r3, #30
 8011ea2:	4606      	mov	r6, r0
 8011ea4:	460c      	mov	r4, r1
 8011ea6:	d507      	bpl.n	8011eb8 <__smakebuf_r+0x1c>
 8011ea8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011eac:	6023      	str	r3, [r4, #0]
 8011eae:	6123      	str	r3, [r4, #16]
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	6163      	str	r3, [r4, #20]
 8011eb4:	b002      	add	sp, #8
 8011eb6:	bd70      	pop	{r4, r5, r6, pc}
 8011eb8:	ab01      	add	r3, sp, #4
 8011eba:	466a      	mov	r2, sp
 8011ebc:	f7ff ffca 	bl	8011e54 <__swhatbuf_r>
 8011ec0:	9900      	ldr	r1, [sp, #0]
 8011ec2:	4605      	mov	r5, r0
 8011ec4:	4630      	mov	r0, r6
 8011ec6:	f7ff f9fb 	bl	80112c0 <_malloc_r>
 8011eca:	b948      	cbnz	r0, 8011ee0 <__smakebuf_r+0x44>
 8011ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ed0:	059a      	lsls	r2, r3, #22
 8011ed2:	d4ef      	bmi.n	8011eb4 <__smakebuf_r+0x18>
 8011ed4:	f023 0303 	bic.w	r3, r3, #3
 8011ed8:	f043 0302 	orr.w	r3, r3, #2
 8011edc:	81a3      	strh	r3, [r4, #12]
 8011ede:	e7e3      	b.n	8011ea8 <__smakebuf_r+0xc>
 8011ee0:	4b0d      	ldr	r3, [pc, #52]	; (8011f18 <__smakebuf_r+0x7c>)
 8011ee2:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ee4:	89a3      	ldrh	r3, [r4, #12]
 8011ee6:	6020      	str	r0, [r4, #0]
 8011ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011eec:	81a3      	strh	r3, [r4, #12]
 8011eee:	9b00      	ldr	r3, [sp, #0]
 8011ef0:	6163      	str	r3, [r4, #20]
 8011ef2:	9b01      	ldr	r3, [sp, #4]
 8011ef4:	6120      	str	r0, [r4, #16]
 8011ef6:	b15b      	cbz	r3, 8011f10 <__smakebuf_r+0x74>
 8011ef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011efc:	4630      	mov	r0, r6
 8011efe:	f000 f915 	bl	801212c <_isatty_r>
 8011f02:	b128      	cbz	r0, 8011f10 <__smakebuf_r+0x74>
 8011f04:	89a3      	ldrh	r3, [r4, #12]
 8011f06:	f023 0303 	bic.w	r3, r3, #3
 8011f0a:	f043 0301 	orr.w	r3, r3, #1
 8011f0e:	81a3      	strh	r3, [r4, #12]
 8011f10:	89a0      	ldrh	r0, [r4, #12]
 8011f12:	4305      	orrs	r5, r0
 8011f14:	81a5      	strh	r5, [r4, #12]
 8011f16:	e7cd      	b.n	8011eb4 <__smakebuf_r+0x18>
 8011f18:	08011cad 	.word	0x08011cad

08011f1c <memmove>:
 8011f1c:	4288      	cmp	r0, r1
 8011f1e:	b510      	push	{r4, lr}
 8011f20:	eb01 0402 	add.w	r4, r1, r2
 8011f24:	d902      	bls.n	8011f2c <memmove+0x10>
 8011f26:	4284      	cmp	r4, r0
 8011f28:	4623      	mov	r3, r4
 8011f2a:	d807      	bhi.n	8011f3c <memmove+0x20>
 8011f2c:	1e43      	subs	r3, r0, #1
 8011f2e:	42a1      	cmp	r1, r4
 8011f30:	d008      	beq.n	8011f44 <memmove+0x28>
 8011f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f3a:	e7f8      	b.n	8011f2e <memmove+0x12>
 8011f3c:	4402      	add	r2, r0
 8011f3e:	4601      	mov	r1, r0
 8011f40:	428a      	cmp	r2, r1
 8011f42:	d100      	bne.n	8011f46 <memmove+0x2a>
 8011f44:	bd10      	pop	{r4, pc}
 8011f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f4e:	e7f7      	b.n	8011f40 <memmove+0x24>

08011f50 <__malloc_lock>:
 8011f50:	4801      	ldr	r0, [pc, #4]	; (8011f58 <__malloc_lock+0x8>)
 8011f52:	f7ff bf7d 	b.w	8011e50 <__retarget_lock_acquire_recursive>
 8011f56:	bf00      	nop
 8011f58:	200007f4 	.word	0x200007f4

08011f5c <__malloc_unlock>:
 8011f5c:	4801      	ldr	r0, [pc, #4]	; (8011f64 <__malloc_unlock+0x8>)
 8011f5e:	f7ff bf78 	b.w	8011e52 <__retarget_lock_release_recursive>
 8011f62:	bf00      	nop
 8011f64:	200007f4 	.word	0x200007f4

08011f68 <_realloc_r>:
 8011f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f6a:	4607      	mov	r7, r0
 8011f6c:	4614      	mov	r4, r2
 8011f6e:	460e      	mov	r6, r1
 8011f70:	b921      	cbnz	r1, 8011f7c <_realloc_r+0x14>
 8011f72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011f76:	4611      	mov	r1, r2
 8011f78:	f7ff b9a2 	b.w	80112c0 <_malloc_r>
 8011f7c:	b922      	cbnz	r2, 8011f88 <_realloc_r+0x20>
 8011f7e:	f7ff f94f 	bl	8011220 <_free_r>
 8011f82:	4625      	mov	r5, r4
 8011f84:	4628      	mov	r0, r5
 8011f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f88:	f000 f8f2 	bl	8012170 <_malloc_usable_size_r>
 8011f8c:	42a0      	cmp	r0, r4
 8011f8e:	d20f      	bcs.n	8011fb0 <_realloc_r+0x48>
 8011f90:	4621      	mov	r1, r4
 8011f92:	4638      	mov	r0, r7
 8011f94:	f7ff f994 	bl	80112c0 <_malloc_r>
 8011f98:	4605      	mov	r5, r0
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	d0f2      	beq.n	8011f84 <_realloc_r+0x1c>
 8011f9e:	4631      	mov	r1, r6
 8011fa0:	4622      	mov	r2, r4
 8011fa2:	f7fe fc65 	bl	8010870 <memcpy>
 8011fa6:	4631      	mov	r1, r6
 8011fa8:	4638      	mov	r0, r7
 8011faa:	f7ff f939 	bl	8011220 <_free_r>
 8011fae:	e7e9      	b.n	8011f84 <_realloc_r+0x1c>
 8011fb0:	4635      	mov	r5, r6
 8011fb2:	e7e7      	b.n	8011f84 <_realloc_r+0x1c>

08011fb4 <_raise_r>:
 8011fb4:	291f      	cmp	r1, #31
 8011fb6:	b538      	push	{r3, r4, r5, lr}
 8011fb8:	4604      	mov	r4, r0
 8011fba:	460d      	mov	r5, r1
 8011fbc:	d904      	bls.n	8011fc8 <_raise_r+0x14>
 8011fbe:	2316      	movs	r3, #22
 8011fc0:	6003      	str	r3, [r0, #0]
 8011fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc6:	bd38      	pop	{r3, r4, r5, pc}
 8011fc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011fca:	b112      	cbz	r2, 8011fd2 <_raise_r+0x1e>
 8011fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011fd0:	b94b      	cbnz	r3, 8011fe6 <_raise_r+0x32>
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f000 f830 	bl	8012038 <_getpid_r>
 8011fd8:	462a      	mov	r2, r5
 8011fda:	4601      	mov	r1, r0
 8011fdc:	4620      	mov	r0, r4
 8011fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fe2:	f000 b817 	b.w	8012014 <_kill_r>
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	d00a      	beq.n	8012000 <_raise_r+0x4c>
 8011fea:	1c59      	adds	r1, r3, #1
 8011fec:	d103      	bne.n	8011ff6 <_raise_r+0x42>
 8011fee:	2316      	movs	r3, #22
 8011ff0:	6003      	str	r3, [r0, #0]
 8011ff2:	2001      	movs	r0, #1
 8011ff4:	e7e7      	b.n	8011fc6 <_raise_r+0x12>
 8011ff6:	2400      	movs	r4, #0
 8011ff8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	4798      	blx	r3
 8012000:	2000      	movs	r0, #0
 8012002:	e7e0      	b.n	8011fc6 <_raise_r+0x12>

08012004 <raise>:
 8012004:	4b02      	ldr	r3, [pc, #8]	; (8012010 <raise+0xc>)
 8012006:	4601      	mov	r1, r0
 8012008:	6818      	ldr	r0, [r3, #0]
 801200a:	f7ff bfd3 	b.w	8011fb4 <_raise_r>
 801200e:	bf00      	nop
 8012010:	20000040 	.word	0x20000040

08012014 <_kill_r>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	4d07      	ldr	r5, [pc, #28]	; (8012034 <_kill_r+0x20>)
 8012018:	2300      	movs	r3, #0
 801201a:	4604      	mov	r4, r0
 801201c:	4608      	mov	r0, r1
 801201e:	4611      	mov	r1, r2
 8012020:	602b      	str	r3, [r5, #0]
 8012022:	f7f4 fa79 	bl	8006518 <_kill>
 8012026:	1c43      	adds	r3, r0, #1
 8012028:	d102      	bne.n	8012030 <_kill_r+0x1c>
 801202a:	682b      	ldr	r3, [r5, #0]
 801202c:	b103      	cbz	r3, 8012030 <_kill_r+0x1c>
 801202e:	6023      	str	r3, [r4, #0]
 8012030:	bd38      	pop	{r3, r4, r5, pc}
 8012032:	bf00      	nop
 8012034:	200007fc 	.word	0x200007fc

08012038 <_getpid_r>:
 8012038:	f7f4 ba66 	b.w	8006508 <_getpid>

0801203c <__sread>:
 801203c:	b510      	push	{r4, lr}
 801203e:	460c      	mov	r4, r1
 8012040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012044:	f000 f89c 	bl	8012180 <_read_r>
 8012048:	2800      	cmp	r0, #0
 801204a:	bfab      	itete	ge
 801204c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801204e:	89a3      	ldrhlt	r3, [r4, #12]
 8012050:	181b      	addge	r3, r3, r0
 8012052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012056:	bfac      	ite	ge
 8012058:	6563      	strge	r3, [r4, #84]	; 0x54
 801205a:	81a3      	strhlt	r3, [r4, #12]
 801205c:	bd10      	pop	{r4, pc}

0801205e <__swrite>:
 801205e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012062:	461f      	mov	r7, r3
 8012064:	898b      	ldrh	r3, [r1, #12]
 8012066:	05db      	lsls	r3, r3, #23
 8012068:	4605      	mov	r5, r0
 801206a:	460c      	mov	r4, r1
 801206c:	4616      	mov	r6, r2
 801206e:	d505      	bpl.n	801207c <__swrite+0x1e>
 8012070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012074:	2302      	movs	r3, #2
 8012076:	2200      	movs	r2, #0
 8012078:	f000 f868 	bl	801214c <_lseek_r>
 801207c:	89a3      	ldrh	r3, [r4, #12]
 801207e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012086:	81a3      	strh	r3, [r4, #12]
 8012088:	4632      	mov	r2, r6
 801208a:	463b      	mov	r3, r7
 801208c:	4628      	mov	r0, r5
 801208e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012092:	f000 b817 	b.w	80120c4 <_write_r>

08012096 <__sseek>:
 8012096:	b510      	push	{r4, lr}
 8012098:	460c      	mov	r4, r1
 801209a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801209e:	f000 f855 	bl	801214c <_lseek_r>
 80120a2:	1c43      	adds	r3, r0, #1
 80120a4:	89a3      	ldrh	r3, [r4, #12]
 80120a6:	bf15      	itete	ne
 80120a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80120aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80120ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80120b2:	81a3      	strheq	r3, [r4, #12]
 80120b4:	bf18      	it	ne
 80120b6:	81a3      	strhne	r3, [r4, #12]
 80120b8:	bd10      	pop	{r4, pc}

080120ba <__sclose>:
 80120ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120be:	f000 b813 	b.w	80120e8 <_close_r>
	...

080120c4 <_write_r>:
 80120c4:	b538      	push	{r3, r4, r5, lr}
 80120c6:	4d07      	ldr	r5, [pc, #28]	; (80120e4 <_write_r+0x20>)
 80120c8:	4604      	mov	r4, r0
 80120ca:	4608      	mov	r0, r1
 80120cc:	4611      	mov	r1, r2
 80120ce:	2200      	movs	r2, #0
 80120d0:	602a      	str	r2, [r5, #0]
 80120d2:	461a      	mov	r2, r3
 80120d4:	f7f4 fa57 	bl	8006586 <_write>
 80120d8:	1c43      	adds	r3, r0, #1
 80120da:	d102      	bne.n	80120e2 <_write_r+0x1e>
 80120dc:	682b      	ldr	r3, [r5, #0]
 80120de:	b103      	cbz	r3, 80120e2 <_write_r+0x1e>
 80120e0:	6023      	str	r3, [r4, #0]
 80120e2:	bd38      	pop	{r3, r4, r5, pc}
 80120e4:	200007fc 	.word	0x200007fc

080120e8 <_close_r>:
 80120e8:	b538      	push	{r3, r4, r5, lr}
 80120ea:	4d06      	ldr	r5, [pc, #24]	; (8012104 <_close_r+0x1c>)
 80120ec:	2300      	movs	r3, #0
 80120ee:	4604      	mov	r4, r0
 80120f0:	4608      	mov	r0, r1
 80120f2:	602b      	str	r3, [r5, #0]
 80120f4:	f7f4 fa63 	bl	80065be <_close>
 80120f8:	1c43      	adds	r3, r0, #1
 80120fa:	d102      	bne.n	8012102 <_close_r+0x1a>
 80120fc:	682b      	ldr	r3, [r5, #0]
 80120fe:	b103      	cbz	r3, 8012102 <_close_r+0x1a>
 8012100:	6023      	str	r3, [r4, #0]
 8012102:	bd38      	pop	{r3, r4, r5, pc}
 8012104:	200007fc 	.word	0x200007fc

08012108 <_fstat_r>:
 8012108:	b538      	push	{r3, r4, r5, lr}
 801210a:	4d07      	ldr	r5, [pc, #28]	; (8012128 <_fstat_r+0x20>)
 801210c:	2300      	movs	r3, #0
 801210e:	4604      	mov	r4, r0
 8012110:	4608      	mov	r0, r1
 8012112:	4611      	mov	r1, r2
 8012114:	602b      	str	r3, [r5, #0]
 8012116:	f7f4 fa5e 	bl	80065d6 <_fstat>
 801211a:	1c43      	adds	r3, r0, #1
 801211c:	d102      	bne.n	8012124 <_fstat_r+0x1c>
 801211e:	682b      	ldr	r3, [r5, #0]
 8012120:	b103      	cbz	r3, 8012124 <_fstat_r+0x1c>
 8012122:	6023      	str	r3, [r4, #0]
 8012124:	bd38      	pop	{r3, r4, r5, pc}
 8012126:	bf00      	nop
 8012128:	200007fc 	.word	0x200007fc

0801212c <_isatty_r>:
 801212c:	b538      	push	{r3, r4, r5, lr}
 801212e:	4d06      	ldr	r5, [pc, #24]	; (8012148 <_isatty_r+0x1c>)
 8012130:	2300      	movs	r3, #0
 8012132:	4604      	mov	r4, r0
 8012134:	4608      	mov	r0, r1
 8012136:	602b      	str	r3, [r5, #0]
 8012138:	f7f4 fa5d 	bl	80065f6 <_isatty>
 801213c:	1c43      	adds	r3, r0, #1
 801213e:	d102      	bne.n	8012146 <_isatty_r+0x1a>
 8012140:	682b      	ldr	r3, [r5, #0]
 8012142:	b103      	cbz	r3, 8012146 <_isatty_r+0x1a>
 8012144:	6023      	str	r3, [r4, #0]
 8012146:	bd38      	pop	{r3, r4, r5, pc}
 8012148:	200007fc 	.word	0x200007fc

0801214c <_lseek_r>:
 801214c:	b538      	push	{r3, r4, r5, lr}
 801214e:	4d07      	ldr	r5, [pc, #28]	; (801216c <_lseek_r+0x20>)
 8012150:	4604      	mov	r4, r0
 8012152:	4608      	mov	r0, r1
 8012154:	4611      	mov	r1, r2
 8012156:	2200      	movs	r2, #0
 8012158:	602a      	str	r2, [r5, #0]
 801215a:	461a      	mov	r2, r3
 801215c:	f7f4 fa56 	bl	800660c <_lseek>
 8012160:	1c43      	adds	r3, r0, #1
 8012162:	d102      	bne.n	801216a <_lseek_r+0x1e>
 8012164:	682b      	ldr	r3, [r5, #0]
 8012166:	b103      	cbz	r3, 801216a <_lseek_r+0x1e>
 8012168:	6023      	str	r3, [r4, #0]
 801216a:	bd38      	pop	{r3, r4, r5, pc}
 801216c:	200007fc 	.word	0x200007fc

08012170 <_malloc_usable_size_r>:
 8012170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012174:	1f18      	subs	r0, r3, #4
 8012176:	2b00      	cmp	r3, #0
 8012178:	bfbc      	itt	lt
 801217a:	580b      	ldrlt	r3, [r1, r0]
 801217c:	18c0      	addlt	r0, r0, r3
 801217e:	4770      	bx	lr

08012180 <_read_r>:
 8012180:	b538      	push	{r3, r4, r5, lr}
 8012182:	4d07      	ldr	r5, [pc, #28]	; (80121a0 <_read_r+0x20>)
 8012184:	4604      	mov	r4, r0
 8012186:	4608      	mov	r0, r1
 8012188:	4611      	mov	r1, r2
 801218a:	2200      	movs	r2, #0
 801218c:	602a      	str	r2, [r5, #0]
 801218e:	461a      	mov	r2, r3
 8012190:	f7f4 f9dc 	bl	800654c <_read>
 8012194:	1c43      	adds	r3, r0, #1
 8012196:	d102      	bne.n	801219e <_read_r+0x1e>
 8012198:	682b      	ldr	r3, [r5, #0]
 801219a:	b103      	cbz	r3, 801219e <_read_r+0x1e>
 801219c:	6023      	str	r3, [r4, #0]
 801219e:	bd38      	pop	{r3, r4, r5, pc}
 80121a0:	200007fc 	.word	0x200007fc

080121a4 <_init>:
 80121a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121a6:	bf00      	nop
 80121a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121aa:	bc08      	pop	{r3}
 80121ac:	469e      	mov	lr, r3
 80121ae:	4770      	bx	lr

080121b0 <_fini>:
 80121b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b2:	bf00      	nop
 80121b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121b6:	bc08      	pop	{r3}
 80121b8:	469e      	mov	lr, r3
 80121ba:	4770      	bx	lr
