
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014274  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013f18  08014418  08014418  00024418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028330  08028330  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08028330  08028330  00038330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028338  08028338  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028338  08028338  00038338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802833c  0802833c  0003833c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08028340  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000214  08028554  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  08028554  00040904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000234df  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b0c  00000000  00000000  00063723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  00068230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000078c4  00000000  00000000  00069b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025630  00000000  00000000  00071424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00098c92  00000000  00000000  00096a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012f6e6  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001790  00000000  00000000  0012f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d00  00000000  00000000  00130ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080143fc 	.word	0x080143fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	080143fc 	.word	0x080143fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200002b4 	.word	0x200002b4

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	200002b4 	.word	0x200002b4

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	200002b4 	.word	0x200002b4

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	200002b4 	.word	0x200002b4

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200002b4 	.word	0x200002b4

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002b4 	.word	0x200002b4

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f007 fa10 	bl	8009054 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	200002b8 	.word	0x200002b8

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f008 f941 	bl	8009f34 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f008 f93b 	bl	8009f34 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f008 f930 	bl	8009f34 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f008 f91d 	bl	8009f34 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f008 f917 	bl	8009f34 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f008 f90b 	bl	8009f34 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f008 f901 	bl	8009f34 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f008 f806 	bl	8009f34 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f008 f800 	bl	8009f34 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f007 ffc9 	bl	8009f34 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	200002b8 	.word	0x200002b8

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f007 ffa9 	bl	8009f34 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f007 ffa0 	bl	8009f34 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200002b8 	.word	0x200002b8
 8002054:	0801770c 	.word	0x0801770c
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f007 ff63 	bl	8009f34 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f00b fd7a 	bl	800db76 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f007 ff53 	bl	8009f34 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200002bc 	.word	0x200002bc
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002e5 	.word	0x200002e5

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f006 feb0 	bl	800903c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f007 fde7 	bl	8009f04 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f006 fe7b 	bl	800903c <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f006 fe75 	bl	800903c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f007 fda9 	bl	8009f04 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f006 fe3d 	bl	800903c <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f006 ffea 	bl	80093c0 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f006 ffd5 	bl	80093a2 <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f006 ffa4 	bl	8009352 <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002e5 	.word	0x200002e5
 8002420:	200002e8 	.word	0x200002e8
 8002424:	200002e4 	.word	0x200002e4
 8002428:	200002bc 	.word	0x200002bc
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f006 ff94 	bl	800936e <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002e5 	.word	0x200002e5

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f007 fd5b 	bl	8009f34 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f006 fddd 	bl	8009054 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002e5 	.word	0x200002e5
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f006 fefd 	bl	800931a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f006 ff16 	bl	8009352 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f006 fef5 	bl	800931a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f006 ff0e 	bl	8009352 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f006 feed 	bl	800931a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f006 ff06 	bl	8009352 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f006 fee5 	bl	800931a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f006 fefe 	bl	8009352 <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002ec 	.word	0x200002ec

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f007 fe47 	bl	800a254 <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002ec 	.word	0x200002ec

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f007 fe31 	bl	800a254 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f007 ff24 	bl	800a450 <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002ec 	.word	0x200002ec

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002780:	2003      	movs	r0, #3
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f866 	bl	800285a <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002798:	2002      	movs	r0, #2
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f85a 	bl	800285a <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7ff ff0f 	bl	80025d4 <DS3231_GetRegByte>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f84e 	bl	800285a <DS3231_DecodeBCD>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f85b 	bl	800288c <DS3231_EncodeBCD>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4619      	mov	r1, r3
 80027da:	2003      	movs	r0, #3
 80027dc:	f7ff fedc 	bl	8002598 <DS3231_SetRegByte>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f846 	bl	800288c <DS3231_EncodeBCD>
 8002800:	4603      	mov	r3, r0
 8002802:	4619      	mov	r1, r3
 8002804:	2002      	movs	r0, #2
 8002806:	f7ff fec7 	bl	8002598 <DS3231_SetRegByte>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f834 	bl	800288c <DS3231_EncodeBCD>
 8002824:	4603      	mov	r3, r0
 8002826:	4619      	mov	r1, r3
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff feb5 	bl	8002598 <DS3231_SetRegByte>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f822 	bl	800288c <DS3231_EncodeBCD>
 8002848:	4603      	mov	r3, r0
 800284a:	4619      	mov	r1, r3
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fea3 	bl	8002598 <DS3231_SetRegByte>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b2db      	uxtb	r3, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002896:	79fa      	ldrb	r2, [r7, #7]
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <DS3231_EncodeBCD+0x40>)
 800289a:	fba3 1302 	umull	r1, r3, r3, r2
 800289e:	08d9      	lsrs	r1, r3, #3
 80028a0:	460b      	mov	r3, r1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4907      	ldr	r1, [pc, #28]	; (80028cc <DS3231_EncodeBCD+0x40>)
 80028b0:	fba1 1303 	umull	r1, r3, r1, r3
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	cccccccd 	.word	0xcccccccd

080028d0 <eeprom_wait>:
static uint32_t last_write;

//
// Basic function to work with I2C EEPROM
void eeprom_wait(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80028d4:	bf00      	nop
 80028d6:	f006 fbb1 	bl	800903c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <eeprom_wait+0x1c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d9f7      	bls.n	80028d6 <eeprom_wait+0x6>
    {
    }
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000248 	.word	0x20000248

080028f0 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80028fc:	f7ff ffe8 	bl	80028d0 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	21a0      	movs	r1, #160	; 0xa0
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <eeprom_read+0x38>)
 800291a:	f008 f8b9 	bl	800aa90 <HAL_I2C_Mem_Read>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000330 	.word	0x20000330

0800292c <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af04      	add	r7, sp, #16
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002938:	f7ff ffca 	bl	80028d0 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	9102      	str	r1, [sp, #8]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	21a0      	movs	r1, #160	; 0xa0
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <eeprom_write+0x48>)
 8002956:	f007 ffa1 	bl	800a89c <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800295e:	f006 fb6d 	bl	800903c <HAL_GetTick>
 8002962:	4603      	mov	r3, r0
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <eeprom_write+0x4c>)
 8002966:	6013      	str	r3, [r2, #0]

    return rc;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000330 	.word	0x20000330
 8002978:	20000248 	.word	0x20000248

0800297c <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	460a      	mov	r2, r1
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	4613      	mov	r3, r2
 800298a:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <EEPROM_RelayStateUpdate+0x2a>
 8002996:	f107 030f 	add.w	r3, r7, #15
 800299a:	2201      	movs	r2, #1
 800299c:	4619      	mov	r1, r3
 800299e:	202e      	movs	r0, #46	; 0x2e
 80029a0:	f7ff ffc4 	bl	800292c <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 80029a4:	e01f      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d107      	bne.n	80029bc <EEPROM_RelayStateUpdate+0x40>
 80029ac:	f107 030f 	add.w	r3, r7, #15
 80029b0:	2201      	movs	r2, #1
 80029b2:	4619      	mov	r1, r3
 80029b4:	202f      	movs	r0, #47	; 0x2f
 80029b6:	f7ff ffb9 	bl	800292c <eeprom_write>
}
 80029ba:	e014      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <EEPROM_RelayStateUpdate+0x56>
 80029c2:	f107 030f 	add.w	r3, r7, #15
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	2030      	movs	r0, #48	; 0x30
 80029cc:	f7ff ffae 	bl	800292c <eeprom_write>
}
 80029d0:	e009      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d106      	bne.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
 80029d8:	f107 030f 	add.w	r3, r7, #15
 80029dc:	2201      	movs	r2, #1
 80029de:	4619      	mov	r1, r3
 80029e0:	2031      	movs	r0, #49	; 0x31
 80029e2:	f7ff ffa3 	bl	800292c <eeprom_write>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	460a      	mov	r2, r1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	4613      	mov	r3, r2
 80029fc:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <EEPROM_LightStateUpdate+0x2a>
 8002a08:	f107 030f 	add.w	r3, r7, #15
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2033      	movs	r0, #51	; 0x33
 8002a12:	f7ff ff8b 	bl	800292c <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002a16:	e01f      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <EEPROM_LightStateUpdate+0x40>
 8002a1e:	f107 030f 	add.w	r3, r7, #15
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	2034      	movs	r0, #52	; 0x34
 8002a28:	f7ff ff80 	bl	800292c <eeprom_write>
}
 8002a2c:	e014      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d107      	bne.n	8002a44 <EEPROM_LightStateUpdate+0x56>
 8002a34:	f107 030f 	add.w	r3, r7, #15
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	2035      	movs	r0, #53	; 0x35
 8002a3e:	f7ff ff75 	bl	800292c <eeprom_write>
}
 8002a42:	e009      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d106      	bne.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
 8002a4a:	f107 030f 	add.w	r3, r7, #15
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4619      	mov	r1, r3
 8002a52:	2036      	movs	r0, #54	; 0x36
 8002a54:	f7ff ff6a 	bl	800292c <eeprom_write>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <EEPROM_RelayStateRead+0x24>
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	202e      	movs	r0, #46	; 0x2e
 8002a7e:	f7ff ff37 	bl	80028f0 <eeprom_read>
 8002a82:	e01f      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <EEPROM_RelayStateRead+0x3a>
 8002a8a:	f107 030f 	add.w	r3, r7, #15
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4619      	mov	r1, r3
 8002a92:	202f      	movs	r0, #47	; 0x2f
 8002a94:	f7ff ff2c 	bl	80028f0 <eeprom_read>
 8002a98:	e014      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d107      	bne.n	8002ab0 <EEPROM_RelayStateRead+0x50>
 8002aa0:	f107 030f 	add.w	r3, r7, #15
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2030      	movs	r0, #48	; 0x30
 8002aaa:	f7ff ff21 	bl	80028f0 <eeprom_read>
 8002aae:	e009      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d106      	bne.n	8002ac4 <EEPROM_RelayStateRead+0x64>
 8002ab6:	f107 030f 	add.w	r3, r7, #15
 8002aba:	2201      	movs	r2, #1
 8002abc:	4619      	mov	r1, r3
 8002abe:	2031      	movs	r0, #49	; 0x31
 8002ac0:	f7ff ff16 	bl	80028f0 <eeprom_read>

	return RelayStan;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <EEPROM_LightStateRead+0x24>
 8002ae2:	f107 030f 	add.w	r3, r7, #15
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2033      	movs	r0, #51	; 0x33
 8002aec:	f7ff ff00 	bl	80028f0 <eeprom_read>
 8002af0:	e01f      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d107      	bne.n	8002b08 <EEPROM_LightStateRead+0x3a>
 8002af8:	f107 030f 	add.w	r3, r7, #15
 8002afc:	2201      	movs	r2, #1
 8002afe:	4619      	mov	r1, r3
 8002b00:	2034      	movs	r0, #52	; 0x34
 8002b02:	f7ff fef5 	bl	80028f0 <eeprom_read>
 8002b06:	e014      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <EEPROM_LightStateRead+0x50>
 8002b0e:	f107 030f 	add.w	r3, r7, #15
 8002b12:	2201      	movs	r2, #1
 8002b14:	4619      	mov	r1, r3
 8002b16:	2035      	movs	r0, #53	; 0x35
 8002b18:	f7ff feea 	bl	80028f0 <eeprom_read>
 8002b1c:	e009      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d106      	bne.n	8002b32 <EEPROM_LightStateRead+0x64>
 8002b24:	f107 030f 	add.w	r3, r7, #15
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f7ff fedf 	bl	80028f0 <eeprom_read>

	return AktualnyStan;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ff8d 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <EEPROM_RelayStateRestore+0x18>
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f005 fa6f 	bl	8008030 <SendComand>
 8002b52:	e002      	b.n	8002b5a <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002b54:	2006      	movs	r0, #6
 8002b56:	f005 fa6b 	bl	8008030 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7ff ff80 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <EEPROM_RelayStateRestore+0x32>
 8002b66:	2007      	movs	r0, #7
 8002b68:	f005 fa62 	bl	8008030 <SendComand>
 8002b6c:	e002      	b.n	8002b74 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002b6e:	2008      	movs	r0, #8
 8002b70:	f005 fa5e 	bl	8008030 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f7ff ff73 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <EEPROM_RelayStateRestore+0x4c>
 8002b80:	2009      	movs	r0, #9
 8002b82:	f005 fa55 	bl	8008030 <SendComand>
 8002b86:	e002      	b.n	8002b8e <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f005 fa51 	bl	8008030 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002b8e:	2004      	movs	r0, #4
 8002b90:	f7ff ff66 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <EEPROM_RelayStateRestore+0x66>
 8002b9a:	200b      	movs	r0, #11
 8002b9c:	f005 fa48 	bl	8008030 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002ba0:	e002      	b.n	8002ba8 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002ba2:	200c      	movs	r0, #12
 8002ba4:	f005 fa44 	bl	8008030 <SendComand>
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7ff ff8c 	bl	8002ace <EEPROM_LightStateRead>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <EEPROM_LightStateRestore+0x18>
 8002bbc:	200d      	movs	r0, #13
 8002bbe:	f005 fa37 	bl	8008030 <SendComand>
 8002bc2:	e002      	b.n	8002bca <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002bc4:	200e      	movs	r0, #14
 8002bc6:	f005 fa33 	bl	8008030 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f7ff ff7f 	bl	8002ace <EEPROM_LightStateRead>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <EEPROM_LightStateRestore+0x32>
 8002bd6:	200f      	movs	r0, #15
 8002bd8:	f005 fa2a 	bl	8008030 <SendComand>
 8002bdc:	e002      	b.n	8002be4 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002bde:	2010      	movs	r0, #16
 8002be0:	f005 fa26 	bl	8008030 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f7ff ff72 	bl	8002ace <EEPROM_LightStateRead>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <EEPROM_LightStateRestore+0x4c>
 8002bf0:	2011      	movs	r0, #17
 8002bf2:	f005 fa1d 	bl	8008030 <SendComand>
 8002bf6:	e002      	b.n	8002bfe <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002bf8:	2012      	movs	r0, #18
 8002bfa:	f005 fa19 	bl	8008030 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002bfe:	2004      	movs	r0, #4
 8002c00:	f7ff ff65 	bl	8002ace <EEPROM_LightStateRead>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <EEPROM_LightStateRestore+0x66>
 8002c0a:	2013      	movs	r0, #19
 8002c0c:	f005 fa10 	bl	8008030 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002c10:	e002      	b.n	8002c18 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002c12:	2014      	movs	r0, #20
 8002c14:	f005 fa0c 	bl	8008030 <SendComand>
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c32:	f107 030a 	add.w	r3, r7, #10
 8002c36:	2201      	movs	r2, #1
 8002c38:	4619      	mov	r1, r3
 8002c3a:	2005      	movs	r0, #5
 8002c3c:	f7ff fe58 	bl	80028f0 <eeprom_read>
 8002c40:	e009      	b.n	8002c56 <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d106      	bne.n	8002c56 <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c48:	f107 030a 	add.w	r3, r7, #10
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4619      	mov	r1, r3
 8002c50:	200c      	movs	r0, #12
 8002c52:	f7ff fe4d 	bl	80028f0 <eeprom_read>
//	else  scheduleDayInWeekTab[5] = 0;
//	//ND-7
//	if(TempDayInWeek & 0x40)  scheduleDayInWeekTab[6] = 1;
//	else  scheduleDayInWeekTab[6] = 0;

	uint32_t a = 0x01;
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	72fb      	strb	r3, [r7, #11]
 8002c5e:	e016      	b.n	8002c8e <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a)
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e004      	b.n	8002c82 <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else
		{
			scheduleDayInWeekTab[i] = 0;
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	72fb      	strb	r3, [r7, #11]
 8002c8e:	7afb      	ldrb	r3, [r7, #11]
 8002c90:	2b06      	cmp	r3, #6
 8002c92:	d9e5      	bls.n	8002c60 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	6039      	str	r1, [r7, #0]
 8002ca8:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	72fb      	strb	r3, [r7, #11]
 8002cb6:	e011      	b.n	8002cdc <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	7abb      	ldrb	r3, [r7, #10]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	72fb      	strb	r3, [r7, #11]
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d9ea      	bls.n	8002cb8 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002ce8:	f107 030a 	add.w	r3, r7, #10
 8002cec:	2201      	movs	r2, #1
 8002cee:	4619      	mov	r1, r3
 8002cf0:	2005      	movs	r0, #5
 8002cf2:	f7ff fe1b 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002cf6:	e009      	b.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d106      	bne.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002cfe:	f107 030a 	add.w	r3, r7, #10
 8002d02:	2201      	movs	r2, #1
 8002d04:	4619      	mov	r1, r3
 8002d06:	200c      	movs	r0, #12
 8002d08:	f7ff fe10 	bl	800292c <eeprom_write>
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
	uint8_t TempLights = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73bb      	strb	r3, [r7, #14]

		if(1 == NrOfSchedule)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10e      	bne.n	8002d4c <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d2e:	f107 030f 	add.w	r3, r7, #15
 8002d32:	2201      	movs	r2, #1
 8002d34:	4619      	mov	r1, r3
 8002d36:	2006      	movs	r0, #6
 8002d38:	f7ff fdda 	bl	80028f0 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8002d3c:	f107 030e 	add.w	r3, r7, #14
 8002d40:	2201      	movs	r2, #1
 8002d42:	4619      	mov	r1, r3
 8002d44:	2007      	movs	r0, #7
 8002d46:	f7ff fdd3 	bl	80028f0 <eeprom_read>
		else if(2 == NrOfSchedule)
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
		}
}
 8002d4a:	e010      	b.n	8002d6e <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		else if(2 == NrOfSchedule)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d10d      	bne.n	8002d6e <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d52:	f107 030f 	add.w	r3, r7, #15
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	200d      	movs	r0, #13
 8002d5c:	f7ff fdc8 	bl	80028f0 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8002d60:	f107 030e 	add.w	r3, r7, #14
 8002d64:	2201      	movs	r2, #1
 8002d66:	4619      	mov	r1, r3
 8002d68:	200e      	movs	r0, #14
 8002d6a:	f7ff fdc1 	bl	80028f0 <eeprom_read>
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	6039      	str	r1, [r7, #0]
 8002d80:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d107      	bne.n	8002d9c <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 8002d8c:	f107 030f 	add.w	r3, r7, #15
 8002d90:	2201      	movs	r2, #1
 8002d92:	4619      	mov	r1, r3
 8002d94:	2008      	movs	r0, #8
 8002d96:	f7ff fdab 	bl	80028f0 <eeprom_read>
 8002d9a:	e009      	b.n	8002db0 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d106      	bne.n	8002db0 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 8002da2:	f107 030f 	add.w	r3, r7, #15
 8002da6:	2201      	movs	r2, #1
 8002da8:	4619      	mov	r1, r3
 8002daa:	200f      	movs	r0, #15
 8002dac:	f7ff fda0 	bl	80028f0 <eeprom_read>
	}

	*hourOn = TempHour;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	701a      	strb	r2, [r3, #0]
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	6039      	str	r1, [r7, #0]
 8002dc8:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002dd4:	f107 030f 	add.w	r3, r7, #15
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4619      	mov	r1, r3
 8002ddc:	2009      	movs	r0, #9
 8002dde:	f7ff fd87 	bl	80028f0 <eeprom_read>
 8002de2:	e009      	b.n	8002df8 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d106      	bne.n	8002df8 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002dea:	f107 030f 	add.w	r3, r7, #15
 8002dee:	2201      	movs	r2, #1
 8002df0:	4619      	mov	r1, r3
 8002df2:	2010      	movs	r0, #16
 8002df4:	f7ff fd7c 	bl	80028f0 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	701a      	strb	r2, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	6039      	str	r1, [r7, #0]
 8002e10:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002e1c:	f107 030f 	add.w	r3, r7, #15
 8002e20:	2201      	movs	r2, #1
 8002e22:	4619      	mov	r1, r3
 8002e24:	200a      	movs	r0, #10
 8002e26:	f7ff fd63 	bl	80028f0 <eeprom_read>
 8002e2a:	e009      	b.n	8002e40 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d106      	bne.n	8002e40 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002e32:	f107 030f 	add.w	r3, r7, #15
 8002e36:	2201      	movs	r2, #1
 8002e38:	4619      	mov	r1, r3
 8002e3a:	2011      	movs	r0, #17
 8002e3c:	f7ff fd58 	bl	80028f0 <eeprom_read>
	}

	*hourOff = TempHour;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	701a      	strb	r2, [r3, #0]

}
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	6039      	str	r1, [r7, #0]
 8002e58:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002e64:	f107 030f 	add.w	r3, r7, #15
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	200b      	movs	r0, #11
 8002e6e:	f7ff fd3f 	bl	80028f0 <eeprom_read>
 8002e72:	e009      	b.n	8002e88 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d106      	bne.n	8002e88 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002e7a:	f107 030f 	add.w	r3, r7, #15
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4619      	mov	r1, r3
 8002e82:	2012      	movs	r0, #18
 8002e84:	f7ff fd34 	bl	80028f0 <eeprom_read>
	}
	*minuteOff = TempMinute;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	701a      	strb	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	71fb      	strb	r3, [r7, #7]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 8002ea6:	79bb      	ldrb	r3, [r7, #6]
 8002ea8:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d107      	bne.n	8002ec0 <EEPROM_ScheduleHourOnUpdate+0x2a>
 8002eb0:	f107 030f 	add.w	r3, r7, #15
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	2008      	movs	r0, #8
 8002eba:	f7ff fd37 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 8002ebe:	e009      	b.n	8002ed4 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d106      	bne.n	8002ed4 <EEPROM_ScheduleHourOnUpdate+0x3e>
 8002ec6:	f107 030f 	add.w	r3, r7, #15
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4619      	mov	r1, r3
 8002ece:	200f      	movs	r0, #15
 8002ed0:	f7ff fd2c 	bl	800292c <eeprom_write>
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	71fb      	strb	r3, [r7, #7]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8002eec:	79bb      	ldrb	r3, [r7, #6]
 8002eee:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 8002ef6:	f107 030f 	add.w	r3, r7, #15
 8002efa:	2201      	movs	r2, #1
 8002efc:	4619      	mov	r1, r3
 8002efe:	2009      	movs	r0, #9
 8002f00:	f7ff fd14 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8002f04:	e009      	b.n	8002f1a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d106      	bne.n	8002f1a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8002f0c:	f107 030f 	add.w	r3, r7, #15
 8002f10:	2201      	movs	r2, #1
 8002f12:	4619      	mov	r1, r3
 8002f14:	2010      	movs	r0, #16
 8002f16:	f7ff fd09 	bl	800292c <eeprom_write>
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	460a      	mov	r2, r1
 8002f2c:	71fb      	strb	r3, [r7, #7]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 8002f32:	79bb      	ldrb	r3, [r7, #6]
 8002f34:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d107      	bne.n	8002f4c <EEPROM_ScheduleHourOffUpdate+0x2a>
 8002f3c:	f107 030f 	add.w	r3, r7, #15
 8002f40:	2201      	movs	r2, #1
 8002f42:	4619      	mov	r1, r3
 8002f44:	200a      	movs	r0, #10
 8002f46:	f7ff fcf1 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 8002f4a:	e009      	b.n	8002f60 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d106      	bne.n	8002f60 <EEPROM_ScheduleHourOffUpdate+0x3e>
 8002f52:	f107 030f 	add.w	r3, r7, #15
 8002f56:	2201      	movs	r2, #1
 8002f58:	4619      	mov	r1, r3
 8002f5a:	2011      	movs	r0, #17
 8002f5c:	f7ff fce6 	bl	800292c <eeprom_write>
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460a      	mov	r2, r1
 8002f72:	71fb      	strb	r3, [r7, #7]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 8002f78:	79bb      	ldrb	r3, [r7, #6]
 8002f7a:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d107      	bne.n	8002f92 <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 8002f82:	f107 030f 	add.w	r3, r7, #15
 8002f86:	2201      	movs	r2, #1
 8002f88:	4619      	mov	r1, r3
 8002f8a:	200b      	movs	r0, #11
 8002f8c:	f7ff fcce 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 8002f90:	e009      	b.n	8002fa6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d106      	bne.n	8002fa6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 8002f98:	f107 030f 	add.w	r3, r7, #15
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	2012      	movs	r0, #18
 8002fa2:	f7ff fcc3 	bl	800292c <eeprom_write>
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002fb6:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002fba:	f7fe ff9d 	bl	8001ef8 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 8002fbe:	238c      	movs	r3, #140	; 0x8c
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	23f0      	movs	r3, #240	; 0xf0
 8002fc4:	4aab      	ldr	r2, [pc, #684]	; (8003274 <system_init+0x2c4>)
 8002fc6:	2132      	movs	r1, #50	; 0x32
 8002fc8:	201e      	movs	r0, #30
 8002fca:	f7fe ff6a 	bl	8001ea2 <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002fce:	48aa      	ldr	r0, [pc, #680]	; (8003278 <system_init+0x2c8>)
 8002fd0:	f7fe fb8e 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8002fd4:	49a9      	ldr	r1, [pc, #676]	; (800327c <system_init+0x2cc>)
 8002fd6:	48aa      	ldr	r0, [pc, #680]	; (8003280 <system_init+0x2d0>)
 8002fd8:	f00d fbf8 	bl	80107cc <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002fdc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	220a      	movs	r2, #10
 8002fea:	213c      	movs	r1, #60	; 0x3c
 8002fec:	48a4      	ldr	r0, [pc, #656]	; (8003280 <system_init+0x2d0>)
 8002fee:	f7fe fd99 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 8002ff2:	f006 f823 	bl	800903c <HAL_GetTick>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4aa2      	ldr	r2, [pc, #648]	; (8003284 <system_init+0x2d4>)
 8002ffa:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8002ffc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	2305      	movs	r3, #5
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2314      	movs	r3, #20
 8003008:	2214      	movs	r2, #20
 800300a:	21be      	movs	r1, #190	; 0xbe
 800300c:	203c      	movs	r0, #60	; 0x3c
 800300e:	f7fe faa1 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 8003012:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	2305      	movs	r3, #5
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2314      	movs	r3, #20
 800301e:	2214      	movs	r2, #20
 8003020:	21be      	movs	r1, #190	; 0xbe
 8003022:	205a      	movs	r0, #90	; 0x5a
 8003024:	f7fe fa96 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003028:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	2305      	movs	r3, #5
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2314      	movs	r3, #20
 8003034:	2214      	movs	r2, #20
 8003036:	21be      	movs	r1, #190	; 0xbe
 8003038:	2078      	movs	r0, #120	; 0x78
 800303a:	f7fe fa8b 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 800303e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	2305      	movs	r3, #5
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2314      	movs	r3, #20
 800304a:	2214      	movs	r2, #20
 800304c:	21be      	movs	r1, #190	; 0xbe
 800304e:	2096      	movs	r0, #150	; 0x96
 8003050:	f7fe fa80 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8003054:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	2305      	movs	r3, #5
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	2314      	movs	r3, #20
 8003060:	2214      	movs	r2, #20
 8003062:	21be      	movs	r1, #190	; 0xbe
 8003064:	20b4      	movs	r0, #180	; 0xb4
 8003066:	f7fe fa75 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 800306a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	2305      	movs	r3, #5
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2314      	movs	r3, #20
 8003076:	2214      	movs	r2, #20
 8003078:	21be      	movs	r1, #190	; 0xbe
 800307a:	20d2      	movs	r0, #210	; 0xd2
 800307c:	f7fe fa6a 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 8003080:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	2305      	movs	r3, #5
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2314      	movs	r3, #20
 800308c:	2214      	movs	r2, #20
 800308e:	21be      	movs	r1, #190	; 0xbe
 8003090:	20f0      	movs	r0, #240	; 0xf0
 8003092:	f7fe fa5f 	bl	8001554 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 8003096:	f005 ffd1 	bl	800903c <HAL_GetTick>
 800309a:	4603      	mov	r3, r0
 800309c:	4a79      	ldr	r2, [pc, #484]	; (8003284 <system_init+0x2d4>)
 800309e:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80030a0:	4879      	ldr	r0, [pc, #484]	; (8003288 <system_init+0x2d8>)
 80030a2:	f7fe fb25 	bl	80016f0 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80030a6:	20c8      	movs	r0, #200	; 0xc8
 80030a8:	f002 f882 	bl	80051b0 <initWait>
	  	  LastTime = HAL_GetTick();
 80030ac:	f005 ffc6 	bl	800903c <HAL_GetTick>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4a74      	ldr	r2, [pc, #464]	; (8003284 <system_init+0x2d4>)
 80030b4:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 80030b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	2305      	movs	r3, #5
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2314      	movs	r3, #20
 80030c2:	2214      	movs	r2, #20
 80030c4:	21be      	movs	r1, #190	; 0xbe
 80030c6:	203c      	movs	r0, #60	; 0x3c
 80030c8:	f7fe fac1 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 80030cc:	2201      	movs	r2, #1
 80030ce:	496f      	ldr	r1, [pc, #444]	; (800328c <system_init+0x2dc>)
 80030d0:	2001      	movs	r0, #1
 80030d2:	f7ff fc0d 	bl	80028f0 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 80030d6:	2025      	movs	r0, #37	; 0x25
 80030d8:	f004 ffaa 	bl	8008030 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80030dc:	486c      	ldr	r0, [pc, #432]	; (8003290 <system_init+0x2e0>)
 80030de:	f005 fdbd 	bl	8008c5c <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 80030e2:	496c      	ldr	r1, [pc, #432]	; (8003294 <system_init+0x2e4>)
 80030e4:	4866      	ldr	r0, [pc, #408]	; (8003280 <system_init+0x2d0>)
 80030e6:	f00d fb71 	bl	80107cc <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80030ea:	f24c 6318 	movw	r3, #50712	; 0xc618
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	2301      	movs	r3, #1
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	22dc      	movs	r2, #220	; 0xdc
 80030f8:	2114      	movs	r1, #20
 80030fa:	4861      	ldr	r0, [pc, #388]	; (8003280 <system_init+0x2d0>)
 80030fc:	f7fe fd12 	bl	8001b24 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003100:	20c8      	movs	r0, #200	; 0xc8
 8003102:	f002 f855 	bl	80051b0 <initWait>
	  	  	  LastTime = HAL_GetTick();
 8003106:	f005 ff99 	bl	800903c <HAL_GetTick>
 800310a:	4603      	mov	r3, r0
 800310c:	4a5d      	ldr	r2, [pc, #372]	; (8003284 <system_init+0x2d4>)
 800310e:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8003110:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	2305      	movs	r3, #5
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	2314      	movs	r3, #20
 800311c:	2214      	movs	r2, #20
 800311e:	21be      	movs	r1, #190	; 0xbe
 8003120:	205a      	movs	r0, #90	; 0x5a
 8003122:	f7fe fa94 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8003126:	201b      	movs	r0, #27
 8003128:	f004 ff82 	bl	8008030 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 800312c:	f7ff fd06 	bl	8002b3c <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003130:	4857      	ldr	r0, [pc, #348]	; (8003290 <system_init+0x2e0>)
 8003132:	f005 fd93 	bl	8008c5c <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 8003136:	4958      	ldr	r1, [pc, #352]	; (8003298 <system_init+0x2e8>)
 8003138:	4851      	ldr	r0, [pc, #324]	; (8003280 <system_init+0x2d0>)
 800313a:	f00d fb47 	bl	80107cc <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800313e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	2301      	movs	r3, #1
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2300      	movs	r3, #0
 800314a:	22dc      	movs	r2, #220	; 0xdc
 800314c:	2114      	movs	r1, #20
 800314e:	484c      	ldr	r0, [pc, #304]	; (8003280 <system_init+0x2d0>)
 8003150:	f7fe fce8 	bl	8001b24 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003154:	20c8      	movs	r0, #200	; 0xc8
 8003156:	f002 f82b 	bl	80051b0 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 800315a:	f005 ff6f 	bl	800903c <HAL_GetTick>
 800315e:	4603      	mov	r3, r0
 8003160:	4a48      	ldr	r2, [pc, #288]	; (8003284 <system_init+0x2d4>)
 8003162:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 8003164:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	2305      	movs	r3, #5
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2314      	movs	r3, #20
 8003170:	2214      	movs	r2, #20
 8003172:	21be      	movs	r1, #190	; 0xbe
 8003174:	2078      	movs	r0, #120	; 0x78
 8003176:	f7fe fa6a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 800317a:	2004      	movs	r0, #4
 800317c:	f004 ff58 	bl	8008030 <SendComand>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003180:	20c8      	movs	r0, #200	; 0xc8
 8003182:	f002 f815 	bl	80051b0 <initWait>
			  LastTime = HAL_GetTick();
 8003186:	f005 ff59 	bl	800903c <HAL_GetTick>
 800318a:	4603      	mov	r3, r0
 800318c:	4a3d      	ldr	r2, [pc, #244]	; (8003284 <system_init+0x2d4>)
 800318e:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 8003190:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	2305      	movs	r3, #5
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2314      	movs	r3, #20
 800319c:	2214      	movs	r2, #20
 800319e:	21be      	movs	r1, #190	; 0xbe
 80031a0:	2096      	movs	r0, #150	; 0x96
 80031a2:	f7fe fa54 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 80031a6:	f7ff fd01 	bl	8002bac <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80031aa:	4839      	ldr	r0, [pc, #228]	; (8003290 <system_init+0x2e0>)
 80031ac:	f005 fd56 	bl	8008c5c <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 80031b0:	493a      	ldr	r1, [pc, #232]	; (800329c <system_init+0x2ec>)
 80031b2:	4833      	ldr	r0, [pc, #204]	; (8003280 <system_init+0x2d0>)
 80031b4:	f00d fb0a 	bl	80107cc <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80031b8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	2301      	movs	r3, #1
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	22dc      	movs	r2, #220	; 0xdc
 80031c6:	2114      	movs	r1, #20
 80031c8:	482d      	ldr	r0, [pc, #180]	; (8003280 <system_init+0x2d0>)
 80031ca:	f7fe fcab 	bl	8001b24 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80031ce:	20c8      	movs	r0, #200	; 0xc8
 80031d0:	f001 ffee 	bl	80051b0 <initWait>
			  LastTime = HAL_GetTick();
 80031d4:	f005 ff32 	bl	800903c <HAL_GetTick>
 80031d8:	4603      	mov	r3, r0
 80031da:	4a2a      	ldr	r2, [pc, #168]	; (8003284 <system_init+0x2d4>)
 80031dc:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 80031de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	2305      	movs	r3, #5
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2314      	movs	r3, #20
 80031ea:	2214      	movs	r2, #20
 80031ec:	21be      	movs	r1, #190	; 0xbe
 80031ee:	20b4      	movs	r0, #180	; 0xb4
 80031f0:	f7fe fa2d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  	  SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 80031f4:	2003      	movs	r0, #3
 80031f6:	f004 ff1b 	bl	8008030 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80031fa:	20c8      	movs	r0, #200	; 0xc8
 80031fc:	f001 ffd8 	bl	80051b0 <initWait>
			  LastTime = HAL_GetTick();
 8003200:	f005 ff1c 	bl	800903c <HAL_GetTick>
 8003204:	4603      	mov	r3, r0
 8003206:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <system_init+0x2d4>)
 8003208:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 800320a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	2305      	movs	r3, #5
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2314      	movs	r3, #20
 8003216:	2214      	movs	r2, #20
 8003218:	21be      	movs	r1, #190	; 0xbe
 800321a:	20d2      	movs	r0, #210	; 0xd2
 800321c:	f7fe fa17 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003220:	2015      	movs	r0, #21
 8003222:	f004 ff05 	bl	8008030 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003226:	20c8      	movs	r0, #200	; 0xc8
 8003228:	f001 ffc2 	bl	80051b0 <initWait>
			  LastTime = HAL_GetTick();
 800322c:	f005 ff06 	bl	800903c <HAL_GetTick>
 8003230:	4603      	mov	r3, r0
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <system_init+0x2d4>)
 8003234:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 8003236:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2305      	movs	r3, #5
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2314      	movs	r3, #20
 8003242:	2214      	movs	r2, #20
 8003244:	21be      	movs	r1, #190	; 0xbe
 8003246:	20f0      	movs	r0, #240	; 0xf0
 8003248:	f7fe fa01 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 800324c:	2016      	movs	r0, #22
 800324e:	f004 feef 	bl	8008030 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003252:	480f      	ldr	r0, [pc, #60]	; (8003290 <system_init+0x2e0>)
 8003254:	f005 fd02 	bl	8008c5c <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 8003258:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800325c:	f001 ffa8 	bl	80051b0 <initWait>
			  LastTime = HAL_GetTick();
 8003260:	f005 feec 	bl	800903c <HAL_GetTick>
 8003264:	4603      	mov	r3, r0
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <system_init+0x2d4>)
 8003268:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 800326a:	2301      	movs	r3, #1
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	0801777c 	.word	0x0801777c
 8003278:	08017700 	.word	0x08017700
 800327c:	08014418 	.word	0x08014418
 8003280:	200002f0 	.word	0x200002f0
 8003284:	20000250 	.word	0x20000250
 8003288:	08015788 	.word	0x08015788
 800328c:	20000033 	.word	0x20000033
 8003290:	20000498 	.word	0x20000498
 8003294:	0801442c 	.word	0x0801442c
 8003298:	08014448 	.word	0x08014448
 800329c:	08014468 	.word	0x08014468

080032a0 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	ed87 0a05 	vstr	s0, [r7, #20]
 80032aa:	edc7 0a04 	vstr	s1, [r7, #16]
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	460b      	mov	r3, r1
 80032b2:	ed87 1a01 	vstr	s2, [r7, #4]
 80032b6:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80032b8:	f24c 6018 	movw	r0, #50712	; 0xc618
 80032bc:	f7fe fe1c 	bl	8001ef8 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 80032c0:	2003      	movs	r0, #3
 80032c2:	f004 feb5 	bl	8008030 <SendComand>
	  SendComand(UCMD_PRES_1);
 80032c6:	2004      	movs	r0, #4
 80032c8:	f004 feb2 	bl	8008030 <SendComand>
	  SendComand(UCMD_TEMP_2);
 80032cc:	201b      	movs	r0, #27
 80032ce:	f004 feaf 	bl	8008030 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 80032d2:	f7ff fa5f 	bl	8002794 <DS3231_GetHour>
 80032d6:	4603      	mov	r3, r0
 80032d8:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 80032da:	f7ff fa67 	bl	80027ac <DS3231_GetMinute>
 80032de:	4603      	mov	r3, r0
 80032e0:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 80032e2:	4881      	ldr	r0, [pc, #516]	; (80034e8 <showCurrentParameters+0x248>)
 80032e4:	f7fe fa04 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 80032e8:	4980      	ldr	r1, [pc, #512]	; (80034ec <showCurrentParameters+0x24c>)
 80032ea:	4881      	ldr	r0, [pc, #516]	; (80034f0 <showCurrentParameters+0x250>)
 80032ec:	f00d fa6e 	bl	80107cc <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80032f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2300      	movs	r3, #0
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80032fe:	220a      	movs	r2, #10
 8003300:	212f      	movs	r1, #47	; 0x2f
 8003302:	487b      	ldr	r0, [pc, #492]	; (80034f0 <showCurrentParameters+0x250>)
 8003304:	f7fe fc0e 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003308:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2329      	movs	r3, #41	; 0x29
 8003310:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003314:	2129      	movs	r1, #41	; 0x29
 8003316:	2000      	movs	r0, #0
 8003318:	f7fd ff3a 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800331c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	232b      	movs	r3, #43	; 0x2b
 8003324:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003328:	212b      	movs	r1, #43	; 0x2b
 800332a:	2000      	movs	r0, #0
 800332c:	f7fd ff30 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8003330:	7ffb      	ldrb	r3, [r7, #31]
 8003332:	2b09      	cmp	r3, #9
 8003334:	d809      	bhi.n	800334a <showCurrentParameters+0xaa>
 8003336:	7fbb      	ldrb	r3, [r7, #30]
 8003338:	2b09      	cmp	r3, #9
 800333a:	d806      	bhi.n	800334a <showCurrentParameters+0xaa>
 800333c:	7ffa      	ldrb	r2, [r7, #31]
 800333e:	7fbb      	ldrb	r3, [r7, #30]
 8003340:	496c      	ldr	r1, [pc, #432]	; (80034f4 <showCurrentParameters+0x254>)
 8003342:	486b      	ldr	r0, [pc, #428]	; (80034f0 <showCurrentParameters+0x250>)
 8003344:	f00d fa42 	bl	80107cc <siprintf>
 8003348:	e019      	b.n	800337e <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 800334a:	7ffb      	ldrb	r3, [r7, #31]
 800334c:	2b09      	cmp	r3, #9
 800334e:	d806      	bhi.n	800335e <showCurrentParameters+0xbe>
 8003350:	7ffa      	ldrb	r2, [r7, #31]
 8003352:	7fbb      	ldrb	r3, [r7, #30]
 8003354:	4968      	ldr	r1, [pc, #416]	; (80034f8 <showCurrentParameters+0x258>)
 8003356:	4866      	ldr	r0, [pc, #408]	; (80034f0 <showCurrentParameters+0x250>)
 8003358:	f00d fa38 	bl	80107cc <siprintf>
 800335c:	e00f      	b.n	800337e <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 800335e:	7fbb      	ldrb	r3, [r7, #30]
 8003360:	2b09      	cmp	r3, #9
 8003362:	d806      	bhi.n	8003372 <showCurrentParameters+0xd2>
 8003364:	7ffa      	ldrb	r2, [r7, #31]
 8003366:	7fbb      	ldrb	r3, [r7, #30]
 8003368:	4964      	ldr	r1, [pc, #400]	; (80034fc <showCurrentParameters+0x25c>)
 800336a:	4861      	ldr	r0, [pc, #388]	; (80034f0 <showCurrentParameters+0x250>)
 800336c:	f00d fa2e 	bl	80107cc <siprintf>
 8003370:	e005      	b.n	800337e <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8003372:	7ffa      	ldrb	r2, [r7, #31]
 8003374:	7fbb      	ldrb	r3, [r7, #30]
 8003376:	4962      	ldr	r1, [pc, #392]	; (8003500 <showCurrentParameters+0x260>)
 8003378:	485d      	ldr	r0, [pc, #372]	; (80034f0 <showCurrentParameters+0x250>)
 800337a:	f00d fa27 	bl	80107cc <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800337e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	2300      	movs	r3, #0
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	2232      	movs	r2, #50	; 0x32
 800338c:	2114      	movs	r1, #20
 800338e:	4858      	ldr	r0, [pc, #352]	; (80034f0 <showCurrentParameters+0x250>)
 8003390:	f7fe fbc8 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8003394:	4b5b      	ldr	r3, [pc, #364]	; (8003504 <showCurrentParameters+0x264>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd f8ed 	bl	8000578 <__aeabi_f2d>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4959      	ldr	r1, [pc, #356]	; (8003508 <showCurrentParameters+0x268>)
 80033a4:	4852      	ldr	r0, [pc, #328]	; (80034f0 <showCurrentParameters+0x250>)
 80033a6:	f00d fa11 	bl	80107cc <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80033aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	2301      	movs	r3, #1
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	2250      	movs	r2, #80	; 0x50
 80033b8:	2114      	movs	r1, #20
 80033ba:	484d      	ldr	r0, [pc, #308]	; (80034f0 <showCurrentParameters+0x250>)
 80033bc:	f7fe fbb2 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 80033c0:	4b52      	ldr	r3, [pc, #328]	; (800350c <showCurrentParameters+0x26c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd f8d7 	bl	8000578 <__aeabi_f2d>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4950      	ldr	r1, [pc, #320]	; (8003510 <showCurrentParameters+0x270>)
 80033d0:	4847      	ldr	r0, [pc, #284]	; (80034f0 <showCurrentParameters+0x250>)
 80033d2:	f00d f9fb 	bl	80107cc <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80033d6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	2300      	movs	r3, #0
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	226e      	movs	r2, #110	; 0x6e
 80033e4:	2114      	movs	r1, #20
 80033e6:	4842      	ldr	r0, [pc, #264]	; (80034f0 <showCurrentParameters+0x250>)
 80033e8:	f7fe fb9c 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 80033ec:	4b49      	ldr	r3, [pc, #292]	; (8003514 <showCurrentParameters+0x274>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4949      	ldr	r1, [pc, #292]	; (8003518 <showCurrentParameters+0x278>)
 80033f4:	483e      	ldr	r0, [pc, #248]	; (80034f0 <showCurrentParameters+0x250>)
 80033f6:	f00d f9e9 	bl	80107cc <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80033fa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	2300      	movs	r3, #0
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	228c      	movs	r2, #140	; 0x8c
 8003408:	2114      	movs	r1, #20
 800340a:	4839      	ldr	r0, [pc, #228]	; (80034f0 <showCurrentParameters+0x250>)
 800340c:	f7fe fb8a 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8003410:	4b42      	ldr	r3, [pc, #264]	; (800351c <showCurrentParameters+0x27c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd f8af 	bl	8000578 <__aeabi_f2d>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4940      	ldr	r1, [pc, #256]	; (8003520 <showCurrentParameters+0x280>)
 8003420:	4833      	ldr	r0, [pc, #204]	; (80034f0 <showCurrentParameters+0x250>)
 8003422:	f00d f9d3 	bl	80107cc <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003426:	f24c 6318 	movw	r3, #50712	; 0xc618
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	2300      	movs	r3, #0
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2300      	movs	r3, #0
 8003432:	22aa      	movs	r2, #170	; 0xaa
 8003434:	2114      	movs	r1, #20
 8003436:	482e      	ldr	r0, [pc, #184]	; (80034f0 <showCurrentParameters+0x250>)
 8003438:	f7fe fb74 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 800343c:	4839      	ldr	r0, [pc, #228]	; (8003524 <showCurrentParameters+0x284>)
 800343e:	f7fe f957 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003442:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	2305      	movs	r3, #5
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2314      	movs	r3, #20
 800344e:	225f      	movs	r2, #95	; 0x5f
 8003450:	21d8      	movs	r1, #216	; 0xd8
 8003452:	20dc      	movs	r0, #220	; 0xdc
 8003454:	f7fe f8fb 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8003458:	4933      	ldr	r1, [pc, #204]	; (8003528 <showCurrentParameters+0x288>)
 800345a:	4825      	ldr	r0, [pc, #148]	; (80034f0 <showCurrentParameters+0x250>)
 800345c:	f00d f9b6 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003460:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	2300      	movs	r3, #0
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2300      	movs	r3, #0
 800346c:	22da      	movs	r2, #218	; 0xda
 800346e:	21df      	movs	r1, #223	; 0xdf
 8003470:	481f      	ldr	r0, [pc, #124]	; (80034f0 <showCurrentParameters+0x250>)
 8003472:	f7fe fb57 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003476:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	2305      	movs	r3, #5
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2314      	movs	r3, #20
 8003482:	2264      	movs	r2, #100	; 0x64
 8003484:	21d8      	movs	r1, #216	; 0xd8
 8003486:	200a      	movs	r0, #10
 8003488:	f7fe f8e1 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 800348c:	4927      	ldr	r1, [pc, #156]	; (800352c <showCurrentParameters+0x28c>)
 800348e:	4818      	ldr	r0, [pc, #96]	; (80034f0 <showCurrentParameters+0x250>)
 8003490:	f00d f99c 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003494:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	2300      	movs	r3, #0
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	2300      	movs	r3, #0
 80034a0:	22da      	movs	r2, #218	; 0xda
 80034a2:	2114      	movs	r1, #20
 80034a4:	4812      	ldr	r0, [pc, #72]	; (80034f0 <showCurrentParameters+0x250>)
 80034a6:	f7fe fb3d 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80034aa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	2305      	movs	r3, #5
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2314      	movs	r3, #20
 80034b6:	225a      	movs	r2, #90	; 0x5a
 80034b8:	21d8      	movs	r1, #216	; 0xd8
 80034ba:	2078      	movs	r0, #120	; 0x78
 80034bc:	f7fe f8c7 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 80034c0:	491b      	ldr	r1, [pc, #108]	; (8003530 <showCurrentParameters+0x290>)
 80034c2:	480b      	ldr	r0, [pc, #44]	; (80034f0 <showCurrentParameters+0x250>)
 80034c4:	f00d f982 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80034c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	2300      	movs	r3, #0
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2300      	movs	r3, #0
 80034d4:	22da      	movs	r2, #218	; 0xda
 80034d6:	2184      	movs	r1, #132	; 0x84
 80034d8:	4805      	ldr	r0, [pc, #20]	; (80034f0 <showCurrentParameters+0x250>)
 80034da:	f7fe fb23 	bl	8001b24 <EF_PutString>
}
 80034de:	bf00      	nop
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	08017700 	.word	0x08017700
 80034ec:	08014488 	.word	0x08014488
 80034f0:	200002f0 	.word	0x200002f0
 80034f4:	08014498 	.word	0x08014498
 80034f8:	080144a8 	.word	0x080144a8
 80034fc:	080144b8 	.word	0x080144b8
 8003500:	080144c8 	.word	0x080144c8
 8003504:	20000288 	.word	0x20000288
 8003508:	080144d8 	.word	0x080144d8
 800350c:	20000294 	.word	0x20000294
 8003510:	080144ec 	.word	0x080144ec
 8003514:	20000298 	.word	0x20000298
 8003518:	08014500 	.word	0x08014500
 800351c:	20000290 	.word	0x20000290
 8003520:	08014514 	.word	0x08014514
 8003524:	08015788 	.word	0x08015788
 8003528:	0801452c 	.word	0x0801452c
 800352c:	08014538 	.word	0x08014538
 8003530:	08014544 	.word	0x08014544

08003534 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 800353a:	2015      	movs	r0, #21
 800353c:	f004 fd78 	bl	8008030 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003540:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003544:	f7fe fcd8 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003548:	485c      	ldr	r0, [pc, #368]	; (80036bc <showControlPanel+0x188>)
 800354a:	f7fe f8d1 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 800354e:	495c      	ldr	r1, [pc, #368]	; (80036c0 <showControlPanel+0x18c>)
 8003550:	485c      	ldr	r0, [pc, #368]	; (80036c4 <showControlPanel+0x190>)
 8003552:	f00d f93b 	bl	80107cc <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003556:	f24c 6318 	movw	r3, #50712	; 0xc618
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2300      	movs	r3, #0
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	231f      	movs	r3, #31
 8003562:	220a      	movs	r2, #10
 8003564:	2123      	movs	r1, #35	; 0x23
 8003566:	4857      	ldr	r0, [pc, #348]	; (80036c4 <showControlPanel+0x190>)
 8003568:	f7fe fadc 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800356c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2329      	movs	r3, #41	; 0x29
 8003574:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003578:	2129      	movs	r1, #41	; 0x29
 800357a:	2000      	movs	r0, #0
 800357c:	f7fd fe08 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003580:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	232b      	movs	r3, #43	; 0x2b
 8003588:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800358c:	212b      	movs	r1, #43	; 0x2b
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd fdfe 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8003594:	494c      	ldr	r1, [pc, #304]	; (80036c8 <showControlPanel+0x194>)
 8003596:	484b      	ldr	r0, [pc, #300]	; (80036c4 <showControlPanel+0x190>)
 8003598:	f00d f918 	bl	80107cc <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800359c:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2300      	movs	r3, #0
 80035a8:	223c      	movs	r2, #60	; 0x3c
 80035aa:	2114      	movs	r1, #20
 80035ac:	4845      	ldr	r0, [pc, #276]	; (80036c4 <showControlPanel+0x190>)
 80035ae:	f7fe fab9 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 80035b2:	4946      	ldr	r1, [pc, #280]	; (80036cc <showControlPanel+0x198>)
 80035b4:	4843      	ldr	r0, [pc, #268]	; (80036c4 <showControlPanel+0x190>)
 80035b6:	f00d f909 	bl	80107cc <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	2301      	movs	r3, #1
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2300      	movs	r3, #0
 80035c6:	225a      	movs	r2, #90	; 0x5a
 80035c8:	2114      	movs	r1, #20
 80035ca:	483e      	ldr	r0, [pc, #248]	; (80036c4 <showControlPanel+0x190>)
 80035cc:	f7fe faaa 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 80035d0:	493f      	ldr	r1, [pc, #252]	; (80036d0 <showControlPanel+0x19c>)
 80035d2:	483c      	ldr	r0, [pc, #240]	; (80036c4 <showControlPanel+0x190>)
 80035d4:	f00d f8fa 	bl	80107cc <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80035d8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	2300      	movs	r3, #0
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2300      	movs	r3, #0
 80035e4:	2278      	movs	r2, #120	; 0x78
 80035e6:	2114      	movs	r1, #20
 80035e8:	4836      	ldr	r0, [pc, #216]	; (80036c4 <showControlPanel+0x190>)
 80035ea:	f7fe fa9b 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 80035ee:	4939      	ldr	r1, [pc, #228]	; (80036d4 <showControlPanel+0x1a0>)
 80035f0:	4834      	ldr	r0, [pc, #208]	; (80036c4 <showControlPanel+0x190>)
 80035f2:	f00d f8eb 	bl	80107cc <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80035f6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	2300      	movs	r3, #0
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	2296      	movs	r2, #150	; 0x96
 8003604:	2114      	movs	r1, #20
 8003606:	482f      	ldr	r0, [pc, #188]	; (80036c4 <showControlPanel+0x190>)
 8003608:	f7fe fa8c 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 800360c:	4832      	ldr	r0, [pc, #200]	; (80036d8 <showControlPanel+0x1a4>)
 800360e:	f7fe f86f 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003612:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2305      	movs	r3, #5
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2314      	movs	r3, #20
 800361e:	225f      	movs	r2, #95	; 0x5f
 8003620:	21d8      	movs	r1, #216	; 0xd8
 8003622:	20dc      	movs	r0, #220	; 0xdc
 8003624:	f7fe f813 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003628:	492c      	ldr	r1, [pc, #176]	; (80036dc <showControlPanel+0x1a8>)
 800362a:	4826      	ldr	r0, [pc, #152]	; (80036c4 <showControlPanel+0x190>)
 800362c:	f00d f8ce 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003630:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	2300      	movs	r3, #0
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2300      	movs	r3, #0
 800363c:	22da      	movs	r2, #218	; 0xda
 800363e:	21df      	movs	r1, #223	; 0xdf
 8003640:	4820      	ldr	r0, [pc, #128]	; (80036c4 <showControlPanel+0x190>)
 8003642:	f7fe fa6f 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003646:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	2305      	movs	r3, #5
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2314      	movs	r3, #20
 8003652:	2264      	movs	r2, #100	; 0x64
 8003654:	21d8      	movs	r1, #216	; 0xd8
 8003656:	200a      	movs	r0, #10
 8003658:	f7fd fff9 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 800365c:	4920      	ldr	r1, [pc, #128]	; (80036e0 <showControlPanel+0x1ac>)
 800365e:	4819      	ldr	r0, [pc, #100]	; (80036c4 <showControlPanel+0x190>)
 8003660:	f00d f8b4 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003664:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	2300      	movs	r3, #0
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2300      	movs	r3, #0
 8003670:	22da      	movs	r2, #218	; 0xda
 8003672:	2114      	movs	r1, #20
 8003674:	4813      	ldr	r0, [pc, #76]	; (80036c4 <showControlPanel+0x190>)
 8003676:	f7fe fa55 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800367a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	2305      	movs	r3, #5
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2314      	movs	r3, #20
 8003686:	225a      	movs	r2, #90	; 0x5a
 8003688:	21d8      	movs	r1, #216	; 0xd8
 800368a:	2078      	movs	r0, #120	; 0x78
 800368c:	f7fd ffdf 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8003690:	4914      	ldr	r1, [pc, #80]	; (80036e4 <showControlPanel+0x1b0>)
 8003692:	480c      	ldr	r0, [pc, #48]	; (80036c4 <showControlPanel+0x190>)
 8003694:	f00d f89a 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003698:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2300      	movs	r3, #0
 80036a4:	22da      	movs	r2, #218	; 0xda
 80036a6:	217e      	movs	r1, #126	; 0x7e
 80036a8:	4806      	ldr	r0, [pc, #24]	; (80036c4 <showControlPanel+0x190>)
 80036aa:	f7fe fa3b 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80036ae:	4803      	ldr	r0, [pc, #12]	; (80036bc <showControlPanel+0x188>)
 80036b0:	f7fe f81e 	bl	80016f0 <EF_SetFont>


}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	08017700 	.word	0x08017700
 80036c0:	0801454c 	.word	0x0801454c
 80036c4:	200002f0 	.word	0x200002f0
 80036c8:	08014560 	.word	0x08014560
 80036cc:	08014574 	.word	0x08014574
 80036d0:	08014588 	.word	0x08014588
 80036d4:	0801459c 	.word	0x0801459c
 80036d8:	08015788 	.word	0x08015788
 80036dc:	080145b0 	.word	0x080145b0
 80036e0:	080145bc 	.word	0x080145bc
 80036e4:	080145c4 	.word	0x080145c4

080036e8 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80036ee:	2016      	movs	r0, #22
 80036f0:	f004 fc9e 	bl	8008030 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80036f4:	f24c 6018 	movw	r0, #50712	; 0xc618
 80036f8:	f7fe fbfe 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80036fc:	485b      	ldr	r0, [pc, #364]	; (800386c <showLightsControlPanel+0x184>)
 80036fe:	f7fd fff7 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003702:	495b      	ldr	r1, [pc, #364]	; (8003870 <showLightsControlPanel+0x188>)
 8003704:	485b      	ldr	r0, [pc, #364]	; (8003874 <showLightsControlPanel+0x18c>)
 8003706:	f00d f861 	bl	80107cc <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800370a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	2300      	movs	r3, #0
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003718:	220a      	movs	r2, #10
 800371a:	2146      	movs	r1, #70	; 0x46
 800371c:	4855      	ldr	r0, [pc, #340]	; (8003874 <showLightsControlPanel+0x18c>)
 800371e:	f7fe fa01 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003722:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2329      	movs	r3, #41	; 0x29
 800372a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800372e:	2129      	movs	r1, #41	; 0x29
 8003730:	2000      	movs	r0, #0
 8003732:	f7fd fd2d 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003736:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	232b      	movs	r3, #43	; 0x2b
 800373e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003742:	212b      	movs	r1, #43	; 0x2b
 8003744:	2000      	movs	r0, #0
 8003746:	f7fd fd23 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 800374a:	494b      	ldr	r1, [pc, #300]	; (8003878 <showLightsControlPanel+0x190>)
 800374c:	4849      	ldr	r0, [pc, #292]	; (8003874 <showLightsControlPanel+0x18c>)
 800374e:	f00d f83d 	bl	80107cc <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003752:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	2300      	movs	r3, #0
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2300      	movs	r3, #0
 800375e:	223c      	movs	r2, #60	; 0x3c
 8003760:	2114      	movs	r1, #20
 8003762:	4844      	ldr	r0, [pc, #272]	; (8003874 <showLightsControlPanel+0x18c>)
 8003764:	f7fe f9de 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 8003768:	4944      	ldr	r1, [pc, #272]	; (800387c <showLightsControlPanel+0x194>)
 800376a:	4842      	ldr	r0, [pc, #264]	; (8003874 <showLightsControlPanel+0x18c>)
 800376c:	f00d f82e 	bl	80107cc <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003770:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	2301      	movs	r3, #1
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	2300      	movs	r3, #0
 800377c:	225a      	movs	r2, #90	; 0x5a
 800377e:	2114      	movs	r1, #20
 8003780:	483c      	ldr	r0, [pc, #240]	; (8003874 <showLightsControlPanel+0x18c>)
 8003782:	f7fe f9cf 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 8003786:	493e      	ldr	r1, [pc, #248]	; (8003880 <showLightsControlPanel+0x198>)
 8003788:	483a      	ldr	r0, [pc, #232]	; (8003874 <showLightsControlPanel+0x18c>)
 800378a:	f00d f81f 	bl	80107cc <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800378e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2300      	movs	r3, #0
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2300      	movs	r3, #0
 800379a:	2278      	movs	r2, #120	; 0x78
 800379c:	2114      	movs	r1, #20
 800379e:	4835      	ldr	r0, [pc, #212]	; (8003874 <showLightsControlPanel+0x18c>)
 80037a0:	f7fe f9c0 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 80037a4:	4937      	ldr	r1, [pc, #220]	; (8003884 <showLightsControlPanel+0x19c>)
 80037a6:	4833      	ldr	r0, [pc, #204]	; (8003874 <showLightsControlPanel+0x18c>)
 80037a8:	f00d f810 	bl	80107cc <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	2300      	movs	r3, #0
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	2300      	movs	r3, #0
 80037b8:	2296      	movs	r2, #150	; 0x96
 80037ba:	2114      	movs	r1, #20
 80037bc:	482d      	ldr	r0, [pc, #180]	; (8003874 <showLightsControlPanel+0x18c>)
 80037be:	f7fe f9b1 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80037c2:	4831      	ldr	r0, [pc, #196]	; (8003888 <showLightsControlPanel+0x1a0>)
 80037c4:	f7fd ff94 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80037c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	2305      	movs	r3, #5
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	2314      	movs	r3, #20
 80037d4:	225f      	movs	r2, #95	; 0x5f
 80037d6:	21d8      	movs	r1, #216	; 0xd8
 80037d8:	20dc      	movs	r0, #220	; 0xdc
 80037da:	f7fd ff38 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 80037de:	492b      	ldr	r1, [pc, #172]	; (800388c <showLightsControlPanel+0x1a4>)
 80037e0:	4824      	ldr	r0, [pc, #144]	; (8003874 <showLightsControlPanel+0x18c>)
 80037e2:	f00c fff3 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037e6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2300      	movs	r3, #0
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	22da      	movs	r2, #218	; 0xda
 80037f4:	21e6      	movs	r1, #230	; 0xe6
 80037f6:	481f      	ldr	r0, [pc, #124]	; (8003874 <showLightsControlPanel+0x18c>)
 80037f8:	f7fe f994 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80037fc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	2305      	movs	r3, #5
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2314      	movs	r3, #20
 8003808:	225a      	movs	r2, #90	; 0x5a
 800380a:	21d8      	movs	r1, #216	; 0xd8
 800380c:	2078      	movs	r0, #120	; 0x78
 800380e:	f7fd ff1e 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003812:	491f      	ldr	r1, [pc, #124]	; (8003890 <showLightsControlPanel+0x1a8>)
 8003814:	4817      	ldr	r0, [pc, #92]	; (8003874 <showLightsControlPanel+0x18c>)
 8003816:	f00c ffd9 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800381a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	2300      	movs	r3, #0
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2300      	movs	r3, #0
 8003826:	22da      	movs	r2, #218	; 0xda
 8003828:	217e      	movs	r1, #126	; 0x7e
 800382a:	4812      	ldr	r0, [pc, #72]	; (8003874 <showLightsControlPanel+0x18c>)
 800382c:	f7fe f97a 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003830:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	2305      	movs	r3, #5
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	2314      	movs	r3, #20
 800383c:	2264      	movs	r2, #100	; 0x64
 800383e:	21d8      	movs	r1, #216	; 0xd8
 8003840:	200a      	movs	r0, #10
 8003842:	f7fd ff04 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003846:	4913      	ldr	r1, [pc, #76]	; (8003894 <showLightsControlPanel+0x1ac>)
 8003848:	480a      	ldr	r0, [pc, #40]	; (8003874 <showLightsControlPanel+0x18c>)
 800384a:	f00c ffbf 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800384e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	2300      	movs	r3, #0
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2300      	movs	r3, #0
 800385a:	22da      	movs	r2, #218	; 0xda
 800385c:	210d      	movs	r1, #13
 800385e:	4805      	ldr	r0, [pc, #20]	; (8003874 <showLightsControlPanel+0x18c>)
 8003860:	f7fe f960 	bl	8001b24 <EF_PutString>


}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	08017700 	.word	0x08017700
 8003870:	080145d0 	.word	0x080145d0
 8003874:	200002f0 	.word	0x200002f0
 8003878:	080145e0 	.word	0x080145e0
 800387c:	080145f0 	.word	0x080145f0
 8003880:	08014600 	.word	0x08014600
 8003884:	08014610 	.word	0x08014610
 8003888:	08015788 	.word	0x08015788
 800388c:	08014620 	.word	0x08014620
 8003890:	08014628 	.word	0x08014628
 8003894:	08014634 	.word	0x08014634

08003898 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800389e:	f24c 6018 	movw	r0, #50712	; 0xc618
 80038a2:	f7fe fb29 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80038a6:	48a2      	ldr	r0, [pc, #648]	; (8003b30 <showClockSetPanel+0x298>)
 80038a8:	f7fd ff22 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 80038ac:	f7fe ff72 	bl	8002794 <DS3231_GetHour>
 80038b0:	4603      	mov	r3, r0
 80038b2:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 80038b4:	f7fe ff7a 	bl	80027ac <DS3231_GetMinute>
 80038b8:	4603      	mov	r3, r0
 80038ba:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 80038bc:	f7fe ff5e 	bl	800277c <DS3231_GetDayOfWeek>
 80038c0:	4603      	mov	r3, r0
 80038c2:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 80038c4:	499b      	ldr	r1, [pc, #620]	; (8003b34 <showClockSetPanel+0x29c>)
 80038c6:	489c      	ldr	r0, [pc, #624]	; (8003b38 <showClockSetPanel+0x2a0>)
 80038c8:	f00c ff80 	bl	80107cc <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	2300      	movs	r3, #0
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038da:	220a      	movs	r2, #10
 80038dc:	212f      	movs	r1, #47	; 0x2f
 80038de:	4896      	ldr	r0, [pc, #600]	; (8003b38 <showClockSetPanel+0x2a0>)
 80038e0:	f7fe f920 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80038e4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2329      	movs	r3, #41	; 0x29
 80038ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038f0:	2129      	movs	r1, #41	; 0x29
 80038f2:	2000      	movs	r0, #0
 80038f4:	f7fd fc4c 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80038f8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	232b      	movs	r3, #43	; 0x2b
 8003900:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003904:	212b      	movs	r1, #43	; 0x2b
 8003906:	2000      	movs	r0, #0
 8003908:	f7fd fc42 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	461a      	mov	r2, r3
 8003910:	498a      	ldr	r1, [pc, #552]	; (8003b3c <showClockSetPanel+0x2a4>)
 8003912:	4889      	ldr	r0, [pc, #548]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003914:	f00c ff5a 	bl	80107cc <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003918:	f24c 6318 	movw	r3, #50712	; 0xc618
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	2300      	movs	r3, #0
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	2246      	movs	r2, #70	; 0x46
 8003926:	2114      	movs	r1, #20
 8003928:	4883      	ldr	r0, [pc, #524]	; (8003b38 <showClockSetPanel+0x2a0>)
 800392a:	f7fe f8fb 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 800392e:	79bb      	ldrb	r3, [r7, #6]
 8003930:	461a      	mov	r2, r3
 8003932:	4983      	ldr	r1, [pc, #524]	; (8003b40 <showClockSetPanel+0x2a8>)
 8003934:	4880      	ldr	r0, [pc, #512]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003936:	f00c ff49 	bl	80107cc <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800393a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	2301      	movs	r3, #1
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	226e      	movs	r2, #110	; 0x6e
 8003948:	2114      	movs	r1, #20
 800394a:	487b      	ldr	r0, [pc, #492]	; (8003b38 <showClockSetPanel+0x2a0>)
 800394c:	f7fe f8ea 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003950:	797b      	ldrb	r3, [r7, #5]
 8003952:	461a      	mov	r2, r3
 8003954:	497b      	ldr	r1, [pc, #492]	; (8003b44 <showClockSetPanel+0x2ac>)
 8003956:	4878      	ldr	r0, [pc, #480]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003958:	f00c ff38 	bl	80107cc <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800395c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	2301      	movs	r3, #1
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2300      	movs	r3, #0
 8003968:	2296      	movs	r2, #150	; 0x96
 800396a:	2114      	movs	r1, #20
 800396c:	4872      	ldr	r0, [pc, #456]	; (8003b38 <showClockSetPanel+0x2a0>)
 800396e:	f7fe f8d9 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003972:	4875      	ldr	r0, [pc, #468]	; (8003b48 <showClockSetPanel+0x2b0>)
 8003974:	f7fd febc 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003978:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	2305      	movs	r3, #5
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2315      	movs	r3, #21
 8003984:	221e      	movs	r2, #30
 8003986:	214b      	movs	r1, #75	; 0x4b
 8003988:	20f0      	movs	r0, #240	; 0xf0
 800398a:	f7fd fe60 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 800398e:	496f      	ldr	r1, [pc, #444]	; (8003b4c <showClockSetPanel+0x2b4>)
 8003990:	4869      	ldr	r0, [pc, #420]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003992:	f00c ff1b 	bl	80107cc <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003996:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2300      	movs	r3, #0
 80039a2:	224d      	movs	r2, #77	; 0x4d
 80039a4:	21f3      	movs	r1, #243	; 0xf3
 80039a6:	4864      	ldr	r0, [pc, #400]	; (8003b38 <showClockSetPanel+0x2a0>)
 80039a8:	f7fe f8bc 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80039ac:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	2305      	movs	r3, #5
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	2315      	movs	r3, #21
 80039b8:	221e      	movs	r2, #30
 80039ba:	214b      	movs	r1, #75	; 0x4b
 80039bc:	f44f 708c 	mov.w	r0, #280	; 0x118
 80039c0:	f7fd fe45 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 80039c4:	4962      	ldr	r1, [pc, #392]	; (8003b50 <showClockSetPanel+0x2b8>)
 80039c6:	485c      	ldr	r0, [pc, #368]	; (8003b38 <showClockSetPanel+0x2a0>)
 80039c8:	f00c ff00 	bl	80107cc <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80039cc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2300      	movs	r3, #0
 80039d8:	224d      	movs	r2, #77	; 0x4d
 80039da:	f240 111d 	movw	r1, #285	; 0x11d
 80039de:	4856      	ldr	r0, [pc, #344]	; (8003b38 <showClockSetPanel+0x2a0>)
 80039e0:	f7fe f8a0 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80039e4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	2305      	movs	r3, #5
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2315      	movs	r3, #21
 80039f0:	221e      	movs	r2, #30
 80039f2:	2173      	movs	r1, #115	; 0x73
 80039f4:	20f0      	movs	r0, #240	; 0xf0
 80039f6:	f7fd fe2a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80039fa:	4954      	ldr	r1, [pc, #336]	; (8003b4c <showClockSetPanel+0x2b4>)
 80039fc:	484e      	ldr	r0, [pc, #312]	; (8003b38 <showClockSetPanel+0x2a0>)
 80039fe:	f00c fee5 	bl	80107cc <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003a02:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2275      	movs	r2, #117	; 0x75
 8003a10:	21f5      	movs	r1, #245	; 0xf5
 8003a12:	4849      	ldr	r0, [pc, #292]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003a14:	f7fe f886 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003a18:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	2305      	movs	r3, #5
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2315      	movs	r3, #21
 8003a24:	221e      	movs	r2, #30
 8003a26:	2173      	movs	r1, #115	; 0x73
 8003a28:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003a2c:	f7fd fe0f 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003a30:	4948      	ldr	r1, [pc, #288]	; (8003b54 <showClockSetPanel+0x2bc>)
 8003a32:	4841      	ldr	r0, [pc, #260]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003a34:	f00c feca 	bl	80107cc <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003a38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2300      	movs	r3, #0
 8003a44:	2275      	movs	r2, #117	; 0x75
 8003a46:	f240 111b 	movw	r1, #283	; 0x11b
 8003a4a:	483b      	ldr	r0, [pc, #236]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003a4c:	f7fe f86a 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003a50:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	2305      	movs	r3, #5
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2315      	movs	r3, #21
 8003a5c:	221e      	movs	r2, #30
 8003a5e:	219b      	movs	r1, #155	; 0x9b
 8003a60:	20f0      	movs	r0, #240	; 0xf0
 8003a62:	f7fd fdf4 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003a66:	493c      	ldr	r1, [pc, #240]	; (8003b58 <showClockSetPanel+0x2c0>)
 8003a68:	4833      	ldr	r0, [pc, #204]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003a6a:	f00c feaf 	bl	80107cc <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003a6e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	2300      	movs	r3, #0
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	229d      	movs	r2, #157	; 0x9d
 8003a7c:	21f3      	movs	r1, #243	; 0xf3
 8003a7e:	482e      	ldr	r0, [pc, #184]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003a80:	f7fe f850 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003a84:	4830      	ldr	r0, [pc, #192]	; (8003b48 <showClockSetPanel+0x2b0>)
 8003a86:	f7fd fe33 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a8a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	2305      	movs	r3, #5
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2314      	movs	r3, #20
 8003a96:	225f      	movs	r2, #95	; 0x5f
 8003a98:	21d8      	movs	r1, #216	; 0xd8
 8003a9a:	20dc      	movs	r0, #220	; 0xdc
 8003a9c:	f7fd fdd7 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003aa0:	492e      	ldr	r1, [pc, #184]	; (8003b5c <showClockSetPanel+0x2c4>)
 8003aa2:	4825      	ldr	r0, [pc, #148]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003aa4:	f00c fe92 	bl	80107cc <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003aa8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	22da      	movs	r2, #218	; 0xda
 8003ab6:	21e6      	movs	r1, #230	; 0xe6
 8003ab8:	481f      	ldr	r0, [pc, #124]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003aba:	f7fe f833 	bl	8001b24 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003abe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	2305      	movs	r3, #5
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2316      	movs	r3, #22
 8003aca:	22aa      	movs	r2, #170	; 0xaa
 8003acc:	21be      	movs	r1, #190	; 0xbe
 8003ace:	2050      	movs	r0, #80	; 0x50
 8003ad0:	f7fd fdbd 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003ad4:	4922      	ldr	r1, [pc, #136]	; (8003b60 <showClockSetPanel+0x2c8>)
 8003ad6:	4818      	ldr	r0, [pc, #96]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003ad8:	f00c fe78 	bl	80107cc <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003adc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	22c1      	movs	r2, #193	; 0xc1
 8003aea:	2164      	movs	r1, #100	; 0x64
 8003aec:	4812      	ldr	r0, [pc, #72]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003aee:	f7fe f819 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003af2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	2305      	movs	r3, #5
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2314      	movs	r3, #20
 8003afe:	2264      	movs	r2, #100	; 0x64
 8003b00:	21d8      	movs	r1, #216	; 0xd8
 8003b02:	200a      	movs	r0, #10
 8003b04:	f7fd fda3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003b08:	4916      	ldr	r1, [pc, #88]	; (8003b64 <showClockSetPanel+0x2cc>)
 8003b0a:	480b      	ldr	r0, [pc, #44]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003b0c:	f00c fe5e 	bl	80107cc <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	2300      	movs	r3, #0
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	22da      	movs	r2, #218	; 0xda
 8003b1e:	210d      	movs	r1, #13
 8003b20:	4805      	ldr	r0, [pc, #20]	; (8003b38 <showClockSetPanel+0x2a0>)
 8003b22:	f7fd ffff 	bl	8001b24 <EF_PutString>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	08017700 	.word	0x08017700
 8003b34:	08014640 	.word	0x08014640
 8003b38:	200002f0 	.word	0x200002f0
 8003b3c:	08014650 	.word	0x08014650
 8003b40:	0801465c 	.word	0x0801465c
 8003b44:	0801466c 	.word	0x0801466c
 8003b48:	08015788 	.word	0x08015788
 8003b4c:	0801467c 	.word	0x0801467c
 8003b50:	08014680 	.word	0x08014680
 8003b54:	08014684 	.word	0x08014684
 8003b58:	08014688 	.word	0x08014688
 8003b5c:	0801468c 	.word	0x0801468c
 8003b60:	08014694 	.word	0x08014694
 8003b64:	080146a4 	.word	0x080146a4

08003b68 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003b6e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003b72:	f7fe f9c1 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003b76:	487a      	ldr	r0, [pc, #488]	; (8003d60 <showPreparedActivitiesPanel+0x1f8>)
 8003b78:	f7fd fdba 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003b7c:	4979      	ldr	r1, [pc, #484]	; (8003d64 <showPreparedActivitiesPanel+0x1fc>)
 8003b7e:	487a      	ldr	r0, [pc, #488]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003b80:	f00c fe24 	bl	80107cc <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b84:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	231f      	movs	r3, #31
 8003b90:	220a      	movs	r2, #10
 8003b92:	212f      	movs	r1, #47	; 0x2f
 8003b94:	4874      	ldr	r0, [pc, #464]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003b96:	f7fd ffc5 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003b9a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	2329      	movs	r3, #41	; 0x29
 8003ba2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ba6:	2129      	movs	r1, #41	; 0x29
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f7fd faf1 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003bae:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	232b      	movs	r3, #43	; 0x2b
 8003bb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003bba:	212b      	movs	r1, #43	; 0x2b
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f7fd fae7 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003bc2:	486a      	ldr	r0, [pc, #424]	; (8003d6c <showPreparedActivitiesPanel+0x204>)
 8003bc4:	f7fd fd94 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003bc8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2305      	movs	r3, #5
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2314      	movs	r3, #20
 8003bd4:	2264      	movs	r2, #100	; 0x64
 8003bd6:	21d8      	movs	r1, #216	; 0xd8
 8003bd8:	200a      	movs	r0, #10
 8003bda:	f7fd fd38 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003bde:	4964      	ldr	r1, [pc, #400]	; (8003d70 <showPreparedActivitiesPanel+0x208>)
 8003be0:	4861      	ldr	r0, [pc, #388]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003be2:	f00c fdf3 	bl	80107cc <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003be6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	2300      	movs	r3, #0
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	22da      	movs	r2, #218	; 0xda
 8003bf4:	210d      	movs	r1, #13
 8003bf6:	485c      	ldr	r0, [pc, #368]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003bf8:	f7fd ff94 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003bfc:	4b5d      	ldr	r3, [pc, #372]	; (8003d74 <showPreparedActivitiesPanel+0x20c>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d029      	beq.n	8003c58 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003c04:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	230a      	movs	r3, #10
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2328      	movs	r3, #40	; 0x28
 8003c10:	2278      	movs	r2, #120	; 0x78
 8003c12:	213c      	movs	r1, #60	; 0x3c
 8003c14:	2064      	movs	r0, #100	; 0x64
 8003c16:	f7fd fd1a 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003c1a:	4957      	ldr	r1, [pc, #348]	; (8003d78 <showPreparedActivitiesPanel+0x210>)
 8003c1c:	4852      	ldr	r0, [pc, #328]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003c1e:	f00c fdd5 	bl	80107cc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003c22:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	223e      	movs	r2, #62	; 0x3e
 8003c30:	2177      	movs	r1, #119	; 0x77
 8003c32:	484d      	ldr	r0, [pc, #308]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003c34:	f7fd ff76 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003c38:	4950      	ldr	r1, [pc, #320]	; (8003d7c <showPreparedActivitiesPanel+0x214>)
 8003c3a:	484b      	ldr	r0, [pc, #300]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003c3c:	f00c fdc6 	bl	80107cc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003c40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	2300      	movs	r3, #0
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2250      	movs	r2, #80	; 0x50
 8003c4e:	2193      	movs	r1, #147	; 0x93
 8003c50:	4845      	ldr	r0, [pc, #276]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003c52:	f7fd ff67 	bl	8001b24 <EF_PutString>
 8003c56:	e028      	b.n	8003caa <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003c58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	230a      	movs	r3, #10
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	2328      	movs	r3, #40	; 0x28
 8003c64:	2278      	movs	r2, #120	; 0x78
 8003c66:	213c      	movs	r1, #60	; 0x3c
 8003c68:	2064      	movs	r0, #100	; 0x64
 8003c6a:	f7fd fcf0 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003c6e:	4942      	ldr	r1, [pc, #264]	; (8003d78 <showPreparedActivitiesPanel+0x210>)
 8003c70:	483d      	ldr	r0, [pc, #244]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003c72:	f00c fdab 	bl	80107cc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003c76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2300      	movs	r3, #0
 8003c82:	223e      	movs	r2, #62	; 0x3e
 8003c84:	2177      	movs	r1, #119	; 0x77
 8003c86:	4838      	ldr	r0, [pc, #224]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003c88:	f7fd ff4c 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003c8c:	493c      	ldr	r1, [pc, #240]	; (8003d80 <showPreparedActivitiesPanel+0x218>)
 8003c8e:	4836      	ldr	r0, [pc, #216]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003c90:	f00c fd9c 	bl	80107cc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003c94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2250      	movs	r2, #80	; 0x50
 8003ca2:	2193      	movs	r1, #147	; 0x93
 8003ca4:	4830      	ldr	r0, [pc, #192]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003ca6:	f7fd ff3d 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003caa:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <showPreparedActivitiesPanel+0x20c>)
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d029      	beq.n	8003d06 <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003cb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	230a      	movs	r3, #10
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2328      	movs	r3, #40	; 0x28
 8003cbe:	2278      	movs	r2, #120	; 0x78
 8003cc0:	2178      	movs	r1, #120	; 0x78
 8003cc2:	2064      	movs	r0, #100	; 0x64
 8003cc4:	f7fd fcc3 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003cc8:	492e      	ldr	r1, [pc, #184]	; (8003d84 <showPreparedActivitiesPanel+0x21c>)
 8003cca:	4827      	ldr	r0, [pc, #156]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003ccc:	f00c fd7e 	bl	80107cc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003cd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	227a      	movs	r2, #122	; 0x7a
 8003cde:	2169      	movs	r1, #105	; 0x69
 8003ce0:	4821      	ldr	r0, [pc, #132]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003ce2:	f7fd ff1f 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003ce6:	4925      	ldr	r1, [pc, #148]	; (8003d7c <showPreparedActivitiesPanel+0x214>)
 8003ce8:	481f      	ldr	r0, [pc, #124]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003cea:	f00c fd6f 	bl	80107cc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003cee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	228c      	movs	r2, #140	; 0x8c
 8003cfc:	2193      	movs	r1, #147	; 0x93
 8003cfe:	481a      	ldr	r0, [pc, #104]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003d00:	f7fd ff10 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003d04:	e028      	b.n	8003d58 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003d06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	230a      	movs	r3, #10
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2328      	movs	r3, #40	; 0x28
 8003d12:	2278      	movs	r2, #120	; 0x78
 8003d14:	2178      	movs	r1, #120	; 0x78
 8003d16:	2064      	movs	r0, #100	; 0x64
 8003d18:	f7fd fc99 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003d1c:	4919      	ldr	r1, [pc, #100]	; (8003d84 <showPreparedActivitiesPanel+0x21c>)
 8003d1e:	4812      	ldr	r0, [pc, #72]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003d20:	f00c fd54 	bl	80107cc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003d24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	227a      	movs	r2, #122	; 0x7a
 8003d32:	2169      	movs	r1, #105	; 0x69
 8003d34:	480c      	ldr	r0, [pc, #48]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003d36:	f7fd fef5 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003d3a:	4911      	ldr	r1, [pc, #68]	; (8003d80 <showPreparedActivitiesPanel+0x218>)
 8003d3c:	480a      	ldr	r0, [pc, #40]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003d3e:	f00c fd45 	bl	80107cc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003d42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	228c      	movs	r2, #140	; 0x8c
 8003d50:	2193      	movs	r1, #147	; 0x93
 8003d52:	4805      	ldr	r0, [pc, #20]	; (8003d68 <showPreparedActivitiesPanel+0x200>)
 8003d54:	f7fd fee6 	bl	8001b24 <EF_PutString>
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	08017700 	.word	0x08017700
 8003d64:	080146ac 	.word	0x080146ac
 8003d68:	200002f0 	.word	0x200002f0
 8003d6c:	08015788 	.word	0x08015788
 8003d70:	080146a4 	.word	0x080146a4
 8003d74:	200002a4 	.word	0x200002a4
 8003d78:	080146bc 	.word	0x080146bc
 8003d7c:	080146c8 	.word	0x080146c8
 8003d80:	080146cc 	.word	0x080146cc
 8003d84:	080146d0 	.word	0x080146d0

08003d88 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003d8e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003d92:	f7fe f8b1 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003d96:	48c7      	ldr	r0, [pc, #796]	; (80040b4 <showWSLedPanel+0x32c>)
 8003d98:	f7fd fcaa 	bl	80016f0 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003d9c:	49c6      	ldr	r1, [pc, #792]	; (80040b8 <showWSLedPanel+0x330>)
 8003d9e:	48c7      	ldr	r0, [pc, #796]	; (80040bc <showWSLedPanel+0x334>)
 8003da0:	f00c fd14 	bl	80107cc <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003da4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	2300      	movs	r3, #0
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	231f      	movs	r3, #31
 8003db0:	220a      	movs	r2, #10
 8003db2:	2146      	movs	r1, #70	; 0x46
 8003db4:	48c1      	ldr	r0, [pc, #772]	; (80040bc <showWSLedPanel+0x334>)
 8003db6:	f7fd feb5 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003dba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2329      	movs	r3, #41	; 0x29
 8003dc2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dc6:	2129      	movs	r1, #41	; 0x29
 8003dc8:	2000      	movs	r0, #0
 8003dca:	f7fd f9e1 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003dce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	232b      	movs	r3, #43	; 0x2b
 8003dd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dda:	212b      	movs	r1, #43	; 0x2b
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7fd f9d7 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 8003de2:	4bb7      	ldr	r3, [pc, #732]	; (80040c0 <showWSLedPanel+0x338>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	49b6      	ldr	r1, [pc, #728]	; (80040c4 <showWSLedPanel+0x33c>)
 8003dea:	48b4      	ldr	r0, [pc, #720]	; (80040bc <showWSLedPanel+0x334>)
 8003dec:	f00c fcee 	bl	80107cc <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003df0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	223c      	movs	r2, #60	; 0x3c
 8003dfe:	2114      	movs	r1, #20
 8003e00:	48ae      	ldr	r0, [pc, #696]	; (80040bc <showWSLedPanel+0x334>)
 8003e02:	f7fd fe8f 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8003e06:	49b0      	ldr	r1, [pc, #704]	; (80040c8 <showWSLedPanel+0x340>)
 8003e08:	48ac      	ldr	r0, [pc, #688]	; (80040bc <showWSLedPanel+0x334>)
 8003e0a:	f00c fcdf 	bl	80107cc <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003e0e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	2300      	movs	r3, #0
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	225a      	movs	r2, #90	; 0x5a
 8003e1c:	2114      	movs	r1, #20
 8003e1e:	48a7      	ldr	r0, [pc, #668]	; (80040bc <showWSLedPanel+0x334>)
 8003e20:	f7fd fe80 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8003e24:	49a9      	ldr	r1, [pc, #676]	; (80040cc <showWSLedPanel+0x344>)
 8003e26:	48a5      	ldr	r0, [pc, #660]	; (80040bc <showWSLedPanel+0x334>)
 8003e28:	f00c fcd0 	bl	80107cc <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003e2c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	2300      	movs	r3, #0
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	2300      	movs	r3, #0
 8003e38:	2278      	movs	r2, #120	; 0x78
 8003e3a:	2114      	movs	r1, #20
 8003e3c:	489f      	ldr	r0, [pc, #636]	; (80040bc <showWSLedPanel+0x334>)
 8003e3e:	f7fd fe71 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 8003e42:	48a3      	ldr	r0, [pc, #652]	; (80040d0 <showWSLedPanel+0x348>)
 8003e44:	f7fd fc54 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e48:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	2305      	movs	r3, #5
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	2315      	movs	r3, #21
 8003e54:	221e      	movs	r2, #30
 8003e56:	2141      	movs	r1, #65	; 0x41
 8003e58:	20d9      	movs	r0, #217	; 0xd9
 8003e5a:	f7fd fbf8 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003e5e:	499d      	ldr	r1, [pc, #628]	; (80040d4 <showWSLedPanel+0x34c>)
 8003e60:	4896      	ldr	r0, [pc, #600]	; (80040bc <showWSLedPanel+0x334>)
 8003e62:	f00c fcb3 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e66:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2300      	movs	r3, #0
 8003e72:	2243      	movs	r2, #67	; 0x43
 8003e74:	21df      	movs	r1, #223	; 0xdf
 8003e76:	4891      	ldr	r0, [pc, #580]	; (80040bc <showWSLedPanel+0x334>)
 8003e78:	f7fd fe54 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e7c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	2305      	movs	r3, #5
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2315      	movs	r3, #21
 8003e88:	221e      	movs	r2, #30
 8003e8a:	2141      	movs	r1, #65	; 0x41
 8003e8c:	20fc      	movs	r0, #252	; 0xfc
 8003e8e:	f7fd fbde 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003e92:	4991      	ldr	r1, [pc, #580]	; (80040d8 <showWSLedPanel+0x350>)
 8003e94:	4889      	ldr	r0, [pc, #548]	; (80040bc <showWSLedPanel+0x334>)
 8003e96:	f00c fc99 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e9a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	2243      	movs	r2, #67	; 0x43
 8003ea8:	f240 1101 	movw	r1, #257	; 0x101
 8003eac:	4883      	ldr	r0, [pc, #524]	; (80040bc <showWSLedPanel+0x334>)
 8003eae:	f7fd fe39 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003eb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	2305      	movs	r3, #5
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2315      	movs	r3, #21
 8003ebe:	221e      	movs	r2, #30
 8003ec0:	2141      	movs	r1, #65	; 0x41
 8003ec2:	f240 101f 	movw	r0, #287	; 0x11f
 8003ec6:	f7fd fbc2 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8003eca:	4984      	ldr	r1, [pc, #528]	; (80040dc <showWSLedPanel+0x354>)
 8003ecc:	487b      	ldr	r0, [pc, #492]	; (80040bc <showWSLedPanel+0x334>)
 8003ece:	f00c fc7d 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ed2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2300      	movs	r3, #0
 8003ede:	2243      	movs	r2, #67	; 0x43
 8003ee0:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003ee4:	4875      	ldr	r0, [pc, #468]	; (80040bc <showWSLedPanel+0x334>)
 8003ee6:	f7fd fe1d 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	2305      	movs	r3, #5
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	2315      	movs	r3, #21
 8003ef6:	2228      	movs	r2, #40	; 0x28
 8003ef8:	215f      	movs	r1, #95	; 0x5f
 8003efa:	2096      	movs	r0, #150	; 0x96
 8003efc:	f7fd fba7 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8003f00:	4977      	ldr	r1, [pc, #476]	; (80040e0 <showWSLedPanel+0x358>)
 8003f02:	486e      	ldr	r0, [pc, #440]	; (80040bc <showWSLedPanel+0x334>)
 8003f04:	f00c fc62 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003f08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	2300      	movs	r3, #0
 8003f14:	2261      	movs	r2, #97	; 0x61
 8003f16:	219b      	movs	r1, #155	; 0x9b
 8003f18:	4868      	ldr	r0, [pc, #416]	; (80040bc <showWSLedPanel+0x334>)
 8003f1a:	f7fd fe03 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003f1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	2305      	movs	r3, #5
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2315      	movs	r3, #21
 8003f2a:	2228      	movs	r2, #40	; 0x28
 8003f2c:	215f      	movs	r1, #95	; 0x5f
 8003f2e:	20ca      	movs	r0, #202	; 0xca
 8003f30:	f7fd fb8d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8003f34:	496b      	ldr	r1, [pc, #428]	; (80040e4 <showWSLedPanel+0x35c>)
 8003f36:	4861      	ldr	r0, [pc, #388]	; (80040bc <showWSLedPanel+0x334>)
 8003f38:	f00c fc48 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	2300      	movs	r3, #0
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	2300      	movs	r3, #0
 8003f48:	2261      	movs	r2, #97	; 0x61
 8003f4a:	21d2      	movs	r1, #210	; 0xd2
 8003f4c:	485b      	ldr	r0, [pc, #364]	; (80040bc <showWSLedPanel+0x334>)
 8003f4e:	f7fd fde9 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	2305      	movs	r3, #5
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2315      	movs	r3, #21
 8003f5e:	2228      	movs	r2, #40	; 0x28
 8003f60:	215f      	movs	r1, #95	; 0x5f
 8003f62:	20fe      	movs	r0, #254	; 0xfe
 8003f64:	f7fd fb73 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003f68:	495f      	ldr	r1, [pc, #380]	; (80040e8 <showWSLedPanel+0x360>)
 8003f6a:	4854      	ldr	r0, [pc, #336]	; (80040bc <showWSLedPanel+0x334>)
 8003f6c:	f00c fc2e 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	2300      	movs	r3, #0
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	2261      	movs	r2, #97	; 0x61
 8003f7e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003f82:	484e      	ldr	r0, [pc, #312]	; (80040bc <showWSLedPanel+0x334>)
 8003f84:	f7fd fdce 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003f88:	231f      	movs	r3, #31
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	2305      	movs	r3, #5
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	2315      	movs	r3, #21
 8003f92:	2228      	movs	r2, #40	; 0x28
 8003f94:	217d      	movs	r1, #125	; 0x7d
 8003f96:	2096      	movs	r0, #150	; 0x96
 8003f98:	f7fd fb59 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8003f9c:	4950      	ldr	r1, [pc, #320]	; (80040e0 <showWSLedPanel+0x358>)
 8003f9e:	4847      	ldr	r0, [pc, #284]	; (80040bc <showWSLedPanel+0x334>)
 8003fa0:	f00c fc14 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003fa4:	231f      	movs	r3, #31
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2300      	movs	r3, #0
 8003fae:	227f      	movs	r2, #127	; 0x7f
 8003fb0:	219b      	movs	r1, #155	; 0x9b
 8003fb2:	4842      	ldr	r0, [pc, #264]	; (80040bc <showWSLedPanel+0x334>)
 8003fb4:	f7fd fdb6 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003fb8:	231f      	movs	r3, #31
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	2305      	movs	r3, #5
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	2315      	movs	r3, #21
 8003fc2:	2228      	movs	r2, #40	; 0x28
 8003fc4:	217d      	movs	r1, #125	; 0x7d
 8003fc6:	20ca      	movs	r0, #202	; 0xca
 8003fc8:	f7fd fb41 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8003fcc:	4945      	ldr	r1, [pc, #276]	; (80040e4 <showWSLedPanel+0x35c>)
 8003fce:	483b      	ldr	r0, [pc, #236]	; (80040bc <showWSLedPanel+0x334>)
 8003fd0:	f00c fbfc 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003fd4:	231f      	movs	r3, #31
 8003fd6:	9301      	str	r3, [sp, #4]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	227f      	movs	r2, #127	; 0x7f
 8003fe0:	21d2      	movs	r1, #210	; 0xd2
 8003fe2:	4836      	ldr	r0, [pc, #216]	; (80040bc <showWSLedPanel+0x334>)
 8003fe4:	f7fd fd9e 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003fe8:	231f      	movs	r3, #31
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	2305      	movs	r3, #5
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2315      	movs	r3, #21
 8003ff2:	2228      	movs	r2, #40	; 0x28
 8003ff4:	217d      	movs	r1, #125	; 0x7d
 8003ff6:	20fe      	movs	r0, #254	; 0xfe
 8003ff8:	f7fd fb29 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003ffc:	493a      	ldr	r1, [pc, #232]	; (80040e8 <showWSLedPanel+0x360>)
 8003ffe:	482f      	ldr	r0, [pc, #188]	; (80040bc <showWSLedPanel+0x334>)
 8004000:	f00c fbe4 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004004:	231f      	movs	r3, #31
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	2300      	movs	r3, #0
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2300      	movs	r3, #0
 800400e:	227f      	movs	r2, #127	; 0x7f
 8004010:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004014:	4829      	ldr	r0, [pc, #164]	; (80040bc <showWSLedPanel+0x334>)
 8004016:	f7fd fd85 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 800401a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	2305      	movs	r3, #5
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2315      	movs	r3, #21
 8004026:	2250      	movs	r2, #80	; 0x50
 8004028:	219c      	movs	r1, #156	; 0x9c
 800402a:	2014      	movs	r0, #20
 800402c:	f7fd fb0f 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8004030:	492e      	ldr	r1, [pc, #184]	; (80040ec <showWSLedPanel+0x364>)
 8004032:	4822      	ldr	r0, [pc, #136]	; (80040bc <showWSLedPanel+0x334>)
 8004034:	f00c fbca 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8004038:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	2300      	movs	r3, #0
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	229e      	movs	r2, #158	; 0x9e
 8004046:	211c      	movs	r1, #28
 8004048:	481c      	ldr	r0, [pc, #112]	; (80040bc <showWSLedPanel+0x334>)
 800404a:	f7fd fd6b 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800404e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	2305      	movs	r3, #5
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2315      	movs	r3, #21
 800405a:	2250      	movs	r2, #80	; 0x50
 800405c:	219c      	movs	r1, #156	; 0x9c
 800405e:	2078      	movs	r0, #120	; 0x78
 8004060:	f7fd faf5 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 8004064:	4922      	ldr	r1, [pc, #136]	; (80040f0 <showWSLedPanel+0x368>)
 8004066:	4815      	ldr	r0, [pc, #84]	; (80040bc <showWSLedPanel+0x334>)
 8004068:	f00c fbb0 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800406c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	2300      	movs	r3, #0
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	2300      	movs	r3, #0
 8004078:	229e      	movs	r2, #158	; 0x9e
 800407a:	2187      	movs	r1, #135	; 0x87
 800407c:	480f      	ldr	r0, [pc, #60]	; (80040bc <showWSLedPanel+0x334>)
 800407e:	f7fd fd51 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 8004082:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	2305      	movs	r3, #5
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	2315      	movs	r3, #21
 800408e:	2250      	movs	r2, #80	; 0x50
 8004090:	219c      	movs	r1, #156	; 0x9c
 8004092:	20dc      	movs	r0, #220	; 0xdc
 8004094:	f7fd fadb 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 8004098:	4916      	ldr	r1, [pc, #88]	; (80040f4 <showWSLedPanel+0x36c>)
 800409a:	4808      	ldr	r0, [pc, #32]	; (80040bc <showWSLedPanel+0x334>)
 800409c:	f00c fb96 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80040a0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	2300      	movs	r3, #0
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2300      	movs	r3, #0
 80040ac:	229e      	movs	r2, #158	; 0x9e
 80040ae:	21e9      	movs	r1, #233	; 0xe9
 80040b0:	e022      	b.n	80040f8 <showWSLedPanel+0x370>
 80040b2:	bf00      	nop
 80040b4:	08017700 	.word	0x08017700
 80040b8:	080146dc 	.word	0x080146dc
 80040bc:	200002f0 	.word	0x200002f0
 80040c0:	20000033 	.word	0x20000033
 80040c4:	080146e8 	.word	0x080146e8
 80040c8:	080146f8 	.word	0x080146f8
 80040cc:	08014700 	.word	0x08014700
 80040d0:	08015788 	.word	0x08015788
 80040d4:	0801467c 	.word	0x0801467c
 80040d8:	08014684 	.word	0x08014684
 80040dc:	08014708 	.word	0x08014708
 80040e0:	0801470c 	.word	0x0801470c
 80040e4:	08014710 	.word	0x08014710
 80040e8:	08014714 	.word	0x08014714
 80040ec:	08014718 	.word	0x08014718
 80040f0:	080146cc 	.word	0x080146cc
 80040f4:	08014720 	.word	0x08014720
 80040f8:	482b      	ldr	r0, [pc, #172]	; (80041a8 <showWSLedPanel+0x420>)
 80040fa:	f7fd fd13 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 80040fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	2305      	movs	r3, #5
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2315      	movs	r3, #21
 800410a:	2250      	movs	r2, #80	; 0x50
 800410c:	21bb      	movs	r1, #187	; 0xbb
 800410e:	2046      	movs	r0, #70	; 0x46
 8004110:	f7fd fa9d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8004114:	4925      	ldr	r1, [pc, #148]	; (80041ac <showWSLedPanel+0x424>)
 8004116:	4824      	ldr	r0, [pc, #144]	; (80041a8 <showWSLedPanel+0x420>)
 8004118:	f00c fb58 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 800411c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	22bd      	movs	r2, #189	; 0xbd
 800412a:	214e      	movs	r1, #78	; 0x4e
 800412c:	481e      	ldr	r0, [pc, #120]	; (80041a8 <showWSLedPanel+0x420>)
 800412e:	f7fd fcf9 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004132:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	2305      	movs	r3, #5
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2315      	movs	r3, #21
 800413e:	2250      	movs	r2, #80	; 0x50
 8004140:	21bb      	movs	r1, #187	; 0xbb
 8004142:	20aa      	movs	r0, #170	; 0xaa
 8004144:	f7fd fa83 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8004148:	4919      	ldr	r1, [pc, #100]	; (80041b0 <showWSLedPanel+0x428>)
 800414a:	4817      	ldr	r0, [pc, #92]	; (80041a8 <showWSLedPanel+0x420>)
 800414c:	f00c fb3e 	bl	80107cc <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004150:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	2300      	movs	r3, #0
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	2300      	movs	r3, #0
 800415c:	22bd      	movs	r2, #189	; 0xbd
 800415e:	21b5      	movs	r1, #181	; 0xb5
 8004160:	4811      	ldr	r0, [pc, #68]	; (80041a8 <showWSLedPanel+0x420>)
 8004162:	f7fd fcdf 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8004166:	4813      	ldr	r0, [pc, #76]	; (80041b4 <showWSLedPanel+0x42c>)
 8004168:	f7fd fac2 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800416c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	2305      	movs	r3, #5
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	2314      	movs	r3, #20
 8004178:	2264      	movs	r2, #100	; 0x64
 800417a:	21d8      	movs	r1, #216	; 0xd8
 800417c:	200a      	movs	r0, #10
 800417e:	f7fd fa66 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8004182:	490d      	ldr	r1, [pc, #52]	; (80041b8 <showWSLedPanel+0x430>)
 8004184:	4808      	ldr	r0, [pc, #32]	; (80041a8 <showWSLedPanel+0x420>)
 8004186:	f00c fb21 	bl	80107cc <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800418a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	2300      	movs	r3, #0
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2300      	movs	r3, #0
 8004196:	22da      	movs	r2, #218	; 0xda
 8004198:	210d      	movs	r1, #13
 800419a:	4803      	ldr	r0, [pc, #12]	; (80041a8 <showWSLedPanel+0x420>)
 800419c:	f7fd fcc2 	bl	8001b24 <EF_PutString>


}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200002f0 	.word	0x200002f0
 80041ac:	08014728 	.word	0x08014728
 80041b0:	08014730 	.word	0x08014730
 80041b4:	08015788 	.word	0x08015788
 80041b8:	080146a4 	.word	0x080146a4

080041bc <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b090      	sub	sp, #64	; 0x40
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 80041f6:	2300      	movs	r3, #0
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041fe:	2100      	movs	r1, #0
 8004200:	460a      	mov	r2, r1
 8004202:	801a      	strh	r2, [r3, #0]
 8004204:	460a      	mov	r2, r1
 8004206:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004208:	2300      	movs	r3, #0
 800420a:	61fb      	str	r3, [r7, #28]
 800420c:	f107 0320 	add.w	r3, r7, #32
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	f107 0318 	add.w	r3, r7, #24
 800421e:	2100      	movs	r1, #0
 8004220:	460a      	mov	r2, r1
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	460a      	mov	r2, r1
 8004226:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	f107 030c 	add.w	r3, r7, #12
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004236:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	2305      	movs	r3, #5
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2314      	movs	r3, #20
 8004242:	2214      	movs	r2, #20
 8004244:	2132      	movs	r1, #50	; 0x32
 8004246:	203c      	movs	r0, #60	; 0x3c
 8004248:	f7fd f984 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800424c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	2305      	movs	r3, #5
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	2314      	movs	r3, #20
 8004258:	2214      	movs	r2, #20
 800425a:	2132      	movs	r1, #50	; 0x32
 800425c:	205a      	movs	r0, #90	; 0x5a
 800425e:	f7fd f979 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004262:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	2305      	movs	r3, #5
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2314      	movs	r3, #20
 800426e:	2214      	movs	r2, #20
 8004270:	2132      	movs	r1, #50	; 0x32
 8004272:	2078      	movs	r0, #120	; 0x78
 8004274:	f7fd f96e 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004278:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	2305      	movs	r3, #5
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2314      	movs	r3, #20
 8004284:	2214      	movs	r2, #20
 8004286:	2132      	movs	r1, #50	; 0x32
 8004288:	2096      	movs	r0, #150	; 0x96
 800428a:	f7fd f963 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800428e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	2305      	movs	r3, #5
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2314      	movs	r3, #20
 800429a:	2214      	movs	r2, #20
 800429c:	2132      	movs	r1, #50	; 0x32
 800429e:	20b4      	movs	r0, #180	; 0xb4
 80042a0:	f7fd f958 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80042a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2305      	movs	r3, #5
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2314      	movs	r3, #20
 80042b0:	2214      	movs	r2, #20
 80042b2:	2132      	movs	r1, #50	; 0x32
 80042b4:	20d2      	movs	r0, #210	; 0xd2
 80042b6:	f7fd f94d 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80042ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	2305      	movs	r3, #5
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2314      	movs	r3, #20
 80042c6:	2214      	movs	r2, #20
 80042c8:	2132      	movs	r1, #50	; 0x32
 80042ca:	20f0      	movs	r0, #240	; 0xf0
 80042cc:	f7fd f942 	bl	8001554 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fefe 	bl	80050d4 <restoreTFTScheduleDayOfWeek>

	  EF_SetFont(&arial_11ptFontInfo);
 80042d8:	48ca      	ldr	r0, [pc, #808]	; (8004604 <drawschedulePanel+0x448>)
 80042da:	f7fd fa09 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 80042de:	49ca      	ldr	r1, [pc, #808]	; (8004608 <drawschedulePanel+0x44c>)
 80042e0:	48ca      	ldr	r0, [pc, #808]	; (800460c <drawschedulePanel+0x450>)
 80042e2:	f00c fa73 	bl	80107cc <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80042e6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	2301      	movs	r3, #1
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	224b      	movs	r2, #75	; 0x4b
 80042f4:	213c      	movs	r1, #60	; 0x3c
 80042f6:	48c5      	ldr	r0, [pc, #788]	; (800460c <drawschedulePanel+0x450>)
 80042f8:	f7fd fc14 	bl	8001b24 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80042fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	2305      	movs	r3, #5
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	2314      	movs	r3, #20
 8004308:	2214      	movs	r2, #20
 800430a:	21aa      	movs	r1, #170	; 0xaa
 800430c:	2015      	movs	r0, #21
 800430e:	f7fd f921 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004312:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	2305      	movs	r3, #5
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2314      	movs	r3, #20
 800431e:	2214      	movs	r2, #20
 8004320:	21aa      	movs	r1, #170	; 0xaa
 8004322:	2035      	movs	r0, #53	; 0x35
 8004324:	f7fd f916 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004328:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	2305      	movs	r3, #5
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	2314      	movs	r3, #20
 8004334:	2214      	movs	r2, #20
 8004336:	21aa      	movs	r1, #170	; 0xaa
 8004338:	2055      	movs	r0, #85	; 0x55
 800433a:	f7fd f90b 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800433e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	2305      	movs	r3, #5
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2314      	movs	r3, #20
 800434a:	2214      	movs	r2, #20
 800434c:	21aa      	movs	r1, #170	; 0xaa
 800434e:	2075      	movs	r0, #117	; 0x75
 8004350:	f7fd f900 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004354:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	2305      	movs	r3, #5
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2314      	movs	r3, #20
 8004360:	2214      	movs	r2, #20
 8004362:	21aa      	movs	r1, #170	; 0xaa
 8004364:	2095      	movs	r0, #149	; 0x95
 8004366:	f7fd f8f5 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800436a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	2305      	movs	r3, #5
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2314      	movs	r3, #20
 8004376:	2214      	movs	r2, #20
 8004378:	21aa      	movs	r1, #170	; 0xaa
 800437a:	20b5      	movs	r0, #181	; 0xb5
 800437c:	f7fd f8ea 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004380:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	2305      	movs	r3, #5
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2314      	movs	r3, #20
 800438c:	2214      	movs	r2, #20
 800438e:	21aa      	movs	r1, #170	; 0xaa
 8004390:	20d5      	movs	r0, #213	; 0xd5
 8004392:	f7fd f8df 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004396:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	2305      	movs	r3, #5
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2314      	movs	r3, #20
 80043a2:	2214      	movs	r2, #20
 80043a4:	21aa      	movs	r1, #170	; 0xaa
 80043a6:	20f5      	movs	r0, #245	; 0xf5
 80043a8:	f7fd f8d4 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	2305      	movs	r3, #5
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	2314      	movs	r3, #20
 80043b8:	2214      	movs	r2, #20
 80043ba:	21aa      	movs	r1, #170	; 0xaa
 80043bc:	f240 1015 	movw	r0, #277	; 0x115
 80043c0:	f7fd f8c8 	bl	8001554 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 80043c4:	4992      	ldr	r1, [pc, #584]	; (8004610 <drawschedulePanel+0x454>)
 80043c6:	4891      	ldr	r0, [pc, #580]	; (800460c <drawschedulePanel+0x450>)
 80043c8:	f00c fa00 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80043cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	2301      	movs	r3, #1
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	2300      	movs	r3, #0
 80043d8:	22c3      	movs	r2, #195	; 0xc3
 80043da:	2115      	movs	r1, #21
 80043dc:	488b      	ldr	r0, [pc, #556]	; (800460c <drawschedulePanel+0x450>)
 80043de:	f7fd fba1 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80043e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	2305      	movs	r3, #5
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2314      	movs	r3, #20
 80043ee:	2222      	movs	r2, #34	; 0x22
 80043f0:	2165      	movs	r1, #101	; 0x65
 80043f2:	20bb      	movs	r0, #187	; 0xbb
 80043f4:	f7fd f92b 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80043f8:	4986      	ldr	r1, [pc, #536]	; (8004614 <drawschedulePanel+0x458>)
 80043fa:	4884      	ldr	r0, [pc, #528]	; (800460c <drawschedulePanel+0x450>)
 80043fc:	f00c f9e6 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004400:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	2300      	movs	r3, #0
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	2300      	movs	r3, #0
 800440c:	2268      	movs	r2, #104	; 0x68
 800440e:	21c1      	movs	r1, #193	; 0xc1
 8004410:	487e      	ldr	r0, [pc, #504]	; (800460c <drawschedulePanel+0x450>)
 8004412:	f7fd fb87 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004416:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	2305      	movs	r3, #5
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2314      	movs	r3, #20
 8004422:	2222      	movs	r2, #34	; 0x22
 8004424:	2165      	movs	r1, #101	; 0x65
 8004426:	20e9      	movs	r0, #233	; 0xe9
 8004428:	f7fd f911 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 800442c:	497a      	ldr	r1, [pc, #488]	; (8004618 <drawschedulePanel+0x45c>)
 800442e:	4877      	ldr	r0, [pc, #476]	; (800460c <drawschedulePanel+0x450>)
 8004430:	f00c f9cc 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004434:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	2300      	movs	r3, #0
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2300      	movs	r3, #0
 8004440:	2268      	movs	r2, #104	; 0x68
 8004442:	21ec      	movs	r1, #236	; 0xec
 8004444:	4871      	ldr	r0, [pc, #452]	; (800460c <drawschedulePanel+0x450>)
 8004446:	f7fd fb6d 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800444a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	2305      	movs	r3, #5
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2314      	movs	r3, #20
 8004456:	2222      	movs	r2, #34	; 0x22
 8004458:	2165      	movs	r1, #101	; 0x65
 800445a:	f240 1017 	movw	r0, #279	; 0x117
 800445e:	f7fd f8f6 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004462:	496e      	ldr	r1, [pc, #440]	; (800461c <drawschedulePanel+0x460>)
 8004464:	4869      	ldr	r0, [pc, #420]	; (800460c <drawschedulePanel+0x450>)
 8004466:	f00c f9b1 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800446a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	2300      	movs	r3, #0
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2300      	movs	r3, #0
 8004476:	2268      	movs	r2, #104	; 0x68
 8004478:	f44f 718c 	mov.w	r1, #280	; 0x118
 800447c:	4863      	ldr	r0, [pc, #396]	; (800460c <drawschedulePanel+0x450>)
 800447e:	f7fd fb51 	bl	8001b24 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004482:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	2305      	movs	r3, #5
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2314      	movs	r3, #20
 800448e:	2222      	movs	r2, #34	; 0x22
 8004490:	2188      	movs	r1, #136	; 0x88
 8004492:	20bb      	movs	r0, #187	; 0xbb
 8004494:	f7fd f8db 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004498:	495e      	ldr	r1, [pc, #376]	; (8004614 <drawschedulePanel+0x458>)
 800449a:	485c      	ldr	r0, [pc, #368]	; (800460c <drawschedulePanel+0x450>)
 800449c:	f00c f996 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80044a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	2300      	movs	r3, #0
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2300      	movs	r3, #0
 80044ac:	228b      	movs	r2, #139	; 0x8b
 80044ae:	21c1      	movs	r1, #193	; 0xc1
 80044b0:	4856      	ldr	r0, [pc, #344]	; (800460c <drawschedulePanel+0x450>)
 80044b2:	f7fd fb37 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80044b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	2305      	movs	r3, #5
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2314      	movs	r3, #20
 80044c2:	2222      	movs	r2, #34	; 0x22
 80044c4:	2188      	movs	r1, #136	; 0x88
 80044c6:	20e9      	movs	r0, #233	; 0xe9
 80044c8:	f7fd f8c1 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 80044cc:	4952      	ldr	r1, [pc, #328]	; (8004618 <drawschedulePanel+0x45c>)
 80044ce:	484f      	ldr	r0, [pc, #316]	; (800460c <drawschedulePanel+0x450>)
 80044d0:	f00c f97c 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80044d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	2300      	movs	r3, #0
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	2300      	movs	r3, #0
 80044e0:	228b      	movs	r2, #139	; 0x8b
 80044e2:	21ec      	movs	r1, #236	; 0xec
 80044e4:	4849      	ldr	r0, [pc, #292]	; (800460c <drawschedulePanel+0x450>)
 80044e6:	f7fd fb1d 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80044ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	2305      	movs	r3, #5
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2314      	movs	r3, #20
 80044f6:	2222      	movs	r2, #34	; 0x22
 80044f8:	2188      	movs	r1, #136	; 0x88
 80044fa:	f240 1017 	movw	r0, #279	; 0x117
 80044fe:	f7fd f8a6 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004502:	4946      	ldr	r1, [pc, #280]	; (800461c <drawschedulePanel+0x460>)
 8004504:	4841      	ldr	r0, [pc, #260]	; (800460c <drawschedulePanel+0x450>)
 8004506:	f00c f961 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800450a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	2300      	movs	r3, #0
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	228b      	movs	r2, #139	; 0x8b
 8004518:	f44f 718c 	mov.w	r1, #280	; 0x118
 800451c:	483b      	ldr	r0, [pc, #236]	; (800460c <drawschedulePanel+0x450>)
 800451e:	f7fd fb01 	bl	8001b24 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004522:	483f      	ldr	r0, [pc, #252]	; (8004620 <drawschedulePanel+0x464>)
 8004524:	f7fd f8e4 	bl	80016f0 <EF_SetFont>
	  if(NrOfschedule == 1)
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	2b01      	cmp	r3, #1
 800452c:	f040 80e3 	bne.w	80046f6 <drawschedulePanel+0x53a>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 8004530:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004534:	4619      	mov	r1, r3
 8004536:	2001      	movs	r0, #1
 8004538:	f7fe fc1d 	bl	8002d76 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 800453c:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8004540:	4619      	mov	r1, r3
 8004542:	2001      	movs	r0, #1
 8004544:	f7fe fc3b 	bl	8002dbe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 8004548:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800454c:	4619      	mov	r1, r3
 800454e:	2001      	movs	r0, #1
 8004550:	f7fe fc59 	bl	8002e06 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 8004554:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004558:	4619      	mov	r1, r3
 800455a:	2001      	movs	r0, #1
 800455c:	f7fe fc77 	bl	8002e4e <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8004560:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004564:	4619      	mov	r1, r3
 8004566:	2001      	movs	r0, #1
 8004568:	f7fe fb58 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 800456c:	f107 031c 	add.w	r3, r7, #28
 8004570:	4619      	mov	r1, r3
 8004572:	2001      	movs	r0, #1
 8004574:	f7fe fbce 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  //Update day and relay on screen
		  updateTFTScheduleDayOfWeek(schedule1DayInWeekTab);
 8004578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fd95 	bl	80050ac <updateTFTScheduleDayOfWeek>
		  updateTFTScheduleRelayLights(schedule1RelayAndSwitchTab);
 8004582:	f107 031c 	add.w	r3, r7, #28
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fd9a 	bl	80050c0 <updateTFTScheduleRelayLights>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 800458c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004590:	2b17      	cmp	r3, #23
 8004592:	d902      	bls.n	800459a <drawschedulePanel+0x3de>
 8004594:	2317      	movs	r3, #23
 8004596:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 800459a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800459e:	2b3b      	cmp	r3, #59	; 0x3b
 80045a0:	d902      	bls.n	80045a8 <drawschedulePanel+0x3ec>
 80045a2:	233b      	movs	r3, #59	; 0x3b
 80045a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 80045a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80045ac:	2b17      	cmp	r3, #23
 80045ae:	d902      	bls.n	80045b6 <drawschedulePanel+0x3fa>
 80045b0:	2317      	movs	r3, #23
 80045b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 80045b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045ba:	2b3b      	cmp	r3, #59	; 0x3b
 80045bc:	d902      	bls.n	80045c4 <drawschedulePanel+0x408>
 80045be:	233b      	movs	r3, #59	; 0x3b
 80045c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 80045c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	d80d      	bhi.n	80045e8 <drawschedulePanel+0x42c>
 80045cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80045d0:	2b09      	cmp	r3, #9
 80045d2:	d809      	bhi.n	80045e8 <drawschedulePanel+0x42c>
 80045d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045d8:	461a      	mov	r2, r3
 80045da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80045de:	4911      	ldr	r1, [pc, #68]	; (8004624 <drawschedulePanel+0x468>)
 80045e0:	480a      	ldr	r0, [pc, #40]	; (800460c <drawschedulePanel+0x450>)
 80045e2:	f00c f8f3 	bl	80107cc <siprintf>
 80045e6:	e038      	b.n	800465a <drawschedulePanel+0x49e>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 80045e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045ec:	2b09      	cmp	r3, #9
 80045ee:	d81d      	bhi.n	800462c <drawschedulePanel+0x470>
 80045f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045f4:	461a      	mov	r2, r3
 80045f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80045fa:	490b      	ldr	r1, [pc, #44]	; (8004628 <drawschedulePanel+0x46c>)
 80045fc:	4803      	ldr	r0, [pc, #12]	; (800460c <drawschedulePanel+0x450>)
 80045fe:	f00c f8e5 	bl	80107cc <siprintf>
 8004602:	e02a      	b.n	800465a <drawschedulePanel+0x49e>
 8004604:	08015788 	.word	0x08015788
 8004608:	08014738 	.word	0x08014738
 800460c:	200002f0 	.word	0x200002f0
 8004610:	08014750 	.word	0x08014750
 8004614:	08014774 	.word	0x08014774
 8004618:	08014778 	.word	0x08014778
 800461c:	0801477c 	.word	0x0801477c
 8004620:	08017700 	.word	0x08017700
 8004624:	08014784 	.word	0x08014784
 8004628:	08014794 	.word	0x08014794
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 800462c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004630:	2b09      	cmp	r3, #9
 8004632:	d809      	bhi.n	8004648 <drawschedulePanel+0x48c>
 8004634:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004638:	461a      	mov	r2, r3
 800463a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800463e:	4999      	ldr	r1, [pc, #612]	; (80048a4 <drawschedulePanel+0x6e8>)
 8004640:	4899      	ldr	r0, [pc, #612]	; (80048a8 <drawschedulePanel+0x6ec>)
 8004642:	f00c f8c3 	bl	80107cc <siprintf>
 8004646:	e008      	b.n	800465a <drawschedulePanel+0x49e>
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800464c:	461a      	mov	r2, r3
 800464e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004652:	4996      	ldr	r1, [pc, #600]	; (80048ac <drawschedulePanel+0x6f0>)
 8004654:	4894      	ldr	r0, [pc, #592]	; (80048a8 <drawschedulePanel+0x6ec>)
 8004656:	f00c f8b9 	bl	80107cc <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800465a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	2301      	movs	r3, #1
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	2300      	movs	r3, #0
 8004666:	2264      	movs	r2, #100	; 0x64
 8004668:	210a      	movs	r1, #10
 800466a:	488f      	ldr	r0, [pc, #572]	; (80048a8 <drawschedulePanel+0x6ec>)
 800466c:	f7fd fa5a 	bl	8001b24 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004670:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004674:	2b09      	cmp	r3, #9
 8004676:	d80d      	bhi.n	8004694 <drawschedulePanel+0x4d8>
 8004678:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800467c:	2b09      	cmp	r3, #9
 800467e:	d809      	bhi.n	8004694 <drawschedulePanel+0x4d8>
 8004680:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004684:	461a      	mov	r2, r3
 8004686:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800468a:	4989      	ldr	r1, [pc, #548]	; (80048b0 <drawschedulePanel+0x6f4>)
 800468c:	4886      	ldr	r0, [pc, #536]	; (80048a8 <drawschedulePanel+0x6ec>)
 800468e:	f00c f89d 	bl	80107cc <siprintf>
 8004692:	e024      	b.n	80046de <drawschedulePanel+0x522>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 8004694:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004698:	2b09      	cmp	r3, #9
 800469a:	d809      	bhi.n	80046b0 <drawschedulePanel+0x4f4>
 800469c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046a0:	461a      	mov	r2, r3
 80046a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046a6:	4983      	ldr	r1, [pc, #524]	; (80048b4 <drawschedulePanel+0x6f8>)
 80046a8:	487f      	ldr	r0, [pc, #508]	; (80048a8 <drawschedulePanel+0x6ec>)
 80046aa:	f00c f88f 	bl	80107cc <siprintf>
 80046ae:	e016      	b.n	80046de <drawschedulePanel+0x522>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 80046b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046b4:	2b09      	cmp	r3, #9
 80046b6:	d809      	bhi.n	80046cc <drawschedulePanel+0x510>
 80046b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046bc:	461a      	mov	r2, r3
 80046be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046c2:	497d      	ldr	r1, [pc, #500]	; (80048b8 <drawschedulePanel+0x6fc>)
 80046c4:	4878      	ldr	r0, [pc, #480]	; (80048a8 <drawschedulePanel+0x6ec>)
 80046c6:	f00c f881 	bl	80107cc <siprintf>
 80046ca:	e008      	b.n	80046de <drawschedulePanel+0x522>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 80046cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046d0:	461a      	mov	r2, r3
 80046d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046d6:	4979      	ldr	r1, [pc, #484]	; (80048bc <drawschedulePanel+0x700>)
 80046d8:	4873      	ldr	r0, [pc, #460]	; (80048a8 <drawschedulePanel+0x6ec>)
 80046da:	f00c f877 	bl	80107cc <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80046de:	f24c 6318 	movw	r3, #50712	; 0xc618
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	2301      	movs	r3, #1
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	2287      	movs	r2, #135	; 0x87
 80046ec:	210a      	movs	r1, #10
 80046ee:	486e      	ldr	r0, [pc, #440]	; (80048a8 <drawschedulePanel+0x6ec>)
 80046f0:	f7fd fa18 	bl	8001b24 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 80046f4:	e0d1      	b.n	800489a <drawschedulePanel+0x6de>
	  else if(NrOfschedule == 2)
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	f040 80ce 	bne.w	800489a <drawschedulePanel+0x6de>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 80046fe:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004702:	4619      	mov	r1, r3
 8004704:	2002      	movs	r0, #2
 8004706:	f7fe fb36 	bl	8002d76 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 800470a:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800470e:	4619      	mov	r1, r3
 8004710:	2002      	movs	r0, #2
 8004712:	f7fe fb54 	bl	8002dbe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004716:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800471a:	4619      	mov	r1, r3
 800471c:	2002      	movs	r0, #2
 800471e:	f7fe fb72 	bl	8002e06 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004726:	4619      	mov	r1, r3
 8004728:	2002      	movs	r0, #2
 800472a:	f7fe fb90 	bl	8002e4e <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 800472e:	f107 0314 	add.w	r3, r7, #20
 8004732:	4619      	mov	r1, r3
 8004734:	2002      	movs	r0, #2
 8004736:	f7fe fa71 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	4619      	mov	r1, r3
 8004740:	2002      	movs	r0, #2
 8004742:	f7fe fae7 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  updateTFTScheduleDayOfWeek(schedule2DayInWeekTab);
 8004746:	f107 0314 	add.w	r3, r7, #20
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fcae 	bl	80050ac <updateTFTScheduleDayOfWeek>
		  updateTFTScheduleRelayLights(schedule2RelayAndSwitchTab);
 8004750:	f107 0308 	add.w	r3, r7, #8
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fcb3 	bl	80050c0 <updateTFTScheduleRelayLights>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 800475a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800475e:	2b17      	cmp	r3, #23
 8004760:	d902      	bls.n	8004768 <drawschedulePanel+0x5ac>
 8004762:	2317      	movs	r3, #23
 8004764:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 8004768:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800476c:	2b3b      	cmp	r3, #59	; 0x3b
 800476e:	d902      	bls.n	8004776 <drawschedulePanel+0x5ba>
 8004770:	233b      	movs	r3, #59	; 0x3b
 8004772:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 8004776:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800477a:	2b17      	cmp	r3, #23
 800477c:	d902      	bls.n	8004784 <drawschedulePanel+0x5c8>
 800477e:	2317      	movs	r3, #23
 8004780:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 8004784:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004788:	2b3b      	cmp	r3, #59	; 0x3b
 800478a:	d902      	bls.n	8004792 <drawschedulePanel+0x5d6>
 800478c:	233b      	movs	r3, #59	; 0x3b
 800478e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 8004792:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004796:	2b09      	cmp	r3, #9
 8004798:	d80d      	bhi.n	80047b6 <drawschedulePanel+0x5fa>
 800479a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800479e:	2b09      	cmp	r3, #9
 80047a0:	d809      	bhi.n	80047b6 <drawschedulePanel+0x5fa>
 80047a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047a6:	461a      	mov	r2, r3
 80047a8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80047ac:	4944      	ldr	r1, [pc, #272]	; (80048c0 <drawschedulePanel+0x704>)
 80047ae:	483e      	ldr	r0, [pc, #248]	; (80048a8 <drawschedulePanel+0x6ec>)
 80047b0:	f00c f80c 	bl	80107cc <siprintf>
 80047b4:	e024      	b.n	8004800 <drawschedulePanel+0x644>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 80047b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047ba:	2b09      	cmp	r3, #9
 80047bc:	d809      	bhi.n	80047d2 <drawschedulePanel+0x616>
 80047be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047c2:	461a      	mov	r2, r3
 80047c4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80047c8:	493e      	ldr	r1, [pc, #248]	; (80048c4 <drawschedulePanel+0x708>)
 80047ca:	4837      	ldr	r0, [pc, #220]	; (80048a8 <drawschedulePanel+0x6ec>)
 80047cc:	f00b fffe 	bl	80107cc <siprintf>
 80047d0:	e016      	b.n	8004800 <drawschedulePanel+0x644>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 80047d2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80047d6:	2b09      	cmp	r3, #9
 80047d8:	d809      	bhi.n	80047ee <drawschedulePanel+0x632>
 80047da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047de:	461a      	mov	r2, r3
 80047e0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80047e4:	4938      	ldr	r1, [pc, #224]	; (80048c8 <drawschedulePanel+0x70c>)
 80047e6:	4830      	ldr	r0, [pc, #192]	; (80048a8 <drawschedulePanel+0x6ec>)
 80047e8:	f00b fff0 	bl	80107cc <siprintf>
 80047ec:	e008      	b.n	8004800 <drawschedulePanel+0x644>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 80047ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047f2:	461a      	mov	r2, r3
 80047f4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80047f8:	4934      	ldr	r1, [pc, #208]	; (80048cc <drawschedulePanel+0x710>)
 80047fa:	482b      	ldr	r0, [pc, #172]	; (80048a8 <drawschedulePanel+0x6ec>)
 80047fc:	f00b ffe6 	bl	80107cc <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004800:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	2301      	movs	r3, #1
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	2300      	movs	r3, #0
 800480c:	2264      	movs	r2, #100	; 0x64
 800480e:	210a      	movs	r1, #10
 8004810:	4825      	ldr	r0, [pc, #148]	; (80048a8 <drawschedulePanel+0x6ec>)
 8004812:	f7fd f987 	bl	8001b24 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004816:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800481a:	2b09      	cmp	r3, #9
 800481c:	d80d      	bhi.n	800483a <drawschedulePanel+0x67e>
 800481e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004822:	2b09      	cmp	r3, #9
 8004824:	d809      	bhi.n	800483a <drawschedulePanel+0x67e>
 8004826:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800482a:	461a      	mov	r2, r3
 800482c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004830:	4927      	ldr	r1, [pc, #156]	; (80048d0 <drawschedulePanel+0x714>)
 8004832:	481d      	ldr	r0, [pc, #116]	; (80048a8 <drawschedulePanel+0x6ec>)
 8004834:	f00b ffca 	bl	80107cc <siprintf>
 8004838:	e024      	b.n	8004884 <drawschedulePanel+0x6c8>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 800483a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800483e:	2b09      	cmp	r3, #9
 8004840:	d809      	bhi.n	8004856 <drawschedulePanel+0x69a>
 8004842:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004846:	461a      	mov	r2, r3
 8004848:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800484c:	4921      	ldr	r1, [pc, #132]	; (80048d4 <drawschedulePanel+0x718>)
 800484e:	4816      	ldr	r0, [pc, #88]	; (80048a8 <drawschedulePanel+0x6ec>)
 8004850:	f00b ffbc 	bl	80107cc <siprintf>
 8004854:	e016      	b.n	8004884 <drawschedulePanel+0x6c8>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004856:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800485a:	2b09      	cmp	r3, #9
 800485c:	d809      	bhi.n	8004872 <drawschedulePanel+0x6b6>
 800485e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004862:	461a      	mov	r2, r3
 8004864:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004868:	491b      	ldr	r1, [pc, #108]	; (80048d8 <drawschedulePanel+0x71c>)
 800486a:	480f      	ldr	r0, [pc, #60]	; (80048a8 <drawschedulePanel+0x6ec>)
 800486c:	f00b ffae 	bl	80107cc <siprintf>
 8004870:	e008      	b.n	8004884 <drawschedulePanel+0x6c8>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004872:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004876:	461a      	mov	r2, r3
 8004878:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800487c:	4917      	ldr	r1, [pc, #92]	; (80048dc <drawschedulePanel+0x720>)
 800487e:	480a      	ldr	r0, [pc, #40]	; (80048a8 <drawschedulePanel+0x6ec>)
 8004880:	f00b ffa4 	bl	80107cc <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004884:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	2301      	movs	r3, #1
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	2300      	movs	r3, #0
 8004890:	2287      	movs	r2, #135	; 0x87
 8004892:	210c      	movs	r1, #12
 8004894:	4804      	ldr	r0, [pc, #16]	; (80048a8 <drawschedulePanel+0x6ec>)
 8004896:	f7fd f945 	bl	8001b24 <EF_PutString>
}
 800489a:	bf00      	nop
 800489c:	3738      	adds	r7, #56	; 0x38
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	080147a4 	.word	0x080147a4
 80048a8:	200002f0 	.word	0x200002f0
 80048ac:	080147b4 	.word	0x080147b4
 80048b0:	080147c4 	.word	0x080147c4
 80048b4:	080147d4 	.word	0x080147d4
 80048b8:	080147e4 	.word	0x080147e4
 80048bc:	080147f4 	.word	0x080147f4
 80048c0:	08014804 	.word	0x08014804
 80048c4:	08014814 	.word	0x08014814
 80048c8:	08014824 	.word	0x08014824
 80048cc:	08014834 	.word	0x08014834
 80048d0:	08014844 	.word	0x08014844
 80048d4:	08014854 	.word	0x08014854
 80048d8:	08014864 	.word	0x08014864
 80048dc:	08014874 	.word	0x08014874

080048e0 <showSchedule1Panel>:

void showSchedule1Panel()
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80048e6:	f24c 6018 	movw	r0, #50712	; 0xc618
 80048ea:	f7fd fb05 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80048ee:	483f      	ldr	r0, [pc, #252]	; (80049ec <showSchedule1Panel+0x10c>)
 80048f0:	f7fc fefe 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 80048f4:	493e      	ldr	r1, [pc, #248]	; (80049f0 <showSchedule1Panel+0x110>)
 80048f6:	483f      	ldr	r0, [pc, #252]	; (80049f4 <showSchedule1Panel+0x114>)
 80048f8:	f00b ff68 	bl	80107cc <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80048fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	2300      	movs	r3, #0
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800490a:	220a      	movs	r2, #10
 800490c:	212a      	movs	r1, #42	; 0x2a
 800490e:	4839      	ldr	r0, [pc, #228]	; (80049f4 <showSchedule1Panel+0x114>)
 8004910:	f7fd f908 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004914:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2329      	movs	r3, #41	; 0x29
 800491c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004920:	2129      	movs	r1, #41	; 0x29
 8004922:	2000      	movs	r0, #0
 8004924:	f7fc fc34 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004928:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	232b      	movs	r3, #43	; 0x2b
 8004930:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004934:	212b      	movs	r1, #43	; 0x2b
 8004936:	2000      	movs	r0, #0
 8004938:	f7fc fc2a 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(1);
 800493c:	2001      	movs	r0, #1
 800493e:	f7ff fc3d 	bl	80041bc <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004942:	482d      	ldr	r0, [pc, #180]	; (80049f8 <showSchedule1Panel+0x118>)
 8004944:	f7fc fed4 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004948:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	2305      	movs	r3, #5
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	2314      	movs	r3, #20
 8004954:	225f      	movs	r2, #95	; 0x5f
 8004956:	21d8      	movs	r1, #216	; 0xd8
 8004958:	20dc      	movs	r0, #220	; 0xdc
 800495a:	f7fc fe78 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 800495e:	4927      	ldr	r1, [pc, #156]	; (80049fc <showSchedule1Panel+0x11c>)
 8004960:	4824      	ldr	r0, [pc, #144]	; (80049f4 <showSchedule1Panel+0x114>)
 8004962:	f00b ff33 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004966:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	2300      	movs	r3, #0
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2300      	movs	r3, #0
 8004972:	22da      	movs	r2, #218	; 0xda
 8004974:	21e6      	movs	r1, #230	; 0xe6
 8004976:	481f      	ldr	r0, [pc, #124]	; (80049f4 <showSchedule1Panel+0x114>)
 8004978:	f7fd f8d4 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800497c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	2305      	movs	r3, #5
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2314      	movs	r3, #20
 8004988:	225a      	movs	r2, #90	; 0x5a
 800498a:	21d8      	movs	r1, #216	; 0xd8
 800498c:	2078      	movs	r0, #120	; 0x78
 800498e:	f7fc fe5e 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004992:	491b      	ldr	r1, [pc, #108]	; (8004a00 <showSchedule1Panel+0x120>)
 8004994:	4817      	ldr	r0, [pc, #92]	; (80049f4 <showSchedule1Panel+0x114>)
 8004996:	f00b ff19 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800499a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	2300      	movs	r3, #0
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	22da      	movs	r2, #218	; 0xda
 80049a8:	217e      	movs	r1, #126	; 0x7e
 80049aa:	4812      	ldr	r0, [pc, #72]	; (80049f4 <showSchedule1Panel+0x114>)
 80049ac:	f7fd f8ba 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80049b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	2305      	movs	r3, #5
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	2314      	movs	r3, #20
 80049bc:	2264      	movs	r2, #100	; 0x64
 80049be:	21d8      	movs	r1, #216	; 0xd8
 80049c0:	200a      	movs	r0, #10
 80049c2:	f7fc fe44 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 80049c6:	490f      	ldr	r1, [pc, #60]	; (8004a04 <showSchedule1Panel+0x124>)
 80049c8:	480a      	ldr	r0, [pc, #40]	; (80049f4 <showSchedule1Panel+0x114>)
 80049ca:	f00b feff 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80049ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	22da      	movs	r2, #218	; 0xda
 80049dc:	210d      	movs	r1, #13
 80049de:	4805      	ldr	r0, [pc, #20]	; (80049f4 <showSchedule1Panel+0x114>)
 80049e0:	f7fd f8a0 	bl	8001b24 <EF_PutString>
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	08017700 	.word	0x08017700
 80049f0:	08014884 	.word	0x08014884
 80049f4:	200002f0 	.word	0x200002f0
 80049f8:	08015788 	.word	0x08015788
 80049fc:	08014894 	.word	0x08014894
 8004a00:	080148a0 	.word	0x080148a0
 8004a04:	080148a8 	.word	0x080148a8

08004a08 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004a0e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004a12:	f7fd fa71 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004a16:	4832      	ldr	r0, [pc, #200]	; (8004ae0 <showSchedule2Panel+0xd8>)
 8004a18:	f7fc fe6a 	bl	80016f0 <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004a1c:	4931      	ldr	r1, [pc, #196]	; (8004ae4 <showSchedule2Panel+0xdc>)
 8004a1e:	4832      	ldr	r0, [pc, #200]	; (8004ae8 <showSchedule2Panel+0xe0>)
 8004a20:	f00b fed4 	bl	80107cc <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004a24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a32:	220a      	movs	r2, #10
 8004a34:	212a      	movs	r1, #42	; 0x2a
 8004a36:	482c      	ldr	r0, [pc, #176]	; (8004ae8 <showSchedule2Panel+0xe0>)
 8004a38:	f7fd f874 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004a3c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	2329      	movs	r3, #41	; 0x29
 8004a44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a48:	2129      	movs	r1, #41	; 0x29
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f7fc fba0 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004a50:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	232b      	movs	r3, #43	; 0x2b
 8004a58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a5c:	212b      	movs	r1, #43	; 0x2b
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f7fc fb96 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004a64:	2002      	movs	r0, #2
 8004a66:	f7ff fba9 	bl	80041bc <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004a6a:	4820      	ldr	r0, [pc, #128]	; (8004aec <showSchedule2Panel+0xe4>)
 8004a6c:	f7fc fe40 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004a70:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	2305      	movs	r3, #5
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2314      	movs	r3, #20
 8004a7c:	225a      	movs	r2, #90	; 0x5a
 8004a7e:	21d8      	movs	r1, #216	; 0xd8
 8004a80:	2078      	movs	r0, #120	; 0x78
 8004a82:	f7fc fde4 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004a86:	491a      	ldr	r1, [pc, #104]	; (8004af0 <showSchedule2Panel+0xe8>)
 8004a88:	4817      	ldr	r0, [pc, #92]	; (8004ae8 <showSchedule2Panel+0xe0>)
 8004a8a:	f00b fe9f 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004a8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	2300      	movs	r3, #0
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	22da      	movs	r2, #218	; 0xda
 8004a9c:	217e      	movs	r1, #126	; 0x7e
 8004a9e:	4812      	ldr	r0, [pc, #72]	; (8004ae8 <showSchedule2Panel+0xe0>)
 8004aa0:	f7fd f840 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004aa4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	2305      	movs	r3, #5
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2314      	movs	r3, #20
 8004ab0:	2264      	movs	r2, #100	; 0x64
 8004ab2:	21d8      	movs	r1, #216	; 0xd8
 8004ab4:	200a      	movs	r0, #10
 8004ab6:	f7fc fdca 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= HARM. 1");
 8004aba:	490e      	ldr	r1, [pc, #56]	; (8004af4 <showSchedule2Panel+0xec>)
 8004abc:	480a      	ldr	r0, [pc, #40]	; (8004ae8 <showSchedule2Panel+0xe0>)
 8004abe:	f00b fe85 	bl	80107cc <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ac2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2300      	movs	r3, #0
 8004ace:	22da      	movs	r2, #218	; 0xda
 8004ad0:	210d      	movs	r1, #13
 8004ad2:	4805      	ldr	r0, [pc, #20]	; (8004ae8 <showSchedule2Panel+0xe0>)
 8004ad4:	f7fd f826 	bl	8001b24 <EF_PutString>
}
 8004ad8:	bf00      	nop
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	08017700 	.word	0x08017700
 8004ae4:	080148b4 	.word	0x080148b4
 8004ae8:	200002f0 	.word	0x200002f0
 8004aec:	08015788 	.word	0x08015788
 8004af0:	080148a0 	.word	0x080148a0
 8004af4:	080148c4 	.word	0x080148c4

08004af8 <ChangeHourOnScreen>:
//
// Change displayed time, if is other than current time
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ChangeHourOnScreen()
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004afe:	f7fd fe49 	bl	8002794 <DS3231_GetHour>
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004b06:	f7fd fe51 	bl	80027ac <DS3231_GetMinute>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004b0e:	482a      	ldr	r0, [pc, #168]	; (8004bb8 <ChangeHourOnScreen+0xc0>)
 8004b10:	f7fc fdee 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004b14:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <ChangeHourOnScreen+0xc4>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	79fa      	ldrb	r2, [r7, #7]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d021      	beq.n	8004b62 <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004b1e:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <ChangeHourOnScreen+0xc8>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d11d      	bne.n	8004b62 <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b09      	cmp	r3, #9
 8004b2a:	d806      	bhi.n	8004b3a <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4924      	ldr	r1, [pc, #144]	; (8004bc4 <ChangeHourOnScreen+0xcc>)
 8004b32:	4825      	ldr	r0, [pc, #148]	; (8004bc8 <ChangeHourOnScreen+0xd0>)
 8004b34:	f00b fe4a 	bl	80107cc <siprintf>
 8004b38:	e005      	b.n	8004b46 <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4923      	ldr	r1, [pc, #140]	; (8004bcc <ChangeHourOnScreen+0xd4>)
 8004b40:	4821      	ldr	r0, [pc, #132]	; (8004bc8 <ChangeHourOnScreen+0xd0>)
 8004b42:	f00b fe43 	bl	80107cc <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004b46:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b4a:	9301      	str	r3, [sp, #4]
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	2300      	movs	r3, #0
 8004b52:	2232      	movs	r2, #50	; 0x32
 8004b54:	2161      	movs	r1, #97	; 0x61
 8004b56:	481c      	ldr	r0, [pc, #112]	; (8004bc8 <ChangeHourOnScreen+0xd0>)
 8004b58:	f7fc ffe4 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8004b5c:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <ChangeHourOnScreen+0xc4>)
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004b62:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <ChangeHourOnScreen+0xd8>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	79ba      	ldrb	r2, [r7, #6]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d021      	beq.n	8004bb0 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004b6c:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <ChangeHourOnScreen+0xc8>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d11d      	bne.n	8004bb0 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8004b74:	79bb      	ldrb	r3, [r7, #6]
 8004b76:	2b09      	cmp	r3, #9
 8004b78:	d806      	bhi.n	8004b88 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004b7a:	79bb      	ldrb	r3, [r7, #6]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4915      	ldr	r1, [pc, #84]	; (8004bd4 <ChangeHourOnScreen+0xdc>)
 8004b80:	4811      	ldr	r0, [pc, #68]	; (8004bc8 <ChangeHourOnScreen+0xd0>)
 8004b82:	f00b fe23 	bl	80107cc <siprintf>
 8004b86:	e005      	b.n	8004b94 <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004b88:	79bb      	ldrb	r3, [r7, #6]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	4912      	ldr	r1, [pc, #72]	; (8004bd8 <ChangeHourOnScreen+0xe0>)
 8004b8e:	480e      	ldr	r0, [pc, #56]	; (8004bc8 <ChangeHourOnScreen+0xd0>)
 8004b90:	f00b fe1c 	bl	80107cc <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004b94:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2232      	movs	r2, #50	; 0x32
 8004ba2:	2196      	movs	r1, #150	; 0x96
 8004ba4:	4808      	ldr	r0, [pc, #32]	; (8004bc8 <ChangeHourOnScreen+0xd0>)
 8004ba6:	f7fc ffbd 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <ChangeHourOnScreen+0xd8>)
 8004bac:	79bb      	ldrb	r3, [r7, #6]
 8004bae:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	08017700 	.word	0x08017700
 8004bbc:	2000024c 	.word	0x2000024c
 8004bc0:	20000284 	.word	0x20000284
 8004bc4:	080148d0 	.word	0x080148d0
 8004bc8:	200002f0 	.word	0x200002f0
 8004bcc:	080148d8 	.word	0x080148d8
 8004bd0:	2000024d 	.word	0x2000024d
 8004bd4:	080148dc 	.word	0x080148dc
 8004bd8:	080148e4 	.word	0x080148e4

08004bdc <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d104      	bne.n	8004bfa <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004bf0:	f7fd ffa4 	bl	8002b3c <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004bf4:	f7fd ffda 	bl	8002bac <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004bf8:	e005      	b.n	8004c06 <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004bfa:	2018      	movs	r0, #24
 8004bfc:	f003 fa18 	bl	8008030 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004c00:	2019      	movs	r0, #25
 8004c02:	f003 fa15 	bl	8008030 <SendComand>
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	4603      	mov	r3, r0
 8004c18:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d12e      	bne.n	8004c82 <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8004c24:	f7fd ff8a 	bl	8002b3c <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8004c28:	481b      	ldr	r0, [pc, #108]	; (8004c98 <predefinedActivityKarmienie+0x88>)
 8004c2a:	f7fc fd61 	bl	80016f0 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004c2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c32:	9301      	str	r3, [sp, #4]
 8004c34:	230a      	movs	r3, #10
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	2328      	movs	r3, #40	; 0x28
 8004c3a:	2278      	movs	r2, #120	; 0x78
 8004c3c:	213c      	movs	r1, #60	; 0x3c
 8004c3e:	2064      	movs	r0, #100	; 0x64
 8004c40:	f7fc fd05 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004c44:	4915      	ldr	r1, [pc, #84]	; (8004c9c <predefinedActivityKarmienie+0x8c>)
 8004c46:	4816      	ldr	r0, [pc, #88]	; (8004ca0 <predefinedActivityKarmienie+0x90>)
 8004c48:	f00b fdc0 	bl	80107cc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004c4c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	2300      	movs	r3, #0
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	2300      	movs	r3, #0
 8004c58:	223e      	movs	r2, #62	; 0x3e
 8004c5a:	2177      	movs	r1, #119	; 0x77
 8004c5c:	4810      	ldr	r0, [pc, #64]	; (8004ca0 <predefinedActivityKarmienie+0x90>)
 8004c5e:	f7fc ff61 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004c62:	4910      	ldr	r1, [pc, #64]	; (8004ca4 <predefinedActivityKarmienie+0x94>)
 8004c64:	480e      	ldr	r0, [pc, #56]	; (8004ca0 <predefinedActivityKarmienie+0x90>)
 8004c66:	f00b fdb1 	bl	80107cc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004c6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	2300      	movs	r3, #0
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	2300      	movs	r3, #0
 8004c76:	2250      	movs	r2, #80	; 0x50
 8004c78:	2193      	movs	r1, #147	; 0x93
 8004c7a:	4809      	ldr	r0, [pc, #36]	; (8004ca0 <predefinedActivityKarmienie+0x90>)
 8004c7c:	f7fc ff52 	bl	8001b24 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8004c80:	e005      	b.n	8004c8e <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004c82:	2018      	movs	r0, #24
 8004c84:	f003 f9d4 	bl	8008030 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8004c88:	4807      	ldr	r0, [pc, #28]	; (8004ca8 <predefinedActivityKarmienie+0x98>)
 8004c8a:	f009 fb4f 	bl	800e32c <HAL_TIM_Base_Start_IT>
}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	08015788 	.word	0x08015788
 8004c9c:	080146bc 	.word	0x080146bc
 8004ca0:	200002f0 	.word	0x200002f0
 8004ca4:	080146cc 	.word	0x080146cc
 8004ca8:	2000075c 	.word	0x2000075c

08004cac <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004cb2:	487d      	ldr	r0, [pc, #500]	; (8004ea8 <drawCurrentStateOfSwitches+0x1fc>)
 8004cb4:	f7fc fd1c 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8004cb8:	4b7c      	ldr	r3, [pc, #496]	; (8004eac <drawCurrentStateOfSwitches+0x200>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01c      	beq.n	8004cfa <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004cc0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	2305      	movs	r3, #5
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2315      	movs	r3, #21
 8004ccc:	2221      	movs	r2, #33	; 0x21
 8004cce:	2141      	movs	r1, #65	; 0x41
 8004cd0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004cd4:	f7fc fcbb 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004cd8:	4975      	ldr	r1, [pc, #468]	; (8004eb0 <drawCurrentStateOfSwitches+0x204>)
 8004cda:	4876      	ldr	r0, [pc, #472]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004cdc:	f00b fd76 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004ce0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	2300      	movs	r3, #0
 8004cec:	2243      	movs	r2, #67	; 0x43
 8004cee:	f240 1111 	movw	r1, #273	; 0x111
 8004cf2:	4870      	ldr	r0, [pc, #448]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004cf4:	f7fc ff16 	bl	8001b24 <EF_PutString>
 8004cf8:	e01b      	b.n	8004d32 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004cfa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	2305      	movs	r3, #5
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2315      	movs	r3, #21
 8004d06:	2221      	movs	r2, #33	; 0x21
 8004d08:	2141      	movs	r1, #65	; 0x41
 8004d0a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004d0e:	f7fc fc9e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004d12:	4969      	ldr	r1, [pc, #420]	; (8004eb8 <drawCurrentStateOfSwitches+0x20c>)
 8004d14:	4867      	ldr	r0, [pc, #412]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004d16:	f00b fd59 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	2300      	movs	r3, #0
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2300      	movs	r3, #0
 8004d26:	2243      	movs	r2, #67	; 0x43
 8004d28:	f240 1111 	movw	r1, #273	; 0x111
 8004d2c:	4861      	ldr	r0, [pc, #388]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004d2e:	f7fc fef9 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8004d32:	4b5e      	ldr	r3, [pc, #376]	; (8004eac <drawCurrentStateOfSwitches+0x200>)
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01c      	beq.n	8004d74 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004d3a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	2305      	movs	r3, #5
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	2315      	movs	r3, #21
 8004d46:	2221      	movs	r2, #33	; 0x21
 8004d48:	215f      	movs	r1, #95	; 0x5f
 8004d4a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004d4e:	f7fc fc7e 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004d52:	4957      	ldr	r1, [pc, #348]	; (8004eb0 <drawCurrentStateOfSwitches+0x204>)
 8004d54:	4857      	ldr	r0, [pc, #348]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004d56:	f00b fd39 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004d5a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	2300      	movs	r3, #0
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	2261      	movs	r2, #97	; 0x61
 8004d68:	f240 1111 	movw	r1, #273	; 0x111
 8004d6c:	4851      	ldr	r0, [pc, #324]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004d6e:	f7fc fed9 	bl	8001b24 <EF_PutString>
 8004d72:	e01b      	b.n	8004dac <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004d74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	2305      	movs	r3, #5
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2315      	movs	r3, #21
 8004d80:	2221      	movs	r2, #33	; 0x21
 8004d82:	215f      	movs	r1, #95	; 0x5f
 8004d84:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004d88:	f7fc fc61 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004d8c:	494a      	ldr	r1, [pc, #296]	; (8004eb8 <drawCurrentStateOfSwitches+0x20c>)
 8004d8e:	4849      	ldr	r0, [pc, #292]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004d90:	f00b fd1c 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2261      	movs	r2, #97	; 0x61
 8004da2:	f240 1111 	movw	r1, #273	; 0x111
 8004da6:	4843      	ldr	r0, [pc, #268]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004da8:	f7fc febc 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8004dac:	4b3f      	ldr	r3, [pc, #252]	; (8004eac <drawCurrentStateOfSwitches+0x200>)
 8004dae:	789b      	ldrb	r3, [r3, #2]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01c      	beq.n	8004dee <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004db4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	2305      	movs	r3, #5
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	2315      	movs	r3, #21
 8004dc0:	2221      	movs	r2, #33	; 0x21
 8004dc2:	217d      	movs	r1, #125	; 0x7d
 8004dc4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004dc8:	f7fc fc41 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004dcc:	4938      	ldr	r1, [pc, #224]	; (8004eb0 <drawCurrentStateOfSwitches+0x204>)
 8004dce:	4839      	ldr	r0, [pc, #228]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004dd0:	f00b fcfc 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004dd4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2300      	movs	r3, #0
 8004de0:	227f      	movs	r2, #127	; 0x7f
 8004de2:	f240 1111 	movw	r1, #273	; 0x111
 8004de6:	4833      	ldr	r0, [pc, #204]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004de8:	f7fc fe9c 	bl	8001b24 <EF_PutString>
 8004dec:	e01b      	b.n	8004e26 <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004dee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	2305      	movs	r3, #5
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	2315      	movs	r3, #21
 8004dfa:	2221      	movs	r2, #33	; 0x21
 8004dfc:	217d      	movs	r1, #125	; 0x7d
 8004dfe:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e02:	f7fc fc24 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004e06:	492c      	ldr	r1, [pc, #176]	; (8004eb8 <drawCurrentStateOfSwitches+0x20c>)
 8004e08:	482a      	ldr	r0, [pc, #168]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004e0a:	f00b fcdf 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	2300      	movs	r3, #0
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	227f      	movs	r2, #127	; 0x7f
 8004e1c:	f240 1111 	movw	r1, #273	; 0x111
 8004e20:	4824      	ldr	r0, [pc, #144]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004e22:	f7fc fe7f 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8004e26:	4b21      	ldr	r3, [pc, #132]	; (8004eac <drawCurrentStateOfSwitches+0x200>)
 8004e28:	78db      	ldrb	r3, [r3, #3]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d01c      	beq.n	8004e68 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004e2e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	2305      	movs	r3, #5
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2315      	movs	r3, #21
 8004e3a:	2221      	movs	r2, #33	; 0x21
 8004e3c:	219b      	movs	r1, #155	; 0x9b
 8004e3e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e42:	f7fc fc04 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004e46:	491a      	ldr	r1, [pc, #104]	; (8004eb0 <drawCurrentStateOfSwitches+0x204>)
 8004e48:	481a      	ldr	r0, [pc, #104]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004e4a:	f00b fcbf 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e4e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	2300      	movs	r3, #0
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	229d      	movs	r2, #157	; 0x9d
 8004e5c:	f240 1111 	movw	r1, #273	; 0x111
 8004e60:	4814      	ldr	r0, [pc, #80]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004e62:	f7fc fe5f 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8004e66:	e01b      	b.n	8004ea0 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	2305      	movs	r3, #5
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2315      	movs	r3, #21
 8004e74:	2221      	movs	r2, #33	; 0x21
 8004e76:	219b      	movs	r1, #155	; 0x9b
 8004e78:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e7c:	f7fc fbe7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004e80:	490d      	ldr	r1, [pc, #52]	; (8004eb8 <drawCurrentStateOfSwitches+0x20c>)
 8004e82:	480c      	ldr	r0, [pc, #48]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004e84:	f00b fca2 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e8c:	9301      	str	r3, [sp, #4]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	2300      	movs	r3, #0
 8004e94:	229d      	movs	r2, #157	; 0x9d
 8004e96:	f240 1111 	movw	r1, #273	; 0x111
 8004e9a:	4806      	ldr	r0, [pc, #24]	; (8004eb4 <drawCurrentStateOfSwitches+0x208>)
 8004e9c:	f7fc fe42 	bl	8001b24 <EF_PutString>
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08015788 	.word	0x08015788
 8004eac:	2000029c 	.word	0x2000029c
 8004eb0:	080146c8 	.word	0x080146c8
 8004eb4:	200002f0 	.word	0x200002f0
 8004eb8:	080146cc 	.word	0x080146cc

08004ebc <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004ec2:	4875      	ldr	r0, [pc, #468]	; (8005098 <drawCurrentStateOfLights+0x1dc>)
 8004ec4:	f7fc fc14 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8004ec8:	4b74      	ldr	r3, [pc, #464]	; (800509c <drawCurrentStateOfLights+0x1e0>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01a      	beq.n	8004f06 <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ed0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	2305      	movs	r3, #5
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2315      	movs	r3, #21
 8004edc:	2221      	movs	r2, #33	; 0x21
 8004ede:	2141      	movs	r1, #65	; 0x41
 8004ee0:	20c8      	movs	r0, #200	; 0xc8
 8004ee2:	f7fc fbb4 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004ee6:	496e      	ldr	r1, [pc, #440]	; (80050a0 <drawCurrentStateOfLights+0x1e4>)
 8004ee8:	486e      	ldr	r0, [pc, #440]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8004eea:	f00b fc6f 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004eee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2243      	movs	r2, #67	; 0x43
 8004efc:	21cb      	movs	r1, #203	; 0xcb
 8004efe:	4869      	ldr	r0, [pc, #420]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8004f00:	f7fc fe10 	bl	8001b24 <EF_PutString>
 8004f04:	e019      	b.n	8004f3a <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	2305      	movs	r3, #5
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2315      	movs	r3, #21
 8004f12:	2221      	movs	r2, #33	; 0x21
 8004f14:	2141      	movs	r1, #65	; 0x41
 8004f16:	20c8      	movs	r0, #200	; 0xc8
 8004f18:	f7fc fb99 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004f1c:	4962      	ldr	r1, [pc, #392]	; (80050a8 <drawCurrentStateOfLights+0x1ec>)
 8004f1e:	4861      	ldr	r0, [pc, #388]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8004f20:	f00b fc54 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2243      	movs	r2, #67	; 0x43
 8004f32:	21cb      	movs	r1, #203	; 0xcb
 8004f34:	485b      	ldr	r0, [pc, #364]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8004f36:	f7fc fdf5 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8004f3a:	4b58      	ldr	r3, [pc, #352]	; (800509c <drawCurrentStateOfLights+0x1e0>)
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01a      	beq.n	8004f78 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f42:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	2305      	movs	r3, #5
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2315      	movs	r3, #21
 8004f4e:	2221      	movs	r2, #33	; 0x21
 8004f50:	215f      	movs	r1, #95	; 0x5f
 8004f52:	20c8      	movs	r0, #200	; 0xc8
 8004f54:	f7fc fb7b 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f58:	4951      	ldr	r1, [pc, #324]	; (80050a0 <drawCurrentStateOfLights+0x1e4>)
 8004f5a:	4852      	ldr	r0, [pc, #328]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8004f5c:	f00b fc36 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	2300      	movs	r3, #0
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2261      	movs	r2, #97	; 0x61
 8004f6e:	21cb      	movs	r1, #203	; 0xcb
 8004f70:	484c      	ldr	r0, [pc, #304]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8004f72:	f7fc fdd7 	bl	8001b24 <EF_PutString>
 8004f76:	e019      	b.n	8004fac <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	2305      	movs	r3, #5
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	2315      	movs	r3, #21
 8004f84:	2221      	movs	r2, #33	; 0x21
 8004f86:	215f      	movs	r1, #95	; 0x5f
 8004f88:	20c8      	movs	r0, #200	; 0xc8
 8004f8a:	f7fc fb60 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004f8e:	4946      	ldr	r1, [pc, #280]	; (80050a8 <drawCurrentStateOfLights+0x1ec>)
 8004f90:	4844      	ldr	r0, [pc, #272]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8004f92:	f00b fc1b 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2261      	movs	r2, #97	; 0x61
 8004fa4:	21cb      	movs	r1, #203	; 0xcb
 8004fa6:	483f      	ldr	r0, [pc, #252]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8004fa8:	f7fc fdbc 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8004fac:	4b3b      	ldr	r3, [pc, #236]	; (800509c <drawCurrentStateOfLights+0x1e0>)
 8004fae:	789b      	ldrb	r3, [r3, #2]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01a      	beq.n	8004fea <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004fb4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	2305      	movs	r3, #5
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2315      	movs	r3, #21
 8004fc0:	2221      	movs	r2, #33	; 0x21
 8004fc2:	217d      	movs	r1, #125	; 0x7d
 8004fc4:	20c8      	movs	r0, #200	; 0xc8
 8004fc6:	f7fc fb42 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004fca:	4935      	ldr	r1, [pc, #212]	; (80050a0 <drawCurrentStateOfLights+0x1e4>)
 8004fcc:	4835      	ldr	r0, [pc, #212]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8004fce:	f00b fbfd 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fd2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	227f      	movs	r2, #127	; 0x7f
 8004fe0:	21cb      	movs	r1, #203	; 0xcb
 8004fe2:	4830      	ldr	r0, [pc, #192]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8004fe4:	f7fc fd9e 	bl	8001b24 <EF_PutString>
 8004fe8:	e019      	b.n	800501e <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004fea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	2305      	movs	r3, #5
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2315      	movs	r3, #21
 8004ff6:	2221      	movs	r2, #33	; 0x21
 8004ff8:	217d      	movs	r1, #125	; 0x7d
 8004ffa:	20c8      	movs	r0, #200	; 0xc8
 8004ffc:	f7fc fb27 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005000:	4929      	ldr	r1, [pc, #164]	; (80050a8 <drawCurrentStateOfLights+0x1ec>)
 8005002:	4828      	ldr	r0, [pc, #160]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8005004:	f00b fbe2 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005008:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	2300      	movs	r3, #0
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	227f      	movs	r2, #127	; 0x7f
 8005016:	21cb      	movs	r1, #203	; 0xcb
 8005018:	4822      	ldr	r0, [pc, #136]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 800501a:	f7fc fd83 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 800501e:	4b1f      	ldr	r3, [pc, #124]	; (800509c <drawCurrentStateOfLights+0x1e0>)
 8005020:	78db      	ldrb	r3, [r3, #3]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01a      	beq.n	800505c <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005026:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	2305      	movs	r3, #5
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2315      	movs	r3, #21
 8005032:	2221      	movs	r2, #33	; 0x21
 8005034:	219b      	movs	r1, #155	; 0x9b
 8005036:	20c8      	movs	r0, #200	; 0xc8
 8005038:	f7fc fb09 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800503c:	4918      	ldr	r1, [pc, #96]	; (80050a0 <drawCurrentStateOfLights+0x1e4>)
 800503e:	4819      	ldr	r0, [pc, #100]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8005040:	f00b fbc4 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005044:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	2300      	movs	r3, #0
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	2300      	movs	r3, #0
 8005050:	229d      	movs	r2, #157	; 0x9d
 8005052:	21cb      	movs	r1, #203	; 0xcb
 8005054:	4813      	ldr	r0, [pc, #76]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8005056:	f7fc fd65 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800505a:	e019      	b.n	8005090 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800505c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	2305      	movs	r3, #5
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2315      	movs	r3, #21
 8005068:	2221      	movs	r2, #33	; 0x21
 800506a:	219b      	movs	r1, #155	; 0x9b
 800506c:	20c8      	movs	r0, #200	; 0xc8
 800506e:	f7fc faee 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005072:	490d      	ldr	r1, [pc, #52]	; (80050a8 <drawCurrentStateOfLights+0x1ec>)
 8005074:	480b      	ldr	r0, [pc, #44]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 8005076:	f00b fba9 	bl	80107cc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800507a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	2300      	movs	r3, #0
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	229d      	movs	r2, #157	; 0x9d
 8005088:	21cb      	movs	r1, #203	; 0xcb
 800508a:	4806      	ldr	r0, [pc, #24]	; (80050a4 <drawCurrentStateOfLights+0x1e8>)
 800508c:	f7fc fd4a 	bl	8001b24 <EF_PutString>
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	08015788 	.word	0x08015788
 800509c:	200002a0 	.word	0x200002a0
 80050a0:	080146c8 	.word	0x080146c8
 80050a4:	200002f0 	.word	0x200002f0
 80050a8:	080146cc 	.word	0x080146cc

080050ac <updateTFTScheduleDayOfWeek>:

void updateTFTScheduleDayOfWeek(uint8_t * scheduleDayInWeekTab)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <updateTFTScheduleRelayLights>:

void updateTFTScheduleRelayLights(uint8_t * scheduleRelayAndSwitchTab)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <restoreTFTScheduleDayOfWeek>:

void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	f107 030c 	add.w	r3, r7, #12
 80050e6:	2100      	movs	r1, #0
 80050e8:	460a      	mov	r2, r1
 80050ea:	801a      	strh	r2, [r3, #0]
 80050ec:	460a      	mov	r2, r1
 80050ee:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 80050f0:	f107 0208 	add.w	r2, r7, #8
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fd fd8f 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 80050fe:	7a3b      	ldrb	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <restoreTFTScheduleDayOfWeek+0x3a>
 8005104:	2101      	movs	r1, #1
 8005106:	2001      	movs	r0, #1
 8005108:	f001 ffce 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 800510c:	e003      	b.n	8005116 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800510e:	2100      	movs	r1, #0
 8005110:	2001      	movs	r0, #1
 8005112:	f001 ffc9 	bl	80070a8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005116:	7a7b      	ldrb	r3, [r7, #9]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d004      	beq.n	8005126 <restoreTFTScheduleDayOfWeek+0x52>
 800511c:	2101      	movs	r1, #1
 800511e:	2002      	movs	r0, #2
 8005120:	f001 ffc2 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 8005124:	e003      	b.n	800512e <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005126:	2100      	movs	r1, #0
 8005128:	2002      	movs	r0, #2
 800512a:	f001 ffbd 	bl	80070a8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800512e:	7abb      	ldrb	r3, [r7, #10]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <restoreTFTScheduleDayOfWeek+0x6a>
 8005134:	2101      	movs	r1, #1
 8005136:	2003      	movs	r0, #3
 8005138:	f001 ffb6 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 800513c:	e003      	b.n	8005146 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800513e:	2100      	movs	r1, #0
 8005140:	2003      	movs	r0, #3
 8005142:	f001 ffb1 	bl	80070a8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005146:	7afb      	ldrb	r3, [r7, #11]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d004      	beq.n	8005156 <restoreTFTScheduleDayOfWeek+0x82>
 800514c:	2101      	movs	r1, #1
 800514e:	2004      	movs	r0, #4
 8005150:	f001 ffaa 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 8005154:	e003      	b.n	800515e <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005156:	2100      	movs	r1, #0
 8005158:	2004      	movs	r0, #4
 800515a:	f001 ffa5 	bl	80070a8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800515e:	7b3b      	ldrb	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <restoreTFTScheduleDayOfWeek+0x9a>
 8005164:	2101      	movs	r1, #1
 8005166:	2005      	movs	r0, #5
 8005168:	f001 ff9e 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 800516c:	e003      	b.n	8005176 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800516e:	2100      	movs	r1, #0
 8005170:	2005      	movs	r0, #5
 8005172:	f001 ff99 	bl	80070a8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 8005176:	7b7b      	ldrb	r3, [r7, #13]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d004      	beq.n	8005186 <restoreTFTScheduleDayOfWeek+0xb2>
 800517c:	2101      	movs	r1, #1
 800517e:	2006      	movs	r0, #6
 8005180:	f001 ff92 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 8005184:	e003      	b.n	800518e <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 8005186:	2100      	movs	r1, #0
 8005188:	2006      	movs	r0, #6
 800518a:	f001 ff8d 	bl	80070a8 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 800518e:	7bbb      	ldrb	r3, [r7, #14]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d004      	beq.n	800519e <restoreTFTScheduleDayOfWeek+0xca>
 8005194:	2101      	movs	r1, #1
 8005196:	2007      	movs	r0, #7
 8005198:	f001 ff86 	bl	80070a8 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 800519c:	e003      	b.n	80051a6 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 800519e:	2100      	movs	r1, #0
 80051a0:	2007      	movs	r0, #7
 80051a2:	f001 ff81 	bl	80070a8 <changeTFTScheduleDayOfWeek>
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <initWait>:


//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 80051b8:	bf00      	nop
 80051ba:	f003 ff3f 	bl	800903c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <initWait+0x28>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d2f6      	bcs.n	80051ba <initWait+0xa>
    {
    }
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000250 	.word	0x20000250

080051dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e2:	f107 0314 	add.w	r3, r7, #20
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	609a      	str	r2, [r3, #8]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	4b3f      	ldr	r3, [pc, #252]	; (80052f4 <MX_GPIO_Init+0x118>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	4a3e      	ldr	r2, [pc, #248]	; (80052f4 <MX_GPIO_Init+0x118>)
 80051fc:	f043 0304 	orr.w	r3, r3, #4
 8005200:	6313      	str	r3, [r2, #48]	; 0x30
 8005202:	4b3c      	ldr	r3, [pc, #240]	; (80052f4 <MX_GPIO_Init+0x118>)
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	4b38      	ldr	r3, [pc, #224]	; (80052f4 <MX_GPIO_Init+0x118>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	4a37      	ldr	r2, [pc, #220]	; (80052f4 <MX_GPIO_Init+0x118>)
 8005218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521c:	6313      	str	r3, [r2, #48]	; 0x30
 800521e:	4b35      	ldr	r3, [pc, #212]	; (80052f4 <MX_GPIO_Init+0x118>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	4b31      	ldr	r3, [pc, #196]	; (80052f4 <MX_GPIO_Init+0x118>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	4a30      	ldr	r2, [pc, #192]	; (80052f4 <MX_GPIO_Init+0x118>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	6313      	str	r3, [r2, #48]	; 0x30
 800523a:	4b2e      	ldr	r3, [pc, #184]	; (80052f4 <MX_GPIO_Init+0x118>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	607b      	str	r3, [r7, #4]
 800524a:	4b2a      	ldr	r3, [pc, #168]	; (80052f4 <MX_GPIO_Init+0x118>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <MX_GPIO_Init+0x118>)
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	6313      	str	r3, [r2, #48]	; 0x30
 8005256:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <MX_GPIO_Init+0x118>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8005262:	2200      	movs	r2, #0
 8005264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005268:	4823      	ldr	r0, [pc, #140]	; (80052f8 <MX_GPIO_Init+0x11c>)
 800526a:	f004 fe63 	bl	8009f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800526e:	2200      	movs	r2, #0
 8005270:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8005274:	4821      	ldr	r0, [pc, #132]	; (80052fc <MX_GPIO_Init+0x120>)
 8005276:	f004 fe5d 	bl	8009f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 800527a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800527e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005280:	2301      	movs	r3, #1
 8005282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005288:	2300      	movs	r3, #0
 800528a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 800528c:	f107 0314 	add.w	r3, r7, #20
 8005290:	4619      	mov	r1, r3
 8005292:	4819      	ldr	r0, [pc, #100]	; (80052f8 <MX_GPIO_Init+0x11c>)
 8005294:	f004 fcb2 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 8005298:	2310      	movs	r3, #16
 800529a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800529c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80052a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052a2:	2301      	movs	r3, #1
 80052a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 80052a6:	f107 0314 	add.w	r3, r7, #20
 80052aa:	4619      	mov	r1, r3
 80052ac:	4814      	ldr	r0, [pc, #80]	; (8005300 <MX_GPIO_Init+0x124>)
 80052ae:	f004 fca5 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80052b2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80052b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052b8:	2301      	movs	r3, #1
 80052ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c0:	2300      	movs	r3, #0
 80052c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c4:	f107 0314 	add.w	r3, r7, #20
 80052c8:	4619      	mov	r1, r3
 80052ca:	480c      	ldr	r0, [pc, #48]	; (80052fc <MX_GPIO_Init+0x120>)
 80052cc:	f004 fc96 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80052d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80052d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80052da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80052e0:	f107 0314 	add.w	r3, r7, #20
 80052e4:	4619      	mov	r1, r3
 80052e6:	4806      	ldr	r0, [pc, #24]	; (8005300 <MX_GPIO_Init+0x124>)
 80052e8:	f004 fc88 	bl	8009bfc <HAL_GPIO_Init>

}
 80052ec:	bf00      	nop
 80052ee:	3728      	adds	r7, #40	; 0x28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40023800 	.word	0x40023800
 80052f8:	40020800 	.word	0x40020800
 80052fc:	40020400 	.word	0x40020400
 8005300:	40020000 	.word	0x40020000

08005304 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005308:	4b12      	ldr	r3, [pc, #72]	; (8005354 <MX_I2C1_Init+0x50>)
 800530a:	4a13      	ldr	r2, [pc, #76]	; (8005358 <MX_I2C1_Init+0x54>)
 800530c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800530e:	4b11      	ldr	r3, [pc, #68]	; (8005354 <MX_I2C1_Init+0x50>)
 8005310:	4a12      	ldr	r2, [pc, #72]	; (800535c <MX_I2C1_Init+0x58>)
 8005312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005314:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <MX_I2C1_Init+0x50>)
 8005316:	2200      	movs	r2, #0
 8005318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <MX_I2C1_Init+0x50>)
 800531c:	2200      	movs	r2, #0
 800531e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005320:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <MX_I2C1_Init+0x50>)
 8005322:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005326:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005328:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <MX_I2C1_Init+0x50>)
 800532a:	2200      	movs	r2, #0
 800532c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800532e:	4b09      	ldr	r3, [pc, #36]	; (8005354 <MX_I2C1_Init+0x50>)
 8005330:	2200      	movs	r2, #0
 8005332:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005334:	4b07      	ldr	r3, [pc, #28]	; (8005354 <MX_I2C1_Init+0x50>)
 8005336:	2200      	movs	r2, #0
 8005338:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800533a:	4b06      	ldr	r3, [pc, #24]	; (8005354 <MX_I2C1_Init+0x50>)
 800533c:	2200      	movs	r2, #0
 800533e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005340:	4804      	ldr	r0, [pc, #16]	; (8005354 <MX_I2C1_Init+0x50>)
 8005342:	f004 fe43 	bl	8009fcc <HAL_I2C_Init>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800534c:	f000 fa7c 	bl	8005848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005350:	bf00      	nop
 8005352:	bd80      	pop	{r7, pc}
 8005354:	200003e4 	.word	0x200003e4
 8005358:	40005400 	.word	0x40005400
 800535c:	00061a80 	.word	0x00061a80

08005360 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005364:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <MX_I2C3_Init+0x50>)
 8005366:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <MX_I2C3_Init+0x54>)
 8005368:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800536a:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <MX_I2C3_Init+0x50>)
 800536c:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <MX_I2C3_Init+0x58>)
 800536e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <MX_I2C3_Init+0x50>)
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005376:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <MX_I2C3_Init+0x50>)
 8005378:	2200      	movs	r2, #0
 800537a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800537c:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <MX_I2C3_Init+0x50>)
 800537e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005382:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <MX_I2C3_Init+0x50>)
 8005386:	2200      	movs	r2, #0
 8005388:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <MX_I2C3_Init+0x50>)
 800538c:	2200      	movs	r2, #0
 800538e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <MX_I2C3_Init+0x50>)
 8005392:	2200      	movs	r2, #0
 8005394:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <MX_I2C3_Init+0x50>)
 8005398:	2200      	movs	r2, #0
 800539a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800539c:	4804      	ldr	r0, [pc, #16]	; (80053b0 <MX_I2C3_Init+0x50>)
 800539e:	f004 fe15 	bl	8009fcc <HAL_I2C_Init>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80053a8:	f000 fa4e 	bl	8005848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80053ac:	bf00      	nop
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000330 	.word	0x20000330
 80053b4:	40005c00 	.word	0x40005c00
 80053b8:	000186a0 	.word	0x000186a0

080053bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08c      	sub	sp, #48	; 0x30
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c4:	f107 031c 	add.w	r3, r7, #28
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	605a      	str	r2, [r3, #4]
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	60da      	str	r2, [r3, #12]
 80053d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a74      	ldr	r2, [pc, #464]	; (80055ac <HAL_I2C_MspInit+0x1f0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	f040 8090 	bne.w	8005500 <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053e0:	2300      	movs	r3, #0
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	4b72      	ldr	r3, [pc, #456]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	4a71      	ldr	r2, [pc, #452]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 80053ea:	f043 0302 	orr.w	r3, r3, #2
 80053ee:	6313      	str	r3, [r2, #48]	; 0x30
 80053f0:	4b6f      	ldr	r3, [pc, #444]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053fc:	23c0      	movs	r3, #192	; 0xc0
 80053fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005400:	2312      	movs	r3, #18
 8005402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005404:	2300      	movs	r3, #0
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005408:	2303      	movs	r3, #3
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800540c:	2304      	movs	r3, #4
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005410:	f107 031c 	add.w	r3, r7, #28
 8005414:	4619      	mov	r1, r3
 8005416:	4867      	ldr	r0, [pc, #412]	; (80055b4 <HAL_I2C_MspInit+0x1f8>)
 8005418:	f004 fbf0 	bl	8009bfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	4b63      	ldr	r3, [pc, #396]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	4a62      	ldr	r2, [pc, #392]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 8005426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800542a:	6413      	str	r3, [r2, #64]	; 0x40
 800542c:	4b60      	ldr	r3, [pc, #384]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005438:	4b5f      	ldr	r3, [pc, #380]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 800543a:	4a60      	ldr	r2, [pc, #384]	; (80055bc <HAL_I2C_MspInit+0x200>)
 800543c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800543e:	4b5e      	ldr	r3, [pc, #376]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 8005440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005444:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005446:	4b5c      	ldr	r3, [pc, #368]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 8005448:	2200      	movs	r2, #0
 800544a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800544c:	4b5a      	ldr	r3, [pc, #360]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 800544e:	2200      	movs	r2, #0
 8005450:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005452:	4b59      	ldr	r3, [pc, #356]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 8005454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005458:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800545a:	4b57      	ldr	r3, [pc, #348]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 800545c:	2200      	movs	r2, #0
 800545e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005460:	4b55      	ldr	r3, [pc, #340]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 8005462:	2200      	movs	r2, #0
 8005464:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005466:	4b54      	ldr	r3, [pc, #336]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 8005468:	2200      	movs	r2, #0
 800546a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800546c:	4b52      	ldr	r3, [pc, #328]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 800546e:	2200      	movs	r2, #0
 8005470:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005472:	4b51      	ldr	r3, [pc, #324]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 8005474:	2200      	movs	r2, #0
 8005476:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005478:	484f      	ldr	r0, [pc, #316]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 800547a:	f003 ffaf 	bl	80093dc <HAL_DMA_Init>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8005484:	f000 f9e0 	bl	8005848 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a4b      	ldr	r2, [pc, #300]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
 800548e:	4a4a      	ldr	r2, [pc, #296]	; (80055b8 <HAL_I2C_MspInit+0x1fc>)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005494:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 8005496:	4a4b      	ldr	r2, [pc, #300]	; (80055c4 <HAL_I2C_MspInit+0x208>)
 8005498:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800549a:	4b49      	ldr	r3, [pc, #292]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 800549c:	2200      	movs	r2, #0
 800549e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054a0:	4b47      	ldr	r3, [pc, #284]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054a6:	4b46      	ldr	r3, [pc, #280]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054ac:	4b44      	ldr	r3, [pc, #272]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054b4:	4b42      	ldr	r3, [pc, #264]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054ba:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054bc:	2200      	movs	r2, #0
 80054be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80054c0:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054c6:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054cc:	4b3c      	ldr	r3, [pc, #240]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80054d2:	483b      	ldr	r0, [pc, #236]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054d4:	f003 ff82 	bl	80093dc <HAL_DMA_Init>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80054de:	f000 f9b3 	bl	8005848 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a36      	ldr	r2, [pc, #216]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054e6:	635a      	str	r2, [r3, #52]	; 0x34
 80054e8:	4a35      	ldr	r2, [pc, #212]	; (80055c0 <HAL_I2C_MspInit+0x204>)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80054ee:	2200      	movs	r2, #0
 80054f0:	2100      	movs	r1, #0
 80054f2:	2020      	movs	r0, #32
 80054f4:	f003 ff11 	bl	800931a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80054f8:	2020      	movs	r0, #32
 80054fa:	f003 ff2a 	bl	8009352 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80054fe:	e050      	b.n	80055a2 <HAL_I2C_MspInit+0x1e6>
  else if(i2cHandle->Instance==I2C3)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a30      	ldr	r2, [pc, #192]	; (80055c8 <HAL_I2C_MspInit+0x20c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d14b      	bne.n	80055a2 <HAL_I2C_MspInit+0x1e6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	4b28      	ldr	r3, [pc, #160]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	4a27      	ldr	r2, [pc, #156]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	6313      	str	r3, [r2, #48]	; 0x30
 800551a:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	6313      	str	r3, [r2, #48]	; 0x30
 8005536:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005548:	2312      	movs	r3, #18
 800554a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554c:	2300      	movs	r3, #0
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005550:	2303      	movs	r3, #3
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005554:	2304      	movs	r3, #4
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005558:	f107 031c 	add.w	r3, r7, #28
 800555c:	4619      	mov	r1, r3
 800555e:	481b      	ldr	r0, [pc, #108]	; (80055cc <HAL_I2C_MspInit+0x210>)
 8005560:	f004 fb4c 	bl	8009bfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800556a:	2312      	movs	r3, #18
 800556c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005572:	2303      	movs	r3, #3
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005576:	2309      	movs	r3, #9
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800557a:	f107 031c 	add.w	r3, r7, #28
 800557e:	4619      	mov	r1, r3
 8005580:	480c      	ldr	r0, [pc, #48]	; (80055b4 <HAL_I2C_MspInit+0x1f8>)
 8005582:	f004 fb3b 	bl	8009bfc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 8005590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005594:	6413      	str	r3, [r2, #64]	; 0x40
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_I2C_MspInit+0x1f4>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800559e:	60bb      	str	r3, [r7, #8]
 80055a0:	68bb      	ldr	r3, [r7, #8]
}
 80055a2:	bf00      	nop
 80055a4:	3730      	adds	r7, #48	; 0x30
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40005400 	.word	0x40005400
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40020400 	.word	0x40020400
 80055b8:	20000438 	.word	0x20000438
 80055bc:	40026010 	.word	0x40026010
 80055c0:	20000384 	.word	0x20000384
 80055c4:	40026028 	.word	0x40026028
 80055c8:	40005c00 	.word	0x40005c00
 80055cc:	40020000 	.word	0x40020000

080055d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80055d6:	f003 fccb 	bl	8008f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80055da:	f000 f857 	bl	800568c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80055de:	f7ff fdfd 	bl	80051dc <MX_GPIO_Init>
  MX_SPI1_Init();
 80055e2:	f002 ff07 	bl	80083f4 <MX_SPI1_Init>
  MX_DMA_Init();
 80055e6:	f7fc ff85 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80055ea:	f003 fbc1 	bl	8008d70 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80055ee:	f002 ff37 	bl	8008460 <MX_SPI3_Init>
  MX_I2C1_Init();
 80055f2:	f7ff fe87 	bl	8005304 <MX_I2C1_Init>
  MX_TIM11_Init();
 80055f6:	f003 f9ad 	bl	8008954 <MX_TIM11_Init>
  MX_TIM10_Init();
 80055fa:	f003 f987 	bl	800890c <MX_TIM10_Init>
  MX_I2C3_Init();
 80055fe:	f7ff feaf 	bl	8005360 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005602:	f000 f8ab 	bl	800575c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8005606:	481b      	ldr	r0, [pc, #108]	; (8005674 <main+0xa4>)
 8005608:	f008 fe90 	bl	800e32c <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 800560c:	481a      	ldr	r0, [pc, #104]	; (8005678 <main+0xa8>)
 800560e:	f7fc fcd1 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8005612:	491a      	ldr	r1, [pc, #104]	; (800567c <main+0xac>)
 8005614:	481a      	ldr	r0, [pc, #104]	; (8005680 <main+0xb0>)
 8005616:	f003 fb5c 	bl	8008cd2 <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 800561a:	2117      	movs	r1, #23
 800561c:	4819      	ldr	r0, [pc, #100]	; (8005684 <main+0xb4>)
 800561e:	f7fc ff19 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 8005622:	4819      	ldr	r0, [pc, #100]	; (8005688 <main+0xb8>)
 8005624:	f7fc ff9e 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8005628:	2001      	movs	r0, #1
 800562a:	f7fc fff5 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 800562e:	2001      	movs	r0, #1
 8005630:	f7fd f812 	bl	8002658 <DS3231_EnableOscillator>


  uint8_t result = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	71fb      	strb	r3, [r7, #7]
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 8005638:	e001      	b.n	800563e <main+0x6e>
  Error_Handler();
 800563a:	f000 f905 	bl	8005848 <Error_Handler>
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 800563e:	1dfb      	adds	r3, r7, #7
 8005640:	2201      	movs	r2, #1
 8005642:	4619      	mov	r1, r3
 8005644:	2001      	movs	r0, #1
 8005646:	f7fd f953 	bl	80028f0 <eeprom_read>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f4      	bne.n	800563a <main+0x6a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005650:	480b      	ldr	r0, [pc, #44]	; (8005680 <main+0xb0>)
 8005652:	f003 faf1 	bl	8008c38 <UARTDMA_IsDataReceivedReady>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <main+0x92>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 800565c:	4808      	ldr	r0, [pc, #32]	; (8005680 <main+0xb0>)
 800565e:	f002 fa0b 	bl	8007a78 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8005662:	4807      	ldr	r0, [pc, #28]	; (8005680 <main+0xb0>)
 8005664:	f003 fafa 	bl	8008c5c <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 8005668:	f7fc fe22 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  MenuTFT();
 800566c:	f000 f8fa 	bl	8005864 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005670:	e7ee      	b.n	8005650 <main+0x80>
 8005672:	bf00      	nop
 8005674:	200007a4 	.word	0x200007a4
 8005678:	20000704 	.word	0x20000704
 800567c:	200008ac 	.word	0x200008ac
 8005680:	20000498 	.word	0x20000498
 8005684:	200006ac 	.word	0x200006ac
 8005688:	200003e4 	.word	0x200003e4

0800568c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b094      	sub	sp, #80	; 0x50
 8005690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005692:	f107 0320 	add.w	r3, r7, #32
 8005696:	2230      	movs	r2, #48	; 0x30
 8005698:	2100      	movs	r1, #0
 800569a:	4618      	mov	r0, r3
 800569c:	f00a fa0e 	bl	800fabc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	605a      	str	r2, [r3, #4]
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	60da      	str	r2, [r3, #12]
 80056ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80056b0:	2300      	movs	r3, #0
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	4b27      	ldr	r3, [pc, #156]	; (8005754 <SystemClock_Config+0xc8>)
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	4a26      	ldr	r2, [pc, #152]	; (8005754 <SystemClock_Config+0xc8>)
 80056ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056be:	6413      	str	r3, [r2, #64]	; 0x40
 80056c0:	4b24      	ldr	r3, [pc, #144]	; (8005754 <SystemClock_Config+0xc8>)
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c8:	60bb      	str	r3, [r7, #8]
 80056ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056cc:	2300      	movs	r3, #0
 80056ce:	607b      	str	r3, [r7, #4]
 80056d0:	4b21      	ldr	r3, [pc, #132]	; (8005758 <SystemClock_Config+0xcc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a20      	ldr	r2, [pc, #128]	; (8005758 <SystemClock_Config+0xcc>)
 80056d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <SystemClock_Config+0xcc>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80056ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056f2:	2302      	movs	r3, #2
 80056f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80056f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80056fc:	230c      	movs	r3, #12
 80056fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005700:	2360      	movs	r3, #96	; 0x60
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005704:	2302      	movs	r3, #2
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005708:	2304      	movs	r3, #4
 800570a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800570c:	f107 0320 	add.w	r3, r7, #32
 8005710:	4618      	mov	r0, r3
 8005712:	f007 fd5f 	bl	800d1d4 <HAL_RCC_OscConfig>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800571c:	f000 f894 	bl	8005848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005720:	230f      	movs	r3, #15
 8005722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005724:	2302      	movs	r3, #2
 8005726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800572c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005736:	f107 030c 	add.w	r3, r7, #12
 800573a:	2103      	movs	r1, #3
 800573c:	4618      	mov	r0, r3
 800573e:	f007 ffc1 	bl	800d6c4 <HAL_RCC_ClockConfig>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005748:	f000 f87e 	bl	8005848 <Error_Handler>
  }
}
 800574c:	bf00      	nop
 800574e:	3750      	adds	r7, #80	; 0x50
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40023800 	.word	0x40023800
 8005758:	40007000 	.word	0x40007000

0800575c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005760:	2200      	movs	r2, #0
 8005762:	2100      	movs	r1, #0
 8005764:	200a      	movs	r0, #10
 8005766:	f003 fdd8 	bl	800931a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800576a:	200a      	movs	r0, #10
 800576c:	f003 fdf1 	bl	8009352 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005770:	2200      	movs	r2, #0
 8005772:	2100      	movs	r1, #0
 8005774:	2017      	movs	r0, #23
 8005776:	f003 fdd0 	bl	800931a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800577a:	2017      	movs	r0, #23
 800577c:	f003 fde9 	bl	8009352 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005780:	2200      	movs	r2, #0
 8005782:	2100      	movs	r1, #0
 8005784:	201f      	movs	r0, #31
 8005786:	f003 fdc8 	bl	800931a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800578a:	201f      	movs	r0, #31
 800578c:	f003 fde1 	bl	8009352 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005790:	2200      	movs	r2, #0
 8005792:	2100      	movs	r1, #0
 8005794:	2026      	movs	r0, #38	; 0x26
 8005796:	f003 fdc0 	bl	800931a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800579a:	2026      	movs	r0, #38	; 0x26
 800579c:	f003 fdd9 	bl	8009352 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80057a0:	2200      	movs	r2, #0
 80057a2:	2100      	movs	r1, #0
 80057a4:	2033      	movs	r0, #51	; 0x33
 80057a6:	f003 fdb8 	bl	800931a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80057aa:	2033      	movs	r0, #51	; 0x33
 80057ac:	f003 fdd1 	bl	8009352 <HAL_NVIC_EnableIRQ>
}
 80057b0:	bf00      	nop
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a12      	ldr	r2, [pc, #72]	; (800580c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen();
 80057c6:	f7ff f997 	bl	8004af8 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a10      	ldr	r2, [pc, #64]	; (8005810 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d117      	bne.n	8005804 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S)
 80057d4:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d90d      	bls.n	80057f8 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 80057dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057e0:	480d      	ldr	r0, [pc, #52]	; (8005818 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80057e2:	f004 fbc0 	bl	8009f66 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 80057e6:	2000      	movs	r0, #0
 80057e8:	f7ff fa12 	bl	8004c10 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 80057f2:	480a      	ldr	r0, [pc, #40]	; (800581c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80057f4:	f008 fdfc 	bl	800e3f0 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	3301      	adds	r3, #1
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005802:	701a      	strb	r2, [r3, #0]
	}
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40014800 	.word	0x40014800
 8005810:	40014400 	.word	0x40014400
 8005814:	20000254 	.word	0x20000254
 8005818:	40020800 	.word	0x40020800
 800581c:	2000075c 	.word	0x2000075c

08005820 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005830:	d101      	bne.n	8005836 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8005832:	f7fc fe03 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	2b10      	cmp	r3, #16
 800583a:	d101      	bne.n	8005840 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 800583c:	f7fc ff50 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 800584c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005850:	f7fc fb52 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005854:	4802      	ldr	r0, [pc, #8]	; (8005860 <Error_Handler+0x18>)
 8005856:	f7fb ff4b 	bl	80016f0 <EF_SetFont>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800585a:	b672      	cpsid	i
}
 800585c:	bf00      	nop
//	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
//	EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);

  __disable_irq();

  while (1)
 800585e:	e7fe      	b.n	800585e <Error_Handler+0x16>
 8005860:	08015788 	.word	0x08015788

08005864 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
	switch(State)
 8005868:	4b4f      	ldr	r3, [pc, #316]	; (80059a8 <MenuTFT+0x144>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b08      	cmp	r3, #8
 800586e:	f200 8098 	bhi.w	80059a2 <MenuTFT+0x13e>
 8005872:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <MenuTFT+0x14>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	0800589d 	.word	0x0800589d
 800587c:	080058af 	.word	0x080058af
 8005880:	080058e3 	.word	0x080058e3
 8005884:	08005913 	.word	0x08005913
 8005888:	08005931 	.word	0x08005931
 800588c:	080058fb 	.word	0x080058fb
 8005890:	08005949 	.word	0x08005949
 8005894:	08005967 	.word	0x08005967
 8005898:	08005985 	.word	0x08005985
	{
	case MENUTFT_INIT:
		system_init();
 800589c:	f7fd fb88 	bl	8002fb0 <system_init>
		State = MENUTFT_PARAMETERS;
 80058a0:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <MenuTFT+0x144>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 80058a6:	4b41      	ldr	r3, [pc, #260]	; (80059ac <MenuTFT+0x148>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	701a      	strb	r2, [r3, #0]
		break;
 80058ac:	e079      	b.n	80059a2 <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 80058ae:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <MenuTFT+0x148>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d112      	bne.n	80058dc <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 80058b6:	4b3e      	ldr	r3, [pc, #248]	; (80059b0 <MenuTFT+0x14c>)
 80058b8:	edd3 7a00 	vldr	s15, [r3]
 80058bc:	4b3d      	ldr	r3, [pc, #244]	; (80059b4 <MenuTFT+0x150>)
 80058be:	ed93 7a00 	vldr	s14, [r3]
 80058c2:	eeb0 1a47 	vmov.f32	s2, s14
 80058c6:	2100      	movs	r1, #0
 80058c8:	2000      	movs	r0, #0
 80058ca:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80059b8 <MenuTFT+0x154>
 80058ce:	eeb0 0a67 	vmov.f32	s0, s15
 80058d2:	f7fd fce5 	bl	80032a0 <showCurrentParameters>
			StateChangeFlag = 0;
 80058d6:	4b35      	ldr	r3, [pc, #212]	; (80059ac <MenuTFT+0x148>)
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 80058dc:	f000 f874 	bl	80059c8 <TouchParametersActivity>
		break;
 80058e0:	e05f      	b.n	80059a2 <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 80058e2:	4b32      	ldr	r3, [pc, #200]	; (80059ac <MenuTFT+0x148>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d104      	bne.n	80058f4 <MenuTFT+0x90>
		{
			showControlPanel();
 80058ea:	f7fd fe23 	bl	8003534 <showControlPanel>
			StateChangeFlag = 0;
 80058ee:	4b2f      	ldr	r3, [pc, #188]	; (80059ac <MenuTFT+0x148>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 80058f4:	f000 f8c8 	bl	8005a88 <TouchSwitchActivity>
		break;
 80058f8:	e053      	b.n	80059a2 <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 80058fa:	4b2c      	ldr	r3, [pc, #176]	; (80059ac <MenuTFT+0x148>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d104      	bne.n	800590c <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8005902:	f7fd fef1 	bl	80036e8 <showLightsControlPanel>
			StateChangeFlag = 0;
 8005906:	4b29      	ldr	r3, [pc, #164]	; (80059ac <MenuTFT+0x148>)
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 800590c:	f000 faa4 	bl	8005e58 <TouchLightsActivity>
		break;
 8005910:	e047      	b.n	80059a2 <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8005912:	4b26      	ldr	r3, [pc, #152]	; (80059ac <MenuTFT+0x148>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d107      	bne.n	800592a <MenuTFT+0xc6>
		{
			showClockSetPanel();
 800591a:	f7fd ffbd 	bl	8003898 <showClockSetPanel>
			ClockChangeFlag = 1;
 800591e:	4b27      	ldr	r3, [pc, #156]	; (80059bc <MenuTFT+0x158>)
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005924:	4b21      	ldr	r3, [pc, #132]	; (80059ac <MenuTFT+0x148>)
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 800592a:	f000 fc6b 	bl	8006204 <TouchClockActivity>
		break;
 800592e:	e038      	b.n	80059a2 <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8005930:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <MenuTFT+0x148>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d104      	bne.n	8005942 <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005938:	f7fe f916 	bl	8003b68 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 800593c:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <MenuTFT+0x148>)
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8005942:	f000 fe01 	bl	8006548 <TouchPredefinedActivityActivity>
		break;
 8005946:	e02c      	b.n	80059a2 <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005948:	4b18      	ldr	r3, [pc, #96]	; (80059ac <MenuTFT+0x148>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <MenuTFT+0xfc>
		{
			showWSLedPanel();
 8005950:	f7fe fa1a 	bl	8003d88 <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005954:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <MenuTFT+0x15c>)
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800595a:	4b14      	ldr	r3, [pc, #80]	; (80059ac <MenuTFT+0x148>)
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8005960:	f000 ff1a 	bl	8006798 <TouchWSLedActivity>
		break;
 8005964:	e01d      	b.n	80059a2 <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005966:	4b11      	ldr	r3, [pc, #68]	; (80059ac <MenuTFT+0x148>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d107      	bne.n	800597e <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 800596e:	f7fe ffb7 	bl	80048e0 <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <MenuTFT+0x160>)
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <MenuTFT+0x148>)
 800597a:	2200      	movs	r2, #0
 800597c:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 800597e:	f001 f8b7 	bl	8006af0 <Schedule1Activity>
		break;
 8005982:	e00e      	b.n	80059a2 <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8005984:	4b09      	ldr	r3, [pc, #36]	; (80059ac <MenuTFT+0x148>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d107      	bne.n	800599c <MenuTFT+0x138>
		{
			showSchedule2Panel();
 800598c:	f7ff f83c 	bl	8004a08 <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8005990:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <MenuTFT+0x160>)
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <MenuTFT+0x148>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 800599c:	f001 f9ae 	bl	8006cfc <Schedule2Activity>
		break;
 80059a0:	bf00      	nop
	}
}
 80059a2:	bf00      	nop
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20000284 	.word	0x20000284
 80059ac:	20000255 	.word	0x20000255
 80059b0:	20000288 	.word	0x20000288
 80059b4:	20000290 	.word	0x20000290
 80059b8:	00000000 	.word	0x00000000
 80059bc:	20000256 	.word	0x20000256
 80059c0:	20000257 	.word	0x20000257
 80059c4:	20000258 	.word	0x20000258

080059c8 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80059ce:	f7fc fc5d 	bl	800228c <XPT2046_IsTouched>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d04c      	beq.n	8005a72 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80059d8:	f003 fb30 	bl	800903c <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b27      	ldr	r3, [pc, #156]	; (8005a7c <TouchParametersActivity+0xb4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059e8:	d343      	bcc.n	8005a72 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80059ea:	1d3a      	adds	r2, r7, #4
 80059ec:	1dbb      	adds	r3, r7, #6
 80059ee:	4611      	mov	r1, r2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fc fc0d 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	2b09      	cmp	r3, #9
 80059fa:	d90f      	bls.n	8005a1c <TouchParametersActivity+0x54>
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	2b6e      	cmp	r3, #110	; 0x6e
 8005a00:	d80c      	bhi.n	8005a1c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005a02:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005a04:	2bd7      	cmp	r3, #215	; 0xd7
 8005a06:	d909      	bls.n	8005a1c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005a08:	88bb      	ldrh	r3, [r7, #4]
 8005a0a:	2bec      	cmp	r3, #236	; 0xec
 8005a0c:	d806      	bhi.n	8005a1c <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8005a0e:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <TouchParametersActivity+0xb8>)
 8005a10:	2205      	movs	r2, #5
 8005a12:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005a14:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <TouchParametersActivity+0xbc>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e025      	b.n	8005a68 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	2bdb      	cmp	r3, #219	; 0xdb
 8005a20:	d910      	bls.n	8005a44 <TouchParametersActivity+0x7c>
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005a28:	d20c      	bcs.n	8005a44 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005a2a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005a2c:	2bd7      	cmp	r3, #215	; 0xd7
 8005a2e:	d909      	bls.n	8005a44 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005a30:	88bb      	ldrh	r3, [r7, #4]
 8005a32:	2bec      	cmp	r3, #236	; 0xec
 8005a34:	d806      	bhi.n	8005a44 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005a36:	4b12      	ldr	r3, [pc, #72]	; (8005a80 <TouchParametersActivity+0xb8>)
 8005a38:	2202      	movs	r2, #2
 8005a3a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005a3c:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <TouchParametersActivity+0xbc>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	e011      	b.n	8005a68 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	2b77      	cmp	r3, #119	; 0x77
 8005a48:	d90e      	bls.n	8005a68 <TouchParametersActivity+0xa0>
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	2bd2      	cmp	r3, #210	; 0xd2
 8005a4e:	d80b      	bhi.n	8005a68 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005a50:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005a52:	2bd7      	cmp	r3, #215	; 0xd7
 8005a54:	d908      	bls.n	8005a68 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005a56:	88bb      	ldrh	r3, [r7, #4]
 8005a58:	2bec      	cmp	r3, #236	; 0xec
 8005a5a:	d805      	bhi.n	8005a68 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8005a5c:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <TouchParametersActivity+0xb8>)
 8005a5e:	2203      	movs	r2, #3
 8005a60:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005a62:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <TouchParametersActivity+0xbc>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8005a68:	f003 fae8 	bl	800903c <HAL_GetTick>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	4a03      	ldr	r2, [pc, #12]	; (8005a7c <TouchParametersActivity+0xb4>)
 8005a70:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000280 	.word	0x20000280
 8005a80:	20000284 	.word	0x20000284
 8005a84:	20000255 	.word	0x20000255

08005a88 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005a8e:	f7fc fbfd 	bl	800228c <XPT2046_IsTouched>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 81ce 	beq.w	8005e36 <TouchSwitchActivity+0x3ae>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005a9a:	f003 facf 	bl	800903c <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	4bad      	ldr	r3, [pc, #692]	; (8005d58 <TouchSwitchActivity+0x2d0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aaa:	f0c0 81c4 	bcc.w	8005e36 <TouchSwitchActivity+0x3ae>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005aae:	1d3a      	adds	r2, r7, #4
 8005ab0:	1dbb      	adds	r3, r7, #6
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fc fbab 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	2b09      	cmp	r3, #9
 8005abe:	d90f      	bls.n	8005ae0 <TouchSwitchActivity+0x58>
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	2b6e      	cmp	r3, #110	; 0x6e
 8005ac4:	d80c      	bhi.n	8005ae0 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005ac6:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ac8:	2bd7      	cmp	r3, #215	; 0xd7
 8005aca:	d909      	bls.n	8005ae0 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005acc:	88bb      	ldrh	r3, [r7, #4]
 8005ace:	2bec      	cmp	r3, #236	; 0xec
 8005ad0:	d806      	bhi.n	8005ae0 <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 8005ad2:	4ba2      	ldr	r3, [pc, #648]	; (8005d5c <TouchSwitchActivity+0x2d4>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ad8:	4ba1      	ldr	r3, [pc, #644]	; (8005d60 <TouchSwitchActivity+0x2d8>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e1a5      	b.n	8005e2c <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	2bdb      	cmp	r3, #219	; 0xdb
 8005ae4:	d910      	bls.n	8005b08 <TouchSwitchActivity+0x80>
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005aec:	d20c      	bcs.n	8005b08 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005aee:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005af0:	2bd7      	cmp	r3, #215	; 0xd7
 8005af2:	d909      	bls.n	8005b08 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005af4:	88bb      	ldrh	r3, [r7, #4]
 8005af6:	2bec      	cmp	r3, #236	; 0xec
 8005af8:	d806      	bhi.n	8005b08 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 8005afa:	4b98      	ldr	r3, [pc, #608]	; (8005d5c <TouchSwitchActivity+0x2d4>)
 8005afc:	2205      	movs	r2, #5
 8005afe:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005b00:	4b97      	ldr	r3, [pc, #604]	; (8005d60 <TouchSwitchActivity+0x2d8>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e191      	b.n	8005e2c <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	2b77      	cmp	r3, #119	; 0x77
 8005b0c:	d90f      	bls.n	8005b2e <TouchSwitchActivity+0xa6>
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	2bd2      	cmp	r3, #210	; 0xd2
 8005b12:	d80c      	bhi.n	8005b2e <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005b14:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005b16:	2bd7      	cmp	r3, #215	; 0xd7
 8005b18:	d909      	bls.n	8005b2e <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005b1a:	88bb      	ldrh	r3, [r7, #4]
 8005b1c:	2bec      	cmp	r3, #236	; 0xec
 8005b1e:	d806      	bhi.n	8005b2e <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 8005b20:	4b8e      	ldr	r3, [pc, #568]	; (8005d5c <TouchSwitchActivity+0x2d4>)
 8005b22:	2204      	movs	r2, #4
 8005b24:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005b26:	4b8e      	ldr	r3, [pc, #568]	; (8005d60 <TouchSwitchActivity+0x2d8>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e17e      	b.n	8005e2c <TouchSwitchActivity+0x3a4>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005b34:	f0c0 817a 	bcc.w	8005e2c <TouchSwitchActivity+0x3a4>
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8005b3e:	f080 8175 	bcs.w	8005e2c <TouchSwitchActivity+0x3a4>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005b42:	4888      	ldr	r0, [pc, #544]	; (8005d64 <TouchSwitchActivity+0x2dc>)
 8005b44:	f7fb fdd4 	bl	80016f0 <EF_SetFont>
				//
				// FIRST SWITCH
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8005b48:	88bb      	ldrh	r3, [r7, #4]
 8005b4a:	2b40      	cmp	r3, #64	; 0x40
 8005b4c:	d954      	bls.n	8005bf8 <TouchSwitchActivity+0x170>
 8005b4e:	88bb      	ldrh	r3, [r7, #4]
 8005b50:	2b56      	cmp	r3, #86	; 0x56
 8005b52:	d851      	bhi.n	8005bf8 <TouchSwitchActivity+0x170>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 8005b54:	4b84      	ldr	r3, [pc, #528]	; (8005d68 <TouchSwitchActivity+0x2e0>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d026      	beq.n	8005baa <TouchSwitchActivity+0x122>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8005b5c:	2006      	movs	r0, #6
 8005b5e:	f002 fa67 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005b62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	2305      	movs	r3, #5
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	2315      	movs	r3, #21
 8005b6e:	2221      	movs	r2, #33	; 0x21
 8005b70:	2141      	movs	r1, #65	; 0x41
 8005b72:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005b76:	f7fb fd6a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005b7a:	497c      	ldr	r1, [pc, #496]	; (8005d6c <TouchSwitchActivity+0x2e4>)
 8005b7c:	487c      	ldr	r0, [pc, #496]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005b7e:	f00a fe25 	bl	80107cc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005b82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005b86:	9301      	str	r3, [sp, #4]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2243      	movs	r2, #67	; 0x43
 8005b90:	f240 1111 	movw	r1, #273	; 0x111
 8005b94:	4876      	ldr	r0, [pc, #472]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005b96:	f7fb ffc5 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 8005b9a:	4b73      	ldr	r3, [pc, #460]	; (8005d68 <TouchSwitchActivity+0x2e0>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 0);
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	f7fc feea 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8005ba8:	e13d      	b.n	8005e26 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8005baa:	2005      	movs	r0, #5
 8005bac:	f002 fa40 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005bb0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	2305      	movs	r3, #5
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	2315      	movs	r3, #21
 8005bbc:	2221      	movs	r2, #33	; 0x21
 8005bbe:	2141      	movs	r1, #65	; 0x41
 8005bc0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005bc4:	f7fb fd43 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005bc8:	496a      	ldr	r1, [pc, #424]	; (8005d74 <TouchSwitchActivity+0x2ec>)
 8005bca:	4869      	ldr	r0, [pc, #420]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005bcc:	f00a fdfe 	bl	80107cc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005bd0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2243      	movs	r2, #67	; 0x43
 8005bde:	f240 1111 	movw	r1, #273	; 0x111
 8005be2:	4863      	ldr	r0, [pc, #396]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005be4:	f7fb ff9e 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 8005be8:	4b5f      	ldr	r3, [pc, #380]	; (8005d68 <TouchSwitchActivity+0x2e0>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 1);
 8005bee:	2101      	movs	r1, #1
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7fc fec3 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8005bf6:	e116      	b.n	8005e26 <TouchSwitchActivity+0x39e>
					}

				}
				//
				// SECOND SWITCH
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8005bf8:	88bb      	ldrh	r3, [r7, #4]
 8005bfa:	2b5e      	cmp	r3, #94	; 0x5e
 8005bfc:	d954      	bls.n	8005ca8 <TouchSwitchActivity+0x220>
 8005bfe:	88bb      	ldrh	r3, [r7, #4]
 8005c00:	2b74      	cmp	r3, #116	; 0x74
 8005c02:	d851      	bhi.n	8005ca8 <TouchSwitchActivity+0x220>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 8005c04:	4b58      	ldr	r3, [pc, #352]	; (8005d68 <TouchSwitchActivity+0x2e0>)
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d026      	beq.n	8005c5a <TouchSwitchActivity+0x1d2>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8005c0c:	2008      	movs	r0, #8
 8005c0e:	f002 fa0f 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005c12:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	2305      	movs	r3, #5
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	2315      	movs	r3, #21
 8005c1e:	2221      	movs	r2, #33	; 0x21
 8005c20:	215f      	movs	r1, #95	; 0x5f
 8005c22:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005c26:	f7fb fd12 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005c2a:	4950      	ldr	r1, [pc, #320]	; (8005d6c <TouchSwitchActivity+0x2e4>)
 8005c2c:	4850      	ldr	r0, [pc, #320]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005c2e:	f00a fdcd 	bl	80107cc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005c32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2261      	movs	r2, #97	; 0x61
 8005c40:	f240 1111 	movw	r1, #273	; 0x111
 8005c44:	484a      	ldr	r0, [pc, #296]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005c46:	f7fb ff6d 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 8005c4a:	4b47      	ldr	r3, [pc, #284]	; (8005d68 <TouchSwitchActivity+0x2e0>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 0);
 8005c50:	2100      	movs	r1, #0
 8005c52:	2002      	movs	r0, #2
 8005c54:	f7fc fe92 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8005c58:	e0e5      	b.n	8005e26 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8005c5a:	2007      	movs	r0, #7
 8005c5c:	f002 f9e8 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005c60:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	2305      	movs	r3, #5
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	2315      	movs	r3, #21
 8005c6c:	2221      	movs	r2, #33	; 0x21
 8005c6e:	215f      	movs	r1, #95	; 0x5f
 8005c70:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005c74:	f7fb fceb 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005c78:	493e      	ldr	r1, [pc, #248]	; (8005d74 <TouchSwitchActivity+0x2ec>)
 8005c7a:	483d      	ldr	r0, [pc, #244]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005c7c:	f00a fda6 	bl	80107cc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005c80:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005c84:	9301      	str	r3, [sp, #4]
 8005c86:	2300      	movs	r3, #0
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2261      	movs	r2, #97	; 0x61
 8005c8e:	f240 1111 	movw	r1, #273	; 0x111
 8005c92:	4837      	ldr	r0, [pc, #220]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005c94:	f7fb ff46 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 8005c98:	4b33      	ldr	r3, [pc, #204]	; (8005d68 <TouchSwitchActivity+0x2e0>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 1);
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	2002      	movs	r0, #2
 8005ca2:	f7fc fe6b 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8005ca6:	e0be      	b.n	8005e26 <TouchSwitchActivity+0x39e>
					}
				}
				//
				// THIRD SWITCH
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8005ca8:	88bb      	ldrh	r3, [r7, #4]
 8005caa:	2b7c      	cmp	r3, #124	; 0x7c
 8005cac:	d964      	bls.n	8005d78 <TouchSwitchActivity+0x2f0>
 8005cae:	88bb      	ldrh	r3, [r7, #4]
 8005cb0:	2b92      	cmp	r3, #146	; 0x92
 8005cb2:	d861      	bhi.n	8005d78 <TouchSwitchActivity+0x2f0>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 8005cb4:	4b2c      	ldr	r3, [pc, #176]	; (8005d68 <TouchSwitchActivity+0x2e0>)
 8005cb6:	789b      	ldrb	r3, [r3, #2]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d026      	beq.n	8005d0a <TouchSwitchActivity+0x282>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8005cbc:	200a      	movs	r0, #10
 8005cbe:	f002 f9b7 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005cc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	2305      	movs	r3, #5
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	2315      	movs	r3, #21
 8005cce:	2221      	movs	r2, #33	; 0x21
 8005cd0:	217d      	movs	r1, #125	; 0x7d
 8005cd2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005cd6:	f7fb fcba 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005cda:	4924      	ldr	r1, [pc, #144]	; (8005d6c <TouchSwitchActivity+0x2e4>)
 8005cdc:	4824      	ldr	r0, [pc, #144]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005cde:	f00a fd75 	bl	80107cc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005ce2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	2300      	movs	r3, #0
 8005cee:	227f      	movs	r2, #127	; 0x7f
 8005cf0:	f240 1111 	movw	r1, #273	; 0x111
 8005cf4:	481e      	ldr	r0, [pc, #120]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005cf6:	f7fb ff15 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 8005cfa:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <TouchSwitchActivity+0x2e0>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 0);
 8005d00:	2100      	movs	r1, #0
 8005d02:	2003      	movs	r0, #3
 8005d04:	f7fc fe3a 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8005d08:	e08d      	b.n	8005e26 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8005d0a:	2009      	movs	r0, #9
 8005d0c:	f002 f990 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005d10:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	2305      	movs	r3, #5
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2315      	movs	r3, #21
 8005d1c:	2221      	movs	r2, #33	; 0x21
 8005d1e:	217d      	movs	r1, #125	; 0x7d
 8005d20:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005d24:	f7fb fc93 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005d28:	4912      	ldr	r1, [pc, #72]	; (8005d74 <TouchSwitchActivity+0x2ec>)
 8005d2a:	4811      	ldr	r0, [pc, #68]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005d2c:	f00a fd4e 	bl	80107cc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005d30:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005d34:	9301      	str	r3, [sp, #4]
 8005d36:	2300      	movs	r3, #0
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	227f      	movs	r2, #127	; 0x7f
 8005d3e:	f240 1111 	movw	r1, #273	; 0x111
 8005d42:	480b      	ldr	r0, [pc, #44]	; (8005d70 <TouchSwitchActivity+0x2e8>)
 8005d44:	f7fb feee 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <TouchSwitchActivity+0x2e0>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 1);
 8005d4e:	2101      	movs	r1, #1
 8005d50:	2003      	movs	r0, #3
 8005d52:	f7fc fe13 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8005d56:	e066      	b.n	8005e26 <TouchSwitchActivity+0x39e>
 8005d58:	20000280 	.word	0x20000280
 8005d5c:	20000284 	.word	0x20000284
 8005d60:	20000255 	.word	0x20000255
 8005d64:	08015788 	.word	0x08015788
 8005d68:	2000029c 	.word	0x2000029c
 8005d6c:	080148ec 	.word	0x080148ec
 8005d70:	200002f0 	.word	0x200002f0
 8005d74:	080148f0 	.word	0x080148f0
					}
				}
				//
				// FOURTH SWITCH
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8005d78:	88bb      	ldrh	r3, [r7, #4]
 8005d7a:	2b9a      	cmp	r3, #154	; 0x9a
 8005d7c:	d953      	bls.n	8005e26 <TouchSwitchActivity+0x39e>
 8005d7e:	88bb      	ldrh	r3, [r7, #4]
 8005d80:	2bb0      	cmp	r3, #176	; 0xb0
 8005d82:	d850      	bhi.n	8005e26 <TouchSwitchActivity+0x39e>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8005d84:	4b2e      	ldr	r3, [pc, #184]	; (8005e40 <TouchSwitchActivity+0x3b8>)
 8005d86:	78db      	ldrb	r3, [r3, #3]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d026      	beq.n	8005dda <TouchSwitchActivity+0x352>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8005d8c:	200c      	movs	r0, #12
 8005d8e:	f002 f94f 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005d92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	2305      	movs	r3, #5
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2315      	movs	r3, #21
 8005d9e:	2221      	movs	r2, #33	; 0x21
 8005da0:	219b      	movs	r1, #155	; 0x9b
 8005da2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005da6:	f7fb fc52 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005daa:	4926      	ldr	r1, [pc, #152]	; (8005e44 <TouchSwitchActivity+0x3bc>)
 8005dac:	4826      	ldr	r0, [pc, #152]	; (8005e48 <TouchSwitchActivity+0x3c0>)
 8005dae:	f00a fd0d 	bl	80107cc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005db2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	2300      	movs	r3, #0
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	229d      	movs	r2, #157	; 0x9d
 8005dc0:	f240 1111 	movw	r1, #273	; 0x111
 8005dc4:	4820      	ldr	r0, [pc, #128]	; (8005e48 <TouchSwitchActivity+0x3c0>)
 8005dc6:	f7fb fead 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 8005dca:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <TouchSwitchActivity+0x3b8>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 0);
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	2004      	movs	r0, #4
 8005dd4:	f7fc fdd2 	bl	800297c <EEPROM_RelayStateUpdate>
 8005dd8:	e025      	b.n	8005e26 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8005dda:	200b      	movs	r0, #11
 8005ddc:	f002 f928 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005de0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	2305      	movs	r3, #5
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	2315      	movs	r3, #21
 8005dec:	2221      	movs	r2, #33	; 0x21
 8005dee:	219b      	movs	r1, #155	; 0x9b
 8005df0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005df4:	f7fb fc2b 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005df8:	4914      	ldr	r1, [pc, #80]	; (8005e4c <TouchSwitchActivity+0x3c4>)
 8005dfa:	4813      	ldr	r0, [pc, #76]	; (8005e48 <TouchSwitchActivity+0x3c0>)
 8005dfc:	f00a fce6 	bl	80107cc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005e00:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	2300      	movs	r3, #0
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	229d      	movs	r2, #157	; 0x9d
 8005e0e:	f240 1111 	movw	r1, #273	; 0x111
 8005e12:	480d      	ldr	r0, [pc, #52]	; (8005e48 <TouchSwitchActivity+0x3c0>)
 8005e14:	f7fb fe86 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 8005e18:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <TouchSwitchActivity+0x3b8>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 1);
 8005e1e:	2101      	movs	r1, #1
 8005e20:	2004      	movs	r0, #4
 8005e22:	f7fc fdab 	bl	800297c <EEPROM_RelayStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8005e26:	480a      	ldr	r0, [pc, #40]	; (8005e50 <TouchSwitchActivity+0x3c8>)
 8005e28:	f7fb fc62 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 8005e2c:	f003 f906 	bl	800903c <HAL_GetTick>
 8005e30:	4603      	mov	r3, r0
 8005e32:	4a08      	ldr	r2, [pc, #32]	; (8005e54 <TouchSwitchActivity+0x3cc>)
 8005e34:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	2000029c 	.word	0x2000029c
 8005e44:	080148ec 	.word	0x080148ec
 8005e48:	200002f0 	.word	0x200002f0
 8005e4c:	080148f0 	.word	0x080148f0
 8005e50:	08017700 	.word	0x08017700
 8005e54:	20000280 	.word	0x20000280

08005e58 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005e5e:	f7fc fa15 	bl	800228c <XPT2046_IsTouched>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 81bc 	beq.w	80061e2 <TouchLightsActivity+0x38a>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005e6a:	f003 f8e7 	bl	800903c <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	4ba6      	ldr	r3, [pc, #664]	; (800610c <TouchLightsActivity+0x2b4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e7a:	f0c0 81b2 	bcc.w	80061e2 <TouchLightsActivity+0x38a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005e7e:	1d3a      	adds	r2, r7, #4
 8005e80:	1dbb      	adds	r3, r7, #6
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fc f9c3 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	2b09      	cmp	r3, #9
 8005e8e:	d90f      	bls.n	8005eb0 <TouchLightsActivity+0x58>
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	2b6e      	cmp	r3, #110	; 0x6e
 8005e94:	d80c      	bhi.n	8005eb0 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e96:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e98:	2bd7      	cmp	r3, #215	; 0xd7
 8005e9a:	d909      	bls.n	8005eb0 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e9c:	88bb      	ldrh	r3, [r7, #4]
 8005e9e:	2bec      	cmp	r3, #236	; 0xec
 8005ea0:	d806      	bhi.n	8005eb0 <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 8005ea2:	4b9b      	ldr	r3, [pc, #620]	; (8006110 <TouchLightsActivity+0x2b8>)
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ea8:	4b9a      	ldr	r3, [pc, #616]	; (8006114 <TouchLightsActivity+0x2bc>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e193      	b.n	80061d8 <TouchLightsActivity+0x380>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	2bdb      	cmp	r3, #219	; 0xdb
 8005eb4:	d910      	bls.n	8005ed8 <TouchLightsActivity+0x80>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005ebc:	d20c      	bcs.n	8005ed8 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005ebe:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ec0:	2bd7      	cmp	r3, #215	; 0xd7
 8005ec2:	d909      	bls.n	8005ed8 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005ec4:	88bb      	ldrh	r3, [r7, #4]
 8005ec6:	2bec      	cmp	r3, #236	; 0xec
 8005ec8:	d806      	bhi.n	8005ed8 <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 8005eca:	4b91      	ldr	r3, [pc, #580]	; (8006110 <TouchLightsActivity+0x2b8>)
 8005ecc:	2201      	movs	r2, #1
 8005ece:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ed0:	4b90      	ldr	r3, [pc, #576]	; (8006114 <TouchLightsActivity+0x2bc>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	e17f      	b.n	80061d8 <TouchLightsActivity+0x380>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	2b77      	cmp	r3, #119	; 0x77
 8005edc:	d90f      	bls.n	8005efe <TouchLightsActivity+0xa6>
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	2bd2      	cmp	r3, #210	; 0xd2
 8005ee2:	d80c      	bhi.n	8005efe <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005ee4:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005ee6:	2bd7      	cmp	r3, #215	; 0xd7
 8005ee8:	d909      	bls.n	8005efe <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005eea:	88bb      	ldrh	r3, [r7, #4]
 8005eec:	2bec      	cmp	r3, #236	; 0xec
 8005eee:	d806      	bhi.n	8005efe <TouchLightsActivity+0xa6>
			{
				State = MENUTFT_WS_LED;
 8005ef0:	4b87      	ldr	r3, [pc, #540]	; (8006110 <TouchLightsActivity+0x2b8>)
 8005ef2:	2206      	movs	r2, #6
 8005ef4:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ef6:	4b87      	ldr	r3, [pc, #540]	; (8006114 <TouchLightsActivity+0x2bc>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e16c      	b.n	80061d8 <TouchLightsActivity+0x380>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	2bc7      	cmp	r3, #199	; 0xc7
 8005f02:	f240 8169 	bls.w	80061d8 <TouchLightsActivity+0x380>
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2be9      	cmp	r3, #233	; 0xe9
 8005f0a:	f200 8165 	bhi.w	80061d8 <TouchLightsActivity+0x380>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005f0e:	4882      	ldr	r0, [pc, #520]	; (8006118 <TouchLightsActivity+0x2c0>)
 8005f10:	f7fb fbee 	bl	80016f0 <EF_SetFont>

				//
				// FIRST LIGHT
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8005f14:	88bb      	ldrh	r3, [r7, #4]
 8005f16:	2b40      	cmp	r3, #64	; 0x40
 8005f18:	d950      	bls.n	8005fbc <TouchLightsActivity+0x164>
 8005f1a:	88bb      	ldrh	r3, [r7, #4]
 8005f1c:	2b56      	cmp	r3, #86	; 0x56
 8005f1e:	d84d      	bhi.n	8005fbc <TouchLightsActivity+0x164>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 8005f20:	4b7e      	ldr	r3, [pc, #504]	; (800611c <TouchLightsActivity+0x2c4>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d024      	beq.n	8005f72 <TouchLightsActivity+0x11a>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8005f28:	200e      	movs	r0, #14
 8005f2a:	f002 f881 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005f2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	2305      	movs	r3, #5
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	2315      	movs	r3, #21
 8005f3a:	2221      	movs	r2, #33	; 0x21
 8005f3c:	2141      	movs	r1, #65	; 0x41
 8005f3e:	20c8      	movs	r0, #200	; 0xc8
 8005f40:	f7fb fb85 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005f44:	4976      	ldr	r1, [pc, #472]	; (8006120 <TouchLightsActivity+0x2c8>)
 8005f46:	4877      	ldr	r0, [pc, #476]	; (8006124 <TouchLightsActivity+0x2cc>)
 8005f48:	f00a fc40 	bl	80107cc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005f4c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2300      	movs	r3, #0
 8005f58:	2243      	movs	r2, #67	; 0x43
 8005f5a:	21cb      	movs	r1, #203	; 0xcb
 8005f5c:	4871      	ldr	r0, [pc, #452]	; (8006124 <TouchLightsActivity+0x2cc>)
 8005f5e:	f7fb fde1 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 8005f62:	4b6e      	ldr	r3, [pc, #440]	; (800611c <TouchLightsActivity+0x2c4>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
						EEPROM_LightStateUpdate(1, 0);
 8005f68:	2100      	movs	r1, #0
 8005f6a:	2001      	movs	r0, #1
 8005f6c:	f7fc fd3f 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[0] >= 1) // if is ON
 8005f70:	e12f      	b.n	80061d2 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8005f72:	200d      	movs	r0, #13
 8005f74:	f002 f85c 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005f78:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	2305      	movs	r3, #5
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	2315      	movs	r3, #21
 8005f84:	2221      	movs	r2, #33	; 0x21
 8005f86:	2141      	movs	r1, #65	; 0x41
 8005f88:	20c8      	movs	r0, #200	; 0xc8
 8005f8a:	f7fb fb60 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005f8e:	4966      	ldr	r1, [pc, #408]	; (8006128 <TouchLightsActivity+0x2d0>)
 8005f90:	4864      	ldr	r0, [pc, #400]	; (8006124 <TouchLightsActivity+0x2cc>)
 8005f92:	f00a fc1b 	bl	80107cc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005f96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2243      	movs	r2, #67	; 0x43
 8005fa4:	21cb      	movs	r1, #203	; 0xcb
 8005fa6:	485f      	ldr	r0, [pc, #380]	; (8006124 <TouchLightsActivity+0x2cc>)
 8005fa8:	f7fb fdbc 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 8005fac:	4b5b      	ldr	r3, [pc, #364]	; (800611c <TouchLightsActivity+0x2c4>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	701a      	strb	r2, [r3, #0]
						EEPROM_LightStateUpdate(1, 1);
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	f7fc fd1a 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[0] >= 1) // if is ON
 8005fba:	e10a      	b.n	80061d2 <TouchLightsActivity+0x37a>
					}
				}
				//
				// SECOND LIGHT
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8005fbc:	88bb      	ldrh	r3, [r7, #4]
 8005fbe:	2b5e      	cmp	r3, #94	; 0x5e
 8005fc0:	d950      	bls.n	8006064 <TouchLightsActivity+0x20c>
 8005fc2:	88bb      	ldrh	r3, [r7, #4]
 8005fc4:	2b74      	cmp	r3, #116	; 0x74
 8005fc6:	d84d      	bhi.n	8006064 <TouchLightsActivity+0x20c>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 8005fc8:	4b54      	ldr	r3, [pc, #336]	; (800611c <TouchLightsActivity+0x2c4>)
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d024      	beq.n	800601a <TouchLightsActivity+0x1c2>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8005fd0:	2010      	movs	r0, #16
 8005fd2:	f002 f82d 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005fd6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	2305      	movs	r3, #5
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	2315      	movs	r3, #21
 8005fe2:	2221      	movs	r2, #33	; 0x21
 8005fe4:	215f      	movs	r1, #95	; 0x5f
 8005fe6:	20c8      	movs	r0, #200	; 0xc8
 8005fe8:	f7fb fb31 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005fec:	494c      	ldr	r1, [pc, #304]	; (8006120 <TouchLightsActivity+0x2c8>)
 8005fee:	484d      	ldr	r0, [pc, #308]	; (8006124 <TouchLightsActivity+0x2cc>)
 8005ff0:	f00a fbec 	bl	80107cc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005ff4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ff8:	9301      	str	r3, [sp, #4]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	2300      	movs	r3, #0
 8006000:	2261      	movs	r2, #97	; 0x61
 8006002:	21cb      	movs	r1, #203	; 0xcb
 8006004:	4847      	ldr	r0, [pc, #284]	; (8006124 <TouchLightsActivity+0x2cc>)
 8006006:	f7fb fd8d 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 800600a:	4b44      	ldr	r3, [pc, #272]	; (800611c <TouchLightsActivity+0x2c4>)
 800600c:	2200      	movs	r2, #0
 800600e:	705a      	strb	r2, [r3, #1]
						EEPROM_LightStateUpdate(2, 0);
 8006010:	2100      	movs	r1, #0
 8006012:	2002      	movs	r0, #2
 8006014:	f7fc fceb 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[1] >= 1) // if is ON
 8006018:	e0db      	b.n	80061d2 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 800601a:	200f      	movs	r0, #15
 800601c:	f002 f808 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8006020:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	2305      	movs	r3, #5
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	2315      	movs	r3, #21
 800602c:	2221      	movs	r2, #33	; 0x21
 800602e:	215f      	movs	r1, #95	; 0x5f
 8006030:	20c8      	movs	r0, #200	; 0xc8
 8006032:	f7fb fb0c 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8006036:	493c      	ldr	r1, [pc, #240]	; (8006128 <TouchLightsActivity+0x2d0>)
 8006038:	483a      	ldr	r0, [pc, #232]	; (8006124 <TouchLightsActivity+0x2cc>)
 800603a:	f00a fbc7 	bl	80107cc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800603e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	2300      	movs	r3, #0
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2300      	movs	r3, #0
 800604a:	2261      	movs	r2, #97	; 0x61
 800604c:	21cb      	movs	r1, #203	; 0xcb
 800604e:	4835      	ldr	r0, [pc, #212]	; (8006124 <TouchLightsActivity+0x2cc>)
 8006050:	f7fb fd68 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 8006054:	4b31      	ldr	r3, [pc, #196]	; (800611c <TouchLightsActivity+0x2c4>)
 8006056:	2201      	movs	r2, #1
 8006058:	705a      	strb	r2, [r3, #1]
						EEPROM_LightStateUpdate(2, 1);
 800605a:	2101      	movs	r1, #1
 800605c:	2002      	movs	r0, #2
 800605e:	f7fc fcc6 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[1] >= 1) // if is ON
 8006062:	e0b6      	b.n	80061d2 <TouchLightsActivity+0x37a>
					}
				}

				//
				// THIRD LIGHT
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8006064:	88bb      	ldrh	r3, [r7, #4]
 8006066:	2b7c      	cmp	r3, #124	; 0x7c
 8006068:	d960      	bls.n	800612c <TouchLightsActivity+0x2d4>
 800606a:	88bb      	ldrh	r3, [r7, #4]
 800606c:	2b92      	cmp	r3, #146	; 0x92
 800606e:	d85d      	bhi.n	800612c <TouchLightsActivity+0x2d4>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 8006070:	4b2a      	ldr	r3, [pc, #168]	; (800611c <TouchLightsActivity+0x2c4>)
 8006072:	789b      	ldrb	r3, [r3, #2]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d024      	beq.n	80060c2 <TouchLightsActivity+0x26a>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8006078:	2012      	movs	r0, #18
 800607a:	f001 ffd9 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800607e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	2305      	movs	r3, #5
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	2315      	movs	r3, #21
 800608a:	2221      	movs	r2, #33	; 0x21
 800608c:	217d      	movs	r1, #125	; 0x7d
 800608e:	20c8      	movs	r0, #200	; 0xc8
 8006090:	f7fb fadd 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8006094:	4922      	ldr	r1, [pc, #136]	; (8006120 <TouchLightsActivity+0x2c8>)
 8006096:	4823      	ldr	r0, [pc, #140]	; (8006124 <TouchLightsActivity+0x2cc>)
 8006098:	f00a fb98 	bl	80107cc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800609c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	2300      	movs	r3, #0
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	2300      	movs	r3, #0
 80060a8:	227f      	movs	r2, #127	; 0x7f
 80060aa:	21cb      	movs	r1, #203	; 0xcb
 80060ac:	481d      	ldr	r0, [pc, #116]	; (8006124 <TouchLightsActivity+0x2cc>)
 80060ae:	f7fb fd39 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 80060b2:	4b1a      	ldr	r3, [pc, #104]	; (800611c <TouchLightsActivity+0x2c4>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	709a      	strb	r2, [r3, #2]
						EEPROM_LightStateUpdate(3, 0);
 80060b8:	2100      	movs	r1, #0
 80060ba:	2003      	movs	r0, #3
 80060bc:	f7fc fc97 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[2] >= 1) // if is ON
 80060c0:	e087      	b.n	80061d2 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 80060c2:	2011      	movs	r0, #17
 80060c4:	f001 ffb4 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80060c8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	2305      	movs	r3, #5
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	2315      	movs	r3, #21
 80060d4:	2221      	movs	r2, #33	; 0x21
 80060d6:	217d      	movs	r1, #125	; 0x7d
 80060d8:	20c8      	movs	r0, #200	; 0xc8
 80060da:	f7fb fab8 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80060de:	4912      	ldr	r1, [pc, #72]	; (8006128 <TouchLightsActivity+0x2d0>)
 80060e0:	4810      	ldr	r0, [pc, #64]	; (8006124 <TouchLightsActivity+0x2cc>)
 80060e2:	f00a fb73 	bl	80107cc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80060e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	2300      	movs	r3, #0
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	2300      	movs	r3, #0
 80060f2:	227f      	movs	r2, #127	; 0x7f
 80060f4:	21cb      	movs	r1, #203	; 0xcb
 80060f6:	480b      	ldr	r0, [pc, #44]	; (8006124 <TouchLightsActivity+0x2cc>)
 80060f8:	f7fb fd14 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <TouchLightsActivity+0x2c4>)
 80060fe:	2201      	movs	r2, #1
 8006100:	709a      	strb	r2, [r3, #2]
						EEPROM_LightStateUpdate(3, 1);
 8006102:	2101      	movs	r1, #1
 8006104:	2003      	movs	r0, #3
 8006106:	f7fc fc72 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[2] >= 1) // if is ON
 800610a:	e062      	b.n	80061d2 <TouchLightsActivity+0x37a>
 800610c:	20000280 	.word	0x20000280
 8006110:	20000284 	.word	0x20000284
 8006114:	20000255 	.word	0x20000255
 8006118:	08015788 	.word	0x08015788
 800611c:	200002a0 	.word	0x200002a0
 8006120:	080148ec 	.word	0x080148ec
 8006124:	200002f0 	.word	0x200002f0
 8006128:	080148f0 	.word	0x080148f0
					}
				}

				//
				// FOURTH LIGHT
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 800612c:	88bb      	ldrh	r3, [r7, #4]
 800612e:	2b9a      	cmp	r3, #154	; 0x9a
 8006130:	d94f      	bls.n	80061d2 <TouchLightsActivity+0x37a>
 8006132:	88bb      	ldrh	r3, [r7, #4]
 8006134:	2bb0      	cmp	r3, #176	; 0xb0
 8006136:	d84c      	bhi.n	80061d2 <TouchLightsActivity+0x37a>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 8006138:	4b2c      	ldr	r3, [pc, #176]	; (80061ec <TouchLightsActivity+0x394>)
 800613a:	78db      	ldrb	r3, [r3, #3]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d024      	beq.n	800618a <TouchLightsActivity+0x332>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8006140:	2014      	movs	r0, #20
 8006142:	f001 ff75 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8006146:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	2305      	movs	r3, #5
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2315      	movs	r3, #21
 8006152:	2221      	movs	r2, #33	; 0x21
 8006154:	219b      	movs	r1, #155	; 0x9b
 8006156:	20c8      	movs	r0, #200	; 0xc8
 8006158:	f7fb fa79 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 800615c:	4924      	ldr	r1, [pc, #144]	; (80061f0 <TouchLightsActivity+0x398>)
 800615e:	4825      	ldr	r0, [pc, #148]	; (80061f4 <TouchLightsActivity+0x39c>)
 8006160:	f00a fb34 	bl	80107cc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8006164:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	2300      	movs	r3, #0
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2300      	movs	r3, #0
 8006170:	229d      	movs	r2, #157	; 0x9d
 8006172:	21cb      	movs	r1, #203	; 0xcb
 8006174:	481f      	ldr	r0, [pc, #124]	; (80061f4 <TouchLightsActivity+0x39c>)
 8006176:	f7fb fcd5 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 800617a:	4b1c      	ldr	r3, [pc, #112]	; (80061ec <TouchLightsActivity+0x394>)
 800617c:	2200      	movs	r2, #0
 800617e:	70da      	strb	r2, [r3, #3]
						EEPROM_LightStateUpdate(4, 0);
 8006180:	2100      	movs	r1, #0
 8006182:	2004      	movs	r0, #4
 8006184:	f7fc fc33 	bl	80029ee <EEPROM_LightStateUpdate>
 8006188:	e023      	b.n	80061d2 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 800618a:	2013      	movs	r0, #19
 800618c:	f001 ff50 	bl	8008030 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8006190:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	2305      	movs	r3, #5
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	2315      	movs	r3, #21
 800619c:	2221      	movs	r2, #33	; 0x21
 800619e:	219b      	movs	r1, #155	; 0x9b
 80061a0:	20c8      	movs	r0, #200	; 0xc8
 80061a2:	f7fb fa54 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80061a6:	4914      	ldr	r1, [pc, #80]	; (80061f8 <TouchLightsActivity+0x3a0>)
 80061a8:	4812      	ldr	r0, [pc, #72]	; (80061f4 <TouchLightsActivity+0x39c>)
 80061aa:	f00a fb0f 	bl	80107cc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80061ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	2300      	movs	r3, #0
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	2300      	movs	r3, #0
 80061ba:	229d      	movs	r2, #157	; 0x9d
 80061bc:	21cb      	movs	r1, #203	; 0xcb
 80061be:	480d      	ldr	r0, [pc, #52]	; (80061f4 <TouchLightsActivity+0x39c>)
 80061c0:	f7fb fcb0 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <TouchLightsActivity+0x394>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	70da      	strb	r2, [r3, #3]
						EEPROM_LightStateUpdate(4, 1);
 80061ca:	2101      	movs	r1, #1
 80061cc:	2004      	movs	r0, #4
 80061ce:	f7fc fc0e 	bl	80029ee <EEPROM_LightStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 80061d2:	480a      	ldr	r0, [pc, #40]	; (80061fc <TouchLightsActivity+0x3a4>)
 80061d4:	f7fb fa8c 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 80061d8:	f002 ff30 	bl	800903c <HAL_GetTick>
 80061dc:	4603      	mov	r3, r0
 80061de:	4a08      	ldr	r2, [pc, #32]	; (8006200 <TouchLightsActivity+0x3a8>)
 80061e0:	6013      	str	r3, [r2, #0]
		}
	}
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200002a0 	.word	0x200002a0
 80061f0:	080148ec 	.word	0x080148ec
 80061f4:	200002f0 	.word	0x200002f0
 80061f8:	080148f0 	.word	0x080148f0
 80061fc:	08017700 	.word	0x08017700
 8006200:	20000280 	.word	0x20000280

08006204 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800620a:	f7fc f83f 	bl	800228c <XPT2046_IsTouched>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8188 	beq.w	8006526 <TouchClockActivity+0x322>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006216:	48a0      	ldr	r0, [pc, #640]	; (8006498 <TouchClockActivity+0x294>)
 8006218:	f7fb fa6a 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800621c:	f002 ff0e 	bl	800903c <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	4b9e      	ldr	r3, [pc, #632]	; (800649c <TouchClockActivity+0x298>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800622c:	f0c0 817b 	bcc.w	8006526 <TouchClockActivity+0x322>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006230:	1d3a      	adds	r2, r7, #4
 8006232:	1dbb      	adds	r3, r7, #6
 8006234:	4611      	mov	r1, r2
 8006236:	4618      	mov	r0, r3
 8006238:	f7fb ffea 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 800623c:	4b98      	ldr	r3, [pc, #608]	; (80064a0 <TouchClockActivity+0x29c>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d114      	bne.n	800626e <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8006244:	f7fc faa6 	bl	8002794 <DS3231_GetHour>
 8006248:	4603      	mov	r3, r0
 800624a:	461a      	mov	r2, r3
 800624c:	4b95      	ldr	r3, [pc, #596]	; (80064a4 <TouchClockActivity+0x2a0>)
 800624e:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8006250:	f7fc faac 	bl	80027ac <DS3231_GetMinute>
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	4b93      	ldr	r3, [pc, #588]	; (80064a8 <TouchClockActivity+0x2a4>)
 800625a:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 800625c:	f7fc fa8e 	bl	800277c <DS3231_GetDayOfWeek>
 8006260:	4603      	mov	r3, r0
 8006262:	461a      	mov	r2, r3
 8006264:	4b91      	ldr	r3, [pc, #580]	; (80064ac <TouchClockActivity+0x2a8>)
 8006266:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8006268:	4b8d      	ldr	r3, [pc, #564]	; (80064a0 <TouchClockActivity+0x29c>)
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	2b09      	cmp	r3, #9
 8006272:	d90f      	bls.n	8006294 <TouchClockActivity+0x90>
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	2b6e      	cmp	r3, #110	; 0x6e
 8006278:	d80c      	bhi.n	8006294 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800627a:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800627c:	2bd7      	cmp	r3, #215	; 0xd7
 800627e:	d909      	bls.n	8006294 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006280:	88bb      	ldrh	r3, [r7, #4]
 8006282:	2bec      	cmp	r3, #236	; 0xec
 8006284:	d806      	bhi.n	8006294 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 8006286:	4b8a      	ldr	r3, [pc, #552]	; (80064b0 <TouchClockActivity+0x2ac>)
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800628c:	4b89      	ldr	r3, [pc, #548]	; (80064b4 <TouchClockActivity+0x2b0>)
 800628e:	2201      	movs	r2, #1
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	e143      	b.n	800651c <TouchClockActivity+0x318>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	2bdb      	cmp	r3, #219	; 0xdb
 8006298:	d92c      	bls.n	80062f4 <TouchClockActivity+0xf0>
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80062a0:	d228      	bcs.n	80062f4 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80062a2:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80062a4:	2bd7      	cmp	r3, #215	; 0xd7
 80062a6:	d925      	bls.n	80062f4 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80062a8:	88bb      	ldrh	r3, [r7, #4]
 80062aa:	2bec      	cmp	r3, #236	; 0xec
 80062ac:	d822      	bhi.n	80062f4 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 80062ae:	4b7f      	ldr	r3, [pc, #508]	; (80064ac <TouchClockActivity+0x2a8>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fc fa86 	bl	80027c4 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 80062b8:	4b7a      	ldr	r3, [pc, #488]	; (80064a4 <TouchClockActivity+0x2a0>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fc fa93 	bl	80027e8 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 80062c2:	4b79      	ldr	r3, [pc, #484]	; (80064a8 <TouchClockActivity+0x2a4>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fc faa3 	bl	8002812 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 80062cc:	2032      	movs	r0, #50	; 0x32
 80062ce:	f7fc fab2 	bl	8002836 <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 80062d2:	4979      	ldr	r1, [pc, #484]	; (80064b8 <TouchClockActivity+0x2b4>)
 80062d4:	4879      	ldr	r0, [pc, #484]	; (80064bc <TouchClockActivity+0x2b8>)
 80062d6:	f00a fa79 	bl	80107cc <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 80062da:	f24c 6318 	movw	r3, #50712	; 0xc618
 80062de:	9301      	str	r3, [sp, #4]
 80062e0:	2301      	movs	r3, #1
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80062e8:	220a      	movs	r2, #10
 80062ea:	212f      	movs	r1, #47	; 0x2f
 80062ec:	4873      	ldr	r0, [pc, #460]	; (80064bc <TouchClockActivity+0x2b8>)
 80062ee:	f7fb fc19 	bl	8001b24 <EF_PutString>
 80062f2:	e113      	b.n	800651c <TouchClockActivity+0x318>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 80062f4:	88fb      	ldrh	r3, [r7, #6]
 80062f6:	2b6d      	cmp	r3, #109	; 0x6d
 80062f8:	d90f      	bls.n	800631a <TouchClockActivity+0x116>
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	2bdc      	cmp	r3, #220	; 0xdc
 80062fe:	d80c      	bhi.n	800631a <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006300:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006302:	2bbd      	cmp	r3, #189	; 0xbd
 8006304:	d909      	bls.n	800631a <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006306:	88bb      	ldrh	r3, [r7, #4]
 8006308:	2bd4      	cmp	r3, #212	; 0xd4
 800630a:	d806      	bhi.n	800631a <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 800630c:	4b68      	ldr	r3, [pc, #416]	; (80064b0 <TouchClockActivity+0x2ac>)
 800630e:	2207      	movs	r2, #7
 8006310:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006312:	4b68      	ldr	r3, [pc, #416]	; (80064b4 <TouchClockActivity+0x2b0>)
 8006314:	2201      	movs	r2, #1
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	e100      	b.n	800651c <TouchClockActivity+0x318>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	2bef      	cmp	r3, #239	; 0xef
 800631e:	d97b      	bls.n	8006418 <TouchClockActivity+0x214>
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006326:	d877      	bhi.n	8006418 <TouchClockActivity+0x214>
				{

					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8006328:	88bb      	ldrh	r3, [r7, #4]
 800632a:	2b4a      	cmp	r3, #74	; 0x4a
 800632c:	d923      	bls.n	8006376 <TouchClockActivity+0x172>
 800632e:	88bb      	ldrh	r3, [r7, #4]
 8006330:	2b60      	cmp	r3, #96	; 0x60
 8006332:	d820      	bhi.n	8006376 <TouchClockActivity+0x172>
					{
						if(Hours < 24)
 8006334:	4b5b      	ldr	r3, [pc, #364]	; (80064a4 <TouchClockActivity+0x2a0>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b17      	cmp	r3, #23
 800633a:	d806      	bhi.n	800634a <TouchClockActivity+0x146>
						{
							Hours++;
 800633c:	4b59      	ldr	r3, [pc, #356]	; (80064a4 <TouchClockActivity+0x2a0>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	4b57      	ldr	r3, [pc, #348]	; (80064a4 <TouchClockActivity+0x2a0>)
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e002      	b.n	8006350 <TouchClockActivity+0x14c>
						}
						else
						{
							Hours = 1;
 800634a:	4b56      	ldr	r3, [pc, #344]	; (80064a4 <TouchClockActivity+0x2a0>)
 800634c:	2201      	movs	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 8006350:	4b54      	ldr	r3, [pc, #336]	; (80064a4 <TouchClockActivity+0x2a0>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	495a      	ldr	r1, [pc, #360]	; (80064c0 <TouchClockActivity+0x2bc>)
 8006358:	4858      	ldr	r0, [pc, #352]	; (80064bc <TouchClockActivity+0x2b8>)
 800635a:	f00a fa37 	bl	80107cc <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800635e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	2301      	movs	r3, #1
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2300      	movs	r3, #0
 800636a:	2246      	movs	r2, #70	; 0x46
 800636c:	21a0      	movs	r1, #160	; 0xa0
 800636e:	4853      	ldr	r0, [pc, #332]	; (80064bc <TouchClockActivity+0x2b8>)
 8006370:	f7fb fbd8 	bl	8001b24 <EF_PutString>
 8006374:	e04f      	b.n	8006416 <TouchClockActivity+0x212>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8006376:	88bb      	ldrh	r3, [r7, #4]
 8006378:	2b72      	cmp	r3, #114	; 0x72
 800637a:	d923      	bls.n	80063c4 <TouchClockActivity+0x1c0>
 800637c:	88bb      	ldrh	r3, [r7, #4]
 800637e:	2b88      	cmp	r3, #136	; 0x88
 8006380:	d820      	bhi.n	80063c4 <TouchClockActivity+0x1c0>
					{
						if(Minutes < 59)
 8006382:	4b49      	ldr	r3, [pc, #292]	; (80064a8 <TouchClockActivity+0x2a4>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b3a      	cmp	r3, #58	; 0x3a
 8006388:	d806      	bhi.n	8006398 <TouchClockActivity+0x194>
						{
							Minutes++;
 800638a:	4b47      	ldr	r3, [pc, #284]	; (80064a8 <TouchClockActivity+0x2a4>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	3301      	adds	r3, #1
 8006390:	b2da      	uxtb	r2, r3
 8006392:	4b45      	ldr	r3, [pc, #276]	; (80064a8 <TouchClockActivity+0x2a4>)
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e002      	b.n	800639e <TouchClockActivity+0x19a>
						}
						else
						{
							Minutes = 0;
 8006398:	4b43      	ldr	r3, [pc, #268]	; (80064a8 <TouchClockActivity+0x2a4>)
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 800639e:	4b42      	ldr	r3, [pc, #264]	; (80064a8 <TouchClockActivity+0x2a4>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	4946      	ldr	r1, [pc, #280]	; (80064c0 <TouchClockActivity+0x2bc>)
 80063a6:	4845      	ldr	r0, [pc, #276]	; (80064bc <TouchClockActivity+0x2b8>)
 80063a8:	f00a fa10 	bl	80107cc <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80063ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	2301      	movs	r3, #1
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	226e      	movs	r2, #110	; 0x6e
 80063ba:	21a0      	movs	r1, #160	; 0xa0
 80063bc:	483f      	ldr	r0, [pc, #252]	; (80064bc <TouchClockActivity+0x2b8>)
 80063be:	f7fb fbb1 	bl	8001b24 <EF_PutString>
 80063c2:	e028      	b.n	8006416 <TouchClockActivity+0x212>
					}
					else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 80063c4:	88bb      	ldrh	r3, [r7, #4]
 80063c6:	2b9a      	cmp	r3, #154	; 0x9a
 80063c8:	f240 80a7 	bls.w	800651a <TouchClockActivity+0x316>
 80063cc:	88bb      	ldrh	r3, [r7, #4]
 80063ce:	2bb0      	cmp	r3, #176	; 0xb0
 80063d0:	f200 80a3 	bhi.w	800651a <TouchClockActivity+0x316>
					{
						if(DayOfWeek < 7)
 80063d4:	4b35      	ldr	r3, [pc, #212]	; (80064ac <TouchClockActivity+0x2a8>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b06      	cmp	r3, #6
 80063da:	d806      	bhi.n	80063ea <TouchClockActivity+0x1e6>
						{
							DayOfWeek++;
 80063dc:	4b33      	ldr	r3, [pc, #204]	; (80064ac <TouchClockActivity+0x2a8>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	3301      	adds	r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	4b31      	ldr	r3, [pc, #196]	; (80064ac <TouchClockActivity+0x2a8>)
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	e002      	b.n	80063f0 <TouchClockActivity+0x1ec>
						}
						else
						{
							DayOfWeek = 1;
 80063ea:	4b30      	ldr	r3, [pc, #192]	; (80064ac <TouchClockActivity+0x2a8>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 80063f0:	4b2e      	ldr	r3, [pc, #184]	; (80064ac <TouchClockActivity+0x2a8>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	4933      	ldr	r1, [pc, #204]	; (80064c4 <TouchClockActivity+0x2c0>)
 80063f8:	4830      	ldr	r0, [pc, #192]	; (80064bc <TouchClockActivity+0x2b8>)
 80063fa:	f00a f9e7 	bl	80107cc <siprintf>
						EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80063fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	2301      	movs	r3, #1
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	2300      	movs	r3, #0
 800640a:	2296      	movs	r2, #150	; 0x96
 800640c:	2114      	movs	r1, #20
 800640e:	482b      	ldr	r0, [pc, #172]	; (80064bc <TouchClockActivity+0x2b8>)
 8006410:	f7fb fb88 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8006414:	e081      	b.n	800651a <TouchClockActivity+0x316>
 8006416:	e080      	b.n	800651a <TouchClockActivity+0x316>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8006418:	88fb      	ldrh	r3, [r7, #6]
 800641a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800641e:	d37d      	bcc.n	800651c <TouchClockActivity+0x318>
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006426:	d879      	bhi.n	800651c <TouchClockActivity+0x318>
				{
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8006428:	88bb      	ldrh	r3, [r7, #4]
 800642a:	2b4a      	cmp	r3, #74	; 0x4a
 800642c:	d923      	bls.n	8006476 <TouchClockActivity+0x272>
 800642e:	88bb      	ldrh	r3, [r7, #4]
 8006430:	2b60      	cmp	r3, #96	; 0x60
 8006432:	d820      	bhi.n	8006476 <TouchClockActivity+0x272>
					{

						if(Hours < 19)
 8006434:	4b1b      	ldr	r3, [pc, #108]	; (80064a4 <TouchClockActivity+0x2a0>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b12      	cmp	r3, #18
 800643a:	d806      	bhi.n	800644a <TouchClockActivity+0x246>
						{
							Hours = Hours + 6;
 800643c:	4b19      	ldr	r3, [pc, #100]	; (80064a4 <TouchClockActivity+0x2a0>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	3306      	adds	r3, #6
 8006442:	b2da      	uxtb	r2, r3
 8006444:	4b17      	ldr	r3, [pc, #92]	; (80064a4 <TouchClockActivity+0x2a0>)
 8006446:	701a      	strb	r2, [r3, #0]
 8006448:	e002      	b.n	8006450 <TouchClockActivity+0x24c>
						}
						else
						{
							Hours = 1;
 800644a:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <TouchClockActivity+0x2a0>)
 800644c:	2201      	movs	r2, #1
 800644e:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 8006450:	4b14      	ldr	r3, [pc, #80]	; (80064a4 <TouchClockActivity+0x2a0>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	491a      	ldr	r1, [pc, #104]	; (80064c0 <TouchClockActivity+0x2bc>)
 8006458:	4818      	ldr	r0, [pc, #96]	; (80064bc <TouchClockActivity+0x2b8>)
 800645a:	f00a f9b7 	bl	80107cc <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800645e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006462:	9301      	str	r3, [sp, #4]
 8006464:	2301      	movs	r3, #1
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	2300      	movs	r3, #0
 800646a:	2246      	movs	r2, #70	; 0x46
 800646c:	219d      	movs	r1, #157	; 0x9d
 800646e:	4813      	ldr	r0, [pc, #76]	; (80064bc <TouchClockActivity+0x2b8>)
 8006470:	f7fb fb58 	bl	8001b24 <EF_PutString>
 8006474:	e04d      	b.n	8006512 <TouchClockActivity+0x30e>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8006476:	88bb      	ldrh	r3, [r7, #4]
 8006478:	2b72      	cmp	r3, #114	; 0x72
 800647a:	d94a      	bls.n	8006512 <TouchClockActivity+0x30e>
 800647c:	88bb      	ldrh	r3, [r7, #4]
 800647e:	2b88      	cmp	r3, #136	; 0x88
 8006480:	d847      	bhi.n	8006512 <TouchClockActivity+0x30e>
					{
						if(Minutes < 49)
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <TouchClockActivity+0x2a4>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b30      	cmp	r3, #48	; 0x30
 8006488:	d81e      	bhi.n	80064c8 <TouchClockActivity+0x2c4>
						{
							Minutes = Minutes +10;
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <TouchClockActivity+0x2a4>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	330a      	adds	r3, #10
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <TouchClockActivity+0x2a4>)
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e02a      	b.n	80064ee <TouchClockActivity+0x2ea>
 8006498:	08017700 	.word	0x08017700
 800649c:	20000280 	.word	0x20000280
 80064a0:	20000256 	.word	0x20000256
 80064a4:	20000031 	.word	0x20000031
 80064a8:	20000032 	.word	0x20000032
 80064ac:	20000030 	.word	0x20000030
 80064b0:	20000284 	.word	0x20000284
 80064b4:	20000255 	.word	0x20000255
 80064b8:	080148f4 	.word	0x080148f4
 80064bc:	200002f0 	.word	0x200002f0
 80064c0:	08014904 	.word	0x08014904
 80064c4:	0801490c 	.word	0x0801490c
						}
						else
						{
							Minutes = (Minutes + 10) % 60;
 80064c8:	4b19      	ldr	r3, [pc, #100]	; (8006530 <TouchClockActivity+0x32c>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f103 020a 	add.w	r2, r3, #10
 80064d0:	4b18      	ldr	r3, [pc, #96]	; (8006534 <TouchClockActivity+0x330>)
 80064d2:	fb83 1302 	smull	r1, r3, r3, r2
 80064d6:	4413      	add	r3, r2
 80064d8:	1159      	asrs	r1, r3, #5
 80064da:	17d3      	asrs	r3, r2, #31
 80064dc:	1ac9      	subs	r1, r1, r3
 80064de:	460b      	mov	r3, r1
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	1a5b      	subs	r3, r3, r1
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	1ad1      	subs	r1, r2, r3
 80064e8:	b2ca      	uxtb	r2, r1
 80064ea:	4b11      	ldr	r3, [pc, #68]	; (8006530 <TouchClockActivity+0x32c>)
 80064ec:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <TouchClockActivity+0x32c>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	4910      	ldr	r1, [pc, #64]	; (8006538 <TouchClockActivity+0x334>)
 80064f6:	4811      	ldr	r0, [pc, #68]	; (800653c <TouchClockActivity+0x338>)
 80064f8:	f00a f968 	bl	80107cc <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80064fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	2301      	movs	r3, #1
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	2300      	movs	r3, #0
 8006508:	226e      	movs	r2, #110	; 0x6e
 800650a:	219c      	movs	r1, #156	; 0x9c
 800650c:	480b      	ldr	r0, [pc, #44]	; (800653c <TouchClockActivity+0x338>)
 800650e:	f7fb fb09 	bl	8001b24 <EF_PutString>

					}
					EF_SetFont(&arialBlack_20ptFontInfo);
 8006512:	480b      	ldr	r0, [pc, #44]	; (8006540 <TouchClockActivity+0x33c>)
 8006514:	f7fb f8ec 	bl	80016f0 <EF_SetFont>
 8006518:	e000      	b.n	800651c <TouchClockActivity+0x318>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 800651a:	bf00      	nop
				}
				TimerTouch = HAL_GetTick();
 800651c:	f002 fd8e 	bl	800903c <HAL_GetTick>
 8006520:	4603      	mov	r3, r0
 8006522:	4a08      	ldr	r2, [pc, #32]	; (8006544 <TouchClockActivity+0x340>)
 8006524:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000032 	.word	0x20000032
 8006534:	88888889 	.word	0x88888889
 8006538:	08014904 	.word	0x08014904
 800653c:	200002f0 	.word	0x200002f0
 8006540:	08017700 	.word	0x08017700
 8006544:	20000280 	.word	0x20000280

08006548 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 800654e:	f7fb fe9d 	bl	800228c <XPT2046_IsTouched>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8106 	beq.w	8006766 <TouchPredefinedActivityActivity+0x21e>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800655a:	f002 fd6f 	bl	800903c <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	4b83      	ldr	r3, [pc, #524]	; (8006770 <TouchPredefinedActivityActivity+0x228>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800656a:	f0c0 80fc 	bcc.w	8006766 <TouchPredefinedActivityActivity+0x21e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800656e:	1d3a      	adds	r2, r7, #4
 8006570:	1dbb      	adds	r3, r7, #6
 8006572:	4611      	mov	r1, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f7fb fe4b 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 800657a:	487e      	ldr	r0, [pc, #504]	; (8006774 <TouchPredefinedActivityActivity+0x22c>)
 800657c:	f7fb f8b8 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	2b09      	cmp	r3, #9
 8006584:	d90f      	bls.n	80065a6 <TouchPredefinedActivityActivity+0x5e>
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	2b6e      	cmp	r3, #110	; 0x6e
 800658a:	d80c      	bhi.n	80065a6 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800658c:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800658e:	2bd7      	cmp	r3, #215	; 0xd7
 8006590:	d909      	bls.n	80065a6 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006592:	88bb      	ldrh	r3, [r7, #4]
 8006594:	2bec      	cmp	r3, #236	; 0xec
 8006596:	d806      	bhi.n	80065a6 <TouchPredefinedActivityActivity+0x5e>
			{
				State = MENUTFT_SWITCH;
 8006598:	4b77      	ldr	r3, [pc, #476]	; (8006778 <TouchPredefinedActivityActivity+0x230>)
 800659a:	2202      	movs	r2, #2
 800659c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800659e:	4b77      	ldr	r3, [pc, #476]	; (800677c <TouchPredefinedActivityActivity+0x234>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	e0da      	b.n	800675c <TouchPredefinedActivityActivity+0x214>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 80065a6:	88fb      	ldrh	r3, [r7, #6]
 80065a8:	2b63      	cmp	r3, #99	; 0x63
 80065aa:	f240 80d7 	bls.w	800675c <TouchPredefinedActivityActivity+0x214>
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	2bdc      	cmp	r3, #220	; 0xdc
 80065b2:	f200 80d3 	bhi.w	800675c <TouchPredefinedActivityActivity+0x214>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 80065b6:	88bb      	ldrh	r3, [r7, #4]
 80065b8:	2b3b      	cmp	r3, #59	; 0x3b
 80065ba:	d966      	bls.n	800668a <TouchPredefinedActivityActivity+0x142>
 80065bc:	88bb      	ldrh	r3, [r7, #4]
 80065be:	2b64      	cmp	r3, #100	; 0x64
 80065c0:	d863      	bhi.n	800668a <TouchPredefinedActivityActivity+0x142>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 80065c2:	4b6f      	ldr	r3, [pc, #444]	; (8006780 <TouchPredefinedActivityActivity+0x238>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d02f      	beq.n	800662a <TouchPredefinedActivityActivity+0xe2>
					{
						ActivityButtonState[0] = 0;
 80065ca:	4b6d      	ldr	r3, [pc, #436]	; (8006780 <TouchPredefinedActivityActivity+0x238>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80065d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	230a      	movs	r3, #10
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	2328      	movs	r3, #40	; 0x28
 80065dc:	2278      	movs	r2, #120	; 0x78
 80065de:	213c      	movs	r1, #60	; 0x3c
 80065e0:	2064      	movs	r0, #100	; 0x64
 80065e2:	f7fb f834 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 80065e6:	4967      	ldr	r1, [pc, #412]	; (8006784 <TouchPredefinedActivityActivity+0x23c>)
 80065e8:	4867      	ldr	r0, [pc, #412]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 80065ea:	f00a f8ef 	bl	80107cc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80065ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	2300      	movs	r3, #0
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2300      	movs	r3, #0
 80065fa:	223e      	movs	r2, #62	; 0x3e
 80065fc:	2177      	movs	r1, #119	; 0x77
 80065fe:	4862      	ldr	r0, [pc, #392]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 8006600:	f7fb fa90 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8006604:	4961      	ldr	r1, [pc, #388]	; (800678c <TouchPredefinedActivityActivity+0x244>)
 8006606:	4860      	ldr	r0, [pc, #384]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 8006608:	f00a f8e0 	bl	80107cc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800660c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	2300      	movs	r3, #0
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2300      	movs	r3, #0
 8006618:	2250      	movs	r2, #80	; 0x50
 800661a:	2193      	movs	r1, #147	; 0x93
 800661c:	485a      	ldr	r0, [pc, #360]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 800661e:	f7fb fa81 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 8006622:	2000      	movs	r0, #0
 8006624:	f7fe faf4 	bl	8004c10 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8006628:	e098      	b.n	800675c <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 800662a:	4b55      	ldr	r3, [pc, #340]	; (8006780 <TouchPredefinedActivityActivity+0x238>)
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8006630:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	230a      	movs	r3, #10
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	2328      	movs	r3, #40	; 0x28
 800663c:	2278      	movs	r2, #120	; 0x78
 800663e:	213c      	movs	r1, #60	; 0x3c
 8006640:	2064      	movs	r0, #100	; 0x64
 8006642:	f7fb f804 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8006646:	494f      	ldr	r1, [pc, #316]	; (8006784 <TouchPredefinedActivityActivity+0x23c>)
 8006648:	484f      	ldr	r0, [pc, #316]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 800664a:	f00a f8bf 	bl	80107cc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800664e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006652:	9301      	str	r3, [sp, #4]
 8006654:	2300      	movs	r3, #0
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	2300      	movs	r3, #0
 800665a:	223e      	movs	r2, #62	; 0x3e
 800665c:	2177      	movs	r1, #119	; 0x77
 800665e:	484a      	ldr	r0, [pc, #296]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 8006660:	f7fb fa60 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8006664:	494a      	ldr	r1, [pc, #296]	; (8006790 <TouchPredefinedActivityActivity+0x248>)
 8006666:	4848      	ldr	r0, [pc, #288]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 8006668:	f00a f8b0 	bl	80107cc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800666c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	2300      	movs	r3, #0
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	2300      	movs	r3, #0
 8006678:	2250      	movs	r2, #80	; 0x50
 800667a:	2193      	movs	r1, #147	; 0x93
 800667c:	4842      	ldr	r0, [pc, #264]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 800667e:	f7fb fa51 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 8006682:	2001      	movs	r0, #1
 8006684:	f7fe fac4 	bl	8004c10 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8006688:	e068      	b.n	800675c <TouchPredefinedActivityActivity+0x214>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 800668a:	88bb      	ldrh	r3, [r7, #4]
 800668c:	2b77      	cmp	r3, #119	; 0x77
 800668e:	d965      	bls.n	800675c <TouchPredefinedActivityActivity+0x214>
 8006690:	88bb      	ldrh	r3, [r7, #4]
 8006692:	2ba0      	cmp	r3, #160	; 0xa0
 8006694:	d862      	bhi.n	800675c <TouchPredefinedActivityActivity+0x214>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 8006696:	4b3a      	ldr	r3, [pc, #232]	; (8006780 <TouchPredefinedActivityActivity+0x238>)
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02f      	beq.n	80066fe <TouchPredefinedActivityActivity+0x1b6>
					{
						ActivityButtonState[1] = 0;
 800669e:	4b38      	ldr	r3, [pc, #224]	; (8006780 <TouchPredefinedActivityActivity+0x238>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80066a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	230a      	movs	r3, #10
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	2328      	movs	r3, #40	; 0x28
 80066b0:	2278      	movs	r2, #120	; 0x78
 80066b2:	2178      	movs	r1, #120	; 0x78
 80066b4:	2064      	movs	r0, #100	; 0x64
 80066b6:	f7fa ffca 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 80066ba:	4936      	ldr	r1, [pc, #216]	; (8006794 <TouchPredefinedActivityActivity+0x24c>)
 80066bc:	4832      	ldr	r0, [pc, #200]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 80066be:	f00a f885 	bl	80107cc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80066c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	2300      	movs	r3, #0
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	2300      	movs	r3, #0
 80066ce:	227a      	movs	r2, #122	; 0x7a
 80066d0:	2169      	movs	r1, #105	; 0x69
 80066d2:	482d      	ldr	r0, [pc, #180]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 80066d4:	f7fb fa26 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 80066d8:	492c      	ldr	r1, [pc, #176]	; (800678c <TouchPredefinedActivityActivity+0x244>)
 80066da:	482b      	ldr	r0, [pc, #172]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 80066dc:	f00a f876 	bl	80107cc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80066e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	2300      	movs	r3, #0
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	2300      	movs	r3, #0
 80066ec:	228c      	movs	r2, #140	; 0x8c
 80066ee:	2193      	movs	r1, #147	; 0x93
 80066f0:	4825      	ldr	r0, [pc, #148]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 80066f2:	f7fb fa17 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 80066f6:	2000      	movs	r0, #0
 80066f8:	f7fe fa70 	bl	8004bdc <predefinedActivityCzyszczenie>
 80066fc:	e02e      	b.n	800675c <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 80066fe:	4b20      	ldr	r3, [pc, #128]	; (8006780 <TouchPredefinedActivityActivity+0x238>)
 8006700:	2201      	movs	r2, #1
 8006702:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8006704:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	230a      	movs	r3, #10
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	2328      	movs	r3, #40	; 0x28
 8006710:	2278      	movs	r2, #120	; 0x78
 8006712:	2178      	movs	r1, #120	; 0x78
 8006714:	2064      	movs	r0, #100	; 0x64
 8006716:	f7fa ff9a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 800671a:	491e      	ldr	r1, [pc, #120]	; (8006794 <TouchPredefinedActivityActivity+0x24c>)
 800671c:	481a      	ldr	r0, [pc, #104]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 800671e:	f00a f855 	bl	80107cc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8006722:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	2300      	movs	r3, #0
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	2300      	movs	r3, #0
 800672e:	227a      	movs	r2, #122	; 0x7a
 8006730:	2169      	movs	r1, #105	; 0x69
 8006732:	4815      	ldr	r0, [pc, #84]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 8006734:	f7fb f9f6 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8006738:	4915      	ldr	r1, [pc, #84]	; (8006790 <TouchPredefinedActivityActivity+0x248>)
 800673a:	4813      	ldr	r0, [pc, #76]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 800673c:	f00a f846 	bl	80107cc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8006740:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	2300      	movs	r3, #0
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	2300      	movs	r3, #0
 800674c:	228c      	movs	r2, #140	; 0x8c
 800674e:	2193      	movs	r1, #147	; 0x93
 8006750:	480d      	ldr	r0, [pc, #52]	; (8006788 <TouchPredefinedActivityActivity+0x240>)
 8006752:	f7fb f9e7 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 8006756:	2001      	movs	r0, #1
 8006758:	f7fe fa40 	bl	8004bdc <predefinedActivityCzyszczenie>
					}
				}
			}
			TimerTouch = HAL_GetTick();
 800675c:	f002 fc6e 	bl	800903c <HAL_GetTick>
 8006760:	4603      	mov	r3, r0
 8006762:	4a03      	ldr	r2, [pc, #12]	; (8006770 <TouchPredefinedActivityActivity+0x228>)
 8006764:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000280 	.word	0x20000280
 8006774:	08015788 	.word	0x08015788
 8006778:	20000284 	.word	0x20000284
 800677c:	20000255 	.word	0x20000255
 8006780:	200002a4 	.word	0x200002a4
 8006784:	08014920 	.word	0x08014920
 8006788:	200002f0 	.word	0x200002f0
 800678c:	080148ec 	.word	0x080148ec
 8006790:	080148f0 	.word	0x080148f0
 8006794:	0801492c 	.word	0x0801492c

08006798 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800679e:	f7fb fd75 	bl	800228c <XPT2046_IsTouched>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 819d 	beq.w	8006ae4 <TouchWSLedActivity+0x34c>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80067aa:	48ae      	ldr	r0, [pc, #696]	; (8006a64 <TouchWSLedActivity+0x2cc>)
 80067ac:	f7fa ffa0 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80067b0:	f002 fc44 	bl	800903c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	4bac      	ldr	r3, [pc, #688]	; (8006a68 <TouchWSLedActivity+0x2d0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c0:	f0c0 8190 	bcc.w	8006ae4 <TouchWSLedActivity+0x34c>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80067c4:	1d3a      	adds	r2, r7, #4
 80067c6:	1dbb      	adds	r3, r7, #6
 80067c8:	4611      	mov	r1, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fb fd20 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 80067d0:	4ba6      	ldr	r3, [pc, #664]	; (8006a6c <TouchWSLedActivity+0x2d4>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10b      	bne.n	80067f0 <TouchWSLedActivity+0x58>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 80067d8:	bf00      	nop
 80067da:	2201      	movs	r2, #1
 80067dc:	49a4      	ldr	r1, [pc, #656]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 80067de:	2001      	movs	r0, #1
 80067e0:	f7fc f886 	bl	80028f0 <eeprom_read>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f7      	bne.n	80067da <TouchWSLedActivity+0x42>
					WSLedChangeFlag = 0;
 80067ea:	4ba2      	ldr	r3, [pc, #648]	; (8006a74 <TouchWSLedActivity+0x2dc>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	2b09      	cmp	r3, #9
 80067f4:	d90f      	bls.n	8006816 <TouchWSLedActivity+0x7e>
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	2b6e      	cmp	r3, #110	; 0x6e
 80067fa:	d80c      	bhi.n	8006816 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80067fc:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80067fe:	2bd7      	cmp	r3, #215	; 0xd7
 8006800:	d909      	bls.n	8006816 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006802:	88bb      	ldrh	r3, [r7, #4]
 8006804:	2bec      	cmp	r3, #236	; 0xec
 8006806:	d806      	bhi.n	8006816 <TouchWSLedActivity+0x7e>
				{
					State = MENUTFT_LIGHTS;
 8006808:	4b9b      	ldr	r3, [pc, #620]	; (8006a78 <TouchWSLedActivity+0x2e0>)
 800680a:	2205      	movs	r2, #5
 800680c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800680e:	4b9b      	ldr	r3, [pc, #620]	; (8006a7c <TouchWSLedActivity+0x2e4>)
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	e161      	b.n	8006ada <TouchWSLedActivity+0x342>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8006816:	88bb      	ldrh	r3, [r7, #4]
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	f240 80af 	bls.w	800697c <TouchWSLedActivity+0x1e4>
 800681e:	88bb      	ldrh	r3, [r7, #4]
 8006820:	2b56      	cmp	r3, #86	; 0x56
 8006822:	f200 80ab 	bhi.w	800697c <TouchWSLedActivity+0x1e4>
				{

					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	2bd8      	cmp	r3, #216	; 0xd8
 800682a:	d92f      	bls.n	800688c <TouchWSLedActivity+0xf4>
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	2bf7      	cmp	r3, #247	; 0xf7
 8006830:	d82c      	bhi.n	800688c <TouchWSLedActivity+0xf4>
					{
						if(NrOfLeds < 98)
 8006832:	4b8f      	ldr	r3, [pc, #572]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b61      	cmp	r3, #97	; 0x61
 8006838:	d806      	bhi.n	8006848 <TouchWSLedActivity+0xb0>
						{
							NrOfLeds++;
 800683a:	4b8d      	ldr	r3, [pc, #564]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	3301      	adds	r3, #1
 8006840:	b2da      	uxtb	r2, r3
 8006842:	4b8b      	ldr	r3, [pc, #556]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	e002      	b.n	800684e <TouchWSLedActivity+0xb6>
						}
						else
						{
							NrOfLeds = 1;
 8006848:	4b89      	ldr	r3, [pc, #548]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 800684a:	2201      	movs	r2, #1
 800684c:	701a      	strb	r2, [r3, #0]
						}
						if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 800684e:	4b88      	ldr	r3, [pc, #544]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b09      	cmp	r3, #9
 8006854:	d807      	bhi.n	8006866 <TouchWSLedActivity+0xce>
 8006856:	4b86      	ldr	r3, [pc, #536]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	4988      	ldr	r1, [pc, #544]	; (8006a80 <TouchWSLedActivity+0x2e8>)
 800685e:	4889      	ldr	r0, [pc, #548]	; (8006a84 <TouchWSLedActivity+0x2ec>)
 8006860:	f009 ffb4 	bl	80107cc <siprintf>
 8006864:	e006      	b.n	8006874 <TouchWSLedActivity+0xdc>
						else sprintf((char*)Msg, " %d", NrOfLeds);
 8006866:	4b82      	ldr	r3, [pc, #520]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	4986      	ldr	r1, [pc, #536]	; (8006a88 <TouchWSLedActivity+0x2f0>)
 800686e:	4885      	ldr	r0, [pc, #532]	; (8006a84 <TouchWSLedActivity+0x2ec>)
 8006870:	f009 ffac 	bl	80107cc <siprintf>
						EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006874:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	2301      	movs	r3, #1
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	2300      	movs	r3, #0
 8006880:	223c      	movs	r2, #60	; 0x3c
 8006882:	21ac      	movs	r1, #172	; 0xac
 8006884:	487f      	ldr	r0, [pc, #508]	; (8006a84 <TouchWSLedActivity+0x2ec>)
 8006886:	f7fb f94d 	bl	8001b24 <EF_PutString>
 800688a:	e076      	b.n	800697a <TouchWSLedActivity+0x1e2>
					}
					else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	2bfb      	cmp	r3, #251	; 0xfb
 8006890:	d941      	bls.n	8006916 <TouchWSLedActivity+0x17e>
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8006898:	d83d      	bhi.n	8006916 <TouchWSLedActivity+0x17e>
					{
						if(NrOfLeds < 90)
 800689a:	4b75      	ldr	r3, [pc, #468]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b59      	cmp	r3, #89	; 0x59
 80068a0:	d806      	bhi.n	80068b0 <TouchWSLedActivity+0x118>
						{
							NrOfLeds = NrOfLeds + 10;
 80068a2:	4b73      	ldr	r3, [pc, #460]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	330a      	adds	r3, #10
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	4b71      	ldr	r3, [pc, #452]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e013      	b.n	80068d8 <TouchWSLedActivity+0x140>
						}
						else
						{
							NrOfLeds = (NrOfLeds + 10) % 99;
 80068b0:	4b6f      	ldr	r3, [pc, #444]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f103 020a 	add.w	r2, r3, #10
 80068b8:	4b74      	ldr	r3, [pc, #464]	; (8006a8c <TouchWSLedActivity+0x2f4>)
 80068ba:	fb83 1302 	smull	r1, r3, r3, r2
 80068be:	4413      	add	r3, r2
 80068c0:	1199      	asrs	r1, r3, #6
 80068c2:	17d3      	asrs	r3, r2, #31
 80068c4:	1ac9      	subs	r1, r1, r3
 80068c6:	460b      	mov	r3, r1
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	440b      	add	r3, r1
 80068cc:	0159      	lsls	r1, r3, #5
 80068ce:	440b      	add	r3, r1
 80068d0:	1ad1      	subs	r1, r2, r3
 80068d2:	b2ca      	uxtb	r2, r1
 80068d4:	4b66      	ldr	r3, [pc, #408]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 80068d6:	701a      	strb	r2, [r3, #0]
						}
					// Display String
					if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 80068d8:	4b65      	ldr	r3, [pc, #404]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b09      	cmp	r3, #9
 80068de:	d807      	bhi.n	80068f0 <TouchWSLedActivity+0x158>
 80068e0:	4b63      	ldr	r3, [pc, #396]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	4966      	ldr	r1, [pc, #408]	; (8006a80 <TouchWSLedActivity+0x2e8>)
 80068e8:	4866      	ldr	r0, [pc, #408]	; (8006a84 <TouchWSLedActivity+0x2ec>)
 80068ea:	f009 ff6f 	bl	80107cc <siprintf>
 80068ee:	e006      	b.n	80068fe <TouchWSLedActivity+0x166>
					else sprintf((char*)Msg, " %d", NrOfLeds);
 80068f0:	4b5f      	ldr	r3, [pc, #380]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	4964      	ldr	r1, [pc, #400]	; (8006a88 <TouchWSLedActivity+0x2f0>)
 80068f8:	4862      	ldr	r0, [pc, #392]	; (8006a84 <TouchWSLedActivity+0x2ec>)
 80068fa:	f009 ff67 	bl	80107cc <siprintf>
					EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80068fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	2301      	movs	r3, #1
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	2300      	movs	r3, #0
 800690a:	223c      	movs	r2, #60	; 0x3c
 800690c:	21ac      	movs	r1, #172	; 0xac
 800690e:	485d      	ldr	r0, [pc, #372]	; (8006a84 <TouchWSLedActivity+0x2ec>)
 8006910:	f7fb f908 	bl	8001b24 <EF_PutString>
 8006914:	e031      	b.n	800697a <TouchWSLedActivity+0x1e2>
					}


					else if((x >= WS_LED_BUTTON_3_X)&&(x <= (WS_LED_BUTTON_3_X + WS_LED_BUTTON_W))) // OK - confirm and send number of LEDs
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 800691c:	f240 80d6 	bls.w	8006acc <TouchWSLedActivity+0x334>
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8006926:	f080 80d1 	bcs.w	8006acc <TouchWSLedActivity+0x334>
					{
						SendComand(UCMD_WS_NUMBER_LED);
 800692a:	2025      	movs	r0, #37	; 0x25
 800692c:	f001 fb80 	bl	8008030 <SendComand>
						EF_SetFont(&arial_11ptFontInfo);
 8006930:	4857      	ldr	r0, [pc, #348]	; (8006a90 <TouchWSLedActivity+0x2f8>)
 8006932:	f7fa fedd 	bl	80016f0 <EF_SetFont>
						GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8006936:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	2305      	movs	r3, #5
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	2315      	movs	r3, #21
 8006942:	221e      	movs	r2, #30
 8006944:	2141      	movs	r1, #65	; 0x41
 8006946:	f240 101f 	movw	r0, #287	; 0x11f
 800694a:	f7fa fe80 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OK");
 800694e:	4951      	ldr	r1, [pc, #324]	; (8006a94 <TouchWSLedActivity+0x2fc>)
 8006950:	484c      	ldr	r0, [pc, #304]	; (8006a84 <TouchWSLedActivity+0x2ec>)
 8006952:	f009 ff3b 	bl	80107cc <siprintf>
						EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8006956:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	2300      	movs	r3, #0
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	2300      	movs	r3, #0
 8006962:	2243      	movs	r2, #67	; 0x43
 8006964:	f240 1123 	movw	r1, #291	; 0x123
 8006968:	4846      	ldr	r0, [pc, #280]	; (8006a84 <TouchWSLedActivity+0x2ec>)
 800696a:	f7fb f8db 	bl	8001b24 <EF_PutString>
						// Write chosen number of LEDs to EEPROM memory
						eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
 800696e:	2201      	movs	r2, #1
 8006970:	493f      	ldr	r1, [pc, #252]	; (8006a70 <TouchWSLedActivity+0x2d8>)
 8006972:	2001      	movs	r0, #1
 8006974:	f7fb ffda 	bl	800292c <eeprom_write>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8006978:	e0a8      	b.n	8006acc <TouchWSLedActivity+0x334>
 800697a:	e0a7      	b.n	8006acc <TouchWSLedActivity+0x334>
				}

				//
				// Check if it is second line button to change LEDs to WHITE
				//
				else if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 800697c:	88bb      	ldrh	r3, [r7, #4]
 800697e:	2b5e      	cmp	r3, #94	; 0x5e
 8006980:	d924      	bls.n	80069cc <TouchWSLedActivity+0x234>
 8006982:	88bb      	ldrh	r3, [r7, #4]
 8006984:	2b74      	cmp	r3, #116	; 0x74
 8006986:	d821      	bhi.n	80069cc <TouchWSLedActivity+0x234>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	2b95      	cmp	r3, #149	; 0x95
 800698c:	d906      	bls.n	800699c <TouchWSLedActivity+0x204>
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	2bbe      	cmp	r3, #190	; 0xbe
 8006992:	d803      	bhi.n	800699c <TouchWSLedActivity+0x204>
					{
						SendComand(UCMD_WS_LED_WHITE_MAX);
 8006994:	201d      	movs	r0, #29
 8006996:	f001 fb4b 	bl	8008030 <SendComand>
 800699a:	e016      	b.n	80069ca <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 800699c:	88fb      	ldrh	r3, [r7, #6]
 800699e:	2bc9      	cmp	r3, #201	; 0xc9
 80069a0:	d906      	bls.n	80069b0 <TouchWSLedActivity+0x218>
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	2bf2      	cmp	r3, #242	; 0xf2
 80069a6:	d803      	bhi.n	80069b0 <TouchWSLedActivity+0x218>
					{
						SendComand(UCMD_WS_LED_WHITE_MID);
 80069a8:	201e      	movs	r0, #30
 80069aa:	f001 fb41 	bl	8008030 <SendComand>
 80069ae:	e00c      	b.n	80069ca <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80069b0:	88fb      	ldrh	r3, [r7, #6]
 80069b2:	2bfd      	cmp	r3, #253	; 0xfd
 80069b4:	f240 808c 	bls.w	8006ad0 <TouchWSLedActivity+0x338>
 80069b8:	88fb      	ldrh	r3, [r7, #6]
 80069ba:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80069be:	f200 8087 	bhi.w	8006ad0 <TouchWSLedActivity+0x338>
					{
						SendComand(UCMD_WS_LED_WHITE_MIN);
 80069c2:	201f      	movs	r0, #31
 80069c4:	f001 fb34 	bl	8008030 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80069c8:	e082      	b.n	8006ad0 <TouchWSLedActivity+0x338>
 80069ca:	e081      	b.n	8006ad0 <TouchWSLedActivity+0x338>
				}

				//
				// Check if it is third line button to change LEDs to BLUE
				//
				else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 80069cc:	88bb      	ldrh	r3, [r7, #4]
 80069ce:	2b7c      	cmp	r3, #124	; 0x7c
 80069d0:	d922      	bls.n	8006a18 <TouchWSLedActivity+0x280>
 80069d2:	88bb      	ldrh	r3, [r7, #4]
 80069d4:	2b92      	cmp	r3, #146	; 0x92
 80069d6:	d81f      	bhi.n	8006a18 <TouchWSLedActivity+0x280>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80069d8:	88fb      	ldrh	r3, [r7, #6]
 80069da:	2b95      	cmp	r3, #149	; 0x95
 80069dc:	d906      	bls.n	80069ec <TouchWSLedActivity+0x254>
 80069de:	88fb      	ldrh	r3, [r7, #6]
 80069e0:	2bbe      	cmp	r3, #190	; 0xbe
 80069e2:	d803      	bhi.n	80069ec <TouchWSLedActivity+0x254>
					{
						SendComand(UCMD_WS_LED_BLUE_MAX);
 80069e4:	2020      	movs	r0, #32
 80069e6:	f001 fb23 	bl	8008030 <SendComand>
 80069ea:	e014      	b.n	8006a16 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	2bc9      	cmp	r3, #201	; 0xc9
 80069f0:	d906      	bls.n	8006a00 <TouchWSLedActivity+0x268>
 80069f2:	88fb      	ldrh	r3, [r7, #6]
 80069f4:	2bf2      	cmp	r3, #242	; 0xf2
 80069f6:	d803      	bhi.n	8006a00 <TouchWSLedActivity+0x268>
					{
						SendComand(UCMD_WS_LED_BLUE_MID);
 80069f8:	2021      	movs	r0, #33	; 0x21
 80069fa:	f001 fb19 	bl	8008030 <SendComand>
 80069fe:	e00a      	b.n	8006a16 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8006a00:	88fb      	ldrh	r3, [r7, #6]
 8006a02:	2bfd      	cmp	r3, #253	; 0xfd
 8006a04:	d966      	bls.n	8006ad4 <TouchWSLedActivity+0x33c>
 8006a06:	88fb      	ldrh	r3, [r7, #6]
 8006a08:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8006a0c:	d862      	bhi.n	8006ad4 <TouchWSLedActivity+0x33c>
					{
						SendComand(UCMD_WS_LED_BLUE_MIN);
 8006a0e:	2022      	movs	r0, #34	; 0x22
 8006a10:	f001 fb0e 	bl	8008030 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006a14:	e05e      	b.n	8006ad4 <TouchWSLedActivity+0x33c>
 8006a16:	e05d      	b.n	8006ad4 <TouchWSLedActivity+0x33c>
				}

				//
				// Check if it is fourth line button to change LEDs to Predefined
				//
				else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8006a18:	88bb      	ldrh	r3, [r7, #4]
 8006a1a:	2b9b      	cmp	r3, #155	; 0x9b
 8006a1c:	d93c      	bls.n	8006a98 <TouchWSLedActivity+0x300>
 8006a1e:	88bb      	ldrh	r3, [r7, #4]
 8006a20:	2bb1      	cmp	r3, #177	; 0xb1
 8006a22:	d839      	bhi.n	8006a98 <TouchWSLedActivity+0x300>
				{
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	2b13      	cmp	r3, #19
 8006a28:	d906      	bls.n	8006a38 <TouchWSLedActivity+0x2a0>
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	2b64      	cmp	r3, #100	; 0x64
 8006a2e:	d803      	bhi.n	8006a38 <TouchWSLedActivity+0x2a0>
					{
						SendComand(UCMD_WS_LED_DAILY);
 8006a30:	2023      	movs	r0, #35	; 0x23
 8006a32:	f001 fafd 	bl	8008030 <SendComand>
 8006a36:	e014      	b.n	8006a62 <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	2b77      	cmp	r3, #119	; 0x77
 8006a3c:	d906      	bls.n	8006a4c <TouchWSLedActivity+0x2b4>
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	2bc8      	cmp	r3, #200	; 0xc8
 8006a42:	d803      	bhi.n	8006a4c <TouchWSLedActivity+0x2b4>
					{
						SendComand(UCMD_WS_LED_WHITE_OFF);
 8006a44:	201c      	movs	r0, #28
 8006a46:	f001 faf3 	bl	8008030 <SendComand>
 8006a4a:	e00a      	b.n	8006a62 <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	2bdb      	cmp	r3, #219	; 0xdb
 8006a50:	d942      	bls.n	8006ad8 <TouchWSLedActivity+0x340>
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006a58:	d83e      	bhi.n	8006ad8 <TouchWSLedActivity+0x340>
					{
						SendComand(UCMD_WS_LED_NIGHT);
 8006a5a:	2024      	movs	r0, #36	; 0x24
 8006a5c:	f001 fae8 	bl	8008030 <SendComand>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8006a60:	e03a      	b.n	8006ad8 <TouchWSLedActivity+0x340>
 8006a62:	e039      	b.n	8006ad8 <TouchWSLedActivity+0x340>
 8006a64:	08017700 	.word	0x08017700
 8006a68:	20000280 	.word	0x20000280
 8006a6c:	20000256 	.word	0x20000256
 8006a70:	20000033 	.word	0x20000033
 8006a74:	20000257 	.word	0x20000257
 8006a78:	20000284 	.word	0x20000284
 8006a7c:	20000255 	.word	0x20000255
 8006a80:	08014938 	.word	0x08014938
 8006a84:	200002f0 	.word	0x200002f0
 8006a88:	08014940 	.word	0x08014940
 8006a8c:	a57eb503 	.word	0xa57eb503
 8006a90:	08015788 	.word	0x08015788
 8006a94:	08014944 	.word	0x08014944
				}

				//
				// Check if it is fifth line button to change LEDs to Predefined animations
				//
				else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8006a98:	88bb      	ldrh	r3, [r7, #4]
 8006a9a:	2bba      	cmp	r3, #186	; 0xba
 8006a9c:	d91d      	bls.n	8006ada <TouchWSLedActivity+0x342>
 8006a9e:	88bb      	ldrh	r3, [r7, #4]
 8006aa0:	2bd0      	cmp	r3, #208	; 0xd0
 8006aa2:	d81a      	bhi.n	8006ada <TouchWSLedActivity+0x342>
				{
					if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
 8006aa6:	2b45      	cmp	r3, #69	; 0x45
 8006aa8:	d906      	bls.n	8006ab8 <TouchWSLedActivity+0x320>
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	2b96      	cmp	r3, #150	; 0x96
 8006aae:	d803      	bhi.n	8006ab8 <TouchWSLedActivity+0x320>
					{
						SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8006ab0:	2026      	movs	r0, #38	; 0x26
 8006ab2:	f001 fabd 	bl	8008030 <SendComand>
 8006ab6:	e010      	b.n	8006ada <TouchWSLedActivity+0x342>
					}
					else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	2ba9      	cmp	r3, #169	; 0xa9
 8006abc:	d90d      	bls.n	8006ada <TouchWSLedActivity+0x342>
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	2bfa      	cmp	r3, #250	; 0xfa
 8006ac2:	d80a      	bhi.n	8006ada <TouchWSLedActivity+0x342>
					{
						SendComand(UCMD_WS_ANIMATION_SUNSET);
 8006ac4:	2027      	movs	r0, #39	; 0x27
 8006ac6:	f001 fab3 	bl	8008030 <SendComand>
 8006aca:	e006      	b.n	8006ada <TouchWSLedActivity+0x342>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8006acc:	bf00      	nop
 8006ace:	e004      	b.n	8006ada <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006ad0:	bf00      	nop
 8006ad2:	e002      	b.n	8006ada <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006ad4:	bf00      	nop
 8006ad6:	e000      	b.n	8006ada <TouchWSLedActivity+0x342>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8006ad8:	bf00      	nop
					}
				}
				TimerTouch = HAL_GetTick();
 8006ada:	f002 faaf 	bl	800903c <HAL_GetTick>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4a02      	ldr	r2, [pc, #8]	; (8006aec <TouchWSLedActivity+0x354>)
 8006ae2:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	20000280 	.word	0x20000280

08006af0 <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006af6:	4b72      	ldr	r3, [pc, #456]	; (8006cc0 <Schedule1Activity+0x1d0>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d11a      	bne.n	8006b34 <Schedule1Activity+0x44>
	{
		  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 8006afe:	4971      	ldr	r1, [pc, #452]	; (8006cc4 <Schedule1Activity+0x1d4>)
 8006b00:	2001      	movs	r0, #1
 8006b02:	f7fc f938 	bl	8002d76 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8006b06:	4970      	ldr	r1, [pc, #448]	; (8006cc8 <Schedule1Activity+0x1d8>)
 8006b08:	2001      	movs	r0, #1
 8006b0a:	f7fc f958 	bl	8002dbe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 8006b0e:	496f      	ldr	r1, [pc, #444]	; (8006ccc <Schedule1Activity+0x1dc>)
 8006b10:	2001      	movs	r0, #1
 8006b12:	f7fc f978 	bl	8002e06 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8006b16:	496e      	ldr	r1, [pc, #440]	; (8006cd0 <Schedule1Activity+0x1e0>)
 8006b18:	2001      	movs	r0, #1
 8006b1a:	f7fc f998 	bl	8002e4e <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8006b1e:	496d      	ldr	r1, [pc, #436]	; (8006cd4 <Schedule1Activity+0x1e4>)
 8006b20:	2001      	movs	r0, #1
 8006b22:	f7fc f87b 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8006b26:	496c      	ldr	r1, [pc, #432]	; (8006cd8 <Schedule1Activity+0x1e8>)
 8006b28:	2001      	movs	r0, #1
 8006b2a:	f7fc f8f3 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  ScheduleChangeFlag = 0;
 8006b2e:	4b64      	ldr	r3, [pc, #400]	; (8006cc0 <Schedule1Activity+0x1d0>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006b34:	f7fb fbaa 	bl	800228c <XPT2046_IsTouched>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 80bb 	beq.w	8006cb6 <Schedule1Activity+0x1c6>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006b40:	f002 fa7c 	bl	800903c <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	4b65      	ldr	r3, [pc, #404]	; (8006cdc <Schedule1Activity+0x1ec>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b50:	f0c0 80b1 	bcc.w	8006cb6 <Schedule1Activity+0x1c6>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006b54:	1d3a      	adds	r2, r7, #4
 8006b56:	1dbb      	adds	r3, r7, #6
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fb fb58 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	2b09      	cmp	r3, #9
 8006b64:	d90f      	bls.n	8006b86 <Schedule1Activity+0x96>
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b6e      	cmp	r3, #110	; 0x6e
 8006b6a:	d80c      	bhi.n	8006b86 <Schedule1Activity+0x96>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006b6c:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006b6e:	2bd7      	cmp	r3, #215	; 0xd7
 8006b70:	d909      	bls.n	8006b86 <Schedule1Activity+0x96>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006b72:	88bb      	ldrh	r3, [r7, #4]
 8006b74:	2bec      	cmp	r3, #236	; 0xec
 8006b76:	d806      	bhi.n	8006b86 <Schedule1Activity+0x96>
			{
				State = MENUTFT_CLOCK;
 8006b78:	4b59      	ldr	r3, [pc, #356]	; (8006ce0 <Schedule1Activity+0x1f0>)
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006b7e:	4b59      	ldr	r3, [pc, #356]	; (8006ce4 <Schedule1Activity+0x1f4>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	e092      	b.n	8006cac <Schedule1Activity+0x1bc>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	2bdb      	cmp	r3, #219	; 0xdb
 8006b8a:	d910      	bls.n	8006bae <Schedule1Activity+0xbe>
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006b92:	d20c      	bcs.n	8006bae <Schedule1Activity+0xbe>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006b94:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006b96:	2bd7      	cmp	r3, #215	; 0xd7
 8006b98:	d909      	bls.n	8006bae <Schedule1Activity+0xbe>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006b9a:	88bb      	ldrh	r3, [r7, #4]
 8006b9c:	2bec      	cmp	r3, #236	; 0xec
 8006b9e:	d806      	bhi.n	8006bae <Schedule1Activity+0xbe>
			{
				State = MENUTFT_SCHEDULE_2;
 8006ba0:	4b4f      	ldr	r3, [pc, #316]	; (8006ce0 <Schedule1Activity+0x1f0>)
 8006ba2:	2208      	movs	r2, #8
 8006ba4:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006ba6:	4b4f      	ldr	r3, [pc, #316]	; (8006ce4 <Schedule1Activity+0x1f4>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e07e      	b.n	8006cac <Schedule1Activity+0x1bc>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006bae:	88bb      	ldrh	r3, [r7, #4]
 8006bb0:	2b31      	cmp	r3, #49	; 0x31
 8006bb2:	d909      	bls.n	8006bc8 <Schedule1Activity+0xd8>
 8006bb4:	88bb      	ldrh	r3, [r7, #4]
 8006bb6:	2b46      	cmp	r3, #70	; 0x46
 8006bb8:	d806      	bhi.n	8006bc8 <Schedule1Activity+0xd8>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	88ba      	ldrh	r2, [r7, #4]
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 f98f 	bl	8006ee4 <MenuTFTSchedule1ActivityDayOfWeekRow>
 8006bc6:	e071      	b.n	8006cac <Schedule1Activity+0x1bc>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006bc8:	88bb      	ldrh	r3, [r7, #4]
 8006bca:	2b64      	cmp	r3, #100	; 0x64
 8006bcc:	d909      	bls.n	8006be2 <Schedule1Activity+0xf2>
 8006bce:	88bb      	ldrh	r3, [r7, #4]
 8006bd0:	2b79      	cmp	r3, #121	; 0x79
 8006bd2:	d806      	bhi.n	8006be2 <Schedule1Activity+0xf2>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	88ba      	ldrh	r2, [r7, #4]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fb42 	bl	8007264 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 8006be0:	e064      	b.n	8006cac <Schedule1Activity+0x1bc>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006be2:	88bb      	ldrh	r3, [r7, #4]
 8006be4:	2b87      	cmp	r3, #135	; 0x87
 8006be6:	d909      	bls.n	8006bfc <Schedule1Activity+0x10c>
 8006be8:	88bb      	ldrh	r3, [r7, #4]
 8006bea:	2b9c      	cmp	r3, #156	; 0x9c
 8006bec:	d806      	bhi.n	8006bfc <Schedule1Activity+0x10c>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	88ba      	ldrh	r2, [r7, #4]
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fbff 	bl	80073f8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 8006bfa:	e057      	b.n	8006cac <Schedule1Activity+0x1bc>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	2b77      	cmp	r3, #119	; 0x77
 8006c00:	d954      	bls.n	8006cac <Schedule1Activity+0x1bc>
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	2bd2      	cmp	r3, #210	; 0xd2
 8006c06:	d851      	bhi.n	8006cac <Schedule1Activity+0x1bc>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006c08:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006c0a:	2bd7      	cmp	r3, #215	; 0xd7
 8006c0c:	d94e      	bls.n	8006cac <Schedule1Activity+0x1bc>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006c0e:	88bb      	ldrh	r3, [r7, #4]
 8006c10:	2bec      	cmp	r3, #236	; 0xec
 8006c12:	d84b      	bhi.n	8006cac <Schedule1Activity+0x1bc>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006c14:	4b2b      	ldr	r3, [pc, #172]	; (8006cc4 <Schedule1Activity+0x1d4>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	f7fc f93b 	bl	8002e96 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 8006c20:	4b29      	ldr	r3, [pc, #164]	; (8006cc8 <Schedule1Activity+0x1d8>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	4619      	mov	r1, r3
 8006c26:	2001      	movs	r0, #1
 8006c28:	f7fc f958 	bl	8002edc <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006c2c:	4b27      	ldr	r3, [pc, #156]	; (8006ccc <Schedule1Activity+0x1dc>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	4619      	mov	r1, r3
 8006c32:	2001      	movs	r0, #1
 8006c34:	f7fc f975 	bl	8002f22 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006c38:	4b25      	ldr	r3, [pc, #148]	; (8006cd0 <Schedule1Activity+0x1e0>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	2001      	movs	r0, #1
 8006c40:	f7fc f992 	bl	8002f68 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006c44:	4923      	ldr	r1, [pc, #140]	; (8006cd4 <Schedule1Activity+0x1e4>)
 8006c46:	2001      	movs	r0, #1
 8006c48:	f7fc f829 	bl	8002c9e <EEPROM_ScheduleDayInWeekUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006c4c:	4826      	ldr	r0, [pc, #152]	; (8006ce8 <Schedule1Activity+0x1f8>)
 8006c4e:	f7fa fd4f 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 8006c52:	4926      	ldr	r1, [pc, #152]	; (8006cec <Schedule1Activity+0x1fc>)
 8006c54:	4826      	ldr	r0, [pc, #152]	; (8006cf0 <Schedule1Activity+0x200>)
 8006c56:	f009 fdb9 	bl	80107cc <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006c5a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	2301      	movs	r3, #1
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006c68:	220a      	movs	r2, #10
 8006c6a:	2128      	movs	r1, #40	; 0x28
 8006c6c:	4820      	ldr	r0, [pc, #128]	; (8006cf0 <Schedule1Activity+0x200>)
 8006c6e:	f7fa ff59 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006c72:	4820      	ldr	r0, [pc, #128]	; (8006cf4 <Schedule1Activity+0x204>)
 8006c74:	f7fa fd3c 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006c78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	2305      	movs	r3, #5
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	2314      	movs	r3, #20
 8006c84:	225a      	movs	r2, #90	; 0x5a
 8006c86:	21d8      	movs	r1, #216	; 0xd8
 8006c88:	2078      	movs	r0, #120	; 0x78
 8006c8a:	f7fa fce0 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006c8e:	491a      	ldr	r1, [pc, #104]	; (8006cf8 <Schedule1Activity+0x208>)
 8006c90:	4817      	ldr	r0, [pc, #92]	; (8006cf0 <Schedule1Activity+0x200>)
 8006c92:	f009 fd9b 	bl	80107cc <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006c96:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	22da      	movs	r2, #218	; 0xda
 8006ca4:	217e      	movs	r1, #126	; 0x7e
 8006ca6:	4812      	ldr	r0, [pc, #72]	; (8006cf0 <Schedule1Activity+0x200>)
 8006ca8:	f7fa ff3c 	bl	8001b24 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006cac:	f002 f9c6 	bl	800903c <HAL_GetTick>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <Schedule1Activity+0x1ec>)
 8006cb4:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006cb6:	bf00      	nop
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000258 	.word	0x20000258
 8006cc4:	20000277 	.word	0x20000277
 8006cc8:	20000279 	.word	0x20000279
 8006ccc:	20000278 	.word	0x20000278
 8006cd0:	2000027a 	.word	0x2000027a
 8006cd4:	2000025c 	.word	0x2000025c
 8006cd8:	20000264 	.word	0x20000264
 8006cdc:	20000280 	.word	0x20000280
 8006ce0:	20000284 	.word	0x20000284
 8006ce4:	20000255 	.word	0x20000255
 8006ce8:	08017700 	.word	0x08017700
 8006cec:	08014948 	.word	0x08014948
 8006cf0:	200002f0 	.word	0x200002f0
 8006cf4:	08015788 	.word	0x08015788
 8006cf8:	0801495c 	.word	0x0801495c

08006cfc <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006d02:	4b68      	ldr	r3, [pc, #416]	; (8006ea4 <Schedule2Activity+0x1a8>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d11a      	bne.n	8006d40 <Schedule2Activity+0x44>
	{
		  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 8006d0a:	4967      	ldr	r1, [pc, #412]	; (8006ea8 <Schedule2Activity+0x1ac>)
 8006d0c:	2002      	movs	r0, #2
 8006d0e:	f7fc f832 	bl	8002d76 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 8006d12:	4966      	ldr	r1, [pc, #408]	; (8006eac <Schedule2Activity+0x1b0>)
 8006d14:	2002      	movs	r0, #2
 8006d16:	f7fc f852 	bl	8002dbe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 8006d1a:	4965      	ldr	r1, [pc, #404]	; (8006eb0 <Schedule2Activity+0x1b4>)
 8006d1c:	2002      	movs	r0, #2
 8006d1e:	f7fc f872 	bl	8002e06 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 8006d22:	4964      	ldr	r1, [pc, #400]	; (8006eb4 <Schedule2Activity+0x1b8>)
 8006d24:	2002      	movs	r0, #2
 8006d26:	f7fc f892 	bl	8002e4e <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 8006d2a:	4963      	ldr	r1, [pc, #396]	; (8006eb8 <Schedule2Activity+0x1bc>)
 8006d2c:	2002      	movs	r0, #2
 8006d2e:	f7fb ff75 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 8006d32:	4962      	ldr	r1, [pc, #392]	; (8006ebc <Schedule2Activity+0x1c0>)
 8006d34:	2002      	movs	r0, #2
 8006d36:	f7fb ffed 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  ScheduleChangeFlag = 0;
 8006d3a:	4b5a      	ldr	r3, [pc, #360]	; (8006ea4 <Schedule2Activity+0x1a8>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006d40:	f7fb faa4 	bl	800228c <XPT2046_IsTouched>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80a7 	beq.w	8006e9a <Schedule2Activity+0x19e>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006d4c:	f002 f976 	bl	800903c <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	4b5b      	ldr	r3, [pc, #364]	; (8006ec0 <Schedule2Activity+0x1c4>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d5c:	f0c0 809d 	bcc.w	8006e9a <Schedule2Activity+0x19e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006d60:	1d3a      	adds	r2, r7, #4
 8006d62:	1dbb      	adds	r3, r7, #6
 8006d64:	4611      	mov	r1, r2
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fb fa52 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006d6c:	88fb      	ldrh	r3, [r7, #6]
 8006d6e:	2b09      	cmp	r3, #9
 8006d70:	d90f      	bls.n	8006d92 <Schedule2Activity+0x96>
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	2b6e      	cmp	r3, #110	; 0x6e
 8006d76:	d80c      	bhi.n	8006d92 <Schedule2Activity+0x96>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006d78:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006d7a:	2bd7      	cmp	r3, #215	; 0xd7
 8006d7c:	d909      	bls.n	8006d92 <Schedule2Activity+0x96>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006d7e:	88bb      	ldrh	r3, [r7, #4]
 8006d80:	2bec      	cmp	r3, #236	; 0xec
 8006d82:	d806      	bhi.n	8006d92 <Schedule2Activity+0x96>
			{
				State = MENUTFT_SCHEDULE_1;
 8006d84:	4b4f      	ldr	r3, [pc, #316]	; (8006ec4 <Schedule2Activity+0x1c8>)
 8006d86:	2207      	movs	r2, #7
 8006d88:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006d8a:	4b4f      	ldr	r3, [pc, #316]	; (8006ec8 <Schedule2Activity+0x1cc>)
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	e07e      	b.n	8006e90 <Schedule2Activity+0x194>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006d92:	88bb      	ldrh	r3, [r7, #4]
 8006d94:	2b31      	cmp	r3, #49	; 0x31
 8006d96:	d909      	bls.n	8006dac <Schedule2Activity+0xb0>
 8006d98:	88bb      	ldrh	r3, [r7, #4]
 8006d9a:	2b46      	cmp	r3, #70	; 0x46
 8006d9c:	d806      	bhi.n	8006dac <Schedule2Activity+0xb0>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	88ba      	ldrh	r2, [r7, #4]
 8006da2:	4611      	mov	r1, r2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fbf1 	bl	800758c <MenuTFTSchedule2ActivityDayOfWeekRow>
 8006daa:	e071      	b.n	8006e90 <Schedule2Activity+0x194>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006dac:	88bb      	ldrh	r3, [r7, #4]
 8006dae:	2b64      	cmp	r3, #100	; 0x64
 8006db0:	d909      	bls.n	8006dc6 <Schedule2Activity+0xca>
 8006db2:	88bb      	ldrh	r3, [r7, #4]
 8006db4:	2b79      	cmp	r3, #121	; 0x79
 8006db6:	d806      	bhi.n	8006dc6 <Schedule2Activity+0xca>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	88ba      	ldrh	r2, [r7, #4]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fcc6 	bl	8007750 <MenuTFTSchedule2ActivityHourMinuteONAdd>
 8006dc4:	e064      	b.n	8006e90 <Schedule2Activity+0x194>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006dc6:	88bb      	ldrh	r3, [r7, #4]
 8006dc8:	2b87      	cmp	r3, #135	; 0x87
 8006dca:	d909      	bls.n	8006de0 <Schedule2Activity+0xe4>
 8006dcc:	88bb      	ldrh	r3, [r7, #4]
 8006dce:	2b9c      	cmp	r3, #156	; 0x9c
 8006dd0:	d806      	bhi.n	8006de0 <Schedule2Activity+0xe4>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 8006dd2:	88fb      	ldrh	r3, [r7, #6]
 8006dd4:	88ba      	ldrh	r2, [r7, #4]
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fd83 	bl	80078e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006dde:	e057      	b.n	8006e90 <Schedule2Activity+0x194>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006de0:	88fb      	ldrh	r3, [r7, #6]
 8006de2:	2b77      	cmp	r3, #119	; 0x77
 8006de4:	d954      	bls.n	8006e90 <Schedule2Activity+0x194>
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	2bd2      	cmp	r3, #210	; 0xd2
 8006dea:	d851      	bhi.n	8006e90 <Schedule2Activity+0x194>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006dec:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006dee:	2bd7      	cmp	r3, #215	; 0xd7
 8006df0:	d94e      	bls.n	8006e90 <Schedule2Activity+0x194>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006df2:	88bb      	ldrh	r3, [r7, #4]
 8006df4:	2bec      	cmp	r3, #236	; 0xec
 8006df6:	d84b      	bhi.n	8006e90 <Schedule2Activity+0x194>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 8006df8:	4b2b      	ldr	r3, [pc, #172]	; (8006ea8 <Schedule2Activity+0x1ac>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	2002      	movs	r0, #2
 8006e00:	f7fc f849 	bl	8002e96 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006e04:	4b29      	ldr	r3, [pc, #164]	; (8006eac <Schedule2Activity+0x1b0>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	2002      	movs	r0, #2
 8006e0c:	f7fc f866 	bl	8002edc <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006e10:	4b27      	ldr	r3, [pc, #156]	; (8006eb0 <Schedule2Activity+0x1b4>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	4619      	mov	r1, r3
 8006e16:	2002      	movs	r0, #2
 8006e18:	f7fc f883 	bl	8002f22 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006e1c:	4b25      	ldr	r3, [pc, #148]	; (8006eb4 <Schedule2Activity+0x1b8>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	4619      	mov	r1, r3
 8006e22:	2002      	movs	r0, #2
 8006e24:	f7fc f8a0 	bl	8002f68 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 8006e28:	4928      	ldr	r1, [pc, #160]	; (8006ecc <Schedule2Activity+0x1d0>)
 8006e2a:	2002      	movs	r0, #2
 8006e2c:	f7fb ff37 	bl	8002c9e <EEPROM_ScheduleDayInWeekUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006e30:	4827      	ldr	r0, [pc, #156]	; (8006ed0 <Schedule2Activity+0x1d4>)
 8006e32:	f7fa fc5d 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 8006e36:	4927      	ldr	r1, [pc, #156]	; (8006ed4 <Schedule2Activity+0x1d8>)
 8006e38:	4827      	ldr	r0, [pc, #156]	; (8006ed8 <Schedule2Activity+0x1dc>)
 8006e3a:	f009 fcc7 	bl	80107cc <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006e3e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	2301      	movs	r3, #1
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006e4c:	220a      	movs	r2, #10
 8006e4e:	2128      	movs	r1, #40	; 0x28
 8006e50:	4821      	ldr	r0, [pc, #132]	; (8006ed8 <Schedule2Activity+0x1dc>)
 8006e52:	f7fa fe67 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006e56:	4821      	ldr	r0, [pc, #132]	; (8006edc <Schedule2Activity+0x1e0>)
 8006e58:	f7fa fc4a 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006e5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	2305      	movs	r3, #5
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	2314      	movs	r3, #20
 8006e68:	225a      	movs	r2, #90	; 0x5a
 8006e6a:	21d8      	movs	r1, #216	; 0xd8
 8006e6c:	2078      	movs	r0, #120	; 0x78
 8006e6e:	f7fa fbee 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006e72:	491b      	ldr	r1, [pc, #108]	; (8006ee0 <Schedule2Activity+0x1e4>)
 8006e74:	4818      	ldr	r0, [pc, #96]	; (8006ed8 <Schedule2Activity+0x1dc>)
 8006e76:	f009 fca9 	bl	80107cc <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006e7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	2300      	movs	r3, #0
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	2300      	movs	r3, #0
 8006e86:	22da      	movs	r2, #218	; 0xda
 8006e88:	217e      	movs	r1, #126	; 0x7e
 8006e8a:	4813      	ldr	r0, [pc, #76]	; (8006ed8 <Schedule2Activity+0x1dc>)
 8006e8c:	f7fa fe4a 	bl	8001b24 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 8006e90:	f002 f8d4 	bl	800903c <HAL_GetTick>
 8006e94:	4603      	mov	r3, r0
 8006e96:	4a0a      	ldr	r2, [pc, #40]	; (8006ec0 <Schedule2Activity+0x1c4>)
 8006e98:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000258 	.word	0x20000258
 8006ea8:	2000027b 	.word	0x2000027b
 8006eac:	2000027d 	.word	0x2000027d
 8006eb0:	2000027c 	.word	0x2000027c
 8006eb4:	2000027e 	.word	0x2000027e
 8006eb8:	2000025c 	.word	0x2000025c
 8006ebc:	20000264 	.word	0x20000264
 8006ec0:	20000280 	.word	0x20000280
 8006ec4:	20000284 	.word	0x20000284
 8006ec8:	20000255 	.word	0x20000255
 8006ecc:	20000270 	.word	0x20000270
 8006ed0:	08017700 	.word	0x08017700
 8006ed4:	08014964 	.word	0x08014964
 8006ed8:	200002f0 	.word	0x200002f0
 8006edc:	08015788 	.word	0x08015788
 8006ee0:	0801495c 	.word	0x0801495c

08006ee4 <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	460a      	mov	r2, r1
 8006eee:	80fb      	strh	r3, [r7, #6]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006ef4:	88fb      	ldrh	r3, [r7, #6]
 8006ef6:	2b3b      	cmp	r3, #59	; 0x3b
 8006ef8:	d91a      	bls.n	8006f30 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	2b50      	cmp	r3, #80	; 0x50
 8006efe:	d817      	bhi.n	8006f30 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006f00:	4b68      	ldr	r3, [pc, #416]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006f08:	2100      	movs	r1, #0
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	f000 f8cc 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 8006f10:	e003      	b.n	8006f1a <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006f12:	2101      	movs	r1, #1
 8006f14:	2001      	movs	r0, #1
 8006f16:	f000 f8c7 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006f1a:	4b62      	ldr	r3, [pc, #392]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	4b5e      	ldr	r3, [pc, #376]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e0b4      	b.n	800709a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	2b59      	cmp	r3, #89	; 0x59
 8006f34:	d91a      	bls.n	8006f6c <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	2b6e      	cmp	r3, #110	; 0x6e
 8006f3a:	d817      	bhi.n	8006f6c <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006f3c:	4b59      	ldr	r3, [pc, #356]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 8006f44:	2100      	movs	r1, #0
 8006f46:	2002      	movs	r0, #2
 8006f48:	f000 f8ae 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 8006f4c:	e003      	b.n	8006f56 <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006f4e:	2101      	movs	r1, #1
 8006f50:	2002      	movs	r0, #2
 8006f52:	f000 f8a9 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 8006f56:	4b53      	ldr	r3, [pc, #332]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bf0c      	ite	eq
 8006f5e:	2301      	moveq	r3, #1
 8006f60:	2300      	movne	r3, #0
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	4b4f      	ldr	r3, [pc, #316]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f68:	705a      	strb	r2, [r3, #1]
 8006f6a:	e096      	b.n	800709a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	2b77      	cmp	r3, #119	; 0x77
 8006f70:	d91a      	bls.n	8006fa8 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	2b8c      	cmp	r3, #140	; 0x8c
 8006f76:	d817      	bhi.n	8006fa8 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006f78:	4b4a      	ldr	r3, [pc, #296]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f7a:	789b      	ldrb	r3, [r3, #2]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d004      	beq.n	8006f8a <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006f80:	2100      	movs	r1, #0
 8006f82:	2003      	movs	r0, #3
 8006f84:	f000 f890 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 8006f88:	e003      	b.n	8006f92 <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	2003      	movs	r0, #3
 8006f8e:	f000 f88b 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 8006f92:	4b44      	ldr	r3, [pc, #272]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f94:	789b      	ldrb	r3, [r3, #2]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bf0c      	ite	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	2300      	movne	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4b40      	ldr	r3, [pc, #256]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fa4:	709a      	strb	r2, [r3, #2]
 8006fa6:	e078      	b.n	800709a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	2b95      	cmp	r3, #149	; 0x95
 8006fac:	d91a      	bls.n	8006fe4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2baa      	cmp	r3, #170	; 0xaa
 8006fb2:	d817      	bhi.n	8006fe4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006fb4:	4b3b      	ldr	r3, [pc, #236]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fb6:	78db      	ldrb	r3, [r3, #3]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	2004      	movs	r0, #4
 8006fc0:	f000 f872 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 8006fc4:	e003      	b.n	8006fce <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	2004      	movs	r0, #4
 8006fca:	f000 f86d 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006fce:	4b35      	ldr	r3, [pc, #212]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fd0:	78db      	ldrb	r3, [r3, #3]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4b31      	ldr	r3, [pc, #196]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fe0:	70da      	strb	r2, [r3, #3]
 8006fe2:	e05a      	b.n	800709a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006fe4:	88fb      	ldrh	r3, [r7, #6]
 8006fe6:	2bb3      	cmp	r3, #179	; 0xb3
 8006fe8:	d91a      	bls.n	8007020 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	2bc8      	cmp	r3, #200	; 0xc8
 8006fee:	d817      	bhi.n	8007020 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006ff0:	4b2c      	ldr	r3, [pc, #176]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ff2:	791b      	ldrb	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d004      	beq.n	8007002 <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	2005      	movs	r0, #5
 8006ffc:	f000 f854 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 8007000:	e003      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8007002:	2101      	movs	r1, #1
 8007004:	2005      	movs	r0, #5
 8007006:	f000 f84f 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 800700a:	4b26      	ldr	r3, [pc, #152]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800700c:	791b      	ldrb	r3, [r3, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	bf0c      	ite	eq
 8007012:	2301      	moveq	r3, #1
 8007014:	2300      	movne	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	4b22      	ldr	r3, [pc, #136]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800701c:	711a      	strb	r2, [r3, #4]
 800701e:	e03c      	b.n	800709a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	2bd1      	cmp	r3, #209	; 0xd1
 8007024:	d91a      	bls.n	800705c <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 8007026:	88fb      	ldrh	r3, [r7, #6]
 8007028:	2be6      	cmp	r3, #230	; 0xe6
 800702a:	d817      	bhi.n	800705c <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 800702c:	4b1d      	ldr	r3, [pc, #116]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800702e:	795b      	ldrb	r3, [r3, #5]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 8007034:	2100      	movs	r1, #0
 8007036:	2006      	movs	r0, #6
 8007038:	f000 f836 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 800703c:	e003      	b.n	8007046 <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 800703e:	2101      	movs	r1, #1
 8007040:	2006      	movs	r0, #6
 8007042:	f000 f831 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 8007046:	4b17      	ldr	r3, [pc, #92]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007048:	795b      	ldrb	r3, [r3, #5]
 800704a:	2b00      	cmp	r3, #0
 800704c:	bf0c      	ite	eq
 800704e:	2301      	moveq	r3, #1
 8007050:	2300      	movne	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007058:	715a      	strb	r2, [r3, #5]
 800705a:	e01e      	b.n	800709a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 800705c:	88fb      	ldrh	r3, [r7, #6]
 800705e:	2bef      	cmp	r3, #239	; 0xef
 8007060:	d91b      	bls.n	800709a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007068:	d817      	bhi.n	800709a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 800706a:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800706c:	799b      	ldrb	r3, [r3, #6]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 8007072:	2100      	movs	r1, #0
 8007074:	2007      	movs	r0, #7
 8007076:	f000 f817 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 800707a:	e003      	b.n	8007084 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 800707c:	2101      	movs	r1, #1
 800707e:	2007      	movs	r0, #7
 8007080:	f000 f812 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 8007084:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007086:	799b      	ldrb	r3, [r3, #6]
 8007088:	2b00      	cmp	r3, #0
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007096:	719a      	strb	r2, [r3, #6]
	}
}
 8007098:	e7ff      	b.n	800709a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 800709a:	bf00      	nop
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	2000025c 	.word	0x2000025c

080070a8 <changeTFTScheduleDayOfWeek>:

void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	4603      	mov	r3, r0
 80070b0:	460a      	mov	r2, r1
 80070b2:	71fb      	strb	r3, [r7, #7]
 80070b4:	4613      	mov	r3, r2
 80070b6:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d11a      	bne.n	80070f4 <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 80070be:	79bb      	ldrb	r3, [r7, #6]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	2305      	movs	r3, #5
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2312      	movs	r3, #18
 80070d0:	2212      	movs	r2, #18
 80070d2:	2133      	movs	r1, #51	; 0x33
 80070d4:	203d      	movs	r0, #61	; 0x3d
 80070d6:	f7fa faba 	bl	800164e <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 80070da:	e0be      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80070dc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	2305      	movs	r3, #5
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	2312      	movs	r3, #18
 80070e8:	2212      	movs	r2, #18
 80070ea:	2133      	movs	r1, #51	; 0x33
 80070ec:	203d      	movs	r0, #61	; 0x3d
 80070ee:	f7fa faae 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80070f2:	e0b2      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 80070f4:	79fb      	ldrb	r3, [r7, #7]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d11a      	bne.n	8007130 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 80070fa:	79bb      	ldrb	r3, [r7, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007100:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	2305      	movs	r3, #5
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	2312      	movs	r3, #18
 800710c:	2212      	movs	r2, #18
 800710e:	2133      	movs	r1, #51	; 0x33
 8007110:	205b      	movs	r0, #91	; 0x5b
 8007112:	f7fa fa9c 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007116:	e0a0      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007118:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	2305      	movs	r3, #5
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	2312      	movs	r3, #18
 8007124:	2212      	movs	r2, #18
 8007126:	2133      	movs	r1, #51	; 0x33
 8007128:	205b      	movs	r0, #91	; 0x5b
 800712a:	f7fa fa90 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800712e:	e094      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	2b03      	cmp	r3, #3
 8007134:	d11a      	bne.n	800716c <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 8007136:	79bb      	ldrb	r3, [r7, #6]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10b      	bne.n	8007154 <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800713c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	2305      	movs	r3, #5
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	2312      	movs	r3, #18
 8007148:	2212      	movs	r2, #18
 800714a:	2133      	movs	r1, #51	; 0x33
 800714c:	2079      	movs	r0, #121	; 0x79
 800714e:	f7fa fa7e 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007152:	e082      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007154:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	2305      	movs	r3, #5
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	2312      	movs	r3, #18
 8007160:	2212      	movs	r2, #18
 8007162:	2133      	movs	r1, #51	; 0x33
 8007164:	2079      	movs	r0, #121	; 0x79
 8007166:	f7fa fa72 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800716a:	e076      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	2b04      	cmp	r3, #4
 8007170:	d11a      	bne.n	80071a8 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 8007172:	79bb      	ldrb	r3, [r7, #6]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10b      	bne.n	8007190 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007178:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	2305      	movs	r3, #5
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	2312      	movs	r3, #18
 8007184:	2212      	movs	r2, #18
 8007186:	2133      	movs	r1, #51	; 0x33
 8007188:	2097      	movs	r0, #151	; 0x97
 800718a:	f7fa fa60 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800718e:	e064      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007190:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	2305      	movs	r3, #5
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	2312      	movs	r3, #18
 800719c:	2212      	movs	r2, #18
 800719e:	2133      	movs	r1, #51	; 0x33
 80071a0:	2097      	movs	r0, #151	; 0x97
 80071a2:	f7fa fa54 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80071a6:	e058      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d11a      	bne.n	80071e4 <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 80071ae:	79bb      	ldrb	r3, [r7, #6]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80071b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	2305      	movs	r3, #5
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	2312      	movs	r3, #18
 80071c0:	2212      	movs	r2, #18
 80071c2:	2133      	movs	r1, #51	; 0x33
 80071c4:	20b5      	movs	r0, #181	; 0xb5
 80071c6:	f7fa fa42 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80071ca:	e046      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80071cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	2305      	movs	r3, #5
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	2312      	movs	r3, #18
 80071d8:	2212      	movs	r2, #18
 80071da:	2133      	movs	r1, #51	; 0x33
 80071dc:	20b5      	movs	r0, #181	; 0xb5
 80071de:	f7fa fa36 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80071e2:	e03a      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	2b06      	cmp	r3, #6
 80071e8:	d11a      	bne.n	8007220 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 80071ea:	79bb      	ldrb	r3, [r7, #6]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10b      	bne.n	8007208 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80071f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	2305      	movs	r3, #5
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	2312      	movs	r3, #18
 80071fc:	2212      	movs	r2, #18
 80071fe:	2133      	movs	r1, #51	; 0x33
 8007200:	20d3      	movs	r0, #211	; 0xd3
 8007202:	f7fa fa24 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007206:	e028      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007208:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	2305      	movs	r3, #5
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	2312      	movs	r3, #18
 8007214:	2212      	movs	r2, #18
 8007216:	2133      	movs	r1, #51	; 0x33
 8007218:	20d3      	movs	r0, #211	; 0xd3
 800721a:	f7fa fa18 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800721e:	e01c      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	2b07      	cmp	r3, #7
 8007224:	d119      	bne.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 8007226:	79bb      	ldrb	r3, [r7, #6]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10b      	bne.n	8007244 <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800722c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	2305      	movs	r3, #5
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	2312      	movs	r3, #18
 8007238:	2212      	movs	r2, #18
 800723a:	2133      	movs	r1, #51	; 0x33
 800723c:	20f1      	movs	r0, #241	; 0xf1
 800723e:	f7fa fa06 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007242:	e00a      	b.n	800725a <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007244:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	2305      	movs	r3, #5
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	2312      	movs	r3, #18
 8007250:	2212      	movs	r2, #18
 8007252:	2133      	movs	r1, #51	; 0x33
 8007254:	20f1      	movs	r0, #241	; 0xf1
 8007256:	f7fa f9fa 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af02      	add	r7, sp, #8
 800726a:	4603      	mov	r3, r0
 800726c:	460a      	mov	r2, r1
 800726e:	80fb      	strh	r3, [r7, #6]
 8007270:	4613      	mov	r3, r2
 8007272:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007274:	4859      	ldr	r0, [pc, #356]	; (80073dc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 8007276:	f7fa fa3b 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	2bba      	cmp	r3, #186	; 0xba
 800727e:	d92f      	bls.n	80072e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	2bdd      	cmp	r3, #221	; 0xdd
 8007284:	d82c      	bhi.n	80072e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 8007286:	4b56      	ldr	r3, [pc, #344]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b17      	cmp	r3, #23
 800728c:	d806      	bhi.n	800729c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 800728e:	4b54      	ldr	r3, [pc, #336]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	3301      	adds	r3, #1
 8007294:	b2da      	uxtb	r2, r3
 8007296:	4b52      	ldr	r3, [pc, #328]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e002      	b.n	80072a2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 800729c:	4b50      	ldr	r3, [pc, #320]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 800729e:	2201      	movs	r2, #1
 80072a0:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 80072a2:	4b4f      	ldr	r3, [pc, #316]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b09      	cmp	r3, #9
 80072a8:	d907      	bls.n	80072ba <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 80072aa:	4b4d      	ldr	r3, [pc, #308]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	494c      	ldr	r1, [pc, #304]	; (80073e4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 80072b2:	484d      	ldr	r0, [pc, #308]	; (80073e8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80072b4:	f009 fa8a 	bl	80107cc <siprintf>
 80072b8:	e006      	b.n	80072c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 80072ba:	4b49      	ldr	r3, [pc, #292]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	494a      	ldr	r1, [pc, #296]	; (80073ec <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 80072c2:	4849      	ldr	r0, [pc, #292]	; (80073e8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80072c4:	f009 fa82 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80072c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	2301      	movs	r3, #1
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	2300      	movs	r3, #0
 80072d4:	2264      	movs	r2, #100	; 0x64
 80072d6:	2150      	movs	r1, #80	; 0x50
 80072d8:	4843      	ldr	r0, [pc, #268]	; (80073e8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80072da:	f7fa fc23 	bl	8001b24 <EF_PutString>
 80072de:	e078      	b.n	80073d2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	2be8      	cmp	r3, #232	; 0xe8
 80072e4:	d930      	bls.n	8007348 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80072ec:	d22c      	bcs.n	8007348 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 80072ee:	4b40      	ldr	r3, [pc, #256]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b3a      	cmp	r3, #58	; 0x3a
 80072f4:	d806      	bhi.n	8007304 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 80072f6:	4b3e      	ldr	r3, [pc, #248]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	4b3c      	ldr	r3, [pc, #240]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	e002      	b.n	800730a <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 8007304:	4b3a      	ldr	r3, [pc, #232]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 800730a:	4b39      	ldr	r3, [pc, #228]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b09      	cmp	r3, #9
 8007310:	d907      	bls.n	8007322 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8007312:	4b37      	ldr	r3, [pc, #220]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	4932      	ldr	r1, [pc, #200]	; (80073e4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 800731a:	4833      	ldr	r0, [pc, #204]	; (80073e8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 800731c:	f009 fa56 	bl	80107cc <siprintf>
 8007320:	e006      	b.n	8007330 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8007322:	4b33      	ldr	r3, [pc, #204]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	4930      	ldr	r1, [pc, #192]	; (80073ec <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 800732a:	482f      	ldr	r0, [pc, #188]	; (80073e8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 800732c:	f009 fa4e 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007330:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	2301      	movs	r3, #1
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	2300      	movs	r3, #0
 800733c:	2264      	movs	r2, #100	; 0x64
 800733e:	218a      	movs	r1, #138	; 0x8a
 8007340:	4829      	ldr	r0, [pc, #164]	; (80073e8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8007342:	f7fa fbef 	bl	8001b24 <EF_PutString>
 8007346:	e044      	b.n	80073d2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007348:	88fb      	ldrh	r3, [r7, #6]
 800734a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800734e:	d940      	bls.n	80073d2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8007350:	88fb      	ldrh	r3, [r7, #6]
 8007352:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007356:	d23c      	bcs.n	80073d2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8007358:	4b25      	ldr	r3, [pc, #148]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b30      	cmp	r3, #48	; 0x30
 800735e:	d806      	bhi.n	800736e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8007360:	4b23      	ldr	r3, [pc, #140]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	330a      	adds	r3, #10
 8007366:	b2da      	uxtb	r2, r3
 8007368:	4b21      	ldr	r3, [pc, #132]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	e012      	b.n	8007394 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 800736e:	4b20      	ldr	r3, [pc, #128]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	f103 020a 	add.w	r2, r3, #10
 8007376:	4b1f      	ldr	r3, [pc, #124]	; (80073f4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8007378:	fb83 1302 	smull	r1, r3, r3, r2
 800737c:	4413      	add	r3, r2
 800737e:	1159      	asrs	r1, r3, #5
 8007380:	17d3      	asrs	r3, r2, #31
 8007382:	1ac9      	subs	r1, r1, r3
 8007384:	460b      	mov	r3, r1
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	1a5b      	subs	r3, r3, r1
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	1ad1      	subs	r1, r2, r3
 800738e:	b2ca      	uxtb	r2, r1
 8007390:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007392:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8007394:	4b16      	ldr	r3, [pc, #88]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b09      	cmp	r3, #9
 800739a:	d907      	bls.n	80073ac <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 800739c:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	4910      	ldr	r1, [pc, #64]	; (80073e4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 80073a4:	4810      	ldr	r0, [pc, #64]	; (80073e8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80073a6:	f009 fa11 	bl	80107cc <siprintf>
 80073aa:	e006      	b.n	80073ba <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	490e      	ldr	r1, [pc, #56]	; (80073ec <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 80073b4:	480c      	ldr	r0, [pc, #48]	; (80073e8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80073b6:	f009 fa09 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80073ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	2301      	movs	r3, #1
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	2300      	movs	r3, #0
 80073c6:	2264      	movs	r2, #100	; 0x64
 80073c8:	218a      	movs	r1, #138	; 0x8a
 80073ca:	4807      	ldr	r0, [pc, #28]	; (80073e8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80073cc:	f7fa fbaa 	bl	8001b24 <EF_PutString>
	}
}
 80073d0:	e7ff      	b.n	80073d2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	08017700 	.word	0x08017700
 80073e0:	20000277 	.word	0x20000277
 80073e4:	0801497c 	.word	0x0801497c
 80073e8:	200002f0 	.word	0x200002f0
 80073ec:	08014984 	.word	0x08014984
 80073f0:	20000279 	.word	0x20000279
 80073f4:	88888889 	.word	0x88888889

080073f8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	4603      	mov	r3, r0
 8007400:	460a      	mov	r2, r1
 8007402:	80fb      	strh	r3, [r7, #6]
 8007404:	4613      	mov	r3, r2
 8007406:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007408:	4859      	ldr	r0, [pc, #356]	; (8007570 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 800740a:	f7fa f971 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	2bba      	cmp	r3, #186	; 0xba
 8007412:	d92f      	bls.n	8007474 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	2bdd      	cmp	r3, #221	; 0xdd
 8007418:	d82c      	bhi.n	8007474 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 800741a:	4b56      	ldr	r3, [pc, #344]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b17      	cmp	r3, #23
 8007420:	d806      	bhi.n	8007430 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8007422:	4b54      	ldr	r3, [pc, #336]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	b2da      	uxtb	r2, r3
 800742a:	4b52      	ldr	r3, [pc, #328]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	e002      	b.n	8007436 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8007430:	4b50      	ldr	r3, [pc, #320]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007432:	2201      	movs	r2, #1
 8007434:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 8007436:	4b4f      	ldr	r3, [pc, #316]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b09      	cmp	r3, #9
 800743c:	d907      	bls.n	800744e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 800743e:	4b4d      	ldr	r3, [pc, #308]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	494c      	ldr	r1, [pc, #304]	; (8007578 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8007446:	484d      	ldr	r0, [pc, #308]	; (800757c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007448:	f009 f9c0 	bl	80107cc <siprintf>
 800744c:	e006      	b.n	800745c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 800744e:	4b49      	ldr	r3, [pc, #292]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	494a      	ldr	r1, [pc, #296]	; (8007580 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8007456:	4849      	ldr	r0, [pc, #292]	; (800757c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007458:	f009 f9b8 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800745c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	2301      	movs	r3, #1
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	2300      	movs	r3, #0
 8007468:	2287      	movs	r2, #135	; 0x87
 800746a:	214e      	movs	r1, #78	; 0x4e
 800746c:	4843      	ldr	r0, [pc, #268]	; (800757c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800746e:	f7fa fb59 	bl	8001b24 <EF_PutString>
 8007472:	e078      	b.n	8007566 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	2be8      	cmp	r3, #232	; 0xe8
 8007478:	d930      	bls.n	80074dc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007480:	d22c      	bcs.n	80074dc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 8007482:	4b40      	ldr	r3, [pc, #256]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b3a      	cmp	r3, #58	; 0x3a
 8007488:	d806      	bhi.n	8007498 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 800748a:	4b3e      	ldr	r3, [pc, #248]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	3301      	adds	r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	4b3c      	ldr	r3, [pc, #240]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e002      	b.n	800749e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 8007498:	4b3a      	ldr	r3, [pc, #232]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800749a:	2200      	movs	r2, #0
 800749c:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 800749e:	4b39      	ldr	r3, [pc, #228]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b09      	cmp	r3, #9
 80074a4:	d907      	bls.n	80074b6 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 80074a6:	4b37      	ldr	r3, [pc, #220]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	4932      	ldr	r1, [pc, #200]	; (8007578 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 80074ae:	4833      	ldr	r0, [pc, #204]	; (800757c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80074b0:	f009 f98c 	bl	80107cc <siprintf>
 80074b4:	e006      	b.n	80074c4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 80074b6:	4b33      	ldr	r3, [pc, #204]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	4930      	ldr	r1, [pc, #192]	; (8007580 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 80074be:	482f      	ldr	r0, [pc, #188]	; (800757c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80074c0:	f009 f984 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80074c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	2301      	movs	r3, #1
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2300      	movs	r3, #0
 80074d0:	2287      	movs	r2, #135	; 0x87
 80074d2:	218a      	movs	r1, #138	; 0x8a
 80074d4:	4829      	ldr	r0, [pc, #164]	; (800757c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80074d6:	f7fa fb25 	bl	8001b24 <EF_PutString>
 80074da:	e044      	b.n	8007566 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80074dc:	88fb      	ldrh	r3, [r7, #6]
 80074de:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80074e2:	d940      	bls.n	8007566 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80074ea:	d23c      	bcs.n	8007566 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 80074ec:	4b25      	ldr	r3, [pc, #148]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b30      	cmp	r3, #48	; 0x30
 80074f2:	d806      	bhi.n	8007502 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 80074f4:	4b23      	ldr	r3, [pc, #140]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	330a      	adds	r3, #10
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	4b21      	ldr	r3, [pc, #132]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074fe:	701a      	strb	r2, [r3, #0]
 8007500:	e012      	b.n	8007528 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8007502:	4b20      	ldr	r3, [pc, #128]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	f103 020a 	add.w	r2, r3, #10
 800750a:	4b1f      	ldr	r3, [pc, #124]	; (8007588 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 800750c:	fb83 1302 	smull	r1, r3, r3, r2
 8007510:	4413      	add	r3, r2
 8007512:	1159      	asrs	r1, r3, #5
 8007514:	17d3      	asrs	r3, r2, #31
 8007516:	1ac9      	subs	r1, r1, r3
 8007518:	460b      	mov	r3, r1
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	1a5b      	subs	r3, r3, r1
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	1ad1      	subs	r1, r2, r3
 8007522:	b2ca      	uxtb	r2, r1
 8007524:	4b17      	ldr	r3, [pc, #92]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007526:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8007528:	4b16      	ldr	r3, [pc, #88]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b09      	cmp	r3, #9
 800752e:	d907      	bls.n	8007540 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8007530:	4b14      	ldr	r3, [pc, #80]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	4910      	ldr	r1, [pc, #64]	; (8007578 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8007538:	4810      	ldr	r0, [pc, #64]	; (800757c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800753a:	f009 f947 	bl	80107cc <siprintf>
 800753e:	e006      	b.n	800754e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8007540:	4b10      	ldr	r3, [pc, #64]	; (8007584 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	490e      	ldr	r1, [pc, #56]	; (8007580 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8007548:	480c      	ldr	r0, [pc, #48]	; (800757c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800754a:	f009 f93f 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800754e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	2301      	movs	r3, #1
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	2300      	movs	r3, #0
 800755a:	2287      	movs	r2, #135	; 0x87
 800755c:	218a      	movs	r1, #138	; 0x8a
 800755e:	4807      	ldr	r0, [pc, #28]	; (800757c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007560:	f7fa fae0 	bl	8001b24 <EF_PutString>
	}
}
 8007564:	e7ff      	b.n	8007566 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8007566:	bf00      	nop
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	08017700 	.word	0x08017700
 8007574:	20000278 	.word	0x20000278
 8007578:	0801497c 	.word	0x0801497c
 800757c:	200002f0 	.word	0x200002f0
 8007580:	08014984 	.word	0x08014984
 8007584:	2000027a 	.word	0x2000027a
 8007588:	88888889 	.word	0x88888889

0800758c <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	460a      	mov	r2, r1
 8007596:	80fb      	strh	r3, [r7, #6]
 8007598:	4613      	mov	r3, r2
 800759a:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 800759c:	88fb      	ldrh	r3, [r7, #6]
 800759e:	2b3b      	cmp	r3, #59	; 0x3b
 80075a0:	d91a      	bls.n	80075d8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	2b50      	cmp	r3, #80	; 0x50
 80075a6:	d817      	bhi.n	80075d8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 80075a8:	4b68      	ldr	r3, [pc, #416]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d004      	beq.n	80075ba <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 80075b0:	2100      	movs	r1, #0
 80075b2:	2001      	movs	r0, #1
 80075b4:	f7ff fd78 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 80075b8:	e003      	b.n	80075c2 <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 80075ba:	2101      	movs	r1, #1
 80075bc:	2001      	movs	r0, #1
 80075be:	f7ff fd73 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 80075c2:	4b62      	ldr	r3, [pc, #392]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bf0c      	ite	eq
 80075ca:	2301      	moveq	r3, #1
 80075cc:	2300      	movne	r3, #0
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	4b5e      	ldr	r3, [pc, #376]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	e0b4      	b.n	8007742 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	2b59      	cmp	r3, #89	; 0x59
 80075dc:	d91a      	bls.n	8007614 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	2b6e      	cmp	r3, #110	; 0x6e
 80075e2:	d817      	bhi.n	8007614 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 80075e4:	4b59      	ldr	r3, [pc, #356]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075e6:	785b      	ldrb	r3, [r3, #1]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d004      	beq.n	80075f6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 80075ec:	2100      	movs	r1, #0
 80075ee:	2002      	movs	r0, #2
 80075f0:	f7ff fd5a 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 80075f4:	e003      	b.n	80075fe <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 80075f6:	2101      	movs	r1, #1
 80075f8:	2002      	movs	r0, #2
 80075fa:	f7ff fd55 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 80075fe:	4b53      	ldr	r3, [pc, #332]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b00      	cmp	r3, #0
 8007604:	bf0c      	ite	eq
 8007606:	2301      	moveq	r3, #1
 8007608:	2300      	movne	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	461a      	mov	r2, r3
 800760e:	4b4f      	ldr	r3, [pc, #316]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007610:	705a      	strb	r2, [r3, #1]
 8007612:	e096      	b.n	8007742 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007614:	88fb      	ldrh	r3, [r7, #6]
 8007616:	2b77      	cmp	r3, #119	; 0x77
 8007618:	d91a      	bls.n	8007650 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 800761a:	88fb      	ldrh	r3, [r7, #6]
 800761c:	2b8c      	cmp	r3, #140	; 0x8c
 800761e:	d817      	bhi.n	8007650 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8007620:	4b4a      	ldr	r3, [pc, #296]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007622:	789b      	ldrb	r3, [r3, #2]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8007628:	2100      	movs	r1, #0
 800762a:	2003      	movs	r0, #3
 800762c:	f7ff fd3c 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 8007630:	e003      	b.n	800763a <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8007632:	2101      	movs	r1, #1
 8007634:	2003      	movs	r0, #3
 8007636:	f7ff fd37 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 800763a:	4b44      	ldr	r3, [pc, #272]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800763c:	789b      	ldrb	r3, [r3, #2]
 800763e:	2b00      	cmp	r3, #0
 8007640:	bf0c      	ite	eq
 8007642:	2301      	moveq	r3, #1
 8007644:	2300      	movne	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	4b40      	ldr	r3, [pc, #256]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800764c:	709a      	strb	r2, [r3, #2]
 800764e:	e078      	b.n	8007742 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007650:	88fb      	ldrh	r3, [r7, #6]
 8007652:	2b95      	cmp	r3, #149	; 0x95
 8007654:	d91a      	bls.n	800768c <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	2baa      	cmp	r3, #170	; 0xaa
 800765a:	d817      	bhi.n	800768c <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 800765c:	4b3b      	ldr	r3, [pc, #236]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800765e:	78db      	ldrb	r3, [r3, #3]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d004      	beq.n	800766e <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8007664:	2100      	movs	r1, #0
 8007666:	2004      	movs	r0, #4
 8007668:	f7ff fd1e 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 800766c:	e003      	b.n	8007676 <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 800766e:	2101      	movs	r1, #1
 8007670:	2004      	movs	r0, #4
 8007672:	f7ff fd19 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 8007676:	4b35      	ldr	r3, [pc, #212]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007678:	78db      	ldrb	r3, [r3, #3]
 800767a:	2b00      	cmp	r3, #0
 800767c:	bf0c      	ite	eq
 800767e:	2301      	moveq	r3, #1
 8007680:	2300      	movne	r3, #0
 8007682:	b2db      	uxtb	r3, r3
 8007684:	461a      	mov	r2, r3
 8007686:	4b31      	ldr	r3, [pc, #196]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007688:	70da      	strb	r2, [r3, #3]
 800768a:	e05a      	b.n	8007742 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 800768c:	88fb      	ldrh	r3, [r7, #6]
 800768e:	2bb3      	cmp	r3, #179	; 0xb3
 8007690:	d91a      	bls.n	80076c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 8007692:	88fb      	ldrh	r3, [r7, #6]
 8007694:	2bc8      	cmp	r3, #200	; 0xc8
 8007696:	d817      	bhi.n	80076c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8007698:	4b2c      	ldr	r3, [pc, #176]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800769a:	791b      	ldrb	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 80076a0:	2100      	movs	r1, #0
 80076a2:	2005      	movs	r0, #5
 80076a4:	f7ff fd00 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 80076a8:	e003      	b.n	80076b2 <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 80076aa:	2101      	movs	r1, #1
 80076ac:	2005      	movs	r0, #5
 80076ae:	f7ff fcfb 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 80076b2:	4b26      	ldr	r3, [pc, #152]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bf0c      	ite	eq
 80076ba:	2301      	moveq	r3, #1
 80076bc:	2300      	movne	r3, #0
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b22      	ldr	r3, [pc, #136]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076c4:	711a      	strb	r2, [r3, #4]
 80076c6:	e03c      	b.n	8007742 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80076c8:	88fb      	ldrh	r3, [r7, #6]
 80076ca:	2bd1      	cmp	r3, #209	; 0xd1
 80076cc:	d91a      	bls.n	8007704 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	2be6      	cmp	r3, #230	; 0xe6
 80076d2:	d817      	bhi.n	8007704 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 80076d4:	4b1d      	ldr	r3, [pc, #116]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076d6:	795b      	ldrb	r3, [r3, #5]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 80076dc:	2100      	movs	r1, #0
 80076de:	2006      	movs	r0, #6
 80076e0:	f7ff fce2 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 80076e4:	e003      	b.n	80076ee <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 80076e6:	2101      	movs	r1, #1
 80076e8:	2006      	movs	r0, #6
 80076ea:	f7ff fcdd 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 80076ee:	4b17      	ldr	r3, [pc, #92]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076f0:	795b      	ldrb	r3, [r3, #5]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bf0c      	ite	eq
 80076f6:	2301      	moveq	r3, #1
 80076f8:	2300      	movne	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	461a      	mov	r2, r3
 80076fe:	4b13      	ldr	r3, [pc, #76]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007700:	715a      	strb	r2, [r3, #5]
 8007702:	e01e      	b.n	8007742 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007704:	88fb      	ldrh	r3, [r7, #6]
 8007706:	2bef      	cmp	r3, #239	; 0xef
 8007708:	d91b      	bls.n	8007742 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007710:	d817      	bhi.n	8007742 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8007712:	4b0e      	ldr	r3, [pc, #56]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007714:	799b      	ldrb	r3, [r3, #6]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 800771a:	2100      	movs	r1, #0
 800771c:	2007      	movs	r0, #7
 800771e:	f7ff fcc3 	bl	80070a8 <changeTFTScheduleDayOfWeek>
 8007722:	e003      	b.n	800772c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007724:	2101      	movs	r1, #1
 8007726:	2007      	movs	r0, #7
 8007728:	f7ff fcbe 	bl	80070a8 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800772e:	799b      	ldrb	r3, [r3, #6]
 8007730:	2b00      	cmp	r3, #0
 8007732:	bf0c      	ite	eq
 8007734:	2301      	moveq	r3, #1
 8007736:	2300      	movne	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	4b03      	ldr	r3, [pc, #12]	; (800774c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800773e:	719a      	strb	r2, [r3, #6]
	}
}
 8007740:	e7ff      	b.n	8007742 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000270 	.word	0x20000270

08007750 <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af02      	add	r7, sp, #8
 8007756:	4603      	mov	r3, r0
 8007758:	460a      	mov	r2, r1
 800775a:	80fb      	strh	r3, [r7, #6]
 800775c:	4613      	mov	r3, r2
 800775e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007760:	4859      	ldr	r0, [pc, #356]	; (80078c8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 8007762:	f7f9 ffc5 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	2bba      	cmp	r3, #186	; 0xba
 800776a:	d92f      	bls.n	80077cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	2bdd      	cmp	r3, #221	; 0xdd
 8007770:	d82c      	bhi.n	80077cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 8007772:	4b56      	ldr	r3, [pc, #344]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b17      	cmp	r3, #23
 8007778:	d806      	bhi.n	8007788 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 800777a:	4b54      	ldr	r3, [pc, #336]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	3301      	adds	r3, #1
 8007780:	b2da      	uxtb	r2, r3
 8007782:	4b52      	ldr	r3, [pc, #328]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	e002      	b.n	800778e <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 8007788:	4b50      	ldr	r3, [pc, #320]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 800778a:	2201      	movs	r2, #1
 800778c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 800778e:	4b4f      	ldr	r3, [pc, #316]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b09      	cmp	r3, #9
 8007794:	d907      	bls.n	80077a6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 8007796:	4b4d      	ldr	r3, [pc, #308]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	494c      	ldr	r1, [pc, #304]	; (80078d0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800779e:	484d      	ldr	r0, [pc, #308]	; (80078d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80077a0:	f009 f814 	bl	80107cc <siprintf>
 80077a4:	e006      	b.n	80077b4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 80077a6:	4b49      	ldr	r3, [pc, #292]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	494a      	ldr	r1, [pc, #296]	; (80078d8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80077ae:	4849      	ldr	r0, [pc, #292]	; (80078d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80077b0:	f009 f80c 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80077b4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	2301      	movs	r3, #1
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	2300      	movs	r3, #0
 80077c0:	2264      	movs	r2, #100	; 0x64
 80077c2:	214e      	movs	r1, #78	; 0x4e
 80077c4:	4843      	ldr	r0, [pc, #268]	; (80078d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80077c6:	f7fa f9ad 	bl	8001b24 <EF_PutString>
 80077ca:	e078      	b.n	80078be <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	2be8      	cmp	r3, #232	; 0xe8
 80077d0:	d930      	bls.n	8007834 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80077d8:	d22c      	bcs.n	8007834 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 80077da:	4b40      	ldr	r3, [pc, #256]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b3a      	cmp	r3, #58	; 0x3a
 80077e0:	d806      	bhi.n	80077f0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 80077e2:	4b3e      	ldr	r3, [pc, #248]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	3301      	adds	r3, #1
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	4b3c      	ldr	r3, [pc, #240]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e002      	b.n	80077f6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 80077f0:	4b3a      	ldr	r3, [pc, #232]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 80077f6:	4b39      	ldr	r3, [pc, #228]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b09      	cmp	r3, #9
 80077fc:	d907      	bls.n	800780e <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 80077fe:	4b37      	ldr	r3, [pc, #220]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	4932      	ldr	r1, [pc, #200]	; (80078d0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007806:	4833      	ldr	r0, [pc, #204]	; (80078d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007808:	f008 ffe0 	bl	80107cc <siprintf>
 800780c:	e006      	b.n	800781c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 800780e:	4b33      	ldr	r3, [pc, #204]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	4930      	ldr	r1, [pc, #192]	; (80078d8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007816:	482f      	ldr	r0, [pc, #188]	; (80078d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007818:	f008 ffd8 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800781c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	2301      	movs	r3, #1
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	2300      	movs	r3, #0
 8007828:	2264      	movs	r2, #100	; 0x64
 800782a:	218a      	movs	r1, #138	; 0x8a
 800782c:	4829      	ldr	r0, [pc, #164]	; (80078d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800782e:	f7fa f979 	bl	8001b24 <EF_PutString>
 8007832:	e044      	b.n	80078be <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007834:	88fb      	ldrh	r3, [r7, #6]
 8007836:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800783a:	d940      	bls.n	80078be <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 800783c:	88fb      	ldrh	r3, [r7, #6]
 800783e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007842:	d23c      	bcs.n	80078be <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 8007844:	4b25      	ldr	r3, [pc, #148]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b30      	cmp	r3, #48	; 0x30
 800784a:	d806      	bhi.n	800785a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 800784c:	4b23      	ldr	r3, [pc, #140]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	330a      	adds	r3, #10
 8007852:	b2da      	uxtb	r2, r3
 8007854:	4b21      	ldr	r3, [pc, #132]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007856:	701a      	strb	r2, [r3, #0]
 8007858:	e012      	b.n	8007880 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 800785a:	4b20      	ldr	r3, [pc, #128]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	f103 020a 	add.w	r2, r3, #10
 8007862:	4b1f      	ldr	r3, [pc, #124]	; (80078e0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 8007864:	fb83 1302 	smull	r1, r3, r3, r2
 8007868:	4413      	add	r3, r2
 800786a:	1159      	asrs	r1, r3, #5
 800786c:	17d3      	asrs	r3, r2, #31
 800786e:	1ac9      	subs	r1, r1, r3
 8007870:	460b      	mov	r3, r1
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	1a5b      	subs	r3, r3, r1
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	1ad1      	subs	r1, r2, r3
 800787a:	b2ca      	uxtb	r2, r1
 800787c:	4b17      	ldr	r3, [pc, #92]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800787e:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007880:	4b16      	ldr	r3, [pc, #88]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b09      	cmp	r3, #9
 8007886:	d907      	bls.n	8007898 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 8007888:	4b14      	ldr	r3, [pc, #80]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	4910      	ldr	r1, [pc, #64]	; (80078d0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007890:	4810      	ldr	r0, [pc, #64]	; (80078d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007892:	f008 ff9b 	bl	80107cc <siprintf>
 8007896:	e006      	b.n	80078a6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007898:	4b10      	ldr	r3, [pc, #64]	; (80078dc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	490e      	ldr	r1, [pc, #56]	; (80078d8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 80078a0:	480c      	ldr	r0, [pc, #48]	; (80078d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80078a2:	f008 ff93 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80078a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	2301      	movs	r3, #1
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	2300      	movs	r3, #0
 80078b2:	2264      	movs	r2, #100	; 0x64
 80078b4:	218a      	movs	r1, #138	; 0x8a
 80078b6:	4807      	ldr	r0, [pc, #28]	; (80078d4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80078b8:	f7fa f934 	bl	8001b24 <EF_PutString>
	}
}
 80078bc:	e7ff      	b.n	80078be <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	08017700 	.word	0x08017700
 80078cc:	2000027b 	.word	0x2000027b
 80078d0:	0801497c 	.word	0x0801497c
 80078d4:	200002f0 	.word	0x200002f0
 80078d8:	08014984 	.word	0x08014984
 80078dc:	2000027d 	.word	0x2000027d
 80078e0:	88888889 	.word	0x88888889

080078e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	4603      	mov	r3, r0
 80078ec:	460a      	mov	r2, r1
 80078ee:	80fb      	strh	r3, [r7, #6]
 80078f0:	4613      	mov	r3, r2
 80078f2:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80078f4:	4859      	ldr	r0, [pc, #356]	; (8007a5c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 80078f6:	f7f9 fefb 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	2bba      	cmp	r3, #186	; 0xba
 80078fe:	d92f      	bls.n	8007960 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	2bdd      	cmp	r3, #221	; 0xdd
 8007904:	d82c      	bhi.n	8007960 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 8007906:	4b56      	ldr	r3, [pc, #344]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b17      	cmp	r3, #23
 800790c:	d806      	bhi.n	800791c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 800790e:	4b54      	ldr	r3, [pc, #336]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	3301      	adds	r3, #1
 8007914:	b2da      	uxtb	r2, r3
 8007916:	4b52      	ldr	r3, [pc, #328]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	e002      	b.n	8007922 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 800791c:	4b50      	ldr	r3, [pc, #320]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800791e:	2201      	movs	r2, #1
 8007920:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 8007922:	4b4f      	ldr	r3, [pc, #316]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b09      	cmp	r3, #9
 8007928:	d907      	bls.n	800793a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 800792a:	4b4d      	ldr	r3, [pc, #308]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	494c      	ldr	r1, [pc, #304]	; (8007a64 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007932:	484d      	ldr	r0, [pc, #308]	; (8007a68 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007934:	f008 ff4a 	bl	80107cc <siprintf>
 8007938:	e006      	b.n	8007948 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 800793a:	4b49      	ldr	r3, [pc, #292]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	494a      	ldr	r1, [pc, #296]	; (8007a6c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007942:	4849      	ldr	r0, [pc, #292]	; (8007a68 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007944:	f008 ff42 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007948:	f24c 6318 	movw	r3, #50712	; 0xc618
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	2301      	movs	r3, #1
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	2287      	movs	r2, #135	; 0x87
 8007956:	2150      	movs	r1, #80	; 0x50
 8007958:	4843      	ldr	r0, [pc, #268]	; (8007a68 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800795a:	f7fa f8e3 	bl	8001b24 <EF_PutString>
 800795e:	e078      	b.n	8007a52 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007960:	88fb      	ldrh	r3, [r7, #6]
 8007962:	2be8      	cmp	r3, #232	; 0xe8
 8007964:	d930      	bls.n	80079c8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800796c:	d22c      	bcs.n	80079c8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 800796e:	4b40      	ldr	r3, [pc, #256]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b3a      	cmp	r3, #58	; 0x3a
 8007974:	d806      	bhi.n	8007984 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 8007976:	4b3e      	ldr	r3, [pc, #248]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	3301      	adds	r3, #1
 800797c:	b2da      	uxtb	r2, r3
 800797e:	4b3c      	ldr	r3, [pc, #240]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	e002      	b.n	800798a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 8007984:	4b3a      	ldr	r3, [pc, #232]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007986:	2200      	movs	r2, #0
 8007988:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 800798a:	4b39      	ldr	r3, [pc, #228]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b09      	cmp	r3, #9
 8007990:	d907      	bls.n	80079a2 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 8007992:	4b37      	ldr	r3, [pc, #220]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	4932      	ldr	r1, [pc, #200]	; (8007a64 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 800799a:	4833      	ldr	r0, [pc, #204]	; (8007a68 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800799c:	f008 ff16 	bl	80107cc <siprintf>
 80079a0:	e006      	b.n	80079b0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 80079a2:	4b33      	ldr	r3, [pc, #204]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	4930      	ldr	r1, [pc, #192]	; (8007a6c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80079aa:	482f      	ldr	r0, [pc, #188]	; (8007a68 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80079ac:	f008 ff0e 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80079b0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	2301      	movs	r3, #1
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	2287      	movs	r2, #135	; 0x87
 80079be:	218a      	movs	r1, #138	; 0x8a
 80079c0:	4829      	ldr	r0, [pc, #164]	; (8007a68 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80079c2:	f7fa f8af 	bl	8001b24 <EF_PutString>
 80079c6:	e044      	b.n	8007a52 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80079c8:	88fb      	ldrh	r3, [r7, #6]
 80079ca:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80079ce:	d940      	bls.n	8007a52 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80079d6:	d23c      	bcs.n	8007a52 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 80079d8:	4b25      	ldr	r3, [pc, #148]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b30      	cmp	r3, #48	; 0x30
 80079de:	d806      	bhi.n	80079ee <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 80079e0:	4b23      	ldr	r3, [pc, #140]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	330a      	adds	r3, #10
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	4b21      	ldr	r3, [pc, #132]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	e012      	b.n	8007a14 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 80079ee:	4b20      	ldr	r3, [pc, #128]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	f103 020a 	add.w	r2, r3, #10
 80079f6:	4b1f      	ldr	r3, [pc, #124]	; (8007a74 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 80079f8:	fb83 1302 	smull	r1, r3, r3, r2
 80079fc:	4413      	add	r3, r2
 80079fe:	1159      	asrs	r1, r3, #5
 8007a00:	17d3      	asrs	r3, r2, #31
 8007a02:	1ac9      	subs	r1, r1, r3
 8007a04:	460b      	mov	r3, r1
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	1a5b      	subs	r3, r3, r1
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	1ad1      	subs	r1, r2, r3
 8007a0e:	b2ca      	uxtb	r2, r1
 8007a10:	4b17      	ldr	r3, [pc, #92]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a12:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007a14:	4b16      	ldr	r3, [pc, #88]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b09      	cmp	r3, #9
 8007a1a:	d907      	bls.n	8007a2c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 8007a1c:	4b14      	ldr	r3, [pc, #80]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	4910      	ldr	r1, [pc, #64]	; (8007a64 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007a24:	4810      	ldr	r0, [pc, #64]	; (8007a68 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007a26:	f008 fed1 	bl	80107cc <siprintf>
 8007a2a:	e006      	b.n	8007a3a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	490e      	ldr	r1, [pc, #56]	; (8007a6c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007a34:	480c      	ldr	r0, [pc, #48]	; (8007a68 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007a36:	f008 fec9 	bl	80107cc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a3a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	2301      	movs	r3, #1
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	2287      	movs	r2, #135	; 0x87
 8007a48:	218a      	movs	r1, #138	; 0x8a
 8007a4a:	4807      	ldr	r0, [pc, #28]	; (8007a68 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007a4c:	f7fa f86a 	bl	8001b24 <EF_PutString>
	}
}
 8007a50:	e7ff      	b.n	8007a52 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	08017700 	.word	0x08017700
 8007a60:	2000027c 	.word	0x2000027c
 8007a64:	0801497c 	.word	0x0801497c
 8007a68:	200002f0 	.word	0x200002f0
 8007a6c:	08014984 	.word	0x08014984
 8007a70:	2000027e 	.word	0x2000027e
 8007a74:	88888889 	.word	0x88888889

08007a78 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b094      	sub	sp, #80	; 0x50
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8007a80:	f107 0308 	add.w	r3, r7, #8
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 f87f 	bl	8008b8a <UARTDMA_GetLineFromReceiveBuffer>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d15f      	bne.n	8007b52 <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8007a92:	f107 0308 	add.w	r3, r7, #8
 8007a96:	4931      	ldr	r1, [pc, #196]	; (8007b5c <UART_ParseLine+0xe4>)
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f009 fcf1 	bl	8011480 <strtok>
 8007a9e:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8007aa0:	492f      	ldr	r1, [pc, #188]	; (8007b60 <UART_ParseLine+0xe8>)
 8007aa2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007aa4:	f7f8 fb9c 	bl	80001e0 <strcmp>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d102      	bne.n	8007ab4 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8007aae:	f000 f869 	bl	8007b84 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8007ab2:	e04e      	b.n	8007b52 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8007ab4:	492b      	ldr	r1, [pc, #172]	; (8007b64 <UART_ParseLine+0xec>)
 8007ab6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007ab8:	f7f8 fb92 	bl	80001e0 <strcmp>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d102      	bne.n	8007ac8 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8007ac2:	f000 f8ad 	bl	8007c20 <UART_ParseAnswStatus>
}
 8007ac6:	e044      	b.n	8007b52 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8007ac8:	4927      	ldr	r1, [pc, #156]	; (8007b68 <UART_ParseLine+0xf0>)
 8007aca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007acc:	f7f8 fb88 	bl	80001e0 <strcmp>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d102      	bne.n	8007adc <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8007ad6:	f000 f8ab 	bl	8007c30 <UART_ParseAnswTemp>
}
 8007ada:	e03a      	b.n	8007b52 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8007adc:	4923      	ldr	r1, [pc, #140]	; (8007b6c <UART_ParseLine+0xf4>)
 8007ade:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007ae0:	f7f8 fb7e 	bl	80001e0 <strcmp>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8007aea:	f000 f945 	bl	8007d78 <UART_ParseAnswPres>
}
 8007aee:	e030      	b.n	8007b52 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8007af0:	491f      	ldr	r1, [pc, #124]	; (8007b70 <UART_ParseLine+0xf8>)
 8007af2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007af4:	f7f8 fb74 	bl	80001e0 <strcmp>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8007afe:	f000 f9bd 	bl	8007e7c <UART_ParseAnswChangeRelayState>
}
 8007b02:	e026      	b.n	8007b52 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8007b04:	491b      	ldr	r1, [pc, #108]	; (8007b74 <UART_ParseLine+0xfc>)
 8007b06:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007b08:	f7f8 fb6a 	bl	80001e0 <strcmp>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8007b12:	f000 f9ba 	bl	8007e8a <UART_ParseAnswChangeLightState>
}
 8007b16:	e01c      	b.n	8007b52 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8007b18:	4917      	ldr	r1, [pc, #92]	; (8007b78 <UART_ParseLine+0x100>)
 8007b1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007b1c:	f7f8 fb60 	bl	80001e0 <strcmp>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d102      	bne.n	8007b2c <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8007b26:	f000 f9b7 	bl	8007e98 <UART_ParseAnswRelayStateStatus>
}
 8007b2a:	e012      	b.n	8007b52 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8007b2c:	4913      	ldr	r1, [pc, #76]	; (8007b7c <UART_ParseLine+0x104>)
 8007b2e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007b30:	f7f8 fb56 	bl	80001e0 <strcmp>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d102      	bne.n	8007b40 <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 8007b3a:	f000 fa13 	bl	8007f64 <UART_ParseAnswLightsStateStatus>
}
 8007b3e:	e008      	b.n	8007b52 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 8007b40:	490f      	ldr	r1, [pc, #60]	; (8007b80 <UART_ParseLine+0x108>)
 8007b42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007b44:	f7f8 fb4c 	bl	80001e0 <strcmp>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 8007b4e:	f000 f959 	bl	8007e04 <UART_ParseAnswDist>
}
 8007b52:	bf00      	nop
 8007b54:	3750      	adds	r7, #80	; 0x50
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	0801498c 	.word	0x0801498c
 8007b60:	08014990 	.word	0x08014990
 8007b64:	08014994 	.word	0x08014994
 8007b68:	0801499c 	.word	0x0801499c
 8007b6c:	080149a4 	.word	0x080149a4
 8007b70:	080149ac 	.word	0x080149ac
 8007b74:	080149b8 	.word	0x080149b8
 8007b78:	080149c4 	.word	0x080149c4
 8007b7c:	080149d0 	.word	0x080149d0
 8007b80:	080149dc 	.word	0x080149dc

08007b84 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8007b8a:	491f      	ldr	r1, [pc, #124]	; (8007c08 <UART_ParseLED+0x84>)
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	f009 fc77 	bl	8011480 <strtok>
 8007b92:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d031      	beq.n	8007c00 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b2f      	cmp	r3, #47	; 0x2f
 8007ba2:	d903      	bls.n	8007bac <UART_ParseLED+0x28>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b39      	cmp	r3, #57	; 0x39
 8007baa:	d904      	bls.n	8007bb6 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8007bac:	4917      	ldr	r1, [pc, #92]	; (8007c0c <UART_ParseLED+0x88>)
 8007bae:	4818      	ldr	r0, [pc, #96]	; (8007c10 <UART_ParseLED+0x8c>)
 8007bb0:	f001 f81c 	bl	8008bec <UARTDMA_Print>
			return;	// And exit parsing
 8007bb4:	e024      	b.n	8007c00 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f007 ff51 	bl	800fa5e <atoi>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d10a      	bne.n	8007bdc <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007bcc:	4811      	ldr	r0, [pc, #68]	; (8007c14 <UART_ParseLED+0x90>)
 8007bce:	f002 f9b1 	bl	8009f34 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8007bd2:	4911      	ldr	r1, [pc, #68]	; (8007c18 <UART_ParseLED+0x94>)
 8007bd4:	480e      	ldr	r0, [pc, #56]	; (8007c10 <UART_ParseLED+0x8c>)
 8007bd6:	f001 f809 	bl	8008bec <UARTDMA_Print>
 8007bda:	e011      	b.n	8007c00 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10a      	bne.n	8007bf8 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 8007be2:	2201      	movs	r2, #1
 8007be4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007be8:	480a      	ldr	r0, [pc, #40]	; (8007c14 <UART_ParseLED+0x90>)
 8007bea:	f002 f9a3 	bl	8009f34 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8007bee:	490b      	ldr	r1, [pc, #44]	; (8007c1c <UART_ParseLED+0x98>)
 8007bf0:	4807      	ldr	r0, [pc, #28]	; (8007c10 <UART_ParseLED+0x8c>)
 8007bf2:	f000 fffb 	bl	8008bec <UARTDMA_Print>
 8007bf6:	e003      	b.n	8007c00 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8007bf8:	4904      	ldr	r1, [pc, #16]	; (8007c0c <UART_ParseLED+0x88>)
 8007bfa:	4805      	ldr	r0, [pc, #20]	; (8007c10 <UART_ParseLED+0x8c>)
 8007bfc:	f000 fff6 	bl	8008bec <UARTDMA_Print>
		}
	}
}
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	080149e4 	.word	0x080149e4
 8007c0c:	080149e8 	.word	0x080149e8
 8007c10:	20000498 	.word	0x20000498
 8007c14:	40020800 	.word	0x40020800
 8007c18:	080149f8 	.word	0x080149f8
 8007c1c:	08014a04 	.word	0x08014a04

08007c20 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8007c24:	bf00      	nop
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8007c3a:	4947      	ldr	r1, [pc, #284]	; (8007d58 <UART_ParseAnswTemp+0x128>)
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	f009 fc1f 	bl	8011480 <strtok>
 8007c42:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8081 	beq.w	8007d50 <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 8007c4e:	68b8      	ldr	r0, [r7, #8]
 8007c50:	f007 ff05 	bl	800fa5e <atoi>
 8007c54:	4603      	mov	r3, r0
 8007c56:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d010      	beq.n	8007c82 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8007c60:	493d      	ldr	r1, [pc, #244]	; (8007d58 <UART_ParseAnswTemp+0x128>)
 8007c62:	2000      	movs	r0, #0
 8007c64:	f009 fc0c 	bl	8011480 <strtok>
 8007c68:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f007 fef4 	bl	800fa58 <atof>
 8007c70:	ec53 2b10 	vmov	r2, r3, d0
 8007c74:	4610      	mov	r0, r2
 8007c76:	4619      	mov	r1, r3
 8007c78:	f7f8 ffce 	bl	8000c18 <__aeabi_d2f>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	4a37      	ldr	r2, [pc, #220]	; (8007d5c <UART_ParseAnswTemp+0x12c>)
 8007c80:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8007c82:	4b37      	ldr	r3, [pc, #220]	; (8007d60 <UART_ParseAnswTemp+0x130>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d162      	bne.n	8007d50 <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d119      	bne.n	8007cc4 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8007c90:	4834      	ldr	r0, [pc, #208]	; (8007d64 <UART_ParseAnswTemp+0x134>)
 8007c92:	f7f9 fd2d 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8007c96:	4b31      	ldr	r3, [pc, #196]	; (8007d5c <UART_ParseAnswTemp+0x12c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7f8 fc6c 	bl	8000578 <__aeabi_f2d>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4930      	ldr	r1, [pc, #192]	; (8007d68 <UART_ParseAnswTemp+0x138>)
 8007ca6:	4831      	ldr	r0, [pc, #196]	; (8007d6c <UART_ParseAnswTemp+0x13c>)
 8007ca8:	f008 fd90 	bl	80107cc <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007cac:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007cb0:	9301      	str	r3, [sp, #4]
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2250      	movs	r2, #80	; 0x50
 8007cba:	2114      	movs	r1, #20
 8007cbc:	482b      	ldr	r0, [pc, #172]	; (8007d6c <UART_ParseAnswTemp+0x13c>)
 8007cbe:	f7f9 ff31 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8007cc2:	e045      	b.n	8007d50 <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d142      	bne.n	8007d50 <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 8007cca:	4b24      	ldr	r3, [pc, #144]	; (8007d5c <UART_ParseAnswTemp+0x12c>)
 8007ccc:	edd3 7a00 	vldr	s15, [r3]
 8007cd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd8:	d11d      	bne.n	8007d16 <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 8007cda:	4b25      	ldr	r3, [pc, #148]	; (8007d70 <UART_ParseAnswTemp+0x140>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a1f      	ldr	r2, [pc, #124]	; (8007d5c <UART_ParseAnswTemp+0x12c>)
 8007ce0:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8007ce2:	4820      	ldr	r0, [pc, #128]	; (8007d64 <UART_ParseAnswTemp+0x134>)
 8007ce4:	f7f9 fd04 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8007ce8:	4b1c      	ldr	r3, [pc, #112]	; (8007d5c <UART_ParseAnswTemp+0x12c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7f8 fc43 	bl	8000578 <__aeabi_f2d>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	491f      	ldr	r1, [pc, #124]	; (8007d74 <UART_ParseAnswTemp+0x144>)
 8007cf8:	481c      	ldr	r0, [pc, #112]	; (8007d6c <UART_ParseAnswTemp+0x13c>)
 8007cfa:	f008 fd67 	bl	80107cc <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007cfe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	2301      	movs	r3, #1
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	226e      	movs	r2, #110	; 0x6e
 8007d0c:	2114      	movs	r1, #20
 8007d0e:	4817      	ldr	r0, [pc, #92]	; (8007d6c <UART_ParseAnswTemp+0x13c>)
 8007d10:	f7f9 ff08 	bl	8001b24 <EF_PutString>
	}
 8007d14:	e01c      	b.n	8007d50 <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8007d16:	4813      	ldr	r0, [pc, #76]	; (8007d64 <UART_ParseAnswTemp+0x134>)
 8007d18:	f7f9 fcea 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8007d1c:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <UART_ParseAnswTemp+0x12c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7f8 fc29 	bl	8000578 <__aeabi_f2d>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4912      	ldr	r1, [pc, #72]	; (8007d74 <UART_ParseAnswTemp+0x144>)
 8007d2c:	480f      	ldr	r0, [pc, #60]	; (8007d6c <UART_ParseAnswTemp+0x13c>)
 8007d2e:	f008 fd4d 	bl	80107cc <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007d32:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	2301      	movs	r3, #1
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	226e      	movs	r2, #110	; 0x6e
 8007d40:	2114      	movs	r1, #20
 8007d42:	480a      	ldr	r0, [pc, #40]	; (8007d6c <UART_ParseAnswTemp+0x13c>)
 8007d44:	f7f9 feee 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 8007d48:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <UART_ParseAnswTemp+0x12c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a08      	ldr	r2, [pc, #32]	; (8007d70 <UART_ParseAnswTemp+0x140>)
 8007d4e:	6013      	str	r3, [r2, #0]
	}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	080149e4 	.word	0x080149e4
 8007d5c:	20000288 	.word	0x20000288
 8007d60:	20000284 	.word	0x20000284
 8007d64:	08017700 	.word	0x08017700
 8007d68:	08014a10 	.word	0x08014a10
 8007d6c:	200002f0 	.word	0x200002f0
 8007d70:	2000028c 	.word	0x2000028c
 8007d74:	08014a24 	.word	0x08014a24

08007d78 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8007d7e:	491b      	ldr	r1, [pc, #108]	; (8007dec <UART_ParseAnswPres+0x74>)
 8007d80:	2000      	movs	r0, #0
 8007d82:	f009 fb7d 	bl	8011480 <strtok>
 8007d86:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d028      	beq.n	8007de2 <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f007 fe61 	bl	800fa58 <atof>
 8007d96:	ec53 2b10 	vmov	r2, r3, d0
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7f8 ff3b 	bl	8000c18 <__aeabi_d2f>
 8007da2:	4603      	mov	r3, r0
 8007da4:	4a12      	ldr	r2, [pc, #72]	; (8007df0 <UART_ParseAnswPres+0x78>)
 8007da6:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8007da8:	4b12      	ldr	r3, [pc, #72]	; (8007df4 <UART_ParseAnswPres+0x7c>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d118      	bne.n	8007de2 <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8007db0:	4811      	ldr	r0, [pc, #68]	; (8007df8 <UART_ParseAnswPres+0x80>)
 8007db2:	f7f9 fc9d 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8007db6:	4b0e      	ldr	r3, [pc, #56]	; (8007df0 <UART_ParseAnswPres+0x78>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7f8 fbdc 	bl	8000578 <__aeabi_f2d>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	490d      	ldr	r1, [pc, #52]	; (8007dfc <UART_ParseAnswPres+0x84>)
 8007dc6:	480e      	ldr	r0, [pc, #56]	; (8007e00 <UART_ParseAnswPres+0x88>)
 8007dc8:	f008 fd00 	bl	80107cc <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007dcc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	22aa      	movs	r2, #170	; 0xaa
 8007dda:	2114      	movs	r1, #20
 8007ddc:	4808      	ldr	r0, [pc, #32]	; (8007e00 <UART_ParseAnswPres+0x88>)
 8007dde:	f7f9 fea1 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	080149e4 	.word	0x080149e4
 8007df0:	20000290 	.word	0x20000290
 8007df4:	20000284 	.word	0x20000284
 8007df8:	08017700 	.word	0x08017700
 8007dfc:	08014a38 	.word	0x08014a38
 8007e00:	200002f0 	.word	0x200002f0

08007e04 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8007e0a:	4916      	ldr	r1, [pc, #88]	; (8007e64 <UART_ParseAnswDist+0x60>)
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	f009 fb37 	bl	8011480 <strtok>
 8007e12:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01f      	beq.n	8007e5c <UART_ParseAnswDist+0x58>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f007 fe1e 	bl	800fa5e <atoi>
 8007e22:	4603      	mov	r3, r0
 8007e24:	461a      	mov	r2, r3
 8007e26:	4b10      	ldr	r3, [pc, #64]	; (8007e68 <UART_ParseAnswDist+0x64>)
 8007e28:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8007e2a:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <UART_ParseAnswDist+0x68>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d114      	bne.n	8007e5c <UART_ParseAnswDist+0x58>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8007e32:	480f      	ldr	r0, [pc, #60]	; (8007e70 <UART_ParseAnswDist+0x6c>)
 8007e34:	f7f9 fc5c 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <UART_ParseAnswDist+0x64>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	490d      	ldr	r1, [pc, #52]	; (8007e74 <UART_ParseAnswDist+0x70>)
 8007e40:	480d      	ldr	r0, [pc, #52]	; (8007e78 <UART_ParseAnswDist+0x74>)
 8007e42:	f008 fcc3 	bl	80107cc <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007e46:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	2300      	movs	r3, #0
 8007e52:	228c      	movs	r2, #140	; 0x8c
 8007e54:	21ad      	movs	r1, #173	; 0xad
 8007e56:	4808      	ldr	r0, [pc, #32]	; (8007e78 <UART_ParseAnswDist+0x74>)
 8007e58:	f7f9 fe64 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	080149e4 	.word	0x080149e4
 8007e68:	20000298 	.word	0x20000298
 8007e6c:	20000284 	.word	0x20000284
 8007e70:	08017700 	.word	0x08017700
 8007e74:	08014a50 	.word	0x08014a50
 8007e78:	200002f0 	.word	0x200002f0

08007e7c <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
	//TODO!
}
 8007e80:	bf00      	nop
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	af00      	add	r7, sp, #0
	//TODO!
}
 8007e8e:	bf00      	nop
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	71fb      	strb	r3, [r7, #7]
 8007ea2:	e04a      	b.n	8007f3a <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8007ea4:	4928      	ldr	r1, [pc, #160]	; (8007f48 <UART_ParseAnswRelayStateStatus+0xb0>)
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	f009 faea 	bl	8011480 <strtok>
 8007eac:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d02f      	beq.n	8007f16 <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	71bb      	strb	r3, [r7, #6]
 8007eba:	e025      	b.n	8007f08 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8007ebc:	79bb      	ldrb	r3, [r7, #6]
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b2f      	cmp	r3, #47	; 0x2f
 8007ec6:	d905      	bls.n	8007ed4 <UART_ParseAnswRelayStateStatus+0x3c>
 8007ec8:	79bb      	ldrb	r3, [r7, #6]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4413      	add	r3, r2
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b39      	cmp	r3, #57	; 0x39
 8007ed2:	d90e      	bls.n	8007ef2 <UART_ParseAnswRelayStateStatus+0x5a>
 8007ed4:	79bb      	ldrb	r3, [r7, #6]
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	4413      	add	r3, r2
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ede:	d008      	beq.n	8007ef2 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8007ee0:	491a      	ldr	r1, [pc, #104]	; (8007f4c <UART_ParseAnswRelayStateStatus+0xb4>)
 8007ee2:	481b      	ldr	r0, [pc, #108]	; (8007f50 <UART_ParseAnswRelayStateStatus+0xb8>)
 8007ee4:	f008 fc72 	bl	80107cc <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8007ee8:	4919      	ldr	r1, [pc, #100]	; (8007f50 <UART_ParseAnswRelayStateStatus+0xb8>)
 8007eea:	481a      	ldr	r0, [pc, #104]	; (8007f54 <UART_ParseAnswRelayStateStatus+0xbc>)
 8007eec:	f000 fe7e 	bl	8008bec <UARTDMA_Print>
					return;	// And exit parsing
 8007ef0:	e026      	b.n	8007f40 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8007ef2:	6838      	ldr	r0, [r7, #0]
 8007ef4:	f007 fdb3 	bl	800fa5e <atoi>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	79fb      	ldrb	r3, [r7, #7]
 8007efc:	b2d1      	uxtb	r1, r2
 8007efe:	4a16      	ldr	r2, [pc, #88]	; (8007f58 <UART_ParseAnswRelayStateStatus+0xc0>)
 8007f00:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8007f02:	79bb      	ldrb	r3, [r7, #6]
 8007f04:	3301      	adds	r3, #1
 8007f06:	71bb      	strb	r3, [r7, #6]
 8007f08:	79bb      	ldrb	r3, [r7, #6]
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1d3      	bne.n	8007ebc <UART_ParseAnswRelayStateStatus+0x24>
 8007f14:	e008      	b.n	8007f28 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8007f16:	4911      	ldr	r1, [pc, #68]	; (8007f5c <UART_ParseAnswRelayStateStatus+0xc4>)
 8007f18:	480d      	ldr	r0, [pc, #52]	; (8007f50 <UART_ParseAnswRelayStateStatus+0xb8>)
 8007f1a:	f008 fc57 	bl	80107cc <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8007f1e:	490c      	ldr	r1, [pc, #48]	; (8007f50 <UART_ParseAnswRelayStateStatus+0xb8>)
 8007f20:	480c      	ldr	r0, [pc, #48]	; (8007f54 <UART_ParseAnswRelayStateStatus+0xbc>)
 8007f22:	f000 fe63 	bl	8008bec <UARTDMA_Print>
			return;	// And exit parsing
 8007f26:	e00b      	b.n	8007f40 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8007f28:	4b0d      	ldr	r3, [pc, #52]	; (8007f60 <UART_ParseAnswRelayStateStatus+0xc8>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d101      	bne.n	8007f34 <UART_ParseAnswRelayStateStatus+0x9c>
 8007f30:	f7fc febc 	bl	8004cac <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	3301      	adds	r3, #1
 8007f38:	71fb      	strb	r3, [r7, #7]
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d9b1      	bls.n	8007ea4 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	080149e4 	.word	0x080149e4
 8007f4c:	08014a5c 	.word	0x08014a5c
 8007f50:	20000668 	.word	0x20000668
 8007f54:	20000498 	.word	0x20000498
 8007f58:	2000029c 	.word	0x2000029c
 8007f5c:	08014a70 	.word	0x08014a70
 8007f60:	20000284 	.word	0x20000284

08007f64 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	71fb      	strb	r3, [r7, #7]
 8007f6e:	e04a      	b.n	8008006 <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8007f70:	4928      	ldr	r1, [pc, #160]	; (8008014 <UART_ParseAnswLightsStateStatus+0xb0>)
 8007f72:	2000      	movs	r0, #0
 8007f74:	f009 fa84 	bl	8011480 <strtok>
 8007f78:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d02f      	beq.n	8007fe2 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8007f82:	2300      	movs	r3, #0
 8007f84:	71bb      	strb	r3, [r7, #6]
 8007f86:	e025      	b.n	8007fd4 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8007f88:	79bb      	ldrb	r3, [r7, #6]
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b2f      	cmp	r3, #47	; 0x2f
 8007f92:	d905      	bls.n	8007fa0 <UART_ParseAnswLightsStateStatus+0x3c>
 8007f94:	79bb      	ldrb	r3, [r7, #6]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	4413      	add	r3, r2
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b39      	cmp	r3, #57	; 0x39
 8007f9e:	d90e      	bls.n	8007fbe <UART_ParseAnswLightsStateStatus+0x5a>
 8007fa0:	79bb      	ldrb	r3, [r7, #6]
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8007faa:	d008      	beq.n	8007fbe <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8007fac:	491a      	ldr	r1, [pc, #104]	; (8008018 <UART_ParseAnswLightsStateStatus+0xb4>)
 8007fae:	481b      	ldr	r0, [pc, #108]	; (800801c <UART_ParseAnswLightsStateStatus+0xb8>)
 8007fb0:	f008 fc0c 	bl	80107cc <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8007fb4:	4919      	ldr	r1, [pc, #100]	; (800801c <UART_ParseAnswLightsStateStatus+0xb8>)
 8007fb6:	481a      	ldr	r0, [pc, #104]	; (8008020 <UART_ParseAnswLightsStateStatus+0xbc>)
 8007fb8:	f000 fe18 	bl	8008bec <UARTDMA_Print>
					return;	// And exit parsing
 8007fbc:	e026      	b.n	800800c <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8007fbe:	6838      	ldr	r0, [r7, #0]
 8007fc0:	f007 fd4d 	bl	800fa5e <atoi>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	79fb      	ldrb	r3, [r7, #7]
 8007fc8:	b2d1      	uxtb	r1, r2
 8007fca:	4a16      	ldr	r2, [pc, #88]	; (8008024 <UART_ParseAnswLightsStateStatus+0xc0>)
 8007fcc:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8007fce:	79bb      	ldrb	r3, [r7, #6]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	71bb      	strb	r3, [r7, #6]
 8007fd4:	79bb      	ldrb	r3, [r7, #6]
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	4413      	add	r3, r2
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1d3      	bne.n	8007f88 <UART_ParseAnswLightsStateStatus+0x24>
 8007fe0:	e008      	b.n	8007ff4 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8007fe2:	4911      	ldr	r1, [pc, #68]	; (8008028 <UART_ParseAnswLightsStateStatus+0xc4>)
 8007fe4:	480d      	ldr	r0, [pc, #52]	; (800801c <UART_ParseAnswLightsStateStatus+0xb8>)
 8007fe6:	f008 fbf1 	bl	80107cc <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8007fea:	490c      	ldr	r1, [pc, #48]	; (800801c <UART_ParseAnswLightsStateStatus+0xb8>)
 8007fec:	480c      	ldr	r0, [pc, #48]	; (8008020 <UART_ParseAnswLightsStateStatus+0xbc>)
 8007fee:	f000 fdfd 	bl	8008bec <UARTDMA_Print>
			return;	// And exit parsing
 8007ff2:	e00b      	b.n	800800c <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8007ff4:	4b0d      	ldr	r3, [pc, #52]	; (800802c <UART_ParseAnswLightsStateStatus+0xc8>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b05      	cmp	r3, #5
 8007ffa:	d101      	bne.n	8008000 <UART_ParseAnswLightsStateStatus+0x9c>
 8007ffc:	f7fc ff5e 	bl	8004ebc <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008000:	79fb      	ldrb	r3, [r7, #7]
 8008002:	3301      	adds	r3, #1
 8008004:	71fb      	strb	r3, [r7, #7]
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	2b03      	cmp	r3, #3
 800800a:	d9b1      	bls.n	8007f70 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	080149e4 	.word	0x080149e4
 8008018:	08014a5c 	.word	0x08014a5c
 800801c:	20000668 	.word	0x20000668
 8008020:	20000498 	.word	0x20000498
 8008024:	200002a0 	.word	0x200002a0
 8008028:	08014a70 	.word	0x08014a70
 800802c:	20000284 	.word	0x20000284

08008030 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b27      	cmp	r3, #39	; 0x27
 8008042:	f200 8129 	bhi.w	8008298 <SendComand+0x268>
 8008046:	a201      	add	r2, pc, #4	; (adr r2, 800804c <SendComand+0x1c>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	080080ed 	.word	0x080080ed
 8008050:	080080f7 	.word	0x080080f7
 8008054:	08008101 	.word	0x08008101
 8008058:	0800810b 	.word	0x0800810b
 800805c:	0800811f 	.word	0x0800811f
 8008060:	08008129 	.word	0x08008129
 8008064:	08008133 	.word	0x08008133
 8008068:	0800813d 	.word	0x0800813d
 800806c:	08008147 	.word	0x08008147
 8008070:	08008151 	.word	0x08008151
 8008074:	0800815b 	.word	0x0800815b
 8008078:	08008165 	.word	0x08008165
 800807c:	0800816f 	.word	0x0800816f
 8008080:	08008197 	.word	0x08008197
 8008084:	080081a1 	.word	0x080081a1
 8008088:	080081ab 	.word	0x080081ab
 800808c:	080081b5 	.word	0x080081b5
 8008090:	080081bf 	.word	0x080081bf
 8008094:	080081c9 	.word	0x080081c9
 8008098:	080081d3 	.word	0x080081d3
 800809c:	080081dd 	.word	0x080081dd
 80080a0:	0800818d 	.word	0x0800818d
 80080a4:	080081fb 	.word	0x080081fb
 80080a8:	08008179 	.word	0x08008179
 80080ac:	08008183 	.word	0x08008183
 80080b0:	080081e7 	.word	0x080081e7
 80080b4:	080081f1 	.word	0x080081f1
 80080b8:	08008115 	.word	0x08008115
 80080bc:	08008205 	.word	0x08008205
 80080c0:	0800820f 	.word	0x0800820f
 80080c4:	08008219 	.word	0x08008219
 80080c8:	08008223 	.word	0x08008223
 80080cc:	0800822d 	.word	0x0800822d
 80080d0:	08008237 	.word	0x08008237
 80080d4:	08008241 	.word	0x08008241
 80080d8:	0800824b 	.word	0x0800824b
 80080dc:	08008255 	.word	0x08008255
 80080e0:	0800825f 	.word	0x0800825f
 80080e4:	08008285 	.word	0x08008285
 80080e8:	0800828f 	.word	0x0800828f
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 80080ec:	496d      	ldr	r1, [pc, #436]	; (80082a4 <SendComand+0x274>)
 80080ee:	486e      	ldr	r0, [pc, #440]	; (80082a8 <SendComand+0x278>)
 80080f0:	f000 fd7c 	bl	8008bec <UARTDMA_Print>
			break;
 80080f4:	e0d0      	b.n	8008298 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 80080f6:	496d      	ldr	r1, [pc, #436]	; (80082ac <SendComand+0x27c>)
 80080f8:	486b      	ldr	r0, [pc, #428]	; (80082a8 <SendComand+0x278>)
 80080fa:	f000 fd77 	bl	8008bec <UARTDMA_Print>
			break;
 80080fe:	e0cb      	b.n	8008298 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8008100:	496b      	ldr	r1, [pc, #428]	; (80082b0 <SendComand+0x280>)
 8008102:	4869      	ldr	r0, [pc, #420]	; (80082a8 <SendComand+0x278>)
 8008104:	f000 fd72 	bl	8008bec <UARTDMA_Print>
			break;
 8008108:	e0c6      	b.n	8008298 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 800810a:	496a      	ldr	r1, [pc, #424]	; (80082b4 <SendComand+0x284>)
 800810c:	4866      	ldr	r0, [pc, #408]	; (80082a8 <SendComand+0x278>)
 800810e:	f000 fd6d 	bl	8008bec <UARTDMA_Print>
			break;
 8008112:	e0c1      	b.n	8008298 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8008114:	4968      	ldr	r1, [pc, #416]	; (80082b8 <SendComand+0x288>)
 8008116:	4864      	ldr	r0, [pc, #400]	; (80082a8 <SendComand+0x278>)
 8008118:	f000 fd68 	bl	8008bec <UARTDMA_Print>
			break;
 800811c:	e0bc      	b.n	8008298 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 800811e:	4967      	ldr	r1, [pc, #412]	; (80082bc <SendComand+0x28c>)
 8008120:	4861      	ldr	r0, [pc, #388]	; (80082a8 <SendComand+0x278>)
 8008122:	f000 fd63 	bl	8008bec <UARTDMA_Print>
			break;
 8008126:	e0b7      	b.n	8008298 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8008128:	4965      	ldr	r1, [pc, #404]	; (80082c0 <SendComand+0x290>)
 800812a:	485f      	ldr	r0, [pc, #380]	; (80082a8 <SendComand+0x278>)
 800812c:	f000 fd5e 	bl	8008bec <UARTDMA_Print>
			break;
 8008130:	e0b2      	b.n	8008298 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8008132:	4964      	ldr	r1, [pc, #400]	; (80082c4 <SendComand+0x294>)
 8008134:	485c      	ldr	r0, [pc, #368]	; (80082a8 <SendComand+0x278>)
 8008136:	f000 fd59 	bl	8008bec <UARTDMA_Print>
			break;
 800813a:	e0ad      	b.n	8008298 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 800813c:	4962      	ldr	r1, [pc, #392]	; (80082c8 <SendComand+0x298>)
 800813e:	485a      	ldr	r0, [pc, #360]	; (80082a8 <SendComand+0x278>)
 8008140:	f000 fd54 	bl	8008bec <UARTDMA_Print>
			break;
 8008144:	e0a8      	b.n	8008298 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8008146:	4961      	ldr	r1, [pc, #388]	; (80082cc <SendComand+0x29c>)
 8008148:	4857      	ldr	r0, [pc, #348]	; (80082a8 <SendComand+0x278>)
 800814a:	f000 fd4f 	bl	8008bec <UARTDMA_Print>
			break;
 800814e:	e0a3      	b.n	8008298 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8008150:	495f      	ldr	r1, [pc, #380]	; (80082d0 <SendComand+0x2a0>)
 8008152:	4855      	ldr	r0, [pc, #340]	; (80082a8 <SendComand+0x278>)
 8008154:	f000 fd4a 	bl	8008bec <UARTDMA_Print>
			break;
 8008158:	e09e      	b.n	8008298 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 800815a:	495e      	ldr	r1, [pc, #376]	; (80082d4 <SendComand+0x2a4>)
 800815c:	4852      	ldr	r0, [pc, #328]	; (80082a8 <SendComand+0x278>)
 800815e:	f000 fd45 	bl	8008bec <UARTDMA_Print>
			break;
 8008162:	e099      	b.n	8008298 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8008164:	495c      	ldr	r1, [pc, #368]	; (80082d8 <SendComand+0x2a8>)
 8008166:	4850      	ldr	r0, [pc, #320]	; (80082a8 <SendComand+0x278>)
 8008168:	f000 fd40 	bl	8008bec <UARTDMA_Print>
			break;
 800816c:	e094      	b.n	8008298 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 800816e:	495b      	ldr	r1, [pc, #364]	; (80082dc <SendComand+0x2ac>)
 8008170:	484d      	ldr	r0, [pc, #308]	; (80082a8 <SendComand+0x278>)
 8008172:	f000 fd3b 	bl	8008bec <UARTDMA_Print>
			break;
 8008176:	e08f      	b.n	8008298 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8008178:	4959      	ldr	r1, [pc, #356]	; (80082e0 <SendComand+0x2b0>)
 800817a:	484b      	ldr	r0, [pc, #300]	; (80082a8 <SendComand+0x278>)
 800817c:	f000 fd36 	bl	8008bec <UARTDMA_Print>
			break;
 8008180:	e08a      	b.n	8008298 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8008182:	4958      	ldr	r1, [pc, #352]	; (80082e4 <SendComand+0x2b4>)
 8008184:	4848      	ldr	r0, [pc, #288]	; (80082a8 <SendComand+0x278>)
 8008186:	f000 fd31 	bl	8008bec <UARTDMA_Print>
			break;
 800818a:	e085      	b.n	8008298 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 800818c:	4956      	ldr	r1, [pc, #344]	; (80082e8 <SendComand+0x2b8>)
 800818e:	4846      	ldr	r0, [pc, #280]	; (80082a8 <SendComand+0x278>)
 8008190:	f000 fd2c 	bl	8008bec <UARTDMA_Print>
			break;
 8008194:	e080      	b.n	8008298 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8008196:	4955      	ldr	r1, [pc, #340]	; (80082ec <SendComand+0x2bc>)
 8008198:	4843      	ldr	r0, [pc, #268]	; (80082a8 <SendComand+0x278>)
 800819a:	f000 fd27 	bl	8008bec <UARTDMA_Print>
			break;
 800819e:	e07b      	b.n	8008298 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 80081a0:	4953      	ldr	r1, [pc, #332]	; (80082f0 <SendComand+0x2c0>)
 80081a2:	4841      	ldr	r0, [pc, #260]	; (80082a8 <SendComand+0x278>)
 80081a4:	f000 fd22 	bl	8008bec <UARTDMA_Print>
			break;
 80081a8:	e076      	b.n	8008298 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 80081aa:	4952      	ldr	r1, [pc, #328]	; (80082f4 <SendComand+0x2c4>)
 80081ac:	483e      	ldr	r0, [pc, #248]	; (80082a8 <SendComand+0x278>)
 80081ae:	f000 fd1d 	bl	8008bec <UARTDMA_Print>
			break;
 80081b2:	e071      	b.n	8008298 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 80081b4:	4950      	ldr	r1, [pc, #320]	; (80082f8 <SendComand+0x2c8>)
 80081b6:	483c      	ldr	r0, [pc, #240]	; (80082a8 <SendComand+0x278>)
 80081b8:	f000 fd18 	bl	8008bec <UARTDMA_Print>
			break;
 80081bc:	e06c      	b.n	8008298 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 80081be:	494f      	ldr	r1, [pc, #316]	; (80082fc <SendComand+0x2cc>)
 80081c0:	4839      	ldr	r0, [pc, #228]	; (80082a8 <SendComand+0x278>)
 80081c2:	f000 fd13 	bl	8008bec <UARTDMA_Print>
			break;
 80081c6:	e067      	b.n	8008298 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 80081c8:	494d      	ldr	r1, [pc, #308]	; (8008300 <SendComand+0x2d0>)
 80081ca:	4837      	ldr	r0, [pc, #220]	; (80082a8 <SendComand+0x278>)
 80081cc:	f000 fd0e 	bl	8008bec <UARTDMA_Print>
			break;
 80081d0:	e062      	b.n	8008298 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 80081d2:	494c      	ldr	r1, [pc, #304]	; (8008304 <SendComand+0x2d4>)
 80081d4:	4834      	ldr	r0, [pc, #208]	; (80082a8 <SendComand+0x278>)
 80081d6:	f000 fd09 	bl	8008bec <UARTDMA_Print>
			break;
 80081da:	e05d      	b.n	8008298 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 80081dc:	494a      	ldr	r1, [pc, #296]	; (8008308 <SendComand+0x2d8>)
 80081de:	4832      	ldr	r0, [pc, #200]	; (80082a8 <SendComand+0x278>)
 80081e0:	f000 fd04 	bl	8008bec <UARTDMA_Print>
			break;
 80081e4:	e058      	b.n	8008298 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 80081e6:	4949      	ldr	r1, [pc, #292]	; (800830c <SendComand+0x2dc>)
 80081e8:	482f      	ldr	r0, [pc, #188]	; (80082a8 <SendComand+0x278>)
 80081ea:	f000 fcff 	bl	8008bec <UARTDMA_Print>
			break;
 80081ee:	e053      	b.n	8008298 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 80081f0:	4947      	ldr	r1, [pc, #284]	; (8008310 <SendComand+0x2e0>)
 80081f2:	482d      	ldr	r0, [pc, #180]	; (80082a8 <SendComand+0x278>)
 80081f4:	f000 fcfa 	bl	8008bec <UARTDMA_Print>
			break;
 80081f8:	e04e      	b.n	8008298 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 80081fa:	4946      	ldr	r1, [pc, #280]	; (8008314 <SendComand+0x2e4>)
 80081fc:	482a      	ldr	r0, [pc, #168]	; (80082a8 <SendComand+0x278>)
 80081fe:	f000 fcf5 	bl	8008bec <UARTDMA_Print>
			break;
 8008202:	e049      	b.n	8008298 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8008204:	4944      	ldr	r1, [pc, #272]	; (8008318 <SendComand+0x2e8>)
 8008206:	4828      	ldr	r0, [pc, #160]	; (80082a8 <SendComand+0x278>)
 8008208:	f000 fcf0 	bl	8008bec <UARTDMA_Print>
			break;
 800820c:	e044      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 800820e:	4943      	ldr	r1, [pc, #268]	; (800831c <SendComand+0x2ec>)
 8008210:	4825      	ldr	r0, [pc, #148]	; (80082a8 <SendComand+0x278>)
 8008212:	f000 fceb 	bl	8008bec <UARTDMA_Print>
			break;
 8008216:	e03f      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8008218:	4941      	ldr	r1, [pc, #260]	; (8008320 <SendComand+0x2f0>)
 800821a:	4823      	ldr	r0, [pc, #140]	; (80082a8 <SendComand+0x278>)
 800821c:	f000 fce6 	bl	8008bec <UARTDMA_Print>
			break;
 8008220:	e03a      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8008222:	4940      	ldr	r1, [pc, #256]	; (8008324 <SendComand+0x2f4>)
 8008224:	4820      	ldr	r0, [pc, #128]	; (80082a8 <SendComand+0x278>)
 8008226:	f000 fce1 	bl	8008bec <UARTDMA_Print>
			break;
 800822a:	e035      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 800822c:	493e      	ldr	r1, [pc, #248]	; (8008328 <SendComand+0x2f8>)
 800822e:	481e      	ldr	r0, [pc, #120]	; (80082a8 <SendComand+0x278>)
 8008230:	f000 fcdc 	bl	8008bec <UARTDMA_Print>
			break;
 8008234:	e030      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8008236:	493d      	ldr	r1, [pc, #244]	; (800832c <SendComand+0x2fc>)
 8008238:	481b      	ldr	r0, [pc, #108]	; (80082a8 <SendComand+0x278>)
 800823a:	f000 fcd7 	bl	8008bec <UARTDMA_Print>
			break;
 800823e:	e02b      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8008240:	493b      	ldr	r1, [pc, #236]	; (8008330 <SendComand+0x300>)
 8008242:	4819      	ldr	r0, [pc, #100]	; (80082a8 <SendComand+0x278>)
 8008244:	f000 fcd2 	bl	8008bec <UARTDMA_Print>
			break;
 8008248:	e026      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 800824a:	493a      	ldr	r1, [pc, #232]	; (8008334 <SendComand+0x304>)
 800824c:	4816      	ldr	r0, [pc, #88]	; (80082a8 <SendComand+0x278>)
 800824e:	f000 fccd 	bl	8008bec <UARTDMA_Print>
			break;
 8008252:	e021      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8008254:	4938      	ldr	r1, [pc, #224]	; (8008338 <SendComand+0x308>)
 8008256:	4814      	ldr	r0, [pc, #80]	; (80082a8 <SendComand+0x278>)
 8008258:	f000 fcc8 	bl	8008bec <UARTDMA_Print>
			break;
 800825c:	e01c      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 800825e:	4b37      	ldr	r3, [pc, #220]	; (800833c <SendComand+0x30c>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b08      	cmp	r3, #8
 8008264:	d802      	bhi.n	800826c <SendComand+0x23c>
 8008266:	4b35      	ldr	r3, [pc, #212]	; (800833c <SendComand+0x30c>)
 8008268:	2209      	movs	r2, #9
 800826a:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 800826c:	4b33      	ldr	r3, [pc, #204]	; (800833c <SendComand+0x30c>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	461a      	mov	r2, r3
 8008272:	4933      	ldr	r1, [pc, #204]	; (8008340 <SendComand+0x310>)
 8008274:	4833      	ldr	r0, [pc, #204]	; (8008344 <SendComand+0x314>)
 8008276:	f008 faa9 	bl	80107cc <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800827a:	4932      	ldr	r1, [pc, #200]	; (8008344 <SendComand+0x314>)
 800827c:	480a      	ldr	r0, [pc, #40]	; (80082a8 <SendComand+0x278>)
 800827e:	f000 fcb5 	bl	8008bec <UARTDMA_Print>
			break;
 8008282:	e009      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8008284:	4930      	ldr	r1, [pc, #192]	; (8008348 <SendComand+0x318>)
 8008286:	4808      	ldr	r0, [pc, #32]	; (80082a8 <SendComand+0x278>)
 8008288:	f000 fcb0 	bl	8008bec <UARTDMA_Print>
			break;
 800828c:	e004      	b.n	8008298 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 800828e:	492f      	ldr	r1, [pc, #188]	; (800834c <SendComand+0x31c>)
 8008290:	4805      	ldr	r0, [pc, #20]	; (80082a8 <SendComand+0x278>)
 8008292:	f000 fcab 	bl	8008bec <UARTDMA_Print>
			break;
 8008296:	bf00      	nop
		}
	return 1;
 8008298:	2301      	movs	r3, #1
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	08014a8c 	.word	0x08014a8c
 80082a8:	20000498 	.word	0x20000498
 80082ac:	08014a94 	.word	0x08014a94
 80082b0:	08014a9c 	.word	0x08014a9c
 80082b4:	08014aa8 	.word	0x08014aa8
 80082b8:	08014ab0 	.word	0x08014ab0
 80082bc:	08014ab8 	.word	0x08014ab8
 80082c0:	08014ac0 	.word	0x08014ac0
 80082c4:	08014ad0 	.word	0x08014ad0
 80082c8:	08014ae0 	.word	0x08014ae0
 80082cc:	08014af0 	.word	0x08014af0
 80082d0:	08014b00 	.word	0x08014b00
 80082d4:	08014b10 	.word	0x08014b10
 80082d8:	08014b20 	.word	0x08014b20
 80082dc:	08014b30 	.word	0x08014b30
 80082e0:	08014b40 	.word	0x08014b40
 80082e4:	08014b50 	.word	0x08014b50
 80082e8:	08014b60 	.word	0x08014b60
 80082ec:	08014b70 	.word	0x08014b70
 80082f0:	08014b80 	.word	0x08014b80
 80082f4:	08014b90 	.word	0x08014b90
 80082f8:	08014ba0 	.word	0x08014ba0
 80082fc:	08014bb0 	.word	0x08014bb0
 8008300:	08014bc0 	.word	0x08014bc0
 8008304:	08014bd0 	.word	0x08014bd0
 8008308:	08014be0 	.word	0x08014be0
 800830c:	08014bf0 	.word	0x08014bf0
 8008310:	08014c00 	.word	0x08014c00
 8008314:	08014c10 	.word	0x08014c10
 8008318:	08014c20 	.word	0x08014c20
 800831c:	08014c30 	.word	0x08014c30
 8008320:	08014c40 	.word	0x08014c40
 8008324:	08014c50 	.word	0x08014c50
 8008328:	08014c60 	.word	0x08014c60
 800832c:	08014c70 	.word	0x08014c70
 8008330:	08014c80 	.word	0x08014c80
 8008334:	08014c90 	.word	0x08014c90
 8008338:	08014ca0 	.word	0x08014ca0
 800833c:	20000033 	.word	0x20000033
 8008340:	08014cb0 	.word	0x08014cb0
 8008344:	20000668 	.word	0x20000668
 8008348:	08014cc0 	.word	0x08014cc0
 800834c:	08014cd0 	.word	0x08014cd0

08008350 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	781a      	ldrb	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	785b      	ldrb	r3, [r3, #1]
 8008362:	429a      	cmp	r2, r3
 8008364:	d101      	bne.n	800836a <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8008366:	2301      	movs	r3, #1
 8008368:	e015      	b.n	8008396 <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	785b      	ldrb	r3, [r3, #1]
 800836e:	461a      	mov	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4413      	add	r3, r2
 8008374:	789a      	ldrb	r2, [r3, #2]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	785b      	ldrb	r3, [r3, #1]
 800837e:	3301      	adds	r3, #1
 8008380:	425a      	negs	r2, r3
 8008382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008386:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800838a:	bf58      	it	pl
 800838c:	4253      	negpl	r3, r2
 800838e:	b2da      	uxtb	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	3301      	adds	r3, #1
 80083b4:	425a      	negs	r2, r3
 80083b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80083be:	bf58      	it	pl
 80083c0:	4253      	negpl	r3, r2
 80083c2:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	785b      	ldrb	r3, [r3, #1]
 80083c8:	7bfa      	ldrb	r2, [r7, #15]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d101      	bne.n	80083d2 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 80083ce:	2301      	movs	r3, #1
 80083d0:	e00a      	b.n	80083e8 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4413      	add	r3, r2
 80083dc:	78fa      	ldrb	r2, [r7, #3]
 80083de:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	7bfa      	ldrb	r2, [r7, #15]
 80083e4:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80083f8:	4b17      	ldr	r3, [pc, #92]	; (8008458 <MX_SPI1_Init+0x64>)
 80083fa:	4a18      	ldr	r2, [pc, #96]	; (800845c <MX_SPI1_Init+0x68>)
 80083fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80083fe:	4b16      	ldr	r3, [pc, #88]	; (8008458 <MX_SPI1_Init+0x64>)
 8008400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008404:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <MX_SPI1_Init+0x64>)
 8008408:	2200      	movs	r2, #0
 800840a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800840c:	4b12      	ldr	r3, [pc, #72]	; (8008458 <MX_SPI1_Init+0x64>)
 800840e:	2200      	movs	r2, #0
 8008410:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <MX_SPI1_Init+0x64>)
 8008414:	2200      	movs	r2, #0
 8008416:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008418:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <MX_SPI1_Init+0x64>)
 800841a:	2200      	movs	r2, #0
 800841c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800841e:	4b0e      	ldr	r3, [pc, #56]	; (8008458 <MX_SPI1_Init+0x64>)
 8008420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008424:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008426:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <MX_SPI1_Init+0x64>)
 8008428:	2210      	movs	r2, #16
 800842a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800842c:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <MX_SPI1_Init+0x64>)
 800842e:	2200      	movs	r2, #0
 8008430:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008432:	4b09      	ldr	r3, [pc, #36]	; (8008458 <MX_SPI1_Init+0x64>)
 8008434:	2200      	movs	r2, #0
 8008436:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008438:	4b07      	ldr	r3, [pc, #28]	; (8008458 <MX_SPI1_Init+0x64>)
 800843a:	2200      	movs	r2, #0
 800843c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800843e:	4b06      	ldr	r3, [pc, #24]	; (8008458 <MX_SPI1_Init+0x64>)
 8008440:	220a      	movs	r2, #10
 8008442:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008444:	4804      	ldr	r0, [pc, #16]	; (8008458 <MX_SPI1_Init+0x64>)
 8008446:	f005 fb0d 	bl	800da64 <HAL_SPI_Init>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008450:	f7fd f9fa 	bl	8005848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008454:	bf00      	nop
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20000704 	.word	0x20000704
 800845c:	40013000 	.word	0x40013000

08008460 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008464:	4b17      	ldr	r3, [pc, #92]	; (80084c4 <MX_SPI3_Init+0x64>)
 8008466:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <MX_SPI3_Init+0x68>)
 8008468:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800846a:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <MX_SPI3_Init+0x64>)
 800846c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008470:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008472:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <MX_SPI3_Init+0x64>)
 8008474:	2200      	movs	r2, #0
 8008476:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008478:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <MX_SPI3_Init+0x64>)
 800847a:	2200      	movs	r2, #0
 800847c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800847e:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <MX_SPI3_Init+0x64>)
 8008480:	2200      	movs	r2, #0
 8008482:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008484:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <MX_SPI3_Init+0x64>)
 8008486:	2200      	movs	r2, #0
 8008488:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800848a:	4b0e      	ldr	r3, [pc, #56]	; (80084c4 <MX_SPI3_Init+0x64>)
 800848c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008490:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008492:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <MX_SPI3_Init+0x64>)
 8008494:	2220      	movs	r2, #32
 8008496:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008498:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <MX_SPI3_Init+0x64>)
 800849a:	2200      	movs	r2, #0
 800849c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800849e:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <MX_SPI3_Init+0x64>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <MX_SPI3_Init+0x64>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80084aa:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <MX_SPI3_Init+0x64>)
 80084ac:	220a      	movs	r2, #10
 80084ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80084b0:	4804      	ldr	r0, [pc, #16]	; (80084c4 <MX_SPI3_Init+0x64>)
 80084b2:	f005 fad7 	bl	800da64 <HAL_SPI_Init>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80084bc:	f7fd f9c4 	bl	8005848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80084c0:	bf00      	nop
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	200006ac 	.word	0x200006ac
 80084c8:	40003c00 	.word	0x40003c00

080084cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08c      	sub	sp, #48	; 0x30
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d4:	f107 031c 	add.w	r3, r7, #28
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	60da      	str	r2, [r3, #12]
 80084e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a32      	ldr	r2, [pc, #200]	; (80085b4 <HAL_SPI_MspInit+0xe8>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d12c      	bne.n	8008548 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80084ee:	2300      	movs	r3, #0
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	4b31      	ldr	r3, [pc, #196]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 80084f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f6:	4a30      	ldr	r2, [pc, #192]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 80084f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084fc:	6453      	str	r3, [r2, #68]	; 0x44
 80084fe:	4b2e      	ldr	r3, [pc, #184]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008506:	61bb      	str	r3, [r7, #24]
 8008508:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]
 800850e:	4b2a      	ldr	r3, [pc, #168]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 8008510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008512:	4a29      	ldr	r2, [pc, #164]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 8008514:	f043 0301 	orr.w	r3, r3, #1
 8008518:	6313      	str	r3, [r2, #48]	; 0x30
 800851a:	4b27      	ldr	r3, [pc, #156]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008526:	23e0      	movs	r3, #224	; 0xe0
 8008528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800852a:	2302      	movs	r3, #2
 800852c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800852e:	2300      	movs	r3, #0
 8008530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008532:	2303      	movs	r3, #3
 8008534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008536:	2305      	movs	r3, #5
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800853a:	f107 031c 	add.w	r3, r7, #28
 800853e:	4619      	mov	r1, r3
 8008540:	481e      	ldr	r0, [pc, #120]	; (80085bc <HAL_SPI_MspInit+0xf0>)
 8008542:	f001 fb5b 	bl	8009bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008546:	e030      	b.n	80085aa <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a1c      	ldr	r2, [pc, #112]	; (80085c0 <HAL_SPI_MspInit+0xf4>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d12b      	bne.n	80085aa <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008552:	2300      	movs	r3, #0
 8008554:	613b      	str	r3, [r7, #16]
 8008556:	4b18      	ldr	r3, [pc, #96]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 8008558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855a:	4a17      	ldr	r2, [pc, #92]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 800855c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008560:	6413      	str	r3, [r2, #64]	; 0x40
 8008562:	4b15      	ldr	r3, [pc, #84]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 8008564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 8008574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008576:	4a10      	ldr	r2, [pc, #64]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 8008578:	f043 0302 	orr.w	r3, r3, #2
 800857c:	6313      	str	r3, [r2, #48]	; 0x30
 800857e:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <HAL_SPI_MspInit+0xec>)
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800858a:	2338      	movs	r3, #56	; 0x38
 800858c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800858e:	2302      	movs	r3, #2
 8008590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008592:	2300      	movs	r3, #0
 8008594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008596:	2303      	movs	r3, #3
 8008598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800859a:	2306      	movs	r3, #6
 800859c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800859e:	f107 031c 	add.w	r3, r7, #28
 80085a2:	4619      	mov	r1, r3
 80085a4:	4807      	ldr	r0, [pc, #28]	; (80085c4 <HAL_SPI_MspInit+0xf8>)
 80085a6:	f001 fb29 	bl	8009bfc <HAL_GPIO_Init>
}
 80085aa:	bf00      	nop
 80085ac:	3730      	adds	r7, #48	; 0x30
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	40013000 	.word	0x40013000
 80085b8:	40023800 	.word	0x40023800
 80085bc:	40020000 	.word	0x40020000
 80085c0:	40003c00 	.word	0x40003c00
 80085c4:	40020400 	.word	0x40020400

080085c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085ce:	2300      	movs	r3, #0
 80085d0:	607b      	str	r3, [r7, #4]
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <HAL_MspInit+0x4c>)
 80085d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d6:	4a0f      	ldr	r2, [pc, #60]	; (8008614 <HAL_MspInit+0x4c>)
 80085d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085dc:	6453      	str	r3, [r2, #68]	; 0x44
 80085de:	4b0d      	ldr	r3, [pc, #52]	; (8008614 <HAL_MspInit+0x4c>)
 80085e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e6:	607b      	str	r3, [r7, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085ea:	2300      	movs	r3, #0
 80085ec:	603b      	str	r3, [r7, #0]
 80085ee:	4b09      	ldr	r3, [pc, #36]	; (8008614 <HAL_MspInit+0x4c>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	4a08      	ldr	r2, [pc, #32]	; (8008614 <HAL_MspInit+0x4c>)
 80085f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085f8:	6413      	str	r3, [r2, #64]	; 0x40
 80085fa:	4b06      	ldr	r3, [pc, #24]	; (8008614 <HAL_MspInit+0x4c>)
 80085fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40023800 	.word	0x40023800

08008618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008618:	b480      	push	{r7}
 800861a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800861c:	e7fe      	b.n	800861c <NMI_Handler+0x4>

0800861e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800861e:	b480      	push	{r7}
 8008620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008622:	e7fe      	b.n	8008622 <HardFault_Handler+0x4>

08008624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008628:	e7fe      	b.n	8008628 <MemManage_Handler+0x4>

0800862a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800862a:	b480      	push	{r7}
 800862c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800862e:	e7fe      	b.n	800862e <BusFault_Handler+0x4>

08008630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008634:	e7fe      	b.n	8008634 <UsageFault_Handler+0x4>

08008636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008636:	b480      	push	{r7}
 8008638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800863a:	bf00      	nop
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008648:	bf00      	nop
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008652:	b480      	push	{r7}
 8008654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008656:	bf00      	nop
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008664:	f000 fcd6 	bl	8009014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008668:	bf00      	nop
 800866a:	bd80      	pop	{r7, pc}

0800866c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 8008670:	2010      	movs	r0, #16
 8008672:	f001 fc93 	bl	8009f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008676:	bf00      	nop
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008680:	4802      	ldr	r0, [pc, #8]	; (800868c <DMA1_Stream0_IRQHandler+0x10>)
 8008682:	f001 f843 	bl	800970c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008686:	bf00      	nop
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20000438 	.word	0x20000438

08008690 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008694:	4802      	ldr	r0, [pc, #8]	; (80086a0 <DMA1_Stream1_IRQHandler+0x10>)
 8008696:	f001 f839 	bl	800970c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800869a:	bf00      	nop
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20000384 	.word	0x20000384

080086a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 80086a8:	4802      	ldr	r0, [pc, #8]	; (80086b4 <DMA1_Stream5_IRQHandler+0x10>)
 80086aa:	f000 f9e9 	bl	8008a80 <UARTDMA_DmaReceiveIrqHandler>
	return;
 80086ae:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20000498 	.word	0x20000498

080086b8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80086bc:	4802      	ldr	r0, [pc, #8]	; (80086c8 <DMA1_Stream6_IRQHandler+0x10>)
 80086be:	f001 f825 	bl	800970c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80086c2:	bf00      	nop
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	2000084c 	.word	0x2000084c

080086cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 80086d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80086d4:	f001 fc62 	bl	8009f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80086d8:	bf00      	nop
 80086da:	bd80      	pop	{r7, pc}

080086dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80086e0:	4802      	ldr	r0, [pc, #8]	; (80086ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80086e2:	f005 feb4 	bl	800e44e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80086e6:	bf00      	nop
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	2000075c 	.word	0x2000075c

080086f0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80086f4:	4802      	ldr	r0, [pc, #8]	; (8008700 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80086f6:	f005 feaa 	bl	800e44e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80086fa:	bf00      	nop
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	200007a4 	.word	0x200007a4

08008704 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8008708:	4802      	ldr	r0, [pc, #8]	; (8008714 <I2C1_EV_IRQHandler+0x10>)
 800870a:	f002 fbe7 	bl	800aedc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800870e:	bf00      	nop
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	200003e4 	.word	0x200003e4

08008718 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800871c:	4802      	ldr	r0, [pc, #8]	; (8008728 <I2C1_ER_IRQHandler+0x10>)
 800871e:	f002 fd4e 	bl	800b1be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8008722:	bf00      	nop
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	200003e4 	.word	0x200003e4

0800872c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 8008730:	4803      	ldr	r0, [pc, #12]	; (8008740 <USART2_IRQHandler+0x14>)
 8008732:	f000 f97b 	bl	8008a2c <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008736:	4803      	ldr	r0, [pc, #12]	; (8008744 <USART2_IRQHandler+0x18>)
 8008738:	f006 f94a 	bl	800e9d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800873c:	bf00      	nop
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20000498 	.word	0x20000498
 8008744:	200008ac 	.word	0x200008ac

08008748 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800874c:	4802      	ldr	r0, [pc, #8]	; (8008758 <SPI3_IRQHandler+0x10>)
 800874e:	f005 fbb5 	bl	800debc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8008752:	bf00      	nop
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200006ac 	.word	0x200006ac

0800875c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
	return 1;
 8008760:	2301      	movs	r3, #1
}
 8008762:	4618      	mov	r0, r3
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <_kill>:

int _kill(int pid, int sig)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008776:	f007 f977 	bl	800fa68 <__errno>
 800877a:	4603      	mov	r3, r0
 800877c:	2216      	movs	r2, #22
 800877e:	601a      	str	r2, [r3, #0]
	return -1;
 8008780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <_exit>:

void _exit (int status)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008794:	f04f 31ff 	mov.w	r1, #4294967295
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff ffe7 	bl	800876c <_kill>
	while (1) {}		/* Make sure we hang here */
 800879e:	e7fe      	b.n	800879e <_exit+0x12>

080087a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e00a      	b.n	80087c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80087b2:	f3af 8000 	nop.w
 80087b6:	4601      	mov	r1, r0
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	60ba      	str	r2, [r7, #8]
 80087be:	b2ca      	uxtb	r2, r1
 80087c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	3301      	adds	r3, #1
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	dbf0      	blt.n	80087b2 <_read+0x12>
	}

return len;
 80087d0:	687b      	ldr	r3, [r7, #4]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]
 80087ea:	e009      	b.n	8008800 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	60ba      	str	r2, [r7, #8]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	3301      	adds	r3, #1
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	dbf1      	blt.n	80087ec <_write+0x12>
	}
	return len;
 8008808:	687b      	ldr	r3, [r7, #4]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <_close>:

int _close(int file)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
	return -1;
 800881a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800881e:	4618      	mov	r0, r3
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800883a:	605a      	str	r2, [r3, #4]
	return 0;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <_isatty>:

int _isatty(int file)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
	return 1;
 8008852:	2301      	movs	r3, #1
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
	return 0;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
	...

0800887c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008884:	4a14      	ldr	r2, [pc, #80]	; (80088d8 <_sbrk+0x5c>)
 8008886:	4b15      	ldr	r3, [pc, #84]	; (80088dc <_sbrk+0x60>)
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008890:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <_sbrk+0x64>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d102      	bne.n	800889e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008898:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <_sbrk+0x64>)
 800889a:	4a12      	ldr	r2, [pc, #72]	; (80088e4 <_sbrk+0x68>)
 800889c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800889e:	4b10      	ldr	r3, [pc, #64]	; (80088e0 <_sbrk+0x64>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d207      	bcs.n	80088bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80088ac:	f007 f8dc 	bl	800fa68 <__errno>
 80088b0:	4603      	mov	r3, r0
 80088b2:	220c      	movs	r2, #12
 80088b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80088b6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ba:	e009      	b.n	80088d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80088bc:	4b08      	ldr	r3, [pc, #32]	; (80088e0 <_sbrk+0x64>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80088c2:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <_sbrk+0x64>)
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4413      	add	r3, r2
 80088ca:	4a05      	ldr	r2, [pc, #20]	; (80088e0 <_sbrk+0x64>)
 80088cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80088ce:	68fb      	ldr	r3, [r7, #12]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	20020000 	.word	0x20020000
 80088dc:	00000400 	.word	0x00000400
 80088e0:	200002a8 	.word	0x200002a8
 80088e4:	20000908 	.word	0x20000908

080088e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088ec:	4b06      	ldr	r3, [pc, #24]	; (8008908 <SystemInit+0x20>)
 80088ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f2:	4a05      	ldr	r2, [pc, #20]	; (8008908 <SystemInit+0x20>)
 80088f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80088fc:	bf00      	nop
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	e000ed00 	.word	0xe000ed00

0800890c <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8008910:	4b0e      	ldr	r3, [pc, #56]	; (800894c <MX_TIM10_Init+0x40>)
 8008912:	4a0f      	ldr	r2, [pc, #60]	; (8008950 <MX_TIM10_Init+0x44>)
 8008914:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8008916:	4b0d      	ldr	r3, [pc, #52]	; (800894c <MX_TIM10_Init+0x40>)
 8008918:	f242 720f 	movw	r2, #9999	; 0x270f
 800891c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800891e:	4b0b      	ldr	r3, [pc, #44]	; (800894c <MX_TIM10_Init+0x40>)
 8008920:	2200      	movs	r2, #0
 8008922:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8008924:	4b09      	ldr	r3, [pc, #36]	; (800894c <MX_TIM10_Init+0x40>)
 8008926:	f242 720f 	movw	r2, #9999	; 0x270f
 800892a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800892c:	4b07      	ldr	r3, [pc, #28]	; (800894c <MX_TIM10_Init+0x40>)
 800892e:	2200      	movs	r2, #0
 8008930:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008932:	4b06      	ldr	r3, [pc, #24]	; (800894c <MX_TIM10_Init+0x40>)
 8008934:	2200      	movs	r2, #0
 8008936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8008938:	4804      	ldr	r0, [pc, #16]	; (800894c <MX_TIM10_Init+0x40>)
 800893a:	f005 fca7 	bl	800e28c <HAL_TIM_Base_Init>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8008944:	f7fc ff80 	bl	8005848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8008948:	bf00      	nop
 800894a:	bd80      	pop	{r7, pc}
 800894c:	2000075c 	.word	0x2000075c
 8008950:	40014400 	.word	0x40014400

08008954 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8008958:	4b0f      	ldr	r3, [pc, #60]	; (8008998 <MX_TIM11_Init+0x44>)
 800895a:	4a10      	ldr	r2, [pc, #64]	; (800899c <MX_TIM11_Init+0x48>)
 800895c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800895e:	4b0e      	ldr	r3, [pc, #56]	; (8008998 <MX_TIM11_Init+0x44>)
 8008960:	f643 2297 	movw	r2, #14999	; 0x3a97
 8008964:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008966:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <MX_TIM11_Init+0x44>)
 8008968:	2200      	movs	r2, #0
 800896a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800896c:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <MX_TIM11_Init+0x44>)
 800896e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008972:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8008974:	4b08      	ldr	r3, [pc, #32]	; (8008998 <MX_TIM11_Init+0x44>)
 8008976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800897a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <MX_TIM11_Init+0x44>)
 800897e:	2200      	movs	r2, #0
 8008980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8008982:	4805      	ldr	r0, [pc, #20]	; (8008998 <MX_TIM11_Init+0x44>)
 8008984:	f005 fc82 	bl	800e28c <HAL_TIM_Base_Init>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800898e:	f7fc ff5b 	bl	8005848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8008992:	bf00      	nop
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	200007a4 	.word	0x200007a4
 800899c:	40014800 	.word	0x40014800

080089a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a1c      	ldr	r2, [pc, #112]	; (8008a20 <HAL_TIM_Base_MspInit+0x80>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d116      	bne.n	80089e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <HAL_TIM_Base_MspInit+0x84>)
 80089b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ba:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <HAL_TIM_Base_MspInit+0x84>)
 80089bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089c0:	6453      	str	r3, [r2, #68]	; 0x44
 80089c2:	4b18      	ldr	r3, [pc, #96]	; (8008a24 <HAL_TIM_Base_MspInit+0x84>)
 80089c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80089ce:	2200      	movs	r2, #0
 80089d0:	2100      	movs	r1, #0
 80089d2:	2019      	movs	r0, #25
 80089d4:	f000 fca1 	bl	800931a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80089d8:	2019      	movs	r0, #25
 80089da:	f000 fcba 	bl	8009352 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80089de:	e01a      	b.n	8008a16 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a10      	ldr	r2, [pc, #64]	; (8008a28 <HAL_TIM_Base_MspInit+0x88>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d115      	bne.n	8008a16 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80089ea:	2300      	movs	r3, #0
 80089ec:	60bb      	str	r3, [r7, #8]
 80089ee:	4b0d      	ldr	r3, [pc, #52]	; (8008a24 <HAL_TIM_Base_MspInit+0x84>)
 80089f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f2:	4a0c      	ldr	r2, [pc, #48]	; (8008a24 <HAL_TIM_Base_MspInit+0x84>)
 80089f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089f8:	6453      	str	r3, [r2, #68]	; 0x44
 80089fa:	4b0a      	ldr	r3, [pc, #40]	; (8008a24 <HAL_TIM_Base_MspInit+0x84>)
 80089fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a02:	60bb      	str	r3, [r7, #8]
 8008a04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8008a06:	2200      	movs	r2, #0
 8008a08:	2100      	movs	r1, #0
 8008a0a:	201a      	movs	r0, #26
 8008a0c:	f000 fc85 	bl	800931a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8008a10:	201a      	movs	r0, #26
 8008a12:	f000 fc9e 	bl	8009352 <HAL_NVIC_EnableIRQ>
}
 8008a16:	bf00      	nop
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	40014400 	.word	0x40014400
 8008a24:	40023800 	.word	0x40023800
 8008a28:	40014800 	.word	0x40014800

08008a2c <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0310 	and.w	r3, r3, #16
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d017      	beq.n	8008a74 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0201 	bic.w	r2, r2, #1
 8008a6e:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	60fb      	str	r3, [r7, #12]
	}
}
 8008a74:	bf00      	nop
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a90:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0310 	and.w	r3, r3, #16
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d056      	beq.n	8008b52 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aac:	2220      	movs	r2, #32
 8008aae:	409a      	lsls	r2, r3
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008ac4:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8008acc:	2300      	movs	r3, #0
 8008ace:	82fb      	strh	r3, [r7, #22]
 8008ad0:	e01a      	b.n	8008b08 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8008ad8:	8afb      	ldrh	r3, [r7, #22]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	4413      	add	r3, r2
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	f7ff fc5e 	bl	80083a2 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8008ae6:	8afb      	ldrh	r3, [r7, #22]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	4413      	add	r3, r2
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	2b0a      	cmp	r3, #10
 8008af0:	d107      	bne.n	8008b02 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8008af8:	3301      	adds	r3, #1
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8008b02:	8afb      	ldrh	r3, [r7, #22]
 8008b04:	3301      	adds	r3, #1
 8008b06:	82fb      	strh	r3, [r7, #22]
 8008b08:	8afa      	ldrh	r2, [r7, #22]
 8008b0a:	89fb      	ldrh	r3, [r7, #14]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d3e0      	bcc.n	8008ad2 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b18:	223f      	movs	r2, #63	; 0x3f
 8008b1a:	409a      	lsls	r2, r3
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	1d1a      	adds	r2, r3, #4
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2240      	movs	r2, #64	; 0x40
 8008b38:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0201 	orr.w	r2, r2, #1
 8008b50:	601a      	str	r2, [r3, #0]
	}
}
 8008b52:	bf00      	nop
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	460b      	mov	r3, r1
 8008b64:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f203 1347 	addw	r3, r3, #327	; 0x147
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff fc16 	bl	80083a2 <RB_Write>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e000      	b.n	8008b82 <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d01f      	beq.n	8008be2 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8008ba2:	e013      	b.n	8008bcc <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b0a      	cmp	r3, #10
 8008baa:	d10c      	bne.n	8008bc6 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e00e      	b.n	8008be4 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3344      	adds	r3, #68	; 0x44
 8008bd0:	68f9      	ldr	r1, [r7, #12]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff fbbc 	bl	8008350 <RB_Read>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0e2      	beq.n	8008ba4 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8008bde:	2300      	movs	r3, #0
 8008be0:	e000      	b.n	8008be4 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8008be2:	2301      	movs	r3, #1
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8008bfa:	e012      	b.n	8008c22 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8008bfc:	7afb      	ldrb	r3, [r7, #11]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff ffaa 	bl	8008b5a <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8008c0c:	7afb      	ldrb	r3, [r7, #11]
 8008c0e:	2b0a      	cmp	r3, #10
 8008c10:	d107      	bne.n	8008c22 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8008c18:	3301      	adds	r3, #1
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	72fb      	strb	r3, [r7, #11]
 8008c28:	7afb      	ldrb	r3, [r7, #11]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e6      	bne.n	8008bfc <UARTDMA_Print+0x10>
		}
	}
}
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e000      	b.n	8008c50 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8008c64:	2300      	movs	r3, #0
 8008c66:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d028      	beq.n	8008cca <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8008c78:	e013      	b.n	8008ca2 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8008c7a:	7b7b      	ldrb	r3, [r7, #13]
 8008c7c:	2b0a      	cmp	r3, #10
 8008c7e:	d107      	bne.n	8008c90 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8008c90:	89fb      	ldrh	r3, [r7, #14]
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	81fa      	strh	r2, [r7, #14]
 8008c96:	4619      	mov	r1, r3
 8008c98:	7b7a      	ldrb	r2, [r7, #13]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	440b      	add	r3, r1
 8008c9e:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f203 1347 	addw	r3, r3, #327	; 0x147
 8008ca8:	f107 020d 	add.w	r2, r7, #13
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff fb4e 	bl	8008350 <RB_Read>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0df      	beq.n	8008c7a <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	33c7      	adds	r3, #199	; 0xc7
 8008cc2:	89fa      	ldrh	r2, [r7, #14]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	f005 fdd5 	bl	800e874 <HAL_UART_Transmit_DMA>
	}
}
 8008cca:	bf00      	nop
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f042 0210 	orr.w	r2, r2, #16
 8008cf4:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0210 	orr.w	r2, r2, #16
 8008d0c:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f042 0210 	orr.w	r2, r2, #16
 8008d24:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6818      	ldr	r0, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	2240      	movs	r2, #64	; 0x40
 8008d30:	4619      	mov	r1, r3
 8008d32:	f005 fe1d 	bl	800e970 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 0208 	bic.w	r2, r2, #8
 8008d4c:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f022 0208 	bic.w	r2, r2, #8
 8008d64:	601a      	str	r2, [r3, #0]
}
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008d74:	4b11      	ldr	r3, [pc, #68]	; (8008dbc <MX_USART2_UART_Init+0x4c>)
 8008d76:	4a12      	ldr	r2, [pc, #72]	; (8008dc0 <MX_USART2_UART_Init+0x50>)
 8008d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008d7a:	4b10      	ldr	r3, [pc, #64]	; (8008dbc <MX_USART2_UART_Init+0x4c>)
 8008d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008d82:	4b0e      	ldr	r3, [pc, #56]	; (8008dbc <MX_USART2_UART_Init+0x4c>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <MX_USART2_UART_Init+0x4c>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008d8e:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <MX_USART2_UART_Init+0x4c>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008d94:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <MX_USART2_UART_Init+0x4c>)
 8008d96:	220c      	movs	r2, #12
 8008d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d9a:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <MX_USART2_UART_Init+0x4c>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <MX_USART2_UART_Init+0x4c>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008da6:	4805      	ldr	r0, [pc, #20]	; (8008dbc <MX_USART2_UART_Init+0x4c>)
 8008da8:	f005 fd16 	bl	800e7d8 <HAL_UART_Init>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008db2:	f7fc fd49 	bl	8005848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008db6:	bf00      	nop
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	200008ac 	.word	0x200008ac
 8008dc0:	40004400 	.word	0x40004400

08008dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08a      	sub	sp, #40	; 0x28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dcc:	f107 0314 	add.w	r3, r7, #20
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	605a      	str	r2, [r3, #4]
 8008dd6:	609a      	str	r2, [r3, #8]
 8008dd8:	60da      	str	r2, [r3, #12]
 8008dda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a47      	ldr	r2, [pc, #284]	; (8008f00 <HAL_UART_MspInit+0x13c>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	f040 8088 	bne.w	8008ef8 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008de8:	2300      	movs	r3, #0
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	4b45      	ldr	r3, [pc, #276]	; (8008f04 <HAL_UART_MspInit+0x140>)
 8008dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df0:	4a44      	ldr	r2, [pc, #272]	; (8008f04 <HAL_UART_MspInit+0x140>)
 8008df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008df6:	6413      	str	r3, [r2, #64]	; 0x40
 8008df8:	4b42      	ldr	r3, [pc, #264]	; (8008f04 <HAL_UART_MspInit+0x140>)
 8008dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e00:	613b      	str	r3, [r7, #16]
 8008e02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]
 8008e08:	4b3e      	ldr	r3, [pc, #248]	; (8008f04 <HAL_UART_MspInit+0x140>)
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	4a3d      	ldr	r2, [pc, #244]	; (8008f04 <HAL_UART_MspInit+0x140>)
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	6313      	str	r3, [r2, #48]	; 0x30
 8008e14:	4b3b      	ldr	r3, [pc, #236]	; (8008f04 <HAL_UART_MspInit+0x140>)
 8008e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008e20:	230c      	movs	r3, #12
 8008e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e24:	2302      	movs	r3, #2
 8008e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008e30:	2307      	movs	r3, #7
 8008e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e34:	f107 0314 	add.w	r3, r7, #20
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4833      	ldr	r0, [pc, #204]	; (8008f08 <HAL_UART_MspInit+0x144>)
 8008e3c:	f000 fede 	bl	8009bfc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8008e40:	4b32      	ldr	r3, [pc, #200]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e42:	4a33      	ldr	r2, [pc, #204]	; (8008f10 <HAL_UART_MspInit+0x14c>)
 8008e44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8008e46:	4b31      	ldr	r3, [pc, #196]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008e4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e4e:	4b2f      	ldr	r3, [pc, #188]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e54:	4b2d      	ldr	r3, [pc, #180]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e5a:	4b2c      	ldr	r3, [pc, #176]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e62:	4b2a      	ldr	r3, [pc, #168]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e68:	4b28      	ldr	r3, [pc, #160]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008e6e:	4b27      	ldr	r3, [pc, #156]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008e74:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e7a:	4b24      	ldr	r3, [pc, #144]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008e80:	4822      	ldr	r0, [pc, #136]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e82:	f000 faab 	bl	80093dc <HAL_DMA_Init>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8008e8c:	f7fc fcdc 	bl	8005848 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a1e      	ldr	r2, [pc, #120]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e94:	639a      	str	r2, [r3, #56]	; 0x38
 8008e96:	4a1d      	ldr	r2, [pc, #116]	; (8008f0c <HAL_UART_MspInit+0x148>)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8008e9c:	4b1d      	ldr	r3, [pc, #116]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008e9e:	4a1e      	ldr	r2, [pc, #120]	; (8008f18 <HAL_UART_MspInit+0x154>)
 8008ea0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8008ea2:	4b1c      	ldr	r3, [pc, #112]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008ea4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008ea8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008eaa:	4b1a      	ldr	r3, [pc, #104]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008eac:	2240      	movs	r2, #64	; 0x40
 8008eae:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008eb0:	4b18      	ldr	r3, [pc, #96]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008eb6:	4b17      	ldr	r3, [pc, #92]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ebc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ebe:	4b15      	ldr	r3, [pc, #84]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ec4:	4b13      	ldr	r3, [pc, #76]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008eca:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008ed0:	4b10      	ldr	r3, [pc, #64]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008edc:	480d      	ldr	r0, [pc, #52]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008ede:	f000 fa7d 	bl	80093dc <HAL_DMA_Init>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8008ee8:	f7fc fcae 	bl	8005848 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a09      	ldr	r2, [pc, #36]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8008ef2:	4a08      	ldr	r2, [pc, #32]	; (8008f14 <HAL_UART_MspInit+0x150>)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008ef8:	bf00      	nop
 8008efa:	3728      	adds	r7, #40	; 0x28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	40004400 	.word	0x40004400
 8008f04:	40023800 	.word	0x40023800
 8008f08:	40020000 	.word	0x40020000
 8008f0c:	200007ec 	.word	0x200007ec
 8008f10:	40026088 	.word	0x40026088
 8008f14:	2000084c 	.word	0x2000084c
 8008f18:	400260a0 	.word	0x400260a0

08008f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008f54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008f20:	480d      	ldr	r0, [pc, #52]	; (8008f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008f22:	490e      	ldr	r1, [pc, #56]	; (8008f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008f24:	4a0e      	ldr	r2, [pc, #56]	; (8008f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008f28:	e002      	b.n	8008f30 <LoopCopyDataInit>

08008f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008f2e:	3304      	adds	r3, #4

08008f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008f34:	d3f9      	bcc.n	8008f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008f36:	4a0b      	ldr	r2, [pc, #44]	; (8008f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008f38:	4c0b      	ldr	r4, [pc, #44]	; (8008f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008f3c:	e001      	b.n	8008f42 <LoopFillZerobss>

08008f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008f40:	3204      	adds	r2, #4

08008f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008f44:	d3fb      	bcc.n	8008f3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008f46:	f7ff fccf 	bl	80088e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f4a:	f006 fd93 	bl	800fa74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f4e:	f7fc fb3f 	bl	80055d0 <main>
  bx  lr    
 8008f52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008f5c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8008f60:	08028340 	.word	0x08028340
  ldr r2, =_sbss
 8008f64:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8008f68:	20000904 	.word	0x20000904

08008f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008f6c:	e7fe      	b.n	8008f6c <ADC_IRQHandler>
	...

08008f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008f74:	4b0e      	ldr	r3, [pc, #56]	; (8008fb0 <HAL_Init+0x40>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a0d      	ldr	r2, [pc, #52]	; (8008fb0 <HAL_Init+0x40>)
 8008f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008f80:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <HAL_Init+0x40>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a0a      	ldr	r2, [pc, #40]	; (8008fb0 <HAL_Init+0x40>)
 8008f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008f8c:	4b08      	ldr	r3, [pc, #32]	; (8008fb0 <HAL_Init+0x40>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a07      	ldr	r2, [pc, #28]	; (8008fb0 <HAL_Init+0x40>)
 8008f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f98:	2003      	movs	r0, #3
 8008f9a:	f000 f9b3 	bl	8009304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	f000 f808 	bl	8008fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008fa4:	f7ff fb10 	bl	80085c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	40023c00 	.word	0x40023c00

08008fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008fbc:	4b12      	ldr	r3, [pc, #72]	; (8009008 <HAL_InitTick+0x54>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	4b12      	ldr	r3, [pc, #72]	; (800900c <HAL_InitTick+0x58>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 f9d9 	bl	800938a <HAL_SYSTICK_Config>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e00e      	b.n	8009000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b0f      	cmp	r3, #15
 8008fe6:	d80a      	bhi.n	8008ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008fe8:	2200      	movs	r2, #0
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	f000 f993 	bl	800931a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ff4:	4a06      	ldr	r2, [pc, #24]	; (8009010 <HAL_InitTick+0x5c>)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e000      	b.n	8009000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20000034 	.word	0x20000034
 800900c:	2000003c 	.word	0x2000003c
 8009010:	20000038 	.word	0x20000038

08009014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009018:	4b06      	ldr	r3, [pc, #24]	; (8009034 <HAL_IncTick+0x20>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	4b06      	ldr	r3, [pc, #24]	; (8009038 <HAL_IncTick+0x24>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4413      	add	r3, r2
 8009024:	4a04      	ldr	r2, [pc, #16]	; (8009038 <HAL_IncTick+0x24>)
 8009026:	6013      	str	r3, [r2, #0]
}
 8009028:	bf00      	nop
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	2000003c 	.word	0x2000003c
 8009038:	200008f0 	.word	0x200008f0

0800903c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
  return uwTick;
 8009040:	4b03      	ldr	r3, [pc, #12]	; (8009050 <HAL_GetTick+0x14>)
 8009042:	681b      	ldr	r3, [r3, #0]
}
 8009044:	4618      	mov	r0, r3
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	200008f0 	.word	0x200008f0

08009054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800905c:	f7ff ffee 	bl	800903c <HAL_GetTick>
 8009060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906c:	d005      	beq.n	800907a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800906e:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <HAL_Delay+0x44>)
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800907a:	bf00      	nop
 800907c:	f7ff ffde 	bl	800903c <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	429a      	cmp	r2, r3
 800908a:	d8f7      	bhi.n	800907c <HAL_Delay+0x28>
  {
  }
}
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	2000003c 	.word	0x2000003c

0800909c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090ac:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <__NVIC_SetPriorityGrouping+0x44>)
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80090b8:	4013      	ands	r3, r2
 80090ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80090c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80090c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090ce:	4a04      	ldr	r2, [pc, #16]	; (80090e0 <__NVIC_SetPriorityGrouping+0x44>)
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	60d3      	str	r3, [r2, #12]
}
 80090d4:	bf00      	nop
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	e000ed00 	.word	0xe000ed00

080090e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <__NVIC_GetPriorityGrouping+0x18>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	0a1b      	lsrs	r3, r3, #8
 80090ee:	f003 0307 	and.w	r3, r3, #7
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	e000ed00 	.word	0xe000ed00

08009100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800910a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800910e:	2b00      	cmp	r3, #0
 8009110:	db0b      	blt.n	800912a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	f003 021f 	and.w	r2, r3, #31
 8009118:	4907      	ldr	r1, [pc, #28]	; (8009138 <__NVIC_EnableIRQ+0x38>)
 800911a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	2001      	movs	r0, #1
 8009122:	fa00 f202 	lsl.w	r2, r0, r2
 8009126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800912a:	bf00      	nop
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	e000e100 	.word	0xe000e100

0800913c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800914a:	2b00      	cmp	r3, #0
 800914c:	db12      	blt.n	8009174 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	f003 021f 	and.w	r2, r3, #31
 8009154:	490a      	ldr	r1, [pc, #40]	; (8009180 <__NVIC_DisableIRQ+0x44>)
 8009156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800915a:	095b      	lsrs	r3, r3, #5
 800915c:	2001      	movs	r0, #1
 800915e:	fa00 f202 	lsl.w	r2, r0, r2
 8009162:	3320      	adds	r3, #32
 8009164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009168:	f3bf 8f4f 	dsb	sy
}
 800916c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800916e:	f3bf 8f6f 	isb	sy
}
 8009172:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	e000e100 	.word	0xe000e100

08009184 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800918e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009192:	2b00      	cmp	r3, #0
 8009194:	db0e      	blt.n	80091b4 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8009196:	4a0b      	ldr	r2, [pc, #44]	; (80091c4 <__NVIC_GetPendingIRQ+0x40>)
 8009198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800919c:	095b      	lsrs	r3, r3, #5
 800919e:	3340      	adds	r3, #64	; 0x40
 80091a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	f003 031f 	and.w	r3, r3, #31
 80091aa:	fa22 f303 	lsr.w	r3, r2, r3
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	e000      	b.n	80091b6 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 80091b4:	2300      	movs	r3, #0
  }
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	e000e100 	.word	0xe000e100

080091c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	db0c      	blt.n	80091f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	f003 021f 	and.w	r2, r3, #31
 80091e0:	4907      	ldr	r1, [pc, #28]	; (8009200 <__NVIC_ClearPendingIRQ+0x38>)
 80091e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091e6:	095b      	lsrs	r3, r3, #5
 80091e8:	2001      	movs	r0, #1
 80091ea:	fa00 f202 	lsl.w	r2, r0, r2
 80091ee:	3360      	adds	r3, #96	; 0x60
 80091f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	e000e100 	.word	0xe000e100

08009204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009214:	2b00      	cmp	r3, #0
 8009216:	db0a      	blt.n	800922e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	b2da      	uxtb	r2, r3
 800921c:	490c      	ldr	r1, [pc, #48]	; (8009250 <__NVIC_SetPriority+0x4c>)
 800921e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009222:	0112      	lsls	r2, r2, #4
 8009224:	b2d2      	uxtb	r2, r2
 8009226:	440b      	add	r3, r1
 8009228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800922c:	e00a      	b.n	8009244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	b2da      	uxtb	r2, r3
 8009232:	4908      	ldr	r1, [pc, #32]	; (8009254 <__NVIC_SetPriority+0x50>)
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	3b04      	subs	r3, #4
 800923c:	0112      	lsls	r2, r2, #4
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	440b      	add	r3, r1
 8009242:	761a      	strb	r2, [r3, #24]
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	e000e100 	.word	0xe000e100
 8009254:	e000ed00 	.word	0xe000ed00

08009258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009258:	b480      	push	{r7}
 800925a:	b089      	sub	sp, #36	; 0x24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	f1c3 0307 	rsb	r3, r3, #7
 8009272:	2b04      	cmp	r3, #4
 8009274:	bf28      	it	cs
 8009276:	2304      	movcs	r3, #4
 8009278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	3304      	adds	r3, #4
 800927e:	2b06      	cmp	r3, #6
 8009280:	d902      	bls.n	8009288 <NVIC_EncodePriority+0x30>
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	3b03      	subs	r3, #3
 8009286:	e000      	b.n	800928a <NVIC_EncodePriority+0x32>
 8009288:	2300      	movs	r3, #0
 800928a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800928c:	f04f 32ff 	mov.w	r2, #4294967295
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	fa02 f303 	lsl.w	r3, r2, r3
 8009296:	43da      	mvns	r2, r3
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	401a      	ands	r2, r3
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092a0:	f04f 31ff 	mov.w	r1, #4294967295
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	fa01 f303 	lsl.w	r3, r1, r3
 80092aa:	43d9      	mvns	r1, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092b0:	4313      	orrs	r3, r2
         );
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3724      	adds	r7, #36	; 0x24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
	...

080092c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092d0:	d301      	bcc.n	80092d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80092d2:	2301      	movs	r3, #1
 80092d4:	e00f      	b.n	80092f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80092d6:	4a0a      	ldr	r2, [pc, #40]	; (8009300 <SysTick_Config+0x40>)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	3b01      	subs	r3, #1
 80092dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80092de:	210f      	movs	r1, #15
 80092e0:	f04f 30ff 	mov.w	r0, #4294967295
 80092e4:	f7ff ff8e 	bl	8009204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80092e8:	4b05      	ldr	r3, [pc, #20]	; (8009300 <SysTick_Config+0x40>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80092ee:	4b04      	ldr	r3, [pc, #16]	; (8009300 <SysTick_Config+0x40>)
 80092f0:	2207      	movs	r2, #7
 80092f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	e000e010 	.word	0xe000e010

08009304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff fec5 	bl	800909c <__NVIC_SetPriorityGrouping>
}
 8009312:	bf00      	nop
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800931a:	b580      	push	{r7, lr}
 800931c:	b086      	sub	sp, #24
 800931e:	af00      	add	r7, sp, #0
 8009320:	4603      	mov	r3, r0
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	607a      	str	r2, [r7, #4]
 8009326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009328:	2300      	movs	r3, #0
 800932a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800932c:	f7ff feda 	bl	80090e4 <__NVIC_GetPriorityGrouping>
 8009330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	68b9      	ldr	r1, [r7, #8]
 8009336:	6978      	ldr	r0, [r7, #20]
 8009338:	f7ff ff8e 	bl	8009258 <NVIC_EncodePriority>
 800933c:	4602      	mov	r2, r0
 800933e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009342:	4611      	mov	r1, r2
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff ff5d 	bl	8009204 <__NVIC_SetPriority>
}
 800934a:	bf00      	nop
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	4603      	mov	r3, r0
 800935a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800935c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff fecd 	bl	8009100 <__NVIC_EnableIRQ>
}
 8009366:	bf00      	nop
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	4603      	mov	r3, r0
 8009376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff fedd 	bl	800913c <__NVIC_DisableIRQ>
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff ff94 	bl	80092c0 <SysTick_Config>
 8009398:	4603      	mov	r3, r0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	4603      	mov	r3, r0
 80093aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80093ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff fee7 	bl	8009184 <__NVIC_GetPendingIRQ>
 80093b6:	4603      	mov	r3, r0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80093ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff fefa 	bl	80091c8 <__NVIC_ClearPendingIRQ>
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80093e8:	f7ff fe28 	bl	800903c <HAL_GetTick>
 80093ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e099      	b.n	800952c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2202      	movs	r2, #2
 80093fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f022 0201 	bic.w	r2, r2, #1
 8009416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009418:	e00f      	b.n	800943a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800941a:	f7ff fe0f 	bl	800903c <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	2b05      	cmp	r3, #5
 8009426:	d908      	bls.n	800943a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2220      	movs	r2, #32
 800942c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2203      	movs	r2, #3
 8009432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e078      	b.n	800952c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e8      	bne.n	800941a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	4b38      	ldr	r3, [pc, #224]	; (8009534 <HAL_DMA_Init+0x158>)
 8009454:	4013      	ands	r3, r2
 8009456:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009466:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800947e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	4313      	orrs	r3, r2
 800948a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	2b04      	cmp	r3, #4
 8009492:	d107      	bne.n	80094a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949c:	4313      	orrs	r3, r2
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f023 0307 	bic.w	r3, r3, #7
 80094ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	d117      	bne.n	80094fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00e      	beq.n	80094fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fb0f 	bl	8009b04 <DMA_CheckFifoParam>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d008      	beq.n	80094fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2240      	movs	r2, #64	; 0x40
 80094f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80094fa:	2301      	movs	r3, #1
 80094fc:	e016      	b.n	800952c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fac6 	bl	8009a98 <DMA_CalcBaseAndBitshift>
 800950c:	4603      	mov	r3, r0
 800950e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009514:	223f      	movs	r2, #63	; 0x3f
 8009516:	409a      	lsls	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	f010803f 	.word	0xf010803f

08009538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800954e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009556:	2b01      	cmp	r3, #1
 8009558:	d101      	bne.n	800955e <HAL_DMA_Start_IT+0x26>
 800955a:	2302      	movs	r3, #2
 800955c:	e040      	b.n	80095e0 <HAL_DMA_Start_IT+0xa8>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b01      	cmp	r3, #1
 8009570:	d12f      	bne.n	80095d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2202      	movs	r2, #2
 8009576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	68b9      	ldr	r1, [r7, #8]
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fa58 	bl	8009a3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009590:	223f      	movs	r2, #63	; 0x3f
 8009592:	409a      	lsls	r2, r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0216 	orr.w	r2, r2, #22
 80095a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0208 	orr.w	r2, r2, #8
 80095be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0201 	orr.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	e005      	b.n	80095de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80095da:	2302      	movs	r3, #2
 80095dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80095de:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80095f6:	f7ff fd21 	bl	800903c <HAL_GetTick>
 80095fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b02      	cmp	r3, #2
 8009606:	d008      	beq.n	800961a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2280      	movs	r2, #128	; 0x80
 800960c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e052      	b.n	80096c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f022 0216 	bic.w	r2, r2, #22
 8009628:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	695a      	ldr	r2, [r3, #20]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009638:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	2b00      	cmp	r3, #0
 8009640:	d103      	bne.n	800964a <HAL_DMA_Abort+0x62>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009646:	2b00      	cmp	r3, #0
 8009648:	d007      	beq.n	800965a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0208 	bic.w	r2, r2, #8
 8009658:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0201 	bic.w	r2, r2, #1
 8009668:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800966a:	e013      	b.n	8009694 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800966c:	f7ff fce6 	bl	800903c <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b05      	cmp	r3, #5
 8009678:	d90c      	bls.n	8009694 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2220      	movs	r2, #32
 800967e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2203      	movs	r2, #3
 8009684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e015      	b.n	80096c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e4      	bne.n	800966c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a6:	223f      	movs	r2, #63	; 0x3f
 80096a8:	409a      	lsls	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d004      	beq.n	80096e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2280      	movs	r2, #128	; 0x80
 80096e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e00c      	b.n	8009700 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2205      	movs	r2, #5
 80096ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0201 	bic.w	r2, r2, #1
 80096fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009718:	4b92      	ldr	r3, [pc, #584]	; (8009964 <HAL_DMA_IRQHandler+0x258>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a92      	ldr	r2, [pc, #584]	; (8009968 <HAL_DMA_IRQHandler+0x25c>)
 800971e:	fba2 2303 	umull	r2, r3, r2, r3
 8009722:	0a9b      	lsrs	r3, r3, #10
 8009724:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800972a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009736:	2208      	movs	r2, #8
 8009738:	409a      	lsls	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4013      	ands	r3, r2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d01a      	beq.n	8009778 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d013      	beq.n	8009778 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0204 	bic.w	r2, r2, #4
 800975e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009764:	2208      	movs	r2, #8
 8009766:	409a      	lsls	r2, r3
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009770:	f043 0201 	orr.w	r2, r3, #1
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800977c:	2201      	movs	r2, #1
 800977e:	409a      	lsls	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4013      	ands	r3, r2
 8009784:	2b00      	cmp	r3, #0
 8009786:	d012      	beq.n	80097ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00b      	beq.n	80097ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800979a:	2201      	movs	r2, #1
 800979c:	409a      	lsls	r2, r3
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a6:	f043 0202 	orr.w	r2, r3, #2
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097b2:	2204      	movs	r2, #4
 80097b4:	409a      	lsls	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4013      	ands	r3, r2
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d012      	beq.n	80097e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097d0:	2204      	movs	r2, #4
 80097d2:	409a      	lsls	r2, r3
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097dc:	f043 0204 	orr.w	r2, r3, #4
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097e8:	2210      	movs	r2, #16
 80097ea:	409a      	lsls	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4013      	ands	r3, r2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d043      	beq.n	800987c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0308 	and.w	r3, r3, #8
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d03c      	beq.n	800987c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009806:	2210      	movs	r2, #16
 8009808:	409a      	lsls	r2, r3
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d018      	beq.n	800984e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d108      	bne.n	800983c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982e:	2b00      	cmp	r3, #0
 8009830:	d024      	beq.n	800987c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	4798      	blx	r3
 800983a:	e01f      	b.n	800987c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009840:	2b00      	cmp	r3, #0
 8009842:	d01b      	beq.n	800987c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	4798      	blx	r3
 800984c:	e016      	b.n	800987c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009858:	2b00      	cmp	r3, #0
 800985a:	d107      	bne.n	800986c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f022 0208 	bic.w	r2, r2, #8
 800986a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009880:	2220      	movs	r2, #32
 8009882:	409a      	lsls	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4013      	ands	r3, r2
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 808e 	beq.w	80099aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0310 	and.w	r3, r3, #16
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 8086 	beq.w	80099aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098a2:	2220      	movs	r2, #32
 80098a4:	409a      	lsls	r2, r3
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b05      	cmp	r3, #5
 80098b4:	d136      	bne.n	8009924 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0216 	bic.w	r2, r2, #22
 80098c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	695a      	ldr	r2, [r3, #20]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d103      	bne.n	80098e6 <HAL_DMA_IRQHandler+0x1da>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0208 	bic.w	r2, r2, #8
 80098f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098fa:	223f      	movs	r2, #63	; 0x3f
 80098fc:	409a      	lsls	r2, r3
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009916:	2b00      	cmp	r3, #0
 8009918:	d07d      	beq.n	8009a16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	4798      	blx	r3
        }
        return;
 8009922:	e078      	b.n	8009a16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d01c      	beq.n	800996c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d108      	bne.n	8009952 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009944:	2b00      	cmp	r3, #0
 8009946:	d030      	beq.n	80099aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	4798      	blx	r3
 8009950:	e02b      	b.n	80099aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d027      	beq.n	80099aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
 8009962:	e022      	b.n	80099aa <HAL_DMA_IRQHandler+0x29e>
 8009964:	20000034 	.word	0x20000034
 8009968:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10f      	bne.n	800999a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0210 	bic.w	r2, r2, #16
 8009988:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d032      	beq.n	8009a18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d022      	beq.n	8009a04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2205      	movs	r2, #5
 80099c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f022 0201 	bic.w	r2, r2, #1
 80099d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	3301      	adds	r3, #1
 80099da:	60bb      	str	r3, [r7, #8]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d307      	bcc.n	80099f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1f2      	bne.n	80099d6 <HAL_DMA_IRQHandler+0x2ca>
 80099f0:	e000      	b.n	80099f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80099f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	4798      	blx	r3
 8009a14:	e000      	b.n	8009a18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009a16:	bf00      	nop
    }
  }
}
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop

08009a20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a2e:	b2db      	uxtb	r3, r3
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	2b40      	cmp	r3, #64	; 0x40
 8009a68:	d108      	bne.n	8009a7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009a7a:	e007      	b.n	8009a8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	60da      	str	r2, [r3, #12]
}
 8009a8c:	bf00      	nop
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	3b10      	subs	r3, #16
 8009aa8:	4a14      	ldr	r2, [pc, #80]	; (8009afc <DMA_CalcBaseAndBitshift+0x64>)
 8009aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8009aae:	091b      	lsrs	r3, r3, #4
 8009ab0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009ab2:	4a13      	ldr	r2, [pc, #76]	; (8009b00 <DMA_CalcBaseAndBitshift+0x68>)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d909      	bls.n	8009ada <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009ace:	f023 0303 	bic.w	r3, r3, #3
 8009ad2:	1d1a      	adds	r2, r3, #4
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	659a      	str	r2, [r3, #88]	; 0x58
 8009ad8:	e007      	b.n	8009aea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009ae2:	f023 0303 	bic.w	r3, r3, #3
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	aaaaaaab 	.word	0xaaaaaaab
 8009b00:	08027e14 	.word	0x08027e14

08009b04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d11f      	bne.n	8009b5e <DMA_CheckFifoParam+0x5a>
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d856      	bhi.n	8009bd2 <DMA_CheckFifoParam+0xce>
 8009b24:	a201      	add	r2, pc, #4	; (adr r2, 8009b2c <DMA_CheckFifoParam+0x28>)
 8009b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2a:	bf00      	nop
 8009b2c:	08009b3d 	.word	0x08009b3d
 8009b30:	08009b4f 	.word	0x08009b4f
 8009b34:	08009b3d 	.word	0x08009b3d
 8009b38:	08009bd3 	.word	0x08009bd3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d046      	beq.n	8009bd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b4c:	e043      	b.n	8009bd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009b56:	d140      	bne.n	8009bda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b5c:	e03d      	b.n	8009bda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b66:	d121      	bne.n	8009bac <DMA_CheckFifoParam+0xa8>
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d837      	bhi.n	8009bde <DMA_CheckFifoParam+0xda>
 8009b6e:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <DMA_CheckFifoParam+0x70>)
 8009b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b74:	08009b85 	.word	0x08009b85
 8009b78:	08009b8b 	.word	0x08009b8b
 8009b7c:	08009b85 	.word	0x08009b85
 8009b80:	08009b9d 	.word	0x08009b9d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	73fb      	strb	r3, [r7, #15]
      break;
 8009b88:	e030      	b.n	8009bec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d025      	beq.n	8009be2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b9a:	e022      	b.n	8009be2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009ba4:	d11f      	bne.n	8009be6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009baa:	e01c      	b.n	8009be6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d903      	bls.n	8009bba <DMA_CheckFifoParam+0xb6>
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d003      	beq.n	8009bc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009bb8:	e018      	b.n	8009bec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8009bbe:	e015      	b.n	8009bec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00e      	beq.n	8009bea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	73fb      	strb	r3, [r7, #15]
      break;
 8009bd0:	e00b      	b.n	8009bea <DMA_CheckFifoParam+0xe6>
      break;
 8009bd2:	bf00      	nop
 8009bd4:	e00a      	b.n	8009bec <DMA_CheckFifoParam+0xe8>
      break;
 8009bd6:	bf00      	nop
 8009bd8:	e008      	b.n	8009bec <DMA_CheckFifoParam+0xe8>
      break;
 8009bda:	bf00      	nop
 8009bdc:	e006      	b.n	8009bec <DMA_CheckFifoParam+0xe8>
      break;
 8009bde:	bf00      	nop
 8009be0:	e004      	b.n	8009bec <DMA_CheckFifoParam+0xe8>
      break;
 8009be2:	bf00      	nop
 8009be4:	e002      	b.n	8009bec <DMA_CheckFifoParam+0xe8>
      break;   
 8009be6:	bf00      	nop
 8009be8:	e000      	b.n	8009bec <DMA_CheckFifoParam+0xe8>
      break;
 8009bea:	bf00      	nop
    }
  } 
  
  return status; 
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop

08009bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b089      	sub	sp, #36	; 0x24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c12:	2300      	movs	r3, #0
 8009c14:	61fb      	str	r3, [r7, #28]
 8009c16:	e159      	b.n	8009ecc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009c18:	2201      	movs	r2, #1
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	4013      	ands	r3, r2
 8009c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	f040 8148 	bne.w	8009ec6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f003 0303 	and.w	r3, r3, #3
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d005      	beq.n	8009c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d130      	bne.n	8009cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	005b      	lsls	r3, r3, #1
 8009c58:	2203      	movs	r2, #3
 8009c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5e:	43db      	mvns	r3, r3
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	4013      	ands	r3, r2
 8009c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c72:	69ba      	ldr	r2, [r7, #24]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009c84:	2201      	movs	r2, #1
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8c:	43db      	mvns	r3, r3
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	4013      	ands	r3, r2
 8009c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	091b      	lsrs	r3, r3, #4
 8009c9a:	f003 0201 	and.w	r2, r3, #1
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	69ba      	ldr	r2, [r7, #24]
 8009cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f003 0303 	and.w	r3, r3, #3
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d017      	beq.n	8009cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	2203      	movs	r2, #3
 8009cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ccc:	43db      	mvns	r3, r3
 8009cce:	69ba      	ldr	r2, [r7, #24]
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce0:	69ba      	ldr	r2, [r7, #24]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	f003 0303 	and.w	r3, r3, #3
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d123      	bne.n	8009d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	08da      	lsrs	r2, r3, #3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3208      	adds	r2, #8
 8009d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	f003 0307 	and.w	r3, r3, #7
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	220f      	movs	r2, #15
 8009d10:	fa02 f303 	lsl.w	r3, r2, r3
 8009d14:	43db      	mvns	r3, r3
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	4013      	ands	r3, r2
 8009d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	f003 0307 	and.w	r3, r3, #7
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2c:	69ba      	ldr	r2, [r7, #24]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	08da      	lsrs	r2, r3, #3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3208      	adds	r2, #8
 8009d3a:	69b9      	ldr	r1, [r7, #24]
 8009d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	005b      	lsls	r3, r3, #1
 8009d4a:	2203      	movs	r2, #3
 8009d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d50:	43db      	mvns	r3, r3
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	4013      	ands	r3, r2
 8009d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f003 0203 	and.w	r2, r3, #3
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	fa02 f303 	lsl.w	r3, r2, r3
 8009d68:	69ba      	ldr	r2, [r7, #24]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	69ba      	ldr	r2, [r7, #24]
 8009d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 80a2 	beq.w	8009ec6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d82:	2300      	movs	r3, #0
 8009d84:	60fb      	str	r3, [r7, #12]
 8009d86:	4b57      	ldr	r3, [pc, #348]	; (8009ee4 <HAL_GPIO_Init+0x2e8>)
 8009d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8a:	4a56      	ldr	r2, [pc, #344]	; (8009ee4 <HAL_GPIO_Init+0x2e8>)
 8009d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d90:	6453      	str	r3, [r2, #68]	; 0x44
 8009d92:	4b54      	ldr	r3, [pc, #336]	; (8009ee4 <HAL_GPIO_Init+0x2e8>)
 8009d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009d9e:	4a52      	ldr	r2, [pc, #328]	; (8009ee8 <HAL_GPIO_Init+0x2ec>)
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	089b      	lsrs	r3, r3, #2
 8009da4:	3302      	adds	r3, #2
 8009da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	220f      	movs	r2, #15
 8009db6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dba:	43db      	mvns	r3, r3
 8009dbc:	69ba      	ldr	r2, [r7, #24]
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a49      	ldr	r2, [pc, #292]	; (8009eec <HAL_GPIO_Init+0x2f0>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d019      	beq.n	8009dfe <HAL_GPIO_Init+0x202>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a48      	ldr	r2, [pc, #288]	; (8009ef0 <HAL_GPIO_Init+0x2f4>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d013      	beq.n	8009dfa <HAL_GPIO_Init+0x1fe>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a47      	ldr	r2, [pc, #284]	; (8009ef4 <HAL_GPIO_Init+0x2f8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d00d      	beq.n	8009df6 <HAL_GPIO_Init+0x1fa>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a46      	ldr	r2, [pc, #280]	; (8009ef8 <HAL_GPIO_Init+0x2fc>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d007      	beq.n	8009df2 <HAL_GPIO_Init+0x1f6>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a45      	ldr	r2, [pc, #276]	; (8009efc <HAL_GPIO_Init+0x300>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d101      	bne.n	8009dee <HAL_GPIO_Init+0x1f2>
 8009dea:	2304      	movs	r3, #4
 8009dec:	e008      	b.n	8009e00 <HAL_GPIO_Init+0x204>
 8009dee:	2307      	movs	r3, #7
 8009df0:	e006      	b.n	8009e00 <HAL_GPIO_Init+0x204>
 8009df2:	2303      	movs	r3, #3
 8009df4:	e004      	b.n	8009e00 <HAL_GPIO_Init+0x204>
 8009df6:	2302      	movs	r3, #2
 8009df8:	e002      	b.n	8009e00 <HAL_GPIO_Init+0x204>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e000      	b.n	8009e00 <HAL_GPIO_Init+0x204>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	f002 0203 	and.w	r2, r2, #3
 8009e06:	0092      	lsls	r2, r2, #2
 8009e08:	4093      	lsls	r3, r2
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009e10:	4935      	ldr	r1, [pc, #212]	; (8009ee8 <HAL_GPIO_Init+0x2ec>)
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	089b      	lsrs	r3, r3, #2
 8009e16:	3302      	adds	r3, #2
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009e1e:	4b38      	ldr	r3, [pc, #224]	; (8009f00 <HAL_GPIO_Init+0x304>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	43db      	mvns	r3, r3
 8009e28:	69ba      	ldr	r2, [r7, #24]
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009e42:	4a2f      	ldr	r2, [pc, #188]	; (8009f00 <HAL_GPIO_Init+0x304>)
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009e48:	4b2d      	ldr	r3, [pc, #180]	; (8009f00 <HAL_GPIO_Init+0x304>)
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	43db      	mvns	r3, r3
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	4013      	ands	r3, r2
 8009e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d003      	beq.n	8009e6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009e64:	69ba      	ldr	r2, [r7, #24]
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009e6c:	4a24      	ldr	r2, [pc, #144]	; (8009f00 <HAL_GPIO_Init+0x304>)
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009e72:	4b23      	ldr	r3, [pc, #140]	; (8009f00 <HAL_GPIO_Init+0x304>)
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	43db      	mvns	r3, r3
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	4013      	ands	r3, r2
 8009e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009e96:	4a1a      	ldr	r2, [pc, #104]	; (8009f00 <HAL_GPIO_Init+0x304>)
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009e9c:	4b18      	ldr	r3, [pc, #96]	; (8009f00 <HAL_GPIO_Init+0x304>)
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	43db      	mvns	r3, r3
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009eb8:	69ba      	ldr	r2, [r7, #24]
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009ec0:	4a0f      	ldr	r2, [pc, #60]	; (8009f00 <HAL_GPIO_Init+0x304>)
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	61fb      	str	r3, [r7, #28]
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	2b0f      	cmp	r3, #15
 8009ed0:	f67f aea2 	bls.w	8009c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009ed4:	bf00      	nop
 8009ed6:	bf00      	nop
 8009ed8:	3724      	adds	r7, #36	; 0x24
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	40023800 	.word	0x40023800
 8009ee8:	40013800 	.word	0x40013800
 8009eec:	40020000 	.word	0x40020000
 8009ef0:	40020400 	.word	0x40020400
 8009ef4:	40020800 	.word	0x40020800
 8009ef8:	40020c00 	.word	0x40020c00
 8009efc:	40021000 	.word	0x40021000
 8009f00:	40013c00 	.word	0x40013c00

08009f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691a      	ldr	r2, [r3, #16]
 8009f14:	887b      	ldrh	r3, [r7, #2]
 8009f16:	4013      	ands	r3, r2
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	73fb      	strb	r3, [r7, #15]
 8009f20:	e001      	b.n	8009f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f22:	2300      	movs	r3, #0
 8009f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	807b      	strh	r3, [r7, #2]
 8009f40:	4613      	mov	r3, r2
 8009f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009f44:	787b      	ldrb	r3, [r7, #1]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009f4a:	887a      	ldrh	r2, [r7, #2]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009f50:	e003      	b.n	8009f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009f52:	887b      	ldrh	r3, [r7, #2]
 8009f54:	041a      	lsls	r2, r3, #16
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	619a      	str	r2, [r3, #24]
}
 8009f5a:	bf00      	nop
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009f78:	887a      	ldrh	r2, [r7, #2]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	041a      	lsls	r2, r3, #16
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	43d9      	mvns	r1, r3
 8009f84:	887b      	ldrh	r3, [r7, #2]
 8009f86:	400b      	ands	r3, r1
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	619a      	str	r2, [r3, #24]
}
 8009f8e:	bf00      	nop
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
	...

08009f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009fa6:	4b08      	ldr	r3, [pc, #32]	; (8009fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009fa8:	695a      	ldr	r2, [r3, #20]
 8009faa:	88fb      	ldrh	r3, [r7, #6]
 8009fac:	4013      	ands	r3, r2
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d006      	beq.n	8009fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009fb2:	4a05      	ldr	r2, [pc, #20]	; (8009fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009fb4:	88fb      	ldrh	r3, [r7, #6]
 8009fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fb fc30 	bl	8005820 <HAL_GPIO_EXTI_Callback>
  }
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	40013c00 	.word	0x40013c00

08009fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e12b      	b.n	800a236 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d106      	bne.n	8009ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7fb f9e2 	bl	80053bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2224      	movs	r2, #36	; 0x24
 8009ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f022 0201 	bic.w	r2, r2, #1
 800a00e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a01e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a02e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a030:	f003 fcf0 	bl	800da14 <HAL_RCC_GetPCLK1Freq>
 800a034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	4a81      	ldr	r2, [pc, #516]	; (800a240 <HAL_I2C_Init+0x274>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d807      	bhi.n	800a050 <HAL_I2C_Init+0x84>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4a80      	ldr	r2, [pc, #512]	; (800a244 <HAL_I2C_Init+0x278>)
 800a044:	4293      	cmp	r3, r2
 800a046:	bf94      	ite	ls
 800a048:	2301      	movls	r3, #1
 800a04a:	2300      	movhi	r3, #0
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	e006      	b.n	800a05e <HAL_I2C_Init+0x92>
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4a7d      	ldr	r2, [pc, #500]	; (800a248 <HAL_I2C_Init+0x27c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	bf94      	ite	ls
 800a058:	2301      	movls	r3, #1
 800a05a:	2300      	movhi	r3, #0
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e0e7      	b.n	800a236 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4a78      	ldr	r2, [pc, #480]	; (800a24c <HAL_I2C_Init+0x280>)
 800a06a:	fba2 2303 	umull	r2, r3, r2, r3
 800a06e:	0c9b      	lsrs	r3, r3, #18
 800a070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	430a      	orrs	r2, r1
 800a084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	4a6a      	ldr	r2, [pc, #424]	; (800a240 <HAL_I2C_Init+0x274>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d802      	bhi.n	800a0a0 <HAL_I2C_Init+0xd4>
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	3301      	adds	r3, #1
 800a09e:	e009      	b.n	800a0b4 <HAL_I2C_Init+0xe8>
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a0a6:	fb02 f303 	mul.w	r3, r2, r3
 800a0aa:	4a69      	ldr	r2, [pc, #420]	; (800a250 <HAL_I2C_Init+0x284>)
 800a0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b0:	099b      	lsrs	r3, r3, #6
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	6812      	ldr	r2, [r2, #0]
 800a0b8:	430b      	orrs	r3, r1
 800a0ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a0c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	495c      	ldr	r1, [pc, #368]	; (800a240 <HAL_I2C_Init+0x274>)
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	d819      	bhi.n	800a108 <HAL_I2C_Init+0x13c>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	1e59      	subs	r1, r3, #1
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0e2:	1c59      	adds	r1, r3, #1
 800a0e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a0e8:	400b      	ands	r3, r1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <HAL_I2C_Init+0x138>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	1e59      	subs	r1, r3, #1
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a102:	e051      	b.n	800a1a8 <HAL_I2C_Init+0x1dc>
 800a104:	2304      	movs	r3, #4
 800a106:	e04f      	b.n	800a1a8 <HAL_I2C_Init+0x1dc>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d111      	bne.n	800a134 <HAL_I2C_Init+0x168>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	1e58      	subs	r0, r3, #1
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6859      	ldr	r1, [r3, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	005b      	lsls	r3, r3, #1
 800a11c:	440b      	add	r3, r1
 800a11e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a122:	3301      	adds	r3, #1
 800a124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a128:	2b00      	cmp	r3, #0
 800a12a:	bf0c      	ite	eq
 800a12c:	2301      	moveq	r3, #1
 800a12e:	2300      	movne	r3, #0
 800a130:	b2db      	uxtb	r3, r3
 800a132:	e012      	b.n	800a15a <HAL_I2C_Init+0x18e>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	1e58      	subs	r0, r3, #1
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6859      	ldr	r1, [r3, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	440b      	add	r3, r1
 800a142:	0099      	lsls	r1, r3, #2
 800a144:	440b      	add	r3, r1
 800a146:	fbb0 f3f3 	udiv	r3, r0, r3
 800a14a:	3301      	adds	r3, #1
 800a14c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a150:	2b00      	cmp	r3, #0
 800a152:	bf0c      	ite	eq
 800a154:	2301      	moveq	r3, #1
 800a156:	2300      	movne	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <HAL_I2C_Init+0x196>
 800a15e:	2301      	movs	r3, #1
 800a160:	e022      	b.n	800a1a8 <HAL_I2C_Init+0x1dc>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10e      	bne.n	800a188 <HAL_I2C_Init+0x1bc>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	1e58      	subs	r0, r3, #1
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6859      	ldr	r1, [r3, #4]
 800a172:	460b      	mov	r3, r1
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	440b      	add	r3, r1
 800a178:	fbb0 f3f3 	udiv	r3, r0, r3
 800a17c:	3301      	adds	r3, #1
 800a17e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a186:	e00f      	b.n	800a1a8 <HAL_I2C_Init+0x1dc>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	1e58      	subs	r0, r3, #1
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6859      	ldr	r1, [r3, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	440b      	add	r3, r1
 800a196:	0099      	lsls	r1, r3, #2
 800a198:	440b      	add	r3, r1
 800a19a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a19e:	3301      	adds	r3, #1
 800a1a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1a8:	6879      	ldr	r1, [r7, #4]
 800a1aa:	6809      	ldr	r1, [r1, #0]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	69da      	ldr	r2, [r3, #28]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a1d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6911      	ldr	r1, [r2, #16]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	68d2      	ldr	r2, [r2, #12]
 800a1e2:	4311      	orrs	r1, r2
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	6812      	ldr	r2, [r2, #0]
 800a1e8:	430b      	orrs	r3, r1
 800a1ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	695a      	ldr	r2, [r3, #20]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	431a      	orrs	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f042 0201 	orr.w	r2, r2, #1
 800a216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2220      	movs	r2, #32
 800a222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	000186a0 	.word	0x000186a0
 800a244:	001e847f 	.word	0x001e847f
 800a248:	003d08ff 	.word	0x003d08ff
 800a24c:	431bde83 	.word	0x431bde83
 800a250:	10624dd3 	.word	0x10624dd3

0800a254 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b088      	sub	sp, #32
 800a258:	af02      	add	r7, sp, #8
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	607a      	str	r2, [r7, #4]
 800a25e:	461a      	mov	r2, r3
 800a260:	460b      	mov	r3, r1
 800a262:	817b      	strh	r3, [r7, #10]
 800a264:	4613      	mov	r3, r2
 800a266:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a268:	f7fe fee8 	bl	800903c <HAL_GetTick>
 800a26c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b20      	cmp	r3, #32
 800a278:	f040 80e0 	bne.w	800a43c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	2319      	movs	r3, #25
 800a282:	2201      	movs	r2, #1
 800a284:	4970      	ldr	r1, [pc, #448]	; (800a448 <HAL_I2C_Master_Transmit+0x1f4>)
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f002 fd7a 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a292:	2302      	movs	r3, #2
 800a294:	e0d3      	b.n	800a43e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d101      	bne.n	800a2a4 <HAL_I2C_Master_Transmit+0x50>
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	e0cc      	b.n	800a43e <HAL_I2C_Master_Transmit+0x1ea>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d007      	beq.n	800a2ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f042 0201 	orr.w	r2, r2, #1
 800a2c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2221      	movs	r2, #33	; 0x21
 800a2de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2210      	movs	r2, #16
 800a2e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	893a      	ldrh	r2, [r7, #8]
 800a2fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a300:	b29a      	uxth	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4a50      	ldr	r2, [pc, #320]	; (800a44c <HAL_I2C_Master_Transmit+0x1f8>)
 800a30a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a30c:	8979      	ldrh	r1, [r7, #10]
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	6a3a      	ldr	r2, [r7, #32]
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f002 f9be 	bl	800c694 <I2C_MasterRequestWrite>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e08d      	b.n	800a43e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	613b      	str	r3, [r7, #16]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a338:	e066      	b.n	800a408 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	6a39      	ldr	r1, [r7, #32]
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f002 fdf4 	bl	800cf2c <I2C_WaitOnTXEFlagUntilTimeout>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00d      	beq.n	800a366 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d107      	bne.n	800a362 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a360:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e06b      	b.n	800a43e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36a:	781a      	ldrb	r2, [r3, #0]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a380:	b29b      	uxth	r3, r3
 800a382:	3b01      	subs	r3, #1
 800a384:	b29a      	uxth	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a38e:	3b01      	subs	r3, #1
 800a390:	b29a      	uxth	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b04      	cmp	r3, #4
 800a3a2:	d11b      	bne.n	800a3dc <HAL_I2C_Master_Transmit+0x188>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d017      	beq.n	800a3dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	781a      	ldrb	r2, [r3, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	1c5a      	adds	r2, r3, #1
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	6a39      	ldr	r1, [r7, #32]
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f002 fde4 	bl	800cfae <I2C_WaitOnBTFFlagUntilTimeout>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00d      	beq.n	800a408 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f0:	2b04      	cmp	r3, #4
 800a3f2:	d107      	bne.n	800a404 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a402:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e01a      	b.n	800a43e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d194      	bne.n	800a33a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a41e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2220      	movs	r2, #32
 800a424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	e000      	b.n	800a43e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a43c:	2302      	movs	r3, #2
  }
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	00100002 	.word	0x00100002
 800a44c:	ffff0000 	.word	0xffff0000

0800a450 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08c      	sub	sp, #48	; 0x30
 800a454:	af02      	add	r7, sp, #8
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	607a      	str	r2, [r7, #4]
 800a45a:	461a      	mov	r2, r3
 800a45c:	460b      	mov	r3, r1
 800a45e:	817b      	strh	r3, [r7, #10]
 800a460:	4613      	mov	r3, r2
 800a462:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a464:	f7fe fdea 	bl	800903c <HAL_GetTick>
 800a468:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b20      	cmp	r3, #32
 800a474:	f040 820b 	bne.w	800a88e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	2319      	movs	r3, #25
 800a47e:	2201      	movs	r2, #1
 800a480:	497c      	ldr	r1, [pc, #496]	; (800a674 <HAL_I2C_Master_Receive+0x224>)
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f002 fc7c 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a48e:	2302      	movs	r3, #2
 800a490:	e1fe      	b.n	800a890 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d101      	bne.n	800a4a0 <HAL_I2C_Master_Receive+0x50>
 800a49c:	2302      	movs	r3, #2
 800a49e:	e1f7      	b.n	800a890 <HAL_I2C_Master_Receive+0x440>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d007      	beq.n	800a4c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f042 0201 	orr.w	r2, r2, #1
 800a4c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2222      	movs	r2, #34	; 0x22
 800a4da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2210      	movs	r2, #16
 800a4e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	893a      	ldrh	r2, [r7, #8]
 800a4f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4a5c      	ldr	r2, [pc, #368]	; (800a678 <HAL_I2C_Master_Receive+0x228>)
 800a506:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a508:	8979      	ldrh	r1, [r7, #10]
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f002 f942 	bl	800c798 <I2C_MasterRequestRead>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d001      	beq.n	800a51e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e1b8      	b.n	800a890 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a522:	2b00      	cmp	r3, #0
 800a524:	d113      	bne.n	800a54e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a526:	2300      	movs	r3, #0
 800a528:	623b      	str	r3, [r7, #32]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	623b      	str	r3, [r7, #32]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	623b      	str	r3, [r7, #32]
 800a53a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a54a:	601a      	str	r2, [r3, #0]
 800a54c:	e18c      	b.n	800a868 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a552:	2b01      	cmp	r3, #1
 800a554:	d11b      	bne.n	800a58e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a566:	2300      	movs	r3, #0
 800a568:	61fb      	str	r3, [r7, #28]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	61fb      	str	r3, [r7, #28]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	61fb      	str	r3, [r7, #28]
 800a57a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	e16c      	b.n	800a868 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a592:	2b02      	cmp	r3, #2
 800a594:	d11b      	bne.n	800a5ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	61bb      	str	r3, [r7, #24]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	61bb      	str	r3, [r7, #24]
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	e14c      	b.n	800a868 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a5dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a5f4:	e138      	b.n	800a868 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	f200 80f1 	bhi.w	800a7e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a604:	2b01      	cmp	r3, #1
 800a606:	d123      	bne.n	800a650 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a60a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f002 fd41 	bl	800d094 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	e139      	b.n	800a890 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	691a      	ldr	r2, [r3, #16]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a638:	3b01      	subs	r3, #1
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a644:	b29b      	uxth	r3, r3
 800a646:	3b01      	subs	r3, #1
 800a648:	b29a      	uxth	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a64e:	e10b      	b.n	800a868 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a654:	2b02      	cmp	r3, #2
 800a656:	d14e      	bne.n	800a6f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	2200      	movs	r2, #0
 800a660:	4906      	ldr	r1, [pc, #24]	; (800a67c <HAL_I2C_Master_Receive+0x22c>)
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f002 fb8c 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d008      	beq.n	800a680 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e10e      	b.n	800a890 <HAL_I2C_Master_Receive+0x440>
 800a672:	bf00      	nop
 800a674:	00100002 	.word	0x00100002
 800a678:	ffff0000 	.word	0xffff0000
 800a67c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a68e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	691a      	ldr	r2, [r3, #16]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a2:	1c5a      	adds	r2, r3, #1
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	b2d2      	uxtb	r2, r2
 800a6ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	1c5a      	adds	r2, r3, #1
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6f4:	e0b8      	b.n	800a868 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	4966      	ldr	r1, [pc, #408]	; (800a898 <HAL_I2C_Master_Receive+0x448>)
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f002 fb3d 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e0bf      	b.n	800a890 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a71e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72a:	b2d2      	uxtb	r2, r2
 800a72c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a732:	1c5a      	adds	r2, r3, #1
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a748:	b29b      	uxth	r3, r3
 800a74a:	3b01      	subs	r3, #1
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	2200      	movs	r2, #0
 800a75a:	494f      	ldr	r1, [pc, #316]	; (800a898 <HAL_I2C_Master_Receive+0x448>)
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f002 fb0f 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e091      	b.n	800a890 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a77a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	691a      	ldr	r2, [r3, #16]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	b2d2      	uxtb	r2, r2
 800a788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	1c5a      	adds	r2, r3, #1
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a798:	3b01      	subs	r3, #1
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	691a      	ldr	r2, [r3, #16]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	b2d2      	uxtb	r2, r2
 800a7ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a7e0:	e042      	b.n	800a868 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f002 fc54 	bl	800d094 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e04c      	b.n	800a890 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	691a      	ldr	r2, [r3, #16]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a812:	3b01      	subs	r3, #1
 800a814:	b29a      	uxth	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a81e:	b29b      	uxth	r3, r3
 800a820:	3b01      	subs	r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	f003 0304 	and.w	r3, r3, #4
 800a832:	2b04      	cmp	r3, #4
 800a834:	d118      	bne.n	800a868 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	691a      	ldr	r2, [r3, #16]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a840:	b2d2      	uxtb	r2, r2
 800a842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a848:	1c5a      	adds	r2, r3, #1
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a852:	3b01      	subs	r3, #1
 800a854:	b29a      	uxth	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a85e:	b29b      	uxth	r3, r3
 800a860:	3b01      	subs	r3, #1
 800a862:	b29a      	uxth	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f47f aec2 	bne.w	800a5f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2220      	movs	r2, #32
 800a876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	e000      	b.n	800a890 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a88e:	2302      	movs	r3, #2
  }
}
 800a890:	4618      	mov	r0, r3
 800a892:	3728      	adds	r7, #40	; 0x28
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	00010004 	.word	0x00010004

0800a89c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b088      	sub	sp, #32
 800a8a0:	af02      	add	r7, sp, #8
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	817b      	strh	r3, [r7, #10]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	813b      	strh	r3, [r7, #8]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a8b6:	f7fe fbc1 	bl	800903c <HAL_GetTick>
 800a8ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b20      	cmp	r3, #32
 800a8c6:	f040 80d9 	bne.w	800aa7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	2319      	movs	r3, #25
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	496d      	ldr	r1, [pc, #436]	; (800aa88 <HAL_I2C_Mem_Write+0x1ec>)
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f002 fa53 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	e0cc      	b.n	800aa7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d101      	bne.n	800a8f2 <HAL_I2C_Mem_Write+0x56>
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e0c5      	b.n	800aa7e <HAL_I2C_Mem_Write+0x1e2>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	2b01      	cmp	r3, #1
 800a906:	d007      	beq.n	800a918 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0201 	orr.w	r2, r2, #1
 800a916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2221      	movs	r2, #33	; 0x21
 800a92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2240      	movs	r2, #64	; 0x40
 800a934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a3a      	ldr	r2, [r7, #32]
 800a942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a94e:	b29a      	uxth	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4a4d      	ldr	r2, [pc, #308]	; (800aa8c <HAL_I2C_Mem_Write+0x1f0>)
 800a958:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a95a:	88f8      	ldrh	r0, [r7, #6]
 800a95c:	893a      	ldrh	r2, [r7, #8]
 800a95e:	8979      	ldrh	r1, [r7, #10]
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	9301      	str	r3, [sp, #4]
 800a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	4603      	mov	r3, r0
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f001 ffe2 	bl	800c934 <I2C_RequestMemoryWrite>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d052      	beq.n	800aa1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e081      	b.n	800aa7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f002 fad4 	bl	800cf2c <I2C_WaitOnTXEFlagUntilTimeout>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00d      	beq.n	800a9a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98e:	2b04      	cmp	r3, #4
 800a990:	d107      	bne.n	800a9a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e06b      	b.n	800aa7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9aa:	781a      	ldrb	r2, [r3, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	2b04      	cmp	r3, #4
 800a9e2:	d11b      	bne.n	800aa1c <HAL_I2C_Mem_Write+0x180>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d017      	beq.n	800aa1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	781a      	ldrb	r2, [r3, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa06:	3b01      	subs	r3, #1
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	3b01      	subs	r3, #1
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1aa      	bne.n	800a97a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f002 fac0 	bl	800cfae <I2C_WaitOnBTFFlagUntilTimeout>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00d      	beq.n	800aa50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	2b04      	cmp	r3, #4
 800aa3a:	d107      	bne.n	800aa4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e016      	b.n	800aa7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2220      	movs	r2, #32
 800aa64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	e000      	b.n	800aa7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800aa7c:	2302      	movs	r3, #2
  }
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	00100002 	.word	0x00100002
 800aa8c:	ffff0000 	.word	0xffff0000

0800aa90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08c      	sub	sp, #48	; 0x30
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	4608      	mov	r0, r1
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	817b      	strh	r3, [r7, #10]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	813b      	strh	r3, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aaaa:	f7fe fac7 	bl	800903c <HAL_GetTick>
 800aaae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b20      	cmp	r3, #32
 800aaba:	f040 8208 	bne.w	800aece <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	2319      	movs	r3, #25
 800aac4:	2201      	movs	r2, #1
 800aac6:	497b      	ldr	r1, [pc, #492]	; (800acb4 <HAL_I2C_Mem_Read+0x224>)
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f002 f959 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800aad4:	2302      	movs	r3, #2
 800aad6:	e1fb      	b.n	800aed0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <HAL_I2C_Mem_Read+0x56>
 800aae2:	2302      	movs	r3, #2
 800aae4:	e1f4      	b.n	800aed0 <HAL_I2C_Mem_Read+0x440>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d007      	beq.n	800ab0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 0201 	orr.w	r2, r2, #1
 800ab0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2222      	movs	r2, #34	; 0x22
 800ab20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2240      	movs	r2, #64	; 0x40
 800ab28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ab3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4a5b      	ldr	r2, [pc, #364]	; (800acb8 <HAL_I2C_Mem_Read+0x228>)
 800ab4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab4e:	88f8      	ldrh	r0, [r7, #6]
 800ab50:	893a      	ldrh	r2, [r7, #8]
 800ab52:	8979      	ldrh	r1, [r7, #10]
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	9301      	str	r3, [sp, #4]
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f001 ff7e 	bl	800ca60 <I2C_RequestMemoryRead>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e1b0      	b.n	800aed0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d113      	bne.n	800ab9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab76:	2300      	movs	r3, #0
 800ab78:	623b      	str	r3, [r7, #32]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	623b      	str	r3, [r7, #32]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	623b      	str	r3, [r7, #32]
 800ab8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab9a:	601a      	str	r2, [r3, #0]
 800ab9c:	e184      	b.n	800aea8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d11b      	bne.n	800abde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abb6:	2300      	movs	r3, #0
 800abb8:	61fb      	str	r3, [r7, #28]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	61fb      	str	r3, [r7, #28]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	61fb      	str	r3, [r7, #28]
 800abca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	e164      	b.n	800aea8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d11b      	bne.n	800ac1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abf4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac06:	2300      	movs	r3, #0
 800ac08:	61bb      	str	r3, [r7, #24]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	61bb      	str	r3, [r7, #24]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	61bb      	str	r3, [r7, #24]
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	e144      	b.n	800aea8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac1e:	2300      	movs	r3, #0
 800ac20:	617b      	str	r3, [r7, #20]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	617b      	str	r3, [r7, #20]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	617b      	str	r3, [r7, #20]
 800ac32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ac34:	e138      	b.n	800aea8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	f200 80f1 	bhi.w	800ae22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d123      	bne.n	800ac90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f002 fa21 	bl	800d094 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e139      	b.n	800aed0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	691a      	ldr	r2, [r3, #16]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac66:	b2d2      	uxtb	r2, r2
 800ac68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	3b01      	subs	r3, #1
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ac8e:	e10b      	b.n	800aea8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d14e      	bne.n	800ad36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9e:	2200      	movs	r2, #0
 800aca0:	4906      	ldr	r1, [pc, #24]	; (800acbc <HAL_I2C_Mem_Read+0x22c>)
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f002 f86c 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d008      	beq.n	800acc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e10e      	b.n	800aed0 <HAL_I2C_Mem_Read+0x440>
 800acb2:	bf00      	nop
 800acb4:	00100002 	.word	0x00100002
 800acb8:	ffff0000 	.word	0xffff0000
 800acbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	691a      	ldr	r2, [r3, #16]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acda:	b2d2      	uxtb	r2, r2
 800acdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acec:	3b01      	subs	r3, #1
 800acee:	b29a      	uxth	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	3b01      	subs	r3, #1
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	691a      	ldr	r2, [r3, #16]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	b2d2      	uxtb	r2, r2
 800ad0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad14:	1c5a      	adds	r2, r3, #1
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ad34:	e0b8      	b.n	800aea8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	4966      	ldr	r1, [pc, #408]	; (800aed8 <HAL_I2C_Mem_Read+0x448>)
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f002 f81d 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d001      	beq.n	800ad50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e0bf      	b.n	800aed0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	691a      	ldr	r2, [r3, #16]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6a:	b2d2      	uxtb	r2, r2
 800ad6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad98:	2200      	movs	r2, #0
 800ad9a:	494f      	ldr	r1, [pc, #316]	; (800aed8 <HAL_I2C_Mem_Read+0x448>)
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f001 ffef 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e091      	b.n	800aed0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	691a      	ldr	r2, [r3, #16]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	b2d2      	uxtb	r2, r2
 800adc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800add8:	3b01      	subs	r3, #1
 800adda:	b29a      	uxth	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	3b01      	subs	r3, #1
 800ade8:	b29a      	uxth	r2, r3
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	691a      	ldr	r2, [r3, #16]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	b2d2      	uxtb	r2, r2
 800adfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ae20:	e042      	b.n	800aea8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f002 f934 	bl	800d094 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e04c      	b.n	800aed0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	691a      	ldr	r2, [r3, #16]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae40:	b2d2      	uxtb	r2, r2
 800ae42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae48:	1c5a      	adds	r2, r3, #1
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae52:	3b01      	subs	r3, #1
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	3b01      	subs	r3, #1
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	f003 0304 	and.w	r3, r3, #4
 800ae72:	2b04      	cmp	r3, #4
 800ae74:	d118      	bne.n	800aea8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	691a      	ldr	r2, [r3, #16]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	b2d2      	uxtb	r2, r2
 800ae82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae88:	1c5a      	adds	r2, r3, #1
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae92:	3b01      	subs	r3, #1
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	3b01      	subs	r3, #1
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f47f aec2 	bne.w	800ac36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	e000      	b.n	800aed0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800aece:	2302      	movs	r3, #2
  }
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3728      	adds	r7, #40	; 0x28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	00010004 	.word	0x00010004

0800aedc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b088      	sub	sp, #32
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aefc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800af06:	7bfb      	ldrb	r3, [r7, #15]
 800af08:	2b10      	cmp	r3, #16
 800af0a:	d003      	beq.n	800af14 <HAL_I2C_EV_IRQHandler+0x38>
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	2b40      	cmp	r3, #64	; 0x40
 800af10:	f040 80c1 	bne.w	800b096 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10d      	bne.n	800af4a <HAL_I2C_EV_IRQHandler+0x6e>
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800af34:	d003      	beq.n	800af3e <HAL_I2C_EV_IRQHandler+0x62>
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800af3c:	d101      	bne.n	800af42 <HAL_I2C_EV_IRQHandler+0x66>
 800af3e:	2301      	movs	r3, #1
 800af40:	e000      	b.n	800af44 <HAL_I2C_EV_IRQHandler+0x68>
 800af42:	2300      	movs	r3, #0
 800af44:	2b01      	cmp	r3, #1
 800af46:	f000 8132 	beq.w	800b1ae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00c      	beq.n	800af6e <HAL_I2C_EV_IRQHandler+0x92>
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	0a5b      	lsrs	r3, r3, #9
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d006      	beq.n	800af6e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f002 f91c 	bl	800d19e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fd79 	bl	800ba5e <I2C_Master_SB>
 800af6c:	e092      	b.n	800b094 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	08db      	lsrs	r3, r3, #3
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	2b00      	cmp	r3, #0
 800af78:	d009      	beq.n	800af8e <HAL_I2C_EV_IRQHandler+0xb2>
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	0a5b      	lsrs	r3, r3, #9
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fdef 	bl	800bb6a <I2C_Master_ADD10>
 800af8c:	e082      	b.n	800b094 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	085b      	lsrs	r3, r3, #1
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	2b00      	cmp	r3, #0
 800af98:	d009      	beq.n	800afae <HAL_I2C_EV_IRQHandler+0xd2>
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	0a5b      	lsrs	r3, r3, #9
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d003      	beq.n	800afae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fe09 	bl	800bbbe <I2C_Master_ADDR>
 800afac:	e072      	b.n	800b094 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	089b      	lsrs	r3, r3, #2
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d03b      	beq.n	800b032 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afc8:	f000 80f3 	beq.w	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	09db      	lsrs	r3, r3, #7
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00f      	beq.n	800aff8 <HAL_I2C_EV_IRQHandler+0x11c>
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	0a9b      	lsrs	r3, r3, #10
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d009      	beq.n	800aff8 <HAL_I2C_EV_IRQHandler+0x11c>
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	089b      	lsrs	r3, r3, #2
 800afe8:	f003 0301 	and.w	r3, r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	d103      	bne.n	800aff8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f9f3 	bl	800b3dc <I2C_MasterTransmit_TXE>
 800aff6:	e04d      	b.n	800b094 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	089b      	lsrs	r3, r3, #2
 800affc:	f003 0301 	and.w	r3, r3, #1
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 80d6 	beq.w	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	0a5b      	lsrs	r3, r3, #9
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 80cf 	beq.w	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	2b21      	cmp	r3, #33	; 0x21
 800b018:	d103      	bne.n	800b022 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fa7a 	bl	800b514 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b020:	e0c7      	b.n	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	2b40      	cmp	r3, #64	; 0x40
 800b026:	f040 80c4 	bne.w	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fae8 	bl	800b600 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b030:	e0bf      	b.n	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b03c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b040:	f000 80b7 	beq.w	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	099b      	lsrs	r3, r3, #6
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00f      	beq.n	800b070 <HAL_I2C_EV_IRQHandler+0x194>
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	0a9b      	lsrs	r3, r3, #10
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d009      	beq.n	800b070 <HAL_I2C_EV_IRQHandler+0x194>
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	089b      	lsrs	r3, r3, #2
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b00      	cmp	r3, #0
 800b066:	d103      	bne.n	800b070 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fb5d 	bl	800b728 <I2C_MasterReceive_RXNE>
 800b06e:	e011      	b.n	800b094 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	089b      	lsrs	r3, r3, #2
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 809a 	beq.w	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	0a5b      	lsrs	r3, r3, #9
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	2b00      	cmp	r3, #0
 800b088:	f000 8093 	beq.w	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fbfc 	bl	800b88a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b092:	e08e      	b.n	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800b094:	e08d      	b.n	800b1b2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d004      	beq.n	800b0a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	61fb      	str	r3, [r7, #28]
 800b0a6:	e007      	b.n	800b0b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	085b      	lsrs	r3, r3, #1
 800b0bc:	f003 0301 	and.w	r3, r3, #1
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d012      	beq.n	800b0ea <HAL_I2C_EV_IRQHandler+0x20e>
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	0a5b      	lsrs	r3, r3, #9
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00c      	beq.n	800b0ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800b0e0:	69b9      	ldr	r1, [r7, #24]
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 ffba 	bl	800c05c <I2C_Slave_ADDR>
 800b0e8:	e066      	b.n	800b1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	091b      	lsrs	r3, r3, #4
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d009      	beq.n	800b10a <HAL_I2C_EV_IRQHandler+0x22e>
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	0a5b      	lsrs	r3, r3, #9
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fff4 	bl	800c0f0 <I2C_Slave_STOPF>
 800b108:	e056      	b.n	800b1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b10a:	7bbb      	ldrb	r3, [r7, #14]
 800b10c:	2b21      	cmp	r3, #33	; 0x21
 800b10e:	d002      	beq.n	800b116 <HAL_I2C_EV_IRQHandler+0x23a>
 800b110:	7bbb      	ldrb	r3, [r7, #14]
 800b112:	2b29      	cmp	r3, #41	; 0x29
 800b114:	d125      	bne.n	800b162 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	09db      	lsrs	r3, r3, #7
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00f      	beq.n	800b142 <HAL_I2C_EV_IRQHandler+0x266>
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	0a9b      	lsrs	r3, r3, #10
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d009      	beq.n	800b142 <HAL_I2C_EV_IRQHandler+0x266>
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	089b      	lsrs	r3, r3, #2
 800b132:	f003 0301 	and.w	r3, r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	d103      	bne.n	800b142 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fed0 	bl	800bee0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b140:	e039      	b.n	800b1b6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	089b      	lsrs	r3, r3, #2
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d033      	beq.n	800b1b6 <HAL_I2C_EV_IRQHandler+0x2da>
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	0a5b      	lsrs	r3, r3, #9
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b00      	cmp	r3, #0
 800b158:	d02d      	beq.n	800b1b6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fefd 	bl	800bf5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b160:	e029      	b.n	800b1b6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	099b      	lsrs	r3, r3, #6
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00f      	beq.n	800b18e <HAL_I2C_EV_IRQHandler+0x2b2>
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	0a9b      	lsrs	r3, r3, #10
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	2b00      	cmp	r3, #0
 800b178:	d009      	beq.n	800b18e <HAL_I2C_EV_IRQHandler+0x2b2>
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	089b      	lsrs	r3, r3, #2
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	2b00      	cmp	r3, #0
 800b184:	d103      	bne.n	800b18e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 ff08 	bl	800bf9c <I2C_SlaveReceive_RXNE>
 800b18c:	e014      	b.n	800b1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	089b      	lsrs	r3, r3, #2
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00e      	beq.n	800b1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	0a5b      	lsrs	r3, r3, #9
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d008      	beq.n	800b1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 ff36 	bl	800c018 <I2C_SlaveReceive_BTF>
 800b1ac:	e004      	b.n	800b1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800b1ae:	bf00      	nop
 800b1b0:	e002      	b.n	800b1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b1b2:	bf00      	nop
 800b1b4:	e000      	b.n	800b1b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b1b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800b1b8:	3720      	adds	r7, #32
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b08a      	sub	sp, #40	; 0x28
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	695b      	ldr	r3, [r3, #20]
 800b1cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	0a1b      	lsrs	r3, r3, #8
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00e      	beq.n	800b20c <HAL_I2C_ER_IRQHandler+0x4e>
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	0a1b      	lsrs	r3, r3, #8
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d008      	beq.n	800b20c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fc:	f043 0301 	orr.w	r3, r3, #1
 800b200:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b20a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	0a5b      	lsrs	r3, r3, #9
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00e      	beq.n	800b236 <HAL_I2C_ER_IRQHandler+0x78>
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	0a1b      	lsrs	r3, r3, #8
 800b21c:	f003 0301 	and.w	r3, r3, #1
 800b220:	2b00      	cmp	r3, #0
 800b222:	d008      	beq.n	800b236 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	f043 0302 	orr.w	r3, r3, #2
 800b22a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800b234:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	0a9b      	lsrs	r3, r3, #10
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d03f      	beq.n	800b2c2 <HAL_I2C_ER_IRQHandler+0x104>
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	0a1b      	lsrs	r3, r3, #8
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d039      	beq.n	800b2c2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800b24e:	7efb      	ldrb	r3, [r7, #27]
 800b250:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b256:	b29b      	uxth	r3, r3
 800b258:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b260:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b266:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800b268:	7ebb      	ldrb	r3, [r7, #26]
 800b26a:	2b20      	cmp	r3, #32
 800b26c:	d112      	bne.n	800b294 <HAL_I2C_ER_IRQHandler+0xd6>
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10f      	bne.n	800b294 <HAL_I2C_ER_IRQHandler+0xd6>
 800b274:	7cfb      	ldrb	r3, [r7, #19]
 800b276:	2b21      	cmp	r3, #33	; 0x21
 800b278:	d008      	beq.n	800b28c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800b27a:	7cfb      	ldrb	r3, [r7, #19]
 800b27c:	2b29      	cmp	r3, #41	; 0x29
 800b27e:	d005      	beq.n	800b28c <HAL_I2C_ER_IRQHandler+0xce>
 800b280:	7cfb      	ldrb	r3, [r7, #19]
 800b282:	2b28      	cmp	r3, #40	; 0x28
 800b284:	d106      	bne.n	800b294 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b21      	cmp	r3, #33	; 0x21
 800b28a:	d103      	bne.n	800b294 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f001 f85f 	bl	800c350 <I2C_Slave_AF>
 800b292:	e016      	b.n	800b2c2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b29c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	f043 0304 	orr.w	r3, r3, #4
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800b2a6:	7efb      	ldrb	r3, [r7, #27]
 800b2a8:	2b10      	cmp	r3, #16
 800b2aa:	d002      	beq.n	800b2b2 <HAL_I2C_ER_IRQHandler+0xf4>
 800b2ac:	7efb      	ldrb	r3, [r7, #27]
 800b2ae:	2b40      	cmp	r3, #64	; 0x40
 800b2b0:	d107      	bne.n	800b2c2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b2c2:	6a3b      	ldr	r3, [r7, #32]
 800b2c4:	0adb      	lsrs	r3, r3, #11
 800b2c6:	f003 0301 	and.w	r3, r3, #1
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00e      	beq.n	800b2ec <HAL_I2C_ER_IRQHandler+0x12e>
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	0a1b      	lsrs	r3, r3, #8
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d008      	beq.n	800b2ec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2dc:	f043 0308 	orr.w	r3, r3, #8
 800b2e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800b2ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d008      	beq.n	800b304 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f001 f896 	bl	800c430 <I2C_ITError>
  }
}
 800b304:	bf00      	nop
 800b306:	3728      	adds	r7, #40	; 0x28
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	460b      	mov	r3, r1
 800b366:	70fb      	strb	r3, [r7, #3]
 800b368:	4613      	mov	r3, r2
 800b36a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d150      	bne.n	800b4a4 <I2C_MasterTransmit_TXE+0xc8>
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	2b21      	cmp	r3, #33	; 0x21
 800b406:	d14d      	bne.n	800b4a4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	2b08      	cmp	r3, #8
 800b40c:	d01d      	beq.n	800b44a <I2C_MasterTransmit_TXE+0x6e>
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	2b20      	cmp	r3, #32
 800b412:	d01a      	beq.n	800b44a <I2C_MasterTransmit_TXE+0x6e>
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b41a:	d016      	beq.n	800b44a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b42a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2211      	movs	r2, #17
 800b430:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff ff62 	bl	800b30c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b448:	e060      	b.n	800b50c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	685a      	ldr	r2, [r3, #4]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b458:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b468:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2220      	movs	r2, #32
 800b474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b40      	cmp	r3, #64	; 0x40
 800b482:	d107      	bne.n	800b494 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff ff7d 	bl	800b38c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b492:	e03b      	b.n	800b50c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7ff ff35 	bl	800b30c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b4a2:	e033      	b.n	800b50c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
 800b4a6:	2b21      	cmp	r3, #33	; 0x21
 800b4a8:	d005      	beq.n	800b4b6 <I2C_MasterTransmit_TXE+0xda>
 800b4aa:	7bbb      	ldrb	r3, [r7, #14]
 800b4ac:	2b40      	cmp	r3, #64	; 0x40
 800b4ae:	d12d      	bne.n	800b50c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	2b22      	cmp	r3, #34	; 0x22
 800b4b4:	d12a      	bne.n	800b50c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d108      	bne.n	800b4d2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	685a      	ldr	r2, [r3, #4]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4ce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800b4d0:	e01c      	b.n	800b50c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b40      	cmp	r3, #64	; 0x40
 800b4dc:	d103      	bne.n	800b4e6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f88e 	bl	800b600 <I2C_MemoryTransmit_TXE_BTF>
}
 800b4e4:	e012      	b.n	800b50c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ea:	781a      	ldrb	r2, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f6:	1c5a      	adds	r2, r3, #1
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b500:	b29b      	uxth	r3, r3
 800b502:	3b01      	subs	r3, #1
 800b504:	b29a      	uxth	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b50a:	e7ff      	b.n	800b50c <I2C_MasterTransmit_TXE+0x130>
 800b50c:	bf00      	nop
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b520:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b21      	cmp	r3, #33	; 0x21
 800b52c:	d164      	bne.n	800b5f8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b532:	b29b      	uxth	r3, r3
 800b534:	2b00      	cmp	r3, #0
 800b536:	d012      	beq.n	800b55e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	781a      	ldrb	r2, [r3, #0]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b552:	b29b      	uxth	r3, r3
 800b554:	3b01      	subs	r3, #1
 800b556:	b29a      	uxth	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800b55c:	e04c      	b.n	800b5f8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b08      	cmp	r3, #8
 800b562:	d01d      	beq.n	800b5a0 <I2C_MasterTransmit_BTF+0x8c>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b20      	cmp	r3, #32
 800b568:	d01a      	beq.n	800b5a0 <I2C_MasterTransmit_BTF+0x8c>
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b570:	d016      	beq.n	800b5a0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b580:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2211      	movs	r2, #17
 800b586:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7ff feb7 	bl	800b30c <HAL_I2C_MasterTxCpltCallback>
}
 800b59e:	e02b      	b.n	800b5f8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b5ae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5be:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b40      	cmp	r3, #64	; 0x40
 800b5d8:	d107      	bne.n	800b5ea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7ff fed2 	bl	800b38c <HAL_I2C_MemTxCpltCallback>
}
 800b5e8:	e006      	b.n	800b5f8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff fe8a 	bl	800b30c <HAL_I2C_MasterTxCpltCallback>
}
 800b5f8:	bf00      	nop
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b60e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b614:	2b00      	cmp	r3, #0
 800b616:	d11d      	bne.n	800b654 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d10b      	bne.n	800b638 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b624:	b2da      	uxtb	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b630:	1c9a      	adds	r2, r3, #2
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800b636:	e073      	b.n	800b720 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	121b      	asrs	r3, r3, #8
 800b640:	b2da      	uxtb	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b64c:	1c5a      	adds	r2, r3, #1
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b652:	e065      	b.n	800b720 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d10b      	bne.n	800b674 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b660:	b2da      	uxtb	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66c:	1c5a      	adds	r2, r3, #1
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b672:	e055      	b.n	800b720 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d151      	bne.n	800b720 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	2b22      	cmp	r3, #34	; 0x22
 800b680:	d10d      	bne.n	800b69e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b690:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b69c:	e040      	b.n	800b720 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d015      	beq.n	800b6d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
 800b6aa:	2b21      	cmp	r3, #33	; 0x21
 800b6ac:	d112      	bne.n	800b6d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b2:	781a      	ldrb	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6be:	1c5a      	adds	r2, r3, #1
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b6d2:	e025      	b.n	800b720 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d120      	bne.n	800b720 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800b6de:	7bfb      	ldrb	r3, [r7, #15]
 800b6e0:	2b21      	cmp	r3, #33	; 0x21
 800b6e2:	d11d      	bne.n	800b720 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b6f2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b702:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2220      	movs	r2, #32
 800b70e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7ff fe36 	bl	800b38c <HAL_I2C_MemTxCpltCallback>
}
 800b720:	bf00      	nop
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b736:	b2db      	uxtb	r3, r3
 800b738:	2b22      	cmp	r3, #34	; 0x22
 800b73a:	f040 80a2 	bne.w	800b882 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b742:	b29b      	uxth	r3, r3
 800b744:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d921      	bls.n	800b790 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	691a      	ldr	r2, [r3, #16]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	b2d2      	uxtb	r2, r2
 800b758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b768:	b29b      	uxth	r3, r3
 800b76a:	3b01      	subs	r3, #1
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b776:	b29b      	uxth	r3, r3
 800b778:	2b03      	cmp	r3, #3
 800b77a:	f040 8082 	bne.w	800b882 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	685a      	ldr	r2, [r3, #4]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b78c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800b78e:	e078      	b.n	800b882 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b794:	2b02      	cmp	r3, #2
 800b796:	d074      	beq.n	800b882 <I2C_MasterReceive_RXNE+0x15a>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d002      	beq.n	800b7a4 <I2C_MasterReceive_RXNE+0x7c>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d16e      	bne.n	800b882 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f001 fc43 	bl	800d030 <I2C_WaitOnSTOPRequestThroughIT>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d142      	bne.n	800b836 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7be:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b7ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	691a      	ldr	r2, [r3, #16]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	b2d2      	uxtb	r2, r2
 800b7dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2220      	movs	r2, #32
 800b7fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b40      	cmp	r3, #64	; 0x40
 800b808:	d10a      	bne.n	800b820 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7ff fdc1 	bl	800b3a0 <HAL_I2C_MemRxCpltCallback>
}
 800b81e:	e030      	b.n	800b882 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2212      	movs	r2, #18
 800b82c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f7ff fd76 	bl	800b320 <HAL_I2C_MasterRxCpltCallback>
}
 800b834:	e025      	b.n	800b882 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b844:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	691a      	ldr	r2, [r3, #16]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b850:	b2d2      	uxtb	r2, r2
 800b852:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b862:	b29b      	uxth	r3, r3
 800b864:	3b01      	subs	r3, #1
 800b866:	b29a      	uxth	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2220      	movs	r2, #32
 800b870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff fd99 	bl	800b3b4 <HAL_I2C_ErrorCallback>
}
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b084      	sub	sp, #16
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b896:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	2b04      	cmp	r3, #4
 800b8a0:	d11b      	bne.n	800b8da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	685a      	ldr	r2, [r3, #4]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	691a      	ldr	r2, [r3, #16]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	b2d2      	uxtb	r2, r2
 800b8be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c4:	1c5a      	adds	r2, r3, #1
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800b8d8:	e0bd      	b.n	800ba56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	2b03      	cmp	r3, #3
 800b8e2:	d129      	bne.n	800b938 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b04      	cmp	r3, #4
 800b8f8:	d00a      	beq.n	800b910 <I2C_MasterReceive_BTF+0x86>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d007      	beq.n	800b910 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b90e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	691a      	ldr	r2, [r3, #16]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91a:	b2d2      	uxtb	r2, r2
 800b91c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b922:	1c5a      	adds	r2, r3, #1
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	3b01      	subs	r3, #1
 800b930:	b29a      	uxth	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b936:	e08e      	b.n	800ba56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d176      	bne.n	800ba30 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d002      	beq.n	800b94e <I2C_MasterReceive_BTF+0xc4>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b10      	cmp	r3, #16
 800b94c:	d108      	bne.n	800b960 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	e019      	b.n	800b994 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2b04      	cmp	r3, #4
 800b964:	d002      	beq.n	800b96c <I2C_MasterReceive_BTF+0xe2>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d108      	bne.n	800b97e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b97a:	601a      	str	r2, [r3, #0]
 800b97c:	e00a      	b.n	800b994 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2b10      	cmp	r3, #16
 800b982:	d007      	beq.n	800b994 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b992:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	691a      	ldr	r2, [r3, #16]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99e:	b2d2      	uxtb	r2, r2
 800b9a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	691a      	ldr	r2, [r3, #16]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	b2d2      	uxtb	r2, r2
 800b9c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b9ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	2b40      	cmp	r3, #64	; 0x40
 800ba02:	d10a      	bne.n	800ba1a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fcc4 	bl	800b3a0 <HAL_I2C_MemRxCpltCallback>
}
 800ba18:	e01d      	b.n	800ba56 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2212      	movs	r2, #18
 800ba26:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff fc79 	bl	800b320 <HAL_I2C_MasterRxCpltCallback>
}
 800ba2e:	e012      	b.n	800ba56 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	691a      	ldr	r2, [r3, #16]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3a:	b2d2      	uxtb	r2, r2
 800ba3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ba56:	bf00      	nop
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b083      	sub	sp, #12
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b40      	cmp	r3, #64	; 0x40
 800ba70:	d117      	bne.n	800baa2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d109      	bne.n	800ba8e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	461a      	mov	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ba8a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800ba8c:	e067      	b.n	800bb5e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f043 0301 	orr.w	r3, r3, #1
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	611a      	str	r2, [r3, #16]
}
 800baa0:	e05d      	b.n	800bb5e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800baaa:	d133      	bne.n	800bb14 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	2b21      	cmp	r3, #33	; 0x21
 800bab6:	d109      	bne.n	800bacc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800babc:	b2db      	uxtb	r3, r3
 800babe:	461a      	mov	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bac8:	611a      	str	r2, [r3, #16]
 800baca:	e008      	b.n	800bade <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	f043 0301 	orr.w	r3, r3, #1
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d004      	beq.n	800baf0 <I2C_Master_SB+0x92>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baec:	2b00      	cmp	r3, #0
 800baee:	d108      	bne.n	800bb02 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d032      	beq.n	800bb5e <I2C_Master_SB+0x100>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d02d      	beq.n	800bb5e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb10:	605a      	str	r2, [r3, #4]
}
 800bb12:	e024      	b.n	800bb5e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10e      	bne.n	800bb3a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	11db      	asrs	r3, r3, #7
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	f003 0306 	and.w	r3, r3, #6
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	f063 030f 	orn	r3, r3, #15
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	611a      	str	r2, [r3, #16]
}
 800bb38:	e011      	b.n	800bb5e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d10d      	bne.n	800bb5e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	11db      	asrs	r3, r3, #7
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	f003 0306 	and.w	r3, r3, #6
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	f063 030e 	orn	r3, r3, #14
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	611a      	str	r2, [r3, #16]
}
 800bb5e:	bf00      	nop
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b083      	sub	sp, #12
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d004      	beq.n	800bb90 <I2C_Master_ADD10+0x26>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d108      	bne.n	800bba2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00c      	beq.n	800bbb2 <I2C_Master_ADD10+0x48>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d007      	beq.n	800bbb2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbb0:	605a      	str	r2, [r3, #4]
  }
}
 800bbb2:	bf00      	nop
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b091      	sub	sp, #68	; 0x44
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbda:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2b22      	cmp	r3, #34	; 0x22
 800bbe6:	f040 8169 	bne.w	800bebc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10f      	bne.n	800bc12 <I2C_Master_ADDR+0x54>
 800bbf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bbf6:	2b40      	cmp	r3, #64	; 0x40
 800bbf8:	d10b      	bne.n	800bc12 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	633b      	str	r3, [r7, #48]	; 0x30
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	695b      	ldr	r3, [r3, #20]
 800bc04:	633b      	str	r3, [r7, #48]	; 0x30
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	633b      	str	r3, [r7, #48]	; 0x30
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	e160      	b.n	800bed4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d11d      	bne.n	800bc56 <I2C_Master_ADDR+0x98>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bc22:	d118      	bne.n	800bc56 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc24:	2300      	movs	r3, #0
 800bc26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc48:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	651a      	str	r2, [r3, #80]	; 0x50
 800bc54:	e13e      	b.n	800bed4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d113      	bne.n	800bc88 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc60:	2300      	movs	r3, #0
 800bc62:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc84:	601a      	str	r2, [r3, #0]
 800bc86:	e115      	b.n	800beb4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	f040 808a 	bne.w	800bda8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800bc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc9a:	d137      	bne.n	800bd0c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcaa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcba:	d113      	bne.n	800bce4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bccc:	2300      	movs	r3, #0
 800bcce:	627b      	str	r3, [r7, #36]	; 0x24
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	695b      	ldr	r3, [r3, #20]
 800bcd6:	627b      	str	r3, [r7, #36]	; 0x24
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	699b      	ldr	r3, [r3, #24]
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	e0e7      	b.n	800beb4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bce4:	2300      	movs	r3, #0
 800bce6:	623b      	str	r3, [r7, #32]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	695b      	ldr	r3, [r3, #20]
 800bcee:	623b      	str	r3, [r7, #32]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	623b      	str	r3, [r7, #32]
 800bcf8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd08:	601a      	str	r2, [r3, #0]
 800bd0a:	e0d3      	b.n	800beb4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0e:	2b08      	cmp	r3, #8
 800bd10:	d02e      	beq.n	800bd70 <I2C_Master_ADDR+0x1b2>
 800bd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	d02b      	beq.n	800bd70 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800bd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd1a:	2b12      	cmp	r3, #18
 800bd1c:	d102      	bne.n	800bd24 <I2C_Master_ADDR+0x166>
 800bd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d125      	bne.n	800bd70 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800bd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd26:	2b04      	cmp	r3, #4
 800bd28:	d00e      	beq.n	800bd48 <I2C_Master_ADDR+0x18a>
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d00b      	beq.n	800bd48 <I2C_Master_ADDR+0x18a>
 800bd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd32:	2b10      	cmp	r3, #16
 800bd34:	d008      	beq.n	800bd48 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	e007      	b.n	800bd58 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd56:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd58:	2300      	movs	r3, #0
 800bd5a:	61fb      	str	r3, [r7, #28]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	61fb      	str	r3, [r7, #28]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	61fb      	str	r3, [r7, #28]
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	e0a1      	b.n	800beb4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd7e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd80:	2300      	movs	r3, #0
 800bd82:	61bb      	str	r3, [r7, #24]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	61bb      	str	r3, [r7, #24]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	61bb      	str	r3, [r7, #24]
 800bd94:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bda4:	601a      	str	r2, [r3, #0]
 800bda6:	e085      	b.n	800beb4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d14d      	bne.n	800be4e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800bdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	d016      	beq.n	800bde6 <I2C_Master_ADDR+0x228>
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	d013      	beq.n	800bde6 <I2C_Master_ADDR+0x228>
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc0:	2b10      	cmp	r3, #16
 800bdc2:	d010      	beq.n	800bde6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdd2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	e007      	b.n	800bdf6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bdf4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be04:	d117      	bne.n	800be36 <I2C_Master_ADDR+0x278>
 800be06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be0c:	d00b      	beq.n	800be26 <I2C_Master_ADDR+0x268>
 800be0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be10:	2b01      	cmp	r3, #1
 800be12:	d008      	beq.n	800be26 <I2C_Master_ADDR+0x268>
 800be14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be16:	2b08      	cmp	r3, #8
 800be18:	d005      	beq.n	800be26 <I2C_Master_ADDR+0x268>
 800be1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1c:	2b10      	cmp	r3, #16
 800be1e:	d002      	beq.n	800be26 <I2C_Master_ADDR+0x268>
 800be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be22:	2b20      	cmp	r3, #32
 800be24:	d107      	bne.n	800be36 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be36:	2300      	movs	r3, #0
 800be38:	617b      	str	r3, [r7, #20]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	617b      	str	r3, [r7, #20]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	699b      	ldr	r3, [r3, #24]
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	e032      	b.n	800beb4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be5c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be6c:	d117      	bne.n	800be9e <I2C_Master_ADDR+0x2e0>
 800be6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be74:	d00b      	beq.n	800be8e <I2C_Master_ADDR+0x2d0>
 800be76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d008      	beq.n	800be8e <I2C_Master_ADDR+0x2d0>
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	2b08      	cmp	r3, #8
 800be80:	d005      	beq.n	800be8e <I2C_Master_ADDR+0x2d0>
 800be82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be84:	2b10      	cmp	r3, #16
 800be86:	d002      	beq.n	800be8e <I2C_Master_ADDR+0x2d0>
 800be88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	d107      	bne.n	800be9e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be9e:	2300      	movs	r3, #0
 800bea0:	613b      	str	r3, [r7, #16]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	695b      	ldr	r3, [r3, #20]
 800bea8:	613b      	str	r3, [r7, #16]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	613b      	str	r3, [r7, #16]
 800beb2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800beba:	e00b      	b.n	800bed4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bebc:	2300      	movs	r3, #0
 800bebe:	60fb      	str	r3, [r7, #12]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	699b      	ldr	r3, [r3, #24]
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	68fb      	ldr	r3, [r7, #12]
}
 800bed2:	e7ff      	b.n	800bed4 <I2C_Master_ADDR+0x316>
 800bed4:	bf00      	nop
 800bed6:	3744      	adds	r7, #68	; 0x44
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800beee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d02b      	beq.n	800bf52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	781a      	ldrb	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0a:	1c5a      	adds	r2, r3, #1
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	3b01      	subs	r3, #1
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d114      	bne.n	800bf52 <I2C_SlaveTransmit_TXE+0x72>
 800bf28:	7bfb      	ldrb	r3, [r7, #15]
 800bf2a:	2b29      	cmp	r3, #41	; 0x29
 800bf2c:	d111      	bne.n	800bf52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2221      	movs	r2, #33	; 0x21
 800bf42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2228      	movs	r2, #40	; 0x28
 800bf48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff f9f1 	bl	800b334 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d011      	beq.n	800bf90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf70:	781a      	ldrb	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7c:	1c5a      	adds	r2, r3, #1
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfaa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d02c      	beq.n	800c010 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	691a      	ldr	r2, [r3, #16]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc0:	b2d2      	uxtb	r2, r2
 800bfc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc8:	1c5a      	adds	r2, r3, #1
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d114      	bne.n	800c010 <I2C_SlaveReceive_RXNE+0x74>
 800bfe6:	7bfb      	ldrb	r3, [r7, #15]
 800bfe8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfea:	d111      	bne.n	800c010 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bffa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2222      	movs	r2, #34	; 0x22
 800c000:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2228      	movs	r2, #40	; 0x28
 800c006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7ff f99c 	bl	800b348 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c010:	bf00      	nop
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c024:	b29b      	uxth	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d012      	beq.n	800c050 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	691a      	ldr	r2, [r3, #16]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	b2d2      	uxtb	r2, r2
 800c036:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c046:	b29b      	uxth	r3, r3
 800c048:	3b01      	subs	r3, #1
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800c066:	2300      	movs	r3, #0
 800c068:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c070:	b2db      	uxtb	r3, r3
 800c072:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c076:	2b28      	cmp	r3, #40	; 0x28
 800c078:	d127      	bne.n	800c0ca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	685a      	ldr	r2, [r3, #4]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c088:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	089b      	lsrs	r3, r3, #2
 800c08e:	f003 0301 	and.w	r3, r3, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800c096:	2301      	movs	r3, #1
 800c098:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	09db      	lsrs	r3, r3, #7
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d103      	bne.n	800c0ae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	81bb      	strh	r3, [r7, #12]
 800c0ac:	e002      	b.n	800c0b4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	699b      	ldr	r3, [r3, #24]
 800c0b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800c0bc:	89ba      	ldrh	r2, [r7, #12]
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7ff f94a 	bl	800b35c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c0c8:	e00e      	b.n	800c0e8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60bb      	str	r3, [r7, #8]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	695b      	ldr	r3, [r3, #20]
 800c0d4:	60bb      	str	r3, [r7, #8]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	60bb      	str	r3, [r7, #8]
 800c0de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800c0e8:	bf00      	nop
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c10e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800c110:	2300      	movs	r3, #0
 800c112:	60bb      	str	r3, [r7, #8]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	60bb      	str	r3, [r7, #8]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f042 0201 	orr.w	r2, r2, #1
 800c12a:	601a      	str	r2, [r3, #0]
 800c12c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c13c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c14c:	d172      	bne.n	800c234 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c14e:	7bfb      	ldrb	r3, [r7, #15]
 800c150:	2b22      	cmp	r3, #34	; 0x22
 800c152:	d002      	beq.n	800c15a <I2C_Slave_STOPF+0x6a>
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	2b2a      	cmp	r3, #42	; 0x2a
 800c158:	d135      	bne.n	800c1c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	b29a      	uxth	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d005      	beq.n	800c17e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c176:	f043 0204 	orr.w	r2, r3, #4
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	685a      	ldr	r2, [r3, #4]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c18c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c192:	4618      	mov	r0, r3
 800c194:	f7fd fc44 	bl	8009a20 <HAL_DMA_GetState>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d049      	beq.n	800c232 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a2:	4a69      	ldr	r2, [pc, #420]	; (800c348 <I2C_Slave_STOPF+0x258>)
 800c1a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fd fa8c 	bl	80096c8 <HAL_DMA_Abort_IT>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d03d      	beq.n	800c232 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c1c4:	e035      	b.n	800c232 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d005      	beq.n	800c1ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e2:	f043 0204 	orr.w	r2, r3, #4
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	685a      	ldr	r2, [r3, #4]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fd fc0e 	bl	8009a20 <HAL_DMA_GetState>
 800c204:	4603      	mov	r3, r0
 800c206:	2b01      	cmp	r3, #1
 800c208:	d014      	beq.n	800c234 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c20e:	4a4e      	ldr	r2, [pc, #312]	; (800c348 <I2C_Slave_STOPF+0x258>)
 800c210:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c216:	4618      	mov	r0, r3
 800c218:	f7fd fa56 	bl	80096c8 <HAL_DMA_Abort_IT>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d008      	beq.n	800c234 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	e000      	b.n	800c234 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c232:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c238:	b29b      	uxth	r3, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d03e      	beq.n	800c2bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	f003 0304 	and.w	r3, r3, #4
 800c248:	2b04      	cmp	r3, #4
 800c24a:	d112      	bne.n	800c272 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	691a      	ldr	r2, [r3, #16]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c268:	b29b      	uxth	r3, r3
 800c26a:	3b01      	subs	r3, #1
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27c:	2b40      	cmp	r3, #64	; 0x40
 800c27e:	d112      	bne.n	800c2a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	691a      	ldr	r2, [r3, #16]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28a:	b2d2      	uxtb	r2, r2
 800c28c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c292:	1c5a      	adds	r2, r3, #1
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d005      	beq.n	800c2bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b4:	f043 0204 	orr.w	r2, r3, #4
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d003      	beq.n	800c2cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f8b3 	bl	800c430 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800c2ca:	e039      	b.n	800c340 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c2d0:	d109      	bne.n	800c2e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2228      	movs	r2, #40	; 0x28
 800c2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7ff f831 	bl	800b348 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	2b28      	cmp	r3, #40	; 0x28
 800c2f0:	d111      	bne.n	800c316 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a15      	ldr	r2, [pc, #84]	; (800c34c <I2C_Slave_STOPF+0x25c>)
 800c2f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2220      	movs	r2, #32
 800c302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff f832 	bl	800b378 <HAL_I2C_ListenCpltCallback>
}
 800c314:	e014      	b.n	800c340 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31a:	2b22      	cmp	r3, #34	; 0x22
 800c31c:	d002      	beq.n	800c324 <I2C_Slave_STOPF+0x234>
 800c31e:	7bfb      	ldrb	r3, [r7, #15]
 800c320:	2b22      	cmp	r3, #34	; 0x22
 800c322:	d10d      	bne.n	800c340 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2220      	movs	r2, #32
 800c32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff f804 	bl	800b348 <HAL_I2C_SlaveRxCpltCallback>
}
 800c340:	bf00      	nop
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	0800cc31 	.word	0x0800cc31
 800c34c:	ffff0000 	.word	0xffff0000

0800c350 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c35e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c364:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2b08      	cmp	r3, #8
 800c36a:	d002      	beq.n	800c372 <I2C_Slave_AF+0x22>
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2b20      	cmp	r3, #32
 800c370:	d129      	bne.n	800c3c6 <I2C_Slave_AF+0x76>
 800c372:	7bfb      	ldrb	r3, [r7, #15]
 800c374:	2b28      	cmp	r3, #40	; 0x28
 800c376:	d126      	bne.n	800c3c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a2c      	ldr	r2, [pc, #176]	; (800c42c <I2C_Slave_AF+0xdc>)
 800c37c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	685a      	ldr	r2, [r3, #4]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c38c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c396:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2220      	movs	r2, #32
 800c3b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7fe ffda 	bl	800b378 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800c3c4:	e02e      	b.n	800c424 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
 800c3c8:	2b21      	cmp	r3, #33	; 0x21
 800c3ca:	d126      	bne.n	800c41a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a17      	ldr	r2, [pc, #92]	; (800c42c <I2C_Slave_AF+0xdc>)
 800c3d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2221      	movs	r2, #33	; 0x21
 800c3d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2220      	movs	r2, #32
 800c3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	685a      	ldr	r2, [r3, #4]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c3f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c400:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c410:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7fe ff8e 	bl	800b334 <HAL_I2C_SlaveTxCpltCallback>
}
 800c418:	e004      	b.n	800c424 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c422:	615a      	str	r2, [r3, #20]
}
 800c424:	bf00      	nop
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	ffff0000 	.word	0xffff0000

0800c430 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c43e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c446:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c448:	7bbb      	ldrb	r3, [r7, #14]
 800c44a:	2b10      	cmp	r3, #16
 800c44c:	d002      	beq.n	800c454 <I2C_ITError+0x24>
 800c44e:	7bbb      	ldrb	r3, [r7, #14]
 800c450:	2b40      	cmp	r3, #64	; 0x40
 800c452:	d10a      	bne.n	800c46a <I2C_ITError+0x3a>
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	2b22      	cmp	r3, #34	; 0x22
 800c458:	d107      	bne.n	800c46a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c468:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c46a:	7bfb      	ldrb	r3, [r7, #15]
 800c46c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c470:	2b28      	cmp	r3, #40	; 0x28
 800c472:	d107      	bne.n	800c484 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2228      	movs	r2, #40	; 0x28
 800c47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c482:	e015      	b.n	800c4b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c48e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c492:	d00a      	beq.n	800c4aa <I2C_ITError+0x7a>
 800c494:	7bfb      	ldrb	r3, [r7, #15]
 800c496:	2b60      	cmp	r3, #96	; 0x60
 800c498:	d007      	beq.n	800c4aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2220      	movs	r2, #32
 800c49e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4be:	d162      	bne.n	800c586 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	685a      	ldr	r2, [r3, #4]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c4ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d020      	beq.n	800c520 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e2:	4a6a      	ldr	r2, [pc, #424]	; (800c68c <I2C_ITError+0x25c>)
 800c4e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fd f8ec 	bl	80096c8 <HAL_DMA_Abort_IT>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f000 8089 	beq.w	800c60a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f022 0201 	bic.w	r2, r2, #1
 800c506:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2220      	movs	r2, #32
 800c50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c51a:	4610      	mov	r0, r2
 800c51c:	4798      	blx	r3
 800c51e:	e074      	b.n	800c60a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c524:	4a59      	ldr	r2, [pc, #356]	; (800c68c <I2C_ITError+0x25c>)
 800c526:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fd f8cb 	bl	80096c8 <HAL_DMA_Abort_IT>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d068      	beq.n	800c60a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	695b      	ldr	r3, [r3, #20]
 800c53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c542:	2b40      	cmp	r3, #64	; 0x40
 800c544:	d10b      	bne.n	800c55e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	691a      	ldr	r2, [r3, #16]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c550:	b2d2      	uxtb	r2, r2
 800c552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c558:	1c5a      	adds	r2, r3, #1
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f022 0201 	bic.w	r2, r2, #1
 800c56c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2220      	movs	r2, #32
 800c572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c580:	4610      	mov	r0, r2
 800c582:	4798      	blx	r3
 800c584:	e041      	b.n	800c60a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b60      	cmp	r3, #96	; 0x60
 800c590:	d125      	bne.n	800c5de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2220      	movs	r2, #32
 800c596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	695b      	ldr	r3, [r3, #20]
 800c5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5aa:	2b40      	cmp	r3, #64	; 0x40
 800c5ac:	d10b      	bne.n	800c5c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	691a      	ldr	r2, [r3, #16]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b8:	b2d2      	uxtb	r2, r2
 800c5ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c0:	1c5a      	adds	r2, r3, #1
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f022 0201 	bic.w	r2, r2, #1
 800c5d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7fe fef6 	bl	800b3c8 <HAL_I2C_AbortCpltCallback>
 800c5dc:	e015      	b.n	800c60a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e8:	2b40      	cmp	r3, #64	; 0x40
 800c5ea:	d10b      	bne.n	800c604 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	691a      	ldr	r2, [r3, #16]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f6:	b2d2      	uxtb	r2, r2
 800c5f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7fe fed5 	bl	800b3b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10e      	bne.n	800c638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c620:	2b00      	cmp	r3, #0
 800c622:	d109      	bne.n	800c638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d104      	bne.n	800c638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c634:	2b00      	cmp	r3, #0
 800c636:	d007      	beq.n	800c648 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c646:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c64e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c654:	f003 0304 	and.w	r3, r3, #4
 800c658:	2b04      	cmp	r3, #4
 800c65a:	d113      	bne.n	800c684 <I2C_ITError+0x254>
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
 800c65e:	2b28      	cmp	r3, #40	; 0x28
 800c660:	d110      	bne.n	800c684 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a0a      	ldr	r2, [pc, #40]	; (800c690 <I2C_ITError+0x260>)
 800c666:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2220      	movs	r2, #32
 800c672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7fe fe7a 	bl	800b378 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c684:	bf00      	nop
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	0800cc31 	.word	0x0800cc31
 800c690:	ffff0000 	.word	0xffff0000

0800c694 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b088      	sub	sp, #32
 800c698:	af02      	add	r7, sp, #8
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	607a      	str	r2, [r7, #4]
 800c69e:	603b      	str	r3, [r7, #0]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	2b08      	cmp	r3, #8
 800c6ae:	d006      	beq.n	800c6be <I2C_MasterRequestWrite+0x2a>
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d003      	beq.n	800c6be <I2C_MasterRequestWrite+0x2a>
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c6bc:	d108      	bne.n	800c6d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c6cc:	601a      	str	r2, [r3, #0]
 800c6ce:	e00b      	b.n	800c6e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d4:	2b12      	cmp	r3, #18
 800c6d6:	d107      	bne.n	800c6e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c6e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 fb43 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00d      	beq.n	800c71c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c70e:	d103      	bne.n	800c718 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c718:	2303      	movs	r3, #3
 800c71a:	e035      	b.n	800c788 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c724:	d108      	bne.n	800c738 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c726:	897b      	ldrh	r3, [r7, #10]
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	461a      	mov	r2, r3
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c734:	611a      	str	r2, [r3, #16]
 800c736:	e01b      	b.n	800c770 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c738:	897b      	ldrh	r3, [r7, #10]
 800c73a:	11db      	asrs	r3, r3, #7
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	f003 0306 	and.w	r3, r3, #6
 800c742:	b2db      	uxtb	r3, r3
 800c744:	f063 030f 	orn	r3, r3, #15
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	490e      	ldr	r1, [pc, #56]	; (800c790 <I2C_MasterRequestWrite+0xfc>)
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f000 fb69 	bl	800ce2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d001      	beq.n	800c766 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	e010      	b.n	800c788 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c766:	897b      	ldrh	r3, [r7, #10]
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	4907      	ldr	r1, [pc, #28]	; (800c794 <I2C_MasterRequestWrite+0x100>)
 800c776:	68f8      	ldr	r0, [r7, #12]
 800c778:	f000 fb59 	bl	800ce2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	e000      	b.n	800c788 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	00010008 	.word	0x00010008
 800c794:	00010002 	.word	0x00010002

0800c798 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b088      	sub	sp, #32
 800c79c:	af02      	add	r7, sp, #8
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	607a      	str	r2, [r7, #4]
 800c7a2:	603b      	str	r3, [r7, #0]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c7bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2b08      	cmp	r3, #8
 800c7c2:	d006      	beq.n	800c7d2 <I2C_MasterRequestRead+0x3a>
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d003      	beq.n	800c7d2 <I2C_MasterRequestRead+0x3a>
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c7d0:	d108      	bne.n	800c7e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7e0:	601a      	str	r2, [r3, #0]
 800c7e2:	e00b      	b.n	800c7fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e8:	2b11      	cmp	r3, #17
 800c7ea:	d107      	bne.n	800c7fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f000 fab9 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00d      	beq.n	800c830 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c81e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c822:	d103      	bne.n	800c82c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c82a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	e079      	b.n	800c924 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c838:	d108      	bne.n	800c84c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c83a:	897b      	ldrh	r3, [r7, #10]
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	f043 0301 	orr.w	r3, r3, #1
 800c842:	b2da      	uxtb	r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	611a      	str	r2, [r3, #16]
 800c84a:	e05f      	b.n	800c90c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c84c:	897b      	ldrh	r3, [r7, #10]
 800c84e:	11db      	asrs	r3, r3, #7
 800c850:	b2db      	uxtb	r3, r3
 800c852:	f003 0306 	and.w	r3, r3, #6
 800c856:	b2db      	uxtb	r3, r3
 800c858:	f063 030f 	orn	r3, r3, #15
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	4930      	ldr	r1, [pc, #192]	; (800c92c <I2C_MasterRequestRead+0x194>)
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 fadf 	bl	800ce2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d001      	beq.n	800c87a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800c876:	2301      	movs	r3, #1
 800c878:	e054      	b.n	800c924 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c87a:	897b      	ldrh	r3, [r7, #10]
 800c87c:	b2da      	uxtb	r2, r3
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	4929      	ldr	r1, [pc, #164]	; (800c930 <I2C_MasterRequestRead+0x198>)
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f000 facf 	bl	800ce2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	e044      	b.n	800c924 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c89a:	2300      	movs	r3, #0
 800c89c:	613b      	str	r3, [r7, #16]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	613b      	str	r3, [r7, #16]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	613b      	str	r3, [r7, #16]
 800c8ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c8be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f000 fa57 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00d      	beq.n	800c8f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8e6:	d103      	bne.n	800c8f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	e017      	b.n	800c924 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800c8f4:	897b      	ldrh	r3, [r7, #10]
 800c8f6:	11db      	asrs	r3, r3, #7
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	f003 0306 	and.w	r3, r3, #6
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	f063 030e 	orn	r3, r3, #14
 800c904:	b2da      	uxtb	r2, r3
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	4907      	ldr	r1, [pc, #28]	; (800c930 <I2C_MasterRequestRead+0x198>)
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f000 fa8b 	bl	800ce2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e000      	b.n	800c924 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3718      	adds	r7, #24
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	00010008 	.word	0x00010008
 800c930:	00010002 	.word	0x00010002

0800c934 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b088      	sub	sp, #32
 800c938:	af02      	add	r7, sp, #8
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	4608      	mov	r0, r1
 800c93e:	4611      	mov	r1, r2
 800c940:	461a      	mov	r2, r3
 800c942:	4603      	mov	r3, r0
 800c944:	817b      	strh	r3, [r7, #10]
 800c946:	460b      	mov	r3, r1
 800c948:	813b      	strh	r3, [r7, #8]
 800c94a:	4613      	mov	r3, r2
 800c94c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c95c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	6a3b      	ldr	r3, [r7, #32]
 800c964:	2200      	movs	r2, #0
 800c966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f000 fa08 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00d      	beq.n	800c992 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c984:	d103      	bne.n	800c98e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c98c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c98e:	2303      	movs	r3, #3
 800c990:	e05f      	b.n	800ca52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c992:	897b      	ldrh	r3, [r7, #10]
 800c994:	b2db      	uxtb	r3, r3
 800c996:	461a      	mov	r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c9a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a4:	6a3a      	ldr	r2, [r7, #32]
 800c9a6:	492d      	ldr	r1, [pc, #180]	; (800ca5c <I2C_RequestMemoryWrite+0x128>)
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f000 fa40 	bl	800ce2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d001      	beq.n	800c9b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e04c      	b.n	800ca52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	617b      	str	r3, [r7, #20]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	695b      	ldr	r3, [r3, #20]
 800c9c2:	617b      	str	r3, [r7, #20]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	699b      	ldr	r3, [r3, #24]
 800c9ca:	617b      	str	r3, [r7, #20]
 800c9cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9d0:	6a39      	ldr	r1, [r7, #32]
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f000 faaa 	bl	800cf2c <I2C_WaitOnTXEFlagUntilTimeout>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00d      	beq.n	800c9fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e2:	2b04      	cmp	r3, #4
 800c9e4:	d107      	bne.n	800c9f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e02b      	b.n	800ca52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c9fa:	88fb      	ldrh	r3, [r7, #6]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d105      	bne.n	800ca0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ca00:	893b      	ldrh	r3, [r7, #8]
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	611a      	str	r2, [r3, #16]
 800ca0a:	e021      	b.n	800ca50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ca0c:	893b      	ldrh	r3, [r7, #8]
 800ca0e:	0a1b      	lsrs	r3, r3, #8
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca1c:	6a39      	ldr	r1, [r7, #32]
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f000 fa84 	bl	800cf2c <I2C_WaitOnTXEFlagUntilTimeout>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00d      	beq.n	800ca46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2e:	2b04      	cmp	r3, #4
 800ca30:	d107      	bne.n	800ca42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e005      	b.n	800ca52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ca46:	893b      	ldrh	r3, [r7, #8]
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3718      	adds	r7, #24
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	00010002 	.word	0x00010002

0800ca60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b088      	sub	sp, #32
 800ca64:	af02      	add	r7, sp, #8
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	4608      	mov	r0, r1
 800ca6a:	4611      	mov	r1, r2
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	4603      	mov	r3, r0
 800ca70:	817b      	strh	r3, [r7, #10]
 800ca72:	460b      	mov	r3, r1
 800ca74:	813b      	strh	r3, [r7, #8]
 800ca76:	4613      	mov	r3, r2
 800ca78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ca88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	6a3b      	ldr	r3, [r7, #32]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f000 f96a 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00d      	beq.n	800cace <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cabc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cac0:	d103      	bne.n	800caca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cac8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800caca:	2303      	movs	r3, #3
 800cacc:	e0aa      	b.n	800cc24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cace:	897b      	ldrh	r3, [r7, #10]
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	461a      	mov	r2, r3
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cadc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae0:	6a3a      	ldr	r2, [r7, #32]
 800cae2:	4952      	ldr	r1, [pc, #328]	; (800cc2c <I2C_RequestMemoryRead+0x1cc>)
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f000 f9a2 	bl	800ce2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e097      	b.n	800cc24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800caf4:	2300      	movs	r3, #0
 800caf6:	617b      	str	r3, [r7, #20]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	617b      	str	r3, [r7, #20]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	617b      	str	r3, [r7, #20]
 800cb08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb0c:	6a39      	ldr	r1, [r7, #32]
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f000 fa0c 	bl	800cf2c <I2C_WaitOnTXEFlagUntilTimeout>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00d      	beq.n	800cb36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1e:	2b04      	cmp	r3, #4
 800cb20:	d107      	bne.n	800cb32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e076      	b.n	800cc24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cb36:	88fb      	ldrh	r3, [r7, #6]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d105      	bne.n	800cb48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cb3c:	893b      	ldrh	r3, [r7, #8]
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	611a      	str	r2, [r3, #16]
 800cb46:	e021      	b.n	800cb8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cb48:	893b      	ldrh	r3, [r7, #8]
 800cb4a:	0a1b      	lsrs	r3, r3, #8
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb58:	6a39      	ldr	r1, [r7, #32]
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	f000 f9e6 	bl	800cf2c <I2C_WaitOnTXEFlagUntilTimeout>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00d      	beq.n	800cb82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	2b04      	cmp	r3, #4
 800cb6c:	d107      	bne.n	800cb7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e050      	b.n	800cc24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cb82:	893b      	ldrh	r3, [r7, #8]
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb8e:	6a39      	ldr	r1, [r7, #32]
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f000 f9cb 	bl	800cf2c <I2C_WaitOnTXEFlagUntilTimeout>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00d      	beq.n	800cbb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	d107      	bne.n	800cbb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e035      	b.n	800cc24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 f8d3 	bl	800cd80 <I2C_WaitOnFlagUntilTimeout>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00d      	beq.n	800cbfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbee:	d103      	bne.n	800cbf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	e013      	b.n	800cc24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800cbfc:	897b      	ldrh	r3, [r7, #10]
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	f043 0301 	orr.w	r3, r3, #1
 800cc04:	b2da      	uxtb	r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0e:	6a3a      	ldr	r2, [r7, #32]
 800cc10:	4906      	ldr	r1, [pc, #24]	; (800cc2c <I2C_RequestMemoryRead+0x1cc>)
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f000 f90b 	bl	800ce2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d001      	beq.n	800cc22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e000      	b.n	800cc24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3718      	adds	r7, #24
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	00010002 	.word	0x00010002

0800cc30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800cc4a:	4b4b      	ldr	r3, [pc, #300]	; (800cd78 <I2C_DMAAbort+0x148>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	08db      	lsrs	r3, r3, #3
 800cc50:	4a4a      	ldr	r2, [pc, #296]	; (800cd7c <I2C_DMAAbort+0x14c>)
 800cc52:	fba2 2303 	umull	r2, r3, r2, r3
 800cc56:	0a1a      	lsrs	r2, r3, #8
 800cc58:	4613      	mov	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	00da      	lsls	r2, r3, #3
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d106      	bne.n	800cc78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc6e:	f043 0220 	orr.w	r2, r3, #32
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800cc76:	e00a      	b.n	800cc8e <I2C_DMAAbort+0x5e>
    }
    count--;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc8c:	d0ea      	beq.n	800cc64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d003      	beq.n	800cc9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d003      	beq.n	800ccae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccaa:	2200      	movs	r2, #0
 800ccac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d003      	beq.n	800ccd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d003      	beq.n	800cce4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce0:	2200      	movs	r2, #0
 800cce2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f022 0201 	bic.w	r2, r2, #1
 800ccf2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	2b60      	cmp	r3, #96	; 0x60
 800ccfe:	d10e      	bne.n	800cd1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	2220      	movs	r2, #32
 800cd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	2200      	movs	r2, #0
 800cd14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cd16:	6978      	ldr	r0, [r7, #20]
 800cd18:	f7fe fb56 	bl	800b3c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cd1c:	e027      	b.n	800cd6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cd1e:	7cfb      	ldrb	r3, [r7, #19]
 800cd20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cd24:	2b28      	cmp	r3, #40	; 0x28
 800cd26:	d117      	bne.n	800cd58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f042 0201 	orr.w	r2, r2, #1
 800cd36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2228      	movs	r2, #40	; 0x28
 800cd52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cd56:	e007      	b.n	800cd68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2220      	movs	r2, #32
 800cd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	2200      	movs	r2, #0
 800cd64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800cd68:	6978      	ldr	r0, [r7, #20]
 800cd6a:	f7fe fb23 	bl	800b3b4 <HAL_I2C_ErrorCallback>
}
 800cd6e:	bf00      	nop
 800cd70:	3718      	adds	r7, #24
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20000034 	.word	0x20000034
 800cd7c:	14f8b589 	.word	0x14f8b589

0800cd80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	603b      	str	r3, [r7, #0]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cd90:	e025      	b.n	800cdde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd98:	d021      	beq.n	800cdde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd9a:	f7fc f94f 	bl	800903c <HAL_GetTick>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d302      	bcc.n	800cdb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d116      	bne.n	800cdde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2220      	movs	r2, #32
 800cdba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdca:	f043 0220 	orr.w	r2, r3, #32
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e023      	b.n	800ce26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	0c1b      	lsrs	r3, r3, #16
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d10d      	bne.n	800ce04 <I2C_WaitOnFlagUntilTimeout+0x84>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	43da      	mvns	r2, r3
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	4013      	ands	r3, r2
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	bf0c      	ite	eq
 800cdfa:	2301      	moveq	r3, #1
 800cdfc:	2300      	movne	r3, #0
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	461a      	mov	r2, r3
 800ce02:	e00c      	b.n	800ce1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	43da      	mvns	r2, r3
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	4013      	ands	r3, r2
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	bf0c      	ite	eq
 800ce16:	2301      	moveq	r3, #1
 800ce18:	2300      	movne	r3, #0
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	79fb      	ldrb	r3, [r7, #7]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d0b6      	beq.n	800cd92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b084      	sub	sp, #16
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	60f8      	str	r0, [r7, #12]
 800ce36:	60b9      	str	r1, [r7, #8]
 800ce38:	607a      	str	r2, [r7, #4]
 800ce3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ce3c:	e051      	b.n	800cee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce4c:	d123      	bne.n	800ce96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ce66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2220      	movs	r2, #32
 800ce72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce82:	f043 0204 	orr.w	r2, r3, #4
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	e046      	b.n	800cf24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9c:	d021      	beq.n	800cee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce9e:	f7fc f8cd 	bl	800903c <HAL_GetTick>
 800cea2:	4602      	mov	r2, r0
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d302      	bcc.n	800ceb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d116      	bne.n	800cee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2220      	movs	r2, #32
 800cebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cece:	f043 0220 	orr.w	r2, r3, #32
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2200      	movs	r2, #0
 800ceda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	e020      	b.n	800cf24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	0c1b      	lsrs	r3, r3, #16
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d10c      	bne.n	800cf06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	695b      	ldr	r3, [r3, #20]
 800cef2:	43da      	mvns	r2, r3
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	4013      	ands	r3, r2
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	bf14      	ite	ne
 800cefe:	2301      	movne	r3, #1
 800cf00:	2300      	moveq	r3, #0
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	e00b      	b.n	800cf1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	43da      	mvns	r2, r3
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	4013      	ands	r3, r2
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	bf14      	ite	ne
 800cf18:	2301      	movne	r3, #1
 800cf1a:	2300      	moveq	r3, #0
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d18d      	bne.n	800ce3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf38:	e02d      	b.n	800cf96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f000 f900 	bl	800d140 <I2C_IsAcknowledgeFailed>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d001      	beq.n	800cf4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e02d      	b.n	800cfa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf50:	d021      	beq.n	800cf96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf52:	f7fc f873 	bl	800903c <HAL_GetTick>
 800cf56:	4602      	mov	r2, r0
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	1ad3      	subs	r3, r2, r3
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d302      	bcc.n	800cf68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d116      	bne.n	800cf96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2220      	movs	r2, #32
 800cf72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf82:	f043 0220 	orr.w	r2, r3, #32
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e007      	b.n	800cfa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	695b      	ldr	r3, [r3, #20]
 800cf9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfa0:	2b80      	cmp	r3, #128	; 0x80
 800cfa2:	d1ca      	bne.n	800cf3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3710      	adds	r7, #16
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b084      	sub	sp, #16
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	60b9      	str	r1, [r7, #8]
 800cfb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cfba:	e02d      	b.n	800d018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f000 f8bf 	bl	800d140 <I2C_IsAcknowledgeFailed>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e02d      	b.n	800d028 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd2:	d021      	beq.n	800d018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfd4:	f7fc f832 	bl	800903c <HAL_GetTick>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d302      	bcc.n	800cfea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d116      	bne.n	800d018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2220      	movs	r2, #32
 800cff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d004:	f043 0220 	orr.w	r2, r3, #32
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d014:	2301      	movs	r3, #1
 800d016:	e007      	b.n	800d028 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	695b      	ldr	r3, [r3, #20]
 800d01e:	f003 0304 	and.w	r3, r3, #4
 800d022:	2b04      	cmp	r3, #4
 800d024:	d1ca      	bne.n	800cfbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d038:	2300      	movs	r3, #0
 800d03a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800d03c:	4b13      	ldr	r3, [pc, #76]	; (800d08c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	08db      	lsrs	r3, r3, #3
 800d042:	4a13      	ldr	r2, [pc, #76]	; (800d090 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800d044:	fba2 2303 	umull	r2, r3, r2, r3
 800d048:	0a1a      	lsrs	r2, r3, #8
 800d04a:	4613      	mov	r3, r2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	3b01      	subs	r3, #1
 800d056:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d107      	bne.n	800d06e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d062:	f043 0220 	orr.w	r2, r3, #32
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e008      	b.n	800d080 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d07c:	d0e9      	beq.n	800d052 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3714      	adds	r7, #20
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	20000034 	.word	0x20000034
 800d090:	14f8b589 	.word	0x14f8b589

0800d094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d0a0:	e042      	b.n	800d128 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	695b      	ldr	r3, [r3, #20]
 800d0a8:	f003 0310 	and.w	r3, r3, #16
 800d0ac:	2b10      	cmp	r3, #16
 800d0ae:	d119      	bne.n	800d0e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f06f 0210 	mvn.w	r2, #16
 800d0b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2220      	movs	r2, #32
 800d0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e029      	b.n	800d138 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0e4:	f7fb ffaa 	bl	800903c <HAL_GetTick>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d302      	bcc.n	800d0fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d116      	bne.n	800d128 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2220      	movs	r2, #32
 800d104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d114:	f043 0220 	orr.w	r2, r3, #32
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d124:	2301      	movs	r3, #1
 800d126:	e007      	b.n	800d138 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	695b      	ldr	r3, [r3, #20]
 800d12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d132:	2b40      	cmp	r3, #64	; 0x40
 800d134:	d1b5      	bne.n	800d0a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d156:	d11b      	bne.n	800d190 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d160:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2220      	movs	r2, #32
 800d16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d17c:	f043 0204 	orr.w	r2, r3, #4
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	e000      	b.n	800d192 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	370c      	adds	r7, #12
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr

0800d19e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800d19e:	b480      	push	{r7}
 800d1a0:	b083      	sub	sp, #12
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d1ae:	d103      	bne.n	800d1b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800d1b6:	e007      	b.n	800d1c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d1c0:	d102      	bne.n	800d1c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2208      	movs	r2, #8
 800d1c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d101      	bne.n	800d1e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e264      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f003 0301 	and.w	r3, r3, #1
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d075      	beq.n	800d2de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d1f2:	4ba3      	ldr	r3, [pc, #652]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	f003 030c 	and.w	r3, r3, #12
 800d1fa:	2b04      	cmp	r3, #4
 800d1fc:	d00c      	beq.n	800d218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d1fe:	4ba0      	ldr	r3, [pc, #640]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d206:	2b08      	cmp	r3, #8
 800d208:	d112      	bne.n	800d230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d20a:	4b9d      	ldr	r3, [pc, #628]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d216:	d10b      	bne.n	800d230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d218:	4b99      	ldr	r3, [pc, #612]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d220:	2b00      	cmp	r3, #0
 800d222:	d05b      	beq.n	800d2dc <HAL_RCC_OscConfig+0x108>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d157      	bne.n	800d2dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	e23f      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d238:	d106      	bne.n	800d248 <HAL_RCC_OscConfig+0x74>
 800d23a:	4b91      	ldr	r3, [pc, #580]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4a90      	ldr	r2, [pc, #576]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	e01d      	b.n	800d284 <HAL_RCC_OscConfig+0xb0>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d250:	d10c      	bne.n	800d26c <HAL_RCC_OscConfig+0x98>
 800d252:	4b8b      	ldr	r3, [pc, #556]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a8a      	ldr	r2, [pc, #552]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	4b88      	ldr	r3, [pc, #544]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a87      	ldr	r2, [pc, #540]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d268:	6013      	str	r3, [r2, #0]
 800d26a:	e00b      	b.n	800d284 <HAL_RCC_OscConfig+0xb0>
 800d26c:	4b84      	ldr	r3, [pc, #528]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a83      	ldr	r2, [pc, #524]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	4b81      	ldr	r3, [pc, #516]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a80      	ldr	r2, [pc, #512]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d27e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d013      	beq.n	800d2b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d28c:	f7fb fed6 	bl	800903c <HAL_GetTick>
 800d290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d292:	e008      	b.n	800d2a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d294:	f7fb fed2 	bl	800903c <HAL_GetTick>
 800d298:	4602      	mov	r2, r0
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	2b64      	cmp	r3, #100	; 0x64
 800d2a0:	d901      	bls.n	800d2a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	e204      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d2a6:	4b76      	ldr	r3, [pc, #472]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0f0      	beq.n	800d294 <HAL_RCC_OscConfig+0xc0>
 800d2b2:	e014      	b.n	800d2de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d2b4:	f7fb fec2 	bl	800903c <HAL_GetTick>
 800d2b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d2ba:	e008      	b.n	800d2ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d2bc:	f7fb febe 	bl	800903c <HAL_GetTick>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	2b64      	cmp	r3, #100	; 0x64
 800d2c8:	d901      	bls.n	800d2ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	e1f0      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d2ce:	4b6c      	ldr	r3, [pc, #432]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1f0      	bne.n	800d2bc <HAL_RCC_OscConfig+0xe8>
 800d2da:	e000      	b.n	800d2de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d2dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f003 0302 	and.w	r3, r3, #2
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d063      	beq.n	800d3b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d2ea:	4b65      	ldr	r3, [pc, #404]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	f003 030c 	and.w	r3, r3, #12
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00b      	beq.n	800d30e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d2f6:	4b62      	ldr	r3, [pc, #392]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d2fe:	2b08      	cmp	r3, #8
 800d300:	d11c      	bne.n	800d33c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d302:	4b5f      	ldr	r3, [pc, #380]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d116      	bne.n	800d33c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d30e:	4b5c      	ldr	r3, [pc, #368]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 0302 	and.w	r3, r3, #2
 800d316:	2b00      	cmp	r3, #0
 800d318:	d005      	beq.n	800d326 <HAL_RCC_OscConfig+0x152>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d001      	beq.n	800d326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	e1c4      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d326:	4b56      	ldr	r3, [pc, #344]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	00db      	lsls	r3, r3, #3
 800d334:	4952      	ldr	r1, [pc, #328]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d336:	4313      	orrs	r3, r2
 800d338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d33a:	e03a      	b.n	800d3b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d020      	beq.n	800d386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d344:	4b4f      	ldr	r3, [pc, #316]	; (800d484 <HAL_RCC_OscConfig+0x2b0>)
 800d346:	2201      	movs	r2, #1
 800d348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d34a:	f7fb fe77 	bl	800903c <HAL_GetTick>
 800d34e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d350:	e008      	b.n	800d364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d352:	f7fb fe73 	bl	800903c <HAL_GetTick>
 800d356:	4602      	mov	r2, r0
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d901      	bls.n	800d364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d360:	2303      	movs	r3, #3
 800d362:	e1a5      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d364:	4b46      	ldr	r3, [pc, #280]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 0302 	and.w	r3, r3, #2
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d0f0      	beq.n	800d352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d370:	4b43      	ldr	r3, [pc, #268]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	00db      	lsls	r3, r3, #3
 800d37e:	4940      	ldr	r1, [pc, #256]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d380:	4313      	orrs	r3, r2
 800d382:	600b      	str	r3, [r1, #0]
 800d384:	e015      	b.n	800d3b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d386:	4b3f      	ldr	r3, [pc, #252]	; (800d484 <HAL_RCC_OscConfig+0x2b0>)
 800d388:	2200      	movs	r2, #0
 800d38a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d38c:	f7fb fe56 	bl	800903c <HAL_GetTick>
 800d390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d392:	e008      	b.n	800d3a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d394:	f7fb fe52 	bl	800903c <HAL_GetTick>
 800d398:	4602      	mov	r2, r0
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d901      	bls.n	800d3a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	e184      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d3a6:	4b36      	ldr	r3, [pc, #216]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f003 0302 	and.w	r3, r3, #2
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1f0      	bne.n	800d394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f003 0308 	and.w	r3, r3, #8
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d030      	beq.n	800d420 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	695b      	ldr	r3, [r3, #20]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d016      	beq.n	800d3f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d3c6:	4b30      	ldr	r3, [pc, #192]	; (800d488 <HAL_RCC_OscConfig+0x2b4>)
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3cc:	f7fb fe36 	bl	800903c <HAL_GetTick>
 800d3d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d3d2:	e008      	b.n	800d3e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d3d4:	f7fb fe32 	bl	800903c <HAL_GetTick>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d901      	bls.n	800d3e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	e164      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d3e6:	4b26      	ldr	r3, [pc, #152]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3ea:	f003 0302 	and.w	r3, r3, #2
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d0f0      	beq.n	800d3d4 <HAL_RCC_OscConfig+0x200>
 800d3f2:	e015      	b.n	800d420 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d3f4:	4b24      	ldr	r3, [pc, #144]	; (800d488 <HAL_RCC_OscConfig+0x2b4>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d3fa:	f7fb fe1f 	bl	800903c <HAL_GetTick>
 800d3fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d400:	e008      	b.n	800d414 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d402:	f7fb fe1b 	bl	800903c <HAL_GetTick>
 800d406:	4602      	mov	r2, r0
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d901      	bls.n	800d414 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d410:	2303      	movs	r3, #3
 800d412:	e14d      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d414:	4b1a      	ldr	r3, [pc, #104]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d418:	f003 0302 	and.w	r3, r3, #2
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1f0      	bne.n	800d402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f003 0304 	and.w	r3, r3, #4
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f000 80a0 	beq.w	800d56e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d42e:	2300      	movs	r3, #0
 800d430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d432:	4b13      	ldr	r3, [pc, #76]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10f      	bne.n	800d45e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d43e:	2300      	movs	r3, #0
 800d440:	60bb      	str	r3, [r7, #8]
 800d442:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d446:	4a0e      	ldr	r2, [pc, #56]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d44c:	6413      	str	r3, [r2, #64]	; 0x40
 800d44e:	4b0c      	ldr	r3, [pc, #48]	; (800d480 <HAL_RCC_OscConfig+0x2ac>)
 800d450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d456:	60bb      	str	r3, [r7, #8]
 800d458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d45a:	2301      	movs	r3, #1
 800d45c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d45e:	4b0b      	ldr	r3, [pc, #44]	; (800d48c <HAL_RCC_OscConfig+0x2b8>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d466:	2b00      	cmp	r3, #0
 800d468:	d121      	bne.n	800d4ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d46a:	4b08      	ldr	r3, [pc, #32]	; (800d48c <HAL_RCC_OscConfig+0x2b8>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a07      	ldr	r2, [pc, #28]	; (800d48c <HAL_RCC_OscConfig+0x2b8>)
 800d470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d476:	f7fb fde1 	bl	800903c <HAL_GetTick>
 800d47a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d47c:	e011      	b.n	800d4a2 <HAL_RCC_OscConfig+0x2ce>
 800d47e:	bf00      	nop
 800d480:	40023800 	.word	0x40023800
 800d484:	42470000 	.word	0x42470000
 800d488:	42470e80 	.word	0x42470e80
 800d48c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d490:	f7fb fdd4 	bl	800903c <HAL_GetTick>
 800d494:	4602      	mov	r2, r0
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d901      	bls.n	800d4a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	e106      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d4a2:	4b85      	ldr	r3, [pc, #532]	; (800d6b8 <HAL_RCC_OscConfig+0x4e4>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d0f0      	beq.n	800d490 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	689b      	ldr	r3, [r3, #8]
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d106      	bne.n	800d4c4 <HAL_RCC_OscConfig+0x2f0>
 800d4b6:	4b81      	ldr	r3, [pc, #516]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ba:	4a80      	ldr	r2, [pc, #512]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d4bc:	f043 0301 	orr.w	r3, r3, #1
 800d4c0:	6713      	str	r3, [r2, #112]	; 0x70
 800d4c2:	e01c      	b.n	800d4fe <HAL_RCC_OscConfig+0x32a>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	2b05      	cmp	r3, #5
 800d4ca:	d10c      	bne.n	800d4e6 <HAL_RCC_OscConfig+0x312>
 800d4cc:	4b7b      	ldr	r3, [pc, #492]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4d0:	4a7a      	ldr	r2, [pc, #488]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d4d2:	f043 0304 	orr.w	r3, r3, #4
 800d4d6:	6713      	str	r3, [r2, #112]	; 0x70
 800d4d8:	4b78      	ldr	r3, [pc, #480]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d4da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4dc:	4a77      	ldr	r2, [pc, #476]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d4de:	f043 0301 	orr.w	r3, r3, #1
 800d4e2:	6713      	str	r3, [r2, #112]	; 0x70
 800d4e4:	e00b      	b.n	800d4fe <HAL_RCC_OscConfig+0x32a>
 800d4e6:	4b75      	ldr	r3, [pc, #468]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ea:	4a74      	ldr	r2, [pc, #464]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d4ec:	f023 0301 	bic.w	r3, r3, #1
 800d4f0:	6713      	str	r3, [r2, #112]	; 0x70
 800d4f2:	4b72      	ldr	r3, [pc, #456]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4f6:	4a71      	ldr	r2, [pc, #452]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d4f8:	f023 0304 	bic.w	r3, r3, #4
 800d4fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d015      	beq.n	800d532 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d506:	f7fb fd99 	bl	800903c <HAL_GetTick>
 800d50a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d50c:	e00a      	b.n	800d524 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d50e:	f7fb fd95 	bl	800903c <HAL_GetTick>
 800d512:	4602      	mov	r2, r0
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	1ad3      	subs	r3, r2, r3
 800d518:	f241 3288 	movw	r2, #5000	; 0x1388
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d901      	bls.n	800d524 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d520:	2303      	movs	r3, #3
 800d522:	e0c5      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d524:	4b65      	ldr	r3, [pc, #404]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d528:	f003 0302 	and.w	r3, r3, #2
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d0ee      	beq.n	800d50e <HAL_RCC_OscConfig+0x33a>
 800d530:	e014      	b.n	800d55c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d532:	f7fb fd83 	bl	800903c <HAL_GetTick>
 800d536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d538:	e00a      	b.n	800d550 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d53a:	f7fb fd7f 	bl	800903c <HAL_GetTick>
 800d53e:	4602      	mov	r2, r0
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	f241 3288 	movw	r2, #5000	; 0x1388
 800d548:	4293      	cmp	r3, r2
 800d54a:	d901      	bls.n	800d550 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d54c:	2303      	movs	r3, #3
 800d54e:	e0af      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d550:	4b5a      	ldr	r3, [pc, #360]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d554:	f003 0302 	and.w	r3, r3, #2
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1ee      	bne.n	800d53a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d55c:	7dfb      	ldrb	r3, [r7, #23]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d105      	bne.n	800d56e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d562:	4b56      	ldr	r3, [pc, #344]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d566:	4a55      	ldr	r2, [pc, #340]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d56c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 809b 	beq.w	800d6ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d578:	4b50      	ldr	r3, [pc, #320]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	f003 030c 	and.w	r3, r3, #12
 800d580:	2b08      	cmp	r3, #8
 800d582:	d05c      	beq.n	800d63e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	699b      	ldr	r3, [r3, #24]
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d141      	bne.n	800d610 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d58c:	4b4c      	ldr	r3, [pc, #304]	; (800d6c0 <HAL_RCC_OscConfig+0x4ec>)
 800d58e:	2200      	movs	r2, #0
 800d590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d592:	f7fb fd53 	bl	800903c <HAL_GetTick>
 800d596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d598:	e008      	b.n	800d5ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d59a:	f7fb fd4f 	bl	800903c <HAL_GetTick>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d901      	bls.n	800d5ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	e081      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d5ac:	4b43      	ldr	r3, [pc, #268]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1f0      	bne.n	800d59a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	69da      	ldr	r2, [r3, #28]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6a1b      	ldr	r3, [r3, #32]
 800d5c0:	431a      	orrs	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c6:	019b      	lsls	r3, r3, #6
 800d5c8:	431a      	orrs	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ce:	085b      	lsrs	r3, r3, #1
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	041b      	lsls	r3, r3, #16
 800d5d4:	431a      	orrs	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5da:	061b      	lsls	r3, r3, #24
 800d5dc:	4937      	ldr	r1, [pc, #220]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d5e2:	4b37      	ldr	r3, [pc, #220]	; (800d6c0 <HAL_RCC_OscConfig+0x4ec>)
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5e8:	f7fb fd28 	bl	800903c <HAL_GetTick>
 800d5ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d5ee:	e008      	b.n	800d602 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d5f0:	f7fb fd24 	bl	800903c <HAL_GetTick>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	2b02      	cmp	r3, #2
 800d5fc:	d901      	bls.n	800d602 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d5fe:	2303      	movs	r3, #3
 800d600:	e056      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d602:	4b2e      	ldr	r3, [pc, #184]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d0f0      	beq.n	800d5f0 <HAL_RCC_OscConfig+0x41c>
 800d60e:	e04e      	b.n	800d6ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d610:	4b2b      	ldr	r3, [pc, #172]	; (800d6c0 <HAL_RCC_OscConfig+0x4ec>)
 800d612:	2200      	movs	r2, #0
 800d614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d616:	f7fb fd11 	bl	800903c <HAL_GetTick>
 800d61a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d61c:	e008      	b.n	800d630 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d61e:	f7fb fd0d 	bl	800903c <HAL_GetTick>
 800d622:	4602      	mov	r2, r0
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	1ad3      	subs	r3, r2, r3
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d901      	bls.n	800d630 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d62c:	2303      	movs	r3, #3
 800d62e:	e03f      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d630:	4b22      	ldr	r3, [pc, #136]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1f0      	bne.n	800d61e <HAL_RCC_OscConfig+0x44a>
 800d63c:	e037      	b.n	800d6ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	699b      	ldr	r3, [r3, #24]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d101      	bne.n	800d64a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e032      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d64a:	4b1c      	ldr	r3, [pc, #112]	; (800d6bc <HAL_RCC_OscConfig+0x4e8>)
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	699b      	ldr	r3, [r3, #24]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d028      	beq.n	800d6aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d662:	429a      	cmp	r2, r3
 800d664:	d121      	bne.n	800d6aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d670:	429a      	cmp	r2, r3
 800d672:	d11a      	bne.n	800d6aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d67a:	4013      	ands	r3, r2
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d680:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d682:	4293      	cmp	r3, r2
 800d684:	d111      	bne.n	800d6aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d690:	085b      	lsrs	r3, r3, #1
 800d692:	3b01      	subs	r3, #1
 800d694:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d696:	429a      	cmp	r2, r3
 800d698:	d107      	bne.n	800d6aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d001      	beq.n	800d6ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e000      	b.n	800d6b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3718      	adds	r7, #24
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	40007000 	.word	0x40007000
 800d6bc:	40023800 	.word	0x40023800
 800d6c0:	42470060 	.word	0x42470060

0800d6c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d101      	bne.n	800d6d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e0cc      	b.n	800d872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d6d8:	4b68      	ldr	r3, [pc, #416]	; (800d87c <HAL_RCC_ClockConfig+0x1b8>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f003 0307 	and.w	r3, r3, #7
 800d6e0:	683a      	ldr	r2, [r7, #0]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d90c      	bls.n	800d700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6e6:	4b65      	ldr	r3, [pc, #404]	; (800d87c <HAL_RCC_ClockConfig+0x1b8>)
 800d6e8:	683a      	ldr	r2, [r7, #0]
 800d6ea:	b2d2      	uxtb	r2, r2
 800d6ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6ee:	4b63      	ldr	r3, [pc, #396]	; (800d87c <HAL_RCC_ClockConfig+0x1b8>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f003 0307 	and.w	r3, r3, #7
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d001      	beq.n	800d700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e0b8      	b.n	800d872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f003 0302 	and.w	r3, r3, #2
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d020      	beq.n	800d74e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f003 0304 	and.w	r3, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	d005      	beq.n	800d724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d718:	4b59      	ldr	r3, [pc, #356]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	4a58      	ldr	r2, [pc, #352]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d71e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f003 0308 	and.w	r3, r3, #8
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d005      	beq.n	800d73c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d730:	4b53      	ldr	r3, [pc, #332]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	4a52      	ldr	r2, [pc, #328]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d73a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d73c:	4b50      	ldr	r3, [pc, #320]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	494d      	ldr	r1, [pc, #308]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d74a:	4313      	orrs	r3, r2
 800d74c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f003 0301 	and.w	r3, r3, #1
 800d756:	2b00      	cmp	r3, #0
 800d758:	d044      	beq.n	800d7e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d107      	bne.n	800d772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d762:	4b47      	ldr	r3, [pc, #284]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d119      	bne.n	800d7a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	e07f      	b.n	800d872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	2b02      	cmp	r3, #2
 800d778:	d003      	beq.n	800d782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d77e:	2b03      	cmp	r3, #3
 800d780:	d107      	bne.n	800d792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d782:	4b3f      	ldr	r3, [pc, #252]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d109      	bne.n	800d7a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d78e:	2301      	movs	r3, #1
 800d790:	e06f      	b.n	800d872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d792:	4b3b      	ldr	r3, [pc, #236]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f003 0302 	and.w	r3, r3, #2
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d101      	bne.n	800d7a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e067      	b.n	800d872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d7a2:	4b37      	ldr	r3, [pc, #220]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	f023 0203 	bic.w	r2, r3, #3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	4934      	ldr	r1, [pc, #208]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d7b4:	f7fb fc42 	bl	800903c <HAL_GetTick>
 800d7b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d7ba:	e00a      	b.n	800d7d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d7bc:	f7fb fc3e 	bl	800903c <HAL_GetTick>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d901      	bls.n	800d7d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	e04f      	b.n	800d872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d7d2:	4b2b      	ldr	r3, [pc, #172]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d7d4:	689b      	ldr	r3, [r3, #8]
 800d7d6:	f003 020c 	and.w	r2, r3, #12
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d1eb      	bne.n	800d7bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d7e4:	4b25      	ldr	r3, [pc, #148]	; (800d87c <HAL_RCC_ClockConfig+0x1b8>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f003 0307 	and.w	r3, r3, #7
 800d7ec:	683a      	ldr	r2, [r7, #0]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d20c      	bcs.n	800d80c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d7f2:	4b22      	ldr	r3, [pc, #136]	; (800d87c <HAL_RCC_ClockConfig+0x1b8>)
 800d7f4:	683a      	ldr	r2, [r7, #0]
 800d7f6:	b2d2      	uxtb	r2, r2
 800d7f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7fa:	4b20      	ldr	r3, [pc, #128]	; (800d87c <HAL_RCC_ClockConfig+0x1b8>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f003 0307 	and.w	r3, r3, #7
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	429a      	cmp	r2, r3
 800d806:	d001      	beq.n	800d80c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	e032      	b.n	800d872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f003 0304 	and.w	r3, r3, #4
 800d814:	2b00      	cmp	r3, #0
 800d816:	d008      	beq.n	800d82a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d818:	4b19      	ldr	r3, [pc, #100]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	4916      	ldr	r1, [pc, #88]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d826:	4313      	orrs	r3, r2
 800d828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f003 0308 	and.w	r3, r3, #8
 800d832:	2b00      	cmp	r3, #0
 800d834:	d009      	beq.n	800d84a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d836:	4b12      	ldr	r3, [pc, #72]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d838:	689b      	ldr	r3, [r3, #8]
 800d83a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	691b      	ldr	r3, [r3, #16]
 800d842:	00db      	lsls	r3, r3, #3
 800d844:	490e      	ldr	r1, [pc, #56]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d846:	4313      	orrs	r3, r2
 800d848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d84a:	f000 f821 	bl	800d890 <HAL_RCC_GetSysClockFreq>
 800d84e:	4602      	mov	r2, r0
 800d850:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <HAL_RCC_ClockConfig+0x1bc>)
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	091b      	lsrs	r3, r3, #4
 800d856:	f003 030f 	and.w	r3, r3, #15
 800d85a:	490a      	ldr	r1, [pc, #40]	; (800d884 <HAL_RCC_ClockConfig+0x1c0>)
 800d85c:	5ccb      	ldrb	r3, [r1, r3]
 800d85e:	fa22 f303 	lsr.w	r3, r2, r3
 800d862:	4a09      	ldr	r2, [pc, #36]	; (800d888 <HAL_RCC_ClockConfig+0x1c4>)
 800d864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d866:	4b09      	ldr	r3, [pc, #36]	; (800d88c <HAL_RCC_ClockConfig+0x1c8>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fb fba2 	bl	8008fb4 <HAL_InitTick>

  return HAL_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	40023c00 	.word	0x40023c00
 800d880:	40023800 	.word	0x40023800
 800d884:	08027dfc 	.word	0x08027dfc
 800d888:	20000034 	.word	0x20000034
 800d88c:	20000038 	.word	0x20000038

0800d890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d890:	b5b0      	push	{r4, r5, r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d896:	2100      	movs	r1, #0
 800d898:	6079      	str	r1, [r7, #4]
 800d89a:	2100      	movs	r1, #0
 800d89c:	60f9      	str	r1, [r7, #12]
 800d89e:	2100      	movs	r1, #0
 800d8a0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d8a6:	4952      	ldr	r1, [pc, #328]	; (800d9f0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d8a8:	6889      	ldr	r1, [r1, #8]
 800d8aa:	f001 010c 	and.w	r1, r1, #12
 800d8ae:	2908      	cmp	r1, #8
 800d8b0:	d00d      	beq.n	800d8ce <HAL_RCC_GetSysClockFreq+0x3e>
 800d8b2:	2908      	cmp	r1, #8
 800d8b4:	f200 8094 	bhi.w	800d9e0 <HAL_RCC_GetSysClockFreq+0x150>
 800d8b8:	2900      	cmp	r1, #0
 800d8ba:	d002      	beq.n	800d8c2 <HAL_RCC_GetSysClockFreq+0x32>
 800d8bc:	2904      	cmp	r1, #4
 800d8be:	d003      	beq.n	800d8c8 <HAL_RCC_GetSysClockFreq+0x38>
 800d8c0:	e08e      	b.n	800d9e0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d8c2:	4b4c      	ldr	r3, [pc, #304]	; (800d9f4 <HAL_RCC_GetSysClockFreq+0x164>)
 800d8c4:	60bb      	str	r3, [r7, #8]
       break;
 800d8c6:	e08e      	b.n	800d9e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d8c8:	4b4b      	ldr	r3, [pc, #300]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0x168>)
 800d8ca:	60bb      	str	r3, [r7, #8]
      break;
 800d8cc:	e08b      	b.n	800d9e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d8ce:	4948      	ldr	r1, [pc, #288]	; (800d9f0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d8d0:	6849      	ldr	r1, [r1, #4]
 800d8d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800d8d6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d8d8:	4945      	ldr	r1, [pc, #276]	; (800d9f0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d8da:	6849      	ldr	r1, [r1, #4]
 800d8dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800d8e0:	2900      	cmp	r1, #0
 800d8e2:	d024      	beq.n	800d92e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d8e4:	4942      	ldr	r1, [pc, #264]	; (800d9f0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d8e6:	6849      	ldr	r1, [r1, #4]
 800d8e8:	0989      	lsrs	r1, r1, #6
 800d8ea:	4608      	mov	r0, r1
 800d8ec:	f04f 0100 	mov.w	r1, #0
 800d8f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 800d8f4:	f04f 0500 	mov.w	r5, #0
 800d8f8:	ea00 0204 	and.w	r2, r0, r4
 800d8fc:	ea01 0305 	and.w	r3, r1, r5
 800d900:	493d      	ldr	r1, [pc, #244]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0x168>)
 800d902:	fb01 f003 	mul.w	r0, r1, r3
 800d906:	2100      	movs	r1, #0
 800d908:	fb01 f102 	mul.w	r1, r1, r2
 800d90c:	1844      	adds	r4, r0, r1
 800d90e:	493a      	ldr	r1, [pc, #232]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0x168>)
 800d910:	fba2 0101 	umull	r0, r1, r2, r1
 800d914:	1863      	adds	r3, r4, r1
 800d916:	4619      	mov	r1, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	461a      	mov	r2, r3
 800d91c:	f04f 0300 	mov.w	r3, #0
 800d920:	f7f3 f9ca 	bl	8000cb8 <__aeabi_uldivmod>
 800d924:	4602      	mov	r2, r0
 800d926:	460b      	mov	r3, r1
 800d928:	4613      	mov	r3, r2
 800d92a:	60fb      	str	r3, [r7, #12]
 800d92c:	e04a      	b.n	800d9c4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d92e:	4b30      	ldr	r3, [pc, #192]	; (800d9f0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	099b      	lsrs	r3, r3, #6
 800d934:	461a      	mov	r2, r3
 800d936:	f04f 0300 	mov.w	r3, #0
 800d93a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d93e:	f04f 0100 	mov.w	r1, #0
 800d942:	ea02 0400 	and.w	r4, r2, r0
 800d946:	ea03 0501 	and.w	r5, r3, r1
 800d94a:	4620      	mov	r0, r4
 800d94c:	4629      	mov	r1, r5
 800d94e:	f04f 0200 	mov.w	r2, #0
 800d952:	f04f 0300 	mov.w	r3, #0
 800d956:	014b      	lsls	r3, r1, #5
 800d958:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d95c:	0142      	lsls	r2, r0, #5
 800d95e:	4610      	mov	r0, r2
 800d960:	4619      	mov	r1, r3
 800d962:	1b00      	subs	r0, r0, r4
 800d964:	eb61 0105 	sbc.w	r1, r1, r5
 800d968:	f04f 0200 	mov.w	r2, #0
 800d96c:	f04f 0300 	mov.w	r3, #0
 800d970:	018b      	lsls	r3, r1, #6
 800d972:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800d976:	0182      	lsls	r2, r0, #6
 800d978:	1a12      	subs	r2, r2, r0
 800d97a:	eb63 0301 	sbc.w	r3, r3, r1
 800d97e:	f04f 0000 	mov.w	r0, #0
 800d982:	f04f 0100 	mov.w	r1, #0
 800d986:	00d9      	lsls	r1, r3, #3
 800d988:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d98c:	00d0      	lsls	r0, r2, #3
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	1912      	adds	r2, r2, r4
 800d994:	eb45 0303 	adc.w	r3, r5, r3
 800d998:	f04f 0000 	mov.w	r0, #0
 800d99c:	f04f 0100 	mov.w	r1, #0
 800d9a0:	0299      	lsls	r1, r3, #10
 800d9a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800d9a6:	0290      	lsls	r0, r2, #10
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	f04f 0300 	mov.w	r3, #0
 800d9b8:	f7f3 f97e 	bl	8000cb8 <__aeabi_uldivmod>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	460b      	mov	r3, r1
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d9c4:	4b0a      	ldr	r3, [pc, #40]	; (800d9f0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	0c1b      	lsrs	r3, r3, #16
 800d9ca:	f003 0303 	and.w	r3, r3, #3
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	005b      	lsls	r3, r3, #1
 800d9d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9dc:	60bb      	str	r3, [r7, #8]
      break;
 800d9de:	e002      	b.n	800d9e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d9e0:	4b04      	ldr	r3, [pc, #16]	; (800d9f4 <HAL_RCC_GetSysClockFreq+0x164>)
 800d9e2:	60bb      	str	r3, [r7, #8]
      break;
 800d9e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d9e6:	68bb      	ldr	r3, [r7, #8]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bdb0      	pop	{r4, r5, r7, pc}
 800d9f0:	40023800 	.word	0x40023800
 800d9f4:	00f42400 	.word	0x00f42400
 800d9f8:	017d7840 	.word	0x017d7840

0800d9fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800da00:	4b03      	ldr	r3, [pc, #12]	; (800da10 <HAL_RCC_GetHCLKFreq+0x14>)
 800da02:	681b      	ldr	r3, [r3, #0]
}
 800da04:	4618      	mov	r0, r3
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	20000034 	.word	0x20000034

0800da14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800da18:	f7ff fff0 	bl	800d9fc <HAL_RCC_GetHCLKFreq>
 800da1c:	4602      	mov	r2, r0
 800da1e:	4b05      	ldr	r3, [pc, #20]	; (800da34 <HAL_RCC_GetPCLK1Freq+0x20>)
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	0a9b      	lsrs	r3, r3, #10
 800da24:	f003 0307 	and.w	r3, r3, #7
 800da28:	4903      	ldr	r1, [pc, #12]	; (800da38 <HAL_RCC_GetPCLK1Freq+0x24>)
 800da2a:	5ccb      	ldrb	r3, [r1, r3]
 800da2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800da30:	4618      	mov	r0, r3
 800da32:	bd80      	pop	{r7, pc}
 800da34:	40023800 	.word	0x40023800
 800da38:	08027e0c 	.word	0x08027e0c

0800da3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800da40:	f7ff ffdc 	bl	800d9fc <HAL_RCC_GetHCLKFreq>
 800da44:	4602      	mov	r2, r0
 800da46:	4b05      	ldr	r3, [pc, #20]	; (800da5c <HAL_RCC_GetPCLK2Freq+0x20>)
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	0b5b      	lsrs	r3, r3, #13
 800da4c:	f003 0307 	and.w	r3, r3, #7
 800da50:	4903      	ldr	r1, [pc, #12]	; (800da60 <HAL_RCC_GetPCLK2Freq+0x24>)
 800da52:	5ccb      	ldrb	r3, [r1, r3]
 800da54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800da58:	4618      	mov	r0, r3
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	40023800 	.word	0x40023800
 800da60:	08027e0c 	.word	0x08027e0c

0800da64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d101      	bne.n	800da76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800da72:	2301      	movs	r3, #1
 800da74:	e07b      	b.n	800db6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d108      	bne.n	800da90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da86:	d009      	beq.n	800da9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	61da      	str	r2, [r3, #28]
 800da8e:	e005      	b.n	800da9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d106      	bne.n	800dabc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7fa fd08 	bl	80084cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2202      	movs	r2, #2
 800dac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dad2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dae4:	431a      	orrs	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800daee:	431a      	orrs	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	691b      	ldr	r3, [r3, #16]
 800daf4:	f003 0302 	and.w	r3, r3, #2
 800daf8:	431a      	orrs	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	695b      	ldr	r3, [r3, #20]
 800dafe:	f003 0301 	and.w	r3, r3, #1
 800db02:	431a      	orrs	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db0c:	431a      	orrs	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	69db      	ldr	r3, [r3, #28]
 800db12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db16:	431a      	orrs	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a1b      	ldr	r3, [r3, #32]
 800db1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db20:	ea42 0103 	orr.w	r1, r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	430a      	orrs	r2, r1
 800db32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	699b      	ldr	r3, [r3, #24]
 800db38:	0c1b      	lsrs	r3, r3, #16
 800db3a:	f003 0104 	and.w	r1, r3, #4
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db42:	f003 0210 	and.w	r2, r3, #16
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	430a      	orrs	r2, r1
 800db4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	69da      	ldr	r2, [r3, #28]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b08c      	sub	sp, #48	; 0x30
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	60f8      	str	r0, [r7, #12]
 800db7e:	60b9      	str	r1, [r7, #8]
 800db80:	607a      	str	r2, [r7, #4]
 800db82:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db84:	2301      	movs	r3, #1
 800db86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db88:	2300      	movs	r3, #0
 800db8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db94:	2b01      	cmp	r3, #1
 800db96:	d101      	bne.n	800db9c <HAL_SPI_TransmitReceive+0x26>
 800db98:	2302      	movs	r3, #2
 800db9a:	e18a      	b.n	800deb2 <HAL_SPI_TransmitReceive+0x33c>
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2201      	movs	r2, #1
 800dba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dba4:	f7fb fa4a 	bl	800903c <HAL_GetTick>
 800dba8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dbb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800dbba:	887b      	ldrh	r3, [r7, #2]
 800dbbc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dbbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d00f      	beq.n	800dbe6 <HAL_SPI_TransmitReceive+0x70>
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbcc:	d107      	bne.n	800dbde <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d103      	bne.n	800dbde <HAL_SPI_TransmitReceive+0x68>
 800dbd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbda:	2b04      	cmp	r3, #4
 800dbdc:	d003      	beq.n	800dbe6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800dbde:	2302      	movs	r3, #2
 800dbe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dbe4:	e15b      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d005      	beq.n	800dbf8 <HAL_SPI_TransmitReceive+0x82>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d002      	beq.n	800dbf8 <HAL_SPI_TransmitReceive+0x82>
 800dbf2:	887b      	ldrh	r3, [r7, #2]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d103      	bne.n	800dc00 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dbfe:	e14e      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	2b04      	cmp	r3, #4
 800dc0a:	d003      	beq.n	800dc14 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2205      	movs	r2, #5
 800dc10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	887a      	ldrh	r2, [r7, #2]
 800dc24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	887a      	ldrh	r2, [r7, #2]
 800dc2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	887a      	ldrh	r2, [r7, #2]
 800dc36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	887a      	ldrh	r2, [r7, #2]
 800dc3c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2200      	movs	r2, #0
 800dc42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc54:	2b40      	cmp	r3, #64	; 0x40
 800dc56:	d007      	beq.n	800dc68 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc70:	d178      	bne.n	800dd64 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d002      	beq.n	800dc80 <HAL_SPI_TransmitReceive+0x10a>
 800dc7a:	8b7b      	ldrh	r3, [r7, #26]
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d166      	bne.n	800dd4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc84:	881a      	ldrh	r2, [r3, #0]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc90:	1c9a      	adds	r2, r3, #2
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dca4:	e053      	b.n	800dd4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	f003 0302 	and.w	r3, r3, #2
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d11b      	bne.n	800dcec <HAL_SPI_TransmitReceive+0x176>
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d016      	beq.n	800dcec <HAL_SPI_TransmitReceive+0x176>
 800dcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d113      	bne.n	800dcec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc8:	881a      	ldrh	r2, [r3, #0]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd4:	1c9a      	adds	r2, r3, #2
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	3b01      	subs	r3, #1
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dce8:	2300      	movs	r3, #0
 800dcea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	f003 0301 	and.w	r3, r3, #1
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d119      	bne.n	800dd2e <HAL_SPI_TransmitReceive+0x1b8>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d014      	beq.n	800dd2e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68da      	ldr	r2, [r3, #12]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0e:	b292      	uxth	r2, r2
 800dd10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd16:	1c9a      	adds	r2, r3, #2
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	3b01      	subs	r3, #1
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dd2e:	f7fb f985 	bl	800903c <HAL_GetTick>
 800dd32:	4602      	mov	r2, r0
 800dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d807      	bhi.n	800dd4e <HAL_SPI_TransmitReceive+0x1d8>
 800dd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd44:	d003      	beq.n	800dd4e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dd46:	2303      	movs	r3, #3
 800dd48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dd4c:	e0a7      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1a6      	bne.n	800dca6 <HAL_SPI_TransmitReceive+0x130>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d1a1      	bne.n	800dca6 <HAL_SPI_TransmitReceive+0x130>
 800dd62:	e07c      	b.n	800de5e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <HAL_SPI_TransmitReceive+0x1fc>
 800dd6c:	8b7b      	ldrh	r3, [r7, #26]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d16b      	bne.n	800de4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	330c      	adds	r3, #12
 800dd7c:	7812      	ldrb	r2, [r2, #0]
 800dd7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	3b01      	subs	r3, #1
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd98:	e057      	b.n	800de4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	f003 0302 	and.w	r3, r3, #2
 800dda4:	2b02      	cmp	r3, #2
 800dda6:	d11c      	bne.n	800dde2 <HAL_SPI_TransmitReceive+0x26c>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d017      	beq.n	800dde2 <HAL_SPI_TransmitReceive+0x26c>
 800ddb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d114      	bne.n	800dde2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	330c      	adds	r3, #12
 800ddc2:	7812      	ldrb	r2, [r2, #0]
 800ddc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddca:	1c5a      	adds	r2, r3, #1
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ddde:	2300      	movs	r3, #0
 800dde0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d119      	bne.n	800de24 <HAL_SPI_TransmitReceive+0x2ae>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d014      	beq.n	800de24 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	68da      	ldr	r2, [r3, #12]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de04:	b2d2      	uxtb	r2, r2
 800de06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0c:	1c5a      	adds	r2, r3, #1
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de16:	b29b      	uxth	r3, r3
 800de18:	3b01      	subs	r3, #1
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800de20:	2301      	movs	r3, #1
 800de22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800de24:	f7fb f90a 	bl	800903c <HAL_GetTick>
 800de28:	4602      	mov	r2, r0
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	1ad3      	subs	r3, r2, r3
 800de2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de30:	429a      	cmp	r2, r3
 800de32:	d803      	bhi.n	800de3c <HAL_SPI_TransmitReceive+0x2c6>
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3a:	d102      	bne.n	800de42 <HAL_SPI_TransmitReceive+0x2cc>
 800de3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d103      	bne.n	800de4a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800de42:	2303      	movs	r3, #3
 800de44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800de48:	e029      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de4e:	b29b      	uxth	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d1a2      	bne.n	800dd9a <HAL_SPI_TransmitReceive+0x224>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de58:	b29b      	uxth	r3, r3
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d19d      	bne.n	800dd9a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800de5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f000 f9d0 	bl	800e208 <SPI_EndRxTxTransaction>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d006      	beq.n	800de7c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2220      	movs	r2, #32
 800de78:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800de7a:	e010      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d10b      	bne.n	800de9c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800de84:	2300      	movs	r3, #0
 800de86:	617b      	str	r3, [r7, #20]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	617b      	str	r3, [r7, #20]
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	e000      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800de9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800deae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3730      	adds	r7, #48	; 0x30
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
	...

0800debc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b088      	sub	sp, #32
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	099b      	lsrs	r3, r3, #6
 800ded8:	f003 0301 	and.w	r3, r3, #1
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10f      	bne.n	800df00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00a      	beq.n	800df00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	099b      	lsrs	r3, r3, #6
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	2b00      	cmp	r3, #0
 800def4:	d004      	beq.n	800df00 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	4798      	blx	r3
    return;
 800defe:	e0d7      	b.n	800e0b0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	085b      	lsrs	r3, r3, #1
 800df04:	f003 0301 	and.w	r3, r3, #1
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d00a      	beq.n	800df22 <HAL_SPI_IRQHandler+0x66>
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	09db      	lsrs	r3, r3, #7
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	d004      	beq.n	800df22 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	4798      	blx	r3
    return;
 800df20:	e0c6      	b.n	800e0b0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	095b      	lsrs	r3, r3, #5
 800df26:	f003 0301 	and.w	r3, r3, #1
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10c      	bne.n	800df48 <HAL_SPI_IRQHandler+0x8c>
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	099b      	lsrs	r3, r3, #6
 800df32:	f003 0301 	and.w	r3, r3, #1
 800df36:	2b00      	cmp	r3, #0
 800df38:	d106      	bne.n	800df48 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	0a1b      	lsrs	r3, r3, #8
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	2b00      	cmp	r3, #0
 800df44:	f000 80b4 	beq.w	800e0b0 <HAL_SPI_IRQHandler+0x1f4>
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	095b      	lsrs	r3, r3, #5
 800df4c:	f003 0301 	and.w	r3, r3, #1
 800df50:	2b00      	cmp	r3, #0
 800df52:	f000 80ad 	beq.w	800e0b0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	099b      	lsrs	r3, r3, #6
 800df5a:	f003 0301 	and.w	r3, r3, #1
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d023      	beq.n	800dfaa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	2b03      	cmp	r3, #3
 800df6c:	d011      	beq.n	800df92 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df72:	f043 0204 	orr.w	r2, r3, #4
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df7a:	2300      	movs	r3, #0
 800df7c:	617b      	str	r3, [r7, #20]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	617b      	str	r3, [r7, #20]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	617b      	str	r3, [r7, #20]
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	e00b      	b.n	800dfaa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df92:	2300      	movs	r3, #0
 800df94:	613b      	str	r3, [r7, #16]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	613b      	str	r3, [r7, #16]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	689b      	ldr	r3, [r3, #8]
 800dfa4:	613b      	str	r3, [r7, #16]
 800dfa6:	693b      	ldr	r3, [r7, #16]
        return;
 800dfa8:	e082      	b.n	800e0b0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	095b      	lsrs	r3, r3, #5
 800dfae:	f003 0301 	and.w	r3, r3, #1
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d014      	beq.n	800dfe0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfba:	f043 0201 	orr.w	r2, r3, #1
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfdc:	601a      	str	r2, [r3, #0]
 800dfde:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	0a1b      	lsrs	r3, r3, #8
 800dfe4:	f003 0301 	and.w	r3, r3, #1
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00c      	beq.n	800e006 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dff0:	f043 0208 	orr.w	r2, r3, #8
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dff8:	2300      	movs	r3, #0
 800dffa:	60bb      	str	r3, [r7, #8]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	60bb      	str	r3, [r7, #8]
 800e004:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d04f      	beq.n	800e0ae <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	685a      	ldr	r2, [r3, #4]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e01c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2201      	movs	r2, #1
 800e022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e026:	69fb      	ldr	r3, [r7, #28]
 800e028:	f003 0302 	and.w	r3, r3, #2
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d104      	bne.n	800e03a <HAL_SPI_IRQHandler+0x17e>
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	f003 0301 	and.w	r3, r3, #1
 800e036:	2b00      	cmp	r3, #0
 800e038:	d034      	beq.n	800e0a4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	685a      	ldr	r2, [r3, #4]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f022 0203 	bic.w	r2, r2, #3
 800e048:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d011      	beq.n	800e076 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e056:	4a18      	ldr	r2, [pc, #96]	; (800e0b8 <HAL_SPI_IRQHandler+0x1fc>)
 800e058:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fb fb32 	bl	80096c8 <HAL_DMA_Abort_IT>
 800e064:	4603      	mov	r3, r0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d005      	beq.n	800e076 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e06e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d016      	beq.n	800e0ac <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e082:	4a0d      	ldr	r2, [pc, #52]	; (800e0b8 <HAL_SPI_IRQHandler+0x1fc>)
 800e084:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fb fb1c 	bl	80096c8 <HAL_DMA_Abort_IT>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00a      	beq.n	800e0ac <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e09a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800e0a2:	e003      	b.n	800e0ac <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 f809 	bl	800e0bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e0aa:	e000      	b.n	800e0ae <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800e0ac:	bf00      	nop
    return;
 800e0ae:	bf00      	nop
  }
}
 800e0b0:	3720      	adds	r7, #32
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	0800e0d1 	.word	0x0800e0d1

0800e0bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e0c4:	bf00      	nop
 800e0c6:	370c      	adds	r7, #12
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f7ff ffe6 	bl	800e0bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e0f0:	bf00      	nop
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b088      	sub	sp, #32
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	603b      	str	r3, [r7, #0]
 800e104:	4613      	mov	r3, r2
 800e106:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e108:	f7fa ff98 	bl	800903c <HAL_GetTick>
 800e10c:	4602      	mov	r2, r0
 800e10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e110:	1a9b      	subs	r3, r3, r2
 800e112:	683a      	ldr	r2, [r7, #0]
 800e114:	4413      	add	r3, r2
 800e116:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e118:	f7fa ff90 	bl	800903c <HAL_GetTick>
 800e11c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e11e:	4b39      	ldr	r3, [pc, #228]	; (800e204 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	015b      	lsls	r3, r3, #5
 800e124:	0d1b      	lsrs	r3, r3, #20
 800e126:	69fa      	ldr	r2, [r7, #28]
 800e128:	fb02 f303 	mul.w	r3, r2, r3
 800e12c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e12e:	e054      	b.n	800e1da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e136:	d050      	beq.n	800e1da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e138:	f7fa ff80 	bl	800903c <HAL_GetTick>
 800e13c:	4602      	mov	r2, r0
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	69fa      	ldr	r2, [r7, #28]
 800e144:	429a      	cmp	r2, r3
 800e146:	d902      	bls.n	800e14e <SPI_WaitFlagStateUntilTimeout+0x56>
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d13d      	bne.n	800e1ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	685a      	ldr	r2, [r3, #4]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e15c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e166:	d111      	bne.n	800e18c <SPI_WaitFlagStateUntilTimeout+0x94>
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e170:	d004      	beq.n	800e17c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	689b      	ldr	r3, [r3, #8]
 800e176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e17a:	d107      	bne.n	800e18c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e18a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e194:	d10f      	bne.n	800e1b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e1a4:	601a      	str	r2, [r3, #0]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e1b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	e017      	b.n	800e1fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	689a      	ldr	r2, [r3, #8]
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	4013      	ands	r3, r2
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	bf0c      	ite	eq
 800e1ea:	2301      	moveq	r3, #1
 800e1ec:	2300      	movne	r3, #0
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	79fb      	ldrb	r3, [r7, #7]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d19b      	bne.n	800e130 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e1f8:	2300      	movs	r3, #0
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3720      	adds	r7, #32
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	20000034 	.word	0x20000034

0800e208 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b088      	sub	sp, #32
 800e20c:	af02      	add	r7, sp, #8
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e214:	4b1b      	ldr	r3, [pc, #108]	; (800e284 <SPI_EndRxTxTransaction+0x7c>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a1b      	ldr	r2, [pc, #108]	; (800e288 <SPI_EndRxTxTransaction+0x80>)
 800e21a:	fba2 2303 	umull	r2, r3, r2, r3
 800e21e:	0d5b      	lsrs	r3, r3, #21
 800e220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e224:	fb02 f303 	mul.w	r3, r2, r3
 800e228:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e232:	d112      	bne.n	800e25a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	9300      	str	r3, [sp, #0]
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	2200      	movs	r2, #0
 800e23c:	2180      	movs	r1, #128	; 0x80
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f7ff ff5a 	bl	800e0f8 <SPI_WaitFlagStateUntilTimeout>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d016      	beq.n	800e278 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e24e:	f043 0220 	orr.w	r2, r3, #32
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e256:	2303      	movs	r3, #3
 800e258:	e00f      	b.n	800e27a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00a      	beq.n	800e276 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	3b01      	subs	r3, #1
 800e264:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e270:	2b80      	cmp	r3, #128	; 0x80
 800e272:	d0f2      	beq.n	800e25a <SPI_EndRxTxTransaction+0x52>
 800e274:	e000      	b.n	800e278 <SPI_EndRxTxTransaction+0x70>
        break;
 800e276:	bf00      	nop
  }

  return HAL_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	20000034 	.word	0x20000034
 800e288:	165e9f81 	.word	0x165e9f81

0800e28c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d101      	bne.n	800e29e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e29a:	2301      	movs	r3, #1
 800e29c:	e041      	b.n	800e322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d106      	bne.n	800e2b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7fa fb74 	bl	80089a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2202      	movs	r2, #2
 800e2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	4610      	mov	r0, r2
 800e2cc:	f000 f9f0 	bl	800e6b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
	...

0800e32c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d001      	beq.n	800e344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	e044      	b.n	800e3ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2202      	movs	r2, #2
 800e348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	68da      	ldr	r2, [r3, #12]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f042 0201 	orr.w	r2, r2, #1
 800e35a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a1e      	ldr	r2, [pc, #120]	; (800e3dc <HAL_TIM_Base_Start_IT+0xb0>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d018      	beq.n	800e398 <HAL_TIM_Base_Start_IT+0x6c>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e36e:	d013      	beq.n	800e398 <HAL_TIM_Base_Start_IT+0x6c>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4a1a      	ldr	r2, [pc, #104]	; (800e3e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d00e      	beq.n	800e398 <HAL_TIM_Base_Start_IT+0x6c>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a19      	ldr	r2, [pc, #100]	; (800e3e4 <HAL_TIM_Base_Start_IT+0xb8>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d009      	beq.n	800e398 <HAL_TIM_Base_Start_IT+0x6c>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4a17      	ldr	r2, [pc, #92]	; (800e3e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d004      	beq.n	800e398 <HAL_TIM_Base_Start_IT+0x6c>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4a16      	ldr	r2, [pc, #88]	; (800e3ec <HAL_TIM_Base_Start_IT+0xc0>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d111      	bne.n	800e3bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	f003 0307 	and.w	r3, r3, #7
 800e3a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2b06      	cmp	r3, #6
 800e3a8:	d010      	beq.n	800e3cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f042 0201 	orr.w	r2, r2, #1
 800e3b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3ba:	e007      	b.n	800e3cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f042 0201 	orr.w	r2, r2, #1
 800e3ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e3cc:	2300      	movs	r3, #0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3714      	adds	r7, #20
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	40010000 	.word	0x40010000
 800e3e0:	40000400 	.word	0x40000400
 800e3e4:	40000800 	.word	0x40000800
 800e3e8:	40000c00 	.word	0x40000c00
 800e3ec:	40014000 	.word	0x40014000

0800e3f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	68da      	ldr	r2, [r3, #12]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f022 0201 	bic.w	r2, r2, #1
 800e406:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	6a1a      	ldr	r2, [r3, #32]
 800e40e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e412:	4013      	ands	r3, r2
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10f      	bne.n	800e438 <HAL_TIM_Base_Stop_IT+0x48>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	6a1a      	ldr	r2, [r3, #32]
 800e41e:	f240 4344 	movw	r3, #1092	; 0x444
 800e422:	4013      	ands	r3, r2
 800e424:	2b00      	cmp	r3, #0
 800e426:	d107      	bne.n	800e438 <HAL_TIM_Base_Stop_IT+0x48>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f022 0201 	bic.w	r2, r2, #1
 800e436:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2201      	movs	r2, #1
 800e43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	370c      	adds	r7, #12
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr

0800e44e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b082      	sub	sp, #8
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	f003 0302 	and.w	r3, r3, #2
 800e460:	2b02      	cmp	r3, #2
 800e462:	d122      	bne.n	800e4aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	f003 0302 	and.w	r3, r3, #2
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d11b      	bne.n	800e4aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f06f 0202 	mvn.w	r2, #2
 800e47a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	699b      	ldr	r3, [r3, #24]
 800e488:	f003 0303 	and.w	r3, r3, #3
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d003      	beq.n	800e498 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 f8ee 	bl	800e672 <HAL_TIM_IC_CaptureCallback>
 800e496:	e005      	b.n	800e4a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 f8e0 	bl	800e65e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f8f1 	bl	800e686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	691b      	ldr	r3, [r3, #16]
 800e4b0:	f003 0304 	and.w	r3, r3, #4
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	d122      	bne.n	800e4fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	f003 0304 	and.w	r3, r3, #4
 800e4c2:	2b04      	cmp	r3, #4
 800e4c4:	d11b      	bne.n	800e4fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f06f 0204 	mvn.w	r2, #4
 800e4ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2202      	movs	r2, #2
 800e4d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	699b      	ldr	r3, [r3, #24]
 800e4dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d003      	beq.n	800e4ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 f8c4 	bl	800e672 <HAL_TIM_IC_CaptureCallback>
 800e4ea:	e005      	b.n	800e4f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 f8b6 	bl	800e65e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f8c7 	bl	800e686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	691b      	ldr	r3, [r3, #16]
 800e504:	f003 0308 	and.w	r3, r3, #8
 800e508:	2b08      	cmp	r3, #8
 800e50a:	d122      	bne.n	800e552 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	f003 0308 	and.w	r3, r3, #8
 800e516:	2b08      	cmp	r3, #8
 800e518:	d11b      	bne.n	800e552 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f06f 0208 	mvn.w	r2, #8
 800e522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2204      	movs	r2, #4
 800e528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	69db      	ldr	r3, [r3, #28]
 800e530:	f003 0303 	and.w	r3, r3, #3
 800e534:	2b00      	cmp	r3, #0
 800e536:	d003      	beq.n	800e540 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 f89a 	bl	800e672 <HAL_TIM_IC_CaptureCallback>
 800e53e:	e005      	b.n	800e54c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f88c 	bl	800e65e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 f89d 	bl	800e686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	691b      	ldr	r3, [r3, #16]
 800e558:	f003 0310 	and.w	r3, r3, #16
 800e55c:	2b10      	cmp	r3, #16
 800e55e:	d122      	bne.n	800e5a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	f003 0310 	and.w	r3, r3, #16
 800e56a:	2b10      	cmp	r3, #16
 800e56c:	d11b      	bne.n	800e5a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f06f 0210 	mvn.w	r2, #16
 800e576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2208      	movs	r2, #8
 800e57c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	69db      	ldr	r3, [r3, #28]
 800e584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d003      	beq.n	800e594 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 f870 	bl	800e672 <HAL_TIM_IC_CaptureCallback>
 800e592:	e005      	b.n	800e5a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 f862 	bl	800e65e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 f873 	bl	800e686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	691b      	ldr	r3, [r3, #16]
 800e5ac:	f003 0301 	and.w	r3, r3, #1
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d10e      	bne.n	800e5d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	f003 0301 	and.w	r3, r3, #1
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d107      	bne.n	800e5d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f06f 0201 	mvn.w	r2, #1
 800e5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7f7 f8f1 	bl	80057b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	691b      	ldr	r3, [r3, #16]
 800e5d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5dc:	2b80      	cmp	r3, #128	; 0x80
 800e5de:	d10e      	bne.n	800e5fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ea:	2b80      	cmp	r3, #128	; 0x80
 800e5ec:	d107      	bne.n	800e5fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 f8e3 	bl	800e7c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e608:	2b40      	cmp	r3, #64	; 0x40
 800e60a:	d10e      	bne.n	800e62a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e616:	2b40      	cmp	r3, #64	; 0x40
 800e618:	d107      	bne.n	800e62a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f838 	bl	800e69a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	691b      	ldr	r3, [r3, #16]
 800e630:	f003 0320 	and.w	r3, r3, #32
 800e634:	2b20      	cmp	r3, #32
 800e636:	d10e      	bne.n	800e656 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	f003 0320 	and.w	r3, r3, #32
 800e642:	2b20      	cmp	r3, #32
 800e644:	d107      	bne.n	800e656 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f06f 0220 	mvn.w	r2, #32
 800e64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 f8ad 	bl	800e7b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e656:	bf00      	nop
 800e658:	3708      	adds	r7, #8
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e65e:	b480      	push	{r7}
 800e660:	b083      	sub	sp, #12
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e666:	bf00      	nop
 800e668:	370c      	adds	r7, #12
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr

0800e672 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e672:	b480      	push	{r7}
 800e674:	b083      	sub	sp, #12
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e67a:	bf00      	nop
 800e67c:	370c      	adds	r7, #12
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr

0800e686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e686:	b480      	push	{r7}
 800e688:	b083      	sub	sp, #12
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e68e:	bf00      	nop
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr

0800e69a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e69a:	b480      	push	{r7}
 800e69c:	b083      	sub	sp, #12
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6a2:	bf00      	nop
 800e6a4:	370c      	adds	r7, #12
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
	...

0800e6b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	4a34      	ldr	r2, [pc, #208]	; (800e794 <TIM_Base_SetConfig+0xe4>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d00f      	beq.n	800e6e8 <TIM_Base_SetConfig+0x38>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6ce:	d00b      	beq.n	800e6e8 <TIM_Base_SetConfig+0x38>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	4a31      	ldr	r2, [pc, #196]	; (800e798 <TIM_Base_SetConfig+0xe8>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d007      	beq.n	800e6e8 <TIM_Base_SetConfig+0x38>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a30      	ldr	r2, [pc, #192]	; (800e79c <TIM_Base_SetConfig+0xec>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d003      	beq.n	800e6e8 <TIM_Base_SetConfig+0x38>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4a2f      	ldr	r2, [pc, #188]	; (800e7a0 <TIM_Base_SetConfig+0xf0>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d108      	bne.n	800e6fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	68fa      	ldr	r2, [r7, #12]
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	4a25      	ldr	r2, [pc, #148]	; (800e794 <TIM_Base_SetConfig+0xe4>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d01b      	beq.n	800e73a <TIM_Base_SetConfig+0x8a>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e708:	d017      	beq.n	800e73a <TIM_Base_SetConfig+0x8a>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4a22      	ldr	r2, [pc, #136]	; (800e798 <TIM_Base_SetConfig+0xe8>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d013      	beq.n	800e73a <TIM_Base_SetConfig+0x8a>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	4a21      	ldr	r2, [pc, #132]	; (800e79c <TIM_Base_SetConfig+0xec>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d00f      	beq.n	800e73a <TIM_Base_SetConfig+0x8a>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4a20      	ldr	r2, [pc, #128]	; (800e7a0 <TIM_Base_SetConfig+0xf0>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d00b      	beq.n	800e73a <TIM_Base_SetConfig+0x8a>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4a1f      	ldr	r2, [pc, #124]	; (800e7a4 <TIM_Base_SetConfig+0xf4>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d007      	beq.n	800e73a <TIM_Base_SetConfig+0x8a>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4a1e      	ldr	r2, [pc, #120]	; (800e7a8 <TIM_Base_SetConfig+0xf8>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d003      	beq.n	800e73a <TIM_Base_SetConfig+0x8a>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	4a1d      	ldr	r2, [pc, #116]	; (800e7ac <TIM_Base_SetConfig+0xfc>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d108      	bne.n	800e74c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	4313      	orrs	r3, r2
 800e74a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	695b      	ldr	r3, [r3, #20]
 800e756:	4313      	orrs	r3, r2
 800e758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	68fa      	ldr	r2, [r7, #12]
 800e75e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	689a      	ldr	r2, [r3, #8]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4a08      	ldr	r2, [pc, #32]	; (800e794 <TIM_Base_SetConfig+0xe4>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d103      	bne.n	800e780 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	691a      	ldr	r2, [r3, #16]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2201      	movs	r2, #1
 800e784:	615a      	str	r2, [r3, #20]
}
 800e786:	bf00      	nop
 800e788:	3714      	adds	r7, #20
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	40010000 	.word	0x40010000
 800e798:	40000400 	.word	0x40000400
 800e79c:	40000800 	.word	0x40000800
 800e7a0:	40000c00 	.word	0x40000c00
 800e7a4:	40014000 	.word	0x40014000
 800e7a8:	40014400 	.word	0x40014400
 800e7ac:	40014800 	.word	0x40014800

0800e7b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e7b8:	bf00      	nop
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e7cc:	bf00      	nop
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d101      	bne.n	800e7ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e03f      	b.n	800e86a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d106      	bne.n	800e804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f7fa fae0 	bl	8008dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2224      	movs	r2, #36	; 0x24
 800e808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	68da      	ldr	r2, [r3, #12]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e81a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f000 ff53 	bl	800f6c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	691a      	ldr	r2, [r3, #16]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	695a      	ldr	r2, [r3, #20]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	68da      	ldr	r2, [r3, #12]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2220      	movs	r2, #32
 800e85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2220      	movs	r2, #32
 800e864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b08c      	sub	sp, #48	; 0x30
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	4613      	mov	r3, r2
 800e880:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e888:	b2db      	uxtb	r3, r3
 800e88a:	2b20      	cmp	r3, #32
 800e88c:	d165      	bne.n	800e95a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <HAL_UART_Transmit_DMA+0x26>
 800e894:	88fb      	ldrh	r3, [r7, #6]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d101      	bne.n	800e89e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e89a:	2301      	movs	r3, #1
 800e89c:	e05e      	b.n	800e95c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d101      	bne.n	800e8ac <HAL_UART_Transmit_DMA+0x38>
 800e8a8:	2302      	movs	r3, #2
 800e8aa:	e057      	b.n	800e95c <HAL_UART_Transmit_DMA+0xe8>
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	88fa      	ldrh	r2, [r7, #6]
 800e8be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	88fa      	ldrh	r2, [r7, #6]
 800e8c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2221      	movs	r2, #33	; 0x21
 800e8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d8:	4a22      	ldr	r2, [pc, #136]	; (800e964 <HAL_UART_Transmit_DMA+0xf0>)
 800e8da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e0:	4a21      	ldr	r2, [pc, #132]	; (800e968 <HAL_UART_Transmit_DMA+0xf4>)
 800e8e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e8:	4a20      	ldr	r2, [pc, #128]	; (800e96c <HAL_UART_Transmit_DMA+0xf8>)
 800e8ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e8f4:	f107 0308 	add.w	r3, r7, #8
 800e8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e900:	6819      	ldr	r1, [r3, #0]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	3304      	adds	r3, #4
 800e908:	461a      	mov	r2, r3
 800e90a:	88fb      	ldrh	r3, [r7, #6]
 800e90c:	f7fa fe14 	bl	8009538 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e918:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	3314      	adds	r3, #20
 800e928:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92a:	69bb      	ldr	r3, [r7, #24]
 800e92c:	e853 3f00 	ldrex	r3, [r3]
 800e930:	617b      	str	r3, [r7, #20]
   return(result);
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e938:	62bb      	str	r3, [r7, #40]	; 0x28
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3314      	adds	r3, #20
 800e940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e942:	627a      	str	r2, [r7, #36]	; 0x24
 800e944:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e946:	6a39      	ldr	r1, [r7, #32]
 800e948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e94a:	e841 2300 	strex	r3, r2, [r1]
 800e94e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1e5      	bne.n	800e922 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	e000      	b.n	800e95c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800e95a:	2302      	movs	r3, #2
  }
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3730      	adds	r7, #48	; 0x30
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	0800ef69 	.word	0x0800ef69
 800e968:	0800f003 	.word	0x0800f003
 800e96c:	0800f17b 	.word	0x0800f17b

0800e970 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	4613      	mov	r3, r2
 800e97c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e984:	b2db      	uxtb	r3, r3
 800e986:	2b20      	cmp	r3, #32
 800e988:	d11d      	bne.n	800e9c6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d002      	beq.n	800e996 <HAL_UART_Receive_DMA+0x26>
 800e990:	88fb      	ldrh	r3, [r7, #6]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	e016      	b.n	800e9c8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d101      	bne.n	800e9a8 <HAL_UART_Receive_DMA+0x38>
 800e9a4:	2302      	movs	r3, #2
 800e9a6:	e00f      	b.n	800e9c8 <HAL_UART_Receive_DMA+0x58>
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e9b6:	88fb      	ldrh	r3, [r7, #6]
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	68b9      	ldr	r1, [r7, #8]
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f000 fc27 	bl	800f210 <UART_Start_Receive_DMA>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	e000      	b.n	800e9c8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800e9c6:	2302      	movs	r3, #2
  }
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b0ba      	sub	sp, #232	; 0xe8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ea02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea06:	f003 030f 	and.w	r3, r3, #15
 800ea0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ea0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d10f      	bne.n	800ea36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ea16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea1a:	f003 0320 	and.w	r3, r3, #32
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d009      	beq.n	800ea36 <HAL_UART_IRQHandler+0x66>
 800ea22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea26:	f003 0320 	and.w	r3, r3, #32
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d003      	beq.n	800ea36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 fd8f 	bl	800f552 <UART_Receive_IT>
      return;
 800ea34:	e256      	b.n	800eee4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ea36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f000 80de 	beq.w	800ebfc <HAL_UART_IRQHandler+0x22c>
 800ea40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea44:	f003 0301 	and.w	r3, r3, #1
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d106      	bne.n	800ea5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ea4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f000 80d1 	beq.w	800ebfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ea5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00b      	beq.n	800ea7e <HAL_UART_IRQHandler+0xae>
 800ea66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d005      	beq.n	800ea7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea76:	f043 0201 	orr.w	r2, r3, #1
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ea7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea82:	f003 0304 	and.w	r3, r3, #4
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00b      	beq.n	800eaa2 <HAL_UART_IRQHandler+0xd2>
 800ea8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea8e:	f003 0301 	and.w	r3, r3, #1
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d005      	beq.n	800eaa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea9a:	f043 0202 	orr.w	r2, r3, #2
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800eaa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaa6:	f003 0302 	and.w	r3, r3, #2
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00b      	beq.n	800eac6 <HAL_UART_IRQHandler+0xf6>
 800eaae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eab2:	f003 0301 	and.w	r3, r3, #1
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d005      	beq.n	800eac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eabe:	f043 0204 	orr.w	r2, r3, #4
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800eac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaca:	f003 0308 	and.w	r3, r3, #8
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d011      	beq.n	800eaf6 <HAL_UART_IRQHandler+0x126>
 800ead2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ead6:	f003 0320 	and.w	r3, r3, #32
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d105      	bne.n	800eaea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800eade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eae2:	f003 0301 	and.w	r3, r3, #1
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d005      	beq.n	800eaf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaee:	f043 0208 	orr.w	r2, r3, #8
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 81ed 	beq.w	800eeda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800eb00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb04:	f003 0320 	and.w	r3, r3, #32
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d008      	beq.n	800eb1e <HAL_UART_IRQHandler+0x14e>
 800eb0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb10:	f003 0320 	and.w	r3, r3, #32
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d002      	beq.n	800eb1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 fd1a 	bl	800f552 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	695b      	ldr	r3, [r3, #20]
 800eb24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb28:	2b40      	cmp	r3, #64	; 0x40
 800eb2a:	bf0c      	ite	eq
 800eb2c:	2301      	moveq	r3, #1
 800eb2e:	2300      	movne	r3, #0
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb3a:	f003 0308 	and.w	r3, r3, #8
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d103      	bne.n	800eb4a <HAL_UART_IRQHandler+0x17a>
 800eb42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d04f      	beq.n	800ebea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 fc22 	bl	800f394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	695b      	ldr	r3, [r3, #20]
 800eb56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb5a:	2b40      	cmp	r3, #64	; 0x40
 800eb5c:	d141      	bne.n	800ebe2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	3314      	adds	r3, #20
 800eb64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eb6c:	e853 3f00 	ldrex	r3, [r3]
 800eb70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800eb74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eb78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	3314      	adds	r3, #20
 800eb86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800eb8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800eb8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800eb96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800eb9a:	e841 2300 	strex	r3, r2, [r1]
 800eb9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800eba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1d9      	bne.n	800eb5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d013      	beq.n	800ebda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb6:	4a7d      	ldr	r2, [pc, #500]	; (800edac <HAL_UART_IRQHandler+0x3dc>)
 800ebb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fa fd82 	bl	80096c8 <HAL_DMA_Abort_IT>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d016      	beq.n	800ebf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebd8:	e00e      	b.n	800ebf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 f9ae 	bl	800ef3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebe0:	e00a      	b.n	800ebf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f000 f9aa 	bl	800ef3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebe8:	e006      	b.n	800ebf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 f9a6 	bl	800ef3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ebf6:	e170      	b.n	800eeda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebf8:	bf00      	nop
    return;
 800ebfa:	e16e      	b.n	800eeda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	f040 814a 	bne.w	800ee9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ec06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec0a:	f003 0310 	and.w	r3, r3, #16
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f000 8143 	beq.w	800ee9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ec14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec18:	f003 0310 	and.w	r3, r3, #16
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f000 813c 	beq.w	800ee9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ec22:	2300      	movs	r3, #0
 800ec24:	60bb      	str	r3, [r7, #8]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	60bb      	str	r3, [r7, #8]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	60bb      	str	r3, [r7, #8]
 800ec36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	695b      	ldr	r3, [r3, #20]
 800ec3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec42:	2b40      	cmp	r3, #64	; 0x40
 800ec44:	f040 80b4 	bne.w	800edb0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ec54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f000 8140 	beq.w	800eede <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ec62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ec66:	429a      	cmp	r2, r3
 800ec68:	f080 8139 	bcs.w	800eede <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ec72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec78:	69db      	ldr	r3, [r3, #28]
 800ec7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec7e:	f000 8088 	beq.w	800ed92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	330c      	adds	r3, #12
 800ec88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ec90:	e853 3f00 	ldrex	r3, [r3]
 800ec94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ec98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ec9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	330c      	adds	r3, #12
 800ecaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ecae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ecb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ecba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ecbe:	e841 2300 	strex	r3, r2, [r1]
 800ecc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ecc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1d9      	bne.n	800ec82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3314      	adds	r3, #20
 800ecd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecd8:	e853 3f00 	ldrex	r3, [r3]
 800ecdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ecde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ece0:	f023 0301 	bic.w	r3, r3, #1
 800ece4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	3314      	adds	r3, #20
 800ecee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ecf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ecf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ecfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ecfe:	e841 2300 	strex	r3, r2, [r1]
 800ed02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ed04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1e1      	bne.n	800ecce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	3314      	adds	r3, #20
 800ed10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed14:	e853 3f00 	ldrex	r3, [r3]
 800ed18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ed1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	3314      	adds	r3, #20
 800ed2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ed2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ed30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ed34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ed36:	e841 2300 	strex	r3, r2, [r1]
 800ed3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ed3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1e3      	bne.n	800ed0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2220      	movs	r2, #32
 800ed46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	330c      	adds	r3, #12
 800ed56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed5a:	e853 3f00 	ldrex	r3, [r3]
 800ed5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ed60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed62:	f023 0310 	bic.w	r3, r3, #16
 800ed66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	330c      	adds	r3, #12
 800ed70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ed74:	65ba      	str	r2, [r7, #88]	; 0x58
 800ed76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed7c:	e841 2300 	strex	r3, r2, [r1]
 800ed80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d1e3      	bne.n	800ed50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fa fc2b 	bl	80095e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	4619      	mov	r1, r3
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 f8d4 	bl	800ef50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800eda8:	e099      	b.n	800eede <HAL_UART_IRQHandler+0x50e>
 800edaa:	bf00      	nop
 800edac:	0800f45b 	.word	0x0800f45b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800edb8:	b29b      	uxth	r3, r3
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f000 808b 	beq.w	800eee2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800edcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	f000 8086 	beq.w	800eee2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	330c      	adds	r3, #12
 800eddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede0:	e853 3f00 	ldrex	r3, [r3]
 800ede4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ede6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ede8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800edec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	330c      	adds	r3, #12
 800edf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800edfa:	647a      	str	r2, [r7, #68]	; 0x44
 800edfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee02:	e841 2300 	strex	r3, r2, [r1]
 800ee06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d1e3      	bne.n	800edd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	3314      	adds	r3, #20
 800ee14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee18:	e853 3f00 	ldrex	r3, [r3]
 800ee1c:	623b      	str	r3, [r7, #32]
   return(result);
 800ee1e:	6a3b      	ldr	r3, [r7, #32]
 800ee20:	f023 0301 	bic.w	r3, r3, #1
 800ee24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	3314      	adds	r3, #20
 800ee2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ee32:	633a      	str	r2, [r7, #48]	; 0x30
 800ee34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee3a:	e841 2300 	strex	r3, r2, [r1]
 800ee3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1e3      	bne.n	800ee0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2220      	movs	r2, #32
 800ee4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2200      	movs	r2, #0
 800ee52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	330c      	adds	r3, #12
 800ee5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	e853 3f00 	ldrex	r3, [r3]
 800ee62:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f023 0310 	bic.w	r3, r3, #16
 800ee6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	330c      	adds	r3, #12
 800ee74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ee78:	61fa      	str	r2, [r7, #28]
 800ee7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee7c:	69b9      	ldr	r1, [r7, #24]
 800ee7e:	69fa      	ldr	r2, [r7, #28]
 800ee80:	e841 2300 	strex	r3, r2, [r1]
 800ee84:	617b      	str	r3, [r7, #20]
   return(result);
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d1e3      	bne.n	800ee54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ee8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ee90:	4619      	mov	r1, r3
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 f85c 	bl	800ef50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ee98:	e023      	b.n	800eee2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ee9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d009      	beq.n	800eeba <HAL_UART_IRQHandler+0x4ea>
 800eea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eeaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d003      	beq.n	800eeba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 fae5 	bl	800f482 <UART_Transmit_IT>
    return;
 800eeb8:	e014      	b.n	800eee4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800eeba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00e      	beq.n	800eee4 <HAL_UART_IRQHandler+0x514>
 800eec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eeca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d008      	beq.n	800eee4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 fb25 	bl	800f522 <UART_EndTransmit_IT>
    return;
 800eed8:	e004      	b.n	800eee4 <HAL_UART_IRQHandler+0x514>
    return;
 800eeda:	bf00      	nop
 800eedc:	e002      	b.n	800eee4 <HAL_UART_IRQHandler+0x514>
      return;
 800eede:	bf00      	nop
 800eee0:	e000      	b.n	800eee4 <HAL_UART_IRQHandler+0x514>
      return;
 800eee2:	bf00      	nop
  }
}
 800eee4:	37e8      	adds	r7, #232	; 0xe8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop

0800eeec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ef08:	bf00      	nop
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ef1c:	bf00      	nop
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr

0800ef28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ef30:	bf00      	nop
 800ef32:	370c      	adds	r7, #12
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ef44:	bf00      	nop
 800ef46:	370c      	adds	r7, #12
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	460b      	mov	r3, r1
 800ef5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ef5c:	bf00      	nop
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b090      	sub	sp, #64	; 0x40
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef74:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d137      	bne.n	800eff4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ef84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef86:	2200      	movs	r2, #0
 800ef88:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ef8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	3314      	adds	r3, #20
 800ef90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef94:	e853 3f00 	ldrex	r3, [r3]
 800ef98:	623b      	str	r3, [r7, #32]
   return(result);
 800ef9a:	6a3b      	ldr	r3, [r7, #32]
 800ef9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efa0:	63bb      	str	r3, [r7, #56]	; 0x38
 800efa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	3314      	adds	r3, #20
 800efa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efaa:	633a      	str	r2, [r7, #48]	; 0x30
 800efac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800efb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efb2:	e841 2300 	strex	r3, r2, [r1]
 800efb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800efb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d1e5      	bne.n	800ef8a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800efbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	330c      	adds	r3, #12
 800efc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	e853 3f00 	ldrex	r3, [r3]
 800efcc:	60fb      	str	r3, [r7, #12]
   return(result);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efd4:	637b      	str	r3, [r7, #52]	; 0x34
 800efd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	330c      	adds	r3, #12
 800efdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efde:	61fa      	str	r2, [r7, #28]
 800efe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe2:	69b9      	ldr	r1, [r7, #24]
 800efe4:	69fa      	ldr	r2, [r7, #28]
 800efe6:	e841 2300 	strex	r3, r2, [r1]
 800efea:	617b      	str	r3, [r7, #20]
   return(result);
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1e5      	bne.n	800efbe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eff2:	e002      	b.n	800effa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800eff4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eff6:	f7ff ff79 	bl	800eeec <HAL_UART_TxCpltCallback>
}
 800effa:	bf00      	nop
 800effc:	3740      	adds	r7, #64	; 0x40
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b084      	sub	sp, #16
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f00e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f7ff ff75 	bl	800ef00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f016:	bf00      	nop
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b09c      	sub	sp, #112	; 0x70
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f02a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f036:	2b00      	cmp	r3, #0
 800f038:	d172      	bne.n	800f120 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f03a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f03c:	2200      	movs	r2, #0
 800f03e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	330c      	adds	r3, #12
 800f046:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f04a:	e853 3f00 	ldrex	r3, [r3]
 800f04e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f056:	66bb      	str	r3, [r7, #104]	; 0x68
 800f058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	330c      	adds	r3, #12
 800f05e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f060:	65ba      	str	r2, [r7, #88]	; 0x58
 800f062:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f066:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f068:	e841 2300 	strex	r3, r2, [r1]
 800f06c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f070:	2b00      	cmp	r3, #0
 800f072:	d1e5      	bne.n	800f040 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	3314      	adds	r3, #20
 800f07a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07e:	e853 3f00 	ldrex	r3, [r3]
 800f082:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f086:	f023 0301 	bic.w	r3, r3, #1
 800f08a:	667b      	str	r3, [r7, #100]	; 0x64
 800f08c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	3314      	adds	r3, #20
 800f092:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f094:	647a      	str	r2, [r7, #68]	; 0x44
 800f096:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f098:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f09a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f09c:	e841 2300 	strex	r3, r2, [r1]
 800f0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d1e5      	bne.n	800f074 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	3314      	adds	r3, #20
 800f0ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b2:	e853 3f00 	ldrex	r3, [r3]
 800f0b6:	623b      	str	r3, [r7, #32]
   return(result);
 800f0b8:	6a3b      	ldr	r3, [r7, #32]
 800f0ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0be:	663b      	str	r3, [r7, #96]	; 0x60
 800f0c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	3314      	adds	r3, #20
 800f0c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0c8:	633a      	str	r2, [r7, #48]	; 0x30
 800f0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0d0:	e841 2300 	strex	r3, r2, [r1]
 800f0d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d1e5      	bne.n	800f0a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f0dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0de:	2220      	movs	r2, #32
 800f0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d119      	bne.n	800f120 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	330c      	adds	r3, #12
 800f0f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	e853 3f00 	ldrex	r3, [r3]
 800f0fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f023 0310 	bic.w	r3, r3, #16
 800f102:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	330c      	adds	r3, #12
 800f10a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f10c:	61fa      	str	r2, [r7, #28]
 800f10e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f110:	69b9      	ldr	r1, [r7, #24]
 800f112:	69fa      	ldr	r2, [r7, #28]
 800f114:	e841 2300 	strex	r3, r2, [r1]
 800f118:	617b      	str	r3, [r7, #20]
   return(result);
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d1e5      	bne.n	800f0ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f124:	2b01      	cmp	r3, #1
 800f126:	d106      	bne.n	800f136 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f12a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f12c:	4619      	mov	r1, r3
 800f12e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f130:	f7ff ff0e 	bl	800ef50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f134:	e002      	b.n	800f13c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800f136:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f138:	f7ff feec 	bl	800ef14 <HAL_UART_RxCpltCallback>
}
 800f13c:	bf00      	nop
 800f13e:	3770      	adds	r7, #112	; 0x70
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f150:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f156:	2b01      	cmp	r3, #1
 800f158:	d108      	bne.n	800f16c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f15e:	085b      	lsrs	r3, r3, #1
 800f160:	b29b      	uxth	r3, r3
 800f162:	4619      	mov	r1, r3
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f7ff fef3 	bl	800ef50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f16a:	e002      	b.n	800f172 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f7ff fedb 	bl	800ef28 <HAL_UART_RxHalfCpltCallback>
}
 800f172:	bf00      	nop
 800f174:	3710      	adds	r7, #16
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}

0800f17a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f17a:	b580      	push	{r7, lr}
 800f17c:	b084      	sub	sp, #16
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f182:	2300      	movs	r3, #0
 800f184:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f18a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	695b      	ldr	r3, [r3, #20]
 800f192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f196:	2b80      	cmp	r3, #128	; 0x80
 800f198:	bf0c      	ite	eq
 800f19a:	2301      	moveq	r3, #1
 800f19c:	2300      	movne	r3, #0
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	2b21      	cmp	r3, #33	; 0x21
 800f1ac:	d108      	bne.n	800f1c0 <UART_DMAError+0x46>
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d005      	beq.n	800f1c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800f1ba:	68b8      	ldr	r0, [r7, #8]
 800f1bc:	f000 f8c2 	bl	800f344 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	695b      	ldr	r3, [r3, #20]
 800f1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1ca:	2b40      	cmp	r3, #64	; 0x40
 800f1cc:	bf0c      	ite	eq
 800f1ce:	2301      	moveq	r3, #1
 800f1d0:	2300      	movne	r3, #0
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	2b22      	cmp	r3, #34	; 0x22
 800f1e0:	d108      	bne.n	800f1f4 <UART_DMAError+0x7a>
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d005      	beq.n	800f1f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800f1ee:	68b8      	ldr	r0, [r7, #8]
 800f1f0:	f000 f8d0 	bl	800f394 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f8:	f043 0210 	orr.w	r2, r3, #16
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f200:	68b8      	ldr	r0, [r7, #8]
 800f202:	f7ff fe9b 	bl	800ef3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f206:	bf00      	nop
 800f208:	3710      	adds	r7, #16
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
	...

0800f210 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b098      	sub	sp, #96	; 0x60
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	4613      	mov	r3, r2
 800f21c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	88fa      	ldrh	r2, [r7, #6]
 800f228:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2200      	movs	r2, #0
 800f22e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2222      	movs	r2, #34	; 0x22
 800f234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f23c:	4a3e      	ldr	r2, [pc, #248]	; (800f338 <UART_Start_Receive_DMA+0x128>)
 800f23e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f244:	4a3d      	ldr	r2, [pc, #244]	; (800f33c <UART_Start_Receive_DMA+0x12c>)
 800f246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f24c:	4a3c      	ldr	r2, [pc, #240]	; (800f340 <UART_Start_Receive_DMA+0x130>)
 800f24e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f254:	2200      	movs	r2, #0
 800f256:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800f258:	f107 0308 	add.w	r3, r7, #8
 800f25c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	3304      	adds	r3, #4
 800f268:	4619      	mov	r1, r3
 800f26a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	88fb      	ldrh	r3, [r7, #6]
 800f270:	f7fa f962 	bl	8009538 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800f274:	2300      	movs	r3, #0
 800f276:	613b      	str	r3, [r7, #16]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	613b      	str	r3, [r7, #16]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	613b      	str	r3, [r7, #16]
 800f288:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2200      	movs	r2, #0
 800f28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	330c      	adds	r3, #12
 800f298:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f29a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f29c:	e853 3f00 	ldrex	r3, [r3]
 800f2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f2a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	330c      	adds	r3, #12
 800f2b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f2b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f2b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f2b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f2ba:	e841 2300 	strex	r3, r2, [r1]
 800f2be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f2c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1e5      	bne.n	800f292 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3314      	adds	r3, #20
 800f2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d0:	e853 3f00 	ldrex	r3, [r3]
 800f2d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d8:	f043 0301 	orr.w	r3, r3, #1
 800f2dc:	657b      	str	r3, [r7, #84]	; 0x54
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3314      	adds	r3, #20
 800f2e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f2e6:	63ba      	str	r2, [r7, #56]	; 0x38
 800f2e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f2ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2ee:	e841 2300 	strex	r3, r2, [r1]
 800f2f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d1e5      	bne.n	800f2c6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	3314      	adds	r3, #20
 800f300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	e853 3f00 	ldrex	r3, [r3]
 800f308:	617b      	str	r3, [r7, #20]
   return(result);
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f310:	653b      	str	r3, [r7, #80]	; 0x50
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	3314      	adds	r3, #20
 800f318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f31a:	627a      	str	r2, [r7, #36]	; 0x24
 800f31c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31e:	6a39      	ldr	r1, [r7, #32]
 800f320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f322:	e841 2300 	strex	r3, r2, [r1]
 800f326:	61fb      	str	r3, [r7, #28]
   return(result);
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d1e5      	bne.n	800f2fa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800f32e:	2300      	movs	r3, #0
}
 800f330:	4618      	mov	r0, r3
 800f332:	3760      	adds	r7, #96	; 0x60
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	0800f01f 	.word	0x0800f01f
 800f33c:	0800f145 	.word	0x0800f145
 800f340:	0800f17b 	.word	0x0800f17b

0800f344 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f344:	b480      	push	{r7}
 800f346:	b089      	sub	sp, #36	; 0x24
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	330c      	adds	r3, #12
 800f352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	e853 3f00 	ldrex	r3, [r3]
 800f35a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f362:	61fb      	str	r3, [r7, #28]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	330c      	adds	r3, #12
 800f36a:	69fa      	ldr	r2, [r7, #28]
 800f36c:	61ba      	str	r2, [r7, #24]
 800f36e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f370:	6979      	ldr	r1, [r7, #20]
 800f372:	69ba      	ldr	r2, [r7, #24]
 800f374:	e841 2300 	strex	r3, r2, [r1]
 800f378:	613b      	str	r3, [r7, #16]
   return(result);
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d1e5      	bne.n	800f34c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2220      	movs	r2, #32
 800f384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800f388:	bf00      	nop
 800f38a:	3724      	adds	r7, #36	; 0x24
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f394:	b480      	push	{r7}
 800f396:	b095      	sub	sp, #84	; 0x54
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	330c      	adds	r3, #12
 800f3a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a6:	e853 3f00 	ldrex	r3, [r3]
 800f3aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	330c      	adds	r3, #12
 800f3ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f3bc:	643a      	str	r2, [r7, #64]	; 0x40
 800f3be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f3c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f3c4:	e841 2300 	strex	r3, r2, [r1]
 800f3c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1e5      	bne.n	800f39c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	3314      	adds	r3, #20
 800f3d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d8:	6a3b      	ldr	r3, [r7, #32]
 800f3da:	e853 3f00 	ldrex	r3, [r3]
 800f3de:	61fb      	str	r3, [r7, #28]
   return(result);
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	f023 0301 	bic.w	r3, r3, #1
 800f3e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	3314      	adds	r3, #20
 800f3ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f3f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3f8:	e841 2300 	strex	r3, r2, [r1]
 800f3fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f400:	2b00      	cmp	r3, #0
 800f402:	d1e5      	bne.n	800f3d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d119      	bne.n	800f440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	330c      	adds	r3, #12
 800f412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	e853 3f00 	ldrex	r3, [r3]
 800f41a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	f023 0310 	bic.w	r3, r3, #16
 800f422:	647b      	str	r3, [r7, #68]	; 0x44
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	330c      	adds	r3, #12
 800f42a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f42c:	61ba      	str	r2, [r7, #24]
 800f42e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f430:	6979      	ldr	r1, [r7, #20]
 800f432:	69ba      	ldr	r2, [r7, #24]
 800f434:	e841 2300 	strex	r3, r2, [r1]
 800f438:	613b      	str	r3, [r7, #16]
   return(result);
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1e5      	bne.n	800f40c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2220      	movs	r2, #32
 800f444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f44e:	bf00      	nop
 800f450:	3754      	adds	r7, #84	; 0x54
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr

0800f45a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b084      	sub	sp, #16
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2200      	movs	r2, #0
 800f46c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2200      	movs	r2, #0
 800f472:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f7ff fd61 	bl	800ef3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f47a:	bf00      	nop
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f482:	b480      	push	{r7}
 800f484:	b085      	sub	sp, #20
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f490:	b2db      	uxtb	r3, r3
 800f492:	2b21      	cmp	r3, #33	; 0x21
 800f494:	d13e      	bne.n	800f514 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f49e:	d114      	bne.n	800f4ca <UART_Transmit_IT+0x48>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	691b      	ldr	r3, [r3, #16]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d110      	bne.n	800f4ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6a1b      	ldr	r3, [r3, #32]
 800f4ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	881b      	ldrh	r3, [r3, #0]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f4bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6a1b      	ldr	r3, [r3, #32]
 800f4c2:	1c9a      	adds	r2, r3, #2
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	621a      	str	r2, [r3, #32]
 800f4c8:	e008      	b.n	800f4dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6a1b      	ldr	r3, [r3, #32]
 800f4ce:	1c59      	adds	r1, r3, #1
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	6211      	str	r1, [r2, #32]
 800f4d4:	781a      	ldrb	r2, [r3, #0]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d10f      	bne.n	800f510 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	68da      	ldr	r2, [r3, #12]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f4fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	68da      	ldr	r2, [r3, #12]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f50e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f510:	2300      	movs	r3, #0
 800f512:	e000      	b.n	800f516 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800f514:	2302      	movs	r3, #2
  }
}
 800f516:	4618      	mov	r0, r3
 800f518:	3714      	adds	r7, #20
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr

0800f522 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f522:	b580      	push	{r7, lr}
 800f524:	b082      	sub	sp, #8
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	68da      	ldr	r2, [r3, #12]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f538:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2220      	movs	r2, #32
 800f53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7ff fcd2 	bl	800eeec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b08c      	sub	sp, #48	; 0x30
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f560:	b2db      	uxtb	r3, r3
 800f562:	2b22      	cmp	r3, #34	; 0x22
 800f564:	f040 80ab 	bne.w	800f6be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f570:	d117      	bne.n	800f5a2 <UART_Receive_IT+0x50>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	691b      	ldr	r3, [r3, #16]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d113      	bne.n	800f5a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800f57a:	2300      	movs	r3, #0
 800f57c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f582:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f590:	b29a      	uxth	r2, r3
 800f592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f59a:	1c9a      	adds	r2, r3, #2
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	629a      	str	r2, [r3, #40]	; 0x28
 800f5a0:	e026      	b.n	800f5f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5b4:	d007      	beq.n	800f5c6 <UART_Receive_IT+0x74>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d10a      	bne.n	800f5d4 <UART_Receive_IT+0x82>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	691b      	ldr	r3, [r3, #16]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d106      	bne.n	800f5d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	b2da      	uxtb	r2, r3
 800f5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d0:	701a      	strb	r2, [r3, #0]
 800f5d2:	e008      	b.n	800f5e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5e0:	b2da      	uxtb	r2, r3
 800f5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5ea:	1c5a      	adds	r2, r3, #1
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f600:	2b00      	cmp	r3, #0
 800f602:	d15a      	bne.n	800f6ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	68da      	ldr	r2, [r3, #12]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f022 0220 	bic.w	r2, r2, #32
 800f612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	68da      	ldr	r2, [r3, #12]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	695a      	ldr	r2, [r3, #20]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f022 0201 	bic.w	r2, r2, #1
 800f632:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2220      	movs	r2, #32
 800f638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f640:	2b01      	cmp	r3, #1
 800f642:	d135      	bne.n	800f6b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	330c      	adds	r3, #12
 800f650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	e853 3f00 	ldrex	r3, [r3]
 800f658:	613b      	str	r3, [r7, #16]
   return(result);
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	f023 0310 	bic.w	r3, r3, #16
 800f660:	627b      	str	r3, [r7, #36]	; 0x24
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	330c      	adds	r3, #12
 800f668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f66a:	623a      	str	r2, [r7, #32]
 800f66c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f66e:	69f9      	ldr	r1, [r7, #28]
 800f670:	6a3a      	ldr	r2, [r7, #32]
 800f672:	e841 2300 	strex	r3, r2, [r1]
 800f676:	61bb      	str	r3, [r7, #24]
   return(result);
 800f678:	69bb      	ldr	r3, [r7, #24]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1e5      	bne.n	800f64a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f003 0310 	and.w	r3, r3, #16
 800f688:	2b10      	cmp	r3, #16
 800f68a:	d10a      	bne.n	800f6a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f68c:	2300      	movs	r3, #0
 800f68e:	60fb      	str	r3, [r7, #12]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	60fb      	str	r3, [r7, #12]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	60fb      	str	r3, [r7, #12]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f7ff fc51 	bl	800ef50 <HAL_UARTEx_RxEventCallback>
 800f6ae:	e002      	b.n	800f6b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f7ff fc2f 	bl	800ef14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	e002      	b.n	800f6c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	e000      	b.n	800f6c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800f6be:	2302      	movs	r3, #2
  }
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3730      	adds	r7, #48	; 0x30
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6cc:	b09f      	sub	sp, #124	; 0x7c
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	691b      	ldr	r3, [r3, #16]
 800f6d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6de:	68d9      	ldr	r1, [r3, #12]
 800f6e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	ea40 0301 	orr.w	r3, r0, r1
 800f6e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f6ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6ec:	689a      	ldr	r2, [r3, #8]
 800f6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6f0:	691b      	ldr	r3, [r3, #16]
 800f6f2:	431a      	orrs	r2, r3
 800f6f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6f6:	695b      	ldr	r3, [r3, #20]
 800f6f8:	431a      	orrs	r2, r3
 800f6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6fc:	69db      	ldr	r3, [r3, #28]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800f702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f70c:	f021 010c 	bic.w	r1, r1, #12
 800f710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f716:	430b      	orrs	r3, r1
 800f718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f71a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	695b      	ldr	r3, [r3, #20]
 800f720:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f726:	6999      	ldr	r1, [r3, #24]
 800f728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	ea40 0301 	orr.w	r3, r0, r1
 800f730:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	4bc5      	ldr	r3, [pc, #788]	; (800fa4c <UART_SetConfig+0x384>)
 800f738:	429a      	cmp	r2, r3
 800f73a:	d004      	beq.n	800f746 <UART_SetConfig+0x7e>
 800f73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	4bc3      	ldr	r3, [pc, #780]	; (800fa50 <UART_SetConfig+0x388>)
 800f742:	429a      	cmp	r2, r3
 800f744:	d103      	bne.n	800f74e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f746:	f7fe f979 	bl	800da3c <HAL_RCC_GetPCLK2Freq>
 800f74a:	6778      	str	r0, [r7, #116]	; 0x74
 800f74c:	e002      	b.n	800f754 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f74e:	f7fe f961 	bl	800da14 <HAL_RCC_GetPCLK1Freq>
 800f752:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f756:	69db      	ldr	r3, [r3, #28]
 800f758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f75c:	f040 80b6 	bne.w	800f8cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f762:	461c      	mov	r4, r3
 800f764:	f04f 0500 	mov.w	r5, #0
 800f768:	4622      	mov	r2, r4
 800f76a:	462b      	mov	r3, r5
 800f76c:	1891      	adds	r1, r2, r2
 800f76e:	6439      	str	r1, [r7, #64]	; 0x40
 800f770:	415b      	adcs	r3, r3
 800f772:	647b      	str	r3, [r7, #68]	; 0x44
 800f774:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f778:	1912      	adds	r2, r2, r4
 800f77a:	eb45 0303 	adc.w	r3, r5, r3
 800f77e:	f04f 0000 	mov.w	r0, #0
 800f782:	f04f 0100 	mov.w	r1, #0
 800f786:	00d9      	lsls	r1, r3, #3
 800f788:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f78c:	00d0      	lsls	r0, r2, #3
 800f78e:	4602      	mov	r2, r0
 800f790:	460b      	mov	r3, r1
 800f792:	1911      	adds	r1, r2, r4
 800f794:	6639      	str	r1, [r7, #96]	; 0x60
 800f796:	416b      	adcs	r3, r5
 800f798:	667b      	str	r3, [r7, #100]	; 0x64
 800f79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	f04f 0300 	mov.w	r3, #0
 800f7a4:	1891      	adds	r1, r2, r2
 800f7a6:	63b9      	str	r1, [r7, #56]	; 0x38
 800f7a8:	415b      	adcs	r3, r3
 800f7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f7b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800f7b4:	f7f1 fa80 	bl	8000cb8 <__aeabi_uldivmod>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	4ba5      	ldr	r3, [pc, #660]	; (800fa54 <UART_SetConfig+0x38c>)
 800f7be:	fba3 2302 	umull	r2, r3, r3, r2
 800f7c2:	095b      	lsrs	r3, r3, #5
 800f7c4:	011e      	lsls	r6, r3, #4
 800f7c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7c8:	461c      	mov	r4, r3
 800f7ca:	f04f 0500 	mov.w	r5, #0
 800f7ce:	4622      	mov	r2, r4
 800f7d0:	462b      	mov	r3, r5
 800f7d2:	1891      	adds	r1, r2, r2
 800f7d4:	6339      	str	r1, [r7, #48]	; 0x30
 800f7d6:	415b      	adcs	r3, r3
 800f7d8:	637b      	str	r3, [r7, #52]	; 0x34
 800f7da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f7de:	1912      	adds	r2, r2, r4
 800f7e0:	eb45 0303 	adc.w	r3, r5, r3
 800f7e4:	f04f 0000 	mov.w	r0, #0
 800f7e8:	f04f 0100 	mov.w	r1, #0
 800f7ec:	00d9      	lsls	r1, r3, #3
 800f7ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f7f2:	00d0      	lsls	r0, r2, #3
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	1911      	adds	r1, r2, r4
 800f7fa:	65b9      	str	r1, [r7, #88]	; 0x58
 800f7fc:	416b      	adcs	r3, r5
 800f7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	461a      	mov	r2, r3
 800f806:	f04f 0300 	mov.w	r3, #0
 800f80a:	1891      	adds	r1, r2, r2
 800f80c:	62b9      	str	r1, [r7, #40]	; 0x28
 800f80e:	415b      	adcs	r3, r3
 800f810:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f816:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800f81a:	f7f1 fa4d 	bl	8000cb8 <__aeabi_uldivmod>
 800f81e:	4602      	mov	r2, r0
 800f820:	460b      	mov	r3, r1
 800f822:	4b8c      	ldr	r3, [pc, #560]	; (800fa54 <UART_SetConfig+0x38c>)
 800f824:	fba3 1302 	umull	r1, r3, r3, r2
 800f828:	095b      	lsrs	r3, r3, #5
 800f82a:	2164      	movs	r1, #100	; 0x64
 800f82c:	fb01 f303 	mul.w	r3, r1, r3
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	00db      	lsls	r3, r3, #3
 800f834:	3332      	adds	r3, #50	; 0x32
 800f836:	4a87      	ldr	r2, [pc, #540]	; (800fa54 <UART_SetConfig+0x38c>)
 800f838:	fba2 2303 	umull	r2, r3, r2, r3
 800f83c:	095b      	lsrs	r3, r3, #5
 800f83e:	005b      	lsls	r3, r3, #1
 800f840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f844:	441e      	add	r6, r3
 800f846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f848:	4618      	mov	r0, r3
 800f84a:	f04f 0100 	mov.w	r1, #0
 800f84e:	4602      	mov	r2, r0
 800f850:	460b      	mov	r3, r1
 800f852:	1894      	adds	r4, r2, r2
 800f854:	623c      	str	r4, [r7, #32]
 800f856:	415b      	adcs	r3, r3
 800f858:	627b      	str	r3, [r7, #36]	; 0x24
 800f85a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f85e:	1812      	adds	r2, r2, r0
 800f860:	eb41 0303 	adc.w	r3, r1, r3
 800f864:	f04f 0400 	mov.w	r4, #0
 800f868:	f04f 0500 	mov.w	r5, #0
 800f86c:	00dd      	lsls	r5, r3, #3
 800f86e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f872:	00d4      	lsls	r4, r2, #3
 800f874:	4622      	mov	r2, r4
 800f876:	462b      	mov	r3, r5
 800f878:	1814      	adds	r4, r2, r0
 800f87a:	653c      	str	r4, [r7, #80]	; 0x50
 800f87c:	414b      	adcs	r3, r1
 800f87e:	657b      	str	r3, [r7, #84]	; 0x54
 800f880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	461a      	mov	r2, r3
 800f886:	f04f 0300 	mov.w	r3, #0
 800f88a:	1891      	adds	r1, r2, r2
 800f88c:	61b9      	str	r1, [r7, #24]
 800f88e:	415b      	adcs	r3, r3
 800f890:	61fb      	str	r3, [r7, #28]
 800f892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f896:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f89a:	f7f1 fa0d 	bl	8000cb8 <__aeabi_uldivmod>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	4b6c      	ldr	r3, [pc, #432]	; (800fa54 <UART_SetConfig+0x38c>)
 800f8a4:	fba3 1302 	umull	r1, r3, r3, r2
 800f8a8:	095b      	lsrs	r3, r3, #5
 800f8aa:	2164      	movs	r1, #100	; 0x64
 800f8ac:	fb01 f303 	mul.w	r3, r1, r3
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	00db      	lsls	r3, r3, #3
 800f8b4:	3332      	adds	r3, #50	; 0x32
 800f8b6:	4a67      	ldr	r2, [pc, #412]	; (800fa54 <UART_SetConfig+0x38c>)
 800f8b8:	fba2 2303 	umull	r2, r3, r2, r3
 800f8bc:	095b      	lsrs	r3, r3, #5
 800f8be:	f003 0207 	and.w	r2, r3, #7
 800f8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4432      	add	r2, r6
 800f8c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f8ca:	e0b9      	b.n	800fa40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f8cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8ce:	461c      	mov	r4, r3
 800f8d0:	f04f 0500 	mov.w	r5, #0
 800f8d4:	4622      	mov	r2, r4
 800f8d6:	462b      	mov	r3, r5
 800f8d8:	1891      	adds	r1, r2, r2
 800f8da:	6139      	str	r1, [r7, #16]
 800f8dc:	415b      	adcs	r3, r3
 800f8de:	617b      	str	r3, [r7, #20]
 800f8e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f8e4:	1912      	adds	r2, r2, r4
 800f8e6:	eb45 0303 	adc.w	r3, r5, r3
 800f8ea:	f04f 0000 	mov.w	r0, #0
 800f8ee:	f04f 0100 	mov.w	r1, #0
 800f8f2:	00d9      	lsls	r1, r3, #3
 800f8f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f8f8:	00d0      	lsls	r0, r2, #3
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	eb12 0804 	adds.w	r8, r2, r4
 800f902:	eb43 0905 	adc.w	r9, r3, r5
 800f906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	4618      	mov	r0, r3
 800f90c:	f04f 0100 	mov.w	r1, #0
 800f910:	f04f 0200 	mov.w	r2, #0
 800f914:	f04f 0300 	mov.w	r3, #0
 800f918:	008b      	lsls	r3, r1, #2
 800f91a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f91e:	0082      	lsls	r2, r0, #2
 800f920:	4640      	mov	r0, r8
 800f922:	4649      	mov	r1, r9
 800f924:	f7f1 f9c8 	bl	8000cb8 <__aeabi_uldivmod>
 800f928:	4602      	mov	r2, r0
 800f92a:	460b      	mov	r3, r1
 800f92c:	4b49      	ldr	r3, [pc, #292]	; (800fa54 <UART_SetConfig+0x38c>)
 800f92e:	fba3 2302 	umull	r2, r3, r3, r2
 800f932:	095b      	lsrs	r3, r3, #5
 800f934:	011e      	lsls	r6, r3, #4
 800f936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f938:	4618      	mov	r0, r3
 800f93a:	f04f 0100 	mov.w	r1, #0
 800f93e:	4602      	mov	r2, r0
 800f940:	460b      	mov	r3, r1
 800f942:	1894      	adds	r4, r2, r2
 800f944:	60bc      	str	r4, [r7, #8]
 800f946:	415b      	adcs	r3, r3
 800f948:	60fb      	str	r3, [r7, #12]
 800f94a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f94e:	1812      	adds	r2, r2, r0
 800f950:	eb41 0303 	adc.w	r3, r1, r3
 800f954:	f04f 0400 	mov.w	r4, #0
 800f958:	f04f 0500 	mov.w	r5, #0
 800f95c:	00dd      	lsls	r5, r3, #3
 800f95e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f962:	00d4      	lsls	r4, r2, #3
 800f964:	4622      	mov	r2, r4
 800f966:	462b      	mov	r3, r5
 800f968:	1814      	adds	r4, r2, r0
 800f96a:	64bc      	str	r4, [r7, #72]	; 0x48
 800f96c:	414b      	adcs	r3, r1
 800f96e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	4618      	mov	r0, r3
 800f976:	f04f 0100 	mov.w	r1, #0
 800f97a:	f04f 0200 	mov.w	r2, #0
 800f97e:	f04f 0300 	mov.w	r3, #0
 800f982:	008b      	lsls	r3, r1, #2
 800f984:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f988:	0082      	lsls	r2, r0, #2
 800f98a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800f98e:	f7f1 f993 	bl	8000cb8 <__aeabi_uldivmod>
 800f992:	4602      	mov	r2, r0
 800f994:	460b      	mov	r3, r1
 800f996:	4b2f      	ldr	r3, [pc, #188]	; (800fa54 <UART_SetConfig+0x38c>)
 800f998:	fba3 1302 	umull	r1, r3, r3, r2
 800f99c:	095b      	lsrs	r3, r3, #5
 800f99e:	2164      	movs	r1, #100	; 0x64
 800f9a0:	fb01 f303 	mul.w	r3, r1, r3
 800f9a4:	1ad3      	subs	r3, r2, r3
 800f9a6:	011b      	lsls	r3, r3, #4
 800f9a8:	3332      	adds	r3, #50	; 0x32
 800f9aa:	4a2a      	ldr	r2, [pc, #168]	; (800fa54 <UART_SetConfig+0x38c>)
 800f9ac:	fba2 2303 	umull	r2, r3, r2, r3
 800f9b0:	095b      	lsrs	r3, r3, #5
 800f9b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9b6:	441e      	add	r6, r3
 800f9b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f04f 0100 	mov.w	r1, #0
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	1894      	adds	r4, r2, r2
 800f9c6:	603c      	str	r4, [r7, #0]
 800f9c8:	415b      	adcs	r3, r3
 800f9ca:	607b      	str	r3, [r7, #4]
 800f9cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9d0:	1812      	adds	r2, r2, r0
 800f9d2:	eb41 0303 	adc.w	r3, r1, r3
 800f9d6:	f04f 0400 	mov.w	r4, #0
 800f9da:	f04f 0500 	mov.w	r5, #0
 800f9de:	00dd      	lsls	r5, r3, #3
 800f9e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f9e4:	00d4      	lsls	r4, r2, #3
 800f9e6:	4622      	mov	r2, r4
 800f9e8:	462b      	mov	r3, r5
 800f9ea:	eb12 0a00 	adds.w	sl, r2, r0
 800f9ee:	eb43 0b01 	adc.w	fp, r3, r1
 800f9f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f04f 0100 	mov.w	r1, #0
 800f9fc:	f04f 0200 	mov.w	r2, #0
 800fa00:	f04f 0300 	mov.w	r3, #0
 800fa04:	008b      	lsls	r3, r1, #2
 800fa06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fa0a:	0082      	lsls	r2, r0, #2
 800fa0c:	4650      	mov	r0, sl
 800fa0e:	4659      	mov	r1, fp
 800fa10:	f7f1 f952 	bl	8000cb8 <__aeabi_uldivmod>
 800fa14:	4602      	mov	r2, r0
 800fa16:	460b      	mov	r3, r1
 800fa18:	4b0e      	ldr	r3, [pc, #56]	; (800fa54 <UART_SetConfig+0x38c>)
 800fa1a:	fba3 1302 	umull	r1, r3, r3, r2
 800fa1e:	095b      	lsrs	r3, r3, #5
 800fa20:	2164      	movs	r1, #100	; 0x64
 800fa22:	fb01 f303 	mul.w	r3, r1, r3
 800fa26:	1ad3      	subs	r3, r2, r3
 800fa28:	011b      	lsls	r3, r3, #4
 800fa2a:	3332      	adds	r3, #50	; 0x32
 800fa2c:	4a09      	ldr	r2, [pc, #36]	; (800fa54 <UART_SetConfig+0x38c>)
 800fa2e:	fba2 2303 	umull	r2, r3, r2, r3
 800fa32:	095b      	lsrs	r3, r3, #5
 800fa34:	f003 020f 	and.w	r2, r3, #15
 800fa38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4432      	add	r2, r6
 800fa3e:	609a      	str	r2, [r3, #8]
}
 800fa40:	bf00      	nop
 800fa42:	377c      	adds	r7, #124	; 0x7c
 800fa44:	46bd      	mov	sp, r7
 800fa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa4a:	bf00      	nop
 800fa4c:	40011000 	.word	0x40011000
 800fa50:	40011400 	.word	0x40011400
 800fa54:	51eb851f 	.word	0x51eb851f

0800fa58 <atof>:
 800fa58:	2100      	movs	r1, #0
 800fa5a:	f001 bd05 	b.w	8011468 <strtod>

0800fa5e <atoi>:
 800fa5e:	220a      	movs	r2, #10
 800fa60:	2100      	movs	r1, #0
 800fa62:	f001 bdef 	b.w	8011644 <strtol>
	...

0800fa68 <__errno>:
 800fa68:	4b01      	ldr	r3, [pc, #4]	; (800fa70 <__errno+0x8>)
 800fa6a:	6818      	ldr	r0, [r3, #0]
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	20000040 	.word	0x20000040

0800fa74 <__libc_init_array>:
 800fa74:	b570      	push	{r4, r5, r6, lr}
 800fa76:	4d0d      	ldr	r5, [pc, #52]	; (800faac <__libc_init_array+0x38>)
 800fa78:	4c0d      	ldr	r4, [pc, #52]	; (800fab0 <__libc_init_array+0x3c>)
 800fa7a:	1b64      	subs	r4, r4, r5
 800fa7c:	10a4      	asrs	r4, r4, #2
 800fa7e:	2600      	movs	r6, #0
 800fa80:	42a6      	cmp	r6, r4
 800fa82:	d109      	bne.n	800fa98 <__libc_init_array+0x24>
 800fa84:	4d0b      	ldr	r5, [pc, #44]	; (800fab4 <__libc_init_array+0x40>)
 800fa86:	4c0c      	ldr	r4, [pc, #48]	; (800fab8 <__libc_init_array+0x44>)
 800fa88:	f004 fcb8 	bl	80143fc <_init>
 800fa8c:	1b64      	subs	r4, r4, r5
 800fa8e:	10a4      	asrs	r4, r4, #2
 800fa90:	2600      	movs	r6, #0
 800fa92:	42a6      	cmp	r6, r4
 800fa94:	d105      	bne.n	800faa2 <__libc_init_array+0x2e>
 800fa96:	bd70      	pop	{r4, r5, r6, pc}
 800fa98:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa9c:	4798      	blx	r3
 800fa9e:	3601      	adds	r6, #1
 800faa0:	e7ee      	b.n	800fa80 <__libc_init_array+0xc>
 800faa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800faa6:	4798      	blx	r3
 800faa8:	3601      	adds	r6, #1
 800faaa:	e7f2      	b.n	800fa92 <__libc_init_array+0x1e>
 800faac:	08028338 	.word	0x08028338
 800fab0:	08028338 	.word	0x08028338
 800fab4:	08028338 	.word	0x08028338
 800fab8:	0802833c 	.word	0x0802833c

0800fabc <memset>:
 800fabc:	4402      	add	r2, r0
 800fabe:	4603      	mov	r3, r0
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d100      	bne.n	800fac6 <memset+0xa>
 800fac4:	4770      	bx	lr
 800fac6:	f803 1b01 	strb.w	r1, [r3], #1
 800faca:	e7f9      	b.n	800fac0 <memset+0x4>

0800facc <__cvt>:
 800facc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fad0:	ec55 4b10 	vmov	r4, r5, d0
 800fad4:	2d00      	cmp	r5, #0
 800fad6:	460e      	mov	r6, r1
 800fad8:	4619      	mov	r1, r3
 800fada:	462b      	mov	r3, r5
 800fadc:	bfbb      	ittet	lt
 800fade:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fae2:	461d      	movlt	r5, r3
 800fae4:	2300      	movge	r3, #0
 800fae6:	232d      	movlt	r3, #45	; 0x2d
 800fae8:	700b      	strb	r3, [r1, #0]
 800faea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800faec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800faf0:	4691      	mov	r9, r2
 800faf2:	f023 0820 	bic.w	r8, r3, #32
 800faf6:	bfbc      	itt	lt
 800faf8:	4622      	movlt	r2, r4
 800fafa:	4614      	movlt	r4, r2
 800fafc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb00:	d005      	beq.n	800fb0e <__cvt+0x42>
 800fb02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fb06:	d100      	bne.n	800fb0a <__cvt+0x3e>
 800fb08:	3601      	adds	r6, #1
 800fb0a:	2102      	movs	r1, #2
 800fb0c:	e000      	b.n	800fb10 <__cvt+0x44>
 800fb0e:	2103      	movs	r1, #3
 800fb10:	ab03      	add	r3, sp, #12
 800fb12:	9301      	str	r3, [sp, #4]
 800fb14:	ab02      	add	r3, sp, #8
 800fb16:	9300      	str	r3, [sp, #0]
 800fb18:	ec45 4b10 	vmov	d0, r4, r5
 800fb1c:	4653      	mov	r3, sl
 800fb1e:	4632      	mov	r2, r6
 800fb20:	f001 fe46 	bl	80117b0 <_dtoa_r>
 800fb24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fb28:	4607      	mov	r7, r0
 800fb2a:	d102      	bne.n	800fb32 <__cvt+0x66>
 800fb2c:	f019 0f01 	tst.w	r9, #1
 800fb30:	d022      	beq.n	800fb78 <__cvt+0xac>
 800fb32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb36:	eb07 0906 	add.w	r9, r7, r6
 800fb3a:	d110      	bne.n	800fb5e <__cvt+0x92>
 800fb3c:	783b      	ldrb	r3, [r7, #0]
 800fb3e:	2b30      	cmp	r3, #48	; 0x30
 800fb40:	d10a      	bne.n	800fb58 <__cvt+0x8c>
 800fb42:	2200      	movs	r2, #0
 800fb44:	2300      	movs	r3, #0
 800fb46:	4620      	mov	r0, r4
 800fb48:	4629      	mov	r1, r5
 800fb4a:	f7f0 ffd5 	bl	8000af8 <__aeabi_dcmpeq>
 800fb4e:	b918      	cbnz	r0, 800fb58 <__cvt+0x8c>
 800fb50:	f1c6 0601 	rsb	r6, r6, #1
 800fb54:	f8ca 6000 	str.w	r6, [sl]
 800fb58:	f8da 3000 	ldr.w	r3, [sl]
 800fb5c:	4499      	add	r9, r3
 800fb5e:	2200      	movs	r2, #0
 800fb60:	2300      	movs	r3, #0
 800fb62:	4620      	mov	r0, r4
 800fb64:	4629      	mov	r1, r5
 800fb66:	f7f0 ffc7 	bl	8000af8 <__aeabi_dcmpeq>
 800fb6a:	b108      	cbz	r0, 800fb70 <__cvt+0xa4>
 800fb6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800fb70:	2230      	movs	r2, #48	; 0x30
 800fb72:	9b03      	ldr	r3, [sp, #12]
 800fb74:	454b      	cmp	r3, r9
 800fb76:	d307      	bcc.n	800fb88 <__cvt+0xbc>
 800fb78:	9b03      	ldr	r3, [sp, #12]
 800fb7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb7c:	1bdb      	subs	r3, r3, r7
 800fb7e:	4638      	mov	r0, r7
 800fb80:	6013      	str	r3, [r2, #0]
 800fb82:	b004      	add	sp, #16
 800fb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb88:	1c59      	adds	r1, r3, #1
 800fb8a:	9103      	str	r1, [sp, #12]
 800fb8c:	701a      	strb	r2, [r3, #0]
 800fb8e:	e7f0      	b.n	800fb72 <__cvt+0xa6>

0800fb90 <__exponent>:
 800fb90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb92:	4603      	mov	r3, r0
 800fb94:	2900      	cmp	r1, #0
 800fb96:	bfb8      	it	lt
 800fb98:	4249      	neglt	r1, r1
 800fb9a:	f803 2b02 	strb.w	r2, [r3], #2
 800fb9e:	bfb4      	ite	lt
 800fba0:	222d      	movlt	r2, #45	; 0x2d
 800fba2:	222b      	movge	r2, #43	; 0x2b
 800fba4:	2909      	cmp	r1, #9
 800fba6:	7042      	strb	r2, [r0, #1]
 800fba8:	dd2a      	ble.n	800fc00 <__exponent+0x70>
 800fbaa:	f10d 0407 	add.w	r4, sp, #7
 800fbae:	46a4      	mov	ip, r4
 800fbb0:	270a      	movs	r7, #10
 800fbb2:	46a6      	mov	lr, r4
 800fbb4:	460a      	mov	r2, r1
 800fbb6:	fb91 f6f7 	sdiv	r6, r1, r7
 800fbba:	fb07 1516 	mls	r5, r7, r6, r1
 800fbbe:	3530      	adds	r5, #48	; 0x30
 800fbc0:	2a63      	cmp	r2, #99	; 0x63
 800fbc2:	f104 34ff 	add.w	r4, r4, #4294967295
 800fbc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fbca:	4631      	mov	r1, r6
 800fbcc:	dcf1      	bgt.n	800fbb2 <__exponent+0x22>
 800fbce:	3130      	adds	r1, #48	; 0x30
 800fbd0:	f1ae 0502 	sub.w	r5, lr, #2
 800fbd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fbd8:	1c44      	adds	r4, r0, #1
 800fbda:	4629      	mov	r1, r5
 800fbdc:	4561      	cmp	r1, ip
 800fbde:	d30a      	bcc.n	800fbf6 <__exponent+0x66>
 800fbe0:	f10d 0209 	add.w	r2, sp, #9
 800fbe4:	eba2 020e 	sub.w	r2, r2, lr
 800fbe8:	4565      	cmp	r5, ip
 800fbea:	bf88      	it	hi
 800fbec:	2200      	movhi	r2, #0
 800fbee:	4413      	add	r3, r2
 800fbf0:	1a18      	subs	r0, r3, r0
 800fbf2:	b003      	add	sp, #12
 800fbf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbfa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fbfe:	e7ed      	b.n	800fbdc <__exponent+0x4c>
 800fc00:	2330      	movs	r3, #48	; 0x30
 800fc02:	3130      	adds	r1, #48	; 0x30
 800fc04:	7083      	strb	r3, [r0, #2]
 800fc06:	70c1      	strb	r1, [r0, #3]
 800fc08:	1d03      	adds	r3, r0, #4
 800fc0a:	e7f1      	b.n	800fbf0 <__exponent+0x60>

0800fc0c <_printf_float>:
 800fc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc10:	ed2d 8b02 	vpush	{d8}
 800fc14:	b08d      	sub	sp, #52	; 0x34
 800fc16:	460c      	mov	r4, r1
 800fc18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fc1c:	4616      	mov	r6, r2
 800fc1e:	461f      	mov	r7, r3
 800fc20:	4605      	mov	r5, r0
 800fc22:	f002 ff33 	bl	8012a8c <_localeconv_r>
 800fc26:	f8d0 a000 	ldr.w	sl, [r0]
 800fc2a:	4650      	mov	r0, sl
 800fc2c:	f7f0 fae2 	bl	80001f4 <strlen>
 800fc30:	2300      	movs	r3, #0
 800fc32:	930a      	str	r3, [sp, #40]	; 0x28
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	9305      	str	r3, [sp, #20]
 800fc38:	f8d8 3000 	ldr.w	r3, [r8]
 800fc3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fc40:	3307      	adds	r3, #7
 800fc42:	f023 0307 	bic.w	r3, r3, #7
 800fc46:	f103 0208 	add.w	r2, r3, #8
 800fc4a:	f8c8 2000 	str.w	r2, [r8]
 800fc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fc56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fc5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fc5e:	9307      	str	r3, [sp, #28]
 800fc60:	f8cd 8018 	str.w	r8, [sp, #24]
 800fc64:	ee08 0a10 	vmov	s16, r0
 800fc68:	4b9f      	ldr	r3, [pc, #636]	; (800fee8 <_printf_float+0x2dc>)
 800fc6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc72:	f7f0 ff73 	bl	8000b5c <__aeabi_dcmpun>
 800fc76:	bb88      	cbnz	r0, 800fcdc <_printf_float+0xd0>
 800fc78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc7c:	4b9a      	ldr	r3, [pc, #616]	; (800fee8 <_printf_float+0x2dc>)
 800fc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc82:	f7f0 ff4d 	bl	8000b20 <__aeabi_dcmple>
 800fc86:	bb48      	cbnz	r0, 800fcdc <_printf_float+0xd0>
 800fc88:	2200      	movs	r2, #0
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	4640      	mov	r0, r8
 800fc8e:	4649      	mov	r1, r9
 800fc90:	f7f0 ff3c 	bl	8000b0c <__aeabi_dcmplt>
 800fc94:	b110      	cbz	r0, 800fc9c <_printf_float+0x90>
 800fc96:	232d      	movs	r3, #45	; 0x2d
 800fc98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc9c:	4b93      	ldr	r3, [pc, #588]	; (800feec <_printf_float+0x2e0>)
 800fc9e:	4894      	ldr	r0, [pc, #592]	; (800fef0 <_printf_float+0x2e4>)
 800fca0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fca4:	bf94      	ite	ls
 800fca6:	4698      	movls	r8, r3
 800fca8:	4680      	movhi	r8, r0
 800fcaa:	2303      	movs	r3, #3
 800fcac:	6123      	str	r3, [r4, #16]
 800fcae:	9b05      	ldr	r3, [sp, #20]
 800fcb0:	f023 0204 	bic.w	r2, r3, #4
 800fcb4:	6022      	str	r2, [r4, #0]
 800fcb6:	f04f 0900 	mov.w	r9, #0
 800fcba:	9700      	str	r7, [sp, #0]
 800fcbc:	4633      	mov	r3, r6
 800fcbe:	aa0b      	add	r2, sp, #44	; 0x2c
 800fcc0:	4621      	mov	r1, r4
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	f000 f9d8 	bl	8010078 <_printf_common>
 800fcc8:	3001      	adds	r0, #1
 800fcca:	f040 8090 	bne.w	800fdee <_printf_float+0x1e2>
 800fcce:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd2:	b00d      	add	sp, #52	; 0x34
 800fcd4:	ecbd 8b02 	vpop	{d8}
 800fcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcdc:	4642      	mov	r2, r8
 800fcde:	464b      	mov	r3, r9
 800fce0:	4640      	mov	r0, r8
 800fce2:	4649      	mov	r1, r9
 800fce4:	f7f0 ff3a 	bl	8000b5c <__aeabi_dcmpun>
 800fce8:	b140      	cbz	r0, 800fcfc <_printf_float+0xf0>
 800fcea:	464b      	mov	r3, r9
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	bfbc      	itt	lt
 800fcf0:	232d      	movlt	r3, #45	; 0x2d
 800fcf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fcf6:	487f      	ldr	r0, [pc, #508]	; (800fef4 <_printf_float+0x2e8>)
 800fcf8:	4b7f      	ldr	r3, [pc, #508]	; (800fef8 <_printf_float+0x2ec>)
 800fcfa:	e7d1      	b.n	800fca0 <_printf_float+0x94>
 800fcfc:	6863      	ldr	r3, [r4, #4]
 800fcfe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fd02:	9206      	str	r2, [sp, #24]
 800fd04:	1c5a      	adds	r2, r3, #1
 800fd06:	d13f      	bne.n	800fd88 <_printf_float+0x17c>
 800fd08:	2306      	movs	r3, #6
 800fd0a:	6063      	str	r3, [r4, #4]
 800fd0c:	9b05      	ldr	r3, [sp, #20]
 800fd0e:	6861      	ldr	r1, [r4, #4]
 800fd10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fd14:	2300      	movs	r3, #0
 800fd16:	9303      	str	r3, [sp, #12]
 800fd18:	ab0a      	add	r3, sp, #40	; 0x28
 800fd1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fd1e:	ab09      	add	r3, sp, #36	; 0x24
 800fd20:	ec49 8b10 	vmov	d0, r8, r9
 800fd24:	9300      	str	r3, [sp, #0]
 800fd26:	6022      	str	r2, [r4, #0]
 800fd28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fd2c:	4628      	mov	r0, r5
 800fd2e:	f7ff fecd 	bl	800facc <__cvt>
 800fd32:	9b06      	ldr	r3, [sp, #24]
 800fd34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd36:	2b47      	cmp	r3, #71	; 0x47
 800fd38:	4680      	mov	r8, r0
 800fd3a:	d108      	bne.n	800fd4e <_printf_float+0x142>
 800fd3c:	1cc8      	adds	r0, r1, #3
 800fd3e:	db02      	blt.n	800fd46 <_printf_float+0x13a>
 800fd40:	6863      	ldr	r3, [r4, #4]
 800fd42:	4299      	cmp	r1, r3
 800fd44:	dd41      	ble.n	800fdca <_printf_float+0x1be>
 800fd46:	f1ab 0b02 	sub.w	fp, fp, #2
 800fd4a:	fa5f fb8b 	uxtb.w	fp, fp
 800fd4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fd52:	d820      	bhi.n	800fd96 <_printf_float+0x18a>
 800fd54:	3901      	subs	r1, #1
 800fd56:	465a      	mov	r2, fp
 800fd58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd5c:	9109      	str	r1, [sp, #36]	; 0x24
 800fd5e:	f7ff ff17 	bl	800fb90 <__exponent>
 800fd62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd64:	1813      	adds	r3, r2, r0
 800fd66:	2a01      	cmp	r2, #1
 800fd68:	4681      	mov	r9, r0
 800fd6a:	6123      	str	r3, [r4, #16]
 800fd6c:	dc02      	bgt.n	800fd74 <_printf_float+0x168>
 800fd6e:	6822      	ldr	r2, [r4, #0]
 800fd70:	07d2      	lsls	r2, r2, #31
 800fd72:	d501      	bpl.n	800fd78 <_printf_float+0x16c>
 800fd74:	3301      	adds	r3, #1
 800fd76:	6123      	str	r3, [r4, #16]
 800fd78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d09c      	beq.n	800fcba <_printf_float+0xae>
 800fd80:	232d      	movs	r3, #45	; 0x2d
 800fd82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd86:	e798      	b.n	800fcba <_printf_float+0xae>
 800fd88:	9a06      	ldr	r2, [sp, #24]
 800fd8a:	2a47      	cmp	r2, #71	; 0x47
 800fd8c:	d1be      	bne.n	800fd0c <_printf_float+0x100>
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d1bc      	bne.n	800fd0c <_printf_float+0x100>
 800fd92:	2301      	movs	r3, #1
 800fd94:	e7b9      	b.n	800fd0a <_printf_float+0xfe>
 800fd96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fd9a:	d118      	bne.n	800fdce <_printf_float+0x1c2>
 800fd9c:	2900      	cmp	r1, #0
 800fd9e:	6863      	ldr	r3, [r4, #4]
 800fda0:	dd0b      	ble.n	800fdba <_printf_float+0x1ae>
 800fda2:	6121      	str	r1, [r4, #16]
 800fda4:	b913      	cbnz	r3, 800fdac <_printf_float+0x1a0>
 800fda6:	6822      	ldr	r2, [r4, #0]
 800fda8:	07d0      	lsls	r0, r2, #31
 800fdaa:	d502      	bpl.n	800fdb2 <_printf_float+0x1a6>
 800fdac:	3301      	adds	r3, #1
 800fdae:	440b      	add	r3, r1
 800fdb0:	6123      	str	r3, [r4, #16]
 800fdb2:	65a1      	str	r1, [r4, #88]	; 0x58
 800fdb4:	f04f 0900 	mov.w	r9, #0
 800fdb8:	e7de      	b.n	800fd78 <_printf_float+0x16c>
 800fdba:	b913      	cbnz	r3, 800fdc2 <_printf_float+0x1b6>
 800fdbc:	6822      	ldr	r2, [r4, #0]
 800fdbe:	07d2      	lsls	r2, r2, #31
 800fdc0:	d501      	bpl.n	800fdc6 <_printf_float+0x1ba>
 800fdc2:	3302      	adds	r3, #2
 800fdc4:	e7f4      	b.n	800fdb0 <_printf_float+0x1a4>
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	e7f2      	b.n	800fdb0 <_printf_float+0x1a4>
 800fdca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdd0:	4299      	cmp	r1, r3
 800fdd2:	db05      	blt.n	800fde0 <_printf_float+0x1d4>
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	6121      	str	r1, [r4, #16]
 800fdd8:	07d8      	lsls	r0, r3, #31
 800fdda:	d5ea      	bpl.n	800fdb2 <_printf_float+0x1a6>
 800fddc:	1c4b      	adds	r3, r1, #1
 800fdde:	e7e7      	b.n	800fdb0 <_printf_float+0x1a4>
 800fde0:	2900      	cmp	r1, #0
 800fde2:	bfd4      	ite	le
 800fde4:	f1c1 0202 	rsble	r2, r1, #2
 800fde8:	2201      	movgt	r2, #1
 800fdea:	4413      	add	r3, r2
 800fdec:	e7e0      	b.n	800fdb0 <_printf_float+0x1a4>
 800fdee:	6823      	ldr	r3, [r4, #0]
 800fdf0:	055a      	lsls	r2, r3, #21
 800fdf2:	d407      	bmi.n	800fe04 <_printf_float+0x1f8>
 800fdf4:	6923      	ldr	r3, [r4, #16]
 800fdf6:	4642      	mov	r2, r8
 800fdf8:	4631      	mov	r1, r6
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	47b8      	blx	r7
 800fdfe:	3001      	adds	r0, #1
 800fe00:	d12c      	bne.n	800fe5c <_printf_float+0x250>
 800fe02:	e764      	b.n	800fcce <_printf_float+0xc2>
 800fe04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fe08:	f240 80e0 	bls.w	800ffcc <_printf_float+0x3c0>
 800fe0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe10:	2200      	movs	r2, #0
 800fe12:	2300      	movs	r3, #0
 800fe14:	f7f0 fe70 	bl	8000af8 <__aeabi_dcmpeq>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	d034      	beq.n	800fe86 <_printf_float+0x27a>
 800fe1c:	4a37      	ldr	r2, [pc, #220]	; (800fefc <_printf_float+0x2f0>)
 800fe1e:	2301      	movs	r3, #1
 800fe20:	4631      	mov	r1, r6
 800fe22:	4628      	mov	r0, r5
 800fe24:	47b8      	blx	r7
 800fe26:	3001      	adds	r0, #1
 800fe28:	f43f af51 	beq.w	800fcce <_printf_float+0xc2>
 800fe2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe30:	429a      	cmp	r2, r3
 800fe32:	db02      	blt.n	800fe3a <_printf_float+0x22e>
 800fe34:	6823      	ldr	r3, [r4, #0]
 800fe36:	07d8      	lsls	r0, r3, #31
 800fe38:	d510      	bpl.n	800fe5c <_printf_float+0x250>
 800fe3a:	ee18 3a10 	vmov	r3, s16
 800fe3e:	4652      	mov	r2, sl
 800fe40:	4631      	mov	r1, r6
 800fe42:	4628      	mov	r0, r5
 800fe44:	47b8      	blx	r7
 800fe46:	3001      	adds	r0, #1
 800fe48:	f43f af41 	beq.w	800fcce <_printf_float+0xc2>
 800fe4c:	f04f 0800 	mov.w	r8, #0
 800fe50:	f104 091a 	add.w	r9, r4, #26
 800fe54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe56:	3b01      	subs	r3, #1
 800fe58:	4543      	cmp	r3, r8
 800fe5a:	dc09      	bgt.n	800fe70 <_printf_float+0x264>
 800fe5c:	6823      	ldr	r3, [r4, #0]
 800fe5e:	079b      	lsls	r3, r3, #30
 800fe60:	f100 8105 	bmi.w	801006e <_printf_float+0x462>
 800fe64:	68e0      	ldr	r0, [r4, #12]
 800fe66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe68:	4298      	cmp	r0, r3
 800fe6a:	bfb8      	it	lt
 800fe6c:	4618      	movlt	r0, r3
 800fe6e:	e730      	b.n	800fcd2 <_printf_float+0xc6>
 800fe70:	2301      	movs	r3, #1
 800fe72:	464a      	mov	r2, r9
 800fe74:	4631      	mov	r1, r6
 800fe76:	4628      	mov	r0, r5
 800fe78:	47b8      	blx	r7
 800fe7a:	3001      	adds	r0, #1
 800fe7c:	f43f af27 	beq.w	800fcce <_printf_float+0xc2>
 800fe80:	f108 0801 	add.w	r8, r8, #1
 800fe84:	e7e6      	b.n	800fe54 <_printf_float+0x248>
 800fe86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	dc39      	bgt.n	800ff00 <_printf_float+0x2f4>
 800fe8c:	4a1b      	ldr	r2, [pc, #108]	; (800fefc <_printf_float+0x2f0>)
 800fe8e:	2301      	movs	r3, #1
 800fe90:	4631      	mov	r1, r6
 800fe92:	4628      	mov	r0, r5
 800fe94:	47b8      	blx	r7
 800fe96:	3001      	adds	r0, #1
 800fe98:	f43f af19 	beq.w	800fcce <_printf_float+0xc2>
 800fe9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fea0:	4313      	orrs	r3, r2
 800fea2:	d102      	bne.n	800feaa <_printf_float+0x29e>
 800fea4:	6823      	ldr	r3, [r4, #0]
 800fea6:	07d9      	lsls	r1, r3, #31
 800fea8:	d5d8      	bpl.n	800fe5c <_printf_float+0x250>
 800feaa:	ee18 3a10 	vmov	r3, s16
 800feae:	4652      	mov	r2, sl
 800feb0:	4631      	mov	r1, r6
 800feb2:	4628      	mov	r0, r5
 800feb4:	47b8      	blx	r7
 800feb6:	3001      	adds	r0, #1
 800feb8:	f43f af09 	beq.w	800fcce <_printf_float+0xc2>
 800febc:	f04f 0900 	mov.w	r9, #0
 800fec0:	f104 0a1a 	add.w	sl, r4, #26
 800fec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fec6:	425b      	negs	r3, r3
 800fec8:	454b      	cmp	r3, r9
 800feca:	dc01      	bgt.n	800fed0 <_printf_float+0x2c4>
 800fecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fece:	e792      	b.n	800fdf6 <_printf_float+0x1ea>
 800fed0:	2301      	movs	r3, #1
 800fed2:	4652      	mov	r2, sl
 800fed4:	4631      	mov	r1, r6
 800fed6:	4628      	mov	r0, r5
 800fed8:	47b8      	blx	r7
 800feda:	3001      	adds	r0, #1
 800fedc:	f43f aef7 	beq.w	800fcce <_printf_float+0xc2>
 800fee0:	f109 0901 	add.w	r9, r9, #1
 800fee4:	e7ee      	b.n	800fec4 <_printf_float+0x2b8>
 800fee6:	bf00      	nop
 800fee8:	7fefffff 	.word	0x7fefffff
 800feec:	08027e20 	.word	0x08027e20
 800fef0:	08027e24 	.word	0x08027e24
 800fef4:	08027e2c 	.word	0x08027e2c
 800fef8:	08027e28 	.word	0x08027e28
 800fefc:	08027e30 	.word	0x08027e30
 800ff00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff04:	429a      	cmp	r2, r3
 800ff06:	bfa8      	it	ge
 800ff08:	461a      	movge	r2, r3
 800ff0a:	2a00      	cmp	r2, #0
 800ff0c:	4691      	mov	r9, r2
 800ff0e:	dc37      	bgt.n	800ff80 <_printf_float+0x374>
 800ff10:	f04f 0b00 	mov.w	fp, #0
 800ff14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff18:	f104 021a 	add.w	r2, r4, #26
 800ff1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff1e:	9305      	str	r3, [sp, #20]
 800ff20:	eba3 0309 	sub.w	r3, r3, r9
 800ff24:	455b      	cmp	r3, fp
 800ff26:	dc33      	bgt.n	800ff90 <_printf_float+0x384>
 800ff28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	db3b      	blt.n	800ffa8 <_printf_float+0x39c>
 800ff30:	6823      	ldr	r3, [r4, #0]
 800ff32:	07da      	lsls	r2, r3, #31
 800ff34:	d438      	bmi.n	800ffa8 <_printf_float+0x39c>
 800ff36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff38:	9b05      	ldr	r3, [sp, #20]
 800ff3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	eba2 0901 	sub.w	r9, r2, r1
 800ff42:	4599      	cmp	r9, r3
 800ff44:	bfa8      	it	ge
 800ff46:	4699      	movge	r9, r3
 800ff48:	f1b9 0f00 	cmp.w	r9, #0
 800ff4c:	dc35      	bgt.n	800ffba <_printf_float+0x3ae>
 800ff4e:	f04f 0800 	mov.w	r8, #0
 800ff52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff56:	f104 0a1a 	add.w	sl, r4, #26
 800ff5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff5e:	1a9b      	subs	r3, r3, r2
 800ff60:	eba3 0309 	sub.w	r3, r3, r9
 800ff64:	4543      	cmp	r3, r8
 800ff66:	f77f af79 	ble.w	800fe5c <_printf_float+0x250>
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	4652      	mov	r2, sl
 800ff6e:	4631      	mov	r1, r6
 800ff70:	4628      	mov	r0, r5
 800ff72:	47b8      	blx	r7
 800ff74:	3001      	adds	r0, #1
 800ff76:	f43f aeaa 	beq.w	800fcce <_printf_float+0xc2>
 800ff7a:	f108 0801 	add.w	r8, r8, #1
 800ff7e:	e7ec      	b.n	800ff5a <_printf_float+0x34e>
 800ff80:	4613      	mov	r3, r2
 800ff82:	4631      	mov	r1, r6
 800ff84:	4642      	mov	r2, r8
 800ff86:	4628      	mov	r0, r5
 800ff88:	47b8      	blx	r7
 800ff8a:	3001      	adds	r0, #1
 800ff8c:	d1c0      	bne.n	800ff10 <_printf_float+0x304>
 800ff8e:	e69e      	b.n	800fcce <_printf_float+0xc2>
 800ff90:	2301      	movs	r3, #1
 800ff92:	4631      	mov	r1, r6
 800ff94:	4628      	mov	r0, r5
 800ff96:	9205      	str	r2, [sp, #20]
 800ff98:	47b8      	blx	r7
 800ff9a:	3001      	adds	r0, #1
 800ff9c:	f43f ae97 	beq.w	800fcce <_printf_float+0xc2>
 800ffa0:	9a05      	ldr	r2, [sp, #20]
 800ffa2:	f10b 0b01 	add.w	fp, fp, #1
 800ffa6:	e7b9      	b.n	800ff1c <_printf_float+0x310>
 800ffa8:	ee18 3a10 	vmov	r3, s16
 800ffac:	4652      	mov	r2, sl
 800ffae:	4631      	mov	r1, r6
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	47b8      	blx	r7
 800ffb4:	3001      	adds	r0, #1
 800ffb6:	d1be      	bne.n	800ff36 <_printf_float+0x32a>
 800ffb8:	e689      	b.n	800fcce <_printf_float+0xc2>
 800ffba:	9a05      	ldr	r2, [sp, #20]
 800ffbc:	464b      	mov	r3, r9
 800ffbe:	4442      	add	r2, r8
 800ffc0:	4631      	mov	r1, r6
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	47b8      	blx	r7
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	d1c1      	bne.n	800ff4e <_printf_float+0x342>
 800ffca:	e680      	b.n	800fcce <_printf_float+0xc2>
 800ffcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffce:	2a01      	cmp	r2, #1
 800ffd0:	dc01      	bgt.n	800ffd6 <_printf_float+0x3ca>
 800ffd2:	07db      	lsls	r3, r3, #31
 800ffd4:	d538      	bpl.n	8010048 <_printf_float+0x43c>
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	4642      	mov	r2, r8
 800ffda:	4631      	mov	r1, r6
 800ffdc:	4628      	mov	r0, r5
 800ffde:	47b8      	blx	r7
 800ffe0:	3001      	adds	r0, #1
 800ffe2:	f43f ae74 	beq.w	800fcce <_printf_float+0xc2>
 800ffe6:	ee18 3a10 	vmov	r3, s16
 800ffea:	4652      	mov	r2, sl
 800ffec:	4631      	mov	r1, r6
 800ffee:	4628      	mov	r0, r5
 800fff0:	47b8      	blx	r7
 800fff2:	3001      	adds	r0, #1
 800fff4:	f43f ae6b 	beq.w	800fcce <_printf_float+0xc2>
 800fff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fffc:	2200      	movs	r2, #0
 800fffe:	2300      	movs	r3, #0
 8010000:	f7f0 fd7a 	bl	8000af8 <__aeabi_dcmpeq>
 8010004:	b9d8      	cbnz	r0, 801003e <_printf_float+0x432>
 8010006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010008:	f108 0201 	add.w	r2, r8, #1
 801000c:	3b01      	subs	r3, #1
 801000e:	4631      	mov	r1, r6
 8010010:	4628      	mov	r0, r5
 8010012:	47b8      	blx	r7
 8010014:	3001      	adds	r0, #1
 8010016:	d10e      	bne.n	8010036 <_printf_float+0x42a>
 8010018:	e659      	b.n	800fcce <_printf_float+0xc2>
 801001a:	2301      	movs	r3, #1
 801001c:	4652      	mov	r2, sl
 801001e:	4631      	mov	r1, r6
 8010020:	4628      	mov	r0, r5
 8010022:	47b8      	blx	r7
 8010024:	3001      	adds	r0, #1
 8010026:	f43f ae52 	beq.w	800fcce <_printf_float+0xc2>
 801002a:	f108 0801 	add.w	r8, r8, #1
 801002e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010030:	3b01      	subs	r3, #1
 8010032:	4543      	cmp	r3, r8
 8010034:	dcf1      	bgt.n	801001a <_printf_float+0x40e>
 8010036:	464b      	mov	r3, r9
 8010038:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801003c:	e6dc      	b.n	800fdf8 <_printf_float+0x1ec>
 801003e:	f04f 0800 	mov.w	r8, #0
 8010042:	f104 0a1a 	add.w	sl, r4, #26
 8010046:	e7f2      	b.n	801002e <_printf_float+0x422>
 8010048:	2301      	movs	r3, #1
 801004a:	4642      	mov	r2, r8
 801004c:	e7df      	b.n	801000e <_printf_float+0x402>
 801004e:	2301      	movs	r3, #1
 8010050:	464a      	mov	r2, r9
 8010052:	4631      	mov	r1, r6
 8010054:	4628      	mov	r0, r5
 8010056:	47b8      	blx	r7
 8010058:	3001      	adds	r0, #1
 801005a:	f43f ae38 	beq.w	800fcce <_printf_float+0xc2>
 801005e:	f108 0801 	add.w	r8, r8, #1
 8010062:	68e3      	ldr	r3, [r4, #12]
 8010064:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010066:	1a5b      	subs	r3, r3, r1
 8010068:	4543      	cmp	r3, r8
 801006a:	dcf0      	bgt.n	801004e <_printf_float+0x442>
 801006c:	e6fa      	b.n	800fe64 <_printf_float+0x258>
 801006e:	f04f 0800 	mov.w	r8, #0
 8010072:	f104 0919 	add.w	r9, r4, #25
 8010076:	e7f4      	b.n	8010062 <_printf_float+0x456>

08010078 <_printf_common>:
 8010078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801007c:	4616      	mov	r6, r2
 801007e:	4699      	mov	r9, r3
 8010080:	688a      	ldr	r2, [r1, #8]
 8010082:	690b      	ldr	r3, [r1, #16]
 8010084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010088:	4293      	cmp	r3, r2
 801008a:	bfb8      	it	lt
 801008c:	4613      	movlt	r3, r2
 801008e:	6033      	str	r3, [r6, #0]
 8010090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010094:	4607      	mov	r7, r0
 8010096:	460c      	mov	r4, r1
 8010098:	b10a      	cbz	r2, 801009e <_printf_common+0x26>
 801009a:	3301      	adds	r3, #1
 801009c:	6033      	str	r3, [r6, #0]
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	0699      	lsls	r1, r3, #26
 80100a2:	bf42      	ittt	mi
 80100a4:	6833      	ldrmi	r3, [r6, #0]
 80100a6:	3302      	addmi	r3, #2
 80100a8:	6033      	strmi	r3, [r6, #0]
 80100aa:	6825      	ldr	r5, [r4, #0]
 80100ac:	f015 0506 	ands.w	r5, r5, #6
 80100b0:	d106      	bne.n	80100c0 <_printf_common+0x48>
 80100b2:	f104 0a19 	add.w	sl, r4, #25
 80100b6:	68e3      	ldr	r3, [r4, #12]
 80100b8:	6832      	ldr	r2, [r6, #0]
 80100ba:	1a9b      	subs	r3, r3, r2
 80100bc:	42ab      	cmp	r3, r5
 80100be:	dc26      	bgt.n	801010e <_printf_common+0x96>
 80100c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80100c4:	1e13      	subs	r3, r2, #0
 80100c6:	6822      	ldr	r2, [r4, #0]
 80100c8:	bf18      	it	ne
 80100ca:	2301      	movne	r3, #1
 80100cc:	0692      	lsls	r2, r2, #26
 80100ce:	d42b      	bmi.n	8010128 <_printf_common+0xb0>
 80100d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100d4:	4649      	mov	r1, r9
 80100d6:	4638      	mov	r0, r7
 80100d8:	47c0      	blx	r8
 80100da:	3001      	adds	r0, #1
 80100dc:	d01e      	beq.n	801011c <_printf_common+0xa4>
 80100de:	6823      	ldr	r3, [r4, #0]
 80100e0:	68e5      	ldr	r5, [r4, #12]
 80100e2:	6832      	ldr	r2, [r6, #0]
 80100e4:	f003 0306 	and.w	r3, r3, #6
 80100e8:	2b04      	cmp	r3, #4
 80100ea:	bf08      	it	eq
 80100ec:	1aad      	subeq	r5, r5, r2
 80100ee:	68a3      	ldr	r3, [r4, #8]
 80100f0:	6922      	ldr	r2, [r4, #16]
 80100f2:	bf0c      	ite	eq
 80100f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100f8:	2500      	movne	r5, #0
 80100fa:	4293      	cmp	r3, r2
 80100fc:	bfc4      	itt	gt
 80100fe:	1a9b      	subgt	r3, r3, r2
 8010100:	18ed      	addgt	r5, r5, r3
 8010102:	2600      	movs	r6, #0
 8010104:	341a      	adds	r4, #26
 8010106:	42b5      	cmp	r5, r6
 8010108:	d11a      	bne.n	8010140 <_printf_common+0xc8>
 801010a:	2000      	movs	r0, #0
 801010c:	e008      	b.n	8010120 <_printf_common+0xa8>
 801010e:	2301      	movs	r3, #1
 8010110:	4652      	mov	r2, sl
 8010112:	4649      	mov	r1, r9
 8010114:	4638      	mov	r0, r7
 8010116:	47c0      	blx	r8
 8010118:	3001      	adds	r0, #1
 801011a:	d103      	bne.n	8010124 <_printf_common+0xac>
 801011c:	f04f 30ff 	mov.w	r0, #4294967295
 8010120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010124:	3501      	adds	r5, #1
 8010126:	e7c6      	b.n	80100b6 <_printf_common+0x3e>
 8010128:	18e1      	adds	r1, r4, r3
 801012a:	1c5a      	adds	r2, r3, #1
 801012c:	2030      	movs	r0, #48	; 0x30
 801012e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010132:	4422      	add	r2, r4
 8010134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801013c:	3302      	adds	r3, #2
 801013e:	e7c7      	b.n	80100d0 <_printf_common+0x58>
 8010140:	2301      	movs	r3, #1
 8010142:	4622      	mov	r2, r4
 8010144:	4649      	mov	r1, r9
 8010146:	4638      	mov	r0, r7
 8010148:	47c0      	blx	r8
 801014a:	3001      	adds	r0, #1
 801014c:	d0e6      	beq.n	801011c <_printf_common+0xa4>
 801014e:	3601      	adds	r6, #1
 8010150:	e7d9      	b.n	8010106 <_printf_common+0x8e>
	...

08010154 <_printf_i>:
 8010154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010158:	460c      	mov	r4, r1
 801015a:	4691      	mov	r9, r2
 801015c:	7e27      	ldrb	r7, [r4, #24]
 801015e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010160:	2f78      	cmp	r7, #120	; 0x78
 8010162:	4680      	mov	r8, r0
 8010164:	469a      	mov	sl, r3
 8010166:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801016a:	d807      	bhi.n	801017c <_printf_i+0x28>
 801016c:	2f62      	cmp	r7, #98	; 0x62
 801016e:	d80a      	bhi.n	8010186 <_printf_i+0x32>
 8010170:	2f00      	cmp	r7, #0
 8010172:	f000 80d8 	beq.w	8010326 <_printf_i+0x1d2>
 8010176:	2f58      	cmp	r7, #88	; 0x58
 8010178:	f000 80a3 	beq.w	80102c2 <_printf_i+0x16e>
 801017c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010184:	e03a      	b.n	80101fc <_printf_i+0xa8>
 8010186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801018a:	2b15      	cmp	r3, #21
 801018c:	d8f6      	bhi.n	801017c <_printf_i+0x28>
 801018e:	a001      	add	r0, pc, #4	; (adr r0, 8010194 <_printf_i+0x40>)
 8010190:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010194:	080101ed 	.word	0x080101ed
 8010198:	08010201 	.word	0x08010201
 801019c:	0801017d 	.word	0x0801017d
 80101a0:	0801017d 	.word	0x0801017d
 80101a4:	0801017d 	.word	0x0801017d
 80101a8:	0801017d 	.word	0x0801017d
 80101ac:	08010201 	.word	0x08010201
 80101b0:	0801017d 	.word	0x0801017d
 80101b4:	0801017d 	.word	0x0801017d
 80101b8:	0801017d 	.word	0x0801017d
 80101bc:	0801017d 	.word	0x0801017d
 80101c0:	0801030d 	.word	0x0801030d
 80101c4:	08010231 	.word	0x08010231
 80101c8:	080102ef 	.word	0x080102ef
 80101cc:	0801017d 	.word	0x0801017d
 80101d0:	0801017d 	.word	0x0801017d
 80101d4:	0801032f 	.word	0x0801032f
 80101d8:	0801017d 	.word	0x0801017d
 80101dc:	08010231 	.word	0x08010231
 80101e0:	0801017d 	.word	0x0801017d
 80101e4:	0801017d 	.word	0x0801017d
 80101e8:	080102f7 	.word	0x080102f7
 80101ec:	680b      	ldr	r3, [r1, #0]
 80101ee:	1d1a      	adds	r2, r3, #4
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	600a      	str	r2, [r1, #0]
 80101f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80101f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101fc:	2301      	movs	r3, #1
 80101fe:	e0a3      	b.n	8010348 <_printf_i+0x1f4>
 8010200:	6825      	ldr	r5, [r4, #0]
 8010202:	6808      	ldr	r0, [r1, #0]
 8010204:	062e      	lsls	r6, r5, #24
 8010206:	f100 0304 	add.w	r3, r0, #4
 801020a:	d50a      	bpl.n	8010222 <_printf_i+0xce>
 801020c:	6805      	ldr	r5, [r0, #0]
 801020e:	600b      	str	r3, [r1, #0]
 8010210:	2d00      	cmp	r5, #0
 8010212:	da03      	bge.n	801021c <_printf_i+0xc8>
 8010214:	232d      	movs	r3, #45	; 0x2d
 8010216:	426d      	negs	r5, r5
 8010218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801021c:	485e      	ldr	r0, [pc, #376]	; (8010398 <_printf_i+0x244>)
 801021e:	230a      	movs	r3, #10
 8010220:	e019      	b.n	8010256 <_printf_i+0x102>
 8010222:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010226:	6805      	ldr	r5, [r0, #0]
 8010228:	600b      	str	r3, [r1, #0]
 801022a:	bf18      	it	ne
 801022c:	b22d      	sxthne	r5, r5
 801022e:	e7ef      	b.n	8010210 <_printf_i+0xbc>
 8010230:	680b      	ldr	r3, [r1, #0]
 8010232:	6825      	ldr	r5, [r4, #0]
 8010234:	1d18      	adds	r0, r3, #4
 8010236:	6008      	str	r0, [r1, #0]
 8010238:	0628      	lsls	r0, r5, #24
 801023a:	d501      	bpl.n	8010240 <_printf_i+0xec>
 801023c:	681d      	ldr	r5, [r3, #0]
 801023e:	e002      	b.n	8010246 <_printf_i+0xf2>
 8010240:	0669      	lsls	r1, r5, #25
 8010242:	d5fb      	bpl.n	801023c <_printf_i+0xe8>
 8010244:	881d      	ldrh	r5, [r3, #0]
 8010246:	4854      	ldr	r0, [pc, #336]	; (8010398 <_printf_i+0x244>)
 8010248:	2f6f      	cmp	r7, #111	; 0x6f
 801024a:	bf0c      	ite	eq
 801024c:	2308      	moveq	r3, #8
 801024e:	230a      	movne	r3, #10
 8010250:	2100      	movs	r1, #0
 8010252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010256:	6866      	ldr	r6, [r4, #4]
 8010258:	60a6      	str	r6, [r4, #8]
 801025a:	2e00      	cmp	r6, #0
 801025c:	bfa2      	ittt	ge
 801025e:	6821      	ldrge	r1, [r4, #0]
 8010260:	f021 0104 	bicge.w	r1, r1, #4
 8010264:	6021      	strge	r1, [r4, #0]
 8010266:	b90d      	cbnz	r5, 801026c <_printf_i+0x118>
 8010268:	2e00      	cmp	r6, #0
 801026a:	d04d      	beq.n	8010308 <_printf_i+0x1b4>
 801026c:	4616      	mov	r6, r2
 801026e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010272:	fb03 5711 	mls	r7, r3, r1, r5
 8010276:	5dc7      	ldrb	r7, [r0, r7]
 8010278:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801027c:	462f      	mov	r7, r5
 801027e:	42bb      	cmp	r3, r7
 8010280:	460d      	mov	r5, r1
 8010282:	d9f4      	bls.n	801026e <_printf_i+0x11a>
 8010284:	2b08      	cmp	r3, #8
 8010286:	d10b      	bne.n	80102a0 <_printf_i+0x14c>
 8010288:	6823      	ldr	r3, [r4, #0]
 801028a:	07df      	lsls	r7, r3, #31
 801028c:	d508      	bpl.n	80102a0 <_printf_i+0x14c>
 801028e:	6923      	ldr	r3, [r4, #16]
 8010290:	6861      	ldr	r1, [r4, #4]
 8010292:	4299      	cmp	r1, r3
 8010294:	bfde      	ittt	le
 8010296:	2330      	movle	r3, #48	; 0x30
 8010298:	f806 3c01 	strble.w	r3, [r6, #-1]
 801029c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80102a0:	1b92      	subs	r2, r2, r6
 80102a2:	6122      	str	r2, [r4, #16]
 80102a4:	f8cd a000 	str.w	sl, [sp]
 80102a8:	464b      	mov	r3, r9
 80102aa:	aa03      	add	r2, sp, #12
 80102ac:	4621      	mov	r1, r4
 80102ae:	4640      	mov	r0, r8
 80102b0:	f7ff fee2 	bl	8010078 <_printf_common>
 80102b4:	3001      	adds	r0, #1
 80102b6:	d14c      	bne.n	8010352 <_printf_i+0x1fe>
 80102b8:	f04f 30ff 	mov.w	r0, #4294967295
 80102bc:	b004      	add	sp, #16
 80102be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102c2:	4835      	ldr	r0, [pc, #212]	; (8010398 <_printf_i+0x244>)
 80102c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80102c8:	6823      	ldr	r3, [r4, #0]
 80102ca:	680e      	ldr	r6, [r1, #0]
 80102cc:	061f      	lsls	r7, r3, #24
 80102ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80102d2:	600e      	str	r6, [r1, #0]
 80102d4:	d514      	bpl.n	8010300 <_printf_i+0x1ac>
 80102d6:	07d9      	lsls	r1, r3, #31
 80102d8:	bf44      	itt	mi
 80102da:	f043 0320 	orrmi.w	r3, r3, #32
 80102de:	6023      	strmi	r3, [r4, #0]
 80102e0:	b91d      	cbnz	r5, 80102ea <_printf_i+0x196>
 80102e2:	6823      	ldr	r3, [r4, #0]
 80102e4:	f023 0320 	bic.w	r3, r3, #32
 80102e8:	6023      	str	r3, [r4, #0]
 80102ea:	2310      	movs	r3, #16
 80102ec:	e7b0      	b.n	8010250 <_printf_i+0xfc>
 80102ee:	6823      	ldr	r3, [r4, #0]
 80102f0:	f043 0320 	orr.w	r3, r3, #32
 80102f4:	6023      	str	r3, [r4, #0]
 80102f6:	2378      	movs	r3, #120	; 0x78
 80102f8:	4828      	ldr	r0, [pc, #160]	; (801039c <_printf_i+0x248>)
 80102fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80102fe:	e7e3      	b.n	80102c8 <_printf_i+0x174>
 8010300:	065e      	lsls	r6, r3, #25
 8010302:	bf48      	it	mi
 8010304:	b2ad      	uxthmi	r5, r5
 8010306:	e7e6      	b.n	80102d6 <_printf_i+0x182>
 8010308:	4616      	mov	r6, r2
 801030a:	e7bb      	b.n	8010284 <_printf_i+0x130>
 801030c:	680b      	ldr	r3, [r1, #0]
 801030e:	6826      	ldr	r6, [r4, #0]
 8010310:	6960      	ldr	r0, [r4, #20]
 8010312:	1d1d      	adds	r5, r3, #4
 8010314:	600d      	str	r5, [r1, #0]
 8010316:	0635      	lsls	r5, r6, #24
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	d501      	bpl.n	8010320 <_printf_i+0x1cc>
 801031c:	6018      	str	r0, [r3, #0]
 801031e:	e002      	b.n	8010326 <_printf_i+0x1d2>
 8010320:	0671      	lsls	r1, r6, #25
 8010322:	d5fb      	bpl.n	801031c <_printf_i+0x1c8>
 8010324:	8018      	strh	r0, [r3, #0]
 8010326:	2300      	movs	r3, #0
 8010328:	6123      	str	r3, [r4, #16]
 801032a:	4616      	mov	r6, r2
 801032c:	e7ba      	b.n	80102a4 <_printf_i+0x150>
 801032e:	680b      	ldr	r3, [r1, #0]
 8010330:	1d1a      	adds	r2, r3, #4
 8010332:	600a      	str	r2, [r1, #0]
 8010334:	681e      	ldr	r6, [r3, #0]
 8010336:	6862      	ldr	r2, [r4, #4]
 8010338:	2100      	movs	r1, #0
 801033a:	4630      	mov	r0, r6
 801033c:	f7ef ff68 	bl	8000210 <memchr>
 8010340:	b108      	cbz	r0, 8010346 <_printf_i+0x1f2>
 8010342:	1b80      	subs	r0, r0, r6
 8010344:	6060      	str	r0, [r4, #4]
 8010346:	6863      	ldr	r3, [r4, #4]
 8010348:	6123      	str	r3, [r4, #16]
 801034a:	2300      	movs	r3, #0
 801034c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010350:	e7a8      	b.n	80102a4 <_printf_i+0x150>
 8010352:	6923      	ldr	r3, [r4, #16]
 8010354:	4632      	mov	r2, r6
 8010356:	4649      	mov	r1, r9
 8010358:	4640      	mov	r0, r8
 801035a:	47d0      	blx	sl
 801035c:	3001      	adds	r0, #1
 801035e:	d0ab      	beq.n	80102b8 <_printf_i+0x164>
 8010360:	6823      	ldr	r3, [r4, #0]
 8010362:	079b      	lsls	r3, r3, #30
 8010364:	d413      	bmi.n	801038e <_printf_i+0x23a>
 8010366:	68e0      	ldr	r0, [r4, #12]
 8010368:	9b03      	ldr	r3, [sp, #12]
 801036a:	4298      	cmp	r0, r3
 801036c:	bfb8      	it	lt
 801036e:	4618      	movlt	r0, r3
 8010370:	e7a4      	b.n	80102bc <_printf_i+0x168>
 8010372:	2301      	movs	r3, #1
 8010374:	4632      	mov	r2, r6
 8010376:	4649      	mov	r1, r9
 8010378:	4640      	mov	r0, r8
 801037a:	47d0      	blx	sl
 801037c:	3001      	adds	r0, #1
 801037e:	d09b      	beq.n	80102b8 <_printf_i+0x164>
 8010380:	3501      	adds	r5, #1
 8010382:	68e3      	ldr	r3, [r4, #12]
 8010384:	9903      	ldr	r1, [sp, #12]
 8010386:	1a5b      	subs	r3, r3, r1
 8010388:	42ab      	cmp	r3, r5
 801038a:	dcf2      	bgt.n	8010372 <_printf_i+0x21e>
 801038c:	e7eb      	b.n	8010366 <_printf_i+0x212>
 801038e:	2500      	movs	r5, #0
 8010390:	f104 0619 	add.w	r6, r4, #25
 8010394:	e7f5      	b.n	8010382 <_printf_i+0x22e>
 8010396:	bf00      	nop
 8010398:	08027e32 	.word	0x08027e32
 801039c:	08027e43 	.word	0x08027e43

080103a0 <_scanf_float>:
 80103a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a4:	b087      	sub	sp, #28
 80103a6:	4617      	mov	r7, r2
 80103a8:	9303      	str	r3, [sp, #12]
 80103aa:	688b      	ldr	r3, [r1, #8]
 80103ac:	1e5a      	subs	r2, r3, #1
 80103ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80103b2:	bf83      	ittte	hi
 80103b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80103b8:	195b      	addhi	r3, r3, r5
 80103ba:	9302      	strhi	r3, [sp, #8]
 80103bc:	2300      	movls	r3, #0
 80103be:	bf86      	itte	hi
 80103c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80103c4:	608b      	strhi	r3, [r1, #8]
 80103c6:	9302      	strls	r3, [sp, #8]
 80103c8:	680b      	ldr	r3, [r1, #0]
 80103ca:	468b      	mov	fp, r1
 80103cc:	2500      	movs	r5, #0
 80103ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80103d2:	f84b 3b1c 	str.w	r3, [fp], #28
 80103d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80103da:	4680      	mov	r8, r0
 80103dc:	460c      	mov	r4, r1
 80103de:	465e      	mov	r6, fp
 80103e0:	46aa      	mov	sl, r5
 80103e2:	46a9      	mov	r9, r5
 80103e4:	9501      	str	r5, [sp, #4]
 80103e6:	68a2      	ldr	r2, [r4, #8]
 80103e8:	b152      	cbz	r2, 8010400 <_scanf_float+0x60>
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	2b4e      	cmp	r3, #78	; 0x4e
 80103f0:	d864      	bhi.n	80104bc <_scanf_float+0x11c>
 80103f2:	2b40      	cmp	r3, #64	; 0x40
 80103f4:	d83c      	bhi.n	8010470 <_scanf_float+0xd0>
 80103f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80103fa:	b2c8      	uxtb	r0, r1
 80103fc:	280e      	cmp	r0, #14
 80103fe:	d93a      	bls.n	8010476 <_scanf_float+0xd6>
 8010400:	f1b9 0f00 	cmp.w	r9, #0
 8010404:	d003      	beq.n	801040e <_scanf_float+0x6e>
 8010406:	6823      	ldr	r3, [r4, #0]
 8010408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801040c:	6023      	str	r3, [r4, #0]
 801040e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010412:	f1ba 0f01 	cmp.w	sl, #1
 8010416:	f200 8113 	bhi.w	8010640 <_scanf_float+0x2a0>
 801041a:	455e      	cmp	r6, fp
 801041c:	f200 8105 	bhi.w	801062a <_scanf_float+0x28a>
 8010420:	2501      	movs	r5, #1
 8010422:	4628      	mov	r0, r5
 8010424:	b007      	add	sp, #28
 8010426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801042e:	2a0d      	cmp	r2, #13
 8010430:	d8e6      	bhi.n	8010400 <_scanf_float+0x60>
 8010432:	a101      	add	r1, pc, #4	; (adr r1, 8010438 <_scanf_float+0x98>)
 8010434:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010438:	08010577 	.word	0x08010577
 801043c:	08010401 	.word	0x08010401
 8010440:	08010401 	.word	0x08010401
 8010444:	08010401 	.word	0x08010401
 8010448:	080105d7 	.word	0x080105d7
 801044c:	080105af 	.word	0x080105af
 8010450:	08010401 	.word	0x08010401
 8010454:	08010401 	.word	0x08010401
 8010458:	08010585 	.word	0x08010585
 801045c:	08010401 	.word	0x08010401
 8010460:	08010401 	.word	0x08010401
 8010464:	08010401 	.word	0x08010401
 8010468:	08010401 	.word	0x08010401
 801046c:	0801053d 	.word	0x0801053d
 8010470:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010474:	e7db      	b.n	801042e <_scanf_float+0x8e>
 8010476:	290e      	cmp	r1, #14
 8010478:	d8c2      	bhi.n	8010400 <_scanf_float+0x60>
 801047a:	a001      	add	r0, pc, #4	; (adr r0, 8010480 <_scanf_float+0xe0>)
 801047c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010480:	0801052f 	.word	0x0801052f
 8010484:	08010401 	.word	0x08010401
 8010488:	0801052f 	.word	0x0801052f
 801048c:	080105c3 	.word	0x080105c3
 8010490:	08010401 	.word	0x08010401
 8010494:	080104dd 	.word	0x080104dd
 8010498:	08010519 	.word	0x08010519
 801049c:	08010519 	.word	0x08010519
 80104a0:	08010519 	.word	0x08010519
 80104a4:	08010519 	.word	0x08010519
 80104a8:	08010519 	.word	0x08010519
 80104ac:	08010519 	.word	0x08010519
 80104b0:	08010519 	.word	0x08010519
 80104b4:	08010519 	.word	0x08010519
 80104b8:	08010519 	.word	0x08010519
 80104bc:	2b6e      	cmp	r3, #110	; 0x6e
 80104be:	d809      	bhi.n	80104d4 <_scanf_float+0x134>
 80104c0:	2b60      	cmp	r3, #96	; 0x60
 80104c2:	d8b2      	bhi.n	801042a <_scanf_float+0x8a>
 80104c4:	2b54      	cmp	r3, #84	; 0x54
 80104c6:	d077      	beq.n	80105b8 <_scanf_float+0x218>
 80104c8:	2b59      	cmp	r3, #89	; 0x59
 80104ca:	d199      	bne.n	8010400 <_scanf_float+0x60>
 80104cc:	2d07      	cmp	r5, #7
 80104ce:	d197      	bne.n	8010400 <_scanf_float+0x60>
 80104d0:	2508      	movs	r5, #8
 80104d2:	e029      	b.n	8010528 <_scanf_float+0x188>
 80104d4:	2b74      	cmp	r3, #116	; 0x74
 80104d6:	d06f      	beq.n	80105b8 <_scanf_float+0x218>
 80104d8:	2b79      	cmp	r3, #121	; 0x79
 80104da:	e7f6      	b.n	80104ca <_scanf_float+0x12a>
 80104dc:	6821      	ldr	r1, [r4, #0]
 80104de:	05c8      	lsls	r0, r1, #23
 80104e0:	d51a      	bpl.n	8010518 <_scanf_float+0x178>
 80104e2:	9b02      	ldr	r3, [sp, #8]
 80104e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80104e8:	6021      	str	r1, [r4, #0]
 80104ea:	f109 0901 	add.w	r9, r9, #1
 80104ee:	b11b      	cbz	r3, 80104f8 <_scanf_float+0x158>
 80104f0:	3b01      	subs	r3, #1
 80104f2:	3201      	adds	r2, #1
 80104f4:	9302      	str	r3, [sp, #8]
 80104f6:	60a2      	str	r2, [r4, #8]
 80104f8:	68a3      	ldr	r3, [r4, #8]
 80104fa:	3b01      	subs	r3, #1
 80104fc:	60a3      	str	r3, [r4, #8]
 80104fe:	6923      	ldr	r3, [r4, #16]
 8010500:	3301      	adds	r3, #1
 8010502:	6123      	str	r3, [r4, #16]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	3b01      	subs	r3, #1
 8010508:	2b00      	cmp	r3, #0
 801050a:	607b      	str	r3, [r7, #4]
 801050c:	f340 8084 	ble.w	8010618 <_scanf_float+0x278>
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	3301      	adds	r3, #1
 8010514:	603b      	str	r3, [r7, #0]
 8010516:	e766      	b.n	80103e6 <_scanf_float+0x46>
 8010518:	eb1a 0f05 	cmn.w	sl, r5
 801051c:	f47f af70 	bne.w	8010400 <_scanf_float+0x60>
 8010520:	6822      	ldr	r2, [r4, #0]
 8010522:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010526:	6022      	str	r2, [r4, #0]
 8010528:	f806 3b01 	strb.w	r3, [r6], #1
 801052c:	e7e4      	b.n	80104f8 <_scanf_float+0x158>
 801052e:	6822      	ldr	r2, [r4, #0]
 8010530:	0610      	lsls	r0, r2, #24
 8010532:	f57f af65 	bpl.w	8010400 <_scanf_float+0x60>
 8010536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801053a:	e7f4      	b.n	8010526 <_scanf_float+0x186>
 801053c:	f1ba 0f00 	cmp.w	sl, #0
 8010540:	d10e      	bne.n	8010560 <_scanf_float+0x1c0>
 8010542:	f1b9 0f00 	cmp.w	r9, #0
 8010546:	d10e      	bne.n	8010566 <_scanf_float+0x1c6>
 8010548:	6822      	ldr	r2, [r4, #0]
 801054a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801054e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010552:	d108      	bne.n	8010566 <_scanf_float+0x1c6>
 8010554:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010558:	6022      	str	r2, [r4, #0]
 801055a:	f04f 0a01 	mov.w	sl, #1
 801055e:	e7e3      	b.n	8010528 <_scanf_float+0x188>
 8010560:	f1ba 0f02 	cmp.w	sl, #2
 8010564:	d055      	beq.n	8010612 <_scanf_float+0x272>
 8010566:	2d01      	cmp	r5, #1
 8010568:	d002      	beq.n	8010570 <_scanf_float+0x1d0>
 801056a:	2d04      	cmp	r5, #4
 801056c:	f47f af48 	bne.w	8010400 <_scanf_float+0x60>
 8010570:	3501      	adds	r5, #1
 8010572:	b2ed      	uxtb	r5, r5
 8010574:	e7d8      	b.n	8010528 <_scanf_float+0x188>
 8010576:	f1ba 0f01 	cmp.w	sl, #1
 801057a:	f47f af41 	bne.w	8010400 <_scanf_float+0x60>
 801057e:	f04f 0a02 	mov.w	sl, #2
 8010582:	e7d1      	b.n	8010528 <_scanf_float+0x188>
 8010584:	b97d      	cbnz	r5, 80105a6 <_scanf_float+0x206>
 8010586:	f1b9 0f00 	cmp.w	r9, #0
 801058a:	f47f af3c 	bne.w	8010406 <_scanf_float+0x66>
 801058e:	6822      	ldr	r2, [r4, #0]
 8010590:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010594:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010598:	f47f af39 	bne.w	801040e <_scanf_float+0x6e>
 801059c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80105a0:	6022      	str	r2, [r4, #0]
 80105a2:	2501      	movs	r5, #1
 80105a4:	e7c0      	b.n	8010528 <_scanf_float+0x188>
 80105a6:	2d03      	cmp	r5, #3
 80105a8:	d0e2      	beq.n	8010570 <_scanf_float+0x1d0>
 80105aa:	2d05      	cmp	r5, #5
 80105ac:	e7de      	b.n	801056c <_scanf_float+0x1cc>
 80105ae:	2d02      	cmp	r5, #2
 80105b0:	f47f af26 	bne.w	8010400 <_scanf_float+0x60>
 80105b4:	2503      	movs	r5, #3
 80105b6:	e7b7      	b.n	8010528 <_scanf_float+0x188>
 80105b8:	2d06      	cmp	r5, #6
 80105ba:	f47f af21 	bne.w	8010400 <_scanf_float+0x60>
 80105be:	2507      	movs	r5, #7
 80105c0:	e7b2      	b.n	8010528 <_scanf_float+0x188>
 80105c2:	6822      	ldr	r2, [r4, #0]
 80105c4:	0591      	lsls	r1, r2, #22
 80105c6:	f57f af1b 	bpl.w	8010400 <_scanf_float+0x60>
 80105ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80105ce:	6022      	str	r2, [r4, #0]
 80105d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80105d4:	e7a8      	b.n	8010528 <_scanf_float+0x188>
 80105d6:	6822      	ldr	r2, [r4, #0]
 80105d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80105dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80105e0:	d006      	beq.n	80105f0 <_scanf_float+0x250>
 80105e2:	0550      	lsls	r0, r2, #21
 80105e4:	f57f af0c 	bpl.w	8010400 <_scanf_float+0x60>
 80105e8:	f1b9 0f00 	cmp.w	r9, #0
 80105ec:	f43f af0f 	beq.w	801040e <_scanf_float+0x6e>
 80105f0:	0591      	lsls	r1, r2, #22
 80105f2:	bf58      	it	pl
 80105f4:	9901      	ldrpl	r1, [sp, #4]
 80105f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80105fa:	bf58      	it	pl
 80105fc:	eba9 0101 	subpl.w	r1, r9, r1
 8010600:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010604:	bf58      	it	pl
 8010606:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801060a:	6022      	str	r2, [r4, #0]
 801060c:	f04f 0900 	mov.w	r9, #0
 8010610:	e78a      	b.n	8010528 <_scanf_float+0x188>
 8010612:	f04f 0a03 	mov.w	sl, #3
 8010616:	e787      	b.n	8010528 <_scanf_float+0x188>
 8010618:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801061c:	4639      	mov	r1, r7
 801061e:	4640      	mov	r0, r8
 8010620:	4798      	blx	r3
 8010622:	2800      	cmp	r0, #0
 8010624:	f43f aedf 	beq.w	80103e6 <_scanf_float+0x46>
 8010628:	e6ea      	b.n	8010400 <_scanf_float+0x60>
 801062a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801062e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010632:	463a      	mov	r2, r7
 8010634:	4640      	mov	r0, r8
 8010636:	4798      	blx	r3
 8010638:	6923      	ldr	r3, [r4, #16]
 801063a:	3b01      	subs	r3, #1
 801063c:	6123      	str	r3, [r4, #16]
 801063e:	e6ec      	b.n	801041a <_scanf_float+0x7a>
 8010640:	1e6b      	subs	r3, r5, #1
 8010642:	2b06      	cmp	r3, #6
 8010644:	d825      	bhi.n	8010692 <_scanf_float+0x2f2>
 8010646:	2d02      	cmp	r5, #2
 8010648:	d836      	bhi.n	80106b8 <_scanf_float+0x318>
 801064a:	455e      	cmp	r6, fp
 801064c:	f67f aee8 	bls.w	8010420 <_scanf_float+0x80>
 8010650:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010654:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010658:	463a      	mov	r2, r7
 801065a:	4640      	mov	r0, r8
 801065c:	4798      	blx	r3
 801065e:	6923      	ldr	r3, [r4, #16]
 8010660:	3b01      	subs	r3, #1
 8010662:	6123      	str	r3, [r4, #16]
 8010664:	e7f1      	b.n	801064a <_scanf_float+0x2aa>
 8010666:	9802      	ldr	r0, [sp, #8]
 8010668:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801066c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010670:	9002      	str	r0, [sp, #8]
 8010672:	463a      	mov	r2, r7
 8010674:	4640      	mov	r0, r8
 8010676:	4798      	blx	r3
 8010678:	6923      	ldr	r3, [r4, #16]
 801067a:	3b01      	subs	r3, #1
 801067c:	6123      	str	r3, [r4, #16]
 801067e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010682:	fa5f fa8a 	uxtb.w	sl, sl
 8010686:	f1ba 0f02 	cmp.w	sl, #2
 801068a:	d1ec      	bne.n	8010666 <_scanf_float+0x2c6>
 801068c:	3d03      	subs	r5, #3
 801068e:	b2ed      	uxtb	r5, r5
 8010690:	1b76      	subs	r6, r6, r5
 8010692:	6823      	ldr	r3, [r4, #0]
 8010694:	05da      	lsls	r2, r3, #23
 8010696:	d52f      	bpl.n	80106f8 <_scanf_float+0x358>
 8010698:	055b      	lsls	r3, r3, #21
 801069a:	d510      	bpl.n	80106be <_scanf_float+0x31e>
 801069c:	455e      	cmp	r6, fp
 801069e:	f67f aebf 	bls.w	8010420 <_scanf_float+0x80>
 80106a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80106a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80106aa:	463a      	mov	r2, r7
 80106ac:	4640      	mov	r0, r8
 80106ae:	4798      	blx	r3
 80106b0:	6923      	ldr	r3, [r4, #16]
 80106b2:	3b01      	subs	r3, #1
 80106b4:	6123      	str	r3, [r4, #16]
 80106b6:	e7f1      	b.n	801069c <_scanf_float+0x2fc>
 80106b8:	46aa      	mov	sl, r5
 80106ba:	9602      	str	r6, [sp, #8]
 80106bc:	e7df      	b.n	801067e <_scanf_float+0x2de>
 80106be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80106c2:	6923      	ldr	r3, [r4, #16]
 80106c4:	2965      	cmp	r1, #101	; 0x65
 80106c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80106ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80106ce:	6123      	str	r3, [r4, #16]
 80106d0:	d00c      	beq.n	80106ec <_scanf_float+0x34c>
 80106d2:	2945      	cmp	r1, #69	; 0x45
 80106d4:	d00a      	beq.n	80106ec <_scanf_float+0x34c>
 80106d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80106da:	463a      	mov	r2, r7
 80106dc:	4640      	mov	r0, r8
 80106de:	4798      	blx	r3
 80106e0:	6923      	ldr	r3, [r4, #16]
 80106e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80106e6:	3b01      	subs	r3, #1
 80106e8:	1eb5      	subs	r5, r6, #2
 80106ea:	6123      	str	r3, [r4, #16]
 80106ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80106f0:	463a      	mov	r2, r7
 80106f2:	4640      	mov	r0, r8
 80106f4:	4798      	blx	r3
 80106f6:	462e      	mov	r6, r5
 80106f8:	6825      	ldr	r5, [r4, #0]
 80106fa:	f015 0510 	ands.w	r5, r5, #16
 80106fe:	d158      	bne.n	80107b2 <_scanf_float+0x412>
 8010700:	7035      	strb	r5, [r6, #0]
 8010702:	6823      	ldr	r3, [r4, #0]
 8010704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801070c:	d11c      	bne.n	8010748 <_scanf_float+0x3a8>
 801070e:	9b01      	ldr	r3, [sp, #4]
 8010710:	454b      	cmp	r3, r9
 8010712:	eba3 0209 	sub.w	r2, r3, r9
 8010716:	d124      	bne.n	8010762 <_scanf_float+0x3c2>
 8010718:	2200      	movs	r2, #0
 801071a:	4659      	mov	r1, fp
 801071c:	4640      	mov	r0, r8
 801071e:	f000 fe9d 	bl	801145c <_strtod_r>
 8010722:	9b03      	ldr	r3, [sp, #12]
 8010724:	6821      	ldr	r1, [r4, #0]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f011 0f02 	tst.w	r1, #2
 801072c:	ec57 6b10 	vmov	r6, r7, d0
 8010730:	f103 0204 	add.w	r2, r3, #4
 8010734:	d020      	beq.n	8010778 <_scanf_float+0x3d8>
 8010736:	9903      	ldr	r1, [sp, #12]
 8010738:	600a      	str	r2, [r1, #0]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	e9c3 6700 	strd	r6, r7, [r3]
 8010740:	68e3      	ldr	r3, [r4, #12]
 8010742:	3301      	adds	r3, #1
 8010744:	60e3      	str	r3, [r4, #12]
 8010746:	e66c      	b.n	8010422 <_scanf_float+0x82>
 8010748:	9b04      	ldr	r3, [sp, #16]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d0e4      	beq.n	8010718 <_scanf_float+0x378>
 801074e:	9905      	ldr	r1, [sp, #20]
 8010750:	230a      	movs	r3, #10
 8010752:	462a      	mov	r2, r5
 8010754:	3101      	adds	r1, #1
 8010756:	4640      	mov	r0, r8
 8010758:	f000 ff72 	bl	8011640 <_strtol_r>
 801075c:	9b04      	ldr	r3, [sp, #16]
 801075e:	9e05      	ldr	r6, [sp, #20]
 8010760:	1ac2      	subs	r2, r0, r3
 8010762:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010766:	429e      	cmp	r6, r3
 8010768:	bf28      	it	cs
 801076a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801076e:	4912      	ldr	r1, [pc, #72]	; (80107b8 <_scanf_float+0x418>)
 8010770:	4630      	mov	r0, r6
 8010772:	f000 f82b 	bl	80107cc <siprintf>
 8010776:	e7cf      	b.n	8010718 <_scanf_float+0x378>
 8010778:	f011 0f04 	tst.w	r1, #4
 801077c:	9903      	ldr	r1, [sp, #12]
 801077e:	600a      	str	r2, [r1, #0]
 8010780:	d1db      	bne.n	801073a <_scanf_float+0x39a>
 8010782:	f8d3 8000 	ldr.w	r8, [r3]
 8010786:	ee10 2a10 	vmov	r2, s0
 801078a:	ee10 0a10 	vmov	r0, s0
 801078e:	463b      	mov	r3, r7
 8010790:	4639      	mov	r1, r7
 8010792:	f7f0 f9e3 	bl	8000b5c <__aeabi_dcmpun>
 8010796:	b128      	cbz	r0, 80107a4 <_scanf_float+0x404>
 8010798:	4808      	ldr	r0, [pc, #32]	; (80107bc <_scanf_float+0x41c>)
 801079a:	f000 f811 	bl	80107c0 <nanf>
 801079e:	ed88 0a00 	vstr	s0, [r8]
 80107a2:	e7cd      	b.n	8010740 <_scanf_float+0x3a0>
 80107a4:	4630      	mov	r0, r6
 80107a6:	4639      	mov	r1, r7
 80107a8:	f7f0 fa36 	bl	8000c18 <__aeabi_d2f>
 80107ac:	f8c8 0000 	str.w	r0, [r8]
 80107b0:	e7c6      	b.n	8010740 <_scanf_float+0x3a0>
 80107b2:	2500      	movs	r5, #0
 80107b4:	e635      	b.n	8010422 <_scanf_float+0x82>
 80107b6:	bf00      	nop
 80107b8:	08027e54 	.word	0x08027e54
 80107bc:	08027f63 	.word	0x08027f63

080107c0 <nanf>:
 80107c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80107c8 <nanf+0x8>
 80107c4:	4770      	bx	lr
 80107c6:	bf00      	nop
 80107c8:	7fc00000 	.word	0x7fc00000

080107cc <siprintf>:
 80107cc:	b40e      	push	{r1, r2, r3}
 80107ce:	b500      	push	{lr}
 80107d0:	b09c      	sub	sp, #112	; 0x70
 80107d2:	ab1d      	add	r3, sp, #116	; 0x74
 80107d4:	9002      	str	r0, [sp, #8]
 80107d6:	9006      	str	r0, [sp, #24]
 80107d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80107dc:	4809      	ldr	r0, [pc, #36]	; (8010804 <siprintf+0x38>)
 80107de:	9107      	str	r1, [sp, #28]
 80107e0:	9104      	str	r1, [sp, #16]
 80107e2:	4909      	ldr	r1, [pc, #36]	; (8010808 <siprintf+0x3c>)
 80107e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80107e8:	9105      	str	r1, [sp, #20]
 80107ea:	6800      	ldr	r0, [r0, #0]
 80107ec:	9301      	str	r3, [sp, #4]
 80107ee:	a902      	add	r1, sp, #8
 80107f0:	f002 ff48 	bl	8013684 <_svfiprintf_r>
 80107f4:	9b02      	ldr	r3, [sp, #8]
 80107f6:	2200      	movs	r2, #0
 80107f8:	701a      	strb	r2, [r3, #0]
 80107fa:	b01c      	add	sp, #112	; 0x70
 80107fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010800:	b003      	add	sp, #12
 8010802:	4770      	bx	lr
 8010804:	20000040 	.word	0x20000040
 8010808:	ffff0208 	.word	0xffff0208

0801080c <sulp>:
 801080c:	b570      	push	{r4, r5, r6, lr}
 801080e:	4604      	mov	r4, r0
 8010810:	460d      	mov	r5, r1
 8010812:	ec45 4b10 	vmov	d0, r4, r5
 8010816:	4616      	mov	r6, r2
 8010818:	f002 fcd0 	bl	80131bc <__ulp>
 801081c:	ec51 0b10 	vmov	r0, r1, d0
 8010820:	b17e      	cbz	r6, 8010842 <sulp+0x36>
 8010822:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010826:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801082a:	2b00      	cmp	r3, #0
 801082c:	dd09      	ble.n	8010842 <sulp+0x36>
 801082e:	051b      	lsls	r3, r3, #20
 8010830:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010834:	2400      	movs	r4, #0
 8010836:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801083a:	4622      	mov	r2, r4
 801083c:	462b      	mov	r3, r5
 801083e:	f7ef fef3 	bl	8000628 <__aeabi_dmul>
 8010842:	bd70      	pop	{r4, r5, r6, pc}
 8010844:	0000      	movs	r0, r0
	...

08010848 <_strtod_l>:
 8010848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801084c:	b0a3      	sub	sp, #140	; 0x8c
 801084e:	461f      	mov	r7, r3
 8010850:	2300      	movs	r3, #0
 8010852:	931e      	str	r3, [sp, #120]	; 0x78
 8010854:	4ba4      	ldr	r3, [pc, #656]	; (8010ae8 <_strtod_l+0x2a0>)
 8010856:	9219      	str	r2, [sp, #100]	; 0x64
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	9307      	str	r3, [sp, #28]
 801085c:	4604      	mov	r4, r0
 801085e:	4618      	mov	r0, r3
 8010860:	4688      	mov	r8, r1
 8010862:	f7ef fcc7 	bl	80001f4 <strlen>
 8010866:	f04f 0a00 	mov.w	sl, #0
 801086a:	4605      	mov	r5, r0
 801086c:	f04f 0b00 	mov.w	fp, #0
 8010870:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010876:	781a      	ldrb	r2, [r3, #0]
 8010878:	2a2b      	cmp	r2, #43	; 0x2b
 801087a:	d04c      	beq.n	8010916 <_strtod_l+0xce>
 801087c:	d839      	bhi.n	80108f2 <_strtod_l+0xaa>
 801087e:	2a0d      	cmp	r2, #13
 8010880:	d832      	bhi.n	80108e8 <_strtod_l+0xa0>
 8010882:	2a08      	cmp	r2, #8
 8010884:	d832      	bhi.n	80108ec <_strtod_l+0xa4>
 8010886:	2a00      	cmp	r2, #0
 8010888:	d03c      	beq.n	8010904 <_strtod_l+0xbc>
 801088a:	2300      	movs	r3, #0
 801088c:	930e      	str	r3, [sp, #56]	; 0x38
 801088e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010890:	7833      	ldrb	r3, [r6, #0]
 8010892:	2b30      	cmp	r3, #48	; 0x30
 8010894:	f040 80b4 	bne.w	8010a00 <_strtod_l+0x1b8>
 8010898:	7873      	ldrb	r3, [r6, #1]
 801089a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801089e:	2b58      	cmp	r3, #88	; 0x58
 80108a0:	d16c      	bne.n	801097c <_strtod_l+0x134>
 80108a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	ab1e      	add	r3, sp, #120	; 0x78
 80108a8:	9702      	str	r7, [sp, #8]
 80108aa:	9300      	str	r3, [sp, #0]
 80108ac:	4a8f      	ldr	r2, [pc, #572]	; (8010aec <_strtod_l+0x2a4>)
 80108ae:	ab1f      	add	r3, sp, #124	; 0x7c
 80108b0:	a91d      	add	r1, sp, #116	; 0x74
 80108b2:	4620      	mov	r0, r4
 80108b4:	f001 fde2 	bl	801247c <__gethex>
 80108b8:	f010 0707 	ands.w	r7, r0, #7
 80108bc:	4605      	mov	r5, r0
 80108be:	d005      	beq.n	80108cc <_strtod_l+0x84>
 80108c0:	2f06      	cmp	r7, #6
 80108c2:	d12a      	bne.n	801091a <_strtod_l+0xd2>
 80108c4:	3601      	adds	r6, #1
 80108c6:	2300      	movs	r3, #0
 80108c8:	961d      	str	r6, [sp, #116]	; 0x74
 80108ca:	930e      	str	r3, [sp, #56]	; 0x38
 80108cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	f040 8596 	bne.w	8011400 <_strtod_l+0xbb8>
 80108d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108d6:	b1db      	cbz	r3, 8010910 <_strtod_l+0xc8>
 80108d8:	4652      	mov	r2, sl
 80108da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80108de:	ec43 2b10 	vmov	d0, r2, r3
 80108e2:	b023      	add	sp, #140	; 0x8c
 80108e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e8:	2a20      	cmp	r2, #32
 80108ea:	d1ce      	bne.n	801088a <_strtod_l+0x42>
 80108ec:	3301      	adds	r3, #1
 80108ee:	931d      	str	r3, [sp, #116]	; 0x74
 80108f0:	e7c0      	b.n	8010874 <_strtod_l+0x2c>
 80108f2:	2a2d      	cmp	r2, #45	; 0x2d
 80108f4:	d1c9      	bne.n	801088a <_strtod_l+0x42>
 80108f6:	2201      	movs	r2, #1
 80108f8:	920e      	str	r2, [sp, #56]	; 0x38
 80108fa:	1c5a      	adds	r2, r3, #1
 80108fc:	921d      	str	r2, [sp, #116]	; 0x74
 80108fe:	785b      	ldrb	r3, [r3, #1]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d1c4      	bne.n	801088e <_strtod_l+0x46>
 8010904:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010906:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801090a:	2b00      	cmp	r3, #0
 801090c:	f040 8576 	bne.w	80113fc <_strtod_l+0xbb4>
 8010910:	4652      	mov	r2, sl
 8010912:	465b      	mov	r3, fp
 8010914:	e7e3      	b.n	80108de <_strtod_l+0x96>
 8010916:	2200      	movs	r2, #0
 8010918:	e7ee      	b.n	80108f8 <_strtod_l+0xb0>
 801091a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801091c:	b13a      	cbz	r2, 801092e <_strtod_l+0xe6>
 801091e:	2135      	movs	r1, #53	; 0x35
 8010920:	a820      	add	r0, sp, #128	; 0x80
 8010922:	f002 fd56 	bl	80133d2 <__copybits>
 8010926:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010928:	4620      	mov	r0, r4
 801092a:	f002 f91b 	bl	8012b64 <_Bfree>
 801092e:	3f01      	subs	r7, #1
 8010930:	2f05      	cmp	r7, #5
 8010932:	d807      	bhi.n	8010944 <_strtod_l+0xfc>
 8010934:	e8df f007 	tbb	[pc, r7]
 8010938:	1d180b0e 	.word	0x1d180b0e
 801093c:	030e      	.short	0x030e
 801093e:	f04f 0b00 	mov.w	fp, #0
 8010942:	46da      	mov	sl, fp
 8010944:	0728      	lsls	r0, r5, #28
 8010946:	d5c1      	bpl.n	80108cc <_strtod_l+0x84>
 8010948:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801094c:	e7be      	b.n	80108cc <_strtod_l+0x84>
 801094e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010952:	e7f7      	b.n	8010944 <_strtod_l+0xfc>
 8010954:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010958:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801095a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801095e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010962:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010966:	e7ed      	b.n	8010944 <_strtod_l+0xfc>
 8010968:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010af0 <_strtod_l+0x2a8>
 801096c:	f04f 0a00 	mov.w	sl, #0
 8010970:	e7e8      	b.n	8010944 <_strtod_l+0xfc>
 8010972:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010976:	f04f 3aff 	mov.w	sl, #4294967295
 801097a:	e7e3      	b.n	8010944 <_strtod_l+0xfc>
 801097c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	921d      	str	r2, [sp, #116]	; 0x74
 8010982:	785b      	ldrb	r3, [r3, #1]
 8010984:	2b30      	cmp	r3, #48	; 0x30
 8010986:	d0f9      	beq.n	801097c <_strtod_l+0x134>
 8010988:	2b00      	cmp	r3, #0
 801098a:	d09f      	beq.n	80108cc <_strtod_l+0x84>
 801098c:	2301      	movs	r3, #1
 801098e:	f04f 0900 	mov.w	r9, #0
 8010992:	9304      	str	r3, [sp, #16]
 8010994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010996:	930a      	str	r3, [sp, #40]	; 0x28
 8010998:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801099c:	464f      	mov	r7, r9
 801099e:	220a      	movs	r2, #10
 80109a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80109a2:	7806      	ldrb	r6, [r0, #0]
 80109a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80109a8:	b2d9      	uxtb	r1, r3
 80109aa:	2909      	cmp	r1, #9
 80109ac:	d92a      	bls.n	8010a04 <_strtod_l+0x1bc>
 80109ae:	9907      	ldr	r1, [sp, #28]
 80109b0:	462a      	mov	r2, r5
 80109b2:	f003 f8d9 	bl	8013b68 <strncmp>
 80109b6:	b398      	cbz	r0, 8010a20 <_strtod_l+0x1d8>
 80109b8:	2000      	movs	r0, #0
 80109ba:	4633      	mov	r3, r6
 80109bc:	463d      	mov	r5, r7
 80109be:	9007      	str	r0, [sp, #28]
 80109c0:	4602      	mov	r2, r0
 80109c2:	2b65      	cmp	r3, #101	; 0x65
 80109c4:	d001      	beq.n	80109ca <_strtod_l+0x182>
 80109c6:	2b45      	cmp	r3, #69	; 0x45
 80109c8:	d118      	bne.n	80109fc <_strtod_l+0x1b4>
 80109ca:	b91d      	cbnz	r5, 80109d4 <_strtod_l+0x18c>
 80109cc:	9b04      	ldr	r3, [sp, #16]
 80109ce:	4303      	orrs	r3, r0
 80109d0:	d098      	beq.n	8010904 <_strtod_l+0xbc>
 80109d2:	2500      	movs	r5, #0
 80109d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80109d8:	f108 0301 	add.w	r3, r8, #1
 80109dc:	931d      	str	r3, [sp, #116]	; 0x74
 80109de:	f898 3001 	ldrb.w	r3, [r8, #1]
 80109e2:	2b2b      	cmp	r3, #43	; 0x2b
 80109e4:	d075      	beq.n	8010ad2 <_strtod_l+0x28a>
 80109e6:	2b2d      	cmp	r3, #45	; 0x2d
 80109e8:	d07b      	beq.n	8010ae2 <_strtod_l+0x29a>
 80109ea:	f04f 0c00 	mov.w	ip, #0
 80109ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80109f2:	2909      	cmp	r1, #9
 80109f4:	f240 8082 	bls.w	8010afc <_strtod_l+0x2b4>
 80109f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80109fc:	2600      	movs	r6, #0
 80109fe:	e09d      	b.n	8010b3c <_strtod_l+0x2f4>
 8010a00:	2300      	movs	r3, #0
 8010a02:	e7c4      	b.n	801098e <_strtod_l+0x146>
 8010a04:	2f08      	cmp	r7, #8
 8010a06:	bfd8      	it	le
 8010a08:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010a0a:	f100 0001 	add.w	r0, r0, #1
 8010a0e:	bfda      	itte	le
 8010a10:	fb02 3301 	mlale	r3, r2, r1, r3
 8010a14:	9309      	strle	r3, [sp, #36]	; 0x24
 8010a16:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010a1a:	3701      	adds	r7, #1
 8010a1c:	901d      	str	r0, [sp, #116]	; 0x74
 8010a1e:	e7bf      	b.n	80109a0 <_strtod_l+0x158>
 8010a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a22:	195a      	adds	r2, r3, r5
 8010a24:	921d      	str	r2, [sp, #116]	; 0x74
 8010a26:	5d5b      	ldrb	r3, [r3, r5]
 8010a28:	2f00      	cmp	r7, #0
 8010a2a:	d037      	beq.n	8010a9c <_strtod_l+0x254>
 8010a2c:	9007      	str	r0, [sp, #28]
 8010a2e:	463d      	mov	r5, r7
 8010a30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010a34:	2a09      	cmp	r2, #9
 8010a36:	d912      	bls.n	8010a5e <_strtod_l+0x216>
 8010a38:	2201      	movs	r2, #1
 8010a3a:	e7c2      	b.n	80109c2 <_strtod_l+0x17a>
 8010a3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a3e:	1c5a      	adds	r2, r3, #1
 8010a40:	921d      	str	r2, [sp, #116]	; 0x74
 8010a42:	785b      	ldrb	r3, [r3, #1]
 8010a44:	3001      	adds	r0, #1
 8010a46:	2b30      	cmp	r3, #48	; 0x30
 8010a48:	d0f8      	beq.n	8010a3c <_strtod_l+0x1f4>
 8010a4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010a4e:	2a08      	cmp	r2, #8
 8010a50:	f200 84db 	bhi.w	801140a <_strtod_l+0xbc2>
 8010a54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010a56:	9007      	str	r0, [sp, #28]
 8010a58:	2000      	movs	r0, #0
 8010a5a:	920a      	str	r2, [sp, #40]	; 0x28
 8010a5c:	4605      	mov	r5, r0
 8010a5e:	3b30      	subs	r3, #48	; 0x30
 8010a60:	f100 0201 	add.w	r2, r0, #1
 8010a64:	d014      	beq.n	8010a90 <_strtod_l+0x248>
 8010a66:	9907      	ldr	r1, [sp, #28]
 8010a68:	4411      	add	r1, r2
 8010a6a:	9107      	str	r1, [sp, #28]
 8010a6c:	462a      	mov	r2, r5
 8010a6e:	eb00 0e05 	add.w	lr, r0, r5
 8010a72:	210a      	movs	r1, #10
 8010a74:	4572      	cmp	r2, lr
 8010a76:	d113      	bne.n	8010aa0 <_strtod_l+0x258>
 8010a78:	182a      	adds	r2, r5, r0
 8010a7a:	2a08      	cmp	r2, #8
 8010a7c:	f105 0501 	add.w	r5, r5, #1
 8010a80:	4405      	add	r5, r0
 8010a82:	dc1c      	bgt.n	8010abe <_strtod_l+0x276>
 8010a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a86:	220a      	movs	r2, #10
 8010a88:	fb02 3301 	mla	r3, r2, r1, r3
 8010a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8010a8e:	2200      	movs	r2, #0
 8010a90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a92:	1c59      	adds	r1, r3, #1
 8010a94:	911d      	str	r1, [sp, #116]	; 0x74
 8010a96:	785b      	ldrb	r3, [r3, #1]
 8010a98:	4610      	mov	r0, r2
 8010a9a:	e7c9      	b.n	8010a30 <_strtod_l+0x1e8>
 8010a9c:	4638      	mov	r0, r7
 8010a9e:	e7d2      	b.n	8010a46 <_strtod_l+0x1fe>
 8010aa0:	2a08      	cmp	r2, #8
 8010aa2:	dc04      	bgt.n	8010aae <_strtod_l+0x266>
 8010aa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010aa6:	434e      	muls	r6, r1
 8010aa8:	9609      	str	r6, [sp, #36]	; 0x24
 8010aaa:	3201      	adds	r2, #1
 8010aac:	e7e2      	b.n	8010a74 <_strtod_l+0x22c>
 8010aae:	f102 0c01 	add.w	ip, r2, #1
 8010ab2:	f1bc 0f10 	cmp.w	ip, #16
 8010ab6:	bfd8      	it	le
 8010ab8:	fb01 f909 	mulle.w	r9, r1, r9
 8010abc:	e7f5      	b.n	8010aaa <_strtod_l+0x262>
 8010abe:	2d10      	cmp	r5, #16
 8010ac0:	bfdc      	itt	le
 8010ac2:	220a      	movle	r2, #10
 8010ac4:	fb02 3909 	mlale	r9, r2, r9, r3
 8010ac8:	e7e1      	b.n	8010a8e <_strtod_l+0x246>
 8010aca:	2300      	movs	r3, #0
 8010acc:	9307      	str	r3, [sp, #28]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	e77c      	b.n	80109cc <_strtod_l+0x184>
 8010ad2:	f04f 0c00 	mov.w	ip, #0
 8010ad6:	f108 0302 	add.w	r3, r8, #2
 8010ada:	931d      	str	r3, [sp, #116]	; 0x74
 8010adc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010ae0:	e785      	b.n	80109ee <_strtod_l+0x1a6>
 8010ae2:	f04f 0c01 	mov.w	ip, #1
 8010ae6:	e7f6      	b.n	8010ad6 <_strtod_l+0x28e>
 8010ae8:	0802814c 	.word	0x0802814c
 8010aec:	08027e5c 	.word	0x08027e5c
 8010af0:	7ff00000 	.word	0x7ff00000
 8010af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010af6:	1c59      	adds	r1, r3, #1
 8010af8:	911d      	str	r1, [sp, #116]	; 0x74
 8010afa:	785b      	ldrb	r3, [r3, #1]
 8010afc:	2b30      	cmp	r3, #48	; 0x30
 8010afe:	d0f9      	beq.n	8010af4 <_strtod_l+0x2ac>
 8010b00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8010b04:	2908      	cmp	r1, #8
 8010b06:	f63f af79 	bhi.w	80109fc <_strtod_l+0x1b4>
 8010b0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010b0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010b10:	9308      	str	r3, [sp, #32]
 8010b12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010b14:	1c59      	adds	r1, r3, #1
 8010b16:	911d      	str	r1, [sp, #116]	; 0x74
 8010b18:	785b      	ldrb	r3, [r3, #1]
 8010b1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8010b1e:	2e09      	cmp	r6, #9
 8010b20:	d937      	bls.n	8010b92 <_strtod_l+0x34a>
 8010b22:	9e08      	ldr	r6, [sp, #32]
 8010b24:	1b89      	subs	r1, r1, r6
 8010b26:	2908      	cmp	r1, #8
 8010b28:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010b2c:	dc02      	bgt.n	8010b34 <_strtod_l+0x2ec>
 8010b2e:	4576      	cmp	r6, lr
 8010b30:	bfa8      	it	ge
 8010b32:	4676      	movge	r6, lr
 8010b34:	f1bc 0f00 	cmp.w	ip, #0
 8010b38:	d000      	beq.n	8010b3c <_strtod_l+0x2f4>
 8010b3a:	4276      	negs	r6, r6
 8010b3c:	2d00      	cmp	r5, #0
 8010b3e:	d14f      	bne.n	8010be0 <_strtod_l+0x398>
 8010b40:	9904      	ldr	r1, [sp, #16]
 8010b42:	4301      	orrs	r1, r0
 8010b44:	f47f aec2 	bne.w	80108cc <_strtod_l+0x84>
 8010b48:	2a00      	cmp	r2, #0
 8010b4a:	f47f aedb 	bne.w	8010904 <_strtod_l+0xbc>
 8010b4e:	2b69      	cmp	r3, #105	; 0x69
 8010b50:	d027      	beq.n	8010ba2 <_strtod_l+0x35a>
 8010b52:	dc24      	bgt.n	8010b9e <_strtod_l+0x356>
 8010b54:	2b49      	cmp	r3, #73	; 0x49
 8010b56:	d024      	beq.n	8010ba2 <_strtod_l+0x35a>
 8010b58:	2b4e      	cmp	r3, #78	; 0x4e
 8010b5a:	f47f aed3 	bne.w	8010904 <_strtod_l+0xbc>
 8010b5e:	499e      	ldr	r1, [pc, #632]	; (8010dd8 <_strtod_l+0x590>)
 8010b60:	a81d      	add	r0, sp, #116	; 0x74
 8010b62:	f001 fee3 	bl	801292c <__match>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	f43f aecc 	beq.w	8010904 <_strtod_l+0xbc>
 8010b6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	2b28      	cmp	r3, #40	; 0x28
 8010b72:	d12d      	bne.n	8010bd0 <_strtod_l+0x388>
 8010b74:	4999      	ldr	r1, [pc, #612]	; (8010ddc <_strtod_l+0x594>)
 8010b76:	aa20      	add	r2, sp, #128	; 0x80
 8010b78:	a81d      	add	r0, sp, #116	; 0x74
 8010b7a:	f001 feeb 	bl	8012954 <__hexnan>
 8010b7e:	2805      	cmp	r0, #5
 8010b80:	d126      	bne.n	8010bd0 <_strtod_l+0x388>
 8010b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010b88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010b8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010b90:	e69c      	b.n	80108cc <_strtod_l+0x84>
 8010b92:	210a      	movs	r1, #10
 8010b94:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010b98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010b9c:	e7b9      	b.n	8010b12 <_strtod_l+0x2ca>
 8010b9e:	2b6e      	cmp	r3, #110	; 0x6e
 8010ba0:	e7db      	b.n	8010b5a <_strtod_l+0x312>
 8010ba2:	498f      	ldr	r1, [pc, #572]	; (8010de0 <_strtod_l+0x598>)
 8010ba4:	a81d      	add	r0, sp, #116	; 0x74
 8010ba6:	f001 fec1 	bl	801292c <__match>
 8010baa:	2800      	cmp	r0, #0
 8010bac:	f43f aeaa 	beq.w	8010904 <_strtod_l+0xbc>
 8010bb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010bb2:	498c      	ldr	r1, [pc, #560]	; (8010de4 <_strtod_l+0x59c>)
 8010bb4:	3b01      	subs	r3, #1
 8010bb6:	a81d      	add	r0, sp, #116	; 0x74
 8010bb8:	931d      	str	r3, [sp, #116]	; 0x74
 8010bba:	f001 feb7 	bl	801292c <__match>
 8010bbe:	b910      	cbnz	r0, 8010bc6 <_strtod_l+0x37e>
 8010bc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	931d      	str	r3, [sp, #116]	; 0x74
 8010bc6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8010df4 <_strtod_l+0x5ac>
 8010bca:	f04f 0a00 	mov.w	sl, #0
 8010bce:	e67d      	b.n	80108cc <_strtod_l+0x84>
 8010bd0:	4885      	ldr	r0, [pc, #532]	; (8010de8 <_strtod_l+0x5a0>)
 8010bd2:	f002 ffb1 	bl	8013b38 <nan>
 8010bd6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010bda:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010bde:	e675      	b.n	80108cc <_strtod_l+0x84>
 8010be0:	9b07      	ldr	r3, [sp, #28]
 8010be2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010be4:	1af3      	subs	r3, r6, r3
 8010be6:	2f00      	cmp	r7, #0
 8010be8:	bf08      	it	eq
 8010bea:	462f      	moveq	r7, r5
 8010bec:	2d10      	cmp	r5, #16
 8010bee:	9308      	str	r3, [sp, #32]
 8010bf0:	46a8      	mov	r8, r5
 8010bf2:	bfa8      	it	ge
 8010bf4:	f04f 0810 	movge.w	r8, #16
 8010bf8:	f7ef fc9c 	bl	8000534 <__aeabi_ui2d>
 8010bfc:	2d09      	cmp	r5, #9
 8010bfe:	4682      	mov	sl, r0
 8010c00:	468b      	mov	fp, r1
 8010c02:	dd13      	ble.n	8010c2c <_strtod_l+0x3e4>
 8010c04:	4b79      	ldr	r3, [pc, #484]	; (8010dec <_strtod_l+0x5a4>)
 8010c06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010c0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010c0e:	f7ef fd0b 	bl	8000628 <__aeabi_dmul>
 8010c12:	4682      	mov	sl, r0
 8010c14:	4648      	mov	r0, r9
 8010c16:	468b      	mov	fp, r1
 8010c18:	f7ef fc8c 	bl	8000534 <__aeabi_ui2d>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	460b      	mov	r3, r1
 8010c20:	4650      	mov	r0, sl
 8010c22:	4659      	mov	r1, fp
 8010c24:	f7ef fb4a 	bl	80002bc <__adddf3>
 8010c28:	4682      	mov	sl, r0
 8010c2a:	468b      	mov	fp, r1
 8010c2c:	2d0f      	cmp	r5, #15
 8010c2e:	dc38      	bgt.n	8010ca2 <_strtod_l+0x45a>
 8010c30:	9b08      	ldr	r3, [sp, #32]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	f43f ae4a 	beq.w	80108cc <_strtod_l+0x84>
 8010c38:	dd24      	ble.n	8010c84 <_strtod_l+0x43c>
 8010c3a:	2b16      	cmp	r3, #22
 8010c3c:	dc0b      	bgt.n	8010c56 <_strtod_l+0x40e>
 8010c3e:	4d6b      	ldr	r5, [pc, #428]	; (8010dec <_strtod_l+0x5a4>)
 8010c40:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010c44:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010c48:	4652      	mov	r2, sl
 8010c4a:	465b      	mov	r3, fp
 8010c4c:	f7ef fcec 	bl	8000628 <__aeabi_dmul>
 8010c50:	4682      	mov	sl, r0
 8010c52:	468b      	mov	fp, r1
 8010c54:	e63a      	b.n	80108cc <_strtod_l+0x84>
 8010c56:	9a08      	ldr	r2, [sp, #32]
 8010c58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	db20      	blt.n	8010ca2 <_strtod_l+0x45a>
 8010c60:	4c62      	ldr	r4, [pc, #392]	; (8010dec <_strtod_l+0x5a4>)
 8010c62:	f1c5 050f 	rsb	r5, r5, #15
 8010c66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010c6a:	4652      	mov	r2, sl
 8010c6c:	465b      	mov	r3, fp
 8010c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c72:	f7ef fcd9 	bl	8000628 <__aeabi_dmul>
 8010c76:	9b08      	ldr	r3, [sp, #32]
 8010c78:	1b5d      	subs	r5, r3, r5
 8010c7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010c7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010c82:	e7e3      	b.n	8010c4c <_strtod_l+0x404>
 8010c84:	9b08      	ldr	r3, [sp, #32]
 8010c86:	3316      	adds	r3, #22
 8010c88:	db0b      	blt.n	8010ca2 <_strtod_l+0x45a>
 8010c8a:	9b07      	ldr	r3, [sp, #28]
 8010c8c:	4a57      	ldr	r2, [pc, #348]	; (8010dec <_strtod_l+0x5a4>)
 8010c8e:	1b9e      	subs	r6, r3, r6
 8010c90:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010c94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010c98:	4650      	mov	r0, sl
 8010c9a:	4659      	mov	r1, fp
 8010c9c:	f7ef fdee 	bl	800087c <__aeabi_ddiv>
 8010ca0:	e7d6      	b.n	8010c50 <_strtod_l+0x408>
 8010ca2:	9b08      	ldr	r3, [sp, #32]
 8010ca4:	eba5 0808 	sub.w	r8, r5, r8
 8010ca8:	4498      	add	r8, r3
 8010caa:	f1b8 0f00 	cmp.w	r8, #0
 8010cae:	dd71      	ble.n	8010d94 <_strtod_l+0x54c>
 8010cb0:	f018 030f 	ands.w	r3, r8, #15
 8010cb4:	d00a      	beq.n	8010ccc <_strtod_l+0x484>
 8010cb6:	494d      	ldr	r1, [pc, #308]	; (8010dec <_strtod_l+0x5a4>)
 8010cb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010cbc:	4652      	mov	r2, sl
 8010cbe:	465b      	mov	r3, fp
 8010cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cc4:	f7ef fcb0 	bl	8000628 <__aeabi_dmul>
 8010cc8:	4682      	mov	sl, r0
 8010cca:	468b      	mov	fp, r1
 8010ccc:	f038 080f 	bics.w	r8, r8, #15
 8010cd0:	d04d      	beq.n	8010d6e <_strtod_l+0x526>
 8010cd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010cd6:	dd22      	ble.n	8010d1e <_strtod_l+0x4d6>
 8010cd8:	2500      	movs	r5, #0
 8010cda:	462e      	mov	r6, r5
 8010cdc:	9509      	str	r5, [sp, #36]	; 0x24
 8010cde:	9507      	str	r5, [sp, #28]
 8010ce0:	2322      	movs	r3, #34	; 0x22
 8010ce2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8010df4 <_strtod_l+0x5ac>
 8010ce6:	6023      	str	r3, [r4, #0]
 8010ce8:	f04f 0a00 	mov.w	sl, #0
 8010cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	f43f adec 	beq.w	80108cc <_strtod_l+0x84>
 8010cf4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f001 ff34 	bl	8012b64 <_Bfree>
 8010cfc:	9907      	ldr	r1, [sp, #28]
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f001 ff30 	bl	8012b64 <_Bfree>
 8010d04:	4631      	mov	r1, r6
 8010d06:	4620      	mov	r0, r4
 8010d08:	f001 ff2c 	bl	8012b64 <_Bfree>
 8010d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d0e:	4620      	mov	r0, r4
 8010d10:	f001 ff28 	bl	8012b64 <_Bfree>
 8010d14:	4629      	mov	r1, r5
 8010d16:	4620      	mov	r0, r4
 8010d18:	f001 ff24 	bl	8012b64 <_Bfree>
 8010d1c:	e5d6      	b.n	80108cc <_strtod_l+0x84>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010d24:	4650      	mov	r0, sl
 8010d26:	4659      	mov	r1, fp
 8010d28:	4699      	mov	r9, r3
 8010d2a:	f1b8 0f01 	cmp.w	r8, #1
 8010d2e:	dc21      	bgt.n	8010d74 <_strtod_l+0x52c>
 8010d30:	b10b      	cbz	r3, 8010d36 <_strtod_l+0x4ee>
 8010d32:	4682      	mov	sl, r0
 8010d34:	468b      	mov	fp, r1
 8010d36:	4b2e      	ldr	r3, [pc, #184]	; (8010df0 <_strtod_l+0x5a8>)
 8010d38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010d3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010d40:	4652      	mov	r2, sl
 8010d42:	465b      	mov	r3, fp
 8010d44:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010d48:	f7ef fc6e 	bl	8000628 <__aeabi_dmul>
 8010d4c:	4b29      	ldr	r3, [pc, #164]	; (8010df4 <_strtod_l+0x5ac>)
 8010d4e:	460a      	mov	r2, r1
 8010d50:	400b      	ands	r3, r1
 8010d52:	4929      	ldr	r1, [pc, #164]	; (8010df8 <_strtod_l+0x5b0>)
 8010d54:	428b      	cmp	r3, r1
 8010d56:	4682      	mov	sl, r0
 8010d58:	d8be      	bhi.n	8010cd8 <_strtod_l+0x490>
 8010d5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010d5e:	428b      	cmp	r3, r1
 8010d60:	bf86      	itte	hi
 8010d62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010dfc <_strtod_l+0x5b4>
 8010d66:	f04f 3aff 	movhi.w	sl, #4294967295
 8010d6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010d6e:	2300      	movs	r3, #0
 8010d70:	9304      	str	r3, [sp, #16]
 8010d72:	e081      	b.n	8010e78 <_strtod_l+0x630>
 8010d74:	f018 0f01 	tst.w	r8, #1
 8010d78:	d007      	beq.n	8010d8a <_strtod_l+0x542>
 8010d7a:	4b1d      	ldr	r3, [pc, #116]	; (8010df0 <_strtod_l+0x5a8>)
 8010d7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d84:	f7ef fc50 	bl	8000628 <__aeabi_dmul>
 8010d88:	2301      	movs	r3, #1
 8010d8a:	f109 0901 	add.w	r9, r9, #1
 8010d8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010d92:	e7ca      	b.n	8010d2a <_strtod_l+0x4e2>
 8010d94:	d0eb      	beq.n	8010d6e <_strtod_l+0x526>
 8010d96:	f1c8 0800 	rsb	r8, r8, #0
 8010d9a:	f018 020f 	ands.w	r2, r8, #15
 8010d9e:	d00a      	beq.n	8010db6 <_strtod_l+0x56e>
 8010da0:	4b12      	ldr	r3, [pc, #72]	; (8010dec <_strtod_l+0x5a4>)
 8010da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010da6:	4650      	mov	r0, sl
 8010da8:	4659      	mov	r1, fp
 8010daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dae:	f7ef fd65 	bl	800087c <__aeabi_ddiv>
 8010db2:	4682      	mov	sl, r0
 8010db4:	468b      	mov	fp, r1
 8010db6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010dba:	d0d8      	beq.n	8010d6e <_strtod_l+0x526>
 8010dbc:	f1b8 0f1f 	cmp.w	r8, #31
 8010dc0:	dd1e      	ble.n	8010e00 <_strtod_l+0x5b8>
 8010dc2:	2500      	movs	r5, #0
 8010dc4:	462e      	mov	r6, r5
 8010dc6:	9509      	str	r5, [sp, #36]	; 0x24
 8010dc8:	9507      	str	r5, [sp, #28]
 8010dca:	2322      	movs	r3, #34	; 0x22
 8010dcc:	f04f 0a00 	mov.w	sl, #0
 8010dd0:	f04f 0b00 	mov.w	fp, #0
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	e789      	b.n	8010cec <_strtod_l+0x4a4>
 8010dd8:	08027e2d 	.word	0x08027e2d
 8010ddc:	08027e70 	.word	0x08027e70
 8010de0:	08027e25 	.word	0x08027e25
 8010de4:	08028068 	.word	0x08028068
 8010de8:	08027f63 	.word	0x08027f63
 8010dec:	080281e8 	.word	0x080281e8
 8010df0:	080281c0 	.word	0x080281c0
 8010df4:	7ff00000 	.word	0x7ff00000
 8010df8:	7ca00000 	.word	0x7ca00000
 8010dfc:	7fefffff 	.word	0x7fefffff
 8010e00:	f018 0310 	ands.w	r3, r8, #16
 8010e04:	bf18      	it	ne
 8010e06:	236a      	movne	r3, #106	; 0x6a
 8010e08:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80111c0 <_strtod_l+0x978>
 8010e0c:	9304      	str	r3, [sp, #16]
 8010e0e:	4650      	mov	r0, sl
 8010e10:	4659      	mov	r1, fp
 8010e12:	2300      	movs	r3, #0
 8010e14:	f018 0f01 	tst.w	r8, #1
 8010e18:	d004      	beq.n	8010e24 <_strtod_l+0x5dc>
 8010e1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010e1e:	f7ef fc03 	bl	8000628 <__aeabi_dmul>
 8010e22:	2301      	movs	r3, #1
 8010e24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010e28:	f109 0908 	add.w	r9, r9, #8
 8010e2c:	d1f2      	bne.n	8010e14 <_strtod_l+0x5cc>
 8010e2e:	b10b      	cbz	r3, 8010e34 <_strtod_l+0x5ec>
 8010e30:	4682      	mov	sl, r0
 8010e32:	468b      	mov	fp, r1
 8010e34:	9b04      	ldr	r3, [sp, #16]
 8010e36:	b1bb      	cbz	r3, 8010e68 <_strtod_l+0x620>
 8010e38:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010e3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	4659      	mov	r1, fp
 8010e44:	dd10      	ble.n	8010e68 <_strtod_l+0x620>
 8010e46:	2b1f      	cmp	r3, #31
 8010e48:	f340 8128 	ble.w	801109c <_strtod_l+0x854>
 8010e4c:	2b34      	cmp	r3, #52	; 0x34
 8010e4e:	bfde      	ittt	le
 8010e50:	3b20      	suble	r3, #32
 8010e52:	f04f 32ff 	movle.w	r2, #4294967295
 8010e56:	fa02 f303 	lslle.w	r3, r2, r3
 8010e5a:	f04f 0a00 	mov.w	sl, #0
 8010e5e:	bfcc      	ite	gt
 8010e60:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010e64:	ea03 0b01 	andle.w	fp, r3, r1
 8010e68:	2200      	movs	r2, #0
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	4650      	mov	r0, sl
 8010e6e:	4659      	mov	r1, fp
 8010e70:	f7ef fe42 	bl	8000af8 <__aeabi_dcmpeq>
 8010e74:	2800      	cmp	r0, #0
 8010e76:	d1a4      	bne.n	8010dc2 <_strtod_l+0x57a>
 8010e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e7a:	9300      	str	r3, [sp, #0]
 8010e7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e7e:	462b      	mov	r3, r5
 8010e80:	463a      	mov	r2, r7
 8010e82:	4620      	mov	r0, r4
 8010e84:	f001 feda 	bl	8012c3c <__s2b>
 8010e88:	9009      	str	r0, [sp, #36]	; 0x24
 8010e8a:	2800      	cmp	r0, #0
 8010e8c:	f43f af24 	beq.w	8010cd8 <_strtod_l+0x490>
 8010e90:	9b07      	ldr	r3, [sp, #28]
 8010e92:	1b9e      	subs	r6, r3, r6
 8010e94:	9b08      	ldr	r3, [sp, #32]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	bfb4      	ite	lt
 8010e9a:	4633      	movlt	r3, r6
 8010e9c:	2300      	movge	r3, #0
 8010e9e:	9310      	str	r3, [sp, #64]	; 0x40
 8010ea0:	9b08      	ldr	r3, [sp, #32]
 8010ea2:	2500      	movs	r5, #0
 8010ea4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010ea8:	9318      	str	r3, [sp, #96]	; 0x60
 8010eaa:	462e      	mov	r6, r5
 8010eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eae:	4620      	mov	r0, r4
 8010eb0:	6859      	ldr	r1, [r3, #4]
 8010eb2:	f001 fe17 	bl	8012ae4 <_Balloc>
 8010eb6:	9007      	str	r0, [sp, #28]
 8010eb8:	2800      	cmp	r0, #0
 8010eba:	f43f af11 	beq.w	8010ce0 <_strtod_l+0x498>
 8010ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ec0:	691a      	ldr	r2, [r3, #16]
 8010ec2:	3202      	adds	r2, #2
 8010ec4:	f103 010c 	add.w	r1, r3, #12
 8010ec8:	0092      	lsls	r2, r2, #2
 8010eca:	300c      	adds	r0, #12
 8010ecc:	f001 fdfc 	bl	8012ac8 <memcpy>
 8010ed0:	ec4b ab10 	vmov	d0, sl, fp
 8010ed4:	aa20      	add	r2, sp, #128	; 0x80
 8010ed6:	a91f      	add	r1, sp, #124	; 0x7c
 8010ed8:	4620      	mov	r0, r4
 8010eda:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010ede:	f002 f9e9 	bl	80132b4 <__d2b>
 8010ee2:	901e      	str	r0, [sp, #120]	; 0x78
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	f43f aefb 	beq.w	8010ce0 <_strtod_l+0x498>
 8010eea:	2101      	movs	r1, #1
 8010eec:	4620      	mov	r0, r4
 8010eee:	f001 ff3f 	bl	8012d70 <__i2b>
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	f43f aef3 	beq.w	8010ce0 <_strtod_l+0x498>
 8010efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010efc:	9904      	ldr	r1, [sp, #16]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	bfab      	itete	ge
 8010f02:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010f04:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010f06:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010f08:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010f0c:	bfac      	ite	ge
 8010f0e:	eb03 0902 	addge.w	r9, r3, r2
 8010f12:	1ad7      	sublt	r7, r2, r3
 8010f14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010f16:	eba3 0801 	sub.w	r8, r3, r1
 8010f1a:	4490      	add	r8, r2
 8010f1c:	4ba3      	ldr	r3, [pc, #652]	; (80111ac <_strtod_l+0x964>)
 8010f1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010f22:	4598      	cmp	r8, r3
 8010f24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010f28:	f280 80cc 	bge.w	80110c4 <_strtod_l+0x87c>
 8010f2c:	eba3 0308 	sub.w	r3, r3, r8
 8010f30:	2b1f      	cmp	r3, #31
 8010f32:	eba2 0203 	sub.w	r2, r2, r3
 8010f36:	f04f 0101 	mov.w	r1, #1
 8010f3a:	f300 80b6 	bgt.w	80110aa <_strtod_l+0x862>
 8010f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8010f42:	9311      	str	r3, [sp, #68]	; 0x44
 8010f44:	2300      	movs	r3, #0
 8010f46:	930c      	str	r3, [sp, #48]	; 0x30
 8010f48:	eb09 0802 	add.w	r8, r9, r2
 8010f4c:	9b04      	ldr	r3, [sp, #16]
 8010f4e:	45c1      	cmp	r9, r8
 8010f50:	4417      	add	r7, r2
 8010f52:	441f      	add	r7, r3
 8010f54:	464b      	mov	r3, r9
 8010f56:	bfa8      	it	ge
 8010f58:	4643      	movge	r3, r8
 8010f5a:	42bb      	cmp	r3, r7
 8010f5c:	bfa8      	it	ge
 8010f5e:	463b      	movge	r3, r7
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	bfc2      	ittt	gt
 8010f64:	eba8 0803 	subgt.w	r8, r8, r3
 8010f68:	1aff      	subgt	r7, r7, r3
 8010f6a:	eba9 0903 	subgt.w	r9, r9, r3
 8010f6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	dd17      	ble.n	8010fa4 <_strtod_l+0x75c>
 8010f74:	4631      	mov	r1, r6
 8010f76:	461a      	mov	r2, r3
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f001 ffb5 	bl	8012ee8 <__pow5mult>
 8010f7e:	4606      	mov	r6, r0
 8010f80:	2800      	cmp	r0, #0
 8010f82:	f43f aead 	beq.w	8010ce0 <_strtod_l+0x498>
 8010f86:	4601      	mov	r1, r0
 8010f88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	f001 ff06 	bl	8012d9c <__multiply>
 8010f90:	900f      	str	r0, [sp, #60]	; 0x3c
 8010f92:	2800      	cmp	r0, #0
 8010f94:	f43f aea4 	beq.w	8010ce0 <_strtod_l+0x498>
 8010f98:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f001 fde2 	bl	8012b64 <_Bfree>
 8010fa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fa2:	931e      	str	r3, [sp, #120]	; 0x78
 8010fa4:	f1b8 0f00 	cmp.w	r8, #0
 8010fa8:	f300 8091 	bgt.w	80110ce <_strtod_l+0x886>
 8010fac:	9b08      	ldr	r3, [sp, #32]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	dd08      	ble.n	8010fc4 <_strtod_l+0x77c>
 8010fb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010fb4:	9907      	ldr	r1, [sp, #28]
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f001 ff96 	bl	8012ee8 <__pow5mult>
 8010fbc:	9007      	str	r0, [sp, #28]
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	f43f ae8e 	beq.w	8010ce0 <_strtod_l+0x498>
 8010fc4:	2f00      	cmp	r7, #0
 8010fc6:	dd08      	ble.n	8010fda <_strtod_l+0x792>
 8010fc8:	9907      	ldr	r1, [sp, #28]
 8010fca:	463a      	mov	r2, r7
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f001 ffe5 	bl	8012f9c <__lshift>
 8010fd2:	9007      	str	r0, [sp, #28]
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	f43f ae83 	beq.w	8010ce0 <_strtod_l+0x498>
 8010fda:	f1b9 0f00 	cmp.w	r9, #0
 8010fde:	dd08      	ble.n	8010ff2 <_strtod_l+0x7aa>
 8010fe0:	4631      	mov	r1, r6
 8010fe2:	464a      	mov	r2, r9
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	f001 ffd9 	bl	8012f9c <__lshift>
 8010fea:	4606      	mov	r6, r0
 8010fec:	2800      	cmp	r0, #0
 8010fee:	f43f ae77 	beq.w	8010ce0 <_strtod_l+0x498>
 8010ff2:	9a07      	ldr	r2, [sp, #28]
 8010ff4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	f002 f858 	bl	80130ac <__mdiff>
 8010ffc:	4605      	mov	r5, r0
 8010ffe:	2800      	cmp	r0, #0
 8011000:	f43f ae6e 	beq.w	8010ce0 <_strtod_l+0x498>
 8011004:	68c3      	ldr	r3, [r0, #12]
 8011006:	930f      	str	r3, [sp, #60]	; 0x3c
 8011008:	2300      	movs	r3, #0
 801100a:	60c3      	str	r3, [r0, #12]
 801100c:	4631      	mov	r1, r6
 801100e:	f002 f831 	bl	8013074 <__mcmp>
 8011012:	2800      	cmp	r0, #0
 8011014:	da65      	bge.n	80110e2 <_strtod_l+0x89a>
 8011016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011018:	ea53 030a 	orrs.w	r3, r3, sl
 801101c:	f040 8087 	bne.w	801112e <_strtod_l+0x8e6>
 8011020:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011024:	2b00      	cmp	r3, #0
 8011026:	f040 8082 	bne.w	801112e <_strtod_l+0x8e6>
 801102a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801102e:	0d1b      	lsrs	r3, r3, #20
 8011030:	051b      	lsls	r3, r3, #20
 8011032:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011036:	d97a      	bls.n	801112e <_strtod_l+0x8e6>
 8011038:	696b      	ldr	r3, [r5, #20]
 801103a:	b913      	cbnz	r3, 8011042 <_strtod_l+0x7fa>
 801103c:	692b      	ldr	r3, [r5, #16]
 801103e:	2b01      	cmp	r3, #1
 8011040:	dd75      	ble.n	801112e <_strtod_l+0x8e6>
 8011042:	4629      	mov	r1, r5
 8011044:	2201      	movs	r2, #1
 8011046:	4620      	mov	r0, r4
 8011048:	f001 ffa8 	bl	8012f9c <__lshift>
 801104c:	4631      	mov	r1, r6
 801104e:	4605      	mov	r5, r0
 8011050:	f002 f810 	bl	8013074 <__mcmp>
 8011054:	2800      	cmp	r0, #0
 8011056:	dd6a      	ble.n	801112e <_strtod_l+0x8e6>
 8011058:	9904      	ldr	r1, [sp, #16]
 801105a:	4a55      	ldr	r2, [pc, #340]	; (80111b0 <_strtod_l+0x968>)
 801105c:	465b      	mov	r3, fp
 801105e:	2900      	cmp	r1, #0
 8011060:	f000 8085 	beq.w	801116e <_strtod_l+0x926>
 8011064:	ea02 010b 	and.w	r1, r2, fp
 8011068:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801106c:	dc7f      	bgt.n	801116e <_strtod_l+0x926>
 801106e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011072:	f77f aeaa 	ble.w	8010dca <_strtod_l+0x582>
 8011076:	4a4f      	ldr	r2, [pc, #316]	; (80111b4 <_strtod_l+0x96c>)
 8011078:	2300      	movs	r3, #0
 801107a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801107e:	4650      	mov	r0, sl
 8011080:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011084:	4659      	mov	r1, fp
 8011086:	f7ef facf 	bl	8000628 <__aeabi_dmul>
 801108a:	460b      	mov	r3, r1
 801108c:	4303      	orrs	r3, r0
 801108e:	bf08      	it	eq
 8011090:	2322      	moveq	r3, #34	; 0x22
 8011092:	4682      	mov	sl, r0
 8011094:	468b      	mov	fp, r1
 8011096:	bf08      	it	eq
 8011098:	6023      	streq	r3, [r4, #0]
 801109a:	e62b      	b.n	8010cf4 <_strtod_l+0x4ac>
 801109c:	f04f 32ff 	mov.w	r2, #4294967295
 80110a0:	fa02 f303 	lsl.w	r3, r2, r3
 80110a4:	ea03 0a0a 	and.w	sl, r3, sl
 80110a8:	e6de      	b.n	8010e68 <_strtod_l+0x620>
 80110aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80110ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80110b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80110b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80110ba:	fa01 f308 	lsl.w	r3, r1, r8
 80110be:	930c      	str	r3, [sp, #48]	; 0x30
 80110c0:	9111      	str	r1, [sp, #68]	; 0x44
 80110c2:	e741      	b.n	8010f48 <_strtod_l+0x700>
 80110c4:	2300      	movs	r3, #0
 80110c6:	930c      	str	r3, [sp, #48]	; 0x30
 80110c8:	2301      	movs	r3, #1
 80110ca:	9311      	str	r3, [sp, #68]	; 0x44
 80110cc:	e73c      	b.n	8010f48 <_strtod_l+0x700>
 80110ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80110d0:	4642      	mov	r2, r8
 80110d2:	4620      	mov	r0, r4
 80110d4:	f001 ff62 	bl	8012f9c <__lshift>
 80110d8:	901e      	str	r0, [sp, #120]	; 0x78
 80110da:	2800      	cmp	r0, #0
 80110dc:	f47f af66 	bne.w	8010fac <_strtod_l+0x764>
 80110e0:	e5fe      	b.n	8010ce0 <_strtod_l+0x498>
 80110e2:	465f      	mov	r7, fp
 80110e4:	d16e      	bne.n	80111c4 <_strtod_l+0x97c>
 80110e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80110e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80110ec:	b342      	cbz	r2, 8011140 <_strtod_l+0x8f8>
 80110ee:	4a32      	ldr	r2, [pc, #200]	; (80111b8 <_strtod_l+0x970>)
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d128      	bne.n	8011146 <_strtod_l+0x8fe>
 80110f4:	9b04      	ldr	r3, [sp, #16]
 80110f6:	4650      	mov	r0, sl
 80110f8:	b1eb      	cbz	r3, 8011136 <_strtod_l+0x8ee>
 80110fa:	4a2d      	ldr	r2, [pc, #180]	; (80111b0 <_strtod_l+0x968>)
 80110fc:	403a      	ands	r2, r7
 80110fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011102:	f04f 31ff 	mov.w	r1, #4294967295
 8011106:	d819      	bhi.n	801113c <_strtod_l+0x8f4>
 8011108:	0d12      	lsrs	r2, r2, #20
 801110a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801110e:	fa01 f303 	lsl.w	r3, r1, r3
 8011112:	4298      	cmp	r0, r3
 8011114:	d117      	bne.n	8011146 <_strtod_l+0x8fe>
 8011116:	4b29      	ldr	r3, [pc, #164]	; (80111bc <_strtod_l+0x974>)
 8011118:	429f      	cmp	r7, r3
 801111a:	d102      	bne.n	8011122 <_strtod_l+0x8da>
 801111c:	3001      	adds	r0, #1
 801111e:	f43f addf 	beq.w	8010ce0 <_strtod_l+0x498>
 8011122:	4b23      	ldr	r3, [pc, #140]	; (80111b0 <_strtod_l+0x968>)
 8011124:	403b      	ands	r3, r7
 8011126:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801112a:	f04f 0a00 	mov.w	sl, #0
 801112e:	9b04      	ldr	r3, [sp, #16]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d1a0      	bne.n	8011076 <_strtod_l+0x82e>
 8011134:	e5de      	b.n	8010cf4 <_strtod_l+0x4ac>
 8011136:	f04f 33ff 	mov.w	r3, #4294967295
 801113a:	e7ea      	b.n	8011112 <_strtod_l+0x8ca>
 801113c:	460b      	mov	r3, r1
 801113e:	e7e8      	b.n	8011112 <_strtod_l+0x8ca>
 8011140:	ea53 030a 	orrs.w	r3, r3, sl
 8011144:	d088      	beq.n	8011058 <_strtod_l+0x810>
 8011146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011148:	b1db      	cbz	r3, 8011182 <_strtod_l+0x93a>
 801114a:	423b      	tst	r3, r7
 801114c:	d0ef      	beq.n	801112e <_strtod_l+0x8e6>
 801114e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011150:	9a04      	ldr	r2, [sp, #16]
 8011152:	4650      	mov	r0, sl
 8011154:	4659      	mov	r1, fp
 8011156:	b1c3      	cbz	r3, 801118a <_strtod_l+0x942>
 8011158:	f7ff fb58 	bl	801080c <sulp>
 801115c:	4602      	mov	r2, r0
 801115e:	460b      	mov	r3, r1
 8011160:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011164:	f7ef f8aa 	bl	80002bc <__adddf3>
 8011168:	4682      	mov	sl, r0
 801116a:	468b      	mov	fp, r1
 801116c:	e7df      	b.n	801112e <_strtod_l+0x8e6>
 801116e:	4013      	ands	r3, r2
 8011170:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011174:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011178:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801117c:	f04f 3aff 	mov.w	sl, #4294967295
 8011180:	e7d5      	b.n	801112e <_strtod_l+0x8e6>
 8011182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011184:	ea13 0f0a 	tst.w	r3, sl
 8011188:	e7e0      	b.n	801114c <_strtod_l+0x904>
 801118a:	f7ff fb3f 	bl	801080c <sulp>
 801118e:	4602      	mov	r2, r0
 8011190:	460b      	mov	r3, r1
 8011192:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011196:	f7ef f88f 	bl	80002b8 <__aeabi_dsub>
 801119a:	2200      	movs	r2, #0
 801119c:	2300      	movs	r3, #0
 801119e:	4682      	mov	sl, r0
 80111a0:	468b      	mov	fp, r1
 80111a2:	f7ef fca9 	bl	8000af8 <__aeabi_dcmpeq>
 80111a6:	2800      	cmp	r0, #0
 80111a8:	d0c1      	beq.n	801112e <_strtod_l+0x8e6>
 80111aa:	e60e      	b.n	8010dca <_strtod_l+0x582>
 80111ac:	fffffc02 	.word	0xfffffc02
 80111b0:	7ff00000 	.word	0x7ff00000
 80111b4:	39500000 	.word	0x39500000
 80111b8:	000fffff 	.word	0x000fffff
 80111bc:	7fefffff 	.word	0x7fefffff
 80111c0:	08027e88 	.word	0x08027e88
 80111c4:	4631      	mov	r1, r6
 80111c6:	4628      	mov	r0, r5
 80111c8:	f002 f8d0 	bl	801336c <__ratio>
 80111cc:	ec59 8b10 	vmov	r8, r9, d0
 80111d0:	ee10 0a10 	vmov	r0, s0
 80111d4:	2200      	movs	r2, #0
 80111d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80111da:	4649      	mov	r1, r9
 80111dc:	f7ef fca0 	bl	8000b20 <__aeabi_dcmple>
 80111e0:	2800      	cmp	r0, #0
 80111e2:	d07c      	beq.n	80112de <_strtod_l+0xa96>
 80111e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d04c      	beq.n	8011284 <_strtod_l+0xa3c>
 80111ea:	4b95      	ldr	r3, [pc, #596]	; (8011440 <_strtod_l+0xbf8>)
 80111ec:	2200      	movs	r2, #0
 80111ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80111f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011440 <_strtod_l+0xbf8>
 80111f6:	f04f 0800 	mov.w	r8, #0
 80111fa:	4b92      	ldr	r3, [pc, #584]	; (8011444 <_strtod_l+0xbfc>)
 80111fc:	403b      	ands	r3, r7
 80111fe:	9311      	str	r3, [sp, #68]	; 0x44
 8011200:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011202:	4b91      	ldr	r3, [pc, #580]	; (8011448 <_strtod_l+0xc00>)
 8011204:	429a      	cmp	r2, r3
 8011206:	f040 80b2 	bne.w	801136e <_strtod_l+0xb26>
 801120a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801120e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011212:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011216:	ec4b ab10 	vmov	d0, sl, fp
 801121a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801121e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011222:	f001 ffcb 	bl	80131bc <__ulp>
 8011226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801122a:	ec53 2b10 	vmov	r2, r3, d0
 801122e:	f7ef f9fb 	bl	8000628 <__aeabi_dmul>
 8011232:	4652      	mov	r2, sl
 8011234:	465b      	mov	r3, fp
 8011236:	f7ef f841 	bl	80002bc <__adddf3>
 801123a:	460b      	mov	r3, r1
 801123c:	4981      	ldr	r1, [pc, #516]	; (8011444 <_strtod_l+0xbfc>)
 801123e:	4a83      	ldr	r2, [pc, #524]	; (801144c <_strtod_l+0xc04>)
 8011240:	4019      	ands	r1, r3
 8011242:	4291      	cmp	r1, r2
 8011244:	4682      	mov	sl, r0
 8011246:	d95e      	bls.n	8011306 <_strtod_l+0xabe>
 8011248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801124a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801124e:	4293      	cmp	r3, r2
 8011250:	d103      	bne.n	801125a <_strtod_l+0xa12>
 8011252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011254:	3301      	adds	r3, #1
 8011256:	f43f ad43 	beq.w	8010ce0 <_strtod_l+0x498>
 801125a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011458 <_strtod_l+0xc10>
 801125e:	f04f 3aff 	mov.w	sl, #4294967295
 8011262:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011264:	4620      	mov	r0, r4
 8011266:	f001 fc7d 	bl	8012b64 <_Bfree>
 801126a:	9907      	ldr	r1, [sp, #28]
 801126c:	4620      	mov	r0, r4
 801126e:	f001 fc79 	bl	8012b64 <_Bfree>
 8011272:	4631      	mov	r1, r6
 8011274:	4620      	mov	r0, r4
 8011276:	f001 fc75 	bl	8012b64 <_Bfree>
 801127a:	4629      	mov	r1, r5
 801127c:	4620      	mov	r0, r4
 801127e:	f001 fc71 	bl	8012b64 <_Bfree>
 8011282:	e613      	b.n	8010eac <_strtod_l+0x664>
 8011284:	f1ba 0f00 	cmp.w	sl, #0
 8011288:	d11b      	bne.n	80112c2 <_strtod_l+0xa7a>
 801128a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801128e:	b9f3      	cbnz	r3, 80112ce <_strtod_l+0xa86>
 8011290:	4b6b      	ldr	r3, [pc, #428]	; (8011440 <_strtod_l+0xbf8>)
 8011292:	2200      	movs	r2, #0
 8011294:	4640      	mov	r0, r8
 8011296:	4649      	mov	r1, r9
 8011298:	f7ef fc38 	bl	8000b0c <__aeabi_dcmplt>
 801129c:	b9d0      	cbnz	r0, 80112d4 <_strtod_l+0xa8c>
 801129e:	4640      	mov	r0, r8
 80112a0:	4649      	mov	r1, r9
 80112a2:	4b6b      	ldr	r3, [pc, #428]	; (8011450 <_strtod_l+0xc08>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	f7ef f9bf 	bl	8000628 <__aeabi_dmul>
 80112aa:	4680      	mov	r8, r0
 80112ac:	4689      	mov	r9, r1
 80112ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80112b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80112b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80112b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80112bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80112c0:	e79b      	b.n	80111fa <_strtod_l+0x9b2>
 80112c2:	f1ba 0f01 	cmp.w	sl, #1
 80112c6:	d102      	bne.n	80112ce <_strtod_l+0xa86>
 80112c8:	2f00      	cmp	r7, #0
 80112ca:	f43f ad7e 	beq.w	8010dca <_strtod_l+0x582>
 80112ce:	4b61      	ldr	r3, [pc, #388]	; (8011454 <_strtod_l+0xc0c>)
 80112d0:	2200      	movs	r2, #0
 80112d2:	e78c      	b.n	80111ee <_strtod_l+0x9a6>
 80112d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011450 <_strtod_l+0xc08>
 80112d8:	f04f 0800 	mov.w	r8, #0
 80112dc:	e7e7      	b.n	80112ae <_strtod_l+0xa66>
 80112de:	4b5c      	ldr	r3, [pc, #368]	; (8011450 <_strtod_l+0xc08>)
 80112e0:	4640      	mov	r0, r8
 80112e2:	4649      	mov	r1, r9
 80112e4:	2200      	movs	r2, #0
 80112e6:	f7ef f99f 	bl	8000628 <__aeabi_dmul>
 80112ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112ec:	4680      	mov	r8, r0
 80112ee:	4689      	mov	r9, r1
 80112f0:	b933      	cbnz	r3, 8011300 <_strtod_l+0xab8>
 80112f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112f6:	9012      	str	r0, [sp, #72]	; 0x48
 80112f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80112fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80112fe:	e7dd      	b.n	80112bc <_strtod_l+0xa74>
 8011300:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011304:	e7f9      	b.n	80112fa <_strtod_l+0xab2>
 8011306:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801130a:	9b04      	ldr	r3, [sp, #16]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d1a8      	bne.n	8011262 <_strtod_l+0xa1a>
 8011310:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011314:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011316:	0d1b      	lsrs	r3, r3, #20
 8011318:	051b      	lsls	r3, r3, #20
 801131a:	429a      	cmp	r2, r3
 801131c:	d1a1      	bne.n	8011262 <_strtod_l+0xa1a>
 801131e:	4640      	mov	r0, r8
 8011320:	4649      	mov	r1, r9
 8011322:	f7ef fce1 	bl	8000ce8 <__aeabi_d2lz>
 8011326:	f7ef f951 	bl	80005cc <__aeabi_l2d>
 801132a:	4602      	mov	r2, r0
 801132c:	460b      	mov	r3, r1
 801132e:	4640      	mov	r0, r8
 8011330:	4649      	mov	r1, r9
 8011332:	f7ee ffc1 	bl	80002b8 <__aeabi_dsub>
 8011336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801133c:	ea43 030a 	orr.w	r3, r3, sl
 8011340:	4313      	orrs	r3, r2
 8011342:	4680      	mov	r8, r0
 8011344:	4689      	mov	r9, r1
 8011346:	d053      	beq.n	80113f0 <_strtod_l+0xba8>
 8011348:	a335      	add	r3, pc, #212	; (adr r3, 8011420 <_strtod_l+0xbd8>)
 801134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801134e:	f7ef fbdd 	bl	8000b0c <__aeabi_dcmplt>
 8011352:	2800      	cmp	r0, #0
 8011354:	f47f acce 	bne.w	8010cf4 <_strtod_l+0x4ac>
 8011358:	a333      	add	r3, pc, #204	; (adr r3, 8011428 <_strtod_l+0xbe0>)
 801135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801135e:	4640      	mov	r0, r8
 8011360:	4649      	mov	r1, r9
 8011362:	f7ef fbf1 	bl	8000b48 <__aeabi_dcmpgt>
 8011366:	2800      	cmp	r0, #0
 8011368:	f43f af7b 	beq.w	8011262 <_strtod_l+0xa1a>
 801136c:	e4c2      	b.n	8010cf4 <_strtod_l+0x4ac>
 801136e:	9b04      	ldr	r3, [sp, #16]
 8011370:	b333      	cbz	r3, 80113c0 <_strtod_l+0xb78>
 8011372:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011374:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011378:	d822      	bhi.n	80113c0 <_strtod_l+0xb78>
 801137a:	a32d      	add	r3, pc, #180	; (adr r3, 8011430 <_strtod_l+0xbe8>)
 801137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011380:	4640      	mov	r0, r8
 8011382:	4649      	mov	r1, r9
 8011384:	f7ef fbcc 	bl	8000b20 <__aeabi_dcmple>
 8011388:	b1a0      	cbz	r0, 80113b4 <_strtod_l+0xb6c>
 801138a:	4649      	mov	r1, r9
 801138c:	4640      	mov	r0, r8
 801138e:	f7ef fc23 	bl	8000bd8 <__aeabi_d2uiz>
 8011392:	2801      	cmp	r0, #1
 8011394:	bf38      	it	cc
 8011396:	2001      	movcc	r0, #1
 8011398:	f7ef f8cc 	bl	8000534 <__aeabi_ui2d>
 801139c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801139e:	4680      	mov	r8, r0
 80113a0:	4689      	mov	r9, r1
 80113a2:	bb13      	cbnz	r3, 80113ea <_strtod_l+0xba2>
 80113a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113a8:	9014      	str	r0, [sp, #80]	; 0x50
 80113aa:	9315      	str	r3, [sp, #84]	; 0x54
 80113ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80113b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80113b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80113b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80113bc:	1a9b      	subs	r3, r3, r2
 80113be:	930d      	str	r3, [sp, #52]	; 0x34
 80113c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80113c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80113c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80113cc:	f001 fef6 	bl	80131bc <__ulp>
 80113d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80113d4:	ec53 2b10 	vmov	r2, r3, d0
 80113d8:	f7ef f926 	bl	8000628 <__aeabi_dmul>
 80113dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80113e0:	f7ee ff6c 	bl	80002bc <__adddf3>
 80113e4:	4682      	mov	sl, r0
 80113e6:	468b      	mov	fp, r1
 80113e8:	e78f      	b.n	801130a <_strtod_l+0xac2>
 80113ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80113ee:	e7dd      	b.n	80113ac <_strtod_l+0xb64>
 80113f0:	a311      	add	r3, pc, #68	; (adr r3, 8011438 <_strtod_l+0xbf0>)
 80113f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f6:	f7ef fb89 	bl	8000b0c <__aeabi_dcmplt>
 80113fa:	e7b4      	b.n	8011366 <_strtod_l+0xb1e>
 80113fc:	2300      	movs	r3, #0
 80113fe:	930e      	str	r3, [sp, #56]	; 0x38
 8011400:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011402:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011404:	6013      	str	r3, [r2, #0]
 8011406:	f7ff ba65 	b.w	80108d4 <_strtod_l+0x8c>
 801140a:	2b65      	cmp	r3, #101	; 0x65
 801140c:	f43f ab5d 	beq.w	8010aca <_strtod_l+0x282>
 8011410:	2b45      	cmp	r3, #69	; 0x45
 8011412:	f43f ab5a 	beq.w	8010aca <_strtod_l+0x282>
 8011416:	2201      	movs	r2, #1
 8011418:	f7ff bb92 	b.w	8010b40 <_strtod_l+0x2f8>
 801141c:	f3af 8000 	nop.w
 8011420:	94a03595 	.word	0x94a03595
 8011424:	3fdfffff 	.word	0x3fdfffff
 8011428:	35afe535 	.word	0x35afe535
 801142c:	3fe00000 	.word	0x3fe00000
 8011430:	ffc00000 	.word	0xffc00000
 8011434:	41dfffff 	.word	0x41dfffff
 8011438:	94a03595 	.word	0x94a03595
 801143c:	3fcfffff 	.word	0x3fcfffff
 8011440:	3ff00000 	.word	0x3ff00000
 8011444:	7ff00000 	.word	0x7ff00000
 8011448:	7fe00000 	.word	0x7fe00000
 801144c:	7c9fffff 	.word	0x7c9fffff
 8011450:	3fe00000 	.word	0x3fe00000
 8011454:	bff00000 	.word	0xbff00000
 8011458:	7fefffff 	.word	0x7fefffff

0801145c <_strtod_r>:
 801145c:	4b01      	ldr	r3, [pc, #4]	; (8011464 <_strtod_r+0x8>)
 801145e:	f7ff b9f3 	b.w	8010848 <_strtod_l>
 8011462:	bf00      	nop
 8011464:	200000a8 	.word	0x200000a8

08011468 <strtod>:
 8011468:	460a      	mov	r2, r1
 801146a:	4601      	mov	r1, r0
 801146c:	4802      	ldr	r0, [pc, #8]	; (8011478 <strtod+0x10>)
 801146e:	4b03      	ldr	r3, [pc, #12]	; (801147c <strtod+0x14>)
 8011470:	6800      	ldr	r0, [r0, #0]
 8011472:	f7ff b9e9 	b.w	8010848 <_strtod_l>
 8011476:	bf00      	nop
 8011478:	20000040 	.word	0x20000040
 801147c:	200000a8 	.word	0x200000a8

08011480 <strtok>:
 8011480:	4b16      	ldr	r3, [pc, #88]	; (80114dc <strtok+0x5c>)
 8011482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011484:	681e      	ldr	r6, [r3, #0]
 8011486:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8011488:	4605      	mov	r5, r0
 801148a:	b9fc      	cbnz	r4, 80114cc <strtok+0x4c>
 801148c:	2050      	movs	r0, #80	; 0x50
 801148e:	9101      	str	r1, [sp, #4]
 8011490:	f001 fb00 	bl	8012a94 <malloc>
 8011494:	9901      	ldr	r1, [sp, #4]
 8011496:	65b0      	str	r0, [r6, #88]	; 0x58
 8011498:	4602      	mov	r2, r0
 801149a:	b920      	cbnz	r0, 80114a6 <strtok+0x26>
 801149c:	4b10      	ldr	r3, [pc, #64]	; (80114e0 <strtok+0x60>)
 801149e:	4811      	ldr	r0, [pc, #68]	; (80114e4 <strtok+0x64>)
 80114a0:	2157      	movs	r1, #87	; 0x57
 80114a2:	f000 f8d9 	bl	8011658 <__assert_func>
 80114a6:	e9c0 4400 	strd	r4, r4, [r0]
 80114aa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80114ae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80114b2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80114b6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80114ba:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80114be:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80114c2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80114c6:	6184      	str	r4, [r0, #24]
 80114c8:	7704      	strb	r4, [r0, #28]
 80114ca:	6244      	str	r4, [r0, #36]	; 0x24
 80114cc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80114ce:	2301      	movs	r3, #1
 80114d0:	4628      	mov	r0, r5
 80114d2:	b002      	add	sp, #8
 80114d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114d8:	f000 b806 	b.w	80114e8 <__strtok_r>
 80114dc:	20000040 	.word	0x20000040
 80114e0:	08027eb0 	.word	0x08027eb0
 80114e4:	08027ec7 	.word	0x08027ec7

080114e8 <__strtok_r>:
 80114e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ea:	b908      	cbnz	r0, 80114f0 <__strtok_r+0x8>
 80114ec:	6810      	ldr	r0, [r2, #0]
 80114ee:	b188      	cbz	r0, 8011514 <__strtok_r+0x2c>
 80114f0:	4604      	mov	r4, r0
 80114f2:	4620      	mov	r0, r4
 80114f4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80114f8:	460f      	mov	r7, r1
 80114fa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80114fe:	b91e      	cbnz	r6, 8011508 <__strtok_r+0x20>
 8011500:	b965      	cbnz	r5, 801151c <__strtok_r+0x34>
 8011502:	6015      	str	r5, [r2, #0]
 8011504:	4628      	mov	r0, r5
 8011506:	e005      	b.n	8011514 <__strtok_r+0x2c>
 8011508:	42b5      	cmp	r5, r6
 801150a:	d1f6      	bne.n	80114fa <__strtok_r+0x12>
 801150c:	2b00      	cmp	r3, #0
 801150e:	d1f0      	bne.n	80114f2 <__strtok_r+0xa>
 8011510:	6014      	str	r4, [r2, #0]
 8011512:	7003      	strb	r3, [r0, #0]
 8011514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011516:	461c      	mov	r4, r3
 8011518:	e00c      	b.n	8011534 <__strtok_r+0x4c>
 801151a:	b915      	cbnz	r5, 8011522 <__strtok_r+0x3a>
 801151c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011520:	460e      	mov	r6, r1
 8011522:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011526:	42ab      	cmp	r3, r5
 8011528:	d1f7      	bne.n	801151a <__strtok_r+0x32>
 801152a:	2b00      	cmp	r3, #0
 801152c:	d0f3      	beq.n	8011516 <__strtok_r+0x2e>
 801152e:	2300      	movs	r3, #0
 8011530:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011534:	6014      	str	r4, [r2, #0]
 8011536:	e7ed      	b.n	8011514 <__strtok_r+0x2c>

08011538 <_strtol_l.isra.0>:
 8011538:	2b01      	cmp	r3, #1
 801153a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801153e:	d001      	beq.n	8011544 <_strtol_l.isra.0+0xc>
 8011540:	2b24      	cmp	r3, #36	; 0x24
 8011542:	d906      	bls.n	8011552 <_strtol_l.isra.0+0x1a>
 8011544:	f7fe fa90 	bl	800fa68 <__errno>
 8011548:	2316      	movs	r3, #22
 801154a:	6003      	str	r3, [r0, #0]
 801154c:	2000      	movs	r0, #0
 801154e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011552:	4f3a      	ldr	r7, [pc, #232]	; (801163c <_strtol_l.isra.0+0x104>)
 8011554:	468e      	mov	lr, r1
 8011556:	4676      	mov	r6, lr
 8011558:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801155c:	5de5      	ldrb	r5, [r4, r7]
 801155e:	f015 0508 	ands.w	r5, r5, #8
 8011562:	d1f8      	bne.n	8011556 <_strtol_l.isra.0+0x1e>
 8011564:	2c2d      	cmp	r4, #45	; 0x2d
 8011566:	d134      	bne.n	80115d2 <_strtol_l.isra.0+0x9a>
 8011568:	f89e 4000 	ldrb.w	r4, [lr]
 801156c:	f04f 0801 	mov.w	r8, #1
 8011570:	f106 0e02 	add.w	lr, r6, #2
 8011574:	2b00      	cmp	r3, #0
 8011576:	d05c      	beq.n	8011632 <_strtol_l.isra.0+0xfa>
 8011578:	2b10      	cmp	r3, #16
 801157a:	d10c      	bne.n	8011596 <_strtol_l.isra.0+0x5e>
 801157c:	2c30      	cmp	r4, #48	; 0x30
 801157e:	d10a      	bne.n	8011596 <_strtol_l.isra.0+0x5e>
 8011580:	f89e 4000 	ldrb.w	r4, [lr]
 8011584:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011588:	2c58      	cmp	r4, #88	; 0x58
 801158a:	d14d      	bne.n	8011628 <_strtol_l.isra.0+0xf0>
 801158c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011590:	2310      	movs	r3, #16
 8011592:	f10e 0e02 	add.w	lr, lr, #2
 8011596:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801159a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801159e:	2600      	movs	r6, #0
 80115a0:	fbbc f9f3 	udiv	r9, ip, r3
 80115a4:	4635      	mov	r5, r6
 80115a6:	fb03 ca19 	mls	sl, r3, r9, ip
 80115aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80115ae:	2f09      	cmp	r7, #9
 80115b0:	d818      	bhi.n	80115e4 <_strtol_l.isra.0+0xac>
 80115b2:	463c      	mov	r4, r7
 80115b4:	42a3      	cmp	r3, r4
 80115b6:	dd24      	ble.n	8011602 <_strtol_l.isra.0+0xca>
 80115b8:	2e00      	cmp	r6, #0
 80115ba:	db1f      	blt.n	80115fc <_strtol_l.isra.0+0xc4>
 80115bc:	45a9      	cmp	r9, r5
 80115be:	d31d      	bcc.n	80115fc <_strtol_l.isra.0+0xc4>
 80115c0:	d101      	bne.n	80115c6 <_strtol_l.isra.0+0x8e>
 80115c2:	45a2      	cmp	sl, r4
 80115c4:	db1a      	blt.n	80115fc <_strtol_l.isra.0+0xc4>
 80115c6:	fb05 4503 	mla	r5, r5, r3, r4
 80115ca:	2601      	movs	r6, #1
 80115cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80115d0:	e7eb      	b.n	80115aa <_strtol_l.isra.0+0x72>
 80115d2:	2c2b      	cmp	r4, #43	; 0x2b
 80115d4:	bf08      	it	eq
 80115d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80115da:	46a8      	mov	r8, r5
 80115dc:	bf08      	it	eq
 80115de:	f106 0e02 	addeq.w	lr, r6, #2
 80115e2:	e7c7      	b.n	8011574 <_strtol_l.isra.0+0x3c>
 80115e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80115e8:	2f19      	cmp	r7, #25
 80115ea:	d801      	bhi.n	80115f0 <_strtol_l.isra.0+0xb8>
 80115ec:	3c37      	subs	r4, #55	; 0x37
 80115ee:	e7e1      	b.n	80115b4 <_strtol_l.isra.0+0x7c>
 80115f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80115f4:	2f19      	cmp	r7, #25
 80115f6:	d804      	bhi.n	8011602 <_strtol_l.isra.0+0xca>
 80115f8:	3c57      	subs	r4, #87	; 0x57
 80115fa:	e7db      	b.n	80115b4 <_strtol_l.isra.0+0x7c>
 80115fc:	f04f 36ff 	mov.w	r6, #4294967295
 8011600:	e7e4      	b.n	80115cc <_strtol_l.isra.0+0x94>
 8011602:	2e00      	cmp	r6, #0
 8011604:	da05      	bge.n	8011612 <_strtol_l.isra.0+0xda>
 8011606:	2322      	movs	r3, #34	; 0x22
 8011608:	6003      	str	r3, [r0, #0]
 801160a:	4665      	mov	r5, ip
 801160c:	b942      	cbnz	r2, 8011620 <_strtol_l.isra.0+0xe8>
 801160e:	4628      	mov	r0, r5
 8011610:	e79d      	b.n	801154e <_strtol_l.isra.0+0x16>
 8011612:	f1b8 0f00 	cmp.w	r8, #0
 8011616:	d000      	beq.n	801161a <_strtol_l.isra.0+0xe2>
 8011618:	426d      	negs	r5, r5
 801161a:	2a00      	cmp	r2, #0
 801161c:	d0f7      	beq.n	801160e <_strtol_l.isra.0+0xd6>
 801161e:	b10e      	cbz	r6, 8011624 <_strtol_l.isra.0+0xec>
 8011620:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011624:	6011      	str	r1, [r2, #0]
 8011626:	e7f2      	b.n	801160e <_strtol_l.isra.0+0xd6>
 8011628:	2430      	movs	r4, #48	; 0x30
 801162a:	2b00      	cmp	r3, #0
 801162c:	d1b3      	bne.n	8011596 <_strtol_l.isra.0+0x5e>
 801162e:	2308      	movs	r3, #8
 8011630:	e7b1      	b.n	8011596 <_strtol_l.isra.0+0x5e>
 8011632:	2c30      	cmp	r4, #48	; 0x30
 8011634:	d0a4      	beq.n	8011580 <_strtol_l.isra.0+0x48>
 8011636:	230a      	movs	r3, #10
 8011638:	e7ad      	b.n	8011596 <_strtol_l.isra.0+0x5e>
 801163a:	bf00      	nop
 801163c:	08027f65 	.word	0x08027f65

08011640 <_strtol_r>:
 8011640:	f7ff bf7a 	b.w	8011538 <_strtol_l.isra.0>

08011644 <strtol>:
 8011644:	4613      	mov	r3, r2
 8011646:	460a      	mov	r2, r1
 8011648:	4601      	mov	r1, r0
 801164a:	4802      	ldr	r0, [pc, #8]	; (8011654 <strtol+0x10>)
 801164c:	6800      	ldr	r0, [r0, #0]
 801164e:	f7ff bf73 	b.w	8011538 <_strtol_l.isra.0>
 8011652:	bf00      	nop
 8011654:	20000040 	.word	0x20000040

08011658 <__assert_func>:
 8011658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801165a:	4614      	mov	r4, r2
 801165c:	461a      	mov	r2, r3
 801165e:	4b09      	ldr	r3, [pc, #36]	; (8011684 <__assert_func+0x2c>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	4605      	mov	r5, r0
 8011664:	68d8      	ldr	r0, [r3, #12]
 8011666:	b14c      	cbz	r4, 801167c <__assert_func+0x24>
 8011668:	4b07      	ldr	r3, [pc, #28]	; (8011688 <__assert_func+0x30>)
 801166a:	9100      	str	r1, [sp, #0]
 801166c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011670:	4906      	ldr	r1, [pc, #24]	; (801168c <__assert_func+0x34>)
 8011672:	462b      	mov	r3, r5
 8011674:	f000 fe88 	bl	8012388 <fiprintf>
 8011678:	f002 fb56 	bl	8013d28 <abort>
 801167c:	4b04      	ldr	r3, [pc, #16]	; (8011690 <__assert_func+0x38>)
 801167e:	461c      	mov	r4, r3
 8011680:	e7f3      	b.n	801166a <__assert_func+0x12>
 8011682:	bf00      	nop
 8011684:	20000040 	.word	0x20000040
 8011688:	08027f28 	.word	0x08027f28
 801168c:	08027f35 	.word	0x08027f35
 8011690:	08027f63 	.word	0x08027f63

08011694 <quorem>:
 8011694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011698:	6903      	ldr	r3, [r0, #16]
 801169a:	690c      	ldr	r4, [r1, #16]
 801169c:	42a3      	cmp	r3, r4
 801169e:	4607      	mov	r7, r0
 80116a0:	f2c0 8081 	blt.w	80117a6 <quorem+0x112>
 80116a4:	3c01      	subs	r4, #1
 80116a6:	f101 0814 	add.w	r8, r1, #20
 80116aa:	f100 0514 	add.w	r5, r0, #20
 80116ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116b2:	9301      	str	r3, [sp, #4]
 80116b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80116b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116bc:	3301      	adds	r3, #1
 80116be:	429a      	cmp	r2, r3
 80116c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80116c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80116c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80116cc:	d331      	bcc.n	8011732 <quorem+0x9e>
 80116ce:	f04f 0e00 	mov.w	lr, #0
 80116d2:	4640      	mov	r0, r8
 80116d4:	46ac      	mov	ip, r5
 80116d6:	46f2      	mov	sl, lr
 80116d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80116dc:	b293      	uxth	r3, r2
 80116de:	fb06 e303 	mla	r3, r6, r3, lr
 80116e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80116e6:	b29b      	uxth	r3, r3
 80116e8:	ebaa 0303 	sub.w	r3, sl, r3
 80116ec:	0c12      	lsrs	r2, r2, #16
 80116ee:	f8dc a000 	ldr.w	sl, [ip]
 80116f2:	fb06 e202 	mla	r2, r6, r2, lr
 80116f6:	fa13 f38a 	uxtah	r3, r3, sl
 80116fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80116fe:	fa1f fa82 	uxth.w	sl, r2
 8011702:	f8dc 2000 	ldr.w	r2, [ip]
 8011706:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801170a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801170e:	b29b      	uxth	r3, r3
 8011710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011714:	4581      	cmp	r9, r0
 8011716:	f84c 3b04 	str.w	r3, [ip], #4
 801171a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801171e:	d2db      	bcs.n	80116d8 <quorem+0x44>
 8011720:	f855 300b 	ldr.w	r3, [r5, fp]
 8011724:	b92b      	cbnz	r3, 8011732 <quorem+0x9e>
 8011726:	9b01      	ldr	r3, [sp, #4]
 8011728:	3b04      	subs	r3, #4
 801172a:	429d      	cmp	r5, r3
 801172c:	461a      	mov	r2, r3
 801172e:	d32e      	bcc.n	801178e <quorem+0xfa>
 8011730:	613c      	str	r4, [r7, #16]
 8011732:	4638      	mov	r0, r7
 8011734:	f001 fc9e 	bl	8013074 <__mcmp>
 8011738:	2800      	cmp	r0, #0
 801173a:	db24      	blt.n	8011786 <quorem+0xf2>
 801173c:	3601      	adds	r6, #1
 801173e:	4628      	mov	r0, r5
 8011740:	f04f 0c00 	mov.w	ip, #0
 8011744:	f858 2b04 	ldr.w	r2, [r8], #4
 8011748:	f8d0 e000 	ldr.w	lr, [r0]
 801174c:	b293      	uxth	r3, r2
 801174e:	ebac 0303 	sub.w	r3, ip, r3
 8011752:	0c12      	lsrs	r2, r2, #16
 8011754:	fa13 f38e 	uxtah	r3, r3, lr
 8011758:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801175c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011760:	b29b      	uxth	r3, r3
 8011762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011766:	45c1      	cmp	r9, r8
 8011768:	f840 3b04 	str.w	r3, [r0], #4
 801176c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011770:	d2e8      	bcs.n	8011744 <quorem+0xb0>
 8011772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801177a:	b922      	cbnz	r2, 8011786 <quorem+0xf2>
 801177c:	3b04      	subs	r3, #4
 801177e:	429d      	cmp	r5, r3
 8011780:	461a      	mov	r2, r3
 8011782:	d30a      	bcc.n	801179a <quorem+0x106>
 8011784:	613c      	str	r4, [r7, #16]
 8011786:	4630      	mov	r0, r6
 8011788:	b003      	add	sp, #12
 801178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178e:	6812      	ldr	r2, [r2, #0]
 8011790:	3b04      	subs	r3, #4
 8011792:	2a00      	cmp	r2, #0
 8011794:	d1cc      	bne.n	8011730 <quorem+0x9c>
 8011796:	3c01      	subs	r4, #1
 8011798:	e7c7      	b.n	801172a <quorem+0x96>
 801179a:	6812      	ldr	r2, [r2, #0]
 801179c:	3b04      	subs	r3, #4
 801179e:	2a00      	cmp	r2, #0
 80117a0:	d1f0      	bne.n	8011784 <quorem+0xf0>
 80117a2:	3c01      	subs	r4, #1
 80117a4:	e7eb      	b.n	801177e <quorem+0xea>
 80117a6:	2000      	movs	r0, #0
 80117a8:	e7ee      	b.n	8011788 <quorem+0xf4>
 80117aa:	0000      	movs	r0, r0
 80117ac:	0000      	movs	r0, r0
	...

080117b0 <_dtoa_r>:
 80117b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b4:	ed2d 8b02 	vpush	{d8}
 80117b8:	ec57 6b10 	vmov	r6, r7, d0
 80117bc:	b095      	sub	sp, #84	; 0x54
 80117be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80117c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80117c4:	9105      	str	r1, [sp, #20]
 80117c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80117ca:	4604      	mov	r4, r0
 80117cc:	9209      	str	r2, [sp, #36]	; 0x24
 80117ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80117d0:	b975      	cbnz	r5, 80117f0 <_dtoa_r+0x40>
 80117d2:	2010      	movs	r0, #16
 80117d4:	f001 f95e 	bl	8012a94 <malloc>
 80117d8:	4602      	mov	r2, r0
 80117da:	6260      	str	r0, [r4, #36]	; 0x24
 80117dc:	b920      	cbnz	r0, 80117e8 <_dtoa_r+0x38>
 80117de:	4bb2      	ldr	r3, [pc, #712]	; (8011aa8 <_dtoa_r+0x2f8>)
 80117e0:	21ea      	movs	r1, #234	; 0xea
 80117e2:	48b2      	ldr	r0, [pc, #712]	; (8011aac <_dtoa_r+0x2fc>)
 80117e4:	f7ff ff38 	bl	8011658 <__assert_func>
 80117e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80117ec:	6005      	str	r5, [r0, #0]
 80117ee:	60c5      	str	r5, [r0, #12]
 80117f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117f2:	6819      	ldr	r1, [r3, #0]
 80117f4:	b151      	cbz	r1, 801180c <_dtoa_r+0x5c>
 80117f6:	685a      	ldr	r2, [r3, #4]
 80117f8:	604a      	str	r2, [r1, #4]
 80117fa:	2301      	movs	r3, #1
 80117fc:	4093      	lsls	r3, r2
 80117fe:	608b      	str	r3, [r1, #8]
 8011800:	4620      	mov	r0, r4
 8011802:	f001 f9af 	bl	8012b64 <_Bfree>
 8011806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011808:	2200      	movs	r2, #0
 801180a:	601a      	str	r2, [r3, #0]
 801180c:	1e3b      	subs	r3, r7, #0
 801180e:	bfb9      	ittee	lt
 8011810:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011814:	9303      	strlt	r3, [sp, #12]
 8011816:	2300      	movge	r3, #0
 8011818:	f8c8 3000 	strge.w	r3, [r8]
 801181c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011820:	4ba3      	ldr	r3, [pc, #652]	; (8011ab0 <_dtoa_r+0x300>)
 8011822:	bfbc      	itt	lt
 8011824:	2201      	movlt	r2, #1
 8011826:	f8c8 2000 	strlt.w	r2, [r8]
 801182a:	ea33 0309 	bics.w	r3, r3, r9
 801182e:	d11b      	bne.n	8011868 <_dtoa_r+0xb8>
 8011830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011832:	f242 730f 	movw	r3, #9999	; 0x270f
 8011836:	6013      	str	r3, [r2, #0]
 8011838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801183c:	4333      	orrs	r3, r6
 801183e:	f000 857a 	beq.w	8012336 <_dtoa_r+0xb86>
 8011842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011844:	b963      	cbnz	r3, 8011860 <_dtoa_r+0xb0>
 8011846:	4b9b      	ldr	r3, [pc, #620]	; (8011ab4 <_dtoa_r+0x304>)
 8011848:	e024      	b.n	8011894 <_dtoa_r+0xe4>
 801184a:	4b9b      	ldr	r3, [pc, #620]	; (8011ab8 <_dtoa_r+0x308>)
 801184c:	9300      	str	r3, [sp, #0]
 801184e:	3308      	adds	r3, #8
 8011850:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011852:	6013      	str	r3, [r2, #0]
 8011854:	9800      	ldr	r0, [sp, #0]
 8011856:	b015      	add	sp, #84	; 0x54
 8011858:	ecbd 8b02 	vpop	{d8}
 801185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011860:	4b94      	ldr	r3, [pc, #592]	; (8011ab4 <_dtoa_r+0x304>)
 8011862:	9300      	str	r3, [sp, #0]
 8011864:	3303      	adds	r3, #3
 8011866:	e7f3      	b.n	8011850 <_dtoa_r+0xa0>
 8011868:	ed9d 7b02 	vldr	d7, [sp, #8]
 801186c:	2200      	movs	r2, #0
 801186e:	ec51 0b17 	vmov	r0, r1, d7
 8011872:	2300      	movs	r3, #0
 8011874:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011878:	f7ef f93e 	bl	8000af8 <__aeabi_dcmpeq>
 801187c:	4680      	mov	r8, r0
 801187e:	b158      	cbz	r0, 8011898 <_dtoa_r+0xe8>
 8011880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011882:	2301      	movs	r3, #1
 8011884:	6013      	str	r3, [r2, #0]
 8011886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011888:	2b00      	cmp	r3, #0
 801188a:	f000 8551 	beq.w	8012330 <_dtoa_r+0xb80>
 801188e:	488b      	ldr	r0, [pc, #556]	; (8011abc <_dtoa_r+0x30c>)
 8011890:	6018      	str	r0, [r3, #0]
 8011892:	1e43      	subs	r3, r0, #1
 8011894:	9300      	str	r3, [sp, #0]
 8011896:	e7dd      	b.n	8011854 <_dtoa_r+0xa4>
 8011898:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801189c:	aa12      	add	r2, sp, #72	; 0x48
 801189e:	a913      	add	r1, sp, #76	; 0x4c
 80118a0:	4620      	mov	r0, r4
 80118a2:	f001 fd07 	bl	80132b4 <__d2b>
 80118a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80118aa:	4683      	mov	fp, r0
 80118ac:	2d00      	cmp	r5, #0
 80118ae:	d07c      	beq.n	80119aa <_dtoa_r+0x1fa>
 80118b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80118b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80118ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80118be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80118c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80118c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80118ca:	4b7d      	ldr	r3, [pc, #500]	; (8011ac0 <_dtoa_r+0x310>)
 80118cc:	2200      	movs	r2, #0
 80118ce:	4630      	mov	r0, r6
 80118d0:	4639      	mov	r1, r7
 80118d2:	f7ee fcf1 	bl	80002b8 <__aeabi_dsub>
 80118d6:	a36e      	add	r3, pc, #440	; (adr r3, 8011a90 <_dtoa_r+0x2e0>)
 80118d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118dc:	f7ee fea4 	bl	8000628 <__aeabi_dmul>
 80118e0:	a36d      	add	r3, pc, #436	; (adr r3, 8011a98 <_dtoa_r+0x2e8>)
 80118e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e6:	f7ee fce9 	bl	80002bc <__adddf3>
 80118ea:	4606      	mov	r6, r0
 80118ec:	4628      	mov	r0, r5
 80118ee:	460f      	mov	r7, r1
 80118f0:	f7ee fe30 	bl	8000554 <__aeabi_i2d>
 80118f4:	a36a      	add	r3, pc, #424	; (adr r3, 8011aa0 <_dtoa_r+0x2f0>)
 80118f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fa:	f7ee fe95 	bl	8000628 <__aeabi_dmul>
 80118fe:	4602      	mov	r2, r0
 8011900:	460b      	mov	r3, r1
 8011902:	4630      	mov	r0, r6
 8011904:	4639      	mov	r1, r7
 8011906:	f7ee fcd9 	bl	80002bc <__adddf3>
 801190a:	4606      	mov	r6, r0
 801190c:	460f      	mov	r7, r1
 801190e:	f7ef f93b 	bl	8000b88 <__aeabi_d2iz>
 8011912:	2200      	movs	r2, #0
 8011914:	4682      	mov	sl, r0
 8011916:	2300      	movs	r3, #0
 8011918:	4630      	mov	r0, r6
 801191a:	4639      	mov	r1, r7
 801191c:	f7ef f8f6 	bl	8000b0c <__aeabi_dcmplt>
 8011920:	b148      	cbz	r0, 8011936 <_dtoa_r+0x186>
 8011922:	4650      	mov	r0, sl
 8011924:	f7ee fe16 	bl	8000554 <__aeabi_i2d>
 8011928:	4632      	mov	r2, r6
 801192a:	463b      	mov	r3, r7
 801192c:	f7ef f8e4 	bl	8000af8 <__aeabi_dcmpeq>
 8011930:	b908      	cbnz	r0, 8011936 <_dtoa_r+0x186>
 8011932:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011936:	f1ba 0f16 	cmp.w	sl, #22
 801193a:	d854      	bhi.n	80119e6 <_dtoa_r+0x236>
 801193c:	4b61      	ldr	r3, [pc, #388]	; (8011ac4 <_dtoa_r+0x314>)
 801193e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011946:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801194a:	f7ef f8df 	bl	8000b0c <__aeabi_dcmplt>
 801194e:	2800      	cmp	r0, #0
 8011950:	d04b      	beq.n	80119ea <_dtoa_r+0x23a>
 8011952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011956:	2300      	movs	r3, #0
 8011958:	930e      	str	r3, [sp, #56]	; 0x38
 801195a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801195c:	1b5d      	subs	r5, r3, r5
 801195e:	1e6b      	subs	r3, r5, #1
 8011960:	9304      	str	r3, [sp, #16]
 8011962:	bf43      	ittte	mi
 8011964:	2300      	movmi	r3, #0
 8011966:	f1c5 0801 	rsbmi	r8, r5, #1
 801196a:	9304      	strmi	r3, [sp, #16]
 801196c:	f04f 0800 	movpl.w	r8, #0
 8011970:	f1ba 0f00 	cmp.w	sl, #0
 8011974:	db3b      	blt.n	80119ee <_dtoa_r+0x23e>
 8011976:	9b04      	ldr	r3, [sp, #16]
 8011978:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801197c:	4453      	add	r3, sl
 801197e:	9304      	str	r3, [sp, #16]
 8011980:	2300      	movs	r3, #0
 8011982:	9306      	str	r3, [sp, #24]
 8011984:	9b05      	ldr	r3, [sp, #20]
 8011986:	2b09      	cmp	r3, #9
 8011988:	d869      	bhi.n	8011a5e <_dtoa_r+0x2ae>
 801198a:	2b05      	cmp	r3, #5
 801198c:	bfc4      	itt	gt
 801198e:	3b04      	subgt	r3, #4
 8011990:	9305      	strgt	r3, [sp, #20]
 8011992:	9b05      	ldr	r3, [sp, #20]
 8011994:	f1a3 0302 	sub.w	r3, r3, #2
 8011998:	bfcc      	ite	gt
 801199a:	2500      	movgt	r5, #0
 801199c:	2501      	movle	r5, #1
 801199e:	2b03      	cmp	r3, #3
 80119a0:	d869      	bhi.n	8011a76 <_dtoa_r+0x2c6>
 80119a2:	e8df f003 	tbb	[pc, r3]
 80119a6:	4e2c      	.short	0x4e2c
 80119a8:	5a4c      	.short	0x5a4c
 80119aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80119ae:	441d      	add	r5, r3
 80119b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80119b4:	2b20      	cmp	r3, #32
 80119b6:	bfc1      	itttt	gt
 80119b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80119bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80119c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80119c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80119c8:	bfda      	itte	le
 80119ca:	f1c3 0320 	rsble	r3, r3, #32
 80119ce:	fa06 f003 	lslle.w	r0, r6, r3
 80119d2:	4318      	orrgt	r0, r3
 80119d4:	f7ee fdae 	bl	8000534 <__aeabi_ui2d>
 80119d8:	2301      	movs	r3, #1
 80119da:	4606      	mov	r6, r0
 80119dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80119e0:	3d01      	subs	r5, #1
 80119e2:	9310      	str	r3, [sp, #64]	; 0x40
 80119e4:	e771      	b.n	80118ca <_dtoa_r+0x11a>
 80119e6:	2301      	movs	r3, #1
 80119e8:	e7b6      	b.n	8011958 <_dtoa_r+0x1a8>
 80119ea:	900e      	str	r0, [sp, #56]	; 0x38
 80119ec:	e7b5      	b.n	801195a <_dtoa_r+0x1aa>
 80119ee:	f1ca 0300 	rsb	r3, sl, #0
 80119f2:	9306      	str	r3, [sp, #24]
 80119f4:	2300      	movs	r3, #0
 80119f6:	eba8 080a 	sub.w	r8, r8, sl
 80119fa:	930d      	str	r3, [sp, #52]	; 0x34
 80119fc:	e7c2      	b.n	8011984 <_dtoa_r+0x1d4>
 80119fe:	2300      	movs	r3, #0
 8011a00:	9308      	str	r3, [sp, #32]
 8011a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	dc39      	bgt.n	8011a7c <_dtoa_r+0x2cc>
 8011a08:	f04f 0901 	mov.w	r9, #1
 8011a0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a10:	464b      	mov	r3, r9
 8011a12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011a16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011a18:	2200      	movs	r2, #0
 8011a1a:	6042      	str	r2, [r0, #4]
 8011a1c:	2204      	movs	r2, #4
 8011a1e:	f102 0614 	add.w	r6, r2, #20
 8011a22:	429e      	cmp	r6, r3
 8011a24:	6841      	ldr	r1, [r0, #4]
 8011a26:	d92f      	bls.n	8011a88 <_dtoa_r+0x2d8>
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f001 f85b 	bl	8012ae4 <_Balloc>
 8011a2e:	9000      	str	r0, [sp, #0]
 8011a30:	2800      	cmp	r0, #0
 8011a32:	d14b      	bne.n	8011acc <_dtoa_r+0x31c>
 8011a34:	4b24      	ldr	r3, [pc, #144]	; (8011ac8 <_dtoa_r+0x318>)
 8011a36:	4602      	mov	r2, r0
 8011a38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011a3c:	e6d1      	b.n	80117e2 <_dtoa_r+0x32>
 8011a3e:	2301      	movs	r3, #1
 8011a40:	e7de      	b.n	8011a00 <_dtoa_r+0x250>
 8011a42:	2300      	movs	r3, #0
 8011a44:	9308      	str	r3, [sp, #32]
 8011a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a48:	eb0a 0903 	add.w	r9, sl, r3
 8011a4c:	f109 0301 	add.w	r3, r9, #1
 8011a50:	2b01      	cmp	r3, #1
 8011a52:	9301      	str	r3, [sp, #4]
 8011a54:	bfb8      	it	lt
 8011a56:	2301      	movlt	r3, #1
 8011a58:	e7dd      	b.n	8011a16 <_dtoa_r+0x266>
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	e7f2      	b.n	8011a44 <_dtoa_r+0x294>
 8011a5e:	2501      	movs	r5, #1
 8011a60:	2300      	movs	r3, #0
 8011a62:	9305      	str	r3, [sp, #20]
 8011a64:	9508      	str	r5, [sp, #32]
 8011a66:	f04f 39ff 	mov.w	r9, #4294967295
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a70:	2312      	movs	r3, #18
 8011a72:	9209      	str	r2, [sp, #36]	; 0x24
 8011a74:	e7cf      	b.n	8011a16 <_dtoa_r+0x266>
 8011a76:	2301      	movs	r3, #1
 8011a78:	9308      	str	r3, [sp, #32]
 8011a7a:	e7f4      	b.n	8011a66 <_dtoa_r+0x2b6>
 8011a7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011a80:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a84:	464b      	mov	r3, r9
 8011a86:	e7c6      	b.n	8011a16 <_dtoa_r+0x266>
 8011a88:	3101      	adds	r1, #1
 8011a8a:	6041      	str	r1, [r0, #4]
 8011a8c:	0052      	lsls	r2, r2, #1
 8011a8e:	e7c6      	b.n	8011a1e <_dtoa_r+0x26e>
 8011a90:	636f4361 	.word	0x636f4361
 8011a94:	3fd287a7 	.word	0x3fd287a7
 8011a98:	8b60c8b3 	.word	0x8b60c8b3
 8011a9c:	3fc68a28 	.word	0x3fc68a28
 8011aa0:	509f79fb 	.word	0x509f79fb
 8011aa4:	3fd34413 	.word	0x3fd34413
 8011aa8:	08027eb0 	.word	0x08027eb0
 8011aac:	08028072 	.word	0x08028072
 8011ab0:	7ff00000 	.word	0x7ff00000
 8011ab4:	0802806e 	.word	0x0802806e
 8011ab8:	08028065 	.word	0x08028065
 8011abc:	08027e31 	.word	0x08027e31
 8011ac0:	3ff80000 	.word	0x3ff80000
 8011ac4:	080281e8 	.word	0x080281e8
 8011ac8:	080280d1 	.word	0x080280d1
 8011acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ace:	9a00      	ldr	r2, [sp, #0]
 8011ad0:	601a      	str	r2, [r3, #0]
 8011ad2:	9b01      	ldr	r3, [sp, #4]
 8011ad4:	2b0e      	cmp	r3, #14
 8011ad6:	f200 80ad 	bhi.w	8011c34 <_dtoa_r+0x484>
 8011ada:	2d00      	cmp	r5, #0
 8011adc:	f000 80aa 	beq.w	8011c34 <_dtoa_r+0x484>
 8011ae0:	f1ba 0f00 	cmp.w	sl, #0
 8011ae4:	dd36      	ble.n	8011b54 <_dtoa_r+0x3a4>
 8011ae6:	4ac3      	ldr	r2, [pc, #780]	; (8011df4 <_dtoa_r+0x644>)
 8011ae8:	f00a 030f 	and.w	r3, sl, #15
 8011aec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011af0:	ed93 7b00 	vldr	d7, [r3]
 8011af4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011af8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011afc:	eeb0 8a47 	vmov.f32	s16, s14
 8011b00:	eef0 8a67 	vmov.f32	s17, s15
 8011b04:	d016      	beq.n	8011b34 <_dtoa_r+0x384>
 8011b06:	4bbc      	ldr	r3, [pc, #752]	; (8011df8 <_dtoa_r+0x648>)
 8011b08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011b10:	f7ee feb4 	bl	800087c <__aeabi_ddiv>
 8011b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b18:	f007 070f 	and.w	r7, r7, #15
 8011b1c:	2503      	movs	r5, #3
 8011b1e:	4eb6      	ldr	r6, [pc, #728]	; (8011df8 <_dtoa_r+0x648>)
 8011b20:	b957      	cbnz	r7, 8011b38 <_dtoa_r+0x388>
 8011b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b26:	ec53 2b18 	vmov	r2, r3, d8
 8011b2a:	f7ee fea7 	bl	800087c <__aeabi_ddiv>
 8011b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b32:	e029      	b.n	8011b88 <_dtoa_r+0x3d8>
 8011b34:	2502      	movs	r5, #2
 8011b36:	e7f2      	b.n	8011b1e <_dtoa_r+0x36e>
 8011b38:	07f9      	lsls	r1, r7, #31
 8011b3a:	d508      	bpl.n	8011b4e <_dtoa_r+0x39e>
 8011b3c:	ec51 0b18 	vmov	r0, r1, d8
 8011b40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011b44:	f7ee fd70 	bl	8000628 <__aeabi_dmul>
 8011b48:	ec41 0b18 	vmov	d8, r0, r1
 8011b4c:	3501      	adds	r5, #1
 8011b4e:	107f      	asrs	r7, r7, #1
 8011b50:	3608      	adds	r6, #8
 8011b52:	e7e5      	b.n	8011b20 <_dtoa_r+0x370>
 8011b54:	f000 80a6 	beq.w	8011ca4 <_dtoa_r+0x4f4>
 8011b58:	f1ca 0600 	rsb	r6, sl, #0
 8011b5c:	4ba5      	ldr	r3, [pc, #660]	; (8011df4 <_dtoa_r+0x644>)
 8011b5e:	4fa6      	ldr	r7, [pc, #664]	; (8011df8 <_dtoa_r+0x648>)
 8011b60:	f006 020f 	and.w	r2, r6, #15
 8011b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b70:	f7ee fd5a 	bl	8000628 <__aeabi_dmul>
 8011b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b78:	1136      	asrs	r6, r6, #4
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	2502      	movs	r5, #2
 8011b7e:	2e00      	cmp	r6, #0
 8011b80:	f040 8085 	bne.w	8011c8e <_dtoa_r+0x4de>
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d1d2      	bne.n	8011b2e <_dtoa_r+0x37e>
 8011b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	f000 808c 	beq.w	8011ca8 <_dtoa_r+0x4f8>
 8011b90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011b94:	4b99      	ldr	r3, [pc, #612]	; (8011dfc <_dtoa_r+0x64c>)
 8011b96:	2200      	movs	r2, #0
 8011b98:	4630      	mov	r0, r6
 8011b9a:	4639      	mov	r1, r7
 8011b9c:	f7ee ffb6 	bl	8000b0c <__aeabi_dcmplt>
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	f000 8081 	beq.w	8011ca8 <_dtoa_r+0x4f8>
 8011ba6:	9b01      	ldr	r3, [sp, #4]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d07d      	beq.n	8011ca8 <_dtoa_r+0x4f8>
 8011bac:	f1b9 0f00 	cmp.w	r9, #0
 8011bb0:	dd3c      	ble.n	8011c2c <_dtoa_r+0x47c>
 8011bb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011bb6:	9307      	str	r3, [sp, #28]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	4b91      	ldr	r3, [pc, #580]	; (8011e00 <_dtoa_r+0x650>)
 8011bbc:	4630      	mov	r0, r6
 8011bbe:	4639      	mov	r1, r7
 8011bc0:	f7ee fd32 	bl	8000628 <__aeabi_dmul>
 8011bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bc8:	3501      	adds	r5, #1
 8011bca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011bce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	f7ee fcbe 	bl	8000554 <__aeabi_i2d>
 8011bd8:	4632      	mov	r2, r6
 8011bda:	463b      	mov	r3, r7
 8011bdc:	f7ee fd24 	bl	8000628 <__aeabi_dmul>
 8011be0:	4b88      	ldr	r3, [pc, #544]	; (8011e04 <_dtoa_r+0x654>)
 8011be2:	2200      	movs	r2, #0
 8011be4:	f7ee fb6a 	bl	80002bc <__adddf3>
 8011be8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bf0:	9303      	str	r3, [sp, #12]
 8011bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d15c      	bne.n	8011cb2 <_dtoa_r+0x502>
 8011bf8:	4b83      	ldr	r3, [pc, #524]	; (8011e08 <_dtoa_r+0x658>)
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	4630      	mov	r0, r6
 8011bfe:	4639      	mov	r1, r7
 8011c00:	f7ee fb5a 	bl	80002b8 <__aeabi_dsub>
 8011c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c08:	4606      	mov	r6, r0
 8011c0a:	460f      	mov	r7, r1
 8011c0c:	f7ee ff9c 	bl	8000b48 <__aeabi_dcmpgt>
 8011c10:	2800      	cmp	r0, #0
 8011c12:	f040 8296 	bne.w	8012142 <_dtoa_r+0x992>
 8011c16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c20:	4639      	mov	r1, r7
 8011c22:	f7ee ff73 	bl	8000b0c <__aeabi_dcmplt>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	f040 8288 	bne.w	801213c <_dtoa_r+0x98c>
 8011c2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011c30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011c34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	f2c0 8158 	blt.w	8011eec <_dtoa_r+0x73c>
 8011c3c:	f1ba 0f0e 	cmp.w	sl, #14
 8011c40:	f300 8154 	bgt.w	8011eec <_dtoa_r+0x73c>
 8011c44:	4b6b      	ldr	r3, [pc, #428]	; (8011df4 <_dtoa_r+0x644>)
 8011c46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011c4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	f280 80e3 	bge.w	8011e1c <_dtoa_r+0x66c>
 8011c56:	9b01      	ldr	r3, [sp, #4]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	f300 80df 	bgt.w	8011e1c <_dtoa_r+0x66c>
 8011c5e:	f040 826d 	bne.w	801213c <_dtoa_r+0x98c>
 8011c62:	4b69      	ldr	r3, [pc, #420]	; (8011e08 <_dtoa_r+0x658>)
 8011c64:	2200      	movs	r2, #0
 8011c66:	4640      	mov	r0, r8
 8011c68:	4649      	mov	r1, r9
 8011c6a:	f7ee fcdd 	bl	8000628 <__aeabi_dmul>
 8011c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c72:	f7ee ff5f 	bl	8000b34 <__aeabi_dcmpge>
 8011c76:	9e01      	ldr	r6, [sp, #4]
 8011c78:	4637      	mov	r7, r6
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	f040 8243 	bne.w	8012106 <_dtoa_r+0x956>
 8011c80:	9d00      	ldr	r5, [sp, #0]
 8011c82:	2331      	movs	r3, #49	; 0x31
 8011c84:	f805 3b01 	strb.w	r3, [r5], #1
 8011c88:	f10a 0a01 	add.w	sl, sl, #1
 8011c8c:	e23f      	b.n	801210e <_dtoa_r+0x95e>
 8011c8e:	07f2      	lsls	r2, r6, #31
 8011c90:	d505      	bpl.n	8011c9e <_dtoa_r+0x4ee>
 8011c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c96:	f7ee fcc7 	bl	8000628 <__aeabi_dmul>
 8011c9a:	3501      	adds	r5, #1
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	1076      	asrs	r6, r6, #1
 8011ca0:	3708      	adds	r7, #8
 8011ca2:	e76c      	b.n	8011b7e <_dtoa_r+0x3ce>
 8011ca4:	2502      	movs	r5, #2
 8011ca6:	e76f      	b.n	8011b88 <_dtoa_r+0x3d8>
 8011ca8:	9b01      	ldr	r3, [sp, #4]
 8011caa:	f8cd a01c 	str.w	sl, [sp, #28]
 8011cae:	930c      	str	r3, [sp, #48]	; 0x30
 8011cb0:	e78d      	b.n	8011bce <_dtoa_r+0x41e>
 8011cb2:	9900      	ldr	r1, [sp, #0]
 8011cb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011cb8:	4b4e      	ldr	r3, [pc, #312]	; (8011df4 <_dtoa_r+0x644>)
 8011cba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011cbe:	4401      	add	r1, r0
 8011cc0:	9102      	str	r1, [sp, #8]
 8011cc2:	9908      	ldr	r1, [sp, #32]
 8011cc4:	eeb0 8a47 	vmov.f32	s16, s14
 8011cc8:	eef0 8a67 	vmov.f32	s17, s15
 8011ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011cd4:	2900      	cmp	r1, #0
 8011cd6:	d045      	beq.n	8011d64 <_dtoa_r+0x5b4>
 8011cd8:	494c      	ldr	r1, [pc, #304]	; (8011e0c <_dtoa_r+0x65c>)
 8011cda:	2000      	movs	r0, #0
 8011cdc:	f7ee fdce 	bl	800087c <__aeabi_ddiv>
 8011ce0:	ec53 2b18 	vmov	r2, r3, d8
 8011ce4:	f7ee fae8 	bl	80002b8 <__aeabi_dsub>
 8011ce8:	9d00      	ldr	r5, [sp, #0]
 8011cea:	ec41 0b18 	vmov	d8, r0, r1
 8011cee:	4639      	mov	r1, r7
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	f7ee ff49 	bl	8000b88 <__aeabi_d2iz>
 8011cf6:	900c      	str	r0, [sp, #48]	; 0x30
 8011cf8:	f7ee fc2c 	bl	8000554 <__aeabi_i2d>
 8011cfc:	4602      	mov	r2, r0
 8011cfe:	460b      	mov	r3, r1
 8011d00:	4630      	mov	r0, r6
 8011d02:	4639      	mov	r1, r7
 8011d04:	f7ee fad8 	bl	80002b8 <__aeabi_dsub>
 8011d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d0a:	3330      	adds	r3, #48	; 0x30
 8011d0c:	f805 3b01 	strb.w	r3, [r5], #1
 8011d10:	ec53 2b18 	vmov	r2, r3, d8
 8011d14:	4606      	mov	r6, r0
 8011d16:	460f      	mov	r7, r1
 8011d18:	f7ee fef8 	bl	8000b0c <__aeabi_dcmplt>
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	d165      	bne.n	8011dec <_dtoa_r+0x63c>
 8011d20:	4632      	mov	r2, r6
 8011d22:	463b      	mov	r3, r7
 8011d24:	4935      	ldr	r1, [pc, #212]	; (8011dfc <_dtoa_r+0x64c>)
 8011d26:	2000      	movs	r0, #0
 8011d28:	f7ee fac6 	bl	80002b8 <__aeabi_dsub>
 8011d2c:	ec53 2b18 	vmov	r2, r3, d8
 8011d30:	f7ee feec 	bl	8000b0c <__aeabi_dcmplt>
 8011d34:	2800      	cmp	r0, #0
 8011d36:	f040 80b9 	bne.w	8011eac <_dtoa_r+0x6fc>
 8011d3a:	9b02      	ldr	r3, [sp, #8]
 8011d3c:	429d      	cmp	r5, r3
 8011d3e:	f43f af75 	beq.w	8011c2c <_dtoa_r+0x47c>
 8011d42:	4b2f      	ldr	r3, [pc, #188]	; (8011e00 <_dtoa_r+0x650>)
 8011d44:	ec51 0b18 	vmov	r0, r1, d8
 8011d48:	2200      	movs	r2, #0
 8011d4a:	f7ee fc6d 	bl	8000628 <__aeabi_dmul>
 8011d4e:	4b2c      	ldr	r3, [pc, #176]	; (8011e00 <_dtoa_r+0x650>)
 8011d50:	ec41 0b18 	vmov	d8, r0, r1
 8011d54:	2200      	movs	r2, #0
 8011d56:	4630      	mov	r0, r6
 8011d58:	4639      	mov	r1, r7
 8011d5a:	f7ee fc65 	bl	8000628 <__aeabi_dmul>
 8011d5e:	4606      	mov	r6, r0
 8011d60:	460f      	mov	r7, r1
 8011d62:	e7c4      	b.n	8011cee <_dtoa_r+0x53e>
 8011d64:	ec51 0b17 	vmov	r0, r1, d7
 8011d68:	f7ee fc5e 	bl	8000628 <__aeabi_dmul>
 8011d6c:	9b02      	ldr	r3, [sp, #8]
 8011d6e:	9d00      	ldr	r5, [sp, #0]
 8011d70:	930c      	str	r3, [sp, #48]	; 0x30
 8011d72:	ec41 0b18 	vmov	d8, r0, r1
 8011d76:	4639      	mov	r1, r7
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f7ee ff05 	bl	8000b88 <__aeabi_d2iz>
 8011d7e:	9011      	str	r0, [sp, #68]	; 0x44
 8011d80:	f7ee fbe8 	bl	8000554 <__aeabi_i2d>
 8011d84:	4602      	mov	r2, r0
 8011d86:	460b      	mov	r3, r1
 8011d88:	4630      	mov	r0, r6
 8011d8a:	4639      	mov	r1, r7
 8011d8c:	f7ee fa94 	bl	80002b8 <__aeabi_dsub>
 8011d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d92:	3330      	adds	r3, #48	; 0x30
 8011d94:	f805 3b01 	strb.w	r3, [r5], #1
 8011d98:	9b02      	ldr	r3, [sp, #8]
 8011d9a:	429d      	cmp	r5, r3
 8011d9c:	4606      	mov	r6, r0
 8011d9e:	460f      	mov	r7, r1
 8011da0:	f04f 0200 	mov.w	r2, #0
 8011da4:	d134      	bne.n	8011e10 <_dtoa_r+0x660>
 8011da6:	4b19      	ldr	r3, [pc, #100]	; (8011e0c <_dtoa_r+0x65c>)
 8011da8:	ec51 0b18 	vmov	r0, r1, d8
 8011dac:	f7ee fa86 	bl	80002bc <__adddf3>
 8011db0:	4602      	mov	r2, r0
 8011db2:	460b      	mov	r3, r1
 8011db4:	4630      	mov	r0, r6
 8011db6:	4639      	mov	r1, r7
 8011db8:	f7ee fec6 	bl	8000b48 <__aeabi_dcmpgt>
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	d175      	bne.n	8011eac <_dtoa_r+0x6fc>
 8011dc0:	ec53 2b18 	vmov	r2, r3, d8
 8011dc4:	4911      	ldr	r1, [pc, #68]	; (8011e0c <_dtoa_r+0x65c>)
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	f7ee fa76 	bl	80002b8 <__aeabi_dsub>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	460b      	mov	r3, r1
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	4639      	mov	r1, r7
 8011dd4:	f7ee fe9a 	bl	8000b0c <__aeabi_dcmplt>
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	f43f af27 	beq.w	8011c2c <_dtoa_r+0x47c>
 8011dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011de0:	1e6b      	subs	r3, r5, #1
 8011de2:	930c      	str	r3, [sp, #48]	; 0x30
 8011de4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011de8:	2b30      	cmp	r3, #48	; 0x30
 8011dea:	d0f8      	beq.n	8011dde <_dtoa_r+0x62e>
 8011dec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011df0:	e04a      	b.n	8011e88 <_dtoa_r+0x6d8>
 8011df2:	bf00      	nop
 8011df4:	080281e8 	.word	0x080281e8
 8011df8:	080281c0 	.word	0x080281c0
 8011dfc:	3ff00000 	.word	0x3ff00000
 8011e00:	40240000 	.word	0x40240000
 8011e04:	401c0000 	.word	0x401c0000
 8011e08:	40140000 	.word	0x40140000
 8011e0c:	3fe00000 	.word	0x3fe00000
 8011e10:	4baf      	ldr	r3, [pc, #700]	; (80120d0 <_dtoa_r+0x920>)
 8011e12:	f7ee fc09 	bl	8000628 <__aeabi_dmul>
 8011e16:	4606      	mov	r6, r0
 8011e18:	460f      	mov	r7, r1
 8011e1a:	e7ac      	b.n	8011d76 <_dtoa_r+0x5c6>
 8011e1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011e20:	9d00      	ldr	r5, [sp, #0]
 8011e22:	4642      	mov	r2, r8
 8011e24:	464b      	mov	r3, r9
 8011e26:	4630      	mov	r0, r6
 8011e28:	4639      	mov	r1, r7
 8011e2a:	f7ee fd27 	bl	800087c <__aeabi_ddiv>
 8011e2e:	f7ee feab 	bl	8000b88 <__aeabi_d2iz>
 8011e32:	9002      	str	r0, [sp, #8]
 8011e34:	f7ee fb8e 	bl	8000554 <__aeabi_i2d>
 8011e38:	4642      	mov	r2, r8
 8011e3a:	464b      	mov	r3, r9
 8011e3c:	f7ee fbf4 	bl	8000628 <__aeabi_dmul>
 8011e40:	4602      	mov	r2, r0
 8011e42:	460b      	mov	r3, r1
 8011e44:	4630      	mov	r0, r6
 8011e46:	4639      	mov	r1, r7
 8011e48:	f7ee fa36 	bl	80002b8 <__aeabi_dsub>
 8011e4c:	9e02      	ldr	r6, [sp, #8]
 8011e4e:	9f01      	ldr	r7, [sp, #4]
 8011e50:	3630      	adds	r6, #48	; 0x30
 8011e52:	f805 6b01 	strb.w	r6, [r5], #1
 8011e56:	9e00      	ldr	r6, [sp, #0]
 8011e58:	1bae      	subs	r6, r5, r6
 8011e5a:	42b7      	cmp	r7, r6
 8011e5c:	4602      	mov	r2, r0
 8011e5e:	460b      	mov	r3, r1
 8011e60:	d137      	bne.n	8011ed2 <_dtoa_r+0x722>
 8011e62:	f7ee fa2b 	bl	80002bc <__adddf3>
 8011e66:	4642      	mov	r2, r8
 8011e68:	464b      	mov	r3, r9
 8011e6a:	4606      	mov	r6, r0
 8011e6c:	460f      	mov	r7, r1
 8011e6e:	f7ee fe6b 	bl	8000b48 <__aeabi_dcmpgt>
 8011e72:	b9c8      	cbnz	r0, 8011ea8 <_dtoa_r+0x6f8>
 8011e74:	4642      	mov	r2, r8
 8011e76:	464b      	mov	r3, r9
 8011e78:	4630      	mov	r0, r6
 8011e7a:	4639      	mov	r1, r7
 8011e7c:	f7ee fe3c 	bl	8000af8 <__aeabi_dcmpeq>
 8011e80:	b110      	cbz	r0, 8011e88 <_dtoa_r+0x6d8>
 8011e82:	9b02      	ldr	r3, [sp, #8]
 8011e84:	07d9      	lsls	r1, r3, #31
 8011e86:	d40f      	bmi.n	8011ea8 <_dtoa_r+0x6f8>
 8011e88:	4620      	mov	r0, r4
 8011e8a:	4659      	mov	r1, fp
 8011e8c:	f000 fe6a 	bl	8012b64 <_Bfree>
 8011e90:	2300      	movs	r3, #0
 8011e92:	702b      	strb	r3, [r5, #0]
 8011e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e96:	f10a 0001 	add.w	r0, sl, #1
 8011e9a:	6018      	str	r0, [r3, #0]
 8011e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	f43f acd8 	beq.w	8011854 <_dtoa_r+0xa4>
 8011ea4:	601d      	str	r5, [r3, #0]
 8011ea6:	e4d5      	b.n	8011854 <_dtoa_r+0xa4>
 8011ea8:	f8cd a01c 	str.w	sl, [sp, #28]
 8011eac:	462b      	mov	r3, r5
 8011eae:	461d      	mov	r5, r3
 8011eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011eb4:	2a39      	cmp	r2, #57	; 0x39
 8011eb6:	d108      	bne.n	8011eca <_dtoa_r+0x71a>
 8011eb8:	9a00      	ldr	r2, [sp, #0]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d1f7      	bne.n	8011eae <_dtoa_r+0x6fe>
 8011ebe:	9a07      	ldr	r2, [sp, #28]
 8011ec0:	9900      	ldr	r1, [sp, #0]
 8011ec2:	3201      	adds	r2, #1
 8011ec4:	9207      	str	r2, [sp, #28]
 8011ec6:	2230      	movs	r2, #48	; 0x30
 8011ec8:	700a      	strb	r2, [r1, #0]
 8011eca:	781a      	ldrb	r2, [r3, #0]
 8011ecc:	3201      	adds	r2, #1
 8011ece:	701a      	strb	r2, [r3, #0]
 8011ed0:	e78c      	b.n	8011dec <_dtoa_r+0x63c>
 8011ed2:	4b7f      	ldr	r3, [pc, #508]	; (80120d0 <_dtoa_r+0x920>)
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	f7ee fba7 	bl	8000628 <__aeabi_dmul>
 8011eda:	2200      	movs	r2, #0
 8011edc:	2300      	movs	r3, #0
 8011ede:	4606      	mov	r6, r0
 8011ee0:	460f      	mov	r7, r1
 8011ee2:	f7ee fe09 	bl	8000af8 <__aeabi_dcmpeq>
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	d09b      	beq.n	8011e22 <_dtoa_r+0x672>
 8011eea:	e7cd      	b.n	8011e88 <_dtoa_r+0x6d8>
 8011eec:	9a08      	ldr	r2, [sp, #32]
 8011eee:	2a00      	cmp	r2, #0
 8011ef0:	f000 80c4 	beq.w	801207c <_dtoa_r+0x8cc>
 8011ef4:	9a05      	ldr	r2, [sp, #20]
 8011ef6:	2a01      	cmp	r2, #1
 8011ef8:	f300 80a8 	bgt.w	801204c <_dtoa_r+0x89c>
 8011efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011efe:	2a00      	cmp	r2, #0
 8011f00:	f000 80a0 	beq.w	8012044 <_dtoa_r+0x894>
 8011f04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011f08:	9e06      	ldr	r6, [sp, #24]
 8011f0a:	4645      	mov	r5, r8
 8011f0c:	9a04      	ldr	r2, [sp, #16]
 8011f0e:	2101      	movs	r1, #1
 8011f10:	441a      	add	r2, r3
 8011f12:	4620      	mov	r0, r4
 8011f14:	4498      	add	r8, r3
 8011f16:	9204      	str	r2, [sp, #16]
 8011f18:	f000 ff2a 	bl	8012d70 <__i2b>
 8011f1c:	4607      	mov	r7, r0
 8011f1e:	2d00      	cmp	r5, #0
 8011f20:	dd0b      	ble.n	8011f3a <_dtoa_r+0x78a>
 8011f22:	9b04      	ldr	r3, [sp, #16]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	dd08      	ble.n	8011f3a <_dtoa_r+0x78a>
 8011f28:	42ab      	cmp	r3, r5
 8011f2a:	9a04      	ldr	r2, [sp, #16]
 8011f2c:	bfa8      	it	ge
 8011f2e:	462b      	movge	r3, r5
 8011f30:	eba8 0803 	sub.w	r8, r8, r3
 8011f34:	1aed      	subs	r5, r5, r3
 8011f36:	1ad3      	subs	r3, r2, r3
 8011f38:	9304      	str	r3, [sp, #16]
 8011f3a:	9b06      	ldr	r3, [sp, #24]
 8011f3c:	b1fb      	cbz	r3, 8011f7e <_dtoa_r+0x7ce>
 8011f3e:	9b08      	ldr	r3, [sp, #32]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	f000 809f 	beq.w	8012084 <_dtoa_r+0x8d4>
 8011f46:	2e00      	cmp	r6, #0
 8011f48:	dd11      	ble.n	8011f6e <_dtoa_r+0x7be>
 8011f4a:	4639      	mov	r1, r7
 8011f4c:	4632      	mov	r2, r6
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f000 ffca 	bl	8012ee8 <__pow5mult>
 8011f54:	465a      	mov	r2, fp
 8011f56:	4601      	mov	r1, r0
 8011f58:	4607      	mov	r7, r0
 8011f5a:	4620      	mov	r0, r4
 8011f5c:	f000 ff1e 	bl	8012d9c <__multiply>
 8011f60:	4659      	mov	r1, fp
 8011f62:	9007      	str	r0, [sp, #28]
 8011f64:	4620      	mov	r0, r4
 8011f66:	f000 fdfd 	bl	8012b64 <_Bfree>
 8011f6a:	9b07      	ldr	r3, [sp, #28]
 8011f6c:	469b      	mov	fp, r3
 8011f6e:	9b06      	ldr	r3, [sp, #24]
 8011f70:	1b9a      	subs	r2, r3, r6
 8011f72:	d004      	beq.n	8011f7e <_dtoa_r+0x7ce>
 8011f74:	4659      	mov	r1, fp
 8011f76:	4620      	mov	r0, r4
 8011f78:	f000 ffb6 	bl	8012ee8 <__pow5mult>
 8011f7c:	4683      	mov	fp, r0
 8011f7e:	2101      	movs	r1, #1
 8011f80:	4620      	mov	r0, r4
 8011f82:	f000 fef5 	bl	8012d70 <__i2b>
 8011f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	dd7c      	ble.n	8012088 <_dtoa_r+0x8d8>
 8011f8e:	461a      	mov	r2, r3
 8011f90:	4601      	mov	r1, r0
 8011f92:	4620      	mov	r0, r4
 8011f94:	f000 ffa8 	bl	8012ee8 <__pow5mult>
 8011f98:	9b05      	ldr	r3, [sp, #20]
 8011f9a:	2b01      	cmp	r3, #1
 8011f9c:	4606      	mov	r6, r0
 8011f9e:	dd76      	ble.n	801208e <_dtoa_r+0x8de>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	9306      	str	r3, [sp, #24]
 8011fa4:	6933      	ldr	r3, [r6, #16]
 8011fa6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011faa:	6918      	ldr	r0, [r3, #16]
 8011fac:	f000 fe90 	bl	8012cd0 <__hi0bits>
 8011fb0:	f1c0 0020 	rsb	r0, r0, #32
 8011fb4:	9b04      	ldr	r3, [sp, #16]
 8011fb6:	4418      	add	r0, r3
 8011fb8:	f010 001f 	ands.w	r0, r0, #31
 8011fbc:	f000 8086 	beq.w	80120cc <_dtoa_r+0x91c>
 8011fc0:	f1c0 0320 	rsb	r3, r0, #32
 8011fc4:	2b04      	cmp	r3, #4
 8011fc6:	dd7f      	ble.n	80120c8 <_dtoa_r+0x918>
 8011fc8:	f1c0 001c 	rsb	r0, r0, #28
 8011fcc:	9b04      	ldr	r3, [sp, #16]
 8011fce:	4403      	add	r3, r0
 8011fd0:	4480      	add	r8, r0
 8011fd2:	4405      	add	r5, r0
 8011fd4:	9304      	str	r3, [sp, #16]
 8011fd6:	f1b8 0f00 	cmp.w	r8, #0
 8011fda:	dd05      	ble.n	8011fe8 <_dtoa_r+0x838>
 8011fdc:	4659      	mov	r1, fp
 8011fde:	4642      	mov	r2, r8
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	f000 ffdb 	bl	8012f9c <__lshift>
 8011fe6:	4683      	mov	fp, r0
 8011fe8:	9b04      	ldr	r3, [sp, #16]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	dd05      	ble.n	8011ffa <_dtoa_r+0x84a>
 8011fee:	4631      	mov	r1, r6
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	f000 ffd2 	bl	8012f9c <__lshift>
 8011ff8:	4606      	mov	r6, r0
 8011ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d069      	beq.n	80120d4 <_dtoa_r+0x924>
 8012000:	4631      	mov	r1, r6
 8012002:	4658      	mov	r0, fp
 8012004:	f001 f836 	bl	8013074 <__mcmp>
 8012008:	2800      	cmp	r0, #0
 801200a:	da63      	bge.n	80120d4 <_dtoa_r+0x924>
 801200c:	2300      	movs	r3, #0
 801200e:	4659      	mov	r1, fp
 8012010:	220a      	movs	r2, #10
 8012012:	4620      	mov	r0, r4
 8012014:	f000 fdc8 	bl	8012ba8 <__multadd>
 8012018:	9b08      	ldr	r3, [sp, #32]
 801201a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801201e:	4683      	mov	fp, r0
 8012020:	2b00      	cmp	r3, #0
 8012022:	f000 818f 	beq.w	8012344 <_dtoa_r+0xb94>
 8012026:	4639      	mov	r1, r7
 8012028:	2300      	movs	r3, #0
 801202a:	220a      	movs	r2, #10
 801202c:	4620      	mov	r0, r4
 801202e:	f000 fdbb 	bl	8012ba8 <__multadd>
 8012032:	f1b9 0f00 	cmp.w	r9, #0
 8012036:	4607      	mov	r7, r0
 8012038:	f300 808e 	bgt.w	8012158 <_dtoa_r+0x9a8>
 801203c:	9b05      	ldr	r3, [sp, #20]
 801203e:	2b02      	cmp	r3, #2
 8012040:	dc50      	bgt.n	80120e4 <_dtoa_r+0x934>
 8012042:	e089      	b.n	8012158 <_dtoa_r+0x9a8>
 8012044:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801204a:	e75d      	b.n	8011f08 <_dtoa_r+0x758>
 801204c:	9b01      	ldr	r3, [sp, #4]
 801204e:	1e5e      	subs	r6, r3, #1
 8012050:	9b06      	ldr	r3, [sp, #24]
 8012052:	42b3      	cmp	r3, r6
 8012054:	bfbf      	itttt	lt
 8012056:	9b06      	ldrlt	r3, [sp, #24]
 8012058:	9606      	strlt	r6, [sp, #24]
 801205a:	1af2      	sublt	r2, r6, r3
 801205c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801205e:	bfb6      	itet	lt
 8012060:	189b      	addlt	r3, r3, r2
 8012062:	1b9e      	subge	r6, r3, r6
 8012064:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012066:	9b01      	ldr	r3, [sp, #4]
 8012068:	bfb8      	it	lt
 801206a:	2600      	movlt	r6, #0
 801206c:	2b00      	cmp	r3, #0
 801206e:	bfb5      	itete	lt
 8012070:	eba8 0503 	sublt.w	r5, r8, r3
 8012074:	9b01      	ldrge	r3, [sp, #4]
 8012076:	2300      	movlt	r3, #0
 8012078:	4645      	movge	r5, r8
 801207a:	e747      	b.n	8011f0c <_dtoa_r+0x75c>
 801207c:	9e06      	ldr	r6, [sp, #24]
 801207e:	9f08      	ldr	r7, [sp, #32]
 8012080:	4645      	mov	r5, r8
 8012082:	e74c      	b.n	8011f1e <_dtoa_r+0x76e>
 8012084:	9a06      	ldr	r2, [sp, #24]
 8012086:	e775      	b.n	8011f74 <_dtoa_r+0x7c4>
 8012088:	9b05      	ldr	r3, [sp, #20]
 801208a:	2b01      	cmp	r3, #1
 801208c:	dc18      	bgt.n	80120c0 <_dtoa_r+0x910>
 801208e:	9b02      	ldr	r3, [sp, #8]
 8012090:	b9b3      	cbnz	r3, 80120c0 <_dtoa_r+0x910>
 8012092:	9b03      	ldr	r3, [sp, #12]
 8012094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012098:	b9a3      	cbnz	r3, 80120c4 <_dtoa_r+0x914>
 801209a:	9b03      	ldr	r3, [sp, #12]
 801209c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80120a0:	0d1b      	lsrs	r3, r3, #20
 80120a2:	051b      	lsls	r3, r3, #20
 80120a4:	b12b      	cbz	r3, 80120b2 <_dtoa_r+0x902>
 80120a6:	9b04      	ldr	r3, [sp, #16]
 80120a8:	3301      	adds	r3, #1
 80120aa:	9304      	str	r3, [sp, #16]
 80120ac:	f108 0801 	add.w	r8, r8, #1
 80120b0:	2301      	movs	r3, #1
 80120b2:	9306      	str	r3, [sp, #24]
 80120b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	f47f af74 	bne.w	8011fa4 <_dtoa_r+0x7f4>
 80120bc:	2001      	movs	r0, #1
 80120be:	e779      	b.n	8011fb4 <_dtoa_r+0x804>
 80120c0:	2300      	movs	r3, #0
 80120c2:	e7f6      	b.n	80120b2 <_dtoa_r+0x902>
 80120c4:	9b02      	ldr	r3, [sp, #8]
 80120c6:	e7f4      	b.n	80120b2 <_dtoa_r+0x902>
 80120c8:	d085      	beq.n	8011fd6 <_dtoa_r+0x826>
 80120ca:	4618      	mov	r0, r3
 80120cc:	301c      	adds	r0, #28
 80120ce:	e77d      	b.n	8011fcc <_dtoa_r+0x81c>
 80120d0:	40240000 	.word	0x40240000
 80120d4:	9b01      	ldr	r3, [sp, #4]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	dc38      	bgt.n	801214c <_dtoa_r+0x99c>
 80120da:	9b05      	ldr	r3, [sp, #20]
 80120dc:	2b02      	cmp	r3, #2
 80120de:	dd35      	ble.n	801214c <_dtoa_r+0x99c>
 80120e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80120e4:	f1b9 0f00 	cmp.w	r9, #0
 80120e8:	d10d      	bne.n	8012106 <_dtoa_r+0x956>
 80120ea:	4631      	mov	r1, r6
 80120ec:	464b      	mov	r3, r9
 80120ee:	2205      	movs	r2, #5
 80120f0:	4620      	mov	r0, r4
 80120f2:	f000 fd59 	bl	8012ba8 <__multadd>
 80120f6:	4601      	mov	r1, r0
 80120f8:	4606      	mov	r6, r0
 80120fa:	4658      	mov	r0, fp
 80120fc:	f000 ffba 	bl	8013074 <__mcmp>
 8012100:	2800      	cmp	r0, #0
 8012102:	f73f adbd 	bgt.w	8011c80 <_dtoa_r+0x4d0>
 8012106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012108:	9d00      	ldr	r5, [sp, #0]
 801210a:	ea6f 0a03 	mvn.w	sl, r3
 801210e:	f04f 0800 	mov.w	r8, #0
 8012112:	4631      	mov	r1, r6
 8012114:	4620      	mov	r0, r4
 8012116:	f000 fd25 	bl	8012b64 <_Bfree>
 801211a:	2f00      	cmp	r7, #0
 801211c:	f43f aeb4 	beq.w	8011e88 <_dtoa_r+0x6d8>
 8012120:	f1b8 0f00 	cmp.w	r8, #0
 8012124:	d005      	beq.n	8012132 <_dtoa_r+0x982>
 8012126:	45b8      	cmp	r8, r7
 8012128:	d003      	beq.n	8012132 <_dtoa_r+0x982>
 801212a:	4641      	mov	r1, r8
 801212c:	4620      	mov	r0, r4
 801212e:	f000 fd19 	bl	8012b64 <_Bfree>
 8012132:	4639      	mov	r1, r7
 8012134:	4620      	mov	r0, r4
 8012136:	f000 fd15 	bl	8012b64 <_Bfree>
 801213a:	e6a5      	b.n	8011e88 <_dtoa_r+0x6d8>
 801213c:	2600      	movs	r6, #0
 801213e:	4637      	mov	r7, r6
 8012140:	e7e1      	b.n	8012106 <_dtoa_r+0x956>
 8012142:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012144:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012148:	4637      	mov	r7, r6
 801214a:	e599      	b.n	8011c80 <_dtoa_r+0x4d0>
 801214c:	9b08      	ldr	r3, [sp, #32]
 801214e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012152:	2b00      	cmp	r3, #0
 8012154:	f000 80fd 	beq.w	8012352 <_dtoa_r+0xba2>
 8012158:	2d00      	cmp	r5, #0
 801215a:	dd05      	ble.n	8012168 <_dtoa_r+0x9b8>
 801215c:	4639      	mov	r1, r7
 801215e:	462a      	mov	r2, r5
 8012160:	4620      	mov	r0, r4
 8012162:	f000 ff1b 	bl	8012f9c <__lshift>
 8012166:	4607      	mov	r7, r0
 8012168:	9b06      	ldr	r3, [sp, #24]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d05c      	beq.n	8012228 <_dtoa_r+0xa78>
 801216e:	6879      	ldr	r1, [r7, #4]
 8012170:	4620      	mov	r0, r4
 8012172:	f000 fcb7 	bl	8012ae4 <_Balloc>
 8012176:	4605      	mov	r5, r0
 8012178:	b928      	cbnz	r0, 8012186 <_dtoa_r+0x9d6>
 801217a:	4b80      	ldr	r3, [pc, #512]	; (801237c <_dtoa_r+0xbcc>)
 801217c:	4602      	mov	r2, r0
 801217e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012182:	f7ff bb2e 	b.w	80117e2 <_dtoa_r+0x32>
 8012186:	693a      	ldr	r2, [r7, #16]
 8012188:	3202      	adds	r2, #2
 801218a:	0092      	lsls	r2, r2, #2
 801218c:	f107 010c 	add.w	r1, r7, #12
 8012190:	300c      	adds	r0, #12
 8012192:	f000 fc99 	bl	8012ac8 <memcpy>
 8012196:	2201      	movs	r2, #1
 8012198:	4629      	mov	r1, r5
 801219a:	4620      	mov	r0, r4
 801219c:	f000 fefe 	bl	8012f9c <__lshift>
 80121a0:	9b00      	ldr	r3, [sp, #0]
 80121a2:	3301      	adds	r3, #1
 80121a4:	9301      	str	r3, [sp, #4]
 80121a6:	9b00      	ldr	r3, [sp, #0]
 80121a8:	444b      	add	r3, r9
 80121aa:	9307      	str	r3, [sp, #28]
 80121ac:	9b02      	ldr	r3, [sp, #8]
 80121ae:	f003 0301 	and.w	r3, r3, #1
 80121b2:	46b8      	mov	r8, r7
 80121b4:	9306      	str	r3, [sp, #24]
 80121b6:	4607      	mov	r7, r0
 80121b8:	9b01      	ldr	r3, [sp, #4]
 80121ba:	4631      	mov	r1, r6
 80121bc:	3b01      	subs	r3, #1
 80121be:	4658      	mov	r0, fp
 80121c0:	9302      	str	r3, [sp, #8]
 80121c2:	f7ff fa67 	bl	8011694 <quorem>
 80121c6:	4603      	mov	r3, r0
 80121c8:	3330      	adds	r3, #48	; 0x30
 80121ca:	9004      	str	r0, [sp, #16]
 80121cc:	4641      	mov	r1, r8
 80121ce:	4658      	mov	r0, fp
 80121d0:	9308      	str	r3, [sp, #32]
 80121d2:	f000 ff4f 	bl	8013074 <__mcmp>
 80121d6:	463a      	mov	r2, r7
 80121d8:	4681      	mov	r9, r0
 80121da:	4631      	mov	r1, r6
 80121dc:	4620      	mov	r0, r4
 80121de:	f000 ff65 	bl	80130ac <__mdiff>
 80121e2:	68c2      	ldr	r2, [r0, #12]
 80121e4:	9b08      	ldr	r3, [sp, #32]
 80121e6:	4605      	mov	r5, r0
 80121e8:	bb02      	cbnz	r2, 801222c <_dtoa_r+0xa7c>
 80121ea:	4601      	mov	r1, r0
 80121ec:	4658      	mov	r0, fp
 80121ee:	f000 ff41 	bl	8013074 <__mcmp>
 80121f2:	9b08      	ldr	r3, [sp, #32]
 80121f4:	4602      	mov	r2, r0
 80121f6:	4629      	mov	r1, r5
 80121f8:	4620      	mov	r0, r4
 80121fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80121fe:	f000 fcb1 	bl	8012b64 <_Bfree>
 8012202:	9b05      	ldr	r3, [sp, #20]
 8012204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012206:	9d01      	ldr	r5, [sp, #4]
 8012208:	ea43 0102 	orr.w	r1, r3, r2
 801220c:	9b06      	ldr	r3, [sp, #24]
 801220e:	430b      	orrs	r3, r1
 8012210:	9b08      	ldr	r3, [sp, #32]
 8012212:	d10d      	bne.n	8012230 <_dtoa_r+0xa80>
 8012214:	2b39      	cmp	r3, #57	; 0x39
 8012216:	d029      	beq.n	801226c <_dtoa_r+0xabc>
 8012218:	f1b9 0f00 	cmp.w	r9, #0
 801221c:	dd01      	ble.n	8012222 <_dtoa_r+0xa72>
 801221e:	9b04      	ldr	r3, [sp, #16]
 8012220:	3331      	adds	r3, #49	; 0x31
 8012222:	9a02      	ldr	r2, [sp, #8]
 8012224:	7013      	strb	r3, [r2, #0]
 8012226:	e774      	b.n	8012112 <_dtoa_r+0x962>
 8012228:	4638      	mov	r0, r7
 801222a:	e7b9      	b.n	80121a0 <_dtoa_r+0x9f0>
 801222c:	2201      	movs	r2, #1
 801222e:	e7e2      	b.n	80121f6 <_dtoa_r+0xa46>
 8012230:	f1b9 0f00 	cmp.w	r9, #0
 8012234:	db06      	blt.n	8012244 <_dtoa_r+0xa94>
 8012236:	9905      	ldr	r1, [sp, #20]
 8012238:	ea41 0909 	orr.w	r9, r1, r9
 801223c:	9906      	ldr	r1, [sp, #24]
 801223e:	ea59 0101 	orrs.w	r1, r9, r1
 8012242:	d120      	bne.n	8012286 <_dtoa_r+0xad6>
 8012244:	2a00      	cmp	r2, #0
 8012246:	ddec      	ble.n	8012222 <_dtoa_r+0xa72>
 8012248:	4659      	mov	r1, fp
 801224a:	2201      	movs	r2, #1
 801224c:	4620      	mov	r0, r4
 801224e:	9301      	str	r3, [sp, #4]
 8012250:	f000 fea4 	bl	8012f9c <__lshift>
 8012254:	4631      	mov	r1, r6
 8012256:	4683      	mov	fp, r0
 8012258:	f000 ff0c 	bl	8013074 <__mcmp>
 801225c:	2800      	cmp	r0, #0
 801225e:	9b01      	ldr	r3, [sp, #4]
 8012260:	dc02      	bgt.n	8012268 <_dtoa_r+0xab8>
 8012262:	d1de      	bne.n	8012222 <_dtoa_r+0xa72>
 8012264:	07da      	lsls	r2, r3, #31
 8012266:	d5dc      	bpl.n	8012222 <_dtoa_r+0xa72>
 8012268:	2b39      	cmp	r3, #57	; 0x39
 801226a:	d1d8      	bne.n	801221e <_dtoa_r+0xa6e>
 801226c:	9a02      	ldr	r2, [sp, #8]
 801226e:	2339      	movs	r3, #57	; 0x39
 8012270:	7013      	strb	r3, [r2, #0]
 8012272:	462b      	mov	r3, r5
 8012274:	461d      	mov	r5, r3
 8012276:	3b01      	subs	r3, #1
 8012278:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801227c:	2a39      	cmp	r2, #57	; 0x39
 801227e:	d050      	beq.n	8012322 <_dtoa_r+0xb72>
 8012280:	3201      	adds	r2, #1
 8012282:	701a      	strb	r2, [r3, #0]
 8012284:	e745      	b.n	8012112 <_dtoa_r+0x962>
 8012286:	2a00      	cmp	r2, #0
 8012288:	dd03      	ble.n	8012292 <_dtoa_r+0xae2>
 801228a:	2b39      	cmp	r3, #57	; 0x39
 801228c:	d0ee      	beq.n	801226c <_dtoa_r+0xabc>
 801228e:	3301      	adds	r3, #1
 8012290:	e7c7      	b.n	8012222 <_dtoa_r+0xa72>
 8012292:	9a01      	ldr	r2, [sp, #4]
 8012294:	9907      	ldr	r1, [sp, #28]
 8012296:	f802 3c01 	strb.w	r3, [r2, #-1]
 801229a:	428a      	cmp	r2, r1
 801229c:	d02a      	beq.n	80122f4 <_dtoa_r+0xb44>
 801229e:	4659      	mov	r1, fp
 80122a0:	2300      	movs	r3, #0
 80122a2:	220a      	movs	r2, #10
 80122a4:	4620      	mov	r0, r4
 80122a6:	f000 fc7f 	bl	8012ba8 <__multadd>
 80122aa:	45b8      	cmp	r8, r7
 80122ac:	4683      	mov	fp, r0
 80122ae:	f04f 0300 	mov.w	r3, #0
 80122b2:	f04f 020a 	mov.w	r2, #10
 80122b6:	4641      	mov	r1, r8
 80122b8:	4620      	mov	r0, r4
 80122ba:	d107      	bne.n	80122cc <_dtoa_r+0xb1c>
 80122bc:	f000 fc74 	bl	8012ba8 <__multadd>
 80122c0:	4680      	mov	r8, r0
 80122c2:	4607      	mov	r7, r0
 80122c4:	9b01      	ldr	r3, [sp, #4]
 80122c6:	3301      	adds	r3, #1
 80122c8:	9301      	str	r3, [sp, #4]
 80122ca:	e775      	b.n	80121b8 <_dtoa_r+0xa08>
 80122cc:	f000 fc6c 	bl	8012ba8 <__multadd>
 80122d0:	4639      	mov	r1, r7
 80122d2:	4680      	mov	r8, r0
 80122d4:	2300      	movs	r3, #0
 80122d6:	220a      	movs	r2, #10
 80122d8:	4620      	mov	r0, r4
 80122da:	f000 fc65 	bl	8012ba8 <__multadd>
 80122de:	4607      	mov	r7, r0
 80122e0:	e7f0      	b.n	80122c4 <_dtoa_r+0xb14>
 80122e2:	f1b9 0f00 	cmp.w	r9, #0
 80122e6:	9a00      	ldr	r2, [sp, #0]
 80122e8:	bfcc      	ite	gt
 80122ea:	464d      	movgt	r5, r9
 80122ec:	2501      	movle	r5, #1
 80122ee:	4415      	add	r5, r2
 80122f0:	f04f 0800 	mov.w	r8, #0
 80122f4:	4659      	mov	r1, fp
 80122f6:	2201      	movs	r2, #1
 80122f8:	4620      	mov	r0, r4
 80122fa:	9301      	str	r3, [sp, #4]
 80122fc:	f000 fe4e 	bl	8012f9c <__lshift>
 8012300:	4631      	mov	r1, r6
 8012302:	4683      	mov	fp, r0
 8012304:	f000 feb6 	bl	8013074 <__mcmp>
 8012308:	2800      	cmp	r0, #0
 801230a:	dcb2      	bgt.n	8012272 <_dtoa_r+0xac2>
 801230c:	d102      	bne.n	8012314 <_dtoa_r+0xb64>
 801230e:	9b01      	ldr	r3, [sp, #4]
 8012310:	07db      	lsls	r3, r3, #31
 8012312:	d4ae      	bmi.n	8012272 <_dtoa_r+0xac2>
 8012314:	462b      	mov	r3, r5
 8012316:	461d      	mov	r5, r3
 8012318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801231c:	2a30      	cmp	r2, #48	; 0x30
 801231e:	d0fa      	beq.n	8012316 <_dtoa_r+0xb66>
 8012320:	e6f7      	b.n	8012112 <_dtoa_r+0x962>
 8012322:	9a00      	ldr	r2, [sp, #0]
 8012324:	429a      	cmp	r2, r3
 8012326:	d1a5      	bne.n	8012274 <_dtoa_r+0xac4>
 8012328:	f10a 0a01 	add.w	sl, sl, #1
 801232c:	2331      	movs	r3, #49	; 0x31
 801232e:	e779      	b.n	8012224 <_dtoa_r+0xa74>
 8012330:	4b13      	ldr	r3, [pc, #76]	; (8012380 <_dtoa_r+0xbd0>)
 8012332:	f7ff baaf 	b.w	8011894 <_dtoa_r+0xe4>
 8012336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012338:	2b00      	cmp	r3, #0
 801233a:	f47f aa86 	bne.w	801184a <_dtoa_r+0x9a>
 801233e:	4b11      	ldr	r3, [pc, #68]	; (8012384 <_dtoa_r+0xbd4>)
 8012340:	f7ff baa8 	b.w	8011894 <_dtoa_r+0xe4>
 8012344:	f1b9 0f00 	cmp.w	r9, #0
 8012348:	dc03      	bgt.n	8012352 <_dtoa_r+0xba2>
 801234a:	9b05      	ldr	r3, [sp, #20]
 801234c:	2b02      	cmp	r3, #2
 801234e:	f73f aec9 	bgt.w	80120e4 <_dtoa_r+0x934>
 8012352:	9d00      	ldr	r5, [sp, #0]
 8012354:	4631      	mov	r1, r6
 8012356:	4658      	mov	r0, fp
 8012358:	f7ff f99c 	bl	8011694 <quorem>
 801235c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012360:	f805 3b01 	strb.w	r3, [r5], #1
 8012364:	9a00      	ldr	r2, [sp, #0]
 8012366:	1aaa      	subs	r2, r5, r2
 8012368:	4591      	cmp	r9, r2
 801236a:	ddba      	ble.n	80122e2 <_dtoa_r+0xb32>
 801236c:	4659      	mov	r1, fp
 801236e:	2300      	movs	r3, #0
 8012370:	220a      	movs	r2, #10
 8012372:	4620      	mov	r0, r4
 8012374:	f000 fc18 	bl	8012ba8 <__multadd>
 8012378:	4683      	mov	fp, r0
 801237a:	e7eb      	b.n	8012354 <_dtoa_r+0xba4>
 801237c:	080280d1 	.word	0x080280d1
 8012380:	08027e30 	.word	0x08027e30
 8012384:	08028065 	.word	0x08028065

08012388 <fiprintf>:
 8012388:	b40e      	push	{r1, r2, r3}
 801238a:	b503      	push	{r0, r1, lr}
 801238c:	4601      	mov	r1, r0
 801238e:	ab03      	add	r3, sp, #12
 8012390:	4805      	ldr	r0, [pc, #20]	; (80123a8 <fiprintf+0x20>)
 8012392:	f853 2b04 	ldr.w	r2, [r3], #4
 8012396:	6800      	ldr	r0, [r0, #0]
 8012398:	9301      	str	r3, [sp, #4]
 801239a:	f001 fa9d 	bl	80138d8 <_vfiprintf_r>
 801239e:	b002      	add	sp, #8
 80123a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80123a4:	b003      	add	sp, #12
 80123a6:	4770      	bx	lr
 80123a8:	20000040 	.word	0x20000040

080123ac <rshift>:
 80123ac:	6903      	ldr	r3, [r0, #16]
 80123ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80123b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80123ba:	f100 0414 	add.w	r4, r0, #20
 80123be:	dd45      	ble.n	801244c <rshift+0xa0>
 80123c0:	f011 011f 	ands.w	r1, r1, #31
 80123c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80123c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80123cc:	d10c      	bne.n	80123e8 <rshift+0x3c>
 80123ce:	f100 0710 	add.w	r7, r0, #16
 80123d2:	4629      	mov	r1, r5
 80123d4:	42b1      	cmp	r1, r6
 80123d6:	d334      	bcc.n	8012442 <rshift+0x96>
 80123d8:	1a9b      	subs	r3, r3, r2
 80123da:	009b      	lsls	r3, r3, #2
 80123dc:	1eea      	subs	r2, r5, #3
 80123de:	4296      	cmp	r6, r2
 80123e0:	bf38      	it	cc
 80123e2:	2300      	movcc	r3, #0
 80123e4:	4423      	add	r3, r4
 80123e6:	e015      	b.n	8012414 <rshift+0x68>
 80123e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80123ec:	f1c1 0820 	rsb	r8, r1, #32
 80123f0:	40cf      	lsrs	r7, r1
 80123f2:	f105 0e04 	add.w	lr, r5, #4
 80123f6:	46a1      	mov	r9, r4
 80123f8:	4576      	cmp	r6, lr
 80123fa:	46f4      	mov	ip, lr
 80123fc:	d815      	bhi.n	801242a <rshift+0x7e>
 80123fe:	1a9b      	subs	r3, r3, r2
 8012400:	009a      	lsls	r2, r3, #2
 8012402:	3a04      	subs	r2, #4
 8012404:	3501      	adds	r5, #1
 8012406:	42ae      	cmp	r6, r5
 8012408:	bf38      	it	cc
 801240a:	2200      	movcc	r2, #0
 801240c:	18a3      	adds	r3, r4, r2
 801240e:	50a7      	str	r7, [r4, r2]
 8012410:	b107      	cbz	r7, 8012414 <rshift+0x68>
 8012412:	3304      	adds	r3, #4
 8012414:	1b1a      	subs	r2, r3, r4
 8012416:	42a3      	cmp	r3, r4
 8012418:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801241c:	bf08      	it	eq
 801241e:	2300      	moveq	r3, #0
 8012420:	6102      	str	r2, [r0, #16]
 8012422:	bf08      	it	eq
 8012424:	6143      	streq	r3, [r0, #20]
 8012426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801242a:	f8dc c000 	ldr.w	ip, [ip]
 801242e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012432:	ea4c 0707 	orr.w	r7, ip, r7
 8012436:	f849 7b04 	str.w	r7, [r9], #4
 801243a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801243e:	40cf      	lsrs	r7, r1
 8012440:	e7da      	b.n	80123f8 <rshift+0x4c>
 8012442:	f851 cb04 	ldr.w	ip, [r1], #4
 8012446:	f847 cf04 	str.w	ip, [r7, #4]!
 801244a:	e7c3      	b.n	80123d4 <rshift+0x28>
 801244c:	4623      	mov	r3, r4
 801244e:	e7e1      	b.n	8012414 <rshift+0x68>

08012450 <__hexdig_fun>:
 8012450:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012454:	2b09      	cmp	r3, #9
 8012456:	d802      	bhi.n	801245e <__hexdig_fun+0xe>
 8012458:	3820      	subs	r0, #32
 801245a:	b2c0      	uxtb	r0, r0
 801245c:	4770      	bx	lr
 801245e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012462:	2b05      	cmp	r3, #5
 8012464:	d801      	bhi.n	801246a <__hexdig_fun+0x1a>
 8012466:	3847      	subs	r0, #71	; 0x47
 8012468:	e7f7      	b.n	801245a <__hexdig_fun+0xa>
 801246a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801246e:	2b05      	cmp	r3, #5
 8012470:	d801      	bhi.n	8012476 <__hexdig_fun+0x26>
 8012472:	3827      	subs	r0, #39	; 0x27
 8012474:	e7f1      	b.n	801245a <__hexdig_fun+0xa>
 8012476:	2000      	movs	r0, #0
 8012478:	4770      	bx	lr
	...

0801247c <__gethex>:
 801247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012480:	ed2d 8b02 	vpush	{d8}
 8012484:	b089      	sub	sp, #36	; 0x24
 8012486:	ee08 0a10 	vmov	s16, r0
 801248a:	9304      	str	r3, [sp, #16]
 801248c:	4bbc      	ldr	r3, [pc, #752]	; (8012780 <__gethex+0x304>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	9301      	str	r3, [sp, #4]
 8012492:	4618      	mov	r0, r3
 8012494:	468b      	mov	fp, r1
 8012496:	4690      	mov	r8, r2
 8012498:	f7ed feac 	bl	80001f4 <strlen>
 801249c:	9b01      	ldr	r3, [sp, #4]
 801249e:	f8db 2000 	ldr.w	r2, [fp]
 80124a2:	4403      	add	r3, r0
 80124a4:	4682      	mov	sl, r0
 80124a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80124aa:	9305      	str	r3, [sp, #20]
 80124ac:	1c93      	adds	r3, r2, #2
 80124ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80124b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80124b6:	32fe      	adds	r2, #254	; 0xfe
 80124b8:	18d1      	adds	r1, r2, r3
 80124ba:	461f      	mov	r7, r3
 80124bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80124c0:	9100      	str	r1, [sp, #0]
 80124c2:	2830      	cmp	r0, #48	; 0x30
 80124c4:	d0f8      	beq.n	80124b8 <__gethex+0x3c>
 80124c6:	f7ff ffc3 	bl	8012450 <__hexdig_fun>
 80124ca:	4604      	mov	r4, r0
 80124cc:	2800      	cmp	r0, #0
 80124ce:	d13a      	bne.n	8012546 <__gethex+0xca>
 80124d0:	9901      	ldr	r1, [sp, #4]
 80124d2:	4652      	mov	r2, sl
 80124d4:	4638      	mov	r0, r7
 80124d6:	f001 fb47 	bl	8013b68 <strncmp>
 80124da:	4605      	mov	r5, r0
 80124dc:	2800      	cmp	r0, #0
 80124de:	d168      	bne.n	80125b2 <__gethex+0x136>
 80124e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80124e4:	eb07 060a 	add.w	r6, r7, sl
 80124e8:	f7ff ffb2 	bl	8012450 <__hexdig_fun>
 80124ec:	2800      	cmp	r0, #0
 80124ee:	d062      	beq.n	80125b6 <__gethex+0x13a>
 80124f0:	4633      	mov	r3, r6
 80124f2:	7818      	ldrb	r0, [r3, #0]
 80124f4:	2830      	cmp	r0, #48	; 0x30
 80124f6:	461f      	mov	r7, r3
 80124f8:	f103 0301 	add.w	r3, r3, #1
 80124fc:	d0f9      	beq.n	80124f2 <__gethex+0x76>
 80124fe:	f7ff ffa7 	bl	8012450 <__hexdig_fun>
 8012502:	2301      	movs	r3, #1
 8012504:	fab0 f480 	clz	r4, r0
 8012508:	0964      	lsrs	r4, r4, #5
 801250a:	4635      	mov	r5, r6
 801250c:	9300      	str	r3, [sp, #0]
 801250e:	463a      	mov	r2, r7
 8012510:	4616      	mov	r6, r2
 8012512:	3201      	adds	r2, #1
 8012514:	7830      	ldrb	r0, [r6, #0]
 8012516:	f7ff ff9b 	bl	8012450 <__hexdig_fun>
 801251a:	2800      	cmp	r0, #0
 801251c:	d1f8      	bne.n	8012510 <__gethex+0x94>
 801251e:	9901      	ldr	r1, [sp, #4]
 8012520:	4652      	mov	r2, sl
 8012522:	4630      	mov	r0, r6
 8012524:	f001 fb20 	bl	8013b68 <strncmp>
 8012528:	b980      	cbnz	r0, 801254c <__gethex+0xd0>
 801252a:	b94d      	cbnz	r5, 8012540 <__gethex+0xc4>
 801252c:	eb06 050a 	add.w	r5, r6, sl
 8012530:	462a      	mov	r2, r5
 8012532:	4616      	mov	r6, r2
 8012534:	3201      	adds	r2, #1
 8012536:	7830      	ldrb	r0, [r6, #0]
 8012538:	f7ff ff8a 	bl	8012450 <__hexdig_fun>
 801253c:	2800      	cmp	r0, #0
 801253e:	d1f8      	bne.n	8012532 <__gethex+0xb6>
 8012540:	1bad      	subs	r5, r5, r6
 8012542:	00ad      	lsls	r5, r5, #2
 8012544:	e004      	b.n	8012550 <__gethex+0xd4>
 8012546:	2400      	movs	r4, #0
 8012548:	4625      	mov	r5, r4
 801254a:	e7e0      	b.n	801250e <__gethex+0x92>
 801254c:	2d00      	cmp	r5, #0
 801254e:	d1f7      	bne.n	8012540 <__gethex+0xc4>
 8012550:	7833      	ldrb	r3, [r6, #0]
 8012552:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012556:	2b50      	cmp	r3, #80	; 0x50
 8012558:	d13b      	bne.n	80125d2 <__gethex+0x156>
 801255a:	7873      	ldrb	r3, [r6, #1]
 801255c:	2b2b      	cmp	r3, #43	; 0x2b
 801255e:	d02c      	beq.n	80125ba <__gethex+0x13e>
 8012560:	2b2d      	cmp	r3, #45	; 0x2d
 8012562:	d02e      	beq.n	80125c2 <__gethex+0x146>
 8012564:	1c71      	adds	r1, r6, #1
 8012566:	f04f 0900 	mov.w	r9, #0
 801256a:	7808      	ldrb	r0, [r1, #0]
 801256c:	f7ff ff70 	bl	8012450 <__hexdig_fun>
 8012570:	1e43      	subs	r3, r0, #1
 8012572:	b2db      	uxtb	r3, r3
 8012574:	2b18      	cmp	r3, #24
 8012576:	d82c      	bhi.n	80125d2 <__gethex+0x156>
 8012578:	f1a0 0210 	sub.w	r2, r0, #16
 801257c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012580:	f7ff ff66 	bl	8012450 <__hexdig_fun>
 8012584:	1e43      	subs	r3, r0, #1
 8012586:	b2db      	uxtb	r3, r3
 8012588:	2b18      	cmp	r3, #24
 801258a:	d91d      	bls.n	80125c8 <__gethex+0x14c>
 801258c:	f1b9 0f00 	cmp.w	r9, #0
 8012590:	d000      	beq.n	8012594 <__gethex+0x118>
 8012592:	4252      	negs	r2, r2
 8012594:	4415      	add	r5, r2
 8012596:	f8cb 1000 	str.w	r1, [fp]
 801259a:	b1e4      	cbz	r4, 80125d6 <__gethex+0x15a>
 801259c:	9b00      	ldr	r3, [sp, #0]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	bf14      	ite	ne
 80125a2:	2700      	movne	r7, #0
 80125a4:	2706      	moveq	r7, #6
 80125a6:	4638      	mov	r0, r7
 80125a8:	b009      	add	sp, #36	; 0x24
 80125aa:	ecbd 8b02 	vpop	{d8}
 80125ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b2:	463e      	mov	r6, r7
 80125b4:	4625      	mov	r5, r4
 80125b6:	2401      	movs	r4, #1
 80125b8:	e7ca      	b.n	8012550 <__gethex+0xd4>
 80125ba:	f04f 0900 	mov.w	r9, #0
 80125be:	1cb1      	adds	r1, r6, #2
 80125c0:	e7d3      	b.n	801256a <__gethex+0xee>
 80125c2:	f04f 0901 	mov.w	r9, #1
 80125c6:	e7fa      	b.n	80125be <__gethex+0x142>
 80125c8:	230a      	movs	r3, #10
 80125ca:	fb03 0202 	mla	r2, r3, r2, r0
 80125ce:	3a10      	subs	r2, #16
 80125d0:	e7d4      	b.n	801257c <__gethex+0x100>
 80125d2:	4631      	mov	r1, r6
 80125d4:	e7df      	b.n	8012596 <__gethex+0x11a>
 80125d6:	1bf3      	subs	r3, r6, r7
 80125d8:	3b01      	subs	r3, #1
 80125da:	4621      	mov	r1, r4
 80125dc:	2b07      	cmp	r3, #7
 80125de:	dc0b      	bgt.n	80125f8 <__gethex+0x17c>
 80125e0:	ee18 0a10 	vmov	r0, s16
 80125e4:	f000 fa7e 	bl	8012ae4 <_Balloc>
 80125e8:	4604      	mov	r4, r0
 80125ea:	b940      	cbnz	r0, 80125fe <__gethex+0x182>
 80125ec:	4b65      	ldr	r3, [pc, #404]	; (8012784 <__gethex+0x308>)
 80125ee:	4602      	mov	r2, r0
 80125f0:	21de      	movs	r1, #222	; 0xde
 80125f2:	4865      	ldr	r0, [pc, #404]	; (8012788 <__gethex+0x30c>)
 80125f4:	f7ff f830 	bl	8011658 <__assert_func>
 80125f8:	3101      	adds	r1, #1
 80125fa:	105b      	asrs	r3, r3, #1
 80125fc:	e7ee      	b.n	80125dc <__gethex+0x160>
 80125fe:	f100 0914 	add.w	r9, r0, #20
 8012602:	f04f 0b00 	mov.w	fp, #0
 8012606:	f1ca 0301 	rsb	r3, sl, #1
 801260a:	f8cd 9008 	str.w	r9, [sp, #8]
 801260e:	f8cd b000 	str.w	fp, [sp]
 8012612:	9306      	str	r3, [sp, #24]
 8012614:	42b7      	cmp	r7, r6
 8012616:	d340      	bcc.n	801269a <__gethex+0x21e>
 8012618:	9802      	ldr	r0, [sp, #8]
 801261a:	9b00      	ldr	r3, [sp, #0]
 801261c:	f840 3b04 	str.w	r3, [r0], #4
 8012620:	eba0 0009 	sub.w	r0, r0, r9
 8012624:	1080      	asrs	r0, r0, #2
 8012626:	0146      	lsls	r6, r0, #5
 8012628:	6120      	str	r0, [r4, #16]
 801262a:	4618      	mov	r0, r3
 801262c:	f000 fb50 	bl	8012cd0 <__hi0bits>
 8012630:	1a30      	subs	r0, r6, r0
 8012632:	f8d8 6000 	ldr.w	r6, [r8]
 8012636:	42b0      	cmp	r0, r6
 8012638:	dd63      	ble.n	8012702 <__gethex+0x286>
 801263a:	1b87      	subs	r7, r0, r6
 801263c:	4639      	mov	r1, r7
 801263e:	4620      	mov	r0, r4
 8012640:	f000 feea 	bl	8013418 <__any_on>
 8012644:	4682      	mov	sl, r0
 8012646:	b1a8      	cbz	r0, 8012674 <__gethex+0x1f8>
 8012648:	1e7b      	subs	r3, r7, #1
 801264a:	1159      	asrs	r1, r3, #5
 801264c:	f003 021f 	and.w	r2, r3, #31
 8012650:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012654:	f04f 0a01 	mov.w	sl, #1
 8012658:	fa0a f202 	lsl.w	r2, sl, r2
 801265c:	420a      	tst	r2, r1
 801265e:	d009      	beq.n	8012674 <__gethex+0x1f8>
 8012660:	4553      	cmp	r3, sl
 8012662:	dd05      	ble.n	8012670 <__gethex+0x1f4>
 8012664:	1eb9      	subs	r1, r7, #2
 8012666:	4620      	mov	r0, r4
 8012668:	f000 fed6 	bl	8013418 <__any_on>
 801266c:	2800      	cmp	r0, #0
 801266e:	d145      	bne.n	80126fc <__gethex+0x280>
 8012670:	f04f 0a02 	mov.w	sl, #2
 8012674:	4639      	mov	r1, r7
 8012676:	4620      	mov	r0, r4
 8012678:	f7ff fe98 	bl	80123ac <rshift>
 801267c:	443d      	add	r5, r7
 801267e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012682:	42ab      	cmp	r3, r5
 8012684:	da4c      	bge.n	8012720 <__gethex+0x2a4>
 8012686:	ee18 0a10 	vmov	r0, s16
 801268a:	4621      	mov	r1, r4
 801268c:	f000 fa6a 	bl	8012b64 <_Bfree>
 8012690:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012692:	2300      	movs	r3, #0
 8012694:	6013      	str	r3, [r2, #0]
 8012696:	27a3      	movs	r7, #163	; 0xa3
 8012698:	e785      	b.n	80125a6 <__gethex+0x12a>
 801269a:	1e73      	subs	r3, r6, #1
 801269c:	9a05      	ldr	r2, [sp, #20]
 801269e:	9303      	str	r3, [sp, #12]
 80126a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80126a4:	4293      	cmp	r3, r2
 80126a6:	d019      	beq.n	80126dc <__gethex+0x260>
 80126a8:	f1bb 0f20 	cmp.w	fp, #32
 80126ac:	d107      	bne.n	80126be <__gethex+0x242>
 80126ae:	9b02      	ldr	r3, [sp, #8]
 80126b0:	9a00      	ldr	r2, [sp, #0]
 80126b2:	f843 2b04 	str.w	r2, [r3], #4
 80126b6:	9302      	str	r3, [sp, #8]
 80126b8:	2300      	movs	r3, #0
 80126ba:	9300      	str	r3, [sp, #0]
 80126bc:	469b      	mov	fp, r3
 80126be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80126c2:	f7ff fec5 	bl	8012450 <__hexdig_fun>
 80126c6:	9b00      	ldr	r3, [sp, #0]
 80126c8:	f000 000f 	and.w	r0, r0, #15
 80126cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80126d0:	4303      	orrs	r3, r0
 80126d2:	9300      	str	r3, [sp, #0]
 80126d4:	f10b 0b04 	add.w	fp, fp, #4
 80126d8:	9b03      	ldr	r3, [sp, #12]
 80126da:	e00d      	b.n	80126f8 <__gethex+0x27c>
 80126dc:	9b03      	ldr	r3, [sp, #12]
 80126de:	9a06      	ldr	r2, [sp, #24]
 80126e0:	4413      	add	r3, r2
 80126e2:	42bb      	cmp	r3, r7
 80126e4:	d3e0      	bcc.n	80126a8 <__gethex+0x22c>
 80126e6:	4618      	mov	r0, r3
 80126e8:	9901      	ldr	r1, [sp, #4]
 80126ea:	9307      	str	r3, [sp, #28]
 80126ec:	4652      	mov	r2, sl
 80126ee:	f001 fa3b 	bl	8013b68 <strncmp>
 80126f2:	9b07      	ldr	r3, [sp, #28]
 80126f4:	2800      	cmp	r0, #0
 80126f6:	d1d7      	bne.n	80126a8 <__gethex+0x22c>
 80126f8:	461e      	mov	r6, r3
 80126fa:	e78b      	b.n	8012614 <__gethex+0x198>
 80126fc:	f04f 0a03 	mov.w	sl, #3
 8012700:	e7b8      	b.n	8012674 <__gethex+0x1f8>
 8012702:	da0a      	bge.n	801271a <__gethex+0x29e>
 8012704:	1a37      	subs	r7, r6, r0
 8012706:	4621      	mov	r1, r4
 8012708:	ee18 0a10 	vmov	r0, s16
 801270c:	463a      	mov	r2, r7
 801270e:	f000 fc45 	bl	8012f9c <__lshift>
 8012712:	1bed      	subs	r5, r5, r7
 8012714:	4604      	mov	r4, r0
 8012716:	f100 0914 	add.w	r9, r0, #20
 801271a:	f04f 0a00 	mov.w	sl, #0
 801271e:	e7ae      	b.n	801267e <__gethex+0x202>
 8012720:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012724:	42a8      	cmp	r0, r5
 8012726:	dd72      	ble.n	801280e <__gethex+0x392>
 8012728:	1b45      	subs	r5, r0, r5
 801272a:	42ae      	cmp	r6, r5
 801272c:	dc36      	bgt.n	801279c <__gethex+0x320>
 801272e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012732:	2b02      	cmp	r3, #2
 8012734:	d02a      	beq.n	801278c <__gethex+0x310>
 8012736:	2b03      	cmp	r3, #3
 8012738:	d02c      	beq.n	8012794 <__gethex+0x318>
 801273a:	2b01      	cmp	r3, #1
 801273c:	d115      	bne.n	801276a <__gethex+0x2ee>
 801273e:	42ae      	cmp	r6, r5
 8012740:	d113      	bne.n	801276a <__gethex+0x2ee>
 8012742:	2e01      	cmp	r6, #1
 8012744:	d10b      	bne.n	801275e <__gethex+0x2e2>
 8012746:	9a04      	ldr	r2, [sp, #16]
 8012748:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801274c:	6013      	str	r3, [r2, #0]
 801274e:	2301      	movs	r3, #1
 8012750:	6123      	str	r3, [r4, #16]
 8012752:	f8c9 3000 	str.w	r3, [r9]
 8012756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012758:	2762      	movs	r7, #98	; 0x62
 801275a:	601c      	str	r4, [r3, #0]
 801275c:	e723      	b.n	80125a6 <__gethex+0x12a>
 801275e:	1e71      	subs	r1, r6, #1
 8012760:	4620      	mov	r0, r4
 8012762:	f000 fe59 	bl	8013418 <__any_on>
 8012766:	2800      	cmp	r0, #0
 8012768:	d1ed      	bne.n	8012746 <__gethex+0x2ca>
 801276a:	ee18 0a10 	vmov	r0, s16
 801276e:	4621      	mov	r1, r4
 8012770:	f000 f9f8 	bl	8012b64 <_Bfree>
 8012774:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012776:	2300      	movs	r3, #0
 8012778:	6013      	str	r3, [r2, #0]
 801277a:	2750      	movs	r7, #80	; 0x50
 801277c:	e713      	b.n	80125a6 <__gethex+0x12a>
 801277e:	bf00      	nop
 8012780:	0802814c 	.word	0x0802814c
 8012784:	080280d1 	.word	0x080280d1
 8012788:	080280e2 	.word	0x080280e2
 801278c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801278e:	2b00      	cmp	r3, #0
 8012790:	d1eb      	bne.n	801276a <__gethex+0x2ee>
 8012792:	e7d8      	b.n	8012746 <__gethex+0x2ca>
 8012794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012796:	2b00      	cmp	r3, #0
 8012798:	d1d5      	bne.n	8012746 <__gethex+0x2ca>
 801279a:	e7e6      	b.n	801276a <__gethex+0x2ee>
 801279c:	1e6f      	subs	r7, r5, #1
 801279e:	f1ba 0f00 	cmp.w	sl, #0
 80127a2:	d131      	bne.n	8012808 <__gethex+0x38c>
 80127a4:	b127      	cbz	r7, 80127b0 <__gethex+0x334>
 80127a6:	4639      	mov	r1, r7
 80127a8:	4620      	mov	r0, r4
 80127aa:	f000 fe35 	bl	8013418 <__any_on>
 80127ae:	4682      	mov	sl, r0
 80127b0:	117b      	asrs	r3, r7, #5
 80127b2:	2101      	movs	r1, #1
 80127b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80127b8:	f007 071f 	and.w	r7, r7, #31
 80127bc:	fa01 f707 	lsl.w	r7, r1, r7
 80127c0:	421f      	tst	r7, r3
 80127c2:	4629      	mov	r1, r5
 80127c4:	4620      	mov	r0, r4
 80127c6:	bf18      	it	ne
 80127c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80127cc:	1b76      	subs	r6, r6, r5
 80127ce:	f7ff fded 	bl	80123ac <rshift>
 80127d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80127d6:	2702      	movs	r7, #2
 80127d8:	f1ba 0f00 	cmp.w	sl, #0
 80127dc:	d048      	beq.n	8012870 <__gethex+0x3f4>
 80127de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80127e2:	2b02      	cmp	r3, #2
 80127e4:	d015      	beq.n	8012812 <__gethex+0x396>
 80127e6:	2b03      	cmp	r3, #3
 80127e8:	d017      	beq.n	801281a <__gethex+0x39e>
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	d109      	bne.n	8012802 <__gethex+0x386>
 80127ee:	f01a 0f02 	tst.w	sl, #2
 80127f2:	d006      	beq.n	8012802 <__gethex+0x386>
 80127f4:	f8d9 0000 	ldr.w	r0, [r9]
 80127f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80127fc:	f01a 0f01 	tst.w	sl, #1
 8012800:	d10e      	bne.n	8012820 <__gethex+0x3a4>
 8012802:	f047 0710 	orr.w	r7, r7, #16
 8012806:	e033      	b.n	8012870 <__gethex+0x3f4>
 8012808:	f04f 0a01 	mov.w	sl, #1
 801280c:	e7d0      	b.n	80127b0 <__gethex+0x334>
 801280e:	2701      	movs	r7, #1
 8012810:	e7e2      	b.n	80127d8 <__gethex+0x35c>
 8012812:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012814:	f1c3 0301 	rsb	r3, r3, #1
 8012818:	9315      	str	r3, [sp, #84]	; 0x54
 801281a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801281c:	2b00      	cmp	r3, #0
 801281e:	d0f0      	beq.n	8012802 <__gethex+0x386>
 8012820:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012824:	f104 0314 	add.w	r3, r4, #20
 8012828:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801282c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012830:	f04f 0c00 	mov.w	ip, #0
 8012834:	4618      	mov	r0, r3
 8012836:	f853 2b04 	ldr.w	r2, [r3], #4
 801283a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801283e:	d01c      	beq.n	801287a <__gethex+0x3fe>
 8012840:	3201      	adds	r2, #1
 8012842:	6002      	str	r2, [r0, #0]
 8012844:	2f02      	cmp	r7, #2
 8012846:	f104 0314 	add.w	r3, r4, #20
 801284a:	d13f      	bne.n	80128cc <__gethex+0x450>
 801284c:	f8d8 2000 	ldr.w	r2, [r8]
 8012850:	3a01      	subs	r2, #1
 8012852:	42b2      	cmp	r2, r6
 8012854:	d10a      	bne.n	801286c <__gethex+0x3f0>
 8012856:	1171      	asrs	r1, r6, #5
 8012858:	2201      	movs	r2, #1
 801285a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801285e:	f006 061f 	and.w	r6, r6, #31
 8012862:	fa02 f606 	lsl.w	r6, r2, r6
 8012866:	421e      	tst	r6, r3
 8012868:	bf18      	it	ne
 801286a:	4617      	movne	r7, r2
 801286c:	f047 0720 	orr.w	r7, r7, #32
 8012870:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012872:	601c      	str	r4, [r3, #0]
 8012874:	9b04      	ldr	r3, [sp, #16]
 8012876:	601d      	str	r5, [r3, #0]
 8012878:	e695      	b.n	80125a6 <__gethex+0x12a>
 801287a:	4299      	cmp	r1, r3
 801287c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012880:	d8d8      	bhi.n	8012834 <__gethex+0x3b8>
 8012882:	68a3      	ldr	r3, [r4, #8]
 8012884:	459b      	cmp	fp, r3
 8012886:	db19      	blt.n	80128bc <__gethex+0x440>
 8012888:	6861      	ldr	r1, [r4, #4]
 801288a:	ee18 0a10 	vmov	r0, s16
 801288e:	3101      	adds	r1, #1
 8012890:	f000 f928 	bl	8012ae4 <_Balloc>
 8012894:	4681      	mov	r9, r0
 8012896:	b918      	cbnz	r0, 80128a0 <__gethex+0x424>
 8012898:	4b1a      	ldr	r3, [pc, #104]	; (8012904 <__gethex+0x488>)
 801289a:	4602      	mov	r2, r0
 801289c:	2184      	movs	r1, #132	; 0x84
 801289e:	e6a8      	b.n	80125f2 <__gethex+0x176>
 80128a0:	6922      	ldr	r2, [r4, #16]
 80128a2:	3202      	adds	r2, #2
 80128a4:	f104 010c 	add.w	r1, r4, #12
 80128a8:	0092      	lsls	r2, r2, #2
 80128aa:	300c      	adds	r0, #12
 80128ac:	f000 f90c 	bl	8012ac8 <memcpy>
 80128b0:	4621      	mov	r1, r4
 80128b2:	ee18 0a10 	vmov	r0, s16
 80128b6:	f000 f955 	bl	8012b64 <_Bfree>
 80128ba:	464c      	mov	r4, r9
 80128bc:	6923      	ldr	r3, [r4, #16]
 80128be:	1c5a      	adds	r2, r3, #1
 80128c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80128c4:	6122      	str	r2, [r4, #16]
 80128c6:	2201      	movs	r2, #1
 80128c8:	615a      	str	r2, [r3, #20]
 80128ca:	e7bb      	b.n	8012844 <__gethex+0x3c8>
 80128cc:	6922      	ldr	r2, [r4, #16]
 80128ce:	455a      	cmp	r2, fp
 80128d0:	dd0b      	ble.n	80128ea <__gethex+0x46e>
 80128d2:	2101      	movs	r1, #1
 80128d4:	4620      	mov	r0, r4
 80128d6:	f7ff fd69 	bl	80123ac <rshift>
 80128da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80128de:	3501      	adds	r5, #1
 80128e0:	42ab      	cmp	r3, r5
 80128e2:	f6ff aed0 	blt.w	8012686 <__gethex+0x20a>
 80128e6:	2701      	movs	r7, #1
 80128e8:	e7c0      	b.n	801286c <__gethex+0x3f0>
 80128ea:	f016 061f 	ands.w	r6, r6, #31
 80128ee:	d0fa      	beq.n	80128e6 <__gethex+0x46a>
 80128f0:	449a      	add	sl, r3
 80128f2:	f1c6 0620 	rsb	r6, r6, #32
 80128f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80128fa:	f000 f9e9 	bl	8012cd0 <__hi0bits>
 80128fe:	42b0      	cmp	r0, r6
 8012900:	dbe7      	blt.n	80128d2 <__gethex+0x456>
 8012902:	e7f0      	b.n	80128e6 <__gethex+0x46a>
 8012904:	080280d1 	.word	0x080280d1

08012908 <L_shift>:
 8012908:	f1c2 0208 	rsb	r2, r2, #8
 801290c:	0092      	lsls	r2, r2, #2
 801290e:	b570      	push	{r4, r5, r6, lr}
 8012910:	f1c2 0620 	rsb	r6, r2, #32
 8012914:	6843      	ldr	r3, [r0, #4]
 8012916:	6804      	ldr	r4, [r0, #0]
 8012918:	fa03 f506 	lsl.w	r5, r3, r6
 801291c:	432c      	orrs	r4, r5
 801291e:	40d3      	lsrs	r3, r2
 8012920:	6004      	str	r4, [r0, #0]
 8012922:	f840 3f04 	str.w	r3, [r0, #4]!
 8012926:	4288      	cmp	r0, r1
 8012928:	d3f4      	bcc.n	8012914 <L_shift+0xc>
 801292a:	bd70      	pop	{r4, r5, r6, pc}

0801292c <__match>:
 801292c:	b530      	push	{r4, r5, lr}
 801292e:	6803      	ldr	r3, [r0, #0]
 8012930:	3301      	adds	r3, #1
 8012932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012936:	b914      	cbnz	r4, 801293e <__match+0x12>
 8012938:	6003      	str	r3, [r0, #0]
 801293a:	2001      	movs	r0, #1
 801293c:	bd30      	pop	{r4, r5, pc}
 801293e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012942:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012946:	2d19      	cmp	r5, #25
 8012948:	bf98      	it	ls
 801294a:	3220      	addls	r2, #32
 801294c:	42a2      	cmp	r2, r4
 801294e:	d0f0      	beq.n	8012932 <__match+0x6>
 8012950:	2000      	movs	r0, #0
 8012952:	e7f3      	b.n	801293c <__match+0x10>

08012954 <__hexnan>:
 8012954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012958:	680b      	ldr	r3, [r1, #0]
 801295a:	6801      	ldr	r1, [r0, #0]
 801295c:	115e      	asrs	r6, r3, #5
 801295e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012962:	f013 031f 	ands.w	r3, r3, #31
 8012966:	b087      	sub	sp, #28
 8012968:	bf18      	it	ne
 801296a:	3604      	addne	r6, #4
 801296c:	2500      	movs	r5, #0
 801296e:	1f37      	subs	r7, r6, #4
 8012970:	4682      	mov	sl, r0
 8012972:	4690      	mov	r8, r2
 8012974:	9301      	str	r3, [sp, #4]
 8012976:	f846 5c04 	str.w	r5, [r6, #-4]
 801297a:	46b9      	mov	r9, r7
 801297c:	463c      	mov	r4, r7
 801297e:	9502      	str	r5, [sp, #8]
 8012980:	46ab      	mov	fp, r5
 8012982:	784a      	ldrb	r2, [r1, #1]
 8012984:	1c4b      	adds	r3, r1, #1
 8012986:	9303      	str	r3, [sp, #12]
 8012988:	b342      	cbz	r2, 80129dc <__hexnan+0x88>
 801298a:	4610      	mov	r0, r2
 801298c:	9105      	str	r1, [sp, #20]
 801298e:	9204      	str	r2, [sp, #16]
 8012990:	f7ff fd5e 	bl	8012450 <__hexdig_fun>
 8012994:	2800      	cmp	r0, #0
 8012996:	d14f      	bne.n	8012a38 <__hexnan+0xe4>
 8012998:	9a04      	ldr	r2, [sp, #16]
 801299a:	9905      	ldr	r1, [sp, #20]
 801299c:	2a20      	cmp	r2, #32
 801299e:	d818      	bhi.n	80129d2 <__hexnan+0x7e>
 80129a0:	9b02      	ldr	r3, [sp, #8]
 80129a2:	459b      	cmp	fp, r3
 80129a4:	dd13      	ble.n	80129ce <__hexnan+0x7a>
 80129a6:	454c      	cmp	r4, r9
 80129a8:	d206      	bcs.n	80129b8 <__hexnan+0x64>
 80129aa:	2d07      	cmp	r5, #7
 80129ac:	dc04      	bgt.n	80129b8 <__hexnan+0x64>
 80129ae:	462a      	mov	r2, r5
 80129b0:	4649      	mov	r1, r9
 80129b2:	4620      	mov	r0, r4
 80129b4:	f7ff ffa8 	bl	8012908 <L_shift>
 80129b8:	4544      	cmp	r4, r8
 80129ba:	d950      	bls.n	8012a5e <__hexnan+0x10a>
 80129bc:	2300      	movs	r3, #0
 80129be:	f1a4 0904 	sub.w	r9, r4, #4
 80129c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80129c6:	f8cd b008 	str.w	fp, [sp, #8]
 80129ca:	464c      	mov	r4, r9
 80129cc:	461d      	mov	r5, r3
 80129ce:	9903      	ldr	r1, [sp, #12]
 80129d0:	e7d7      	b.n	8012982 <__hexnan+0x2e>
 80129d2:	2a29      	cmp	r2, #41	; 0x29
 80129d4:	d156      	bne.n	8012a84 <__hexnan+0x130>
 80129d6:	3102      	adds	r1, #2
 80129d8:	f8ca 1000 	str.w	r1, [sl]
 80129dc:	f1bb 0f00 	cmp.w	fp, #0
 80129e0:	d050      	beq.n	8012a84 <__hexnan+0x130>
 80129e2:	454c      	cmp	r4, r9
 80129e4:	d206      	bcs.n	80129f4 <__hexnan+0xa0>
 80129e6:	2d07      	cmp	r5, #7
 80129e8:	dc04      	bgt.n	80129f4 <__hexnan+0xa0>
 80129ea:	462a      	mov	r2, r5
 80129ec:	4649      	mov	r1, r9
 80129ee:	4620      	mov	r0, r4
 80129f0:	f7ff ff8a 	bl	8012908 <L_shift>
 80129f4:	4544      	cmp	r4, r8
 80129f6:	d934      	bls.n	8012a62 <__hexnan+0x10e>
 80129f8:	f1a8 0204 	sub.w	r2, r8, #4
 80129fc:	4623      	mov	r3, r4
 80129fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8012a02:	f842 1f04 	str.w	r1, [r2, #4]!
 8012a06:	429f      	cmp	r7, r3
 8012a08:	d2f9      	bcs.n	80129fe <__hexnan+0xaa>
 8012a0a:	1b3b      	subs	r3, r7, r4
 8012a0c:	f023 0303 	bic.w	r3, r3, #3
 8012a10:	3304      	adds	r3, #4
 8012a12:	3401      	adds	r4, #1
 8012a14:	3e03      	subs	r6, #3
 8012a16:	42b4      	cmp	r4, r6
 8012a18:	bf88      	it	hi
 8012a1a:	2304      	movhi	r3, #4
 8012a1c:	4443      	add	r3, r8
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f843 2b04 	str.w	r2, [r3], #4
 8012a24:	429f      	cmp	r7, r3
 8012a26:	d2fb      	bcs.n	8012a20 <__hexnan+0xcc>
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	b91b      	cbnz	r3, 8012a34 <__hexnan+0xe0>
 8012a2c:	4547      	cmp	r7, r8
 8012a2e:	d127      	bne.n	8012a80 <__hexnan+0x12c>
 8012a30:	2301      	movs	r3, #1
 8012a32:	603b      	str	r3, [r7, #0]
 8012a34:	2005      	movs	r0, #5
 8012a36:	e026      	b.n	8012a86 <__hexnan+0x132>
 8012a38:	3501      	adds	r5, #1
 8012a3a:	2d08      	cmp	r5, #8
 8012a3c:	f10b 0b01 	add.w	fp, fp, #1
 8012a40:	dd06      	ble.n	8012a50 <__hexnan+0xfc>
 8012a42:	4544      	cmp	r4, r8
 8012a44:	d9c3      	bls.n	80129ce <__hexnan+0x7a>
 8012a46:	2300      	movs	r3, #0
 8012a48:	f844 3c04 	str.w	r3, [r4, #-4]
 8012a4c:	2501      	movs	r5, #1
 8012a4e:	3c04      	subs	r4, #4
 8012a50:	6822      	ldr	r2, [r4, #0]
 8012a52:	f000 000f 	and.w	r0, r0, #15
 8012a56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012a5a:	6022      	str	r2, [r4, #0]
 8012a5c:	e7b7      	b.n	80129ce <__hexnan+0x7a>
 8012a5e:	2508      	movs	r5, #8
 8012a60:	e7b5      	b.n	80129ce <__hexnan+0x7a>
 8012a62:	9b01      	ldr	r3, [sp, #4]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d0df      	beq.n	8012a28 <__hexnan+0xd4>
 8012a68:	f04f 32ff 	mov.w	r2, #4294967295
 8012a6c:	f1c3 0320 	rsb	r3, r3, #32
 8012a70:	fa22 f303 	lsr.w	r3, r2, r3
 8012a74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012a78:	401a      	ands	r2, r3
 8012a7a:	f846 2c04 	str.w	r2, [r6, #-4]
 8012a7e:	e7d3      	b.n	8012a28 <__hexnan+0xd4>
 8012a80:	3f04      	subs	r7, #4
 8012a82:	e7d1      	b.n	8012a28 <__hexnan+0xd4>
 8012a84:	2004      	movs	r0, #4
 8012a86:	b007      	add	sp, #28
 8012a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012a8c <_localeconv_r>:
 8012a8c:	4800      	ldr	r0, [pc, #0]	; (8012a90 <_localeconv_r+0x4>)
 8012a8e:	4770      	bx	lr
 8012a90:	20000198 	.word	0x20000198

08012a94 <malloc>:
 8012a94:	4b02      	ldr	r3, [pc, #8]	; (8012aa0 <malloc+0xc>)
 8012a96:	4601      	mov	r1, r0
 8012a98:	6818      	ldr	r0, [r3, #0]
 8012a9a:	f000 bd3d 	b.w	8013518 <_malloc_r>
 8012a9e:	bf00      	nop
 8012aa0:	20000040 	.word	0x20000040

08012aa4 <__ascii_mbtowc>:
 8012aa4:	b082      	sub	sp, #8
 8012aa6:	b901      	cbnz	r1, 8012aaa <__ascii_mbtowc+0x6>
 8012aa8:	a901      	add	r1, sp, #4
 8012aaa:	b142      	cbz	r2, 8012abe <__ascii_mbtowc+0x1a>
 8012aac:	b14b      	cbz	r3, 8012ac2 <__ascii_mbtowc+0x1e>
 8012aae:	7813      	ldrb	r3, [r2, #0]
 8012ab0:	600b      	str	r3, [r1, #0]
 8012ab2:	7812      	ldrb	r2, [r2, #0]
 8012ab4:	1e10      	subs	r0, r2, #0
 8012ab6:	bf18      	it	ne
 8012ab8:	2001      	movne	r0, #1
 8012aba:	b002      	add	sp, #8
 8012abc:	4770      	bx	lr
 8012abe:	4610      	mov	r0, r2
 8012ac0:	e7fb      	b.n	8012aba <__ascii_mbtowc+0x16>
 8012ac2:	f06f 0001 	mvn.w	r0, #1
 8012ac6:	e7f8      	b.n	8012aba <__ascii_mbtowc+0x16>

08012ac8 <memcpy>:
 8012ac8:	440a      	add	r2, r1
 8012aca:	4291      	cmp	r1, r2
 8012acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ad0:	d100      	bne.n	8012ad4 <memcpy+0xc>
 8012ad2:	4770      	bx	lr
 8012ad4:	b510      	push	{r4, lr}
 8012ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ade:	4291      	cmp	r1, r2
 8012ae0:	d1f9      	bne.n	8012ad6 <memcpy+0xe>
 8012ae2:	bd10      	pop	{r4, pc}

08012ae4 <_Balloc>:
 8012ae4:	b570      	push	{r4, r5, r6, lr}
 8012ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012ae8:	4604      	mov	r4, r0
 8012aea:	460d      	mov	r5, r1
 8012aec:	b976      	cbnz	r6, 8012b0c <_Balloc+0x28>
 8012aee:	2010      	movs	r0, #16
 8012af0:	f7ff ffd0 	bl	8012a94 <malloc>
 8012af4:	4602      	mov	r2, r0
 8012af6:	6260      	str	r0, [r4, #36]	; 0x24
 8012af8:	b920      	cbnz	r0, 8012b04 <_Balloc+0x20>
 8012afa:	4b18      	ldr	r3, [pc, #96]	; (8012b5c <_Balloc+0x78>)
 8012afc:	4818      	ldr	r0, [pc, #96]	; (8012b60 <_Balloc+0x7c>)
 8012afe:	2166      	movs	r1, #102	; 0x66
 8012b00:	f7fe fdaa 	bl	8011658 <__assert_func>
 8012b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b08:	6006      	str	r6, [r0, #0]
 8012b0a:	60c6      	str	r6, [r0, #12]
 8012b0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012b0e:	68f3      	ldr	r3, [r6, #12]
 8012b10:	b183      	cbz	r3, 8012b34 <_Balloc+0x50>
 8012b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b14:	68db      	ldr	r3, [r3, #12]
 8012b16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012b1a:	b9b8      	cbnz	r0, 8012b4c <_Balloc+0x68>
 8012b1c:	2101      	movs	r1, #1
 8012b1e:	fa01 f605 	lsl.w	r6, r1, r5
 8012b22:	1d72      	adds	r2, r6, #5
 8012b24:	0092      	lsls	r2, r2, #2
 8012b26:	4620      	mov	r0, r4
 8012b28:	f000 fc97 	bl	801345a <_calloc_r>
 8012b2c:	b160      	cbz	r0, 8012b48 <_Balloc+0x64>
 8012b2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012b32:	e00e      	b.n	8012b52 <_Balloc+0x6e>
 8012b34:	2221      	movs	r2, #33	; 0x21
 8012b36:	2104      	movs	r1, #4
 8012b38:	4620      	mov	r0, r4
 8012b3a:	f000 fc8e 	bl	801345a <_calloc_r>
 8012b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b40:	60f0      	str	r0, [r6, #12]
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d1e4      	bne.n	8012b12 <_Balloc+0x2e>
 8012b48:	2000      	movs	r0, #0
 8012b4a:	bd70      	pop	{r4, r5, r6, pc}
 8012b4c:	6802      	ldr	r2, [r0, #0]
 8012b4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012b52:	2300      	movs	r3, #0
 8012b54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012b58:	e7f7      	b.n	8012b4a <_Balloc+0x66>
 8012b5a:	bf00      	nop
 8012b5c:	08027eb0 	.word	0x08027eb0
 8012b60:	08028160 	.word	0x08028160

08012b64 <_Bfree>:
 8012b64:	b570      	push	{r4, r5, r6, lr}
 8012b66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012b68:	4605      	mov	r5, r0
 8012b6a:	460c      	mov	r4, r1
 8012b6c:	b976      	cbnz	r6, 8012b8c <_Bfree+0x28>
 8012b6e:	2010      	movs	r0, #16
 8012b70:	f7ff ff90 	bl	8012a94 <malloc>
 8012b74:	4602      	mov	r2, r0
 8012b76:	6268      	str	r0, [r5, #36]	; 0x24
 8012b78:	b920      	cbnz	r0, 8012b84 <_Bfree+0x20>
 8012b7a:	4b09      	ldr	r3, [pc, #36]	; (8012ba0 <_Bfree+0x3c>)
 8012b7c:	4809      	ldr	r0, [pc, #36]	; (8012ba4 <_Bfree+0x40>)
 8012b7e:	218a      	movs	r1, #138	; 0x8a
 8012b80:	f7fe fd6a 	bl	8011658 <__assert_func>
 8012b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b88:	6006      	str	r6, [r0, #0]
 8012b8a:	60c6      	str	r6, [r0, #12]
 8012b8c:	b13c      	cbz	r4, 8012b9e <_Bfree+0x3a>
 8012b8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012b90:	6862      	ldr	r2, [r4, #4]
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012b98:	6021      	str	r1, [r4, #0]
 8012b9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012b9e:	bd70      	pop	{r4, r5, r6, pc}
 8012ba0:	08027eb0 	.word	0x08027eb0
 8012ba4:	08028160 	.word	0x08028160

08012ba8 <__multadd>:
 8012ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bac:	690e      	ldr	r6, [r1, #16]
 8012bae:	4607      	mov	r7, r0
 8012bb0:	4698      	mov	r8, r3
 8012bb2:	460c      	mov	r4, r1
 8012bb4:	f101 0014 	add.w	r0, r1, #20
 8012bb8:	2300      	movs	r3, #0
 8012bba:	6805      	ldr	r5, [r0, #0]
 8012bbc:	b2a9      	uxth	r1, r5
 8012bbe:	fb02 8101 	mla	r1, r2, r1, r8
 8012bc2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012bc6:	0c2d      	lsrs	r5, r5, #16
 8012bc8:	fb02 c505 	mla	r5, r2, r5, ip
 8012bcc:	b289      	uxth	r1, r1
 8012bce:	3301      	adds	r3, #1
 8012bd0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012bd4:	429e      	cmp	r6, r3
 8012bd6:	f840 1b04 	str.w	r1, [r0], #4
 8012bda:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012bde:	dcec      	bgt.n	8012bba <__multadd+0x12>
 8012be0:	f1b8 0f00 	cmp.w	r8, #0
 8012be4:	d022      	beq.n	8012c2c <__multadd+0x84>
 8012be6:	68a3      	ldr	r3, [r4, #8]
 8012be8:	42b3      	cmp	r3, r6
 8012bea:	dc19      	bgt.n	8012c20 <__multadd+0x78>
 8012bec:	6861      	ldr	r1, [r4, #4]
 8012bee:	4638      	mov	r0, r7
 8012bf0:	3101      	adds	r1, #1
 8012bf2:	f7ff ff77 	bl	8012ae4 <_Balloc>
 8012bf6:	4605      	mov	r5, r0
 8012bf8:	b928      	cbnz	r0, 8012c06 <__multadd+0x5e>
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	4b0d      	ldr	r3, [pc, #52]	; (8012c34 <__multadd+0x8c>)
 8012bfe:	480e      	ldr	r0, [pc, #56]	; (8012c38 <__multadd+0x90>)
 8012c00:	21b5      	movs	r1, #181	; 0xb5
 8012c02:	f7fe fd29 	bl	8011658 <__assert_func>
 8012c06:	6922      	ldr	r2, [r4, #16]
 8012c08:	3202      	adds	r2, #2
 8012c0a:	f104 010c 	add.w	r1, r4, #12
 8012c0e:	0092      	lsls	r2, r2, #2
 8012c10:	300c      	adds	r0, #12
 8012c12:	f7ff ff59 	bl	8012ac8 <memcpy>
 8012c16:	4621      	mov	r1, r4
 8012c18:	4638      	mov	r0, r7
 8012c1a:	f7ff ffa3 	bl	8012b64 <_Bfree>
 8012c1e:	462c      	mov	r4, r5
 8012c20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012c24:	3601      	adds	r6, #1
 8012c26:	f8c3 8014 	str.w	r8, [r3, #20]
 8012c2a:	6126      	str	r6, [r4, #16]
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c32:	bf00      	nop
 8012c34:	080280d1 	.word	0x080280d1
 8012c38:	08028160 	.word	0x08028160

08012c3c <__s2b>:
 8012c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c40:	460c      	mov	r4, r1
 8012c42:	4615      	mov	r5, r2
 8012c44:	461f      	mov	r7, r3
 8012c46:	2209      	movs	r2, #9
 8012c48:	3308      	adds	r3, #8
 8012c4a:	4606      	mov	r6, r0
 8012c4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012c50:	2100      	movs	r1, #0
 8012c52:	2201      	movs	r2, #1
 8012c54:	429a      	cmp	r2, r3
 8012c56:	db09      	blt.n	8012c6c <__s2b+0x30>
 8012c58:	4630      	mov	r0, r6
 8012c5a:	f7ff ff43 	bl	8012ae4 <_Balloc>
 8012c5e:	b940      	cbnz	r0, 8012c72 <__s2b+0x36>
 8012c60:	4602      	mov	r2, r0
 8012c62:	4b19      	ldr	r3, [pc, #100]	; (8012cc8 <__s2b+0x8c>)
 8012c64:	4819      	ldr	r0, [pc, #100]	; (8012ccc <__s2b+0x90>)
 8012c66:	21ce      	movs	r1, #206	; 0xce
 8012c68:	f7fe fcf6 	bl	8011658 <__assert_func>
 8012c6c:	0052      	lsls	r2, r2, #1
 8012c6e:	3101      	adds	r1, #1
 8012c70:	e7f0      	b.n	8012c54 <__s2b+0x18>
 8012c72:	9b08      	ldr	r3, [sp, #32]
 8012c74:	6143      	str	r3, [r0, #20]
 8012c76:	2d09      	cmp	r5, #9
 8012c78:	f04f 0301 	mov.w	r3, #1
 8012c7c:	6103      	str	r3, [r0, #16]
 8012c7e:	dd16      	ble.n	8012cae <__s2b+0x72>
 8012c80:	f104 0909 	add.w	r9, r4, #9
 8012c84:	46c8      	mov	r8, r9
 8012c86:	442c      	add	r4, r5
 8012c88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012c8c:	4601      	mov	r1, r0
 8012c8e:	3b30      	subs	r3, #48	; 0x30
 8012c90:	220a      	movs	r2, #10
 8012c92:	4630      	mov	r0, r6
 8012c94:	f7ff ff88 	bl	8012ba8 <__multadd>
 8012c98:	45a0      	cmp	r8, r4
 8012c9a:	d1f5      	bne.n	8012c88 <__s2b+0x4c>
 8012c9c:	f1a5 0408 	sub.w	r4, r5, #8
 8012ca0:	444c      	add	r4, r9
 8012ca2:	1b2d      	subs	r5, r5, r4
 8012ca4:	1963      	adds	r3, r4, r5
 8012ca6:	42bb      	cmp	r3, r7
 8012ca8:	db04      	blt.n	8012cb4 <__s2b+0x78>
 8012caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cae:	340a      	adds	r4, #10
 8012cb0:	2509      	movs	r5, #9
 8012cb2:	e7f6      	b.n	8012ca2 <__s2b+0x66>
 8012cb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012cb8:	4601      	mov	r1, r0
 8012cba:	3b30      	subs	r3, #48	; 0x30
 8012cbc:	220a      	movs	r2, #10
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7ff ff72 	bl	8012ba8 <__multadd>
 8012cc4:	e7ee      	b.n	8012ca4 <__s2b+0x68>
 8012cc6:	bf00      	nop
 8012cc8:	080280d1 	.word	0x080280d1
 8012ccc:	08028160 	.word	0x08028160

08012cd0 <__hi0bits>:
 8012cd0:	0c03      	lsrs	r3, r0, #16
 8012cd2:	041b      	lsls	r3, r3, #16
 8012cd4:	b9d3      	cbnz	r3, 8012d0c <__hi0bits+0x3c>
 8012cd6:	0400      	lsls	r0, r0, #16
 8012cd8:	2310      	movs	r3, #16
 8012cda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012cde:	bf04      	itt	eq
 8012ce0:	0200      	lsleq	r0, r0, #8
 8012ce2:	3308      	addeq	r3, #8
 8012ce4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ce8:	bf04      	itt	eq
 8012cea:	0100      	lsleq	r0, r0, #4
 8012cec:	3304      	addeq	r3, #4
 8012cee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012cf2:	bf04      	itt	eq
 8012cf4:	0080      	lsleq	r0, r0, #2
 8012cf6:	3302      	addeq	r3, #2
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	db05      	blt.n	8012d08 <__hi0bits+0x38>
 8012cfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012d00:	f103 0301 	add.w	r3, r3, #1
 8012d04:	bf08      	it	eq
 8012d06:	2320      	moveq	r3, #32
 8012d08:	4618      	mov	r0, r3
 8012d0a:	4770      	bx	lr
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	e7e4      	b.n	8012cda <__hi0bits+0xa>

08012d10 <__lo0bits>:
 8012d10:	6803      	ldr	r3, [r0, #0]
 8012d12:	f013 0207 	ands.w	r2, r3, #7
 8012d16:	4601      	mov	r1, r0
 8012d18:	d00b      	beq.n	8012d32 <__lo0bits+0x22>
 8012d1a:	07da      	lsls	r2, r3, #31
 8012d1c:	d424      	bmi.n	8012d68 <__lo0bits+0x58>
 8012d1e:	0798      	lsls	r0, r3, #30
 8012d20:	bf49      	itett	mi
 8012d22:	085b      	lsrmi	r3, r3, #1
 8012d24:	089b      	lsrpl	r3, r3, #2
 8012d26:	2001      	movmi	r0, #1
 8012d28:	600b      	strmi	r3, [r1, #0]
 8012d2a:	bf5c      	itt	pl
 8012d2c:	600b      	strpl	r3, [r1, #0]
 8012d2e:	2002      	movpl	r0, #2
 8012d30:	4770      	bx	lr
 8012d32:	b298      	uxth	r0, r3
 8012d34:	b9b0      	cbnz	r0, 8012d64 <__lo0bits+0x54>
 8012d36:	0c1b      	lsrs	r3, r3, #16
 8012d38:	2010      	movs	r0, #16
 8012d3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012d3e:	bf04      	itt	eq
 8012d40:	0a1b      	lsreq	r3, r3, #8
 8012d42:	3008      	addeq	r0, #8
 8012d44:	071a      	lsls	r2, r3, #28
 8012d46:	bf04      	itt	eq
 8012d48:	091b      	lsreq	r3, r3, #4
 8012d4a:	3004      	addeq	r0, #4
 8012d4c:	079a      	lsls	r2, r3, #30
 8012d4e:	bf04      	itt	eq
 8012d50:	089b      	lsreq	r3, r3, #2
 8012d52:	3002      	addeq	r0, #2
 8012d54:	07da      	lsls	r2, r3, #31
 8012d56:	d403      	bmi.n	8012d60 <__lo0bits+0x50>
 8012d58:	085b      	lsrs	r3, r3, #1
 8012d5a:	f100 0001 	add.w	r0, r0, #1
 8012d5e:	d005      	beq.n	8012d6c <__lo0bits+0x5c>
 8012d60:	600b      	str	r3, [r1, #0]
 8012d62:	4770      	bx	lr
 8012d64:	4610      	mov	r0, r2
 8012d66:	e7e8      	b.n	8012d3a <__lo0bits+0x2a>
 8012d68:	2000      	movs	r0, #0
 8012d6a:	4770      	bx	lr
 8012d6c:	2020      	movs	r0, #32
 8012d6e:	4770      	bx	lr

08012d70 <__i2b>:
 8012d70:	b510      	push	{r4, lr}
 8012d72:	460c      	mov	r4, r1
 8012d74:	2101      	movs	r1, #1
 8012d76:	f7ff feb5 	bl	8012ae4 <_Balloc>
 8012d7a:	4602      	mov	r2, r0
 8012d7c:	b928      	cbnz	r0, 8012d8a <__i2b+0x1a>
 8012d7e:	4b05      	ldr	r3, [pc, #20]	; (8012d94 <__i2b+0x24>)
 8012d80:	4805      	ldr	r0, [pc, #20]	; (8012d98 <__i2b+0x28>)
 8012d82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012d86:	f7fe fc67 	bl	8011658 <__assert_func>
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	6144      	str	r4, [r0, #20]
 8012d8e:	6103      	str	r3, [r0, #16]
 8012d90:	bd10      	pop	{r4, pc}
 8012d92:	bf00      	nop
 8012d94:	080280d1 	.word	0x080280d1
 8012d98:	08028160 	.word	0x08028160

08012d9c <__multiply>:
 8012d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da0:	4614      	mov	r4, r2
 8012da2:	690a      	ldr	r2, [r1, #16]
 8012da4:	6923      	ldr	r3, [r4, #16]
 8012da6:	429a      	cmp	r2, r3
 8012da8:	bfb8      	it	lt
 8012daa:	460b      	movlt	r3, r1
 8012dac:	460d      	mov	r5, r1
 8012dae:	bfbc      	itt	lt
 8012db0:	4625      	movlt	r5, r4
 8012db2:	461c      	movlt	r4, r3
 8012db4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012db8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012dbc:	68ab      	ldr	r3, [r5, #8]
 8012dbe:	6869      	ldr	r1, [r5, #4]
 8012dc0:	eb0a 0709 	add.w	r7, sl, r9
 8012dc4:	42bb      	cmp	r3, r7
 8012dc6:	b085      	sub	sp, #20
 8012dc8:	bfb8      	it	lt
 8012dca:	3101      	addlt	r1, #1
 8012dcc:	f7ff fe8a 	bl	8012ae4 <_Balloc>
 8012dd0:	b930      	cbnz	r0, 8012de0 <__multiply+0x44>
 8012dd2:	4602      	mov	r2, r0
 8012dd4:	4b42      	ldr	r3, [pc, #264]	; (8012ee0 <__multiply+0x144>)
 8012dd6:	4843      	ldr	r0, [pc, #268]	; (8012ee4 <__multiply+0x148>)
 8012dd8:	f240 115d 	movw	r1, #349	; 0x15d
 8012ddc:	f7fe fc3c 	bl	8011658 <__assert_func>
 8012de0:	f100 0614 	add.w	r6, r0, #20
 8012de4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012de8:	4633      	mov	r3, r6
 8012dea:	2200      	movs	r2, #0
 8012dec:	4543      	cmp	r3, r8
 8012dee:	d31e      	bcc.n	8012e2e <__multiply+0x92>
 8012df0:	f105 0c14 	add.w	ip, r5, #20
 8012df4:	f104 0314 	add.w	r3, r4, #20
 8012df8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012dfc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012e00:	9202      	str	r2, [sp, #8]
 8012e02:	ebac 0205 	sub.w	r2, ip, r5
 8012e06:	3a15      	subs	r2, #21
 8012e08:	f022 0203 	bic.w	r2, r2, #3
 8012e0c:	3204      	adds	r2, #4
 8012e0e:	f105 0115 	add.w	r1, r5, #21
 8012e12:	458c      	cmp	ip, r1
 8012e14:	bf38      	it	cc
 8012e16:	2204      	movcc	r2, #4
 8012e18:	9201      	str	r2, [sp, #4]
 8012e1a:	9a02      	ldr	r2, [sp, #8]
 8012e1c:	9303      	str	r3, [sp, #12]
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d808      	bhi.n	8012e34 <__multiply+0x98>
 8012e22:	2f00      	cmp	r7, #0
 8012e24:	dc55      	bgt.n	8012ed2 <__multiply+0x136>
 8012e26:	6107      	str	r7, [r0, #16]
 8012e28:	b005      	add	sp, #20
 8012e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e2e:	f843 2b04 	str.w	r2, [r3], #4
 8012e32:	e7db      	b.n	8012dec <__multiply+0x50>
 8012e34:	f8b3 a000 	ldrh.w	sl, [r3]
 8012e38:	f1ba 0f00 	cmp.w	sl, #0
 8012e3c:	d020      	beq.n	8012e80 <__multiply+0xe4>
 8012e3e:	f105 0e14 	add.w	lr, r5, #20
 8012e42:	46b1      	mov	r9, r6
 8012e44:	2200      	movs	r2, #0
 8012e46:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012e4a:	f8d9 b000 	ldr.w	fp, [r9]
 8012e4e:	b2a1      	uxth	r1, r4
 8012e50:	fa1f fb8b 	uxth.w	fp, fp
 8012e54:	fb0a b101 	mla	r1, sl, r1, fp
 8012e58:	4411      	add	r1, r2
 8012e5a:	f8d9 2000 	ldr.w	r2, [r9]
 8012e5e:	0c24      	lsrs	r4, r4, #16
 8012e60:	0c12      	lsrs	r2, r2, #16
 8012e62:	fb0a 2404 	mla	r4, sl, r4, r2
 8012e66:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012e6a:	b289      	uxth	r1, r1
 8012e6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012e70:	45f4      	cmp	ip, lr
 8012e72:	f849 1b04 	str.w	r1, [r9], #4
 8012e76:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012e7a:	d8e4      	bhi.n	8012e46 <__multiply+0xaa>
 8012e7c:	9901      	ldr	r1, [sp, #4]
 8012e7e:	5072      	str	r2, [r6, r1]
 8012e80:	9a03      	ldr	r2, [sp, #12]
 8012e82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012e86:	3304      	adds	r3, #4
 8012e88:	f1b9 0f00 	cmp.w	r9, #0
 8012e8c:	d01f      	beq.n	8012ece <__multiply+0x132>
 8012e8e:	6834      	ldr	r4, [r6, #0]
 8012e90:	f105 0114 	add.w	r1, r5, #20
 8012e94:	46b6      	mov	lr, r6
 8012e96:	f04f 0a00 	mov.w	sl, #0
 8012e9a:	880a      	ldrh	r2, [r1, #0]
 8012e9c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012ea0:	fb09 b202 	mla	r2, r9, r2, fp
 8012ea4:	4492      	add	sl, r2
 8012ea6:	b2a4      	uxth	r4, r4
 8012ea8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012eac:	f84e 4b04 	str.w	r4, [lr], #4
 8012eb0:	f851 4b04 	ldr.w	r4, [r1], #4
 8012eb4:	f8be 2000 	ldrh.w	r2, [lr]
 8012eb8:	0c24      	lsrs	r4, r4, #16
 8012eba:	fb09 2404 	mla	r4, r9, r4, r2
 8012ebe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012ec2:	458c      	cmp	ip, r1
 8012ec4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012ec8:	d8e7      	bhi.n	8012e9a <__multiply+0xfe>
 8012eca:	9a01      	ldr	r2, [sp, #4]
 8012ecc:	50b4      	str	r4, [r6, r2]
 8012ece:	3604      	adds	r6, #4
 8012ed0:	e7a3      	b.n	8012e1a <__multiply+0x7e>
 8012ed2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d1a5      	bne.n	8012e26 <__multiply+0x8a>
 8012eda:	3f01      	subs	r7, #1
 8012edc:	e7a1      	b.n	8012e22 <__multiply+0x86>
 8012ede:	bf00      	nop
 8012ee0:	080280d1 	.word	0x080280d1
 8012ee4:	08028160 	.word	0x08028160

08012ee8 <__pow5mult>:
 8012ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012eec:	4615      	mov	r5, r2
 8012eee:	f012 0203 	ands.w	r2, r2, #3
 8012ef2:	4606      	mov	r6, r0
 8012ef4:	460f      	mov	r7, r1
 8012ef6:	d007      	beq.n	8012f08 <__pow5mult+0x20>
 8012ef8:	4c25      	ldr	r4, [pc, #148]	; (8012f90 <__pow5mult+0xa8>)
 8012efa:	3a01      	subs	r2, #1
 8012efc:	2300      	movs	r3, #0
 8012efe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012f02:	f7ff fe51 	bl	8012ba8 <__multadd>
 8012f06:	4607      	mov	r7, r0
 8012f08:	10ad      	asrs	r5, r5, #2
 8012f0a:	d03d      	beq.n	8012f88 <__pow5mult+0xa0>
 8012f0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012f0e:	b97c      	cbnz	r4, 8012f30 <__pow5mult+0x48>
 8012f10:	2010      	movs	r0, #16
 8012f12:	f7ff fdbf 	bl	8012a94 <malloc>
 8012f16:	4602      	mov	r2, r0
 8012f18:	6270      	str	r0, [r6, #36]	; 0x24
 8012f1a:	b928      	cbnz	r0, 8012f28 <__pow5mult+0x40>
 8012f1c:	4b1d      	ldr	r3, [pc, #116]	; (8012f94 <__pow5mult+0xac>)
 8012f1e:	481e      	ldr	r0, [pc, #120]	; (8012f98 <__pow5mult+0xb0>)
 8012f20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012f24:	f7fe fb98 	bl	8011658 <__assert_func>
 8012f28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012f2c:	6004      	str	r4, [r0, #0]
 8012f2e:	60c4      	str	r4, [r0, #12]
 8012f30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012f34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012f38:	b94c      	cbnz	r4, 8012f4e <__pow5mult+0x66>
 8012f3a:	f240 2171 	movw	r1, #625	; 0x271
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f7ff ff16 	bl	8012d70 <__i2b>
 8012f44:	2300      	movs	r3, #0
 8012f46:	f8c8 0008 	str.w	r0, [r8, #8]
 8012f4a:	4604      	mov	r4, r0
 8012f4c:	6003      	str	r3, [r0, #0]
 8012f4e:	f04f 0900 	mov.w	r9, #0
 8012f52:	07eb      	lsls	r3, r5, #31
 8012f54:	d50a      	bpl.n	8012f6c <__pow5mult+0x84>
 8012f56:	4639      	mov	r1, r7
 8012f58:	4622      	mov	r2, r4
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	f7ff ff1e 	bl	8012d9c <__multiply>
 8012f60:	4639      	mov	r1, r7
 8012f62:	4680      	mov	r8, r0
 8012f64:	4630      	mov	r0, r6
 8012f66:	f7ff fdfd 	bl	8012b64 <_Bfree>
 8012f6a:	4647      	mov	r7, r8
 8012f6c:	106d      	asrs	r5, r5, #1
 8012f6e:	d00b      	beq.n	8012f88 <__pow5mult+0xa0>
 8012f70:	6820      	ldr	r0, [r4, #0]
 8012f72:	b938      	cbnz	r0, 8012f84 <__pow5mult+0x9c>
 8012f74:	4622      	mov	r2, r4
 8012f76:	4621      	mov	r1, r4
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f7ff ff0f 	bl	8012d9c <__multiply>
 8012f7e:	6020      	str	r0, [r4, #0]
 8012f80:	f8c0 9000 	str.w	r9, [r0]
 8012f84:	4604      	mov	r4, r0
 8012f86:	e7e4      	b.n	8012f52 <__pow5mult+0x6a>
 8012f88:	4638      	mov	r0, r7
 8012f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f8e:	bf00      	nop
 8012f90:	080282b0 	.word	0x080282b0
 8012f94:	08027eb0 	.word	0x08027eb0
 8012f98:	08028160 	.word	0x08028160

08012f9c <__lshift>:
 8012f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fa0:	460c      	mov	r4, r1
 8012fa2:	6849      	ldr	r1, [r1, #4]
 8012fa4:	6923      	ldr	r3, [r4, #16]
 8012fa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012faa:	68a3      	ldr	r3, [r4, #8]
 8012fac:	4607      	mov	r7, r0
 8012fae:	4691      	mov	r9, r2
 8012fb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012fb4:	f108 0601 	add.w	r6, r8, #1
 8012fb8:	42b3      	cmp	r3, r6
 8012fba:	db0b      	blt.n	8012fd4 <__lshift+0x38>
 8012fbc:	4638      	mov	r0, r7
 8012fbe:	f7ff fd91 	bl	8012ae4 <_Balloc>
 8012fc2:	4605      	mov	r5, r0
 8012fc4:	b948      	cbnz	r0, 8012fda <__lshift+0x3e>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	4b28      	ldr	r3, [pc, #160]	; (801306c <__lshift+0xd0>)
 8012fca:	4829      	ldr	r0, [pc, #164]	; (8013070 <__lshift+0xd4>)
 8012fcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012fd0:	f7fe fb42 	bl	8011658 <__assert_func>
 8012fd4:	3101      	adds	r1, #1
 8012fd6:	005b      	lsls	r3, r3, #1
 8012fd8:	e7ee      	b.n	8012fb8 <__lshift+0x1c>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	f100 0114 	add.w	r1, r0, #20
 8012fe0:	f100 0210 	add.w	r2, r0, #16
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	4553      	cmp	r3, sl
 8012fe8:	db33      	blt.n	8013052 <__lshift+0xb6>
 8012fea:	6920      	ldr	r0, [r4, #16]
 8012fec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012ff0:	f104 0314 	add.w	r3, r4, #20
 8012ff4:	f019 091f 	ands.w	r9, r9, #31
 8012ff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012ffc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013000:	d02b      	beq.n	801305a <__lshift+0xbe>
 8013002:	f1c9 0e20 	rsb	lr, r9, #32
 8013006:	468a      	mov	sl, r1
 8013008:	2200      	movs	r2, #0
 801300a:	6818      	ldr	r0, [r3, #0]
 801300c:	fa00 f009 	lsl.w	r0, r0, r9
 8013010:	4302      	orrs	r2, r0
 8013012:	f84a 2b04 	str.w	r2, [sl], #4
 8013016:	f853 2b04 	ldr.w	r2, [r3], #4
 801301a:	459c      	cmp	ip, r3
 801301c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013020:	d8f3      	bhi.n	801300a <__lshift+0x6e>
 8013022:	ebac 0304 	sub.w	r3, ip, r4
 8013026:	3b15      	subs	r3, #21
 8013028:	f023 0303 	bic.w	r3, r3, #3
 801302c:	3304      	adds	r3, #4
 801302e:	f104 0015 	add.w	r0, r4, #21
 8013032:	4584      	cmp	ip, r0
 8013034:	bf38      	it	cc
 8013036:	2304      	movcc	r3, #4
 8013038:	50ca      	str	r2, [r1, r3]
 801303a:	b10a      	cbz	r2, 8013040 <__lshift+0xa4>
 801303c:	f108 0602 	add.w	r6, r8, #2
 8013040:	3e01      	subs	r6, #1
 8013042:	4638      	mov	r0, r7
 8013044:	612e      	str	r6, [r5, #16]
 8013046:	4621      	mov	r1, r4
 8013048:	f7ff fd8c 	bl	8012b64 <_Bfree>
 801304c:	4628      	mov	r0, r5
 801304e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013052:	f842 0f04 	str.w	r0, [r2, #4]!
 8013056:	3301      	adds	r3, #1
 8013058:	e7c5      	b.n	8012fe6 <__lshift+0x4a>
 801305a:	3904      	subs	r1, #4
 801305c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013060:	f841 2f04 	str.w	r2, [r1, #4]!
 8013064:	459c      	cmp	ip, r3
 8013066:	d8f9      	bhi.n	801305c <__lshift+0xc0>
 8013068:	e7ea      	b.n	8013040 <__lshift+0xa4>
 801306a:	bf00      	nop
 801306c:	080280d1 	.word	0x080280d1
 8013070:	08028160 	.word	0x08028160

08013074 <__mcmp>:
 8013074:	b530      	push	{r4, r5, lr}
 8013076:	6902      	ldr	r2, [r0, #16]
 8013078:	690c      	ldr	r4, [r1, #16]
 801307a:	1b12      	subs	r2, r2, r4
 801307c:	d10e      	bne.n	801309c <__mcmp+0x28>
 801307e:	f100 0314 	add.w	r3, r0, #20
 8013082:	3114      	adds	r1, #20
 8013084:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013088:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801308c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013090:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013094:	42a5      	cmp	r5, r4
 8013096:	d003      	beq.n	80130a0 <__mcmp+0x2c>
 8013098:	d305      	bcc.n	80130a6 <__mcmp+0x32>
 801309a:	2201      	movs	r2, #1
 801309c:	4610      	mov	r0, r2
 801309e:	bd30      	pop	{r4, r5, pc}
 80130a0:	4283      	cmp	r3, r0
 80130a2:	d3f3      	bcc.n	801308c <__mcmp+0x18>
 80130a4:	e7fa      	b.n	801309c <__mcmp+0x28>
 80130a6:	f04f 32ff 	mov.w	r2, #4294967295
 80130aa:	e7f7      	b.n	801309c <__mcmp+0x28>

080130ac <__mdiff>:
 80130ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130b0:	460c      	mov	r4, r1
 80130b2:	4606      	mov	r6, r0
 80130b4:	4611      	mov	r1, r2
 80130b6:	4620      	mov	r0, r4
 80130b8:	4617      	mov	r7, r2
 80130ba:	f7ff ffdb 	bl	8013074 <__mcmp>
 80130be:	1e05      	subs	r5, r0, #0
 80130c0:	d110      	bne.n	80130e4 <__mdiff+0x38>
 80130c2:	4629      	mov	r1, r5
 80130c4:	4630      	mov	r0, r6
 80130c6:	f7ff fd0d 	bl	8012ae4 <_Balloc>
 80130ca:	b930      	cbnz	r0, 80130da <__mdiff+0x2e>
 80130cc:	4b39      	ldr	r3, [pc, #228]	; (80131b4 <__mdiff+0x108>)
 80130ce:	4602      	mov	r2, r0
 80130d0:	f240 2132 	movw	r1, #562	; 0x232
 80130d4:	4838      	ldr	r0, [pc, #224]	; (80131b8 <__mdiff+0x10c>)
 80130d6:	f7fe fabf 	bl	8011658 <__assert_func>
 80130da:	2301      	movs	r3, #1
 80130dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80130e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130e4:	bfa4      	itt	ge
 80130e6:	463b      	movge	r3, r7
 80130e8:	4627      	movge	r7, r4
 80130ea:	4630      	mov	r0, r6
 80130ec:	6879      	ldr	r1, [r7, #4]
 80130ee:	bfa6      	itte	ge
 80130f0:	461c      	movge	r4, r3
 80130f2:	2500      	movge	r5, #0
 80130f4:	2501      	movlt	r5, #1
 80130f6:	f7ff fcf5 	bl	8012ae4 <_Balloc>
 80130fa:	b920      	cbnz	r0, 8013106 <__mdiff+0x5a>
 80130fc:	4b2d      	ldr	r3, [pc, #180]	; (80131b4 <__mdiff+0x108>)
 80130fe:	4602      	mov	r2, r0
 8013100:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013104:	e7e6      	b.n	80130d4 <__mdiff+0x28>
 8013106:	693e      	ldr	r6, [r7, #16]
 8013108:	60c5      	str	r5, [r0, #12]
 801310a:	6925      	ldr	r5, [r4, #16]
 801310c:	f107 0114 	add.w	r1, r7, #20
 8013110:	f104 0914 	add.w	r9, r4, #20
 8013114:	f100 0e14 	add.w	lr, r0, #20
 8013118:	f107 0210 	add.w	r2, r7, #16
 801311c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013120:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013124:	46f2      	mov	sl, lr
 8013126:	2700      	movs	r7, #0
 8013128:	f859 3b04 	ldr.w	r3, [r9], #4
 801312c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013130:	fa1f f883 	uxth.w	r8, r3
 8013134:	fa17 f78b 	uxtah	r7, r7, fp
 8013138:	0c1b      	lsrs	r3, r3, #16
 801313a:	eba7 0808 	sub.w	r8, r7, r8
 801313e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013142:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013146:	fa1f f888 	uxth.w	r8, r8
 801314a:	141f      	asrs	r7, r3, #16
 801314c:	454d      	cmp	r5, r9
 801314e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013152:	f84a 3b04 	str.w	r3, [sl], #4
 8013156:	d8e7      	bhi.n	8013128 <__mdiff+0x7c>
 8013158:	1b2b      	subs	r3, r5, r4
 801315a:	3b15      	subs	r3, #21
 801315c:	f023 0303 	bic.w	r3, r3, #3
 8013160:	3304      	adds	r3, #4
 8013162:	3415      	adds	r4, #21
 8013164:	42a5      	cmp	r5, r4
 8013166:	bf38      	it	cc
 8013168:	2304      	movcc	r3, #4
 801316a:	4419      	add	r1, r3
 801316c:	4473      	add	r3, lr
 801316e:	469e      	mov	lr, r3
 8013170:	460d      	mov	r5, r1
 8013172:	4565      	cmp	r5, ip
 8013174:	d30e      	bcc.n	8013194 <__mdiff+0xe8>
 8013176:	f10c 0203 	add.w	r2, ip, #3
 801317a:	1a52      	subs	r2, r2, r1
 801317c:	f022 0203 	bic.w	r2, r2, #3
 8013180:	3903      	subs	r1, #3
 8013182:	458c      	cmp	ip, r1
 8013184:	bf38      	it	cc
 8013186:	2200      	movcc	r2, #0
 8013188:	441a      	add	r2, r3
 801318a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801318e:	b17b      	cbz	r3, 80131b0 <__mdiff+0x104>
 8013190:	6106      	str	r6, [r0, #16]
 8013192:	e7a5      	b.n	80130e0 <__mdiff+0x34>
 8013194:	f855 8b04 	ldr.w	r8, [r5], #4
 8013198:	fa17 f488 	uxtah	r4, r7, r8
 801319c:	1422      	asrs	r2, r4, #16
 801319e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80131a2:	b2a4      	uxth	r4, r4
 80131a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80131a8:	f84e 4b04 	str.w	r4, [lr], #4
 80131ac:	1417      	asrs	r7, r2, #16
 80131ae:	e7e0      	b.n	8013172 <__mdiff+0xc6>
 80131b0:	3e01      	subs	r6, #1
 80131b2:	e7ea      	b.n	801318a <__mdiff+0xde>
 80131b4:	080280d1 	.word	0x080280d1
 80131b8:	08028160 	.word	0x08028160

080131bc <__ulp>:
 80131bc:	b082      	sub	sp, #8
 80131be:	ed8d 0b00 	vstr	d0, [sp]
 80131c2:	9b01      	ldr	r3, [sp, #4]
 80131c4:	4912      	ldr	r1, [pc, #72]	; (8013210 <__ulp+0x54>)
 80131c6:	4019      	ands	r1, r3
 80131c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80131cc:	2900      	cmp	r1, #0
 80131ce:	dd05      	ble.n	80131dc <__ulp+0x20>
 80131d0:	2200      	movs	r2, #0
 80131d2:	460b      	mov	r3, r1
 80131d4:	ec43 2b10 	vmov	d0, r2, r3
 80131d8:	b002      	add	sp, #8
 80131da:	4770      	bx	lr
 80131dc:	4249      	negs	r1, r1
 80131de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80131e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80131e6:	f04f 0200 	mov.w	r2, #0
 80131ea:	f04f 0300 	mov.w	r3, #0
 80131ee:	da04      	bge.n	80131fa <__ulp+0x3e>
 80131f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80131f4:	fa41 f300 	asr.w	r3, r1, r0
 80131f8:	e7ec      	b.n	80131d4 <__ulp+0x18>
 80131fa:	f1a0 0114 	sub.w	r1, r0, #20
 80131fe:	291e      	cmp	r1, #30
 8013200:	bfda      	itte	le
 8013202:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013206:	fa20 f101 	lsrle.w	r1, r0, r1
 801320a:	2101      	movgt	r1, #1
 801320c:	460a      	mov	r2, r1
 801320e:	e7e1      	b.n	80131d4 <__ulp+0x18>
 8013210:	7ff00000 	.word	0x7ff00000

08013214 <__b2d>:
 8013214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013216:	6905      	ldr	r5, [r0, #16]
 8013218:	f100 0714 	add.w	r7, r0, #20
 801321c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013220:	1f2e      	subs	r6, r5, #4
 8013222:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013226:	4620      	mov	r0, r4
 8013228:	f7ff fd52 	bl	8012cd0 <__hi0bits>
 801322c:	f1c0 0320 	rsb	r3, r0, #32
 8013230:	280a      	cmp	r0, #10
 8013232:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80132b0 <__b2d+0x9c>
 8013236:	600b      	str	r3, [r1, #0]
 8013238:	dc14      	bgt.n	8013264 <__b2d+0x50>
 801323a:	f1c0 0e0b 	rsb	lr, r0, #11
 801323e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013242:	42b7      	cmp	r7, r6
 8013244:	ea41 030c 	orr.w	r3, r1, ip
 8013248:	bf34      	ite	cc
 801324a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801324e:	2100      	movcs	r1, #0
 8013250:	3015      	adds	r0, #21
 8013252:	fa04 f000 	lsl.w	r0, r4, r0
 8013256:	fa21 f10e 	lsr.w	r1, r1, lr
 801325a:	ea40 0201 	orr.w	r2, r0, r1
 801325e:	ec43 2b10 	vmov	d0, r2, r3
 8013262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013264:	42b7      	cmp	r7, r6
 8013266:	bf3a      	itte	cc
 8013268:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801326c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013270:	2100      	movcs	r1, #0
 8013272:	380b      	subs	r0, #11
 8013274:	d017      	beq.n	80132a6 <__b2d+0x92>
 8013276:	f1c0 0c20 	rsb	ip, r0, #32
 801327a:	fa04 f500 	lsl.w	r5, r4, r0
 801327e:	42be      	cmp	r6, r7
 8013280:	fa21 f40c 	lsr.w	r4, r1, ip
 8013284:	ea45 0504 	orr.w	r5, r5, r4
 8013288:	bf8c      	ite	hi
 801328a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801328e:	2400      	movls	r4, #0
 8013290:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013294:	fa01 f000 	lsl.w	r0, r1, r0
 8013298:	fa24 f40c 	lsr.w	r4, r4, ip
 801329c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80132a0:	ea40 0204 	orr.w	r2, r0, r4
 80132a4:	e7db      	b.n	801325e <__b2d+0x4a>
 80132a6:	ea44 030c 	orr.w	r3, r4, ip
 80132aa:	460a      	mov	r2, r1
 80132ac:	e7d7      	b.n	801325e <__b2d+0x4a>
 80132ae:	bf00      	nop
 80132b0:	3ff00000 	.word	0x3ff00000

080132b4 <__d2b>:
 80132b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80132b8:	4689      	mov	r9, r1
 80132ba:	2101      	movs	r1, #1
 80132bc:	ec57 6b10 	vmov	r6, r7, d0
 80132c0:	4690      	mov	r8, r2
 80132c2:	f7ff fc0f 	bl	8012ae4 <_Balloc>
 80132c6:	4604      	mov	r4, r0
 80132c8:	b930      	cbnz	r0, 80132d8 <__d2b+0x24>
 80132ca:	4602      	mov	r2, r0
 80132cc:	4b25      	ldr	r3, [pc, #148]	; (8013364 <__d2b+0xb0>)
 80132ce:	4826      	ldr	r0, [pc, #152]	; (8013368 <__d2b+0xb4>)
 80132d0:	f240 310a 	movw	r1, #778	; 0x30a
 80132d4:	f7fe f9c0 	bl	8011658 <__assert_func>
 80132d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80132dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80132e0:	bb35      	cbnz	r5, 8013330 <__d2b+0x7c>
 80132e2:	2e00      	cmp	r6, #0
 80132e4:	9301      	str	r3, [sp, #4]
 80132e6:	d028      	beq.n	801333a <__d2b+0x86>
 80132e8:	4668      	mov	r0, sp
 80132ea:	9600      	str	r6, [sp, #0]
 80132ec:	f7ff fd10 	bl	8012d10 <__lo0bits>
 80132f0:	9900      	ldr	r1, [sp, #0]
 80132f2:	b300      	cbz	r0, 8013336 <__d2b+0x82>
 80132f4:	9a01      	ldr	r2, [sp, #4]
 80132f6:	f1c0 0320 	rsb	r3, r0, #32
 80132fa:	fa02 f303 	lsl.w	r3, r2, r3
 80132fe:	430b      	orrs	r3, r1
 8013300:	40c2      	lsrs	r2, r0
 8013302:	6163      	str	r3, [r4, #20]
 8013304:	9201      	str	r2, [sp, #4]
 8013306:	9b01      	ldr	r3, [sp, #4]
 8013308:	61a3      	str	r3, [r4, #24]
 801330a:	2b00      	cmp	r3, #0
 801330c:	bf14      	ite	ne
 801330e:	2202      	movne	r2, #2
 8013310:	2201      	moveq	r2, #1
 8013312:	6122      	str	r2, [r4, #16]
 8013314:	b1d5      	cbz	r5, 801334c <__d2b+0x98>
 8013316:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801331a:	4405      	add	r5, r0
 801331c:	f8c9 5000 	str.w	r5, [r9]
 8013320:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013324:	f8c8 0000 	str.w	r0, [r8]
 8013328:	4620      	mov	r0, r4
 801332a:	b003      	add	sp, #12
 801332c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013334:	e7d5      	b.n	80132e2 <__d2b+0x2e>
 8013336:	6161      	str	r1, [r4, #20]
 8013338:	e7e5      	b.n	8013306 <__d2b+0x52>
 801333a:	a801      	add	r0, sp, #4
 801333c:	f7ff fce8 	bl	8012d10 <__lo0bits>
 8013340:	9b01      	ldr	r3, [sp, #4]
 8013342:	6163      	str	r3, [r4, #20]
 8013344:	2201      	movs	r2, #1
 8013346:	6122      	str	r2, [r4, #16]
 8013348:	3020      	adds	r0, #32
 801334a:	e7e3      	b.n	8013314 <__d2b+0x60>
 801334c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013350:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013354:	f8c9 0000 	str.w	r0, [r9]
 8013358:	6918      	ldr	r0, [r3, #16]
 801335a:	f7ff fcb9 	bl	8012cd0 <__hi0bits>
 801335e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013362:	e7df      	b.n	8013324 <__d2b+0x70>
 8013364:	080280d1 	.word	0x080280d1
 8013368:	08028160 	.word	0x08028160

0801336c <__ratio>:
 801336c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013370:	4688      	mov	r8, r1
 8013372:	4669      	mov	r1, sp
 8013374:	4681      	mov	r9, r0
 8013376:	f7ff ff4d 	bl	8013214 <__b2d>
 801337a:	a901      	add	r1, sp, #4
 801337c:	4640      	mov	r0, r8
 801337e:	ec55 4b10 	vmov	r4, r5, d0
 8013382:	f7ff ff47 	bl	8013214 <__b2d>
 8013386:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801338a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801338e:	eba3 0c02 	sub.w	ip, r3, r2
 8013392:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013396:	1a9b      	subs	r3, r3, r2
 8013398:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801339c:	ec51 0b10 	vmov	r0, r1, d0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	bfd6      	itet	le
 80133a4:	460a      	movle	r2, r1
 80133a6:	462a      	movgt	r2, r5
 80133a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80133ac:	468b      	mov	fp, r1
 80133ae:	462f      	mov	r7, r5
 80133b0:	bfd4      	ite	le
 80133b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80133b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80133ba:	4620      	mov	r0, r4
 80133bc:	ee10 2a10 	vmov	r2, s0
 80133c0:	465b      	mov	r3, fp
 80133c2:	4639      	mov	r1, r7
 80133c4:	f7ed fa5a 	bl	800087c <__aeabi_ddiv>
 80133c8:	ec41 0b10 	vmov	d0, r0, r1
 80133cc:	b003      	add	sp, #12
 80133ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080133d2 <__copybits>:
 80133d2:	3901      	subs	r1, #1
 80133d4:	b570      	push	{r4, r5, r6, lr}
 80133d6:	1149      	asrs	r1, r1, #5
 80133d8:	6914      	ldr	r4, [r2, #16]
 80133da:	3101      	adds	r1, #1
 80133dc:	f102 0314 	add.w	r3, r2, #20
 80133e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80133e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80133e8:	1f05      	subs	r5, r0, #4
 80133ea:	42a3      	cmp	r3, r4
 80133ec:	d30c      	bcc.n	8013408 <__copybits+0x36>
 80133ee:	1aa3      	subs	r3, r4, r2
 80133f0:	3b11      	subs	r3, #17
 80133f2:	f023 0303 	bic.w	r3, r3, #3
 80133f6:	3211      	adds	r2, #17
 80133f8:	42a2      	cmp	r2, r4
 80133fa:	bf88      	it	hi
 80133fc:	2300      	movhi	r3, #0
 80133fe:	4418      	add	r0, r3
 8013400:	2300      	movs	r3, #0
 8013402:	4288      	cmp	r0, r1
 8013404:	d305      	bcc.n	8013412 <__copybits+0x40>
 8013406:	bd70      	pop	{r4, r5, r6, pc}
 8013408:	f853 6b04 	ldr.w	r6, [r3], #4
 801340c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013410:	e7eb      	b.n	80133ea <__copybits+0x18>
 8013412:	f840 3b04 	str.w	r3, [r0], #4
 8013416:	e7f4      	b.n	8013402 <__copybits+0x30>

08013418 <__any_on>:
 8013418:	f100 0214 	add.w	r2, r0, #20
 801341c:	6900      	ldr	r0, [r0, #16]
 801341e:	114b      	asrs	r3, r1, #5
 8013420:	4298      	cmp	r0, r3
 8013422:	b510      	push	{r4, lr}
 8013424:	db11      	blt.n	801344a <__any_on+0x32>
 8013426:	dd0a      	ble.n	801343e <__any_on+0x26>
 8013428:	f011 011f 	ands.w	r1, r1, #31
 801342c:	d007      	beq.n	801343e <__any_on+0x26>
 801342e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013432:	fa24 f001 	lsr.w	r0, r4, r1
 8013436:	fa00 f101 	lsl.w	r1, r0, r1
 801343a:	428c      	cmp	r4, r1
 801343c:	d10b      	bne.n	8013456 <__any_on+0x3e>
 801343e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013442:	4293      	cmp	r3, r2
 8013444:	d803      	bhi.n	801344e <__any_on+0x36>
 8013446:	2000      	movs	r0, #0
 8013448:	bd10      	pop	{r4, pc}
 801344a:	4603      	mov	r3, r0
 801344c:	e7f7      	b.n	801343e <__any_on+0x26>
 801344e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013452:	2900      	cmp	r1, #0
 8013454:	d0f5      	beq.n	8013442 <__any_on+0x2a>
 8013456:	2001      	movs	r0, #1
 8013458:	e7f6      	b.n	8013448 <__any_on+0x30>

0801345a <_calloc_r>:
 801345a:	b513      	push	{r0, r1, r4, lr}
 801345c:	434a      	muls	r2, r1
 801345e:	4611      	mov	r1, r2
 8013460:	9201      	str	r2, [sp, #4]
 8013462:	f000 f859 	bl	8013518 <_malloc_r>
 8013466:	4604      	mov	r4, r0
 8013468:	b118      	cbz	r0, 8013472 <_calloc_r+0x18>
 801346a:	9a01      	ldr	r2, [sp, #4]
 801346c:	2100      	movs	r1, #0
 801346e:	f7fc fb25 	bl	800fabc <memset>
 8013472:	4620      	mov	r0, r4
 8013474:	b002      	add	sp, #8
 8013476:	bd10      	pop	{r4, pc}

08013478 <_free_r>:
 8013478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801347a:	2900      	cmp	r1, #0
 801347c:	d048      	beq.n	8013510 <_free_r+0x98>
 801347e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013482:	9001      	str	r0, [sp, #4]
 8013484:	2b00      	cmp	r3, #0
 8013486:	f1a1 0404 	sub.w	r4, r1, #4
 801348a:	bfb8      	it	lt
 801348c:	18e4      	addlt	r4, r4, r3
 801348e:	f000 fe8b 	bl	80141a8 <__malloc_lock>
 8013492:	4a20      	ldr	r2, [pc, #128]	; (8013514 <_free_r+0x9c>)
 8013494:	9801      	ldr	r0, [sp, #4]
 8013496:	6813      	ldr	r3, [r2, #0]
 8013498:	4615      	mov	r5, r2
 801349a:	b933      	cbnz	r3, 80134aa <_free_r+0x32>
 801349c:	6063      	str	r3, [r4, #4]
 801349e:	6014      	str	r4, [r2, #0]
 80134a0:	b003      	add	sp, #12
 80134a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134a6:	f000 be85 	b.w	80141b4 <__malloc_unlock>
 80134aa:	42a3      	cmp	r3, r4
 80134ac:	d90b      	bls.n	80134c6 <_free_r+0x4e>
 80134ae:	6821      	ldr	r1, [r4, #0]
 80134b0:	1862      	adds	r2, r4, r1
 80134b2:	4293      	cmp	r3, r2
 80134b4:	bf04      	itt	eq
 80134b6:	681a      	ldreq	r2, [r3, #0]
 80134b8:	685b      	ldreq	r3, [r3, #4]
 80134ba:	6063      	str	r3, [r4, #4]
 80134bc:	bf04      	itt	eq
 80134be:	1852      	addeq	r2, r2, r1
 80134c0:	6022      	streq	r2, [r4, #0]
 80134c2:	602c      	str	r4, [r5, #0]
 80134c4:	e7ec      	b.n	80134a0 <_free_r+0x28>
 80134c6:	461a      	mov	r2, r3
 80134c8:	685b      	ldr	r3, [r3, #4]
 80134ca:	b10b      	cbz	r3, 80134d0 <_free_r+0x58>
 80134cc:	42a3      	cmp	r3, r4
 80134ce:	d9fa      	bls.n	80134c6 <_free_r+0x4e>
 80134d0:	6811      	ldr	r1, [r2, #0]
 80134d2:	1855      	adds	r5, r2, r1
 80134d4:	42a5      	cmp	r5, r4
 80134d6:	d10b      	bne.n	80134f0 <_free_r+0x78>
 80134d8:	6824      	ldr	r4, [r4, #0]
 80134da:	4421      	add	r1, r4
 80134dc:	1854      	adds	r4, r2, r1
 80134de:	42a3      	cmp	r3, r4
 80134e0:	6011      	str	r1, [r2, #0]
 80134e2:	d1dd      	bne.n	80134a0 <_free_r+0x28>
 80134e4:	681c      	ldr	r4, [r3, #0]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	6053      	str	r3, [r2, #4]
 80134ea:	4421      	add	r1, r4
 80134ec:	6011      	str	r1, [r2, #0]
 80134ee:	e7d7      	b.n	80134a0 <_free_r+0x28>
 80134f0:	d902      	bls.n	80134f8 <_free_r+0x80>
 80134f2:	230c      	movs	r3, #12
 80134f4:	6003      	str	r3, [r0, #0]
 80134f6:	e7d3      	b.n	80134a0 <_free_r+0x28>
 80134f8:	6825      	ldr	r5, [r4, #0]
 80134fa:	1961      	adds	r1, r4, r5
 80134fc:	428b      	cmp	r3, r1
 80134fe:	bf04      	itt	eq
 8013500:	6819      	ldreq	r1, [r3, #0]
 8013502:	685b      	ldreq	r3, [r3, #4]
 8013504:	6063      	str	r3, [r4, #4]
 8013506:	bf04      	itt	eq
 8013508:	1949      	addeq	r1, r1, r5
 801350a:	6021      	streq	r1, [r4, #0]
 801350c:	6054      	str	r4, [r2, #4]
 801350e:	e7c7      	b.n	80134a0 <_free_r+0x28>
 8013510:	b003      	add	sp, #12
 8013512:	bd30      	pop	{r4, r5, pc}
 8013514:	200002ac 	.word	0x200002ac

08013518 <_malloc_r>:
 8013518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801351a:	1ccd      	adds	r5, r1, #3
 801351c:	f025 0503 	bic.w	r5, r5, #3
 8013520:	3508      	adds	r5, #8
 8013522:	2d0c      	cmp	r5, #12
 8013524:	bf38      	it	cc
 8013526:	250c      	movcc	r5, #12
 8013528:	2d00      	cmp	r5, #0
 801352a:	4606      	mov	r6, r0
 801352c:	db01      	blt.n	8013532 <_malloc_r+0x1a>
 801352e:	42a9      	cmp	r1, r5
 8013530:	d903      	bls.n	801353a <_malloc_r+0x22>
 8013532:	230c      	movs	r3, #12
 8013534:	6033      	str	r3, [r6, #0]
 8013536:	2000      	movs	r0, #0
 8013538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801353a:	f000 fe35 	bl	80141a8 <__malloc_lock>
 801353e:	4921      	ldr	r1, [pc, #132]	; (80135c4 <_malloc_r+0xac>)
 8013540:	680a      	ldr	r2, [r1, #0]
 8013542:	4614      	mov	r4, r2
 8013544:	b99c      	cbnz	r4, 801356e <_malloc_r+0x56>
 8013546:	4f20      	ldr	r7, [pc, #128]	; (80135c8 <_malloc_r+0xb0>)
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	b923      	cbnz	r3, 8013556 <_malloc_r+0x3e>
 801354c:	4621      	mov	r1, r4
 801354e:	4630      	mov	r0, r6
 8013550:	f000 fafa 	bl	8013b48 <_sbrk_r>
 8013554:	6038      	str	r0, [r7, #0]
 8013556:	4629      	mov	r1, r5
 8013558:	4630      	mov	r0, r6
 801355a:	f000 faf5 	bl	8013b48 <_sbrk_r>
 801355e:	1c43      	adds	r3, r0, #1
 8013560:	d123      	bne.n	80135aa <_malloc_r+0x92>
 8013562:	230c      	movs	r3, #12
 8013564:	6033      	str	r3, [r6, #0]
 8013566:	4630      	mov	r0, r6
 8013568:	f000 fe24 	bl	80141b4 <__malloc_unlock>
 801356c:	e7e3      	b.n	8013536 <_malloc_r+0x1e>
 801356e:	6823      	ldr	r3, [r4, #0]
 8013570:	1b5b      	subs	r3, r3, r5
 8013572:	d417      	bmi.n	80135a4 <_malloc_r+0x8c>
 8013574:	2b0b      	cmp	r3, #11
 8013576:	d903      	bls.n	8013580 <_malloc_r+0x68>
 8013578:	6023      	str	r3, [r4, #0]
 801357a:	441c      	add	r4, r3
 801357c:	6025      	str	r5, [r4, #0]
 801357e:	e004      	b.n	801358a <_malloc_r+0x72>
 8013580:	6863      	ldr	r3, [r4, #4]
 8013582:	42a2      	cmp	r2, r4
 8013584:	bf0c      	ite	eq
 8013586:	600b      	streq	r3, [r1, #0]
 8013588:	6053      	strne	r3, [r2, #4]
 801358a:	4630      	mov	r0, r6
 801358c:	f000 fe12 	bl	80141b4 <__malloc_unlock>
 8013590:	f104 000b 	add.w	r0, r4, #11
 8013594:	1d23      	adds	r3, r4, #4
 8013596:	f020 0007 	bic.w	r0, r0, #7
 801359a:	1ac2      	subs	r2, r0, r3
 801359c:	d0cc      	beq.n	8013538 <_malloc_r+0x20>
 801359e:	1a1b      	subs	r3, r3, r0
 80135a0:	50a3      	str	r3, [r4, r2]
 80135a2:	e7c9      	b.n	8013538 <_malloc_r+0x20>
 80135a4:	4622      	mov	r2, r4
 80135a6:	6864      	ldr	r4, [r4, #4]
 80135a8:	e7cc      	b.n	8013544 <_malloc_r+0x2c>
 80135aa:	1cc4      	adds	r4, r0, #3
 80135ac:	f024 0403 	bic.w	r4, r4, #3
 80135b0:	42a0      	cmp	r0, r4
 80135b2:	d0e3      	beq.n	801357c <_malloc_r+0x64>
 80135b4:	1a21      	subs	r1, r4, r0
 80135b6:	4630      	mov	r0, r6
 80135b8:	f000 fac6 	bl	8013b48 <_sbrk_r>
 80135bc:	3001      	adds	r0, #1
 80135be:	d1dd      	bne.n	801357c <_malloc_r+0x64>
 80135c0:	e7cf      	b.n	8013562 <_malloc_r+0x4a>
 80135c2:	bf00      	nop
 80135c4:	200002ac 	.word	0x200002ac
 80135c8:	200002b0 	.word	0x200002b0

080135cc <__ssputs_r>:
 80135cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135d0:	688e      	ldr	r6, [r1, #8]
 80135d2:	429e      	cmp	r6, r3
 80135d4:	4682      	mov	sl, r0
 80135d6:	460c      	mov	r4, r1
 80135d8:	4690      	mov	r8, r2
 80135da:	461f      	mov	r7, r3
 80135dc:	d838      	bhi.n	8013650 <__ssputs_r+0x84>
 80135de:	898a      	ldrh	r2, [r1, #12]
 80135e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80135e4:	d032      	beq.n	801364c <__ssputs_r+0x80>
 80135e6:	6825      	ldr	r5, [r4, #0]
 80135e8:	6909      	ldr	r1, [r1, #16]
 80135ea:	eba5 0901 	sub.w	r9, r5, r1
 80135ee:	6965      	ldr	r5, [r4, #20]
 80135f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80135f8:	3301      	adds	r3, #1
 80135fa:	444b      	add	r3, r9
 80135fc:	106d      	asrs	r5, r5, #1
 80135fe:	429d      	cmp	r5, r3
 8013600:	bf38      	it	cc
 8013602:	461d      	movcc	r5, r3
 8013604:	0553      	lsls	r3, r2, #21
 8013606:	d531      	bpl.n	801366c <__ssputs_r+0xa0>
 8013608:	4629      	mov	r1, r5
 801360a:	f7ff ff85 	bl	8013518 <_malloc_r>
 801360e:	4606      	mov	r6, r0
 8013610:	b950      	cbnz	r0, 8013628 <__ssputs_r+0x5c>
 8013612:	230c      	movs	r3, #12
 8013614:	f8ca 3000 	str.w	r3, [sl]
 8013618:	89a3      	ldrh	r3, [r4, #12]
 801361a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801361e:	81a3      	strh	r3, [r4, #12]
 8013620:	f04f 30ff 	mov.w	r0, #4294967295
 8013624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013628:	6921      	ldr	r1, [r4, #16]
 801362a:	464a      	mov	r2, r9
 801362c:	f7ff fa4c 	bl	8012ac8 <memcpy>
 8013630:	89a3      	ldrh	r3, [r4, #12]
 8013632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801363a:	81a3      	strh	r3, [r4, #12]
 801363c:	6126      	str	r6, [r4, #16]
 801363e:	6165      	str	r5, [r4, #20]
 8013640:	444e      	add	r6, r9
 8013642:	eba5 0509 	sub.w	r5, r5, r9
 8013646:	6026      	str	r6, [r4, #0]
 8013648:	60a5      	str	r5, [r4, #8]
 801364a:	463e      	mov	r6, r7
 801364c:	42be      	cmp	r6, r7
 801364e:	d900      	bls.n	8013652 <__ssputs_r+0x86>
 8013650:	463e      	mov	r6, r7
 8013652:	4632      	mov	r2, r6
 8013654:	6820      	ldr	r0, [r4, #0]
 8013656:	4641      	mov	r1, r8
 8013658:	f000 fd8c 	bl	8014174 <memmove>
 801365c:	68a3      	ldr	r3, [r4, #8]
 801365e:	6822      	ldr	r2, [r4, #0]
 8013660:	1b9b      	subs	r3, r3, r6
 8013662:	4432      	add	r2, r6
 8013664:	60a3      	str	r3, [r4, #8]
 8013666:	6022      	str	r2, [r4, #0]
 8013668:	2000      	movs	r0, #0
 801366a:	e7db      	b.n	8013624 <__ssputs_r+0x58>
 801366c:	462a      	mov	r2, r5
 801366e:	f000 fda7 	bl	80141c0 <_realloc_r>
 8013672:	4606      	mov	r6, r0
 8013674:	2800      	cmp	r0, #0
 8013676:	d1e1      	bne.n	801363c <__ssputs_r+0x70>
 8013678:	6921      	ldr	r1, [r4, #16]
 801367a:	4650      	mov	r0, sl
 801367c:	f7ff fefc 	bl	8013478 <_free_r>
 8013680:	e7c7      	b.n	8013612 <__ssputs_r+0x46>
	...

08013684 <_svfiprintf_r>:
 8013684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013688:	4698      	mov	r8, r3
 801368a:	898b      	ldrh	r3, [r1, #12]
 801368c:	061b      	lsls	r3, r3, #24
 801368e:	b09d      	sub	sp, #116	; 0x74
 8013690:	4607      	mov	r7, r0
 8013692:	460d      	mov	r5, r1
 8013694:	4614      	mov	r4, r2
 8013696:	d50e      	bpl.n	80136b6 <_svfiprintf_r+0x32>
 8013698:	690b      	ldr	r3, [r1, #16]
 801369a:	b963      	cbnz	r3, 80136b6 <_svfiprintf_r+0x32>
 801369c:	2140      	movs	r1, #64	; 0x40
 801369e:	f7ff ff3b 	bl	8013518 <_malloc_r>
 80136a2:	6028      	str	r0, [r5, #0]
 80136a4:	6128      	str	r0, [r5, #16]
 80136a6:	b920      	cbnz	r0, 80136b2 <_svfiprintf_r+0x2e>
 80136a8:	230c      	movs	r3, #12
 80136aa:	603b      	str	r3, [r7, #0]
 80136ac:	f04f 30ff 	mov.w	r0, #4294967295
 80136b0:	e0d1      	b.n	8013856 <_svfiprintf_r+0x1d2>
 80136b2:	2340      	movs	r3, #64	; 0x40
 80136b4:	616b      	str	r3, [r5, #20]
 80136b6:	2300      	movs	r3, #0
 80136b8:	9309      	str	r3, [sp, #36]	; 0x24
 80136ba:	2320      	movs	r3, #32
 80136bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80136c4:	2330      	movs	r3, #48	; 0x30
 80136c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013870 <_svfiprintf_r+0x1ec>
 80136ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136ce:	f04f 0901 	mov.w	r9, #1
 80136d2:	4623      	mov	r3, r4
 80136d4:	469a      	mov	sl, r3
 80136d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136da:	b10a      	cbz	r2, 80136e0 <_svfiprintf_r+0x5c>
 80136dc:	2a25      	cmp	r2, #37	; 0x25
 80136de:	d1f9      	bne.n	80136d4 <_svfiprintf_r+0x50>
 80136e0:	ebba 0b04 	subs.w	fp, sl, r4
 80136e4:	d00b      	beq.n	80136fe <_svfiprintf_r+0x7a>
 80136e6:	465b      	mov	r3, fp
 80136e8:	4622      	mov	r2, r4
 80136ea:	4629      	mov	r1, r5
 80136ec:	4638      	mov	r0, r7
 80136ee:	f7ff ff6d 	bl	80135cc <__ssputs_r>
 80136f2:	3001      	adds	r0, #1
 80136f4:	f000 80aa 	beq.w	801384c <_svfiprintf_r+0x1c8>
 80136f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136fa:	445a      	add	r2, fp
 80136fc:	9209      	str	r2, [sp, #36]	; 0x24
 80136fe:	f89a 3000 	ldrb.w	r3, [sl]
 8013702:	2b00      	cmp	r3, #0
 8013704:	f000 80a2 	beq.w	801384c <_svfiprintf_r+0x1c8>
 8013708:	2300      	movs	r3, #0
 801370a:	f04f 32ff 	mov.w	r2, #4294967295
 801370e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013712:	f10a 0a01 	add.w	sl, sl, #1
 8013716:	9304      	str	r3, [sp, #16]
 8013718:	9307      	str	r3, [sp, #28]
 801371a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801371e:	931a      	str	r3, [sp, #104]	; 0x68
 8013720:	4654      	mov	r4, sl
 8013722:	2205      	movs	r2, #5
 8013724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013728:	4851      	ldr	r0, [pc, #324]	; (8013870 <_svfiprintf_r+0x1ec>)
 801372a:	f7ec fd71 	bl	8000210 <memchr>
 801372e:	9a04      	ldr	r2, [sp, #16]
 8013730:	b9d8      	cbnz	r0, 801376a <_svfiprintf_r+0xe6>
 8013732:	06d0      	lsls	r0, r2, #27
 8013734:	bf44      	itt	mi
 8013736:	2320      	movmi	r3, #32
 8013738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801373c:	0711      	lsls	r1, r2, #28
 801373e:	bf44      	itt	mi
 8013740:	232b      	movmi	r3, #43	; 0x2b
 8013742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013746:	f89a 3000 	ldrb.w	r3, [sl]
 801374a:	2b2a      	cmp	r3, #42	; 0x2a
 801374c:	d015      	beq.n	801377a <_svfiprintf_r+0xf6>
 801374e:	9a07      	ldr	r2, [sp, #28]
 8013750:	4654      	mov	r4, sl
 8013752:	2000      	movs	r0, #0
 8013754:	f04f 0c0a 	mov.w	ip, #10
 8013758:	4621      	mov	r1, r4
 801375a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801375e:	3b30      	subs	r3, #48	; 0x30
 8013760:	2b09      	cmp	r3, #9
 8013762:	d94e      	bls.n	8013802 <_svfiprintf_r+0x17e>
 8013764:	b1b0      	cbz	r0, 8013794 <_svfiprintf_r+0x110>
 8013766:	9207      	str	r2, [sp, #28]
 8013768:	e014      	b.n	8013794 <_svfiprintf_r+0x110>
 801376a:	eba0 0308 	sub.w	r3, r0, r8
 801376e:	fa09 f303 	lsl.w	r3, r9, r3
 8013772:	4313      	orrs	r3, r2
 8013774:	9304      	str	r3, [sp, #16]
 8013776:	46a2      	mov	sl, r4
 8013778:	e7d2      	b.n	8013720 <_svfiprintf_r+0x9c>
 801377a:	9b03      	ldr	r3, [sp, #12]
 801377c:	1d19      	adds	r1, r3, #4
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	9103      	str	r1, [sp, #12]
 8013782:	2b00      	cmp	r3, #0
 8013784:	bfbb      	ittet	lt
 8013786:	425b      	neglt	r3, r3
 8013788:	f042 0202 	orrlt.w	r2, r2, #2
 801378c:	9307      	strge	r3, [sp, #28]
 801378e:	9307      	strlt	r3, [sp, #28]
 8013790:	bfb8      	it	lt
 8013792:	9204      	strlt	r2, [sp, #16]
 8013794:	7823      	ldrb	r3, [r4, #0]
 8013796:	2b2e      	cmp	r3, #46	; 0x2e
 8013798:	d10c      	bne.n	80137b4 <_svfiprintf_r+0x130>
 801379a:	7863      	ldrb	r3, [r4, #1]
 801379c:	2b2a      	cmp	r3, #42	; 0x2a
 801379e:	d135      	bne.n	801380c <_svfiprintf_r+0x188>
 80137a0:	9b03      	ldr	r3, [sp, #12]
 80137a2:	1d1a      	adds	r2, r3, #4
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	9203      	str	r2, [sp, #12]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	bfb8      	it	lt
 80137ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80137b0:	3402      	adds	r4, #2
 80137b2:	9305      	str	r3, [sp, #20]
 80137b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013880 <_svfiprintf_r+0x1fc>
 80137b8:	7821      	ldrb	r1, [r4, #0]
 80137ba:	2203      	movs	r2, #3
 80137bc:	4650      	mov	r0, sl
 80137be:	f7ec fd27 	bl	8000210 <memchr>
 80137c2:	b140      	cbz	r0, 80137d6 <_svfiprintf_r+0x152>
 80137c4:	2340      	movs	r3, #64	; 0x40
 80137c6:	eba0 000a 	sub.w	r0, r0, sl
 80137ca:	fa03 f000 	lsl.w	r0, r3, r0
 80137ce:	9b04      	ldr	r3, [sp, #16]
 80137d0:	4303      	orrs	r3, r0
 80137d2:	3401      	adds	r4, #1
 80137d4:	9304      	str	r3, [sp, #16]
 80137d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137da:	4826      	ldr	r0, [pc, #152]	; (8013874 <_svfiprintf_r+0x1f0>)
 80137dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137e0:	2206      	movs	r2, #6
 80137e2:	f7ec fd15 	bl	8000210 <memchr>
 80137e6:	2800      	cmp	r0, #0
 80137e8:	d038      	beq.n	801385c <_svfiprintf_r+0x1d8>
 80137ea:	4b23      	ldr	r3, [pc, #140]	; (8013878 <_svfiprintf_r+0x1f4>)
 80137ec:	bb1b      	cbnz	r3, 8013836 <_svfiprintf_r+0x1b2>
 80137ee:	9b03      	ldr	r3, [sp, #12]
 80137f0:	3307      	adds	r3, #7
 80137f2:	f023 0307 	bic.w	r3, r3, #7
 80137f6:	3308      	adds	r3, #8
 80137f8:	9303      	str	r3, [sp, #12]
 80137fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137fc:	4433      	add	r3, r6
 80137fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013800:	e767      	b.n	80136d2 <_svfiprintf_r+0x4e>
 8013802:	fb0c 3202 	mla	r2, ip, r2, r3
 8013806:	460c      	mov	r4, r1
 8013808:	2001      	movs	r0, #1
 801380a:	e7a5      	b.n	8013758 <_svfiprintf_r+0xd4>
 801380c:	2300      	movs	r3, #0
 801380e:	3401      	adds	r4, #1
 8013810:	9305      	str	r3, [sp, #20]
 8013812:	4619      	mov	r1, r3
 8013814:	f04f 0c0a 	mov.w	ip, #10
 8013818:	4620      	mov	r0, r4
 801381a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801381e:	3a30      	subs	r2, #48	; 0x30
 8013820:	2a09      	cmp	r2, #9
 8013822:	d903      	bls.n	801382c <_svfiprintf_r+0x1a8>
 8013824:	2b00      	cmp	r3, #0
 8013826:	d0c5      	beq.n	80137b4 <_svfiprintf_r+0x130>
 8013828:	9105      	str	r1, [sp, #20]
 801382a:	e7c3      	b.n	80137b4 <_svfiprintf_r+0x130>
 801382c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013830:	4604      	mov	r4, r0
 8013832:	2301      	movs	r3, #1
 8013834:	e7f0      	b.n	8013818 <_svfiprintf_r+0x194>
 8013836:	ab03      	add	r3, sp, #12
 8013838:	9300      	str	r3, [sp, #0]
 801383a:	462a      	mov	r2, r5
 801383c:	4b0f      	ldr	r3, [pc, #60]	; (801387c <_svfiprintf_r+0x1f8>)
 801383e:	a904      	add	r1, sp, #16
 8013840:	4638      	mov	r0, r7
 8013842:	f7fc f9e3 	bl	800fc0c <_printf_float>
 8013846:	1c42      	adds	r2, r0, #1
 8013848:	4606      	mov	r6, r0
 801384a:	d1d6      	bne.n	80137fa <_svfiprintf_r+0x176>
 801384c:	89ab      	ldrh	r3, [r5, #12]
 801384e:	065b      	lsls	r3, r3, #25
 8013850:	f53f af2c 	bmi.w	80136ac <_svfiprintf_r+0x28>
 8013854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013856:	b01d      	add	sp, #116	; 0x74
 8013858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801385c:	ab03      	add	r3, sp, #12
 801385e:	9300      	str	r3, [sp, #0]
 8013860:	462a      	mov	r2, r5
 8013862:	4b06      	ldr	r3, [pc, #24]	; (801387c <_svfiprintf_r+0x1f8>)
 8013864:	a904      	add	r1, sp, #16
 8013866:	4638      	mov	r0, r7
 8013868:	f7fc fc74 	bl	8010154 <_printf_i>
 801386c:	e7eb      	b.n	8013846 <_svfiprintf_r+0x1c2>
 801386e:	bf00      	nop
 8013870:	080282bc 	.word	0x080282bc
 8013874:	080282c6 	.word	0x080282c6
 8013878:	0800fc0d 	.word	0x0800fc0d
 801387c:	080135cd 	.word	0x080135cd
 8013880:	080282c2 	.word	0x080282c2

08013884 <__sfputc_r>:
 8013884:	6893      	ldr	r3, [r2, #8]
 8013886:	3b01      	subs	r3, #1
 8013888:	2b00      	cmp	r3, #0
 801388a:	b410      	push	{r4}
 801388c:	6093      	str	r3, [r2, #8]
 801388e:	da08      	bge.n	80138a2 <__sfputc_r+0x1e>
 8013890:	6994      	ldr	r4, [r2, #24]
 8013892:	42a3      	cmp	r3, r4
 8013894:	db01      	blt.n	801389a <__sfputc_r+0x16>
 8013896:	290a      	cmp	r1, #10
 8013898:	d103      	bne.n	80138a2 <__sfputc_r+0x1e>
 801389a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801389e:	f000 b975 	b.w	8013b8c <__swbuf_r>
 80138a2:	6813      	ldr	r3, [r2, #0]
 80138a4:	1c58      	adds	r0, r3, #1
 80138a6:	6010      	str	r0, [r2, #0]
 80138a8:	7019      	strb	r1, [r3, #0]
 80138aa:	4608      	mov	r0, r1
 80138ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138b0:	4770      	bx	lr

080138b2 <__sfputs_r>:
 80138b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b4:	4606      	mov	r6, r0
 80138b6:	460f      	mov	r7, r1
 80138b8:	4614      	mov	r4, r2
 80138ba:	18d5      	adds	r5, r2, r3
 80138bc:	42ac      	cmp	r4, r5
 80138be:	d101      	bne.n	80138c4 <__sfputs_r+0x12>
 80138c0:	2000      	movs	r0, #0
 80138c2:	e007      	b.n	80138d4 <__sfputs_r+0x22>
 80138c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138c8:	463a      	mov	r2, r7
 80138ca:	4630      	mov	r0, r6
 80138cc:	f7ff ffda 	bl	8013884 <__sfputc_r>
 80138d0:	1c43      	adds	r3, r0, #1
 80138d2:	d1f3      	bne.n	80138bc <__sfputs_r+0xa>
 80138d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138d8 <_vfiprintf_r>:
 80138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138dc:	460d      	mov	r5, r1
 80138de:	b09d      	sub	sp, #116	; 0x74
 80138e0:	4614      	mov	r4, r2
 80138e2:	4698      	mov	r8, r3
 80138e4:	4606      	mov	r6, r0
 80138e6:	b118      	cbz	r0, 80138f0 <_vfiprintf_r+0x18>
 80138e8:	6983      	ldr	r3, [r0, #24]
 80138ea:	b90b      	cbnz	r3, 80138f0 <_vfiprintf_r+0x18>
 80138ec:	f000 fb3e 	bl	8013f6c <__sinit>
 80138f0:	4b89      	ldr	r3, [pc, #548]	; (8013b18 <_vfiprintf_r+0x240>)
 80138f2:	429d      	cmp	r5, r3
 80138f4:	d11b      	bne.n	801392e <_vfiprintf_r+0x56>
 80138f6:	6875      	ldr	r5, [r6, #4]
 80138f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138fa:	07d9      	lsls	r1, r3, #31
 80138fc:	d405      	bmi.n	801390a <_vfiprintf_r+0x32>
 80138fe:	89ab      	ldrh	r3, [r5, #12]
 8013900:	059a      	lsls	r2, r3, #22
 8013902:	d402      	bmi.n	801390a <_vfiprintf_r+0x32>
 8013904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013906:	f000 fbcf 	bl	80140a8 <__retarget_lock_acquire_recursive>
 801390a:	89ab      	ldrh	r3, [r5, #12]
 801390c:	071b      	lsls	r3, r3, #28
 801390e:	d501      	bpl.n	8013914 <_vfiprintf_r+0x3c>
 8013910:	692b      	ldr	r3, [r5, #16]
 8013912:	b9eb      	cbnz	r3, 8013950 <_vfiprintf_r+0x78>
 8013914:	4629      	mov	r1, r5
 8013916:	4630      	mov	r0, r6
 8013918:	f000 f998 	bl	8013c4c <__swsetup_r>
 801391c:	b1c0      	cbz	r0, 8013950 <_vfiprintf_r+0x78>
 801391e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013920:	07dc      	lsls	r4, r3, #31
 8013922:	d50e      	bpl.n	8013942 <_vfiprintf_r+0x6a>
 8013924:	f04f 30ff 	mov.w	r0, #4294967295
 8013928:	b01d      	add	sp, #116	; 0x74
 801392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801392e:	4b7b      	ldr	r3, [pc, #492]	; (8013b1c <_vfiprintf_r+0x244>)
 8013930:	429d      	cmp	r5, r3
 8013932:	d101      	bne.n	8013938 <_vfiprintf_r+0x60>
 8013934:	68b5      	ldr	r5, [r6, #8]
 8013936:	e7df      	b.n	80138f8 <_vfiprintf_r+0x20>
 8013938:	4b79      	ldr	r3, [pc, #484]	; (8013b20 <_vfiprintf_r+0x248>)
 801393a:	429d      	cmp	r5, r3
 801393c:	bf08      	it	eq
 801393e:	68f5      	ldreq	r5, [r6, #12]
 8013940:	e7da      	b.n	80138f8 <_vfiprintf_r+0x20>
 8013942:	89ab      	ldrh	r3, [r5, #12]
 8013944:	0598      	lsls	r0, r3, #22
 8013946:	d4ed      	bmi.n	8013924 <_vfiprintf_r+0x4c>
 8013948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801394a:	f000 fbae 	bl	80140aa <__retarget_lock_release_recursive>
 801394e:	e7e9      	b.n	8013924 <_vfiprintf_r+0x4c>
 8013950:	2300      	movs	r3, #0
 8013952:	9309      	str	r3, [sp, #36]	; 0x24
 8013954:	2320      	movs	r3, #32
 8013956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801395a:	f8cd 800c 	str.w	r8, [sp, #12]
 801395e:	2330      	movs	r3, #48	; 0x30
 8013960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013b24 <_vfiprintf_r+0x24c>
 8013964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013968:	f04f 0901 	mov.w	r9, #1
 801396c:	4623      	mov	r3, r4
 801396e:	469a      	mov	sl, r3
 8013970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013974:	b10a      	cbz	r2, 801397a <_vfiprintf_r+0xa2>
 8013976:	2a25      	cmp	r2, #37	; 0x25
 8013978:	d1f9      	bne.n	801396e <_vfiprintf_r+0x96>
 801397a:	ebba 0b04 	subs.w	fp, sl, r4
 801397e:	d00b      	beq.n	8013998 <_vfiprintf_r+0xc0>
 8013980:	465b      	mov	r3, fp
 8013982:	4622      	mov	r2, r4
 8013984:	4629      	mov	r1, r5
 8013986:	4630      	mov	r0, r6
 8013988:	f7ff ff93 	bl	80138b2 <__sfputs_r>
 801398c:	3001      	adds	r0, #1
 801398e:	f000 80aa 	beq.w	8013ae6 <_vfiprintf_r+0x20e>
 8013992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013994:	445a      	add	r2, fp
 8013996:	9209      	str	r2, [sp, #36]	; 0x24
 8013998:	f89a 3000 	ldrb.w	r3, [sl]
 801399c:	2b00      	cmp	r3, #0
 801399e:	f000 80a2 	beq.w	8013ae6 <_vfiprintf_r+0x20e>
 80139a2:	2300      	movs	r3, #0
 80139a4:	f04f 32ff 	mov.w	r2, #4294967295
 80139a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139ac:	f10a 0a01 	add.w	sl, sl, #1
 80139b0:	9304      	str	r3, [sp, #16]
 80139b2:	9307      	str	r3, [sp, #28]
 80139b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139b8:	931a      	str	r3, [sp, #104]	; 0x68
 80139ba:	4654      	mov	r4, sl
 80139bc:	2205      	movs	r2, #5
 80139be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139c2:	4858      	ldr	r0, [pc, #352]	; (8013b24 <_vfiprintf_r+0x24c>)
 80139c4:	f7ec fc24 	bl	8000210 <memchr>
 80139c8:	9a04      	ldr	r2, [sp, #16]
 80139ca:	b9d8      	cbnz	r0, 8013a04 <_vfiprintf_r+0x12c>
 80139cc:	06d1      	lsls	r1, r2, #27
 80139ce:	bf44      	itt	mi
 80139d0:	2320      	movmi	r3, #32
 80139d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139d6:	0713      	lsls	r3, r2, #28
 80139d8:	bf44      	itt	mi
 80139da:	232b      	movmi	r3, #43	; 0x2b
 80139dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139e0:	f89a 3000 	ldrb.w	r3, [sl]
 80139e4:	2b2a      	cmp	r3, #42	; 0x2a
 80139e6:	d015      	beq.n	8013a14 <_vfiprintf_r+0x13c>
 80139e8:	9a07      	ldr	r2, [sp, #28]
 80139ea:	4654      	mov	r4, sl
 80139ec:	2000      	movs	r0, #0
 80139ee:	f04f 0c0a 	mov.w	ip, #10
 80139f2:	4621      	mov	r1, r4
 80139f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139f8:	3b30      	subs	r3, #48	; 0x30
 80139fa:	2b09      	cmp	r3, #9
 80139fc:	d94e      	bls.n	8013a9c <_vfiprintf_r+0x1c4>
 80139fe:	b1b0      	cbz	r0, 8013a2e <_vfiprintf_r+0x156>
 8013a00:	9207      	str	r2, [sp, #28]
 8013a02:	e014      	b.n	8013a2e <_vfiprintf_r+0x156>
 8013a04:	eba0 0308 	sub.w	r3, r0, r8
 8013a08:	fa09 f303 	lsl.w	r3, r9, r3
 8013a0c:	4313      	orrs	r3, r2
 8013a0e:	9304      	str	r3, [sp, #16]
 8013a10:	46a2      	mov	sl, r4
 8013a12:	e7d2      	b.n	80139ba <_vfiprintf_r+0xe2>
 8013a14:	9b03      	ldr	r3, [sp, #12]
 8013a16:	1d19      	adds	r1, r3, #4
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	9103      	str	r1, [sp, #12]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	bfbb      	ittet	lt
 8013a20:	425b      	neglt	r3, r3
 8013a22:	f042 0202 	orrlt.w	r2, r2, #2
 8013a26:	9307      	strge	r3, [sp, #28]
 8013a28:	9307      	strlt	r3, [sp, #28]
 8013a2a:	bfb8      	it	lt
 8013a2c:	9204      	strlt	r2, [sp, #16]
 8013a2e:	7823      	ldrb	r3, [r4, #0]
 8013a30:	2b2e      	cmp	r3, #46	; 0x2e
 8013a32:	d10c      	bne.n	8013a4e <_vfiprintf_r+0x176>
 8013a34:	7863      	ldrb	r3, [r4, #1]
 8013a36:	2b2a      	cmp	r3, #42	; 0x2a
 8013a38:	d135      	bne.n	8013aa6 <_vfiprintf_r+0x1ce>
 8013a3a:	9b03      	ldr	r3, [sp, #12]
 8013a3c:	1d1a      	adds	r2, r3, #4
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	9203      	str	r2, [sp, #12]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	bfb8      	it	lt
 8013a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a4a:	3402      	adds	r4, #2
 8013a4c:	9305      	str	r3, [sp, #20]
 8013a4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013b34 <_vfiprintf_r+0x25c>
 8013a52:	7821      	ldrb	r1, [r4, #0]
 8013a54:	2203      	movs	r2, #3
 8013a56:	4650      	mov	r0, sl
 8013a58:	f7ec fbda 	bl	8000210 <memchr>
 8013a5c:	b140      	cbz	r0, 8013a70 <_vfiprintf_r+0x198>
 8013a5e:	2340      	movs	r3, #64	; 0x40
 8013a60:	eba0 000a 	sub.w	r0, r0, sl
 8013a64:	fa03 f000 	lsl.w	r0, r3, r0
 8013a68:	9b04      	ldr	r3, [sp, #16]
 8013a6a:	4303      	orrs	r3, r0
 8013a6c:	3401      	adds	r4, #1
 8013a6e:	9304      	str	r3, [sp, #16]
 8013a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a74:	482c      	ldr	r0, [pc, #176]	; (8013b28 <_vfiprintf_r+0x250>)
 8013a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a7a:	2206      	movs	r2, #6
 8013a7c:	f7ec fbc8 	bl	8000210 <memchr>
 8013a80:	2800      	cmp	r0, #0
 8013a82:	d03f      	beq.n	8013b04 <_vfiprintf_r+0x22c>
 8013a84:	4b29      	ldr	r3, [pc, #164]	; (8013b2c <_vfiprintf_r+0x254>)
 8013a86:	bb1b      	cbnz	r3, 8013ad0 <_vfiprintf_r+0x1f8>
 8013a88:	9b03      	ldr	r3, [sp, #12]
 8013a8a:	3307      	adds	r3, #7
 8013a8c:	f023 0307 	bic.w	r3, r3, #7
 8013a90:	3308      	adds	r3, #8
 8013a92:	9303      	str	r3, [sp, #12]
 8013a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a96:	443b      	add	r3, r7
 8013a98:	9309      	str	r3, [sp, #36]	; 0x24
 8013a9a:	e767      	b.n	801396c <_vfiprintf_r+0x94>
 8013a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013aa0:	460c      	mov	r4, r1
 8013aa2:	2001      	movs	r0, #1
 8013aa4:	e7a5      	b.n	80139f2 <_vfiprintf_r+0x11a>
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	3401      	adds	r4, #1
 8013aaa:	9305      	str	r3, [sp, #20]
 8013aac:	4619      	mov	r1, r3
 8013aae:	f04f 0c0a 	mov.w	ip, #10
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ab8:	3a30      	subs	r2, #48	; 0x30
 8013aba:	2a09      	cmp	r2, #9
 8013abc:	d903      	bls.n	8013ac6 <_vfiprintf_r+0x1ee>
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d0c5      	beq.n	8013a4e <_vfiprintf_r+0x176>
 8013ac2:	9105      	str	r1, [sp, #20]
 8013ac4:	e7c3      	b.n	8013a4e <_vfiprintf_r+0x176>
 8013ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8013aca:	4604      	mov	r4, r0
 8013acc:	2301      	movs	r3, #1
 8013ace:	e7f0      	b.n	8013ab2 <_vfiprintf_r+0x1da>
 8013ad0:	ab03      	add	r3, sp, #12
 8013ad2:	9300      	str	r3, [sp, #0]
 8013ad4:	462a      	mov	r2, r5
 8013ad6:	4b16      	ldr	r3, [pc, #88]	; (8013b30 <_vfiprintf_r+0x258>)
 8013ad8:	a904      	add	r1, sp, #16
 8013ada:	4630      	mov	r0, r6
 8013adc:	f7fc f896 	bl	800fc0c <_printf_float>
 8013ae0:	4607      	mov	r7, r0
 8013ae2:	1c78      	adds	r0, r7, #1
 8013ae4:	d1d6      	bne.n	8013a94 <_vfiprintf_r+0x1bc>
 8013ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ae8:	07d9      	lsls	r1, r3, #31
 8013aea:	d405      	bmi.n	8013af8 <_vfiprintf_r+0x220>
 8013aec:	89ab      	ldrh	r3, [r5, #12]
 8013aee:	059a      	lsls	r2, r3, #22
 8013af0:	d402      	bmi.n	8013af8 <_vfiprintf_r+0x220>
 8013af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013af4:	f000 fad9 	bl	80140aa <__retarget_lock_release_recursive>
 8013af8:	89ab      	ldrh	r3, [r5, #12]
 8013afa:	065b      	lsls	r3, r3, #25
 8013afc:	f53f af12 	bmi.w	8013924 <_vfiprintf_r+0x4c>
 8013b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b02:	e711      	b.n	8013928 <_vfiprintf_r+0x50>
 8013b04:	ab03      	add	r3, sp, #12
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	462a      	mov	r2, r5
 8013b0a:	4b09      	ldr	r3, [pc, #36]	; (8013b30 <_vfiprintf_r+0x258>)
 8013b0c:	a904      	add	r1, sp, #16
 8013b0e:	4630      	mov	r0, r6
 8013b10:	f7fc fb20 	bl	8010154 <_printf_i>
 8013b14:	e7e4      	b.n	8013ae0 <_vfiprintf_r+0x208>
 8013b16:	bf00      	nop
 8013b18:	080282f0 	.word	0x080282f0
 8013b1c:	08028310 	.word	0x08028310
 8013b20:	080282d0 	.word	0x080282d0
 8013b24:	080282bc 	.word	0x080282bc
 8013b28:	080282c6 	.word	0x080282c6
 8013b2c:	0800fc0d 	.word	0x0800fc0d
 8013b30:	080138b3 	.word	0x080138b3
 8013b34:	080282c2 	.word	0x080282c2

08013b38 <nan>:
 8013b38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013b40 <nan+0x8>
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop
 8013b40:	00000000 	.word	0x00000000
 8013b44:	7ff80000 	.word	0x7ff80000

08013b48 <_sbrk_r>:
 8013b48:	b538      	push	{r3, r4, r5, lr}
 8013b4a:	4d06      	ldr	r5, [pc, #24]	; (8013b64 <_sbrk_r+0x1c>)
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	4604      	mov	r4, r0
 8013b50:	4608      	mov	r0, r1
 8013b52:	602b      	str	r3, [r5, #0]
 8013b54:	f7f4 fe92 	bl	800887c <_sbrk>
 8013b58:	1c43      	adds	r3, r0, #1
 8013b5a:	d102      	bne.n	8013b62 <_sbrk_r+0x1a>
 8013b5c:	682b      	ldr	r3, [r5, #0]
 8013b5e:	b103      	cbz	r3, 8013b62 <_sbrk_r+0x1a>
 8013b60:	6023      	str	r3, [r4, #0]
 8013b62:	bd38      	pop	{r3, r4, r5, pc}
 8013b64:	20000900 	.word	0x20000900

08013b68 <strncmp>:
 8013b68:	b510      	push	{r4, lr}
 8013b6a:	b16a      	cbz	r2, 8013b88 <strncmp+0x20>
 8013b6c:	3901      	subs	r1, #1
 8013b6e:	1884      	adds	r4, r0, r2
 8013b70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013b74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013b78:	4293      	cmp	r3, r2
 8013b7a:	d103      	bne.n	8013b84 <strncmp+0x1c>
 8013b7c:	42a0      	cmp	r0, r4
 8013b7e:	d001      	beq.n	8013b84 <strncmp+0x1c>
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d1f5      	bne.n	8013b70 <strncmp+0x8>
 8013b84:	1a98      	subs	r0, r3, r2
 8013b86:	bd10      	pop	{r4, pc}
 8013b88:	4610      	mov	r0, r2
 8013b8a:	e7fc      	b.n	8013b86 <strncmp+0x1e>

08013b8c <__swbuf_r>:
 8013b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b8e:	460e      	mov	r6, r1
 8013b90:	4614      	mov	r4, r2
 8013b92:	4605      	mov	r5, r0
 8013b94:	b118      	cbz	r0, 8013b9e <__swbuf_r+0x12>
 8013b96:	6983      	ldr	r3, [r0, #24]
 8013b98:	b90b      	cbnz	r3, 8013b9e <__swbuf_r+0x12>
 8013b9a:	f000 f9e7 	bl	8013f6c <__sinit>
 8013b9e:	4b21      	ldr	r3, [pc, #132]	; (8013c24 <__swbuf_r+0x98>)
 8013ba0:	429c      	cmp	r4, r3
 8013ba2:	d12b      	bne.n	8013bfc <__swbuf_r+0x70>
 8013ba4:	686c      	ldr	r4, [r5, #4]
 8013ba6:	69a3      	ldr	r3, [r4, #24]
 8013ba8:	60a3      	str	r3, [r4, #8]
 8013baa:	89a3      	ldrh	r3, [r4, #12]
 8013bac:	071a      	lsls	r2, r3, #28
 8013bae:	d52f      	bpl.n	8013c10 <__swbuf_r+0x84>
 8013bb0:	6923      	ldr	r3, [r4, #16]
 8013bb2:	b36b      	cbz	r3, 8013c10 <__swbuf_r+0x84>
 8013bb4:	6923      	ldr	r3, [r4, #16]
 8013bb6:	6820      	ldr	r0, [r4, #0]
 8013bb8:	1ac0      	subs	r0, r0, r3
 8013bba:	6963      	ldr	r3, [r4, #20]
 8013bbc:	b2f6      	uxtb	r6, r6
 8013bbe:	4283      	cmp	r3, r0
 8013bc0:	4637      	mov	r7, r6
 8013bc2:	dc04      	bgt.n	8013bce <__swbuf_r+0x42>
 8013bc4:	4621      	mov	r1, r4
 8013bc6:	4628      	mov	r0, r5
 8013bc8:	f000 f93c 	bl	8013e44 <_fflush_r>
 8013bcc:	bb30      	cbnz	r0, 8013c1c <__swbuf_r+0x90>
 8013bce:	68a3      	ldr	r3, [r4, #8]
 8013bd0:	3b01      	subs	r3, #1
 8013bd2:	60a3      	str	r3, [r4, #8]
 8013bd4:	6823      	ldr	r3, [r4, #0]
 8013bd6:	1c5a      	adds	r2, r3, #1
 8013bd8:	6022      	str	r2, [r4, #0]
 8013bda:	701e      	strb	r6, [r3, #0]
 8013bdc:	6963      	ldr	r3, [r4, #20]
 8013bde:	3001      	adds	r0, #1
 8013be0:	4283      	cmp	r3, r0
 8013be2:	d004      	beq.n	8013bee <__swbuf_r+0x62>
 8013be4:	89a3      	ldrh	r3, [r4, #12]
 8013be6:	07db      	lsls	r3, r3, #31
 8013be8:	d506      	bpl.n	8013bf8 <__swbuf_r+0x6c>
 8013bea:	2e0a      	cmp	r6, #10
 8013bec:	d104      	bne.n	8013bf8 <__swbuf_r+0x6c>
 8013bee:	4621      	mov	r1, r4
 8013bf0:	4628      	mov	r0, r5
 8013bf2:	f000 f927 	bl	8013e44 <_fflush_r>
 8013bf6:	b988      	cbnz	r0, 8013c1c <__swbuf_r+0x90>
 8013bf8:	4638      	mov	r0, r7
 8013bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bfc:	4b0a      	ldr	r3, [pc, #40]	; (8013c28 <__swbuf_r+0x9c>)
 8013bfe:	429c      	cmp	r4, r3
 8013c00:	d101      	bne.n	8013c06 <__swbuf_r+0x7a>
 8013c02:	68ac      	ldr	r4, [r5, #8]
 8013c04:	e7cf      	b.n	8013ba6 <__swbuf_r+0x1a>
 8013c06:	4b09      	ldr	r3, [pc, #36]	; (8013c2c <__swbuf_r+0xa0>)
 8013c08:	429c      	cmp	r4, r3
 8013c0a:	bf08      	it	eq
 8013c0c:	68ec      	ldreq	r4, [r5, #12]
 8013c0e:	e7ca      	b.n	8013ba6 <__swbuf_r+0x1a>
 8013c10:	4621      	mov	r1, r4
 8013c12:	4628      	mov	r0, r5
 8013c14:	f000 f81a 	bl	8013c4c <__swsetup_r>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d0cb      	beq.n	8013bb4 <__swbuf_r+0x28>
 8013c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8013c20:	e7ea      	b.n	8013bf8 <__swbuf_r+0x6c>
 8013c22:	bf00      	nop
 8013c24:	080282f0 	.word	0x080282f0
 8013c28:	08028310 	.word	0x08028310
 8013c2c:	080282d0 	.word	0x080282d0

08013c30 <__ascii_wctomb>:
 8013c30:	b149      	cbz	r1, 8013c46 <__ascii_wctomb+0x16>
 8013c32:	2aff      	cmp	r2, #255	; 0xff
 8013c34:	bf85      	ittet	hi
 8013c36:	238a      	movhi	r3, #138	; 0x8a
 8013c38:	6003      	strhi	r3, [r0, #0]
 8013c3a:	700a      	strbls	r2, [r1, #0]
 8013c3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013c40:	bf98      	it	ls
 8013c42:	2001      	movls	r0, #1
 8013c44:	4770      	bx	lr
 8013c46:	4608      	mov	r0, r1
 8013c48:	4770      	bx	lr
	...

08013c4c <__swsetup_r>:
 8013c4c:	4b32      	ldr	r3, [pc, #200]	; (8013d18 <__swsetup_r+0xcc>)
 8013c4e:	b570      	push	{r4, r5, r6, lr}
 8013c50:	681d      	ldr	r5, [r3, #0]
 8013c52:	4606      	mov	r6, r0
 8013c54:	460c      	mov	r4, r1
 8013c56:	b125      	cbz	r5, 8013c62 <__swsetup_r+0x16>
 8013c58:	69ab      	ldr	r3, [r5, #24]
 8013c5a:	b913      	cbnz	r3, 8013c62 <__swsetup_r+0x16>
 8013c5c:	4628      	mov	r0, r5
 8013c5e:	f000 f985 	bl	8013f6c <__sinit>
 8013c62:	4b2e      	ldr	r3, [pc, #184]	; (8013d1c <__swsetup_r+0xd0>)
 8013c64:	429c      	cmp	r4, r3
 8013c66:	d10f      	bne.n	8013c88 <__swsetup_r+0x3c>
 8013c68:	686c      	ldr	r4, [r5, #4]
 8013c6a:	89a3      	ldrh	r3, [r4, #12]
 8013c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c70:	0719      	lsls	r1, r3, #28
 8013c72:	d42c      	bmi.n	8013cce <__swsetup_r+0x82>
 8013c74:	06dd      	lsls	r5, r3, #27
 8013c76:	d411      	bmi.n	8013c9c <__swsetup_r+0x50>
 8013c78:	2309      	movs	r3, #9
 8013c7a:	6033      	str	r3, [r6, #0]
 8013c7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c80:	81a3      	strh	r3, [r4, #12]
 8013c82:	f04f 30ff 	mov.w	r0, #4294967295
 8013c86:	e03e      	b.n	8013d06 <__swsetup_r+0xba>
 8013c88:	4b25      	ldr	r3, [pc, #148]	; (8013d20 <__swsetup_r+0xd4>)
 8013c8a:	429c      	cmp	r4, r3
 8013c8c:	d101      	bne.n	8013c92 <__swsetup_r+0x46>
 8013c8e:	68ac      	ldr	r4, [r5, #8]
 8013c90:	e7eb      	b.n	8013c6a <__swsetup_r+0x1e>
 8013c92:	4b24      	ldr	r3, [pc, #144]	; (8013d24 <__swsetup_r+0xd8>)
 8013c94:	429c      	cmp	r4, r3
 8013c96:	bf08      	it	eq
 8013c98:	68ec      	ldreq	r4, [r5, #12]
 8013c9a:	e7e6      	b.n	8013c6a <__swsetup_r+0x1e>
 8013c9c:	0758      	lsls	r0, r3, #29
 8013c9e:	d512      	bpl.n	8013cc6 <__swsetup_r+0x7a>
 8013ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ca2:	b141      	cbz	r1, 8013cb6 <__swsetup_r+0x6a>
 8013ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ca8:	4299      	cmp	r1, r3
 8013caa:	d002      	beq.n	8013cb2 <__swsetup_r+0x66>
 8013cac:	4630      	mov	r0, r6
 8013cae:	f7ff fbe3 	bl	8013478 <_free_r>
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	6363      	str	r3, [r4, #52]	; 0x34
 8013cb6:	89a3      	ldrh	r3, [r4, #12]
 8013cb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013cbc:	81a3      	strh	r3, [r4, #12]
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	6063      	str	r3, [r4, #4]
 8013cc2:	6923      	ldr	r3, [r4, #16]
 8013cc4:	6023      	str	r3, [r4, #0]
 8013cc6:	89a3      	ldrh	r3, [r4, #12]
 8013cc8:	f043 0308 	orr.w	r3, r3, #8
 8013ccc:	81a3      	strh	r3, [r4, #12]
 8013cce:	6923      	ldr	r3, [r4, #16]
 8013cd0:	b94b      	cbnz	r3, 8013ce6 <__swsetup_r+0x9a>
 8013cd2:	89a3      	ldrh	r3, [r4, #12]
 8013cd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cdc:	d003      	beq.n	8013ce6 <__swsetup_r+0x9a>
 8013cde:	4621      	mov	r1, r4
 8013ce0:	4630      	mov	r0, r6
 8013ce2:	f000 fa07 	bl	80140f4 <__smakebuf_r>
 8013ce6:	89a0      	ldrh	r0, [r4, #12]
 8013ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013cec:	f010 0301 	ands.w	r3, r0, #1
 8013cf0:	d00a      	beq.n	8013d08 <__swsetup_r+0xbc>
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	60a3      	str	r3, [r4, #8]
 8013cf6:	6963      	ldr	r3, [r4, #20]
 8013cf8:	425b      	negs	r3, r3
 8013cfa:	61a3      	str	r3, [r4, #24]
 8013cfc:	6923      	ldr	r3, [r4, #16]
 8013cfe:	b943      	cbnz	r3, 8013d12 <__swsetup_r+0xc6>
 8013d00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013d04:	d1ba      	bne.n	8013c7c <__swsetup_r+0x30>
 8013d06:	bd70      	pop	{r4, r5, r6, pc}
 8013d08:	0781      	lsls	r1, r0, #30
 8013d0a:	bf58      	it	pl
 8013d0c:	6963      	ldrpl	r3, [r4, #20]
 8013d0e:	60a3      	str	r3, [r4, #8]
 8013d10:	e7f4      	b.n	8013cfc <__swsetup_r+0xb0>
 8013d12:	2000      	movs	r0, #0
 8013d14:	e7f7      	b.n	8013d06 <__swsetup_r+0xba>
 8013d16:	bf00      	nop
 8013d18:	20000040 	.word	0x20000040
 8013d1c:	080282f0 	.word	0x080282f0
 8013d20:	08028310 	.word	0x08028310
 8013d24:	080282d0 	.word	0x080282d0

08013d28 <abort>:
 8013d28:	b508      	push	{r3, lr}
 8013d2a:	2006      	movs	r0, #6
 8013d2c:	f000 fa96 	bl	801425c <raise>
 8013d30:	2001      	movs	r0, #1
 8013d32:	f7f4 fd2b 	bl	800878c <_exit>
	...

08013d38 <__sflush_r>:
 8013d38:	898a      	ldrh	r2, [r1, #12]
 8013d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d3e:	4605      	mov	r5, r0
 8013d40:	0710      	lsls	r0, r2, #28
 8013d42:	460c      	mov	r4, r1
 8013d44:	d458      	bmi.n	8013df8 <__sflush_r+0xc0>
 8013d46:	684b      	ldr	r3, [r1, #4]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	dc05      	bgt.n	8013d58 <__sflush_r+0x20>
 8013d4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	dc02      	bgt.n	8013d58 <__sflush_r+0x20>
 8013d52:	2000      	movs	r0, #0
 8013d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d5a:	2e00      	cmp	r6, #0
 8013d5c:	d0f9      	beq.n	8013d52 <__sflush_r+0x1a>
 8013d5e:	2300      	movs	r3, #0
 8013d60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d64:	682f      	ldr	r7, [r5, #0]
 8013d66:	602b      	str	r3, [r5, #0]
 8013d68:	d032      	beq.n	8013dd0 <__sflush_r+0x98>
 8013d6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d6c:	89a3      	ldrh	r3, [r4, #12]
 8013d6e:	075a      	lsls	r2, r3, #29
 8013d70:	d505      	bpl.n	8013d7e <__sflush_r+0x46>
 8013d72:	6863      	ldr	r3, [r4, #4]
 8013d74:	1ac0      	subs	r0, r0, r3
 8013d76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d78:	b10b      	cbz	r3, 8013d7e <__sflush_r+0x46>
 8013d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d7c:	1ac0      	subs	r0, r0, r3
 8013d7e:	2300      	movs	r3, #0
 8013d80:	4602      	mov	r2, r0
 8013d82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d84:	6a21      	ldr	r1, [r4, #32]
 8013d86:	4628      	mov	r0, r5
 8013d88:	47b0      	blx	r6
 8013d8a:	1c43      	adds	r3, r0, #1
 8013d8c:	89a3      	ldrh	r3, [r4, #12]
 8013d8e:	d106      	bne.n	8013d9e <__sflush_r+0x66>
 8013d90:	6829      	ldr	r1, [r5, #0]
 8013d92:	291d      	cmp	r1, #29
 8013d94:	d82c      	bhi.n	8013df0 <__sflush_r+0xb8>
 8013d96:	4a2a      	ldr	r2, [pc, #168]	; (8013e40 <__sflush_r+0x108>)
 8013d98:	40ca      	lsrs	r2, r1
 8013d9a:	07d6      	lsls	r6, r2, #31
 8013d9c:	d528      	bpl.n	8013df0 <__sflush_r+0xb8>
 8013d9e:	2200      	movs	r2, #0
 8013da0:	6062      	str	r2, [r4, #4]
 8013da2:	04d9      	lsls	r1, r3, #19
 8013da4:	6922      	ldr	r2, [r4, #16]
 8013da6:	6022      	str	r2, [r4, #0]
 8013da8:	d504      	bpl.n	8013db4 <__sflush_r+0x7c>
 8013daa:	1c42      	adds	r2, r0, #1
 8013dac:	d101      	bne.n	8013db2 <__sflush_r+0x7a>
 8013dae:	682b      	ldr	r3, [r5, #0]
 8013db0:	b903      	cbnz	r3, 8013db4 <__sflush_r+0x7c>
 8013db2:	6560      	str	r0, [r4, #84]	; 0x54
 8013db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013db6:	602f      	str	r7, [r5, #0]
 8013db8:	2900      	cmp	r1, #0
 8013dba:	d0ca      	beq.n	8013d52 <__sflush_r+0x1a>
 8013dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013dc0:	4299      	cmp	r1, r3
 8013dc2:	d002      	beq.n	8013dca <__sflush_r+0x92>
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	f7ff fb57 	bl	8013478 <_free_r>
 8013dca:	2000      	movs	r0, #0
 8013dcc:	6360      	str	r0, [r4, #52]	; 0x34
 8013dce:	e7c1      	b.n	8013d54 <__sflush_r+0x1c>
 8013dd0:	6a21      	ldr	r1, [r4, #32]
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	47b0      	blx	r6
 8013dd8:	1c41      	adds	r1, r0, #1
 8013dda:	d1c7      	bne.n	8013d6c <__sflush_r+0x34>
 8013ddc:	682b      	ldr	r3, [r5, #0]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d0c4      	beq.n	8013d6c <__sflush_r+0x34>
 8013de2:	2b1d      	cmp	r3, #29
 8013de4:	d001      	beq.n	8013dea <__sflush_r+0xb2>
 8013de6:	2b16      	cmp	r3, #22
 8013de8:	d101      	bne.n	8013dee <__sflush_r+0xb6>
 8013dea:	602f      	str	r7, [r5, #0]
 8013dec:	e7b1      	b.n	8013d52 <__sflush_r+0x1a>
 8013dee:	89a3      	ldrh	r3, [r4, #12]
 8013df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013df4:	81a3      	strh	r3, [r4, #12]
 8013df6:	e7ad      	b.n	8013d54 <__sflush_r+0x1c>
 8013df8:	690f      	ldr	r7, [r1, #16]
 8013dfa:	2f00      	cmp	r7, #0
 8013dfc:	d0a9      	beq.n	8013d52 <__sflush_r+0x1a>
 8013dfe:	0793      	lsls	r3, r2, #30
 8013e00:	680e      	ldr	r6, [r1, #0]
 8013e02:	bf08      	it	eq
 8013e04:	694b      	ldreq	r3, [r1, #20]
 8013e06:	600f      	str	r7, [r1, #0]
 8013e08:	bf18      	it	ne
 8013e0a:	2300      	movne	r3, #0
 8013e0c:	eba6 0807 	sub.w	r8, r6, r7
 8013e10:	608b      	str	r3, [r1, #8]
 8013e12:	f1b8 0f00 	cmp.w	r8, #0
 8013e16:	dd9c      	ble.n	8013d52 <__sflush_r+0x1a>
 8013e18:	6a21      	ldr	r1, [r4, #32]
 8013e1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013e1c:	4643      	mov	r3, r8
 8013e1e:	463a      	mov	r2, r7
 8013e20:	4628      	mov	r0, r5
 8013e22:	47b0      	blx	r6
 8013e24:	2800      	cmp	r0, #0
 8013e26:	dc06      	bgt.n	8013e36 <__sflush_r+0xfe>
 8013e28:	89a3      	ldrh	r3, [r4, #12]
 8013e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e2e:	81a3      	strh	r3, [r4, #12]
 8013e30:	f04f 30ff 	mov.w	r0, #4294967295
 8013e34:	e78e      	b.n	8013d54 <__sflush_r+0x1c>
 8013e36:	4407      	add	r7, r0
 8013e38:	eba8 0800 	sub.w	r8, r8, r0
 8013e3c:	e7e9      	b.n	8013e12 <__sflush_r+0xda>
 8013e3e:	bf00      	nop
 8013e40:	20400001 	.word	0x20400001

08013e44 <_fflush_r>:
 8013e44:	b538      	push	{r3, r4, r5, lr}
 8013e46:	690b      	ldr	r3, [r1, #16]
 8013e48:	4605      	mov	r5, r0
 8013e4a:	460c      	mov	r4, r1
 8013e4c:	b913      	cbnz	r3, 8013e54 <_fflush_r+0x10>
 8013e4e:	2500      	movs	r5, #0
 8013e50:	4628      	mov	r0, r5
 8013e52:	bd38      	pop	{r3, r4, r5, pc}
 8013e54:	b118      	cbz	r0, 8013e5e <_fflush_r+0x1a>
 8013e56:	6983      	ldr	r3, [r0, #24]
 8013e58:	b90b      	cbnz	r3, 8013e5e <_fflush_r+0x1a>
 8013e5a:	f000 f887 	bl	8013f6c <__sinit>
 8013e5e:	4b14      	ldr	r3, [pc, #80]	; (8013eb0 <_fflush_r+0x6c>)
 8013e60:	429c      	cmp	r4, r3
 8013e62:	d11b      	bne.n	8013e9c <_fflush_r+0x58>
 8013e64:	686c      	ldr	r4, [r5, #4]
 8013e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d0ef      	beq.n	8013e4e <_fflush_r+0xa>
 8013e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e70:	07d0      	lsls	r0, r2, #31
 8013e72:	d404      	bmi.n	8013e7e <_fflush_r+0x3a>
 8013e74:	0599      	lsls	r1, r3, #22
 8013e76:	d402      	bmi.n	8013e7e <_fflush_r+0x3a>
 8013e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e7a:	f000 f915 	bl	80140a8 <__retarget_lock_acquire_recursive>
 8013e7e:	4628      	mov	r0, r5
 8013e80:	4621      	mov	r1, r4
 8013e82:	f7ff ff59 	bl	8013d38 <__sflush_r>
 8013e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e88:	07da      	lsls	r2, r3, #31
 8013e8a:	4605      	mov	r5, r0
 8013e8c:	d4e0      	bmi.n	8013e50 <_fflush_r+0xc>
 8013e8e:	89a3      	ldrh	r3, [r4, #12]
 8013e90:	059b      	lsls	r3, r3, #22
 8013e92:	d4dd      	bmi.n	8013e50 <_fflush_r+0xc>
 8013e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e96:	f000 f908 	bl	80140aa <__retarget_lock_release_recursive>
 8013e9a:	e7d9      	b.n	8013e50 <_fflush_r+0xc>
 8013e9c:	4b05      	ldr	r3, [pc, #20]	; (8013eb4 <_fflush_r+0x70>)
 8013e9e:	429c      	cmp	r4, r3
 8013ea0:	d101      	bne.n	8013ea6 <_fflush_r+0x62>
 8013ea2:	68ac      	ldr	r4, [r5, #8]
 8013ea4:	e7df      	b.n	8013e66 <_fflush_r+0x22>
 8013ea6:	4b04      	ldr	r3, [pc, #16]	; (8013eb8 <_fflush_r+0x74>)
 8013ea8:	429c      	cmp	r4, r3
 8013eaa:	bf08      	it	eq
 8013eac:	68ec      	ldreq	r4, [r5, #12]
 8013eae:	e7da      	b.n	8013e66 <_fflush_r+0x22>
 8013eb0:	080282f0 	.word	0x080282f0
 8013eb4:	08028310 	.word	0x08028310
 8013eb8:	080282d0 	.word	0x080282d0

08013ebc <std>:
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	b510      	push	{r4, lr}
 8013ec0:	4604      	mov	r4, r0
 8013ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8013ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013eca:	6083      	str	r3, [r0, #8]
 8013ecc:	8181      	strh	r1, [r0, #12]
 8013ece:	6643      	str	r3, [r0, #100]	; 0x64
 8013ed0:	81c2      	strh	r2, [r0, #14]
 8013ed2:	6183      	str	r3, [r0, #24]
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	2208      	movs	r2, #8
 8013ed8:	305c      	adds	r0, #92	; 0x5c
 8013eda:	f7fb fdef 	bl	800fabc <memset>
 8013ede:	4b05      	ldr	r3, [pc, #20]	; (8013ef4 <std+0x38>)
 8013ee0:	6263      	str	r3, [r4, #36]	; 0x24
 8013ee2:	4b05      	ldr	r3, [pc, #20]	; (8013ef8 <std+0x3c>)
 8013ee4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013ee6:	4b05      	ldr	r3, [pc, #20]	; (8013efc <std+0x40>)
 8013ee8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013eea:	4b05      	ldr	r3, [pc, #20]	; (8013f00 <std+0x44>)
 8013eec:	6224      	str	r4, [r4, #32]
 8013eee:	6323      	str	r3, [r4, #48]	; 0x30
 8013ef0:	bd10      	pop	{r4, pc}
 8013ef2:	bf00      	nop
 8013ef4:	08014295 	.word	0x08014295
 8013ef8:	080142b7 	.word	0x080142b7
 8013efc:	080142ef 	.word	0x080142ef
 8013f00:	08014313 	.word	0x08014313

08013f04 <_cleanup_r>:
 8013f04:	4901      	ldr	r1, [pc, #4]	; (8013f0c <_cleanup_r+0x8>)
 8013f06:	f000 b8af 	b.w	8014068 <_fwalk_reent>
 8013f0a:	bf00      	nop
 8013f0c:	08013e45 	.word	0x08013e45

08013f10 <__sfmoreglue>:
 8013f10:	b570      	push	{r4, r5, r6, lr}
 8013f12:	1e4a      	subs	r2, r1, #1
 8013f14:	2568      	movs	r5, #104	; 0x68
 8013f16:	4355      	muls	r5, r2
 8013f18:	460e      	mov	r6, r1
 8013f1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013f1e:	f7ff fafb 	bl	8013518 <_malloc_r>
 8013f22:	4604      	mov	r4, r0
 8013f24:	b140      	cbz	r0, 8013f38 <__sfmoreglue+0x28>
 8013f26:	2100      	movs	r1, #0
 8013f28:	e9c0 1600 	strd	r1, r6, [r0]
 8013f2c:	300c      	adds	r0, #12
 8013f2e:	60a0      	str	r0, [r4, #8]
 8013f30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013f34:	f7fb fdc2 	bl	800fabc <memset>
 8013f38:	4620      	mov	r0, r4
 8013f3a:	bd70      	pop	{r4, r5, r6, pc}

08013f3c <__sfp_lock_acquire>:
 8013f3c:	4801      	ldr	r0, [pc, #4]	; (8013f44 <__sfp_lock_acquire+0x8>)
 8013f3e:	f000 b8b3 	b.w	80140a8 <__retarget_lock_acquire_recursive>
 8013f42:	bf00      	nop
 8013f44:	200008fc 	.word	0x200008fc

08013f48 <__sfp_lock_release>:
 8013f48:	4801      	ldr	r0, [pc, #4]	; (8013f50 <__sfp_lock_release+0x8>)
 8013f4a:	f000 b8ae 	b.w	80140aa <__retarget_lock_release_recursive>
 8013f4e:	bf00      	nop
 8013f50:	200008fc 	.word	0x200008fc

08013f54 <__sinit_lock_acquire>:
 8013f54:	4801      	ldr	r0, [pc, #4]	; (8013f5c <__sinit_lock_acquire+0x8>)
 8013f56:	f000 b8a7 	b.w	80140a8 <__retarget_lock_acquire_recursive>
 8013f5a:	bf00      	nop
 8013f5c:	200008f7 	.word	0x200008f7

08013f60 <__sinit_lock_release>:
 8013f60:	4801      	ldr	r0, [pc, #4]	; (8013f68 <__sinit_lock_release+0x8>)
 8013f62:	f000 b8a2 	b.w	80140aa <__retarget_lock_release_recursive>
 8013f66:	bf00      	nop
 8013f68:	200008f7 	.word	0x200008f7

08013f6c <__sinit>:
 8013f6c:	b510      	push	{r4, lr}
 8013f6e:	4604      	mov	r4, r0
 8013f70:	f7ff fff0 	bl	8013f54 <__sinit_lock_acquire>
 8013f74:	69a3      	ldr	r3, [r4, #24]
 8013f76:	b11b      	cbz	r3, 8013f80 <__sinit+0x14>
 8013f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f7c:	f7ff bff0 	b.w	8013f60 <__sinit_lock_release>
 8013f80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013f84:	6523      	str	r3, [r4, #80]	; 0x50
 8013f86:	4b13      	ldr	r3, [pc, #76]	; (8013fd4 <__sinit+0x68>)
 8013f88:	4a13      	ldr	r2, [pc, #76]	; (8013fd8 <__sinit+0x6c>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013f8e:	42a3      	cmp	r3, r4
 8013f90:	bf04      	itt	eq
 8013f92:	2301      	moveq	r3, #1
 8013f94:	61a3      	streq	r3, [r4, #24]
 8013f96:	4620      	mov	r0, r4
 8013f98:	f000 f820 	bl	8013fdc <__sfp>
 8013f9c:	6060      	str	r0, [r4, #4]
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	f000 f81c 	bl	8013fdc <__sfp>
 8013fa4:	60a0      	str	r0, [r4, #8]
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	f000 f818 	bl	8013fdc <__sfp>
 8013fac:	2200      	movs	r2, #0
 8013fae:	60e0      	str	r0, [r4, #12]
 8013fb0:	2104      	movs	r1, #4
 8013fb2:	6860      	ldr	r0, [r4, #4]
 8013fb4:	f7ff ff82 	bl	8013ebc <std>
 8013fb8:	68a0      	ldr	r0, [r4, #8]
 8013fba:	2201      	movs	r2, #1
 8013fbc:	2109      	movs	r1, #9
 8013fbe:	f7ff ff7d 	bl	8013ebc <std>
 8013fc2:	68e0      	ldr	r0, [r4, #12]
 8013fc4:	2202      	movs	r2, #2
 8013fc6:	2112      	movs	r1, #18
 8013fc8:	f7ff ff78 	bl	8013ebc <std>
 8013fcc:	2301      	movs	r3, #1
 8013fce:	61a3      	str	r3, [r4, #24]
 8013fd0:	e7d2      	b.n	8013f78 <__sinit+0xc>
 8013fd2:	bf00      	nop
 8013fd4:	08027e1c 	.word	0x08027e1c
 8013fd8:	08013f05 	.word	0x08013f05

08013fdc <__sfp>:
 8013fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fde:	4607      	mov	r7, r0
 8013fe0:	f7ff ffac 	bl	8013f3c <__sfp_lock_acquire>
 8013fe4:	4b1e      	ldr	r3, [pc, #120]	; (8014060 <__sfp+0x84>)
 8013fe6:	681e      	ldr	r6, [r3, #0]
 8013fe8:	69b3      	ldr	r3, [r6, #24]
 8013fea:	b913      	cbnz	r3, 8013ff2 <__sfp+0x16>
 8013fec:	4630      	mov	r0, r6
 8013fee:	f7ff ffbd 	bl	8013f6c <__sinit>
 8013ff2:	3648      	adds	r6, #72	; 0x48
 8013ff4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	d503      	bpl.n	8014004 <__sfp+0x28>
 8013ffc:	6833      	ldr	r3, [r6, #0]
 8013ffe:	b30b      	cbz	r3, 8014044 <__sfp+0x68>
 8014000:	6836      	ldr	r6, [r6, #0]
 8014002:	e7f7      	b.n	8013ff4 <__sfp+0x18>
 8014004:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014008:	b9d5      	cbnz	r5, 8014040 <__sfp+0x64>
 801400a:	4b16      	ldr	r3, [pc, #88]	; (8014064 <__sfp+0x88>)
 801400c:	60e3      	str	r3, [r4, #12]
 801400e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014012:	6665      	str	r5, [r4, #100]	; 0x64
 8014014:	f000 f847 	bl	80140a6 <__retarget_lock_init_recursive>
 8014018:	f7ff ff96 	bl	8013f48 <__sfp_lock_release>
 801401c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014020:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014024:	6025      	str	r5, [r4, #0]
 8014026:	61a5      	str	r5, [r4, #24]
 8014028:	2208      	movs	r2, #8
 801402a:	4629      	mov	r1, r5
 801402c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014030:	f7fb fd44 	bl	800fabc <memset>
 8014034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801403c:	4620      	mov	r0, r4
 801403e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014040:	3468      	adds	r4, #104	; 0x68
 8014042:	e7d9      	b.n	8013ff8 <__sfp+0x1c>
 8014044:	2104      	movs	r1, #4
 8014046:	4638      	mov	r0, r7
 8014048:	f7ff ff62 	bl	8013f10 <__sfmoreglue>
 801404c:	4604      	mov	r4, r0
 801404e:	6030      	str	r0, [r6, #0]
 8014050:	2800      	cmp	r0, #0
 8014052:	d1d5      	bne.n	8014000 <__sfp+0x24>
 8014054:	f7ff ff78 	bl	8013f48 <__sfp_lock_release>
 8014058:	230c      	movs	r3, #12
 801405a:	603b      	str	r3, [r7, #0]
 801405c:	e7ee      	b.n	801403c <__sfp+0x60>
 801405e:	bf00      	nop
 8014060:	08027e1c 	.word	0x08027e1c
 8014064:	ffff0001 	.word	0xffff0001

08014068 <_fwalk_reent>:
 8014068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801406c:	4606      	mov	r6, r0
 801406e:	4688      	mov	r8, r1
 8014070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014074:	2700      	movs	r7, #0
 8014076:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801407a:	f1b9 0901 	subs.w	r9, r9, #1
 801407e:	d505      	bpl.n	801408c <_fwalk_reent+0x24>
 8014080:	6824      	ldr	r4, [r4, #0]
 8014082:	2c00      	cmp	r4, #0
 8014084:	d1f7      	bne.n	8014076 <_fwalk_reent+0xe>
 8014086:	4638      	mov	r0, r7
 8014088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801408c:	89ab      	ldrh	r3, [r5, #12]
 801408e:	2b01      	cmp	r3, #1
 8014090:	d907      	bls.n	80140a2 <_fwalk_reent+0x3a>
 8014092:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014096:	3301      	adds	r3, #1
 8014098:	d003      	beq.n	80140a2 <_fwalk_reent+0x3a>
 801409a:	4629      	mov	r1, r5
 801409c:	4630      	mov	r0, r6
 801409e:	47c0      	blx	r8
 80140a0:	4307      	orrs	r7, r0
 80140a2:	3568      	adds	r5, #104	; 0x68
 80140a4:	e7e9      	b.n	801407a <_fwalk_reent+0x12>

080140a6 <__retarget_lock_init_recursive>:
 80140a6:	4770      	bx	lr

080140a8 <__retarget_lock_acquire_recursive>:
 80140a8:	4770      	bx	lr

080140aa <__retarget_lock_release_recursive>:
 80140aa:	4770      	bx	lr

080140ac <__swhatbuf_r>:
 80140ac:	b570      	push	{r4, r5, r6, lr}
 80140ae:	460e      	mov	r6, r1
 80140b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140b4:	2900      	cmp	r1, #0
 80140b6:	b096      	sub	sp, #88	; 0x58
 80140b8:	4614      	mov	r4, r2
 80140ba:	461d      	mov	r5, r3
 80140bc:	da07      	bge.n	80140ce <__swhatbuf_r+0x22>
 80140be:	2300      	movs	r3, #0
 80140c0:	602b      	str	r3, [r5, #0]
 80140c2:	89b3      	ldrh	r3, [r6, #12]
 80140c4:	061a      	lsls	r2, r3, #24
 80140c6:	d410      	bmi.n	80140ea <__swhatbuf_r+0x3e>
 80140c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80140cc:	e00e      	b.n	80140ec <__swhatbuf_r+0x40>
 80140ce:	466a      	mov	r2, sp
 80140d0:	f000 f946 	bl	8014360 <_fstat_r>
 80140d4:	2800      	cmp	r0, #0
 80140d6:	dbf2      	blt.n	80140be <__swhatbuf_r+0x12>
 80140d8:	9a01      	ldr	r2, [sp, #4]
 80140da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80140de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80140e2:	425a      	negs	r2, r3
 80140e4:	415a      	adcs	r2, r3
 80140e6:	602a      	str	r2, [r5, #0]
 80140e8:	e7ee      	b.n	80140c8 <__swhatbuf_r+0x1c>
 80140ea:	2340      	movs	r3, #64	; 0x40
 80140ec:	2000      	movs	r0, #0
 80140ee:	6023      	str	r3, [r4, #0]
 80140f0:	b016      	add	sp, #88	; 0x58
 80140f2:	bd70      	pop	{r4, r5, r6, pc}

080140f4 <__smakebuf_r>:
 80140f4:	898b      	ldrh	r3, [r1, #12]
 80140f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80140f8:	079d      	lsls	r5, r3, #30
 80140fa:	4606      	mov	r6, r0
 80140fc:	460c      	mov	r4, r1
 80140fe:	d507      	bpl.n	8014110 <__smakebuf_r+0x1c>
 8014100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014104:	6023      	str	r3, [r4, #0]
 8014106:	6123      	str	r3, [r4, #16]
 8014108:	2301      	movs	r3, #1
 801410a:	6163      	str	r3, [r4, #20]
 801410c:	b002      	add	sp, #8
 801410e:	bd70      	pop	{r4, r5, r6, pc}
 8014110:	ab01      	add	r3, sp, #4
 8014112:	466a      	mov	r2, sp
 8014114:	f7ff ffca 	bl	80140ac <__swhatbuf_r>
 8014118:	9900      	ldr	r1, [sp, #0]
 801411a:	4605      	mov	r5, r0
 801411c:	4630      	mov	r0, r6
 801411e:	f7ff f9fb 	bl	8013518 <_malloc_r>
 8014122:	b948      	cbnz	r0, 8014138 <__smakebuf_r+0x44>
 8014124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014128:	059a      	lsls	r2, r3, #22
 801412a:	d4ef      	bmi.n	801410c <__smakebuf_r+0x18>
 801412c:	f023 0303 	bic.w	r3, r3, #3
 8014130:	f043 0302 	orr.w	r3, r3, #2
 8014134:	81a3      	strh	r3, [r4, #12]
 8014136:	e7e3      	b.n	8014100 <__smakebuf_r+0xc>
 8014138:	4b0d      	ldr	r3, [pc, #52]	; (8014170 <__smakebuf_r+0x7c>)
 801413a:	62b3      	str	r3, [r6, #40]	; 0x28
 801413c:	89a3      	ldrh	r3, [r4, #12]
 801413e:	6020      	str	r0, [r4, #0]
 8014140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014144:	81a3      	strh	r3, [r4, #12]
 8014146:	9b00      	ldr	r3, [sp, #0]
 8014148:	6163      	str	r3, [r4, #20]
 801414a:	9b01      	ldr	r3, [sp, #4]
 801414c:	6120      	str	r0, [r4, #16]
 801414e:	b15b      	cbz	r3, 8014168 <__smakebuf_r+0x74>
 8014150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014154:	4630      	mov	r0, r6
 8014156:	f000 f915 	bl	8014384 <_isatty_r>
 801415a:	b128      	cbz	r0, 8014168 <__smakebuf_r+0x74>
 801415c:	89a3      	ldrh	r3, [r4, #12]
 801415e:	f023 0303 	bic.w	r3, r3, #3
 8014162:	f043 0301 	orr.w	r3, r3, #1
 8014166:	81a3      	strh	r3, [r4, #12]
 8014168:	89a0      	ldrh	r0, [r4, #12]
 801416a:	4305      	orrs	r5, r0
 801416c:	81a5      	strh	r5, [r4, #12]
 801416e:	e7cd      	b.n	801410c <__smakebuf_r+0x18>
 8014170:	08013f05 	.word	0x08013f05

08014174 <memmove>:
 8014174:	4288      	cmp	r0, r1
 8014176:	b510      	push	{r4, lr}
 8014178:	eb01 0402 	add.w	r4, r1, r2
 801417c:	d902      	bls.n	8014184 <memmove+0x10>
 801417e:	4284      	cmp	r4, r0
 8014180:	4623      	mov	r3, r4
 8014182:	d807      	bhi.n	8014194 <memmove+0x20>
 8014184:	1e43      	subs	r3, r0, #1
 8014186:	42a1      	cmp	r1, r4
 8014188:	d008      	beq.n	801419c <memmove+0x28>
 801418a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801418e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014192:	e7f8      	b.n	8014186 <memmove+0x12>
 8014194:	4402      	add	r2, r0
 8014196:	4601      	mov	r1, r0
 8014198:	428a      	cmp	r2, r1
 801419a:	d100      	bne.n	801419e <memmove+0x2a>
 801419c:	bd10      	pop	{r4, pc}
 801419e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80141a6:	e7f7      	b.n	8014198 <memmove+0x24>

080141a8 <__malloc_lock>:
 80141a8:	4801      	ldr	r0, [pc, #4]	; (80141b0 <__malloc_lock+0x8>)
 80141aa:	f7ff bf7d 	b.w	80140a8 <__retarget_lock_acquire_recursive>
 80141ae:	bf00      	nop
 80141b0:	200008f8 	.word	0x200008f8

080141b4 <__malloc_unlock>:
 80141b4:	4801      	ldr	r0, [pc, #4]	; (80141bc <__malloc_unlock+0x8>)
 80141b6:	f7ff bf78 	b.w	80140aa <__retarget_lock_release_recursive>
 80141ba:	bf00      	nop
 80141bc:	200008f8 	.word	0x200008f8

080141c0 <_realloc_r>:
 80141c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141c2:	4607      	mov	r7, r0
 80141c4:	4614      	mov	r4, r2
 80141c6:	460e      	mov	r6, r1
 80141c8:	b921      	cbnz	r1, 80141d4 <_realloc_r+0x14>
 80141ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80141ce:	4611      	mov	r1, r2
 80141d0:	f7ff b9a2 	b.w	8013518 <_malloc_r>
 80141d4:	b922      	cbnz	r2, 80141e0 <_realloc_r+0x20>
 80141d6:	f7ff f94f 	bl	8013478 <_free_r>
 80141da:	4625      	mov	r5, r4
 80141dc:	4628      	mov	r0, r5
 80141de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141e0:	f000 f8f2 	bl	80143c8 <_malloc_usable_size_r>
 80141e4:	42a0      	cmp	r0, r4
 80141e6:	d20f      	bcs.n	8014208 <_realloc_r+0x48>
 80141e8:	4621      	mov	r1, r4
 80141ea:	4638      	mov	r0, r7
 80141ec:	f7ff f994 	bl	8013518 <_malloc_r>
 80141f0:	4605      	mov	r5, r0
 80141f2:	2800      	cmp	r0, #0
 80141f4:	d0f2      	beq.n	80141dc <_realloc_r+0x1c>
 80141f6:	4631      	mov	r1, r6
 80141f8:	4622      	mov	r2, r4
 80141fa:	f7fe fc65 	bl	8012ac8 <memcpy>
 80141fe:	4631      	mov	r1, r6
 8014200:	4638      	mov	r0, r7
 8014202:	f7ff f939 	bl	8013478 <_free_r>
 8014206:	e7e9      	b.n	80141dc <_realloc_r+0x1c>
 8014208:	4635      	mov	r5, r6
 801420a:	e7e7      	b.n	80141dc <_realloc_r+0x1c>

0801420c <_raise_r>:
 801420c:	291f      	cmp	r1, #31
 801420e:	b538      	push	{r3, r4, r5, lr}
 8014210:	4604      	mov	r4, r0
 8014212:	460d      	mov	r5, r1
 8014214:	d904      	bls.n	8014220 <_raise_r+0x14>
 8014216:	2316      	movs	r3, #22
 8014218:	6003      	str	r3, [r0, #0]
 801421a:	f04f 30ff 	mov.w	r0, #4294967295
 801421e:	bd38      	pop	{r3, r4, r5, pc}
 8014220:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014222:	b112      	cbz	r2, 801422a <_raise_r+0x1e>
 8014224:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014228:	b94b      	cbnz	r3, 801423e <_raise_r+0x32>
 801422a:	4620      	mov	r0, r4
 801422c:	f000 f830 	bl	8014290 <_getpid_r>
 8014230:	462a      	mov	r2, r5
 8014232:	4601      	mov	r1, r0
 8014234:	4620      	mov	r0, r4
 8014236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801423a:	f000 b817 	b.w	801426c <_kill_r>
 801423e:	2b01      	cmp	r3, #1
 8014240:	d00a      	beq.n	8014258 <_raise_r+0x4c>
 8014242:	1c59      	adds	r1, r3, #1
 8014244:	d103      	bne.n	801424e <_raise_r+0x42>
 8014246:	2316      	movs	r3, #22
 8014248:	6003      	str	r3, [r0, #0]
 801424a:	2001      	movs	r0, #1
 801424c:	e7e7      	b.n	801421e <_raise_r+0x12>
 801424e:	2400      	movs	r4, #0
 8014250:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014254:	4628      	mov	r0, r5
 8014256:	4798      	blx	r3
 8014258:	2000      	movs	r0, #0
 801425a:	e7e0      	b.n	801421e <_raise_r+0x12>

0801425c <raise>:
 801425c:	4b02      	ldr	r3, [pc, #8]	; (8014268 <raise+0xc>)
 801425e:	4601      	mov	r1, r0
 8014260:	6818      	ldr	r0, [r3, #0]
 8014262:	f7ff bfd3 	b.w	801420c <_raise_r>
 8014266:	bf00      	nop
 8014268:	20000040 	.word	0x20000040

0801426c <_kill_r>:
 801426c:	b538      	push	{r3, r4, r5, lr}
 801426e:	4d07      	ldr	r5, [pc, #28]	; (801428c <_kill_r+0x20>)
 8014270:	2300      	movs	r3, #0
 8014272:	4604      	mov	r4, r0
 8014274:	4608      	mov	r0, r1
 8014276:	4611      	mov	r1, r2
 8014278:	602b      	str	r3, [r5, #0]
 801427a:	f7f4 fa77 	bl	800876c <_kill>
 801427e:	1c43      	adds	r3, r0, #1
 8014280:	d102      	bne.n	8014288 <_kill_r+0x1c>
 8014282:	682b      	ldr	r3, [r5, #0]
 8014284:	b103      	cbz	r3, 8014288 <_kill_r+0x1c>
 8014286:	6023      	str	r3, [r4, #0]
 8014288:	bd38      	pop	{r3, r4, r5, pc}
 801428a:	bf00      	nop
 801428c:	20000900 	.word	0x20000900

08014290 <_getpid_r>:
 8014290:	f7f4 ba64 	b.w	800875c <_getpid>

08014294 <__sread>:
 8014294:	b510      	push	{r4, lr}
 8014296:	460c      	mov	r4, r1
 8014298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801429c:	f000 f89c 	bl	80143d8 <_read_r>
 80142a0:	2800      	cmp	r0, #0
 80142a2:	bfab      	itete	ge
 80142a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80142a6:	89a3      	ldrhlt	r3, [r4, #12]
 80142a8:	181b      	addge	r3, r3, r0
 80142aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80142ae:	bfac      	ite	ge
 80142b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80142b2:	81a3      	strhlt	r3, [r4, #12]
 80142b4:	bd10      	pop	{r4, pc}

080142b6 <__swrite>:
 80142b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ba:	461f      	mov	r7, r3
 80142bc:	898b      	ldrh	r3, [r1, #12]
 80142be:	05db      	lsls	r3, r3, #23
 80142c0:	4605      	mov	r5, r0
 80142c2:	460c      	mov	r4, r1
 80142c4:	4616      	mov	r6, r2
 80142c6:	d505      	bpl.n	80142d4 <__swrite+0x1e>
 80142c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142cc:	2302      	movs	r3, #2
 80142ce:	2200      	movs	r2, #0
 80142d0:	f000 f868 	bl	80143a4 <_lseek_r>
 80142d4:	89a3      	ldrh	r3, [r4, #12]
 80142d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80142de:	81a3      	strh	r3, [r4, #12]
 80142e0:	4632      	mov	r2, r6
 80142e2:	463b      	mov	r3, r7
 80142e4:	4628      	mov	r0, r5
 80142e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142ea:	f000 b817 	b.w	801431c <_write_r>

080142ee <__sseek>:
 80142ee:	b510      	push	{r4, lr}
 80142f0:	460c      	mov	r4, r1
 80142f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142f6:	f000 f855 	bl	80143a4 <_lseek_r>
 80142fa:	1c43      	adds	r3, r0, #1
 80142fc:	89a3      	ldrh	r3, [r4, #12]
 80142fe:	bf15      	itete	ne
 8014300:	6560      	strne	r0, [r4, #84]	; 0x54
 8014302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801430a:	81a3      	strheq	r3, [r4, #12]
 801430c:	bf18      	it	ne
 801430e:	81a3      	strhne	r3, [r4, #12]
 8014310:	bd10      	pop	{r4, pc}

08014312 <__sclose>:
 8014312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014316:	f000 b813 	b.w	8014340 <_close_r>
	...

0801431c <_write_r>:
 801431c:	b538      	push	{r3, r4, r5, lr}
 801431e:	4d07      	ldr	r5, [pc, #28]	; (801433c <_write_r+0x20>)
 8014320:	4604      	mov	r4, r0
 8014322:	4608      	mov	r0, r1
 8014324:	4611      	mov	r1, r2
 8014326:	2200      	movs	r2, #0
 8014328:	602a      	str	r2, [r5, #0]
 801432a:	461a      	mov	r2, r3
 801432c:	f7f4 fa55 	bl	80087da <_write>
 8014330:	1c43      	adds	r3, r0, #1
 8014332:	d102      	bne.n	801433a <_write_r+0x1e>
 8014334:	682b      	ldr	r3, [r5, #0]
 8014336:	b103      	cbz	r3, 801433a <_write_r+0x1e>
 8014338:	6023      	str	r3, [r4, #0]
 801433a:	bd38      	pop	{r3, r4, r5, pc}
 801433c:	20000900 	.word	0x20000900

08014340 <_close_r>:
 8014340:	b538      	push	{r3, r4, r5, lr}
 8014342:	4d06      	ldr	r5, [pc, #24]	; (801435c <_close_r+0x1c>)
 8014344:	2300      	movs	r3, #0
 8014346:	4604      	mov	r4, r0
 8014348:	4608      	mov	r0, r1
 801434a:	602b      	str	r3, [r5, #0]
 801434c:	f7f4 fa61 	bl	8008812 <_close>
 8014350:	1c43      	adds	r3, r0, #1
 8014352:	d102      	bne.n	801435a <_close_r+0x1a>
 8014354:	682b      	ldr	r3, [r5, #0]
 8014356:	b103      	cbz	r3, 801435a <_close_r+0x1a>
 8014358:	6023      	str	r3, [r4, #0]
 801435a:	bd38      	pop	{r3, r4, r5, pc}
 801435c:	20000900 	.word	0x20000900

08014360 <_fstat_r>:
 8014360:	b538      	push	{r3, r4, r5, lr}
 8014362:	4d07      	ldr	r5, [pc, #28]	; (8014380 <_fstat_r+0x20>)
 8014364:	2300      	movs	r3, #0
 8014366:	4604      	mov	r4, r0
 8014368:	4608      	mov	r0, r1
 801436a:	4611      	mov	r1, r2
 801436c:	602b      	str	r3, [r5, #0]
 801436e:	f7f4 fa5c 	bl	800882a <_fstat>
 8014372:	1c43      	adds	r3, r0, #1
 8014374:	d102      	bne.n	801437c <_fstat_r+0x1c>
 8014376:	682b      	ldr	r3, [r5, #0]
 8014378:	b103      	cbz	r3, 801437c <_fstat_r+0x1c>
 801437a:	6023      	str	r3, [r4, #0]
 801437c:	bd38      	pop	{r3, r4, r5, pc}
 801437e:	bf00      	nop
 8014380:	20000900 	.word	0x20000900

08014384 <_isatty_r>:
 8014384:	b538      	push	{r3, r4, r5, lr}
 8014386:	4d06      	ldr	r5, [pc, #24]	; (80143a0 <_isatty_r+0x1c>)
 8014388:	2300      	movs	r3, #0
 801438a:	4604      	mov	r4, r0
 801438c:	4608      	mov	r0, r1
 801438e:	602b      	str	r3, [r5, #0]
 8014390:	f7f4 fa5b 	bl	800884a <_isatty>
 8014394:	1c43      	adds	r3, r0, #1
 8014396:	d102      	bne.n	801439e <_isatty_r+0x1a>
 8014398:	682b      	ldr	r3, [r5, #0]
 801439a:	b103      	cbz	r3, 801439e <_isatty_r+0x1a>
 801439c:	6023      	str	r3, [r4, #0]
 801439e:	bd38      	pop	{r3, r4, r5, pc}
 80143a0:	20000900 	.word	0x20000900

080143a4 <_lseek_r>:
 80143a4:	b538      	push	{r3, r4, r5, lr}
 80143a6:	4d07      	ldr	r5, [pc, #28]	; (80143c4 <_lseek_r+0x20>)
 80143a8:	4604      	mov	r4, r0
 80143aa:	4608      	mov	r0, r1
 80143ac:	4611      	mov	r1, r2
 80143ae:	2200      	movs	r2, #0
 80143b0:	602a      	str	r2, [r5, #0]
 80143b2:	461a      	mov	r2, r3
 80143b4:	f7f4 fa54 	bl	8008860 <_lseek>
 80143b8:	1c43      	adds	r3, r0, #1
 80143ba:	d102      	bne.n	80143c2 <_lseek_r+0x1e>
 80143bc:	682b      	ldr	r3, [r5, #0]
 80143be:	b103      	cbz	r3, 80143c2 <_lseek_r+0x1e>
 80143c0:	6023      	str	r3, [r4, #0]
 80143c2:	bd38      	pop	{r3, r4, r5, pc}
 80143c4:	20000900 	.word	0x20000900

080143c8 <_malloc_usable_size_r>:
 80143c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143cc:	1f18      	subs	r0, r3, #4
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	bfbc      	itt	lt
 80143d2:	580b      	ldrlt	r3, [r1, r0]
 80143d4:	18c0      	addlt	r0, r0, r3
 80143d6:	4770      	bx	lr

080143d8 <_read_r>:
 80143d8:	b538      	push	{r3, r4, r5, lr}
 80143da:	4d07      	ldr	r5, [pc, #28]	; (80143f8 <_read_r+0x20>)
 80143dc:	4604      	mov	r4, r0
 80143de:	4608      	mov	r0, r1
 80143e0:	4611      	mov	r1, r2
 80143e2:	2200      	movs	r2, #0
 80143e4:	602a      	str	r2, [r5, #0]
 80143e6:	461a      	mov	r2, r3
 80143e8:	f7f4 f9da 	bl	80087a0 <_read>
 80143ec:	1c43      	adds	r3, r0, #1
 80143ee:	d102      	bne.n	80143f6 <_read_r+0x1e>
 80143f0:	682b      	ldr	r3, [r5, #0]
 80143f2:	b103      	cbz	r3, 80143f6 <_read_r+0x1e>
 80143f4:	6023      	str	r3, [r4, #0]
 80143f6:	bd38      	pop	{r3, r4, r5, pc}
 80143f8:	20000900 	.word	0x20000900

080143fc <_init>:
 80143fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143fe:	bf00      	nop
 8014400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014402:	bc08      	pop	{r3}
 8014404:	469e      	mov	lr, r3
 8014406:	4770      	bx	lr

08014408 <_fini>:
 8014408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801440a:	bf00      	nop
 801440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801440e:	bc08      	pop	{r3}
 8014410:	469e      	mov	lr, r3
 8014412:	4770      	bx	lr
