
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c434  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a10  0800c5d8  0800c5d8  0001c5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ffe8  0801ffe8  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  0801ffe8  0801ffe8  0002ffe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fff0  0801fff0  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fff0  0801fff0  0002fff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fff4  0801fff4  0002fff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0801fff8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000210  08020208  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08020208  00030630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001663f  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003907  00000000  00000000  0004687f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0004a188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00005b82  00000000  00000000  0004af38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017726  00000000  00000000  00050aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008b33d  00000000  00000000  000681e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000f351d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c48  00000000  00000000  000f3570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a44  00000000  00000000  000f41b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c5bc 	.word	0x0800c5bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800c5bc 	.word	0x0800c5bc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fe67 	bl	8001db4 <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fe5e 	bl	8001db4 <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	460b      	mov	r3, r1
 80011a0:	80fb      	strh	r3, [r7, #6]
 80011a2:	4613      	mov	r3, r2
 80011a4:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e008      	b.n	80011be <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80011ac:	88ba      	ldrh	r2, [r7, #4]
 80011ae:	8c3b      	ldrh	r3, [r7, #32]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ffbf 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dbf0      	blt.n	80011ac <GFX_DrawFillRectangle+0x1c>
    }

}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	4611      	mov	r1, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	80fb      	strh	r3, [r7, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	f1c3 0301 	rsb	r3, r3, #1
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	461a      	mov	r2, r3
 80011fc:	03d2      	lsls	r2, r2, #15
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	b29b      	uxth	r3, r3
 8001204:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800120e:	e0b5      	b.n	800137c <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001210:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0e      	blt.n	8001236 <GFX_DrawCircleHelper+0x62>
            y--;
 8001218:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800121c:	b29b      	uxth	r3, r3
 800121e:	3b01      	subs	r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001224:	8b7b      	ldrh	r3, [r7, #26]
 8001226:	3302      	adds	r3, #2
 8001228:	b29b      	uxth	r3, r3
 800122a:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800122c:	8bfa      	ldrh	r2, [r7, #30]
 800122e:	8b7b      	ldrh	r3, [r7, #26]
 8001230:	4413      	add	r3, r2
 8001232:	b29b      	uxth	r3, r3
 8001234:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001236:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800123a:	b29b      	uxth	r3, r3
 800123c:	3301      	adds	r3, #1
 800123e:	b29b      	uxth	r3, r3
 8001240:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001242:	8bbb      	ldrh	r3, [r7, #28]
 8001244:	3302      	adds	r3, #2
 8001246:	b29b      	uxth	r3, r3
 8001248:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800124a:	8bfa      	ldrh	r2, [r7, #30]
 800124c:	8bbb      	ldrh	r3, [r7, #28]
 800124e:	4413      	add	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	2b00      	cmp	r3, #0
 800125c:	d01f      	beq.n	800129e <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	b29a      	uxth	r2, r3
 8001262:	8b3b      	ldrh	r3, [r7, #24]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	b218      	sxth	r0, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	b29a      	uxth	r2, r3
 800126e:	8afb      	ldrh	r3, [r7, #22]
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	b21b      	sxth	r3, r3
 8001276:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001278:	4619      	mov	r1, r3
 800127a:	f000 fd9b 	bl	8001db4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	b29a      	uxth	r2, r3
 8001282:	8afb      	ldrh	r3, [r7, #22]
 8001284:	4413      	add	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	b218      	sxth	r0, r3
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	b29a      	uxth	r2, r3
 800128e:	8b3b      	ldrh	r3, [r7, #24]
 8001290:	4413      	add	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	b21b      	sxth	r3, r3
 8001296:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001298:	4619      	mov	r1, r3
 800129a:	f000 fd8b 	bl	8001db4 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 800129e:	797b      	ldrb	r3, [r7, #5]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d01f      	beq.n	80012e8 <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	8b3b      	ldrh	r3, [r7, #24]
 80012ae:	4413      	add	r3, r2
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	b218      	sxth	r0, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	8afb      	ldrh	r3, [r7, #22]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	b21b      	sxth	r3, r3
 80012c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012c2:	4619      	mov	r1, r3
 80012c4:	f000 fd76 	bl	8001db4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	8afb      	ldrh	r3, [r7, #22]
 80012ce:	4413      	add	r3, r2
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b218      	sxth	r0, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	8b3b      	ldrh	r3, [r7, #24]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b21b      	sxth	r3, r3
 80012e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012e2:	4619      	mov	r1, r3
 80012e4:	f000 fd66 	bl	8001db4 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 80012e8:	797b      	ldrb	r3, [r7, #5]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d01f      	beq.n	8001332 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	8afb      	ldrh	r3, [r7, #22]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b218      	sxth	r0, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	b29a      	uxth	r2, r3
 8001302:	8b3b      	ldrh	r3, [r7, #24]
 8001304:	4413      	add	r3, r2
 8001306:	b29b      	uxth	r3, r3
 8001308:	b21b      	sxth	r3, r3
 800130a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800130c:	4619      	mov	r1, r3
 800130e:	f000 fd51 	bl	8001db4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	b29a      	uxth	r2, r3
 8001316:	8b3b      	ldrh	r3, [r7, #24]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b29b      	uxth	r3, r3
 800131c:	b218      	sxth	r0, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	b29a      	uxth	r2, r3
 8001322:	8afb      	ldrh	r3, [r7, #22]
 8001324:	4413      	add	r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	b21b      	sxth	r3, r3
 800132a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800132c:	4619      	mov	r1, r3
 800132e:	f000 fd41 	bl	8001db4 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001332:	797b      	ldrb	r3, [r7, #5]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d01f      	beq.n	800137c <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	b29a      	uxth	r2, r3
 8001340:	8afb      	ldrh	r3, [r7, #22]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	b218      	sxth	r0, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	b29a      	uxth	r2, r3
 800134c:	8b3b      	ldrh	r3, [r7, #24]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	b29b      	uxth	r3, r3
 8001352:	b21b      	sxth	r3, r3
 8001354:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001356:	4619      	mov	r1, r3
 8001358:	f000 fd2c 	bl	8001db4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	b29a      	uxth	r2, r3
 8001360:	8b3b      	ldrh	r3, [r7, #24]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b29b      	uxth	r3, r3
 8001366:	b218      	sxth	r0, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	b29a      	uxth	r2, r3
 800136c:	8afb      	ldrh	r3, [r7, #22]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b29b      	uxth	r3, r3
 8001372:	b21b      	sxth	r3, r3
 8001374:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001376:	4619      	mov	r1, r3
 8001378:	f000 fd1c 	bl	8001db4 <ILI9341_WritePixel>
    while (x<y) {
 800137c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001380:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001384:	429a      	cmp	r2, r3
 8001386:	f6ff af43 	blt.w	8001210 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	4611      	mov	r1, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	460b      	mov	r3, r1
 80013a4:	80fb      	strh	r3, [r7, #6]
 80013a6:	4613      	mov	r3, r2
 80013a8:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f1c3 0301 	rsb	r3, r3, #1
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	461a      	mov	r2, r3
 80013bc:	03d2      	lsls	r2, r2, #15
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80013ce:	e073      	b.n	80014b8 <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 80013d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0e      	blt.n	80013f6 <GFX_DrawFillCircleHelper+0x62>
            y--;
 80013d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3b01      	subs	r3, #1
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80013e4:	8b7b      	ldrh	r3, [r7, #26]
 80013e6:	3302      	adds	r3, #2
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80013ec:	8bfa      	ldrh	r2, [r7, #30]
 80013ee:	8b7b      	ldrh	r3, [r7, #26]
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80013f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3301      	adds	r3, #1
 80013fe:	b29b      	uxth	r3, r3
 8001400:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	3302      	adds	r3, #2
 8001406:	b29b      	uxth	r3, r3
 8001408:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800140a:	8bfa      	ldrh	r2, [r7, #30]
 800140c:	8bbb      	ldrh	r3, [r7, #28]
 800140e:	4413      	add	r3, r2
 8001410:	b29b      	uxth	r3, r3
 8001412:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001414:	797b      	ldrb	r3, [r7, #5]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d023      	beq.n	8001466 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800141e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	18d0      	adds	r0, r2, r3
 8001426:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	1ad1      	subs	r1, r2, r3
 800142e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800143a:	441a      	add	r2, r3
 800143c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800143e:	f7ff fe7a 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001442:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	18d0      	adds	r0, r2, r3
 800144a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	1ad1      	subs	r1, r2, r3
 8001452:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800145e:	441a      	add	r2, r3
 8001460:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001462:	f7ff fe68 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001466:	797b      	ldrb	r3, [r7, #5]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d023      	beq.n	80014b8 <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001470:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	1ad0      	subs	r0, r2, r3
 8001478:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	1ad1      	subs	r1, r2, r3
 8001480:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800148c:	441a      	add	r2, r3
 800148e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001490:	f7ff fe51 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001494:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	1ad0      	subs	r0, r2, r3
 800149c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	1ad1      	subs	r1, r2, r3
 80014a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014b0:	441a      	add	r2, r3
 80014b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014b4:	f7ff fe3f 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 80014b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	db85      	blt.n	80013d0 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3720      	adds	r7, #32
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af02      	add	r7, sp, #8
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	4611      	mov	r1, r2
 80014da:	461a      	mov	r2, r3
 80014dc:	460b      	mov	r3, r1
 80014de:	80fb      	strh	r3, [r7, #6]
 80014e0:	4613      	mov	r3, r2
 80014e2:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 80014e4:	8b3a      	ldrh	r2, [r7, #24]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	18d0      	adds	r0, r2, r3
 80014ea:	88fa      	ldrh	r2, [r7, #6]
 80014ec:	8b3b      	ldrh	r3, [r7, #24]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	1ad2      	subs	r2, r2, r3
 80014f2:	8bbb      	ldrh	r3, [r7, #28]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	f7ff fe35 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80014fa:	8b3a      	ldrh	r2, [r7, #24]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	18d0      	adds	r0, r2, r3
 8001500:	88ba      	ldrh	r2, [r7, #4]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4413      	add	r3, r2
 8001506:	1e59      	subs	r1, r3, #1
 8001508:	88fa      	ldrh	r2, [r7, #6]
 800150a:	8b3b      	ldrh	r3, [r7, #24]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	1ad2      	subs	r2, r2, r3
 8001510:	8bbb      	ldrh	r3, [r7, #28]
 8001512:	f7ff fe27 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001516:	8b3a      	ldrh	r2, [r7, #24]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	18d1      	adds	r1, r2, r3
 800151c:	88ba      	ldrh	r2, [r7, #4]
 800151e:	8b3b      	ldrh	r3, [r7, #24]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	1ad2      	subs	r2, r2, r3
 8001524:	8bbb      	ldrh	r3, [r7, #28]
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff fe05 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800152c:	88fa      	ldrh	r2, [r7, #6]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	1e58      	subs	r0, r3, #1
 8001534:	8b3a      	ldrh	r2, [r7, #24]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	18d1      	adds	r1, r2, r3
 800153a:	88ba      	ldrh	r2, [r7, #4]
 800153c:	8b3b      	ldrh	r3, [r7, #24]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	1ad2      	subs	r2, r2, r3
 8001542:	8bbb      	ldrh	r3, [r7, #28]
 8001544:	f7ff fdf7 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 8001548:	8b3a      	ldrh	r2, [r7, #24]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	18d0      	adds	r0, r2, r3
 800154e:	8b3a      	ldrh	r2, [r7, #24]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	18d1      	adds	r1, r2, r3
 8001554:	8b3a      	ldrh	r2, [r7, #24]
 8001556:	8bbb      	ldrh	r3, [r7, #28]
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2301      	movs	r3, #1
 800155c:	f7ff fe3a 	bl	80011d4 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8001560:	88fa      	ldrh	r2, [r7, #6]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	441a      	add	r2, r3
 8001566:	8b3b      	ldrh	r3, [r7, #24]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	8b3a      	ldrh	r2, [r7, #24]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	18d1      	adds	r1, r2, r3
 8001572:	8b3a      	ldrh	r2, [r7, #24]
 8001574:	8bbb      	ldrh	r3, [r7, #28]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2302      	movs	r3, #2
 800157a:	f7ff fe2b 	bl	80011d4 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 800157e:	88fa      	ldrh	r2, [r7, #6]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	441a      	add	r2, r3
 8001584:	8b3b      	ldrh	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	1e58      	subs	r0, r3, #1
 800158a:	88ba      	ldrh	r2, [r7, #4]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	441a      	add	r2, r3
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	1e59      	subs	r1, r3, #1
 8001596:	8b3a      	ldrh	r2, [r7, #24]
 8001598:	8bbb      	ldrh	r3, [r7, #28]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2304      	movs	r3, #4
 800159e:	f7ff fe19 	bl	80011d4 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80015a2:	8b3a      	ldrh	r2, [r7, #24]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	18d0      	adds	r0, r2, r3
 80015a8:	88ba      	ldrh	r2, [r7, #4]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	441a      	add	r2, r3
 80015ae:	8b3b      	ldrh	r3, [r7, #24]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	1e59      	subs	r1, r3, #1
 80015b4:	8b3a      	ldrh	r2, [r7, #24]
 80015b6:	8bbb      	ldrh	r3, [r7, #28]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2308      	movs	r3, #8
 80015bc:	f7ff fe0a 	bl	80011d4 <GFX_DrawCircleHelper>
}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	4611      	mov	r1, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	460b      	mov	r3, r1
 80015d8:	80fb      	strh	r3, [r7, #6]
 80015da:	4613      	mov	r3, r2
 80015dc:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 80015de:	8c3a      	ldrh	r2, [r7, #32]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	18d0      	adds	r0, r2, r3
 80015e4:	8c3b      	ldrh	r3, [r7, #32]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	88fa      	ldrh	r2, [r7, #6]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	88b9      	ldrh	r1, [r7, #4]
 80015f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	460b      	mov	r3, r1
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	f7ff fdc9 	bl	8001190 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80015fe:	88fa      	ldrh	r2, [r7, #6]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	441a      	add	r2, r3
 8001604:	8c3b      	ldrh	r3, [r7, #32]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	1e58      	subs	r0, r3, #1
 800160a:	8c3a      	ldrh	r2, [r7, #32]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	18d1      	adds	r1, r2, r3
 8001610:	8c3b      	ldrh	r3, [r7, #32]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	b29b      	uxth	r3, r3
 8001616:	88ba      	ldrh	r2, [r7, #4]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	b21b      	sxth	r3, r3
 8001622:	8c3c      	ldrh	r4, [r7, #32]
 8001624:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001626:	9201      	str	r2, [sp, #4]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	4622      	mov	r2, r4
 800162e:	f7ff feb1 	bl	8001394 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001632:	8c3a      	ldrh	r2, [r7, #32]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	18d0      	adds	r0, r2, r3
 8001638:	8c3a      	ldrh	r2, [r7, #32]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	18d1      	adds	r1, r2, r3
 800163e:	8c3b      	ldrh	r3, [r7, #32]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	b29b      	uxth	r3, r3
 8001644:	88ba      	ldrh	r2, [r7, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	b29b      	uxth	r3, r3
 800164a:	3b01      	subs	r3, #1
 800164c:	b29b      	uxth	r3, r3
 800164e:	b21b      	sxth	r3, r3
 8001650:	8c3c      	ldrh	r4, [r7, #32]
 8001652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001654:	9201      	str	r2, [sp, #4]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2302      	movs	r3, #2
 800165a:	4622      	mov	r2, r4
 800165c:	f7ff fe9a 	bl	8001394 <GFX_DrawFillCircleHelper>
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}

08001668 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <EF_SetFont+0x1c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000274 	.word	0x20000274

08001688 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <EF_GetFontHeight+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	781b      	ldrb	r3, [r3, #0]
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	20000274 	.word	0x20000274

080016a0 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <EF_GetFontStartChar+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	785b      	ldrb	r3, [r3, #1]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	20000274 	.word	0x20000274

080016b8 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <EF_GetFontEndChar+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	789b      	ldrb	r3, [r3, #2]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	20000274 	.word	0x20000274

080016d0 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <EF_GetFontSpaceWidth+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	78db      	ldrb	r3, [r3, #3]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	20000274 	.word	0x20000274

080016e8 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	460a      	mov	r2, r1
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	4613      	mov	r3, r2
 80016f6:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2bc5      	cmp	r3, #197	; 0xc5
 80016fc:	d052      	beq.n	80017a4 <EF_DecodePolish+0xbc>
 80016fe:	2bc5      	cmp	r3, #197	; 0xc5
 8001700:	f300 80e7 	bgt.w	80018d2 <EF_DecodePolish+0x1ea>
 8001704:	2bc3      	cmp	r3, #195	; 0xc3
 8001706:	d002      	beq.n	800170e <EF_DecodePolish+0x26>
 8001708:	2bc4      	cmp	r3, #196	; 0xc4
 800170a:	d00a      	beq.n	8001722 <EF_DecodePolish+0x3a>
 800170c:	e0e1      	b.n	80018d2 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b93      	cmp	r3, #147	; 0x93
 8001712:	d002      	beq.n	800171a <EF_DecodePolish+0x32>
 8001714:	2bb3      	cmp	r3, #179	; 0xb3
 8001716:	d002      	beq.n	800171e <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001718:	e0db      	b.n	80018d2 <EF_DecodePolish+0x1ea>
			return 0x84;
 800171a:	2384      	movs	r3, #132	; 0x84
 800171c:	e0da      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			return 0x8D;
 800171e:	238d      	movs	r3, #141	; 0x8d
 8001720:	e0d8      	b.n	80018d4 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	3b84      	subs	r3, #132	; 0x84
 8001726:	2b15      	cmp	r3, #21
 8001728:	f200 80d0 	bhi.w	80018cc <EF_DecodePolish+0x1e4>
 800172c:	a201      	add	r2, pc, #4	; (adr r2, 8001734 <EF_DecodePolish+0x4c>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	0800178d 	.word	0x0800178d
 8001738:	08001799 	.word	0x08001799
 800173c:	08001795 	.word	0x08001795
 8001740:	080017a1 	.word	0x080017a1
 8001744:	080018cd 	.word	0x080018cd
 8001748:	080018cd 	.word	0x080018cd
 800174c:	080018cd 	.word	0x080018cd
 8001750:	080018cd 	.word	0x080018cd
 8001754:	080018cd 	.word	0x080018cd
 8001758:	080018cd 	.word	0x080018cd
 800175c:	080018cd 	.word	0x080018cd
 8001760:	080018cd 	.word	0x080018cd
 8001764:	080018cd 	.word	0x080018cd
 8001768:	080018cd 	.word	0x080018cd
 800176c:	080018cd 	.word	0x080018cd
 8001770:	080018cd 	.word	0x080018cd
 8001774:	080018cd 	.word	0x080018cd
 8001778:	080018cd 	.word	0x080018cd
 800177c:	080018cd 	.word	0x080018cd
 8001780:	080018cd 	.word	0x080018cd
 8001784:	08001791 	.word	0x08001791
 8001788:	0800179d 	.word	0x0800179d
		{
		case 0x84: // Ą
			return 0x7F;
 800178c:	237f      	movs	r3, #127	; 0x7f
 800178e:	e0a1      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001790:	2381      	movs	r3, #129	; 0x81
 8001792:	e09f      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	e09d      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001798:	2388      	movs	r3, #136	; 0x88
 800179a:	e09b      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 800179c:	238a      	movs	r3, #138	; 0x8a
 800179e:	e099      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 80017a0:	2389      	movs	r3, #137	; 0x89
 80017a2:	e097      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	3b81      	subs	r3, #129	; 0x81
 80017a8:	2b3b      	cmp	r3, #59	; 0x3b
 80017aa:	f200 8091 	bhi.w	80018d0 <EF_DecodePolish+0x1e8>
 80017ae:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <EF_DecodePolish+0xcc>)
 80017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b4:	080018a5 	.word	0x080018a5
 80017b8:	080018b9 	.word	0x080018b9
 80017bc:	080018a9 	.word	0x080018a9
 80017c0:	080018bd 	.word	0x080018bd
 80017c4:	080018d1 	.word	0x080018d1
 80017c8:	080018d1 	.word	0x080018d1
 80017cc:	080018d1 	.word	0x080018d1
 80017d0:	080018d1 	.word	0x080018d1
 80017d4:	080018d1 	.word	0x080018d1
 80017d8:	080018d1 	.word	0x080018d1
 80017dc:	080018d1 	.word	0x080018d1
 80017e0:	080018d1 	.word	0x080018d1
 80017e4:	080018d1 	.word	0x080018d1
 80017e8:	080018d1 	.word	0x080018d1
 80017ec:	080018d1 	.word	0x080018d1
 80017f0:	080018d1 	.word	0x080018d1
 80017f4:	080018d1 	.word	0x080018d1
 80017f8:	080018d1 	.word	0x080018d1
 80017fc:	080018d1 	.word	0x080018d1
 8001800:	080018d1 	.word	0x080018d1
 8001804:	080018d1 	.word	0x080018d1
 8001808:	080018d1 	.word	0x080018d1
 800180c:	080018d1 	.word	0x080018d1
 8001810:	080018d1 	.word	0x080018d1
 8001814:	080018d1 	.word	0x080018d1
 8001818:	080018ad 	.word	0x080018ad
 800181c:	080018c1 	.word	0x080018c1
 8001820:	080018d1 	.word	0x080018d1
 8001824:	080018d1 	.word	0x080018d1
 8001828:	080018d1 	.word	0x080018d1
 800182c:	080018d1 	.word	0x080018d1
 8001830:	080018d1 	.word	0x080018d1
 8001834:	080018d1 	.word	0x080018d1
 8001838:	080018d1 	.word	0x080018d1
 800183c:	080018d1 	.word	0x080018d1
 8001840:	080018d1 	.word	0x080018d1
 8001844:	080018d1 	.word	0x080018d1
 8001848:	080018d1 	.word	0x080018d1
 800184c:	080018d1 	.word	0x080018d1
 8001850:	080018d1 	.word	0x080018d1
 8001854:	080018d1 	.word	0x080018d1
 8001858:	080018d1 	.word	0x080018d1
 800185c:	080018d1 	.word	0x080018d1
 8001860:	080018d1 	.word	0x080018d1
 8001864:	080018d1 	.word	0x080018d1
 8001868:	080018d1 	.word	0x080018d1
 800186c:	080018d1 	.word	0x080018d1
 8001870:	080018d1 	.word	0x080018d1
 8001874:	080018d1 	.word	0x080018d1
 8001878:	080018d1 	.word	0x080018d1
 800187c:	080018d1 	.word	0x080018d1
 8001880:	080018d1 	.word	0x080018d1
 8001884:	080018d1 	.word	0x080018d1
 8001888:	080018d1 	.word	0x080018d1
 800188c:	080018d1 	.word	0x080018d1
 8001890:	080018d1 	.word	0x080018d1
 8001894:	080018b1 	.word	0x080018b1
 8001898:	080018c5 	.word	0x080018c5
 800189c:	080018b5 	.word	0x080018b5
 80018a0:	080018c9 	.word	0x080018c9
		{
		case 0x81: // Ł
			return 0x82;
 80018a4:	2382      	movs	r3, #130	; 0x82
 80018a6:	e015      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 80018a8:	2383      	movs	r3, #131	; 0x83
 80018aa:	e013      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 80018ac:	2385      	movs	r3, #133	; 0x85
 80018ae:	e011      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 80018b0:	2386      	movs	r3, #134	; 0x86
 80018b2:	e00f      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 80018b4:	2387      	movs	r3, #135	; 0x87
 80018b6:	e00d      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 80018b8:	238b      	movs	r3, #139	; 0x8b
 80018ba:	e00b      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 80018bc:	238c      	movs	r3, #140	; 0x8c
 80018be:	e009      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 80018c0:	238e      	movs	r3, #142	; 0x8e
 80018c2:	e007      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 80018c4:	238f      	movs	r3, #143	; 0x8f
 80018c6:	e005      	b.n	80018d4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 80018c8:	2390      	movs	r3, #144	; 0x90
 80018ca:	e003      	b.n	80018d4 <EF_DecodePolish+0x1ec>
		break;
 80018cc:	bf00      	nop
 80018ce:	e000      	b.n	80018d2 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 80018d0:	bf00      	nop
	}

	return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	71fb      	strb	r3, [r7, #7]
 80018f2:	4603      	mov	r3, r0
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 80018fe:	f7ff fecf 	bl	80016a0 <EF_GetFontStartChar>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b20      	cmp	r3, #32
 8001910:	d120      	bne.n	8001954 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001912:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001916:	2b01      	cmp	r3, #1
 8001918:	d114      	bne.n	8001944 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 800191a:	88bc      	ldrh	r4, [r7, #4]
 800191c:	887d      	ldrh	r5, [r7, #2]
 800191e:	f7ff fed7 	bl	80016d0 <EF_GetFontSpaceWidth>
 8001922:	4603      	mov	r3, r0
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	0052      	lsls	r2, r2, #1
 800192a:	4413      	add	r3, r2
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b5a      	ldr	r3, [pc, #360]	; (8001a98 <EF_PutChar+0x1b8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b299      	uxth	r1, r3
 8001936:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	460b      	mov	r3, r1
 800193c:	4629      	mov	r1, r5
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff fc26 	bl	8001190 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001944:	f7ff fec4 	bl	80016d0 <EF_GetFontSpaceWidth>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	0052      	lsls	r2, r2, #1
 800194e:	4413      	add	r3, r2
 8001950:	b2db      	uxtb	r3, r3
 8001952:	e09c      	b.n	8001a8e <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001954:	f7ff fea4 	bl	80016a0 <EF_GetFontStartChar>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4293      	cmp	r3, r2
 8001960:	d201      	bcs.n	8001966 <EF_PutChar+0x86>
	{
		return 0;
 8001962:	2300      	movs	r3, #0
 8001964:	e093      	b.n	8001a8e <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001966:	f7ff fea7 	bl	80016b8 <EF_GetFontEndChar>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	7c7b      	ldrb	r3, [r7, #17]
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <EF_PutChar+0x98>
	{
		return 0;
 8001974:	2300      	movs	r3, #0
 8001976:	e08a      	b.n	8001a8e <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001978:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <EF_PutChar+0x1b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	7c7b      	ldrb	r3, [r7, #17]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <EF_PutChar+0x1b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a42      	ldr	r2, [pc, #264]	; (8001a98 <EF_PutChar+0x1b8>)
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	6851      	ldr	r1, [r2, #4]
 8001992:	7c7a      	ldrb	r2, [r7, #17]
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	440a      	add	r2, r1
 8001998:	8852      	ldrh	r2, [r2, #2]
 800199a:	4413      	add	r3, r2
 800199c:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 800199e:	2300      	movs	r3, #0
 80019a0:	83fb      	strh	r3, [r7, #30]
 80019a2:	e066      	b.n	8001a72 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	777b      	strb	r3, [r7, #29]
 80019ae:	e053      	b.n	8001a58 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 80019b6:	7efb      	ldrb	r3, [r7, #27]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d905      	bls.n	80019c8 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 80019bc:	2308      	movs	r3, #8
 80019be:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 80019c0:	7efb      	ldrb	r3, [r7, #27]
 80019c2:	3b08      	subs	r3, #8
 80019c4:	76fb      	strb	r3, [r7, #27]
 80019c6:	e001      	b.n	80019cc <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 80019c8:	7efb      	ldrb	r3, [r7, #27]
 80019ca:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 80019cc:	2300      	movs	r3, #0
 80019ce:	74bb      	strb	r3, [r7, #18]
 80019d0:	e038      	b.n	8001a44 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 80019d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da15      	bge.n	8001a06 <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 80019da:	7f7b      	ldrb	r3, [r7, #29]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	7cbb      	ldrb	r3, [r7, #18]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b218      	sxth	r0, r3
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	8bfb      	ldrh	r3, [r7, #30]
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	883a      	ldrh	r2, [r7, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	f000 f9d8 	bl	8001db4 <ILI9341_WritePixel>
 8001a04:	e018      	b.n	8001a38 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d114      	bne.n	8001a38 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a0e:	7f7b      	ldrb	r3, [r7, #29]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	7cbb      	ldrb	r3, [r7, #18]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b218      	sxth	r0, r3
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	8bfb      	ldrh	r3, [r7, #30]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a32:	4619      	mov	r1, r3
 8001a34:	f000 f9be 	bl	8001db4 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a38:	7cbb      	ldrb	r3, [r7, #18]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	74bb      	strb	r3, [r7, #18]
 8001a3e:	7cfb      	ldrb	r3, [r7, #19]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	74fb      	strb	r3, [r7, #19]
 8001a44:	7cba      	ldrb	r2, [r7, #18]
 8001a46:	7f3b      	ldrb	r3, [r7, #28]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d3c2      	bcc.n	80019d2 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a52:	7f7b      	ldrb	r3, [r7, #29]
 8001a54:	3301      	adds	r3, #1
 8001a56:	777b      	strb	r3, [r7, #29]
 8001a58:	7f7a      	ldrb	r2, [r7, #29]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	da00      	bge.n	8001a66 <EF_PutChar+0x186>
 8001a64:	3307      	adds	r3, #7
 8001a66:	10db      	asrs	r3, r3, #3
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dda1      	ble.n	80019b0 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a6c:	8bfb      	ldrh	r3, [r7, #30]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	83fb      	strh	r3, [r7, #30]
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <EF_PutChar+0x1b8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	8bfa      	ldrh	r2, [r7, #30]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d391      	bcc.n	80019a4 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <EF_PutChar+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bdb0      	pop	{r4, r5, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000274 	.word	0x20000274

08001a9c <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	817b      	strh	r3, [r7, #10]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	813b      	strh	r3, [r7, #8]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7fe fb9c 	bl	80001f4 <strlen>
 8001abc:	4603      	mov	r3, r0
 8001abe:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	75fb      	strb	r3, [r7, #23]
 8001ac8:	e05a      	b.n	8001b80 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2bc5      	cmp	r3, #197	; 0xc5
 8001ad4:	d817      	bhi.n	8001b06 <EF_PutString+0x6a>
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2bc2      	cmp	r3, #194	; 0xc2
 8001ae0:	d911      	bls.n	8001b06 <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	7818      	ldrb	r0, [r3, #0]
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
 8001aec:	3301      	adds	r3, #1
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff fdf7 	bl	80016e8 <EF_DecodePolish>
 8001afa:	4603      	mov	r3, r0
 8001afc:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	3301      	adds	r3, #1
 8001b02:	75fb      	strb	r3, [r7, #23]
 8001b04:	e004      	b.n	8001b10 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b10:	897a      	ldrh	r2, [r7, #10]
 8001b12:	8abb      	ldrh	r3, [r7, #20]
 8001b14:	4413      	add	r3, r2
 8001b16:	b299      	uxth	r1, r3
 8001b18:	88fc      	ldrh	r4, [r7, #6]
 8001b1a:	893a      	ldrh	r2, [r7, #8]
 8001b1c:	7cf8      	ldrb	r0, [r7, #19]
 8001b1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4623      	mov	r3, r4
 8001b2a:	f7ff fed9 	bl	80018e0 <EF_PutChar>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001b32:	7c7b      	ldrb	r3, [r7, #17]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	8abb      	ldrh	r3, [r7, #20]
 8001b38:	4413      	add	r3, r2
 8001b3a:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001b3c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d113      	bne.n	8001b6c <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001b44:	897a      	ldrh	r2, [r7, #10]
 8001b46:	8abb      	ldrh	r3, [r7, #20]
 8001b48:	18d4      	adds	r4, r2, r3
 8001b4a:	893d      	ldrh	r5, [r7, #8]
 8001b4c:	f7ff fdc0 	bl	80016d0 <EF_GetFontSpaceWidth>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b29e      	uxth	r6, r3
 8001b54:	f7ff fd98 	bl	8001688 <EF_GetFontHeight>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	4632      	mov	r2, r6
 8001b64:	4629      	mov	r1, r5
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff fb12 	bl	8001190 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001b6c:	f7ff fdb0 	bl	80016d0 <EF_GetFontSpaceWidth>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	8abb      	ldrh	r3, [r7, #20]
 8001b76:	4413      	add	r3, r2
 8001b78:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	75fb      	strb	r3, [r7, #23]
 8001b80:	7dfa      	ldrb	r2, [r7, #23]
 8001b82:	7cbb      	ldrb	r3, [r7, #18]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d3a0      	bcc.n	8001aca <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001b88:	8abb      	ldrh	r3, [r7, #20]
 8001b8a:	b2dc      	uxtb	r4, r3
 8001b8c:	f7ff fda0 	bl	80016d0 <EF_GetFontSpaceWidth>
 8001b90:	4603      	mov	r3, r0
 8001b92:	1ae3      	subs	r3, r4, r3
 8001b94:	b2db      	uxtb	r3, r3
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b9e <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f002 ff06 	bl	80049b8 <HAL_Delay>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001bbe:	e014      	b.n	8001bea <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <ILI9341_SendToTFT+0x5c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d10c      	bne.n	8001bea <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <ILI9341_SendToTFT+0x5c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	330c      	adds	r3, #12
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3301      	adds	r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e7      	bne.n	8001bc0 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001bf0:	bf00      	nop
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <ILI9341_SendToTFT+0x5c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfe:	2b80      	cmp	r3, #128	; 0x80
 8001c00:	d0f7      	beq.n	8001bf2 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	20000278 	.word	0x20000278

08001c14 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <ILI9341_SendComand+0x40>)
 8001c26:	f003 fe29 	bl	800587c <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c30:	4808      	ldr	r0, [pc, #32]	; (8001c54 <ILI9341_SendComand+0x40>)
 8001c32:	f003 fe23 	bl	800587c <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001c36:	1dfb      	adds	r3, r7, #7
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ffba 	bl	8001bb4 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c46:	4803      	ldr	r0, [pc, #12]	; (8001c54 <ILI9341_SendComand+0x40>)
 8001c48:	f003 fe18 	bl	800587c <HAL_GPIO_WritePin>
#endif
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40020400 	.word	0x40020400

08001c58 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001c66:	2200      	movs	r2, #0
 8001c68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c6c:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <ILI9341_SendCommandAndData+0x5c>)
 8001c6e:	f003 fe05 	bl	800587c <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001c72:	2200      	movs	r2, #0
 8001c74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c78:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <ILI9341_SendCommandAndData+0x5c>)
 8001c7a:	f003 fdff 	bl	800587c <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001c7e:	f107 030f 	add.w	r3, r7, #15
 8001c82:	2101      	movs	r1, #1
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff95 	bl	8001bb4 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c90:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <ILI9341_SendCommandAndData+0x5c>)
 8001c92:	f003 fdf3 	bl	800587c <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	68b8      	ldr	r0, [r7, #8]
 8001c9a:	f7ff ff8b 	bl	8001bb4 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <ILI9341_SendCommandAndData+0x5c>)
 8001ca6:	f003 fde9 	bl	800587c <HAL_GPIO_WritePin>
#endif

}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40020400 	.word	0x40020400

08001cb8 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d820      	bhi.n	8001d0a <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d816      	bhi.n	8001cfc <ILI9341_SetRotation+0x44>
 8001cce:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <ILI9341_SetRotation+0x1c>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001ce5 	.word	0x08001ce5
 8001cd8:	08001ceb 	.word	0x08001ceb
 8001cdc:	08001cf1 	.word	0x08001cf1
 8001ce0:	08001cf7 	.word	0x08001cf7
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001ce4:	2348      	movs	r3, #72	; 0x48
 8001ce6:	71fb      	strb	r3, [r7, #7]
		break;
 8001ce8:	e008      	b.n	8001cfc <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001cea:	2328      	movs	r3, #40	; 0x28
 8001cec:	71fb      	strb	r3, [r7, #7]
		break;
 8001cee:	e005      	b.n	8001cfc <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001cf0:	2388      	movs	r3, #136	; 0x88
 8001cf2:	71fb      	strb	r3, [r7, #7]
		break;
 8001cf4:	e002      	b.n	8001cfc <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001cf6:	23e8      	movs	r3, #232	; 0xe8
 8001cf8:	71fb      	strb	r3, [r7, #7]
		break;
 8001cfa:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4619      	mov	r1, r3
 8001d02:	2036      	movs	r0, #54	; 0x36
 8001d04:	f7ff ffa8 	bl	8001c58 <ILI9341_SendCommandAndData>
 8001d08:	e000      	b.n	8001d0c <ILI9341_SetRotation+0x54>
		return;
 8001d0a:	bf00      	nop
}
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop

08001d14 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	80fb      	strh	r3, [r7, #6]
 8001d26:	4603      	mov	r3, r0
 8001d28:	80bb      	strh	r3, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	4413      	add	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	81fb      	strh	r3, [r7, #14]
 8001d3e:	88ba      	ldrh	r2, [r7, #4]
 8001d40:	883b      	ldrh	r3, [r7, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001d64:	89fb      	ldrh	r3, [r7, #14]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	2204      	movs	r2, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	202a      	movs	r0, #42	; 0x2a
 8001d74:	f7ff ff70 	bl	8001c58 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001d78:	88bb      	ldrh	r3, [r7, #4]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001d88:	89bb      	ldrh	r3, [r7, #12]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001d92:	89bb      	ldrh	r3, [r7, #12]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001d98:	f107 0308 	add.w	r3, r7, #8
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	202b      	movs	r0, #43	; 0x2b
 8001da2:	f7ff ff59 	bl	8001c58 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001da6:	202c      	movs	r0, #44	; 0x2c
 8001da8:	f7ff ff34 	bl	8001c14 <ILI9341_SendComand>

}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}

08001db4 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	80bb      	strh	r3, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db21      	blt.n	8001e12 <ILI9341_WritePixel+0x5e>
 8001dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001dd6:	da1c      	bge.n	8001e12 <ILI9341_WritePixel+0x5e>
 8001dd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db18      	blt.n	8001e12 <ILI9341_WritePixel+0x5e>
 8001de0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001de4:	2bef      	cmp	r3, #239	; 0xef
 8001de6:	dc14      	bgt.n	8001e12 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001de8:	88f8      	ldrh	r0, [r7, #6]
 8001dea:	88b9      	ldrh	r1, [r7, #4]
 8001dec:	2301      	movs	r3, #1
 8001dee:	2201      	movs	r2, #1
 8001df0:	f7ff ff90 	bl	8001d14 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	202c      	movs	r0, #44	; 0x2c
 8001e0e:	f7ff ff23 	bl	8001c58 <ILI9341_SendCommandAndData>
	}

}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60ba      	str	r2, [r7, #8]
 8001e22:	461a      	mov	r2, r3
 8001e24:	4603      	mov	r3, r0
 8001e26:	81fb      	strh	r3, [r7, #14]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	81bb      	strh	r3, [r7, #12]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001e30:	89fa      	ldrh	r2, [r7, #14]
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	4413      	add	r3, r2
 8001e36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e3a:	dc14      	bgt.n	8001e66 <ILI9341_DrawImage+0x4c>
 8001e3c:	89ba      	ldrh	r2, [r7, #12]
 8001e3e:	8b3b      	ldrh	r3, [r7, #24]
 8001e40:	4413      	add	r3, r2
 8001e42:	2bf0      	cmp	r3, #240	; 0xf0
 8001e44:	dc0f      	bgt.n	8001e66 <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001e46:	8b3b      	ldrh	r3, [r7, #24]
 8001e48:	88fa      	ldrh	r2, [r7, #6]
 8001e4a:	89b9      	ldrh	r1, [r7, #12]
 8001e4c:	89f8      	ldrh	r0, [r7, #14]
 8001e4e:	f7ff ff61 	bl	8001d14 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	8b3a      	ldrh	r2, [r7, #24]
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	202c      	movs	r0, #44	; 0x2c
 8001e62:	f7ff fef9 	bl	8001c58 <ILI9341_SendCommandAndData>
	}
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001e7a:	23f0      	movs	r3, #240	; 0xf0
 8001e7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e80:	2100      	movs	r1, #0
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff ff46 	bl	8001d14 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001e88:	202c      	movs	r0, #44	; 0x2c
 8001e8a:	f7ff fec3 	bl	8001c14 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001e8e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001e92:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e9a:	4822      	ldr	r0, [pc, #136]	; (8001f24 <ILI9341_ClearDisplay+0xb4>)
 8001e9c:	f003 fcee 	bl	800587c <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea6:	481f      	ldr	r0, [pc, #124]	; (8001f24 <ILI9341_ClearDisplay+0xb4>)
 8001ea8:	f003 fce8 	bl	800587c <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001eac:	e023      	b.n	8001ef6 <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <ILI9341_ClearDisplay+0xb8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d11b      	bne.n	8001ef6 <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <ILI9341_ClearDisplay+0xb8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	330c      	adds	r3, #12
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001ed0:	bf00      	nop
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <ILI9341_ClearDisplay+0xb8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d1f7      	bne.n	8001ed2 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <ILI9341_ClearDisplay+0xb8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	88fa      	ldrh	r2, [r7, #6]
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1d8      	bne.n	8001eae <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001efc:	bf00      	nop
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <ILI9341_ClearDisplay+0xb8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d0f7      	beq.n	8001efe <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4803      	ldr	r0, [pc, #12]	; (8001f24 <ILI9341_ClearDisplay+0xb4>)
 8001f16:	f003 fcb1 	bl	800587c <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40020400 	.word	0x40020400
 8001f28:	20000278 	.word	0x20000278

08001f2c <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001f34:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <ILI9341_Init+0x9c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <ILI9341_Init+0xa0>)
 8001f3c:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4c:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f54:	481e      	ldr	r0, [pc, #120]	; (8001fd0 <ILI9341_Init+0xa4>)
 8001f56:	f003 fc91 	bl	800587c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001f5a:	200a      	movs	r0, #10
 8001f5c:	f7ff fe1f 	bl	8001b9e <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f66:	481a      	ldr	r0, [pc, #104]	; (8001fd0 <ILI9341_Init+0xa4>)
 8001f68:	f003 fc88 	bl	800587c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001f6c:	200a      	movs	r0, #10
 8001f6e:	f7ff fe16 	bl	8001b9e <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001f72:	e019      	b.n	8001fa8 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60fa      	str	r2, [r7, #12]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8001f7e:	7abb      	ldrb	r3, [r7, #10]
 8001f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f84:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 8001f86:	7a7a      	ldrb	r2, [r7, #9]
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fe63 	bl	8001c58 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 8001f92:	7a7b      	ldrb	r3, [r7, #9]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8001f9a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da02      	bge.n	8001fa8 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 8001fa2:	2096      	movs	r0, #150	; 0x96
 8001fa4:	f7ff fdfb 	bl	8001b9e <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60fa      	str	r2, [r7, #12]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	72fb      	strb	r3, [r7, #11]
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1dd      	bne.n	8001f74 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f7ff fe7d 	bl	8001cb8 <ILI9341_SetRotation>
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000278 	.word	0x20000278
 8001fcc:	0800f3c4 	.word	0x0800f3c4
 8001fd0:	40020400 	.word	0x40020400

08001fd4 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe0:	480a      	ldr	r0, [pc, #40]	; (800200c <XPT2046_GetRawData+0x38>)
 8001fe2:	f003 fc4b 	bl	800587c <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <XPT2046_GetRawData+0x3c>)
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <XPT2046_GetRawData+0x40>)
 8001ff4:	4908      	ldr	r1, [pc, #32]	; (8002018 <XPT2046_GetRawData+0x44>)
 8001ff6:	f004 f944 	bl	8006282 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <XPT2046_GetRawData+0x38>)
 8002002:	f003 fc3b 	bl	800587c <HAL_GPIO_WritePin>
#endif
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020400 	.word	0x40020400
 8002010:	2000022c 	.word	0x2000022c
 8002014:	2000023c 	.word	0x2000023c
 8002018:	20000234 	.word	0x20000234

0800201c <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <XPT2046_ReadRawData+0x48>)
 8002028:	785b      	ldrb	r3, [r3, #1]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	b21a      	sxth	r2, r3
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <XPT2046_ReadRawData+0x48>)
 8002030:	789b      	ldrb	r3, [r3, #2]
 8002032:	b21b      	sxth	r3, r3
 8002034:	4313      	orrs	r3, r2
 8002036:	b21b      	sxth	r3, r3
 8002038:	b29a      	uxth	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <XPT2046_ReadRawData+0x48>)
 8002040:	78db      	ldrb	r3, [r3, #3]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <XPT2046_ReadRawData+0x48>)
 8002048:	791b      	ldrb	r3, [r3, #4]
 800204a:	b21b      	sxth	r3, r3
 800204c:	4313      	orrs	r3, r2
 800204e:	b21b      	sxth	r3, r3
 8002050:	b29a      	uxth	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	801a      	strh	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	2000023c 	.word	0x2000023c

08002068 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 8002074:	f107 020c 	add.w	r2, r7, #12
 8002078:	f107 030e 	add.w	r3, r7, #14
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ffcc 	bl	800201c <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 8002084:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <XPT2046_ReadTouchPoint+0x118>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d16e      	bne.n	800216a <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <XPT2046_ReadTouchPoint+0x11c>)
 800208e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002092:	89fb      	ldrh	r3, [r7, #14]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa5d 	bl	8000554 <__aeabi_i2d>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4620      	mov	r0, r4
 80020a0:	4629      	mov	r1, r5
 80020a2:	f7fe fac1 	bl	8000628 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4690      	mov	r8, r2
 80020ac:	4699      	mov	r9, r3
 80020ae:	4b35      	ldr	r3, [pc, #212]	; (8002184 <XPT2046_ReadTouchPoint+0x11c>)
 80020b0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80020b4:	89bb      	ldrh	r3, [r7, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa4c 	bl	8000554 <__aeabi_i2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4620      	mov	r0, r4
 80020c2:	4629      	mov	r1, r5
 80020c4:	f7fe fab0 	bl	8000628 <__aeabi_dmul>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4640      	mov	r0, r8
 80020ce:	4649      	mov	r1, r9
 80020d0:	f7fe f8f4 	bl	80002bc <__adddf3>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <XPT2046_ReadTouchPoint+0x11c>)
 80020de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020e2:	f7fe f8eb 	bl	80002bc <__adddf3>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	f7fe fd73 	bl	8000bd8 <__aeabi_d2uiz>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <XPT2046_ReadTouchPoint+0x11c>)
 80020fc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002100:	89fb      	ldrh	r3, [r7, #14]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa26 	bl	8000554 <__aeabi_i2d>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4620      	mov	r0, r4
 800210e:	4629      	mov	r1, r5
 8002110:	f7fe fa8a 	bl	8000628 <__aeabi_dmul>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4690      	mov	r8, r2
 800211a:	4699      	mov	r9, r3
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <XPT2046_ReadTouchPoint+0x11c>)
 800211e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002122:	89bb      	ldrh	r3, [r7, #12]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fa15 	bl	8000554 <__aeabi_i2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f7fe fa79 	bl	8000628 <__aeabi_dmul>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4640      	mov	r0, r8
 800213c:	4649      	mov	r1, r9
 800213e:	f7fe f8bd 	bl	80002bc <__adddf3>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <XPT2046_ReadTouchPoint+0x11c>)
 800214c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002150:	f7fe f8b4 	bl	80002bc <__adddf3>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fd3c 	bl	8000bd8 <__aeabi_d2uiz>
 8002160:	4603      	mov	r3, r0
 8002162:	b29a      	uxth	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 8002168:	e005      	b.n	8002176 <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 800216a:	89fa      	ldrh	r2, [r7, #14]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 8002170:	89ba      	ldrh	r2, [r7, #12]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	801a      	strh	r2, [r3, #0]
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002180:	20000241 	.word	0x20000241
 8002184:	20000000 	.word	0x20000000

08002188 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e013      	b.n	80021c8 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	4a16      	ldr	r2, [pc, #88]	; (80021fc <XPT2046_GetTouchPoint+0x74>)
 80021a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021a8:	461a      	mov	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4413      	add	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <XPT2046_GetTouchPoint+0x74>)
 80021b4:	330a      	adds	r3, #10
 80021b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021ba:	461a      	mov	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3301      	adds	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b09      	cmp	r3, #9
 80021cc:	d9e8      	bls.n	80021a0 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <XPT2046_GetTouchPoint+0x78>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	08db      	lsrs	r3, r3, #3
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4a07      	ldr	r2, [pc, #28]	; (8002200 <XPT2046_GetTouchPoint+0x78>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	08db      	lsrs	r3, r3, #3
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	801a      	strh	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2000027c 	.word	0x2000027c
 8002200:	cccccccd 	.word	0xcccccccd

08002204 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <XPT2046_IsTouched+0x20>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d101      	bne.n	8002216 <XPT2046_IsTouched+0x12>
		return 1;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <XPT2046_IsTouched+0x14>

	return 0;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	200002a5 	.word	0x200002a5

08002228 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	  switch(TouchState)
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <XPT2046_Task+0x16c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b03      	cmp	r3, #3
 8002234:	f200 80ab 	bhi.w	800238e <XPT2046_Task+0x166>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <XPT2046_Task+0x18>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002385 	.word	0x08002385
 8002244:	08002251 	.word	0x08002251
 8002248:	080022c7 	.word	0x080022c7
 800224c:	08002343 	.word	0x08002343
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002250:	f002 fba6 	bl	80049a0 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	4b50      	ldr	r3, [pc, #320]	; (8002398 <XPT2046_Task+0x170>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b05      	cmp	r3, #5
 800225e:	f240 8093 	bls.w	8002388 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002262:	f7ff feb7 	bl	8001fd4 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002266:	4b4d      	ldr	r3, [pc, #308]	; (800239c <XPT2046_Task+0x174>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4a4c      	ldr	r2, [pc, #304]	; (80023a0 <XPT2046_Task+0x178>)
 800226e:	441a      	add	r2, r3
 8002270:	4b4a      	ldr	r3, [pc, #296]	; (800239c <XPT2046_Task+0x174>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	330a      	adds	r3, #10
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4949      	ldr	r1, [pc, #292]	; (80023a0 <XPT2046_Task+0x178>)
 800227a:	440b      	add	r3, r1
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f7ff fef2 	bl	8002068 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002284:	4b45      	ldr	r3, [pc, #276]	; (800239c <XPT2046_Task+0x174>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b43      	ldr	r3, [pc, #268]	; (800239c <XPT2046_Task+0x174>)
 800228e:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002290:	4b42      	ldr	r3, [pc, #264]	; (800239c <XPT2046_Task+0x174>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b0a      	cmp	r3, #10
 8002296:	d105      	bne.n	80022a4 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002298:	4b40      	ldr	r3, [pc, #256]	; (800239c <XPT2046_Task+0x174>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <XPT2046_Task+0x16c>)
 80022a0:	2202      	movs	r2, #2
 80022a2:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80022a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a8:	483e      	ldr	r0, [pc, #248]	; (80023a4 <XPT2046_Task+0x17c>)
 80022aa:	f003 facf 	bl	800584c <HAL_GPIO_ReadPin>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d102      	bne.n	80022ba <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80022b4:	4b37      	ldr	r3, [pc, #220]	; (8002394 <XPT2046_Task+0x16c>)
 80022b6:	2203      	movs	r2, #3
 80022b8:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80022ba:	f002 fb71 	bl	80049a0 <HAL_GetTick>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a35      	ldr	r2, [pc, #212]	; (8002398 <XPT2046_Task+0x170>)
 80022c2:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80022c4:	e060      	b.n	8002388 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022c6:	f002 fb6b 	bl	80049a0 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <XPT2046_Task+0x170>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d95a      	bls.n	800238c <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022d6:	f7ff fe7d 	bl	8001fd4 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022da:	4b30      	ldr	r3, [pc, #192]	; (800239c <XPT2046_Task+0x174>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4a2f      	ldr	r2, [pc, #188]	; (80023a0 <XPT2046_Task+0x178>)
 80022e2:	441a      	add	r2, r3
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <XPT2046_Task+0x174>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	330a      	adds	r3, #10
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	492c      	ldr	r1, [pc, #176]	; (80023a0 <XPT2046_Task+0x178>)
 80022ee:	440b      	add	r3, r1
 80022f0:	4619      	mov	r1, r3
 80022f2:	4610      	mov	r0, r2
 80022f4:	f7ff feb8 	bl	8002068 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 80022f8:	4b28      	ldr	r3, [pc, #160]	; (800239c <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <XPT2046_Task+0x174>)
 8002302:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <XPT2046_Task+0x174>)
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <XPT2046_Task+0x180>)
 800230a:	fba3 1302 	umull	r1, r3, r3, r2
 800230e:	08d9      	lsrs	r1, r3, #3
 8002310:	460b      	mov	r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <XPT2046_Task+0x174>)
 800231e:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002324:	481f      	ldr	r0, [pc, #124]	; (80023a4 <XPT2046_Task+0x17c>)
 8002326:	f003 fa91 	bl	800584c <HAL_GPIO_ReadPin>
 800232a:	4603      	mov	r3, r0
 800232c:	2b01      	cmp	r3, #1
 800232e:	d102      	bne.n	8002336 <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <XPT2046_Task+0x16c>)
 8002332:	2203      	movs	r2, #3
 8002334:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002336:	f002 fb33 	bl	80049a0 <HAL_GetTick>
 800233a:	4603      	mov	r3, r0
 800233c:	4a16      	ldr	r2, [pc, #88]	; (8002398 <XPT2046_Task+0x170>)
 800233e:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002340:	e024      	b.n	800238c <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <XPT2046_Task+0x16c>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <XPT2046_Task+0x174>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 800234e:	e009      	b.n	8002364 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <XPT2046_Task+0x184>)
 8002352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002356:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <XPT2046_Task+0x188>)
 800235a:	f993 3000 	ldrsb.w	r3, [r3]
 800235e:	4618      	mov	r0, r3
 8002360:	f002 fce0 	bl	8004d24 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <XPT2046_Task+0x188>)
 8002366:	f993 3000 	ldrsb.w	r3, [r3]
 800236a:	4618      	mov	r0, r3
 800236c:	f002 fccb 	bl	8004d06 <HAL_NVIC_GetPendingIRQ>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ec      	bne.n	8002350 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <XPT2046_Task+0x188>)
 8002378:	f993 3000 	ldrsb.w	r3, [r3]
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fc9a 	bl	8004cb6 <HAL_NVIC_EnableIRQ>
		  break;
 8002382:	e004      	b.n	800238e <XPT2046_Task+0x166>
		  break;
 8002384:	bf00      	nop
 8002386:	e002      	b.n	800238e <XPT2046_Task+0x166>
		  break;
 8002388:	bf00      	nop
 800238a:	e000      	b.n	800238e <XPT2046_Task+0x166>
		  break;
 800238c:	bf00      	nop

	  }
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200002a5 	.word	0x200002a5
 8002398:	200002a8 	.word	0x200002a8
 800239c:	200002a4 	.word	0x200002a4
 80023a0:	2000027c 	.word	0x2000027c
 80023a4:	40020000 	.word	0x40020000
 80023a8:	cccccccd 	.word	0xcccccccd
 80023ac:	40013c00 	.word	0x40013c00
 80023b0:	20000230 	.word	0x20000230

080023b4 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80023b8:	2017      	movs	r0, #23
 80023ba:	f002 fc8a 	bl	8004cd2 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 80023be:	4b02      	ldr	r3, [pc, #8]	; (80023c8 <XPT2046_IRQ+0x14>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200002a5 	.word	0x200002a5

080023cc <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <XPT2046_Init+0x84>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <XPT2046_Init+0x88>)
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <XPT2046_Init+0x8c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f0:	481a      	ldr	r0, [pc, #104]	; (800245c <XPT2046_Init+0x90>)
 80023f2:	f003 fa43 	bl	800587c <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <XPT2046_Init+0x94>)
 80023f8:	2290      	movs	r2, #144	; 0x90
 80023fa:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <XPT2046_Init+0x98>)
 80023fe:	22d0      	movs	r2, #208	; 0xd0
 8002400:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002402:	4b19      	ldr	r3, [pc, #100]	; (8002468 <XPT2046_Init+0x9c>)
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002408:	f7ff fde4 	bl	8001fd4 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 800240c:	2001      	movs	r0, #1
 800240e:	f002 fad3 	bl	80049b8 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002412:	4b13      	ldr	r3, [pc, #76]	; (8002460 <XPT2046_Init+0x94>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	08db      	lsrs	r3, r3, #3
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <XPT2046_Init+0x9c>)
 800241c:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <XPT2046_Init+0x94>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	015b      	lsls	r3, r3, #5
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <XPT2046_Init+0x9c>)
 8002428:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <XPT2046_Init+0x98>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	08db      	lsrs	r3, r3, #3
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <XPT2046_Init+0x9c>)
 8002434:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <XPT2046_Init+0x98>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	015b      	lsls	r3, r3, #5
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <XPT2046_Init+0x9c>)
 8002440:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <XPT2046_Init+0x9c>)
 8002444:	2200      	movs	r2, #0
 8002446:	711a      	strb	r2, [r3, #4]
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	2000022c 	.word	0x2000022c
 8002454:	20000230 	.word	0x20000230
 8002458:	200002a5 	.word	0x200002a5
 800245c:	40020400 	.word	0x40020400
 8002460:	20000231 	.word	0x20000231
 8002464:	20000232 	.word	0x20000232
 8002468:	20000234 	.word	0x20000234

0800246c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <MX_DMA_Init+0x4c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <MX_DMA_Init+0x4c>)
 800247c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <MX_DMA_Init+0x4c>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	2010      	movs	r0, #16
 8002494:	f002 fbf3 	bl	8004c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002498:	2010      	movs	r0, #16
 800249a:	f002 fc0c 	bl	8004cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2011      	movs	r0, #17
 80024a4:	f002 fbeb 	bl	8004c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024a8:	2011      	movs	r0, #17
 80024aa:	f002 fc04 	bl	8004cb6 <HAL_NVIC_EnableIRQ>

}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <system_init>:
extern uint8_t Time[3];
extern uint8_t SwitchesButtonState[4];
extern uint8_t LightsButtonState[4];


uint8_t system_init(){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80024c2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80024c6:	f7ff fcd3 	bl	8001e70 <ILI9341_ClearDisplay>
	  ILI9341_DrawImage(40, 50, logo, 240, 140);
 80024ca:	238c      	movs	r3, #140	; 0x8c
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	23f0      	movs	r3, #240	; 0xf0
 80024d0:	4a70      	ldr	r2, [pc, #448]	; (8002694 <system_init+0x1d8>)
 80024d2:	2132      	movs	r1, #50	; 0x32
 80024d4:	2028      	movs	r0, #40	; 0x28
 80024d6:	f7ff fca0 	bl	8001e1a <ILI9341_DrawImage>
//	  GFX_Image(40, 50, logo, 240, 140); //usunieta wolniejsza wersja rysowania

	  HAL_Delay(200); // !!!! TODO
 80024da:	20c8      	movs	r0, #200	; 0xc8
 80024dc:	f002 fa6c 	bl	80049b8 <HAL_Delay>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 80024e0:	486d      	ldr	r0, [pc, #436]	; (8002698 <system_init+0x1dc>)
 80024e2:	f7ff f8c1 	bl	8001668 <EF_SetFont>
	  uint8_t Len = sprintf((char*)Msg, "Inicjalizacja...");
 80024e6:	496d      	ldr	r1, [pc, #436]	; (800269c <system_init+0x1e0>)
 80024e8:	486d      	ldr	r0, [pc, #436]	; (80026a0 <system_init+0x1e4>)
 80024ea:	f006 fa4f 	bl	800898c <siprintf>
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, 60, 20, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_BLACK);
 80024f2:	2300      	movs	r3, #0
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2300      	movs	r3, #0
 80024fc:	2214      	movs	r2, #20
 80024fe:	213c      	movs	r1, #60	; 0x3c
 8002500:	4867      	ldr	r0, [pc, #412]	; (80026a0 <system_init+0x1e4>)
 8002502:	f7ff facb 	bl	8001a9c <EF_PutString>
	  Len++;
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	3301      	adds	r3, #1
 800250a:	71fb      	strb	r3, [r7, #7]
	  GFX_DrawRoundRectangle(60, 200, 20, 20, 5, ILI9341_RED);
 800250c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	2305      	movs	r3, #5
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2314      	movs	r3, #20
 8002518:	2214      	movs	r2, #20
 800251a:	21c8      	movs	r1, #200	; 0xc8
 800251c:	203c      	movs	r0, #60	; 0x3c
 800251e:	f7fe ffd6 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 200, 20, 20, 5, ILI9341_RED);
 8002522:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	2305      	movs	r3, #5
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2314      	movs	r3, #20
 800252e:	2214      	movs	r2, #20
 8002530:	21c8      	movs	r1, #200	; 0xc8
 8002532:	205a      	movs	r0, #90	; 0x5a
 8002534:	f7fe ffcb 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 200, 20, 20, 5, ILI9341_RED);
 8002538:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	2305      	movs	r3, #5
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2314      	movs	r3, #20
 8002544:	2214      	movs	r2, #20
 8002546:	21c8      	movs	r1, #200	; 0xc8
 8002548:	2078      	movs	r0, #120	; 0x78
 800254a:	f7fe ffc0 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 200, 20, 20, 5, ILI9341_RED);
 800254e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	2305      	movs	r3, #5
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2314      	movs	r3, #20
 800255a:	2214      	movs	r2, #20
 800255c:	21c8      	movs	r1, #200	; 0xc8
 800255e:	2096      	movs	r0, #150	; 0x96
 8002560:	f7fe ffb5 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 200, 20, 20, 5, ILI9341_RED);
 8002564:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2305      	movs	r3, #5
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2314      	movs	r3, #20
 8002570:	2214      	movs	r2, #20
 8002572:	21c8      	movs	r1, #200	; 0xc8
 8002574:	20b4      	movs	r0, #180	; 0xb4
 8002576:	f7fe ffaa 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 200, 20, 20, 5, ILI9341_RED);
 800257a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	2305      	movs	r3, #5
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2314      	movs	r3, #20
 8002586:	2214      	movs	r2, #20
 8002588:	21c8      	movs	r1, #200	; 0xc8
 800258a:	20d2      	movs	r0, #210	; 0xd2
 800258c:	f7fe ff9f 	bl	80014ce <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 200, 20, 20, 5, ILI9341_RED);
 8002590:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	2305      	movs	r3, #5
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2314      	movs	r3, #20
 800259c:	2214      	movs	r2, #20
 800259e:	21c8      	movs	r1, #200	; 0xc8
 80025a0:	20f0      	movs	r0, #240	; 0xf0
 80025a2:	f7fe ff94 	bl	80014ce <GFX_DrawRoundRectangle>

	  	  HAL_Delay(100); // !!!! TODO
 80025a6:	2064      	movs	r0, #100	; 0x64
 80025a8:	f002 fa06 	bl	80049b8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(60, 200, 20, 20, 5, ILI9341_GREEN);
 80025ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	2305      	movs	r3, #5
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2314      	movs	r3, #20
 80025b8:	2214      	movs	r2, #20
 80025ba:	21c8      	movs	r1, #200	; 0xc8
 80025bc:	203c      	movs	r0, #60	; 0x3c
 80025be:	f7ff f803 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_1);
 80025c2:	2003      	movs	r0, #3
 80025c4:	f001 fb4c 	bl	8003c60 <SendComand>
	  	  SendComand(UCMD_PRES_1);
 80025c8:	2004      	movs	r0, #4
 80025ca:	f001 fb49 	bl	8003c60 <SendComand>
	  	  HAL_Delay(100); // !!!! TODO
 80025ce:	2064      	movs	r0, #100	; 0x64
 80025d0:	f002 f9f2 	bl	80049b8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(90, 200, 20, 20, 5, ILI9341_GREEN);
 80025d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2305      	movs	r3, #5
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2314      	movs	r3, #20
 80025e0:	2214      	movs	r2, #20
 80025e2:	21c8      	movs	r1, #200	; 0xc8
 80025e4:	205a      	movs	r0, #90	; 0x5a
 80025e6:	f7fe ffef 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100); // !!!! TODO
 80025ea:	2064      	movs	r0, #100	; 0x64
 80025ec:	f002 f9e4 	bl	80049b8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(120, 200, 20, 20, 5, ILI9341_GREEN);
 80025f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	2305      	movs	r3, #5
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2314      	movs	r3, #20
 80025fc:	2214      	movs	r2, #20
 80025fe:	21c8      	movs	r1, #200	; 0xc8
 8002600:	2078      	movs	r0, #120	; 0x78
 8002602:	f7fe ffe1 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002606:	2015      	movs	r0, #21
 8002608:	f001 fb2a 	bl	8003c60 <SendComand>
	  	  HAL_Delay(100); // !!!! TODO
 800260c:	2064      	movs	r0, #100	; 0x64
 800260e:	f002 f9d3 	bl	80049b8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(150, 200, 20, 20, 5, ILI9341_GREEN);
 8002612:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	2305      	movs	r3, #5
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2314      	movs	r3, #20
 800261e:	2214      	movs	r2, #20
 8002620:	21c8      	movs	r1, #200	; 0xc8
 8002622:	2096      	movs	r0, #150	; 0x96
 8002624:	f7fe ffd0 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100); // !!!! TODO
 8002628:	2064      	movs	r0, #100	; 0x64
 800262a:	f002 f9c5 	bl	80049b8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(180, 200, 20, 20, 5, ILI9341_GREEN);
 800262e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	2305      	movs	r3, #5
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2314      	movs	r3, #20
 800263a:	2214      	movs	r2, #20
 800263c:	21c8      	movs	r1, #200	; 0xc8
 800263e:	20b4      	movs	r0, #180	; 0xb4
 8002640:	f7fe ffc2 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002644:	2016      	movs	r0, #22
 8002646:	f001 fb0b 	bl	8003c60 <SendComand>
	  	  HAL_Delay(100); // !!!! TODO
 800264a:	2064      	movs	r0, #100	; 0x64
 800264c:	f002 f9b4 	bl	80049b8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(210, 200, 20, 20, 5, ILI9341_GREEN);
 8002650:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	2305      	movs	r3, #5
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2314      	movs	r3, #20
 800265c:	2214      	movs	r2, #20
 800265e:	21c8      	movs	r1, #200	; 0xc8
 8002660:	20d2      	movs	r0, #210	; 0xd2
 8002662:	f7fe ffb1 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(100); // !!!! TODO
 8002666:	2064      	movs	r0, #100	; 0x64
 8002668:	f002 f9a6 	bl	80049b8 <HAL_Delay>
	  GFX_DrawFillRoundRectangle(240, 200, 20, 20, 5, ILI9341_GREEN);
 800266c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2305      	movs	r3, #5
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2314      	movs	r3, #20
 8002678:	2214      	movs	r2, #20
 800267a:	21c8      	movs	r1, #200	; 0xc8
 800267c:	20f0      	movs	r0, #240	; 0xf0
 800267e:	f7fe ffa3 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  	  HAL_Delay(200); // !!!! TODO
 8002682:	20c8      	movs	r0, #200	; 0xc8
 8002684:	f002 f998 	bl	80049b8 <HAL_Delay>

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8002688:	2301      	movs	r3, #1
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	0800f434 	.word	0x0800f434
 8002698:	0800f3b8 	.word	0x0800f3b8
 800269c:	0800c5d8 	.word	0x0800c5d8
 80026a0:	200002ac 	.word	0x200002ac

080026a4 <showCurrentParameters>:

void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80026ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	460b      	mov	r3, r1
 80026b6:	ed87 1a01 	vstr	s2, [r7, #4]
 80026ba:	72fb      	strb	r3, [r7, #11]
		// TODO dodac kreske pod naglowkiem
	  SendComand(UCMD_TEMP_1);
 80026bc:	2003      	movs	r0, #3
 80026be:	f001 facf 	bl	8003c60 <SendComand>
	  SendComand(UCMD_PRES_1);
 80026c2:	2004      	movs	r0, #4
 80026c4:	f001 facc 	bl	8003c60 <SendComand>
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80026c8:	f24c 6018 	movw	r0, #50712	; 0xc618
 80026cc:	f7ff fbd0 	bl	8001e70 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80026d0:	4867      	ldr	r0, [pc, #412]	; (8002870 <showCurrentParameters+0x1cc>)
 80026d2:	f7fe ffc9 	bl	8001668 <EF_SetFont>

	  uint8_t Len = sprintf((char*)Msg, "-=PARAMETRY=-");
 80026d6:	4967      	ldr	r1, [pc, #412]	; (8002874 <showCurrentParameters+0x1d0>)
 80026d8:	4867      	ldr	r0, [pc, #412]	; (8002878 <showCurrentParameters+0x1d4>)
 80026da:	f006 f957 	bl	800898c <siprintf>
 80026de:	4603      	mov	r3, r0
 80026e0:	77fb      	strb	r3, [r7, #31]
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80026e2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	2300      	movs	r3, #0
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2300      	movs	r3, #0
 80026ee:	2214      	movs	r2, #20
 80026f0:	212f      	movs	r1, #47	; 0x2f
 80026f2:	4861      	ldr	r0, [pc, #388]	; (8002878 <showCurrentParameters+0x1d4>)
 80026f4:	f7ff f9d2 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "Czas: %d : %d : %d", Time[0], Time[1], Time[2]);
 80026f8:	4b60      	ldr	r3, [pc, #384]	; (800287c <showCurrentParameters+0x1d8>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b5f      	ldr	r3, [pc, #380]	; (800287c <showCurrentParameters+0x1d8>)
 8002700:	785b      	ldrb	r3, [r3, #1]
 8002702:	4619      	mov	r1, r3
 8002704:	4b5d      	ldr	r3, [pc, #372]	; (800287c <showCurrentParameters+0x1d8>)
 8002706:	789b      	ldrb	r3, [r3, #2]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	460b      	mov	r3, r1
 800270c:	495c      	ldr	r1, [pc, #368]	; (8002880 <showCurrentParameters+0x1dc>)
 800270e:	485a      	ldr	r0, [pc, #360]	; (8002878 <showCurrentParameters+0x1d4>)
 8002710:	f006 f93c 	bl	800898c <siprintf>
 8002714:	4603      	mov	r3, r0
 8002716:	77fb      	strb	r3, [r7, #31]
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002718:	f24c 6318 	movw	r3, #50712	; 0xc618
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2300      	movs	r3, #0
 8002724:	2232      	movs	r2, #50	; 0x32
 8002726:	2114      	movs	r1, #20
 8002728:	4853      	ldr	r0, [pc, #332]	; (8002878 <showCurrentParameters+0x1d4>)
 800272a:	f7ff f9b7 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 800272e:	4b55      	ldr	r3, [pc, #340]	; (8002884 <showCurrentParameters+0x1e0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd ff20 	bl	8000578 <__aeabi_f2d>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4952      	ldr	r1, [pc, #328]	; (8002888 <showCurrentParameters+0x1e4>)
 800273e:	484e      	ldr	r0, [pc, #312]	; (8002878 <showCurrentParameters+0x1d4>)
 8002740:	f006 f924 	bl	800898c <siprintf>
 8002744:	4603      	mov	r3, r0
 8002746:	77fb      	strb	r3, [r7, #31]
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002748:	f24c 6318 	movw	r3, #50712	; 0xc618
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	2301      	movs	r3, #1
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2300      	movs	r3, #0
 8002754:	2250      	movs	r2, #80	; 0x50
 8002756:	2114      	movs	r1, #20
 8002758:	4847      	ldr	r0, [pc, #284]	; (8002878 <showCurrentParameters+0x1d4>)
 800275a:	f7ff f99f 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 800275e:	4b4b      	ldr	r3, [pc, #300]	; (800288c <showCurrentParameters+0x1e8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd ff08 	bl	8000578 <__aeabi_f2d>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4948      	ldr	r1, [pc, #288]	; (8002890 <showCurrentParameters+0x1ec>)
 800276e:	4842      	ldr	r0, [pc, #264]	; (8002878 <showCurrentParameters+0x1d4>)
 8002770:	f006 f90c 	bl	800898c <siprintf>
 8002774:	4603      	mov	r3, r0
 8002776:	77fb      	strb	r3, [r7, #31]
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002778:	f24c 6318 	movw	r3, #50712	; 0xc618
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	2300      	movs	r3, #0
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2300      	movs	r3, #0
 8002784:	226e      	movs	r2, #110	; 0x6e
 8002786:	2114      	movs	r1, #20
 8002788:	483b      	ldr	r0, [pc, #236]	; (8002878 <showCurrentParameters+0x1d4>)
 800278a:	f7ff f987 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "Poz. wody: %d", CWaterLvl);
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <showCurrentParameters+0x1f0>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	4940      	ldr	r1, [pc, #256]	; (8002898 <showCurrentParameters+0x1f4>)
 8002796:	4838      	ldr	r0, [pc, #224]	; (8002878 <showCurrentParameters+0x1d4>)
 8002798:	f006 f8f8 	bl	800898c <siprintf>
 800279c:	4603      	mov	r3, r0
 800279e:	77fb      	strb	r3, [r7, #31]
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80027a0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	2300      	movs	r3, #0
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	228c      	movs	r2, #140	; 0x8c
 80027ae:	2114      	movs	r1, #20
 80027b0:	4831      	ldr	r0, [pc, #196]	; (8002878 <showCurrentParameters+0x1d4>)
 80027b2:	f7ff f973 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "Ciśnienie: %.1fhPa", CPres);
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <showCurrentParameters+0x1f8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fedc 	bl	8000578 <__aeabi_f2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4936      	ldr	r1, [pc, #216]	; (80028a0 <showCurrentParameters+0x1fc>)
 80027c6:	482c      	ldr	r0, [pc, #176]	; (8002878 <showCurrentParameters+0x1d4>)
 80027c8:	f006 f8e0 	bl	800898c <siprintf>
 80027cc:	4603      	mov	r3, r0
 80027ce:	77fb      	strb	r3, [r7, #31]
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80027d0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	2300      	movs	r3, #0
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	2300      	movs	r3, #0
 80027dc:	22aa      	movs	r2, #170	; 0xaa
 80027de:	2114      	movs	r1, #20
 80027e0:	4825      	ldr	r0, [pc, #148]	; (8002878 <showCurrentParameters+0x1d4>)
 80027e2:	f7ff f95b 	bl	8001a9c <EF_PutString>


	  EF_SetFont(&arial_11ptFontInfo);
 80027e6:	482f      	ldr	r0, [pc, #188]	; (80028a4 <showCurrentParameters+0x200>)
 80027e8:	f7fe ff3e 	bl	8001668 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80027ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	2305      	movs	r3, #5
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2314      	movs	r3, #20
 80027f8:	2264      	movs	r2, #100	; 0x64
 80027fa:	21d8      	movs	r1, #216	; 0xd8
 80027fc:	20dc      	movs	r0, #220	; 0xdc
 80027fe:	f7fe fee3 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "CONTROL=>");
 8002802:	4929      	ldr	r1, [pc, #164]	; (80028a8 <showCurrentParameters+0x204>)
 8002804:	481c      	ldr	r0, [pc, #112]	; (8002878 <showCurrentParameters+0x1d4>)
 8002806:	f006 f8c1 	bl	800898c <siprintf>
 800280a:	4603      	mov	r3, r0
 800280c:	77fb      	strb	r3, [r7, #31]
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800280e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	2300      	movs	r3, #0
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2300      	movs	r3, #0
 800281a:	22da      	movs	r2, #218	; 0xda
 800281c:	21df      	movs	r1, #223	; 0xdf
 800281e:	4816      	ldr	r0, [pc, #88]	; (8002878 <showCurrentParameters+0x1d4>)
 8002820:	f7ff f93c 	bl	8001a9c <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002824:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	2305      	movs	r3, #5
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2314      	movs	r3, #20
 8002830:	2264      	movs	r2, #100	; 0x64
 8002832:	21d8      	movs	r1, #216	; 0xd8
 8002834:	200a      	movs	r0, #10
 8002836:	f7fe fec7 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "<=LIGHTS");
 800283a:	491c      	ldr	r1, [pc, #112]	; (80028ac <showCurrentParameters+0x208>)
 800283c:	480e      	ldr	r0, [pc, #56]	; (8002878 <showCurrentParameters+0x1d4>)
 800283e:	f006 f8a5 	bl	800898c <siprintf>
 8002842:	4603      	mov	r3, r0
 8002844:	77fb      	strb	r3, [r7, #31]
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002846:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	2300      	movs	r3, #0
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2300      	movs	r3, #0
 8002852:	22da      	movs	r2, #218	; 0xda
 8002854:	2114      	movs	r1, #20
 8002856:	4808      	ldr	r0, [pc, #32]	; (8002878 <showCurrentParameters+0x1d4>)
 8002858:	f7ff f920 	bl	8001a9c <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800285c:	4804      	ldr	r0, [pc, #16]	; (8002870 <showCurrentParameters+0x1cc>)
 800285e:	f7fe ff03 	bl	8001668 <EF_SetFont>

	  Len++;
 8002862:	7ffb      	ldrb	r3, [r7, #31]
 8002864:	3301      	adds	r3, #1
 8002866:	77fb      	strb	r3, [r7, #31]
}
 8002868:	bf00      	nop
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	0800f3b8 	.word	0x0800f3b8
 8002874:	0800c5ec 	.word	0x0800c5ec
 8002878:	200002ac 	.word	0x200002ac
 800287c:	2000025c 	.word	0x2000025c
 8002880:	0800c5fc 	.word	0x0800c5fc
 8002884:	2000024c 	.word	0x2000024c
 8002888:	0800c610 	.word	0x0800c610
 800288c:	20000254 	.word	0x20000254
 8002890:	0800c624 	.word	0x0800c624
 8002894:	20000258 	.word	0x20000258
 8002898:	0800c638 	.word	0x0800c638
 800289c:	20000250 	.word	0x20000250
 80028a0:	0800c648 	.word	0x0800c648
 80028a4:	0800d440 	.word	0x0800d440
 80028a8:	0800c65c 	.word	0x0800c65c
 80028ac:	0800c668 	.word	0x0800c668

080028b0 <showControlPanel>:

void showControlPanel()
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af02      	add	r7, sp, #8

	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80028b6:	2015      	movs	r0, #21
 80028b8:	f001 f9d2 	bl	8003c60 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80028bc:	f24c 6018 	movw	r0, #50712	; 0xc618
 80028c0:	f7ff fad6 	bl	8001e70 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80028c4:	48bd      	ldr	r0, [pc, #756]	; (8002bbc <showControlPanel+0x30c>)
 80028c6:	f7fe fecf 	bl	8001668 <EF_SetFont>

	  uint8_t Len = sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 80028ca:	49bd      	ldr	r1, [pc, #756]	; (8002bc0 <showControlPanel+0x310>)
 80028cc:	48bd      	ldr	r0, [pc, #756]	; (8002bc4 <showControlPanel+0x314>)
 80028ce:	f006 f85d 	bl	800898c <siprintf>
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80028d6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	2300      	movs	r3, #0
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2300      	movs	r3, #0
 80028e2:	2214      	movs	r2, #20
 80028e4:	212d      	movs	r1, #45	; 0x2d
 80028e6:	48b7      	ldr	r0, [pc, #732]	; (8002bc4 <showControlPanel+0x314>)
 80028e8:	f7ff f8d8 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80028ec:	49b6      	ldr	r1, [pc, #728]	; (8002bc8 <showControlPanel+0x318>)
 80028ee:	48b5      	ldr	r0, [pc, #724]	; (8002bc4 <showControlPanel+0x314>)
 80028f0:	f006 f84c 	bl	800898c <siprintf>
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80028f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	2300      	movs	r3, #0
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2300      	movs	r3, #0
 8002904:	223c      	movs	r2, #60	; 0x3c
 8002906:	2114      	movs	r1, #20
 8002908:	48ae      	ldr	r0, [pc, #696]	; (8002bc4 <showControlPanel+0x314>)
 800290a:	f7ff f8c7 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 800290e:	49af      	ldr	r1, [pc, #700]	; (8002bcc <showControlPanel+0x31c>)
 8002910:	48ac      	ldr	r0, [pc, #688]	; (8002bc4 <showControlPanel+0x314>)
 8002912:	f006 f83b 	bl	800898c <siprintf>
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800291a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	2301      	movs	r3, #1
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2300      	movs	r3, #0
 8002926:	225a      	movs	r2, #90	; 0x5a
 8002928:	2114      	movs	r1, #20
 800292a:	48a6      	ldr	r0, [pc, #664]	; (8002bc4 <showControlPanel+0x314>)
 800292c:	f7ff f8b6 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8002930:	49a7      	ldr	r1, [pc, #668]	; (8002bd0 <showControlPanel+0x320>)
 8002932:	48a4      	ldr	r0, [pc, #656]	; (8002bc4 <showControlPanel+0x314>)
 8002934:	f006 f82a 	bl	800898c <siprintf>
 8002938:	4603      	mov	r3, r0
 800293a:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800293c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2300      	movs	r3, #0
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	2300      	movs	r3, #0
 8002948:	2278      	movs	r2, #120	; 0x78
 800294a:	2114      	movs	r1, #20
 800294c:	489d      	ldr	r0, [pc, #628]	; (8002bc4 <showControlPanel+0x314>)
 800294e:	f7ff f8a5 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8002952:	49a0      	ldr	r1, [pc, #640]	; (8002bd4 <showControlPanel+0x324>)
 8002954:	489b      	ldr	r0, [pc, #620]	; (8002bc4 <showControlPanel+0x314>)
 8002956:	f006 f819 	bl	800898c <siprintf>
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800295e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	2300      	movs	r3, #0
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2300      	movs	r3, #0
 800296a:	2296      	movs	r2, #150	; 0x96
 800296c:	2114      	movs	r1, #20
 800296e:	4895      	ldr	r0, [pc, #596]	; (8002bc4 <showControlPanel+0x314>)
 8002970:	f7ff f894 	bl	8001a9c <EF_PutString>

	  EF_SetFont(&arial_11ptFontInfo);
 8002974:	4898      	ldr	r0, [pc, #608]	; (8002bd8 <showControlPanel+0x328>)
 8002976:	f7fe fe77 	bl	8001668 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800297a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	2305      	movs	r3, #5
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2314      	movs	r3, #20
 8002986:	2264      	movs	r2, #100	; 0x64
 8002988:	21d8      	movs	r1, #216	; 0xd8
 800298a:	20dc      	movs	r0, #220	; 0xdc
 800298c:	f7fe fe1c 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "LIGHTS=>");
 8002990:	4992      	ldr	r1, [pc, #584]	; (8002bdc <showControlPanel+0x32c>)
 8002992:	488c      	ldr	r0, [pc, #560]	; (8002bc4 <showControlPanel+0x314>)
 8002994:	f005 fffa 	bl	800898c <siprintf>
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800299c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2300      	movs	r3, #0
 80029a8:	22da      	movs	r2, #218	; 0xda
 80029aa:	21df      	movs	r1, #223	; 0xdf
 80029ac:	4885      	ldr	r0, [pc, #532]	; (8002bc4 <showControlPanel+0x314>)
 80029ae:	f7ff f875 	bl	8001a9c <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80029b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2305      	movs	r3, #5
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2314      	movs	r3, #20
 80029be:	2264      	movs	r2, #100	; 0x64
 80029c0:	21d8      	movs	r1, #216	; 0xd8
 80029c2:	200a      	movs	r0, #10
 80029c4:	f7fe fe00 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "<=PARAM");
 80029c8:	4985      	ldr	r1, [pc, #532]	; (8002be0 <showControlPanel+0x330>)
 80029ca:	487e      	ldr	r0, [pc, #504]	; (8002bc4 <showControlPanel+0x314>)
 80029cc:	f005 ffde 	bl	800898c <siprintf>
 80029d0:	4603      	mov	r3, r0
 80029d2:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80029d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2300      	movs	r3, #0
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2300      	movs	r3, #0
 80029e0:	22da      	movs	r2, #218	; 0xda
 80029e2:	2114      	movs	r1, #20
 80029e4:	4877      	ldr	r0, [pc, #476]	; (8002bc4 <showControlPanel+0x314>)
 80029e6:	f7ff f859 	bl	8001a9c <EF_PutString>
	  //
	  // Draw current state of switches button
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 80029ea:	487b      	ldr	r0, [pc, #492]	; (8002bd8 <showControlPanel+0x328>)
 80029ec:	f7fe fe3c 	bl	8001668 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 80029f0:	4b7c      	ldr	r3, [pc, #496]	; (8002be4 <showControlPanel+0x334>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01e      	beq.n	8002a36 <showControlPanel+0x186>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80029f8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	2305      	movs	r3, #5
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2315      	movs	r3, #21
 8002a04:	2221      	movs	r2, #33	; 0x21
 8002a06:	2141      	movs	r1, #65	; 0x41
 8002a08:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002a0c:	f7fe fddc 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8002a10:	4975      	ldr	r1, [pc, #468]	; (8002be8 <showControlPanel+0x338>)
 8002a12:	486c      	ldr	r0, [pc, #432]	; (8002bc4 <showControlPanel+0x314>)
 8002a14:	f005 ffba 	bl	800898c <siprintf>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8002a1c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	2300      	movs	r3, #0
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	2300      	movs	r3, #0
 8002a28:	2243      	movs	r2, #67	; 0x43
 8002a2a:	f240 1111 	movw	r1, #273	; 0x111
 8002a2e:	4865      	ldr	r0, [pc, #404]	; (8002bc4 <showControlPanel+0x314>)
 8002a30:	f7ff f834 	bl	8001a9c <EF_PutString>
 8002a34:	e01d      	b.n	8002a72 <showControlPanel+0x1c2>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002a36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2305      	movs	r3, #5
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2315      	movs	r3, #21
 8002a42:	2221      	movs	r2, #33	; 0x21
 8002a44:	2141      	movs	r1, #65	; 0x41
 8002a46:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002a4a:	f7fe fdbd 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8002a4e:	4967      	ldr	r1, [pc, #412]	; (8002bec <showControlPanel+0x33c>)
 8002a50:	485c      	ldr	r0, [pc, #368]	; (8002bc4 <showControlPanel+0x314>)
 8002a52:	f005 ff9b 	bl	800898c <siprintf>
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002a5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	2300      	movs	r3, #0
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2300      	movs	r3, #0
 8002a66:	2243      	movs	r2, #67	; 0x43
 8002a68:	f240 1111 	movw	r1, #273	; 0x111
 8002a6c:	4855      	ldr	r0, [pc, #340]	; (8002bc4 <showControlPanel+0x314>)
 8002a6e:	f7ff f815 	bl	8001a9c <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8002a72:	4b5c      	ldr	r3, [pc, #368]	; (8002be4 <showControlPanel+0x334>)
 8002a74:	785b      	ldrb	r3, [r3, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01e      	beq.n	8002ab8 <showControlPanel+0x208>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8002a7a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	2305      	movs	r3, #5
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2315      	movs	r3, #21
 8002a86:	2221      	movs	r2, #33	; 0x21
 8002a88:	215f      	movs	r1, #95	; 0x5f
 8002a8a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002a8e:	f7fe fd9b 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8002a92:	4955      	ldr	r1, [pc, #340]	; (8002be8 <showControlPanel+0x338>)
 8002a94:	484b      	ldr	r0, [pc, #300]	; (8002bc4 <showControlPanel+0x314>)
 8002a96:	f005 ff79 	bl	800898c <siprintf>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8002a9e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2261      	movs	r2, #97	; 0x61
 8002aac:	f240 1111 	movw	r1, #273	; 0x111
 8002ab0:	4844      	ldr	r0, [pc, #272]	; (8002bc4 <showControlPanel+0x314>)
 8002ab2:	f7fe fff3 	bl	8001a9c <EF_PutString>
 8002ab6:	e01d      	b.n	8002af4 <showControlPanel+0x244>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002ab8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	2305      	movs	r3, #5
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2315      	movs	r3, #21
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	215f      	movs	r1, #95	; 0x5f
 8002ac8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002acc:	f7fe fd7c 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8002ad0:	4946      	ldr	r1, [pc, #280]	; (8002bec <showControlPanel+0x33c>)
 8002ad2:	483c      	ldr	r0, [pc, #240]	; (8002bc4 <showControlPanel+0x314>)
 8002ad4:	f005 ff5a 	bl	800898c <siprintf>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002adc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2261      	movs	r2, #97	; 0x61
 8002aea:	f240 1111 	movw	r1, #273	; 0x111
 8002aee:	4835      	ldr	r0, [pc, #212]	; (8002bc4 <showControlPanel+0x314>)
 8002af0:	f7fe ffd4 	bl	8001a9c <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8002af4:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <showControlPanel+0x334>)
 8002af6:	789b      	ldrb	r3, [r3, #2]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01e      	beq.n	8002b3a <showControlPanel+0x28a>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8002afc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	2305      	movs	r3, #5
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2315      	movs	r3, #21
 8002b08:	2221      	movs	r2, #33	; 0x21
 8002b0a:	217d      	movs	r1, #125	; 0x7d
 8002b0c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002b10:	f7fe fd5a 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8002b14:	4934      	ldr	r1, [pc, #208]	; (8002be8 <showControlPanel+0x338>)
 8002b16:	482b      	ldr	r0, [pc, #172]	; (8002bc4 <showControlPanel+0x314>)
 8002b18:	f005 ff38 	bl	800898c <siprintf>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8002b20:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	227f      	movs	r2, #127	; 0x7f
 8002b2e:	f240 1111 	movw	r1, #273	; 0x111
 8002b32:	4824      	ldr	r0, [pc, #144]	; (8002bc4 <showControlPanel+0x314>)
 8002b34:	f7fe ffb2 	bl	8001a9c <EF_PutString>
 8002b38:	e01d      	b.n	8002b76 <showControlPanel+0x2c6>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002b3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	2305      	movs	r3, #5
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2315      	movs	r3, #21
 8002b46:	2221      	movs	r2, #33	; 0x21
 8002b48:	217d      	movs	r1, #125	; 0x7d
 8002b4a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002b4e:	f7fe fd3b 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8002b52:	4926      	ldr	r1, [pc, #152]	; (8002bec <showControlPanel+0x33c>)
 8002b54:	481b      	ldr	r0, [pc, #108]	; (8002bc4 <showControlPanel+0x314>)
 8002b56:	f005 ff19 	bl	800898c <siprintf>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002b5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2300      	movs	r3, #0
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	227f      	movs	r2, #127	; 0x7f
 8002b6c:	f240 1111 	movw	r1, #273	; 0x111
 8002b70:	4814      	ldr	r0, [pc, #80]	; (8002bc4 <showControlPanel+0x314>)
 8002b72:	f7fe ff93 	bl	8001a9c <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <showControlPanel+0x334>)
 8002b78:	78db      	ldrb	r3, [r3, #3]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d038      	beq.n	8002bf0 <showControlPanel+0x340>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8002b7e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	2305      	movs	r3, #5
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2315      	movs	r3, #21
 8002b8a:	2221      	movs	r2, #33	; 0x21
 8002b8c:	219b      	movs	r1, #155	; 0x9b
 8002b8e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002b92:	f7fe fd19 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8002b96:	4914      	ldr	r1, [pc, #80]	; (8002be8 <showControlPanel+0x338>)
 8002b98:	480a      	ldr	r0, [pc, #40]	; (8002bc4 <showControlPanel+0x314>)
 8002b9a:	f005 fef7 	bl	800898c <siprintf>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8002ba2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	2300      	movs	r3, #0
 8002bae:	229d      	movs	r2, #157	; 0x9d
 8002bb0:	f240 1111 	movw	r1, #273	; 0x111
 8002bb4:	4803      	ldr	r0, [pc, #12]	; (8002bc4 <showControlPanel+0x314>)
 8002bb6:	f7fe ff71 	bl	8001a9c <EF_PutString>
 8002bba:	e037      	b.n	8002c2c <showControlPanel+0x37c>
 8002bbc:	0800f3b8 	.word	0x0800f3b8
 8002bc0:	0800c674 	.word	0x0800c674
 8002bc4:	200002ac 	.word	0x200002ac
 8002bc8:	0800c688 	.word	0x0800c688
 8002bcc:	0800c69c 	.word	0x0800c69c
 8002bd0:	0800c6b0 	.word	0x0800c6b0
 8002bd4:	0800c6c4 	.word	0x0800c6c4
 8002bd8:	0800d440 	.word	0x0800d440
 8002bdc:	0800c6d8 	.word	0x0800c6d8
 8002be0:	0800c6e4 	.word	0x0800c6e4
 8002be4:	20000260 	.word	0x20000260
 8002be8:	0800c6ec 	.word	0x0800c6ec
 8002bec:	0800c6f0 	.word	0x0800c6f0
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002bf0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	2305      	movs	r3, #5
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2315      	movs	r3, #21
 8002bfc:	2221      	movs	r2, #33	; 0x21
 8002bfe:	219b      	movs	r1, #155	; 0x9b
 8002c00:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002c04:	f7fe fce0 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8002c08:	490d      	ldr	r1, [pc, #52]	; (8002c40 <showControlPanel+0x390>)
 8002c0a:	480e      	ldr	r0, [pc, #56]	; (8002c44 <showControlPanel+0x394>)
 8002c0c:	f005 febe 	bl	800898c <siprintf>
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002c14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	229d      	movs	r2, #157	; 0x9d
 8002c22:	f240 1111 	movw	r1, #273	; 0x111
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <showControlPanel+0x394>)
 8002c28:	f7fe ff38 	bl	8001a9c <EF_PutString>
	  }
	  Len++;
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	71fb      	strb	r3, [r7, #7]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002c32:	4805      	ldr	r0, [pc, #20]	; (8002c48 <showControlPanel+0x398>)
 8002c34:	f7fe fd18 	bl	8001668 <EF_SetFont>


}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	0800c6f0 	.word	0x0800c6f0
 8002c44:	200002ac 	.word	0x200002ac
 8002c48:	0800f3b8 	.word	0x0800f3b8

08002c4c <showLightsControlPanel>:

void showLightsControlPanel()
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002c52:	2016      	movs	r0, #22
 8002c54:	f001 f804 	bl	8003c60 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002c58:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002c5c:	f7ff f908 	bl	8001e70 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002c60:	48b6      	ldr	r0, [pc, #728]	; (8002f3c <showLightsControlPanel+0x2f0>)
 8002c62:	f7fe fd01 	bl	8001668 <EF_SetFont>

	  uint8_t Len = sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8002c66:	49b6      	ldr	r1, [pc, #728]	; (8002f40 <showLightsControlPanel+0x2f4>)
 8002c68:	48b6      	ldr	r0, [pc, #728]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002c6a:	f005 fe8f 	bl	800898c <siprintf>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002c72:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	2214      	movs	r2, #20
 8002c80:	2146      	movs	r1, #70	; 0x46
 8002c82:	48b0      	ldr	r0, [pc, #704]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002c84:	f7fe ff0a 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "ŚWIATŁO 1:");
 8002c88:	49af      	ldr	r1, [pc, #700]	; (8002f48 <showLightsControlPanel+0x2fc>)
 8002c8a:	48ae      	ldr	r0, [pc, #696]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002c8c:	f005 fe7e 	bl	800898c <siprintf>
 8002c90:	4603      	mov	r3, r0
 8002c92:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002c94:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	223c      	movs	r2, #60	; 0x3c
 8002ca2:	2114      	movs	r1, #20
 8002ca4:	48a7      	ldr	r0, [pc, #668]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002ca6:	f7fe fef9 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "ŚWIATŁO 2:");
 8002caa:	49a8      	ldr	r1, [pc, #672]	; (8002f4c <showLightsControlPanel+0x300>)
 8002cac:	48a5      	ldr	r0, [pc, #660]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002cae:	f005 fe6d 	bl	800898c <siprintf>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002cb6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	225a      	movs	r2, #90	; 0x5a
 8002cc4:	2114      	movs	r1, #20
 8002cc6:	489f      	ldr	r0, [pc, #636]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002cc8:	f7fe fee8 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "ŚWIATŁO 3:");
 8002ccc:	49a0      	ldr	r1, [pc, #640]	; (8002f50 <showLightsControlPanel+0x304>)
 8002cce:	489d      	ldr	r0, [pc, #628]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002cd0:	f005 fe5c 	bl	800898c <siprintf>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002cd8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2278      	movs	r2, #120	; 0x78
 8002ce6:	2114      	movs	r1, #20
 8002ce8:	4896      	ldr	r0, [pc, #600]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002cea:	f7fe fed7 	bl	8001a9c <EF_PutString>

	  Len = sprintf((char*)Msg, "ŚWIATŁO 4:");
 8002cee:	4999      	ldr	r1, [pc, #612]	; (8002f54 <showLightsControlPanel+0x308>)
 8002cf0:	4894      	ldr	r0, [pc, #592]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002cf2:	f005 fe4b 	bl	800898c <siprintf>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002cfa:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	2300      	movs	r3, #0
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2300      	movs	r3, #0
 8002d06:	2296      	movs	r2, #150	; 0x96
 8002d08:	2114      	movs	r1, #20
 8002d0a:	488e      	ldr	r0, [pc, #568]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002d0c:	f7fe fec6 	bl	8001a9c <EF_PutString>

	  EF_SetFont(&arial_11ptFontInfo);
 8002d10:	4891      	ldr	r0, [pc, #580]	; (8002f58 <showLightsControlPanel+0x30c>)
 8002d12:	f7fe fca9 	bl	8001668 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002d16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2305      	movs	r3, #5
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2314      	movs	r3, #20
 8002d22:	2264      	movs	r2, #100	; 0x64
 8002d24:	21d8      	movs	r1, #216	; 0xd8
 8002d26:	20dc      	movs	r0, #220	; 0xdc
 8002d28:	f7fe fc4e 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "PARAM=>");
 8002d2c:	498b      	ldr	r1, [pc, #556]	; (8002f5c <showLightsControlPanel+0x310>)
 8002d2e:	4885      	ldr	r0, [pc, #532]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002d30:	f005 fe2c 	bl	800898c <siprintf>
 8002d34:	4603      	mov	r3, r0
 8002d36:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002d38:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2300      	movs	r3, #0
 8002d44:	22da      	movs	r2, #218	; 0xda
 8002d46:	21e6      	movs	r1, #230	; 0xe6
 8002d48:	487e      	ldr	r0, [pc, #504]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002d4a:	f7fe fea7 	bl	8001a9c <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8002d4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	2305      	movs	r3, #5
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2314      	movs	r3, #20
 8002d5a:	2264      	movs	r2, #100	; 0x64
 8002d5c:	21d8      	movs	r1, #216	; 0xd8
 8002d5e:	200a      	movs	r0, #10
 8002d60:	f7fe fc32 	bl	80015c8 <GFX_DrawFillRoundRectangle>
	  Len = sprintf((char*)Msg, "<=CONTROL");
 8002d64:	497e      	ldr	r1, [pc, #504]	; (8002f60 <showLightsControlPanel+0x314>)
 8002d66:	4877      	ldr	r0, [pc, #476]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002d68:	f005 fe10 	bl	800898c <siprintf>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	71fb      	strb	r3, [r7, #7]
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002d70:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	2300      	movs	r3, #0
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	22da      	movs	r2, #218	; 0xda
 8002d7e:	210d      	movs	r1, #13
 8002d80:	4870      	ldr	r0, [pc, #448]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002d82:	f7fe fe8b 	bl	8001a9c <EF_PutString>
	  //
	  // Draw current state of lights button
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8002d86:	4874      	ldr	r0, [pc, #464]	; (8002f58 <showLightsControlPanel+0x30c>)
 8002d88:	f7fe fc6e 	bl	8001668 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8002d8c:	4b75      	ldr	r3, [pc, #468]	; (8002f64 <showLightsControlPanel+0x318>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01c      	beq.n	8002dce <showLightsControlPanel+0x182>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8002d94:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	2305      	movs	r3, #5
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2315      	movs	r3, #21
 8002da0:	2221      	movs	r2, #33	; 0x21
 8002da2:	2141      	movs	r1, #65	; 0x41
 8002da4:	20c8      	movs	r0, #200	; 0xc8
 8002da6:	f7fe fc0f 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8002daa:	496f      	ldr	r1, [pc, #444]	; (8002f68 <showLightsControlPanel+0x31c>)
 8002dac:	4865      	ldr	r0, [pc, #404]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002dae:	f005 fded 	bl	800898c <siprintf>
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002db6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2243      	movs	r2, #67	; 0x43
 8002dc4:	21cb      	movs	r1, #203	; 0xcb
 8002dc6:	485f      	ldr	r0, [pc, #380]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002dc8:	f7fe fe68 	bl	8001a9c <EF_PutString>
 8002dcc:	e01b      	b.n	8002e06 <showLightsControlPanel+0x1ba>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002dce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	2305      	movs	r3, #5
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2315      	movs	r3, #21
 8002dda:	2221      	movs	r2, #33	; 0x21
 8002ddc:	2141      	movs	r1, #65	; 0x41
 8002dde:	20c8      	movs	r0, #200	; 0xc8
 8002de0:	f7fe fbf2 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8002de4:	4961      	ldr	r1, [pc, #388]	; (8002f6c <showLightsControlPanel+0x320>)
 8002de6:	4857      	ldr	r0, [pc, #348]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002de8:	f005 fdd0 	bl	800898c <siprintf>
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002df0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2243      	movs	r2, #67	; 0x43
 8002dfe:	21cb      	movs	r1, #203	; 0xcb
 8002e00:	4850      	ldr	r0, [pc, #320]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002e02:	f7fe fe4b 	bl	8001a9c <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8002e06:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <showLightsControlPanel+0x318>)
 8002e08:	785b      	ldrb	r3, [r3, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01c      	beq.n	8002e48 <showLightsControlPanel+0x1fc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8002e0e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	2305      	movs	r3, #5
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	2315      	movs	r3, #21
 8002e1a:	2221      	movs	r2, #33	; 0x21
 8002e1c:	215f      	movs	r1, #95	; 0x5f
 8002e1e:	20c8      	movs	r0, #200	; 0xc8
 8002e20:	f7fe fbd2 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8002e24:	4950      	ldr	r1, [pc, #320]	; (8002f68 <showLightsControlPanel+0x31c>)
 8002e26:	4847      	ldr	r0, [pc, #284]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002e28:	f005 fdb0 	bl	800898c <siprintf>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002e30:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2261      	movs	r2, #97	; 0x61
 8002e3e:	21cb      	movs	r1, #203	; 0xcb
 8002e40:	4840      	ldr	r0, [pc, #256]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002e42:	f7fe fe2b 	bl	8001a9c <EF_PutString>
 8002e46:	e01b      	b.n	8002e80 <showLightsControlPanel+0x234>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002e48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	2305      	movs	r3, #5
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2315      	movs	r3, #21
 8002e54:	2221      	movs	r2, #33	; 0x21
 8002e56:	215f      	movs	r1, #95	; 0x5f
 8002e58:	20c8      	movs	r0, #200	; 0xc8
 8002e5a:	f7fe fbb5 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8002e5e:	4943      	ldr	r1, [pc, #268]	; (8002f6c <showLightsControlPanel+0x320>)
 8002e60:	4838      	ldr	r0, [pc, #224]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002e62:	f005 fd93 	bl	800898c <siprintf>
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002e6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	2300      	movs	r3, #0
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	2300      	movs	r3, #0
 8002e76:	2261      	movs	r2, #97	; 0x61
 8002e78:	21cb      	movs	r1, #203	; 0xcb
 8002e7a:	4832      	ldr	r0, [pc, #200]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002e7c:	f7fe fe0e 	bl	8001a9c <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8002e80:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <showLightsControlPanel+0x318>)
 8002e82:	789b      	ldrb	r3, [r3, #2]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01c      	beq.n	8002ec2 <showLightsControlPanel+0x276>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8002e88:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	2305      	movs	r3, #5
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2315      	movs	r3, #21
 8002e94:	2221      	movs	r2, #33	; 0x21
 8002e96:	217d      	movs	r1, #125	; 0x7d
 8002e98:	20c8      	movs	r0, #200	; 0xc8
 8002e9a:	f7fe fb95 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8002e9e:	4932      	ldr	r1, [pc, #200]	; (8002f68 <showLightsControlPanel+0x31c>)
 8002ea0:	4828      	ldr	r0, [pc, #160]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002ea2:	f005 fd73 	bl	800898c <siprintf>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002eaa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002eae:	9301      	str	r3, [sp, #4]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	227f      	movs	r2, #127	; 0x7f
 8002eb8:	21cb      	movs	r1, #203	; 0xcb
 8002eba:	4822      	ldr	r0, [pc, #136]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002ebc:	f7fe fdee 	bl	8001a9c <EF_PutString>
 8002ec0:	e01b      	b.n	8002efa <showLightsControlPanel+0x2ae>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002ec2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	2305      	movs	r3, #5
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2315      	movs	r3, #21
 8002ece:	2221      	movs	r2, #33	; 0x21
 8002ed0:	217d      	movs	r1, #125	; 0x7d
 8002ed2:	20c8      	movs	r0, #200	; 0xc8
 8002ed4:	f7fe fb78 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8002ed8:	4924      	ldr	r1, [pc, #144]	; (8002f6c <showLightsControlPanel+0x320>)
 8002eda:	481a      	ldr	r0, [pc, #104]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002edc:	f005 fd56 	bl	800898c <siprintf>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002ee4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	2300      	movs	r3, #0
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	227f      	movs	r2, #127	; 0x7f
 8002ef2:	21cb      	movs	r1, #203	; 0xcb
 8002ef4:	4813      	ldr	r0, [pc, #76]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002ef6:	f7fe fdd1 	bl	8001a9c <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <showLightsControlPanel+0x318>)
 8002efc:	78db      	ldrb	r3, [r3, #3]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d036      	beq.n	8002f70 <showLightsControlPanel+0x324>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8002f02:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2305      	movs	r3, #5
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2315      	movs	r3, #21
 8002f0e:	2221      	movs	r2, #33	; 0x21
 8002f10:	219b      	movs	r1, #155	; 0x9b
 8002f12:	20c8      	movs	r0, #200	; 0xc8
 8002f14:	f7fe fb58 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "ON");
 8002f18:	4913      	ldr	r1, [pc, #76]	; (8002f68 <showLightsControlPanel+0x31c>)
 8002f1a:	480a      	ldr	r0, [pc, #40]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002f1c:	f005 fd36 	bl	800898c <siprintf>
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002f24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	229d      	movs	r2, #157	; 0x9d
 8002f32:	21cb      	movs	r1, #203	; 0xcb
 8002f34:	4803      	ldr	r0, [pc, #12]	; (8002f44 <showLightsControlPanel+0x2f8>)
 8002f36:	f7fe fdb1 	bl	8001a9c <EF_PutString>
 8002f3a:	e035      	b.n	8002fa8 <showLightsControlPanel+0x35c>
 8002f3c:	0800f3b8 	.word	0x0800f3b8
 8002f40:	0800c6f4 	.word	0x0800c6f4
 8002f44:	200002ac 	.word	0x200002ac
 8002f48:	0800c704 	.word	0x0800c704
 8002f4c:	0800c714 	.word	0x0800c714
 8002f50:	0800c724 	.word	0x0800c724
 8002f54:	0800c734 	.word	0x0800c734
 8002f58:	0800d440 	.word	0x0800d440
 8002f5c:	0800c744 	.word	0x0800c744
 8002f60:	0800c74c 	.word	0x0800c74c
 8002f64:	20000264 	.word	0x20000264
 8002f68:	0800c6ec 	.word	0x0800c6ec
 8002f6c:	0800c6f0 	.word	0x0800c6f0
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8002f70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	2305      	movs	r3, #5
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2315      	movs	r3, #21
 8002f7c:	2221      	movs	r2, #33	; 0x21
 8002f7e:	219b      	movs	r1, #155	; 0x9b
 8002f80:	20c8      	movs	r0, #200	; 0xc8
 8002f82:	f7fe fb21 	bl	80015c8 <GFX_DrawFillRoundRectangle>
		  Len = sprintf((char*)Msg, "OFF");
 8002f86:	490d      	ldr	r1, [pc, #52]	; (8002fbc <showLightsControlPanel+0x370>)
 8002f88:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <showLightsControlPanel+0x374>)
 8002f8a:	f005 fcff 	bl	800898c <siprintf>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8002f92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	229d      	movs	r2, #157	; 0x9d
 8002fa0:	21cb      	movs	r1, #203	; 0xcb
 8002fa2:	4807      	ldr	r0, [pc, #28]	; (8002fc0 <showLightsControlPanel+0x374>)
 8002fa4:	f7fe fd7a 	bl	8001a9c <EF_PutString>
	  }

	  Len++;
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	3301      	adds	r3, #1
 8002fac:	71fb      	strb	r3, [r7, #7]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002fae:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <showLightsControlPanel+0x378>)
 8002fb0:	f7fe fb5a 	bl	8001668 <EF_SetFont>

}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	0800c6f0 	.word	0x0800c6f0
 8002fc0:	200002ac 	.word	0x200002ac
 8002fc4:	0800f3b8 	.word	0x0800f3b8

08002fc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <MX_GPIO_Init+0x100>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a38      	ldr	r2, [pc, #224]	; (80030c8 <MX_GPIO_Init+0x100>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <MX_GPIO_Init+0x100>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <MX_GPIO_Init+0x100>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a31      	ldr	r2, [pc, #196]	; (80030c8 <MX_GPIO_Init+0x100>)
 8003004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <MX_GPIO_Init+0x100>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <MX_GPIO_Init+0x100>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <MX_GPIO_Init+0x100>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <MX_GPIO_Init+0x100>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <MX_GPIO_Init+0x100>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a23      	ldr	r2, [pc, #140]	; (80030c8 <MX_GPIO_Init+0x100>)
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <MX_GPIO_Init+0x100>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 800304e:	2200      	movs	r2, #0
 8003050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003054:	481d      	ldr	r0, [pc, #116]	; (80030cc <MX_GPIO_Init+0x104>)
 8003056:	f002 fc11 	bl	800587c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800305a:	2200      	movs	r2, #0
 800305c:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8003060:	481b      	ldr	r0, [pc, #108]	; (80030d0 <MX_GPIO_Init+0x108>)
 8003062:	f002 fc0b 	bl	800587c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 8003066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800306a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306c:	2301      	movs	r3, #1
 800306e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003074:	2300      	movs	r3, #0
 8003076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	4619      	mov	r1, r3
 800307e:	4813      	ldr	r0, [pc, #76]	; (80030cc <MX_GPIO_Init+0x104>)
 8003080:	f002 fa60 	bl	8005544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8003084:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8003088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308a:	2301      	movs	r3, #1
 800308c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f107 0314 	add.w	r3, r7, #20
 800309a:	4619      	mov	r1, r3
 800309c:	480c      	ldr	r0, [pc, #48]	; (80030d0 <MX_GPIO_Init+0x108>)
 800309e:	f002 fa51 	bl	8005544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80030a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80030ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4619      	mov	r1, r3
 80030b8:	4806      	ldr	r0, [pc, #24]	; (80030d4 <MX_GPIO_Init+0x10c>)
 80030ba:	f002 fa43 	bl	8005544 <HAL_GPIO_Init>

}
 80030be:	bf00      	nop
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40020400 	.word	0x40020400
 80030d4:	40020000 	.word	0x40020000

080030d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030dc:	f001 fbfa 	bl	80048d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030e0:	f000 f830 	bl	8003144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030e4:	f7ff ff70 	bl	8002fc8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80030e8:	f000 fefc 	bl	8003ee4 <MX_SPI1_Init>
  MX_DMA_Init();
 80030ec:	f7ff f9be 	bl	800246c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80030f0:	f001 fae8 	bl	80046c4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80030f4:	f000 ff2c 	bl	8003f50 <MX_SPI3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80030f8:	f000 f88c 	bl	8003214 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1);
 80030fc:	480d      	ldr	r0, [pc, #52]	; (8003134 <main+0x5c>)
 80030fe:	f7fe ff15 	bl	8001f2c <ILI9341_Init>

    UARTDMA_Init(&huartdma2, &huart2);
 8003102:	490d      	ldr	r1, [pc, #52]	; (8003138 <main+0x60>)
 8003104:	480d      	ldr	r0, [pc, #52]	; (800313c <main+0x64>)
 8003106:	f001 fa8e 	bl	8004626 <UARTDMA_Init>

  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 800310a:	2117      	movs	r1, #23
 800310c:	480c      	ldr	r0, [pc, #48]	; (8003140 <main+0x68>)
 800310e:	f7ff f95d 	bl	80023cc <XPT2046_Init>
  while (1)
  {

	 // ILI9341_DrawImage(40, 50, logo, 240, 140);

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8003112:	480a      	ldr	r0, [pc, #40]	; (800313c <main+0x64>)
 8003114:	f001 fa3b 	bl	800458e <UARTDMA_IsDataReceivedReady>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <main+0x4c>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 800311e:	4807      	ldr	r0, [pc, #28]	; (800313c <main+0x64>)
 8003120:	f000 fb6e 	bl	8003800 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8003124:	4805      	ldr	r0, [pc, #20]	; (800313c <main+0x64>)
 8003126:	f001 fa44 	bl	80045b2 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 800312a:	f7ff f87d 	bl	8002228 <XPT2046_Task>


	  MenuTFT();
 800312e:	f000 f891 	bl	8003254 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8003132:	e7ee      	b.n	8003112 <main+0x3a>
 8003134:	200004c0 	.word	0x200004c0
 8003138:	200005d8 	.word	0x200005d8
 800313c:	200002cc 	.word	0x200002cc
 8003140:	20000468 	.word	0x20000468

08003144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b094      	sub	sp, #80	; 0x50
 8003148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800314a:	f107 0320 	add.w	r3, r7, #32
 800314e:	2230      	movs	r2, #48	; 0x30
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f004 fd92 	bl	8007c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003158:	f107 030c 	add.w	r3, r7, #12
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <SystemClock_Config+0xc8>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	4a26      	ldr	r2, [pc, #152]	; (800320c <SystemClock_Config+0xc8>)
 8003172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003176:	6413      	str	r3, [r2, #64]	; 0x40
 8003178:	4b24      	ldr	r3, [pc, #144]	; (800320c <SystemClock_Config+0xc8>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003184:	2300      	movs	r3, #0
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	4b21      	ldr	r3, [pc, #132]	; (8003210 <SystemClock_Config+0xcc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a20      	ldr	r2, [pc, #128]	; (8003210 <SystemClock_Config+0xcc>)
 800318e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <SystemClock_Config+0xcc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031aa:	2302      	movs	r3, #2
 80031ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80031b4:	230c      	movs	r3, #12
 80031b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80031b8:	2360      	movs	r3, #96	; 0x60
 80031ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031bc:	2302      	movs	r3, #2
 80031be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80031c0:	2304      	movs	r3, #4
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031c4:	f107 0320 	add.w	r3, r7, #32
 80031c8:	4618      	mov	r0, r3
 80031ca:	f002 fb89 	bl	80058e0 <HAL_RCC_OscConfig>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031d4:	f000 f839 	bl	800324a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031d8:	230f      	movs	r3, #15
 80031da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031dc:	2302      	movs	r3, #2
 80031de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	2103      	movs	r1, #3
 80031f4:	4618      	mov	r0, r3
 80031f6:	f002 fdeb 	bl	8005dd0 <HAL_RCC_ClockConfig>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003200:	f000 f823 	bl	800324a <Error_Handler>
  }
}
 8003204:	bf00      	nop
 8003206:	3750      	adds	r7, #80	; 0x50
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	40007000 	.word	0x40007000

08003214 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	2017      	movs	r0, #23
 800321e:	f001 fd2e 	bl	8004c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003222:	2017      	movs	r0, #23
 8003224:	f001 fd47 	bl	8004cb6 <HAL_NVIC_EnableIRQ>
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800323c:	d101      	bne.n	8003242 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 800323e:	f7ff f8b9 	bl	80023b4 <XPT2046_IRQ>
	}
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800324e:	b672      	cpsid	i
}
 8003250:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003252:	e7fe      	b.n	8003252 <Error_Handler+0x8>

08003254 <MenuTFT>:
uint32_t TimerTouch = 0; // Timer to debouncing function

MenuTFTState State = MENUTFT_INIT; // Initialization state for MenuTFT State Machine

void MenuTFT(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
	switch(State)
 8003258:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <MenuTFT+0xa0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d846      	bhi.n	80032ee <MenuTFT+0x9a>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <MenuTFT+0x14>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003279 	.word	0x08003279
 800326c:	0800328b 	.word	0x0800328b
 8003270:	080032bf 	.word	0x080032bf
 8003274:	080032d7 	.word	0x080032d7
	{
	case MENUTFT_INIT:
		system_init();
 8003278:	f7ff f920 	bl	80024bc <system_init>
		State = MENUTFT_PARAMETERS;
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <MenuTFT+0xa0>)
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <MenuTFT+0xa4>)
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
		break;
 8003288:	e031      	b.n	80032ee <MenuTFT+0x9a>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1)
 800328a:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <MenuTFT+0xa4>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d112      	bne.n	80032b8 <MenuTFT+0x64>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8003292:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <MenuTFT+0xa8>)
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <MenuTFT+0xac>)
 800329a:	ed93 7a00 	vldr	s14, [r3]
 800329e:	eeb0 1a47 	vmov.f32	s2, s14
 80032a2:	2100      	movs	r1, #0
 80032a4:	2000      	movs	r0, #0
 80032a6:	eddf 0a17 	vldr	s1, [pc, #92]	; 8003304 <MenuTFT+0xb0>
 80032aa:	eeb0 0a67 	vmov.f32	s0, s15
 80032ae:	f7ff f9f9 	bl	80026a4 <showCurrentParameters>
			StateChangeFlag = 0;
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <MenuTFT+0xa4>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 80032b8:	f000 f826 	bl	8003308 <TouchParametersActivity>
		break;
 80032bc:	e017      	b.n	80032ee <MenuTFT+0x9a>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1)
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <MenuTFT+0xa4>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d104      	bne.n	80032d0 <MenuTFT+0x7c>
		{
			showControlPanel();
 80032c6:	f7ff faf3 	bl	80028b0 <showControlPanel>
			StateChangeFlag = 0;
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <MenuTFT+0xa4>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 80032d0:	f000 f866 	bl	80033a0 <TouchSwitchActivity>
		break;
 80032d4:	e00b      	b.n	80032ee <MenuTFT+0x9a>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1)
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <MenuTFT+0xa4>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d104      	bne.n	80032e8 <MenuTFT+0x94>
		{
			showLightsControlPanel();
 80032de:	f7ff fcb5 	bl	8002c4c <showLightsControlPanel>
			StateChangeFlag = 0;
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <MenuTFT+0xa4>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 80032e8:	f000 fa22 	bl	8003730 <TouchLightsActivity>
		break;
 80032ec:	bf00      	nop
	}
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000248 	.word	0x20000248
 80032f8:	20000242 	.word	0x20000242
 80032fc:	2000024c 	.word	0x2000024c
 8003300:	20000250 	.word	0x20000250
 8003304:	00000000 	.word	0x00000000

08003308 <TouchParametersActivity>:


void TouchParametersActivity(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800330e:	f7fe ff79 	bl	8002204 <XPT2046_IsTouched>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d039      	beq.n	800338c <TouchParametersActivity+0x84>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8003318:	f001 fb42 	bl	80049a0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <TouchParametersActivity+0x8c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003328:	d330      	bcc.n	800338c <TouchParametersActivity+0x84>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800332a:	1d3a      	adds	r2, r7, #4
 800332c:	1dbb      	adds	r3, r7, #6
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe ff29 	bl	8002188 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b09      	cmp	r3, #9
 800333a:	d90f      	bls.n	800335c <TouchParametersActivity+0x54>
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	2b6e      	cmp	r3, #110	; 0x6e
 8003340:	d80c      	bhi.n	800335c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8003342:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8003344:	2bd7      	cmp	r3, #215	; 0xd7
 8003346:	d909      	bls.n	800335c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8003348:	88bb      	ldrh	r3, [r7, #4]
 800334a:	2bec      	cmp	r3, #236	; 0xec
 800334c:	d806      	bhi.n	800335c <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <TouchParametersActivity+0x90>)
 8003350:	2203      	movs	r2, #3
 8003352:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <TouchParametersActivity+0x94>)
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e012      	b.n	8003382 <TouchParametersActivity+0x7a>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	2bdb      	cmp	r3, #219	; 0xdb
 8003360:	d90f      	bls.n	8003382 <TouchParametersActivity+0x7a>
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003368:	d80b      	bhi.n	8003382 <TouchParametersActivity+0x7a>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800336a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800336c:	2bd7      	cmp	r3, #215	; 0xd7
 800336e:	d908      	bls.n	8003382 <TouchParametersActivity+0x7a>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8003370:	88bb      	ldrh	r3, [r7, #4]
 8003372:	2bec      	cmp	r3, #236	; 0xec
 8003374:	d805      	bhi.n	8003382 <TouchParametersActivity+0x7a>
			{
				State = MENUTFT_SWITCH;
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <TouchParametersActivity+0x90>)
 8003378:	2202      	movs	r2, #2
 800337a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <TouchParametersActivity+0x94>)
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8003382:	f001 fb0d 	bl	80049a0 <HAL_GetTick>
 8003386:	4603      	mov	r3, r0
 8003388:	4a02      	ldr	r2, [pc, #8]	; (8003394 <TouchParametersActivity+0x8c>)
 800338a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000244 	.word	0x20000244
 8003398:	20000248 	.word	0x20000248
 800339c:	20000242 	.word	0x20000242

080033a0 <TouchSwitchActivity>:

void TouchSwitchActivity(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80033a6:	f7fe ff2d 	bl	8002204 <XPT2046_IsTouched>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 81b0 	beq.w	8003712 <TouchSwitchActivity+0x372>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80033b2:	f001 faf5 	bl	80049a0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4bb6      	ldr	r3, [pc, #728]	; (8003694 <TouchSwitchActivity+0x2f4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c2:	f0c0 81a6 	bcc.w	8003712 <TouchSwitchActivity+0x372>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80033c6:	1cba      	adds	r2, r7, #2
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe fedb 	bl	8002188 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80033d2:	88bb      	ldrh	r3, [r7, #4]
 80033d4:	2b09      	cmp	r3, #9
 80033d6:	d90f      	bls.n	80033f8 <TouchSwitchActivity+0x58>
 80033d8:	88bb      	ldrh	r3, [r7, #4]
 80033da:	2b6e      	cmp	r3, #110	; 0x6e
 80033dc:	d80c      	bhi.n	80033f8 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80033de:	887b      	ldrh	r3, [r7, #2]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80033e0:	2bd7      	cmp	r3, #215	; 0xd7
 80033e2:	d909      	bls.n	80033f8 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	2bec      	cmp	r3, #236	; 0xec
 80033e8:	d806      	bhi.n	80033f8 <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 80033ea:	4bab      	ldr	r3, [pc, #684]	; (8003698 <TouchSwitchActivity+0x2f8>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80033f0:	4baa      	ldr	r3, [pc, #680]	; (800369c <TouchSwitchActivity+0x2fc>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e187      	b.n	8003708 <TouchSwitchActivity+0x368>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80033f8:	88bb      	ldrh	r3, [r7, #4]
 80033fa:	2bdb      	cmp	r3, #219	; 0xdb
 80033fc:	d910      	bls.n	8003420 <TouchSwitchActivity+0x80>
 80033fe:	88bb      	ldrh	r3, [r7, #4]
 8003400:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003404:	d80c      	bhi.n	8003420 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8003406:	887b      	ldrh	r3, [r7, #2]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8003408:	2bd7      	cmp	r3, #215	; 0xd7
 800340a:	d909      	bls.n	8003420 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800340c:	887b      	ldrh	r3, [r7, #2]
 800340e:	2bec      	cmp	r3, #236	; 0xec
 8003410:	d806      	bhi.n	8003420 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 8003412:	4ba1      	ldr	r3, [pc, #644]	; (8003698 <TouchSwitchActivity+0x2f8>)
 8003414:	2203      	movs	r2, #3
 8003416:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8003418:	4ba0      	ldr	r3, [pc, #640]	; (800369c <TouchSwitchActivity+0x2fc>)
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e173      	b.n	8003708 <TouchSwitchActivity+0x368>
			}
			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8003420:	88bb      	ldrh	r3, [r7, #4]
 8003422:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8003426:	f0c0 816f 	bcc.w	8003708 <TouchSwitchActivity+0x368>
 800342a:	88bb      	ldrh	r3, [r7, #4]
 800342c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003430:	f080 816a 	bcs.w	8003708 <TouchSwitchActivity+0x368>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8003434:	489a      	ldr	r0, [pc, #616]	; (80036a0 <TouchSwitchActivity+0x300>)
 8003436:	f7fe f917 	bl	8001668 <EF_SetFont>
				uint8_t Len = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	71fb      	strb	r3, [r7, #7]
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))	//FIRST SWITCH
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d950      	bls.n	80034e6 <TouchSwitchActivity+0x146>
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	2b56      	cmp	r3, #86	; 0x56
 8003448:	d84d      	bhi.n	80034e6 <TouchSwitchActivity+0x146>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 800344a:	4b96      	ldr	r3, [pc, #600]	; (80036a4 <TouchSwitchActivity+0x304>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d024      	beq.n	800349c <TouchSwitchActivity+0xfc>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8003452:	2006      	movs	r0, #6
 8003454:	f000 fc04 	bl	8003c60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003458:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	2305      	movs	r3, #5
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2315      	movs	r3, #21
 8003464:	2221      	movs	r2, #33	; 0x21
 8003466:	2141      	movs	r1, #65	; 0x41
 8003468:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800346c:	f7fe f8ac 	bl	80015c8 <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 8003470:	498d      	ldr	r1, [pc, #564]	; (80036a8 <TouchSwitchActivity+0x308>)
 8003472:	488e      	ldr	r0, [pc, #568]	; (80036ac <TouchSwitchActivity+0x30c>)
 8003474:	f005 fa8a 	bl	800898c <siprintf>
 8003478:	4603      	mov	r3, r0
 800347a:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800347c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	2300      	movs	r3, #0
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	2243      	movs	r2, #67	; 0x43
 800348a:	f240 1111 	movw	r1, #273	; 0x111
 800348e:	4887      	ldr	r0, [pc, #540]	; (80036ac <TouchSwitchActivity+0x30c>)
 8003490:	f7fe fb04 	bl	8001a9c <EF_PutString>
						SwitchesButtonState[0] = 0;
 8003494:	4b83      	ldr	r3, [pc, #524]	; (80036a4 <TouchSwitchActivity+0x304>)
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
					if(SwitchesButtonState[0] >= 1) // if is ON
 800349a:	e12f      	b.n	80036fc <TouchSwitchActivity+0x35c>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 800349c:	2005      	movs	r0, #5
 800349e:	f000 fbdf 	bl	8003c60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80034a2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	2305      	movs	r3, #5
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2315      	movs	r3, #21
 80034ae:	2221      	movs	r2, #33	; 0x21
 80034b0:	2141      	movs	r1, #65	; 0x41
 80034b2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80034b6:	f7fe f887 	bl	80015c8 <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 80034ba:	497d      	ldr	r1, [pc, #500]	; (80036b0 <TouchSwitchActivity+0x310>)
 80034bc:	487b      	ldr	r0, [pc, #492]	; (80036ac <TouchSwitchActivity+0x30c>)
 80034be:	f005 fa65 	bl	800898c <siprintf>
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80034c6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	2300      	movs	r3, #0
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2300      	movs	r3, #0
 80034d2:	2243      	movs	r2, #67	; 0x43
 80034d4:	f240 1111 	movw	r1, #273	; 0x111
 80034d8:	4874      	ldr	r0, [pc, #464]	; (80036ac <TouchSwitchActivity+0x30c>)
 80034da:	f7fe fadf 	bl	8001a9c <EF_PutString>
						SwitchesButtonState[0] = 1;
 80034de:	4b71      	ldr	r3, [pc, #452]	; (80036a4 <TouchSwitchActivity+0x304>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
					if(SwitchesButtonState[0] >= 1) // if is ON
 80034e4:	e10a      	b.n	80036fc <TouchSwitchActivity+0x35c>
					}

				}
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))	//SECOND SWITCH
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	2b5e      	cmp	r3, #94	; 0x5e
 80034ea:	d950      	bls.n	800358e <TouchSwitchActivity+0x1ee>
 80034ec:	887b      	ldrh	r3, [r7, #2]
 80034ee:	2b74      	cmp	r3, #116	; 0x74
 80034f0:	d84d      	bhi.n	800358e <TouchSwitchActivity+0x1ee>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 80034f2:	4b6c      	ldr	r3, [pc, #432]	; (80036a4 <TouchSwitchActivity+0x304>)
 80034f4:	785b      	ldrb	r3, [r3, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d024      	beq.n	8003544 <TouchSwitchActivity+0x1a4>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 80034fa:	2008      	movs	r0, #8
 80034fc:	f000 fbb0 	bl	8003c60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003500:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	2305      	movs	r3, #5
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	2315      	movs	r3, #21
 800350c:	2221      	movs	r2, #33	; 0x21
 800350e:	215f      	movs	r1, #95	; 0x5f
 8003510:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003514:	f7fe f858 	bl	80015c8 <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 8003518:	4963      	ldr	r1, [pc, #396]	; (80036a8 <TouchSwitchActivity+0x308>)
 800351a:	4864      	ldr	r0, [pc, #400]	; (80036ac <TouchSwitchActivity+0x30c>)
 800351c:	f005 fa36 	bl	800898c <siprintf>
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003524:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	2300      	movs	r3, #0
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	2300      	movs	r3, #0
 8003530:	2261      	movs	r2, #97	; 0x61
 8003532:	f240 1111 	movw	r1, #273	; 0x111
 8003536:	485d      	ldr	r0, [pc, #372]	; (80036ac <TouchSwitchActivity+0x30c>)
 8003538:	f7fe fab0 	bl	8001a9c <EF_PutString>
						SwitchesButtonState[1] = 0;
 800353c:	4b59      	ldr	r3, [pc, #356]	; (80036a4 <TouchSwitchActivity+0x304>)
 800353e:	2200      	movs	r2, #0
 8003540:	705a      	strb	r2, [r3, #1]
					if(SwitchesButtonState[1] >= 1) // if is ON
 8003542:	e0db      	b.n	80036fc <TouchSwitchActivity+0x35c>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8003544:	2007      	movs	r0, #7
 8003546:	f000 fb8b 	bl	8003c60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800354a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	2305      	movs	r3, #5
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2315      	movs	r3, #21
 8003556:	2221      	movs	r2, #33	; 0x21
 8003558:	215f      	movs	r1, #95	; 0x5f
 800355a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800355e:	f7fe f833 	bl	80015c8 <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 8003562:	4953      	ldr	r1, [pc, #332]	; (80036b0 <TouchSwitchActivity+0x310>)
 8003564:	4851      	ldr	r0, [pc, #324]	; (80036ac <TouchSwitchActivity+0x30c>)
 8003566:	f005 fa11 	bl	800898c <siprintf>
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800356e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	2300      	movs	r3, #0
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	2300      	movs	r3, #0
 800357a:	2261      	movs	r2, #97	; 0x61
 800357c:	f240 1111 	movw	r1, #273	; 0x111
 8003580:	484a      	ldr	r0, [pc, #296]	; (80036ac <TouchSwitchActivity+0x30c>)
 8003582:	f7fe fa8b 	bl	8001a9c <EF_PutString>
						SwitchesButtonState[1] = 1;
 8003586:	4b47      	ldr	r3, [pc, #284]	; (80036a4 <TouchSwitchActivity+0x304>)
 8003588:	2201      	movs	r2, #1
 800358a:	705a      	strb	r2, [r3, #1]
					if(SwitchesButtonState[1] >= 1) // if is ON
 800358c:	e0b6      	b.n	80036fc <TouchSwitchActivity+0x35c>
					}
				}
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))	//THIRD SWITCH
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	2b7c      	cmp	r3, #124	; 0x7c
 8003592:	d950      	bls.n	8003636 <TouchSwitchActivity+0x296>
 8003594:	887b      	ldrh	r3, [r7, #2]
 8003596:	2b92      	cmp	r3, #146	; 0x92
 8003598:	d84d      	bhi.n	8003636 <TouchSwitchActivity+0x296>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 800359a:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <TouchSwitchActivity+0x304>)
 800359c:	789b      	ldrb	r3, [r3, #2]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d024      	beq.n	80035ec <TouchSwitchActivity+0x24c>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 80035a2:	200a      	movs	r0, #10
 80035a4:	f000 fb5c 	bl	8003c60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80035a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	2305      	movs	r3, #5
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2315      	movs	r3, #21
 80035b4:	2221      	movs	r2, #33	; 0x21
 80035b6:	217d      	movs	r1, #125	; 0x7d
 80035b8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80035bc:	f7fe f804 	bl	80015c8 <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 80035c0:	4939      	ldr	r1, [pc, #228]	; (80036a8 <TouchSwitchActivity+0x308>)
 80035c2:	483a      	ldr	r0, [pc, #232]	; (80036ac <TouchSwitchActivity+0x30c>)
 80035c4:	f005 f9e2 	bl	800898c <siprintf>
 80035c8:	4603      	mov	r3, r0
 80035ca:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80035cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	2300      	movs	r3, #0
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	227f      	movs	r2, #127	; 0x7f
 80035da:	f240 1111 	movw	r1, #273	; 0x111
 80035de:	4833      	ldr	r0, [pc, #204]	; (80036ac <TouchSwitchActivity+0x30c>)
 80035e0:	f7fe fa5c 	bl	8001a9c <EF_PutString>
						SwitchesButtonState[2] = 0;
 80035e4:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <TouchSwitchActivity+0x304>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	709a      	strb	r2, [r3, #2]
					if(SwitchesButtonState[2] >= 1) // if is ON
 80035ea:	e087      	b.n	80036fc <TouchSwitchActivity+0x35c>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 80035ec:	2009      	movs	r0, #9
 80035ee:	f000 fb37 	bl	8003c60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80035f2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	2305      	movs	r3, #5
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2315      	movs	r3, #21
 80035fe:	2221      	movs	r2, #33	; 0x21
 8003600:	217d      	movs	r1, #125	; 0x7d
 8003602:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003606:	f7fd ffdf 	bl	80015c8 <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 800360a:	4929      	ldr	r1, [pc, #164]	; (80036b0 <TouchSwitchActivity+0x310>)
 800360c:	4827      	ldr	r0, [pc, #156]	; (80036ac <TouchSwitchActivity+0x30c>)
 800360e:	f005 f9bd 	bl	800898c <siprintf>
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003616:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	2300      	movs	r3, #0
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2300      	movs	r3, #0
 8003622:	227f      	movs	r2, #127	; 0x7f
 8003624:	f240 1111 	movw	r1, #273	; 0x111
 8003628:	4820      	ldr	r0, [pc, #128]	; (80036ac <TouchSwitchActivity+0x30c>)
 800362a:	f7fe fa37 	bl	8001a9c <EF_PutString>
						SwitchesButtonState[2] = 1;
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <TouchSwitchActivity+0x304>)
 8003630:	2201      	movs	r2, #1
 8003632:	709a      	strb	r2, [r3, #2]
					if(SwitchesButtonState[2] >= 1) // if is ON
 8003634:	e062      	b.n	80036fc <TouchSwitchActivity+0x35c>
					}
				}
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))	//FOURTH SWITCH
 8003636:	887b      	ldrh	r3, [r7, #2]
 8003638:	2b9a      	cmp	r3, #154	; 0x9a
 800363a:	d95f      	bls.n	80036fc <TouchSwitchActivity+0x35c>
 800363c:	887b      	ldrh	r3, [r7, #2]
 800363e:	2bb0      	cmp	r3, #176	; 0xb0
 8003640:	d85c      	bhi.n	80036fc <TouchSwitchActivity+0x35c>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <TouchSwitchActivity+0x304>)
 8003644:	78db      	ldrb	r3, [r3, #3]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d034      	beq.n	80036b4 <TouchSwitchActivity+0x314>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 800364a:	200c      	movs	r0, #12
 800364c:	f000 fb08 	bl	8003c60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003650:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	2305      	movs	r3, #5
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2315      	movs	r3, #21
 800365c:	2221      	movs	r2, #33	; 0x21
 800365e:	219b      	movs	r1, #155	; 0x9b
 8003660:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003664:	f7fd ffb0 	bl	80015c8 <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "OFF");
 8003668:	490f      	ldr	r1, [pc, #60]	; (80036a8 <TouchSwitchActivity+0x308>)
 800366a:	4810      	ldr	r0, [pc, #64]	; (80036ac <TouchSwitchActivity+0x30c>)
 800366c:	f005 f98e 	bl	800898c <siprintf>
 8003670:	4603      	mov	r3, r0
 8003672:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003674:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	2300      	movs	r3, #0
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2300      	movs	r3, #0
 8003680:	229d      	movs	r2, #157	; 0x9d
 8003682:	f240 1111 	movw	r1, #273	; 0x111
 8003686:	4809      	ldr	r0, [pc, #36]	; (80036ac <TouchSwitchActivity+0x30c>)
 8003688:	f7fe fa08 	bl	8001a9c <EF_PutString>
						SwitchesButtonState[3] = 0;
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <TouchSwitchActivity+0x304>)
 800368e:	2200      	movs	r2, #0
 8003690:	70da      	strb	r2, [r3, #3]
 8003692:	e033      	b.n	80036fc <TouchSwitchActivity+0x35c>
 8003694:	20000244 	.word	0x20000244
 8003698:	20000248 	.word	0x20000248
 800369c:	20000242 	.word	0x20000242
 80036a0:	0800d440 	.word	0x0800d440
 80036a4:	20000260 	.word	0x20000260
 80036a8:	0800c758 	.word	0x0800c758
 80036ac:	200002ac 	.word	0x200002ac
 80036b0:	0800c75c 	.word	0x0800c75c
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 80036b4:	200b      	movs	r0, #11
 80036b6:	f000 fad3 	bl	8003c60 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80036ba:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	2305      	movs	r3, #5
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2315      	movs	r3, #21
 80036c6:	2221      	movs	r2, #33	; 0x21
 80036c8:	219b      	movs	r1, #155	; 0x9b
 80036ca:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80036ce:	f7fd ff7b 	bl	80015c8 <GFX_DrawFillRoundRectangle>
						Len = sprintf((char*)Msg, "ON");
 80036d2:	4912      	ldr	r1, [pc, #72]	; (800371c <TouchSwitchActivity+0x37c>)
 80036d4:	4812      	ldr	r0, [pc, #72]	; (8003720 <TouchSwitchActivity+0x380>)
 80036d6:	f005 f959 	bl	800898c <siprintf>
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80036de:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2300      	movs	r3, #0
 80036ea:	229d      	movs	r2, #157	; 0x9d
 80036ec:	f240 1111 	movw	r1, #273	; 0x111
 80036f0:	480b      	ldr	r0, [pc, #44]	; (8003720 <TouchSwitchActivity+0x380>)
 80036f2:	f7fe f9d3 	bl	8001a9c <EF_PutString>
						SwitchesButtonState[3] = 1;
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <TouchSwitchActivity+0x384>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	70da      	strb	r2, [r3, #3]
					}
				}
				Len++;
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	3301      	adds	r3, #1
 8003700:	71fb      	strb	r3, [r7, #7]
				EF_SetFont(&arialBlack_20ptFontInfo);
 8003702:	4809      	ldr	r0, [pc, #36]	; (8003728 <TouchSwitchActivity+0x388>)
 8003704:	f7fd ffb0 	bl	8001668 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 8003708:	f001 f94a 	bl	80049a0 <HAL_GetTick>
 800370c:	4603      	mov	r3, r0
 800370e:	4a07      	ldr	r2, [pc, #28]	; (800372c <TouchSwitchActivity+0x38c>)
 8003710:	6013      	str	r3, [r2, #0]
		}
	}
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	0800c75c 	.word	0x0800c75c
 8003720:	200002ac 	.word	0x200002ac
 8003724:	20000260 	.word	0x20000260
 8003728:	0800f3b8 	.word	0x0800f3b8
 800372c:	20000244 	.word	0x20000244

08003730 <TouchLightsActivity>:

void TouchLightsActivity(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8003736:	f7fe fd65 	bl	8002204 <XPT2046_IsTouched>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d054      	beq.n	80037ea <TouchLightsActivity+0xba>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8003740:	f001 f92e 	bl	80049a0 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <TouchLightsActivity+0xc4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003750:	d34b      	bcc.n	80037ea <TouchLightsActivity+0xba>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8003752:	1d3a      	adds	r2, r7, #4
 8003754:	1dbb      	adds	r3, r7, #6
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fd15 	bl	8002188 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	2b09      	cmp	r3, #9
 8003762:	d90f      	bls.n	8003784 <TouchLightsActivity+0x54>
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	2b6e      	cmp	r3, #110	; 0x6e
 8003768:	d80c      	bhi.n	8003784 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800376a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800376c:	2bd7      	cmp	r3, #215	; 0xd7
 800376e:	d909      	bls.n	8003784 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8003770:	88bb      	ldrh	r3, [r7, #4]
 8003772:	2bec      	cmp	r3, #236	; 0xec
 8003774:	d806      	bhi.n	8003784 <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <TouchLightsActivity+0xc8>)
 8003778:	2202      	movs	r2, #2
 800377a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <TouchLightsActivity+0xcc>)
 800377e:	2201      	movs	r2, #1
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	e02d      	b.n	80037e0 <TouchLightsActivity+0xb0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	2bdb      	cmp	r3, #219	; 0xdb
 8003788:	d92a      	bls.n	80037e0 <TouchLightsActivity+0xb0>
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003790:	d826      	bhi.n	80037e0 <TouchLightsActivity+0xb0>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8003792:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8003794:	2bd7      	cmp	r3, #215	; 0xd7
 8003796:	d923      	bls.n	80037e0 <TouchLightsActivity+0xb0>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8003798:	88bb      	ldrh	r3, [r7, #4]
 800379a:	2bec      	cmp	r3, #236	; 0xec
 800379c:	d806      	bhi.n	80037ac <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <TouchLightsActivity+0xc8>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80037a4:	4b15      	ldr	r3, [pc, #84]	; (80037fc <TouchLightsActivity+0xcc>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	e019      	b.n	80037e0 <TouchLightsActivity+0xb0>
			}

			//
			// Check if it is button to change LIGHTS status
			//
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	2bc7      	cmp	r3, #199	; 0xc7
 80037b0:	d916      	bls.n	80037e0 <TouchLightsActivity+0xb0>
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	2be9      	cmp	r3, #233	; 0xe9
 80037b6:	d813      	bhi.n	80037e0 <TouchLightsActivity+0xb0>
			{
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 80037b8:	88bb      	ldrh	r3, [r7, #4]
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d910      	bls.n	80037e0 <TouchLightsActivity+0xb0>
 80037be:	88bb      	ldrh	r3, [r7, #4]
 80037c0:	2b56      	cmp	r3, #86	; 0x56
 80037c2:	d90d      	bls.n	80037e0 <TouchLightsActivity+0xb0>
				{

					//TODO
				}
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 80037c4:	88bb      	ldrh	r3, [r7, #4]
 80037c6:	2b5e      	cmp	r3, #94	; 0x5e
 80037c8:	d90a      	bls.n	80037e0 <TouchLightsActivity+0xb0>
 80037ca:	88bb      	ldrh	r3, [r7, #4]
 80037cc:	2b74      	cmp	r3, #116	; 0x74
 80037ce:	d907      	bls.n	80037e0 <TouchLightsActivity+0xb0>
				{
					//TODO
				}
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 80037d0:	88bb      	ldrh	r3, [r7, #4]
 80037d2:	2b7c      	cmp	r3, #124	; 0x7c
 80037d4:	d904      	bls.n	80037e0 <TouchLightsActivity+0xb0>
 80037d6:	88bb      	ldrh	r3, [r7, #4]
 80037d8:	2b92      	cmp	r3, #146	; 0x92
 80037da:	d901      	bls.n	80037e0 <TouchLightsActivity+0xb0>
				{
					//TODO
				}
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 80037dc:	88bb      	ldrh	r3, [r7, #4]
 80037de:	2b9a      	cmp	r3, #154	; 0x9a
				{
					//TODO
				}
			}

			TimerTouch = HAL_GetTick();
 80037e0:	f001 f8de 	bl	80049a0 <HAL_GetTick>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4a03      	ldr	r2, [pc, #12]	; (80037f4 <TouchLightsActivity+0xc4>)
 80037e8:	6013      	str	r3, [r2, #0]
		}
	}
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000244 	.word	0x20000244
 80037f8:	20000248 	.word	0x20000248
 80037fc:	20000242 	.word	0x20000242

08003800 <UART_ParseLine>:
 * 		ASTATESTATUS=?\n	// Podaj stan wszystkich przekaznikow
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b094      	sub	sp, #80	; 0x50
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8003808:	f107 0308 	add.w	r3, r7, #8
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fe66 	bl	80044e0 <UARTDMA_GetLineFromReceiveBuffer>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d14b      	bne.n	80038b2 <UART_ParseLine+0xb2>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 800381a:	f107 0308 	add.w	r3, r7, #8
 800381e:	4927      	ldr	r1, [pc, #156]	; (80038bc <UART_ParseLine+0xbc>)
 8003820:	4618      	mov	r0, r3
 8003822:	f005 ff0d 	bl	8009640 <strtok>
 8003826:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8003828:	4925      	ldr	r1, [pc, #148]	; (80038c0 <UART_ParseLine+0xc0>)
 800382a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800382c:	f7fc fcd8 	bl	80001e0 <strcmp>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8003836:	f000 f851 	bl	80038dc <UART_ParseLED>
		  UART_ParseAnswLightsStateStatus();
	  }

	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 800383a:	e03a      	b.n	80038b2 <UART_ParseLine+0xb2>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 800383c:	4921      	ldr	r1, [pc, #132]	; (80038c4 <UART_ParseLine+0xc4>)
 800383e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003840:	f7fc fcce 	bl	80001e0 <strcmp>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 800384a:	f000 f895 	bl	8003978 <UART_ParseAnswStatus>
}
 800384e:	e030      	b.n	80038b2 <UART_ParseLine+0xb2>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8003850:	491d      	ldr	r1, [pc, #116]	; (80038c8 <UART_ParseLine+0xc8>)
 8003852:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003854:	f7fc fcc4 	bl	80001e0 <strcmp>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 800385e:	f000 f893 	bl	8003988 <UART_ParseAnswTemp>
}
 8003862:	e026      	b.n	80038b2 <UART_ParseLine+0xb2>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8003864:	4919      	ldr	r1, [pc, #100]	; (80038cc <UART_ParseLine+0xcc>)
 8003866:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003868:	f7fc fcba 	bl	80001e0 <strcmp>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8003872:	f000 f8d7 	bl	8003a24 <UART_ParseAnswPres>
}
 8003876:	e01c      	b.n	80038b2 <UART_ParseLine+0xb2>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8003878:	4915      	ldr	r1, [pc, #84]	; (80038d0 <UART_ParseLine+0xd0>)
 800387a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800387c:	f7fc fcb0 	bl	80001e0 <strcmp>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8003886:	f000 f91b 	bl	8003ac0 <UART_ParseAnswChangeRelayState>
}
 800388a:	e012      	b.n	80038b2 <UART_ParseLine+0xb2>
	  else if (strcmp(ParsePointer, "ASTATESTATUS") == 0) // Answear about current Switch Status
 800388c:	4911      	ldr	r1, [pc, #68]	; (80038d4 <UART_ParseLine+0xd4>)
 800388e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003890:	f7fc fca6 	bl	80001e0 <strcmp>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <UART_ParseLine+0xa0>
		  UART_ParseAnswRelayStateStatus();
 800389a:	f000 f919 	bl	8003ad0 <UART_ParseAnswRelayStateStatus>
}
 800389e:	e008      	b.n	80038b2 <UART_ParseLine+0xb2>
	  else if (strcmp(ParsePointer, "ALIGHTSSTATUS=?\n") == 0) // Answear about current Switch Status
 80038a0:	490d      	ldr	r1, [pc, #52]	; (80038d8 <UART_ParseLine+0xd8>)
 80038a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80038a4:	f7fc fc9c 	bl	80001e0 <strcmp>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <UART_ParseLine+0xb2>
		  UART_ParseAnswLightsStateStatus();
 80038ae:	f000 f973 	bl	8003b98 <UART_ParseAnswLightsStateStatus>
}
 80038b2:	bf00      	nop
 80038b4:	3750      	adds	r7, #80	; 0x50
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	0800c760 	.word	0x0800c760
 80038c0:	0800c764 	.word	0x0800c764
 80038c4:	0800c768 	.word	0x0800c768
 80038c8:	0800c770 	.word	0x0800c770
 80038cc:	0800c778 	.word	0x0800c778
 80038d0:	0800c780 	.word	0x0800c780
 80038d4:	0800c78c 	.word	0x0800c78c
 80038d8:	0800c79c 	.word	0x0800c79c

080038dc <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsowanie testowej funkcji od LED
// "LED=1\n"
void UART_ParseLED()
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80038e2:	491f      	ldr	r1, [pc, #124]	; (8003960 <UART_ParseLED+0x84>)
 80038e4:	2000      	movs	r0, #0
 80038e6:	f005 feab 	bl	8009640 <strtok>
 80038ea:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d031      	beq.n	8003958 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b2f      	cmp	r3, #47	; 0x2f
 80038fa:	d903      	bls.n	8003904 <UART_ParseLED+0x28>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b39      	cmp	r3, #57	; 0x39
 8003902:	d904      	bls.n	800390e <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8003904:	4917      	ldr	r1, [pc, #92]	; (8003964 <UART_ParseLED+0x88>)
 8003906:	4818      	ldr	r0, [pc, #96]	; (8003968 <UART_ParseLED+0x8c>)
 8003908:	f000 fe1b 	bl	8004542 <UARTDMA_Print>
			return;	// And exit parsing
 800390c:	e024      	b.n	8003958 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f004 f985 	bl	8007c1e <atoi>
 8003914:	4603      	mov	r3, r0
 8003916:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10a      	bne.n	8003934 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 800391e:	2200      	movs	r2, #0
 8003920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003924:	4811      	ldr	r0, [pc, #68]	; (800396c <UART_ParseLED+0x90>)
 8003926:	f001 ffa9 	bl	800587c <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 800392a:	4911      	ldr	r1, [pc, #68]	; (8003970 <UART_ParseLED+0x94>)
 800392c:	480e      	ldr	r0, [pc, #56]	; (8003968 <UART_ParseLED+0x8c>)
 800392e:	f000 fe08 	bl	8004542 <UARTDMA_Print>
 8003932:	e011      	b.n	8003958 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 800393a:	2201      	movs	r2, #1
 800393c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003940:	480a      	ldr	r0, [pc, #40]	; (800396c <UART_ParseLED+0x90>)
 8003942:	f001 ff9b 	bl	800587c <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8003946:	490b      	ldr	r1, [pc, #44]	; (8003974 <UART_ParseLED+0x98>)
 8003948:	4807      	ldr	r0, [pc, #28]	; (8003968 <UART_ParseLED+0x8c>)
 800394a:	f000 fdfa 	bl	8004542 <UARTDMA_Print>
 800394e:	e003      	b.n	8003958 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8003950:	4904      	ldr	r1, [pc, #16]	; (8003964 <UART_ParseLED+0x88>)
 8003952:	4805      	ldr	r0, [pc, #20]	; (8003968 <UART_ParseLED+0x8c>)
 8003954:	f000 fdf5 	bl	8004542 <UARTDMA_Print>
		}
	}
}
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	0800c7b0 	.word	0x0800c7b0
 8003964:	0800c7b4 	.word	0x0800c7b4
 8003968:	200002cc 	.word	0x200002cc
 800396c:	40020800 	.word	0x40020800
 8003970:	0800c7c4 	.word	0x0800c7c4
 8003974:	0800c7d0 	.word	0x0800c7d0

08003978 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
	//TODO: Dodac obsluge statusu urzadzenia
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000"
void UART_ParseAnswTemp()
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 800398e:	491e      	ldr	r1, [pc, #120]	; (8003a08 <UART_ParseAnswTemp+0x80>)
 8003990:	2000      	movs	r0, #0
 8003992:	f005 fe55 	bl	8009640 <strtok>
 8003996:	6038      	str	r0, [r7, #0]
	uint8_t Len;
	if(strlen(ParsePointer) > 0) // If string exists
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d02e      	beq.n	80039fe <UART_ParseAnswTemp+0x76>
	{
		CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 80039a0:	6838      	ldr	r0, [r7, #0]
 80039a2:	f004 f939 	bl	8007c18 <atof>
 80039a6:	ec53 2b10 	vmov	r2, r3, d0
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	f7fd f933 	bl	8000c18 <__aeabi_d2f>
 80039b2:	4603      	mov	r3, r0
 80039b4:	4a15      	ldr	r2, [pc, #84]	; (8003a0c <UART_ParseAnswTemp+0x84>)
 80039b6:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Temp
		if(State == MENUTFT_PARAMETERS)
 80039b8:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <UART_ParseAnswTemp+0x88>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d117      	bne.n	80039f0 <UART_ParseAnswTemp+0x68>
		{
			Len = sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80039c0:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <UART_ParseAnswTemp+0x84>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fc fdd7 	bl	8000578 <__aeabi_f2d>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4911      	ldr	r1, [pc, #68]	; (8003a14 <UART_ParseAnswTemp+0x8c>)
 80039d0:	4811      	ldr	r0, [pc, #68]	; (8003a18 <UART_ParseAnswTemp+0x90>)
 80039d2:	f004 ffdb 	bl	800898c <siprintf>
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
			EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80039da:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	2301      	movs	r3, #1
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	2300      	movs	r3, #0
 80039e6:	2250      	movs	r2, #80	; 0x50
 80039e8:	2114      	movs	r1, #20
 80039ea:	480b      	ldr	r0, [pc, #44]	; (8003a18 <UART_ParseAnswTemp+0x90>)
 80039ec:	f7fe f856 	bl	8001a9c <EF_PutString>
		}
		UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
 80039f0:	490a      	ldr	r1, [pc, #40]	; (8003a1c <UART_ParseAnswTemp+0x94>)
 80039f2:	480b      	ldr	r0, [pc, #44]	; (8003a20 <UART_ParseAnswTemp+0x98>)
 80039f4:	f000 fda5 	bl	8004542 <UARTDMA_Print>
		Len++;
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	3301      	adds	r3, #1
 80039fc:	71fb      	strb	r3, [r7, #7]
	}
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	0800c7b0 	.word	0x0800c7b0
 8003a0c:	2000024c 	.word	0x2000024c
 8003a10:	20000248 	.word	0x20000248
 8003a14:	0800c7dc 	.word	0x0800c7dc
 8003a18:	200002ac 	.word	0x200002ac
 8003a1c:	0800c7f0 	.word	0x0800c7f0
 8003a20:	200002cc 	.word	0x200002cc

08003a24 <UART_ParseAnswPres>:

//
// Parsing information about current presure
//"APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8003a2a:	491e      	ldr	r1, [pc, #120]	; (8003aa4 <UART_ParseAnswPres+0x80>)
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f005 fe07 	bl	8009640 <strtok>
 8003a32:	6038      	str	r0, [r7, #0]
	uint8_t Len;
	if(strlen(ParsePointer) > 0) // If string exists
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02e      	beq.n	8003a9a <UART_ParseAnswPres+0x76>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8003a3c:	6838      	ldr	r0, [r7, #0]
 8003a3e:	f004 f8eb 	bl	8007c18 <atof>
 8003a42:	ec53 2b10 	vmov	r2, r3, d0
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f8e5 	bl	8000c18 <__aeabi_d2f>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <UART_ParseAnswPres+0x84>)
 8003a52:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Presure
		if(State == MENUTFT_PARAMETERS)
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <UART_ParseAnswPres+0x88>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d117      	bne.n	8003a8c <UART_ParseAnswPres+0x68>
		{
			Len = sprintf((char*)Msg, "Ciśnienie: %.1fhPa", CPres);
 8003a5c:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <UART_ParseAnswPres+0x84>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fc fd89 	bl	8000578 <__aeabi_f2d>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4911      	ldr	r1, [pc, #68]	; (8003ab0 <UART_ParseAnswPres+0x8c>)
 8003a6c:	4811      	ldr	r0, [pc, #68]	; (8003ab4 <UART_ParseAnswPres+0x90>)
 8003a6e:	f004 ff8d 	bl	800898c <siprintf>
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a76:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2300      	movs	r3, #0
 8003a82:	22aa      	movs	r2, #170	; 0xaa
 8003a84:	2114      	movs	r1, #20
 8003a86:	480b      	ldr	r0, [pc, #44]	; (8003ab4 <UART_ParseAnswPres+0x90>)
 8003a88:	f7fe f808 	bl	8001a9c <EF_PutString>
		}
		UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
 8003a8c:	490a      	ldr	r1, [pc, #40]	; (8003ab8 <UART_ParseAnswPres+0x94>)
 8003a8e:	480b      	ldr	r0, [pc, #44]	; (8003abc <UART_ParseAnswPres+0x98>)
 8003a90:	f000 fd57 	bl	8004542 <UARTDMA_Print>
		Len++;
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	3301      	adds	r3, #1
 8003a98:	71fb      	strb	r3, [r7, #7]
	}
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	0800c7b0 	.word	0x0800c7b0
 8003aa8:	20000250 	.word	0x20000250
 8003aac:	20000248 	.word	0x20000248
 8003ab0:	0800c7fc 	.word	0x0800c7fc
 8003ab4:	200002ac 	.word	0x200002ac
 8003ab8:	0800c810 	.word	0x0800c810
 8003abc:	200002cc 	.word	0x200002cc

08003ac0 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
	//TODO!
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

		for(i = 0; i<4; i++) // 4 parameters are expected
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	71fb      	strb	r3, [r7, #7]
 8003ada:	e04a      	b.n	8003b72 <UART_ParseAnswRelayStateStatus+0xa2>
		{
			char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8003adc:	4928      	ldr	r1, [pc, #160]	; (8003b80 <UART_ParseAnswRelayStateStatus+0xb0>)
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f005 fdae 	bl	8009640 <strtok>
 8003ae4:	6038      	str	r0, [r7, #0]

			if(strlen(ParsePointer) > 0) // If string exists
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d035      	beq.n	8003b5a <UART_ParseAnswRelayStateStatus+0x8a>
			{
				for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8003aee:	2300      	movs	r3, #0
 8003af0:	71bb      	strb	r3, [r7, #6]
 8003af2:	e02b      	b.n	8003b4c <UART_ParseAnswRelayStateStatus+0x7c>
				{
					if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8003af4:	79bb      	ldrb	r3, [r7, #6]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b2f      	cmp	r3, #47	; 0x2f
 8003afe:	d905      	bls.n	8003b0c <UART_ParseAnswRelayStateStatus+0x3c>
 8003b00:	79bb      	ldrb	r3, [r7, #6]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	4413      	add	r3, r2
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b39      	cmp	r3, #57	; 0x39
 8003b0a:	d90e      	bls.n	8003b2a <UART_ParseAnswRelayStateStatus+0x5a>
 8003b0c:	79bb      	ldrb	r3, [r7, #6]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b2e      	cmp	r3, #46	; 0x2e
 8003b16:	d008      	beq.n	8003b2a <UART_ParseAnswRelayStateStatus+0x5a>
					{
						sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8003b18:	491a      	ldr	r1, [pc, #104]	; (8003b84 <UART_ParseAnswRelayStateStatus+0xb4>)
 8003b1a:	481b      	ldr	r0, [pc, #108]	; (8003b88 <UART_ParseAnswRelayStateStatus+0xb8>)
 8003b1c:	f004 ff36 	bl	800898c <siprintf>
						UARTDMA_Print(&huartdma2, Message); // Print message
 8003b20:	4919      	ldr	r1, [pc, #100]	; (8003b88 <UART_ParseAnswRelayStateStatus+0xb8>)
 8003b22:	481a      	ldr	r0, [pc, #104]	; (8003b8c <UART_ParseAnswRelayStateStatus+0xbc>)
 8003b24:	f000 fd0d 	bl	8004542 <UARTDMA_Print>
						return;	// And exit parsing
 8003b28:	e026      	b.n	8003b78 <UART_ParseAnswRelayStateStatus+0xa8>
					}

					SwitchesButtonState[i] = atof(ParsePointer); // If there are no chars, change string to integer
 8003b2a:	6838      	ldr	r0, [r7, #0]
 8003b2c:	f004 f874 	bl	8007c18 <atof>
 8003b30:	ec53 2b10 	vmov	r2, r3, d0
 8003b34:	79fc      	ldrb	r4, [r7, #7]
 8003b36:	4610      	mov	r0, r2
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f7fd f84d 	bl	8000bd8 <__aeabi_d2uiz>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <UART_ParseAnswRelayStateStatus+0xc0>)
 8003b44:	551a      	strb	r2, [r3, r4]
				for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8003b46:	79bb      	ldrb	r3, [r7, #6]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	71bb      	strb	r3, [r7, #6]
 8003b4c:	79bb      	ldrb	r3, [r7, #6]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	4413      	add	r3, r2
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1cd      	bne.n	8003af4 <UART_ParseAnswRelayStateStatus+0x24>
 8003b58:	e008      	b.n	8003b6c <UART_ParseAnswRelayStateStatus+0x9c>
				}
			}
			else
			{
				sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8003b5a:	490e      	ldr	r1, [pc, #56]	; (8003b94 <UART_ParseAnswRelayStateStatus+0xc4>)
 8003b5c:	480a      	ldr	r0, [pc, #40]	; (8003b88 <UART_ParseAnswRelayStateStatus+0xb8>)
 8003b5e:	f004 ff15 	bl	800898c <siprintf>
				UARTDMA_Print(&huartdma2, Message); // Print message
 8003b62:	4909      	ldr	r1, [pc, #36]	; (8003b88 <UART_ParseAnswRelayStateStatus+0xb8>)
 8003b64:	4809      	ldr	r0, [pc, #36]	; (8003b8c <UART_ParseAnswRelayStateStatus+0xbc>)
 8003b66:	f000 fcec 	bl	8004542 <UARTDMA_Print>
				return;	// And exit parsing
 8003b6a:	e005      	b.n	8003b78 <UART_ParseAnswRelayStateStatus+0xa8>
		for(i = 0; i<4; i++) // 4 parameters are expected
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	71fb      	strb	r3, [r7, #7]
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d9b1      	bls.n	8003adc <UART_ParseAnswRelayStateStatus+0xc>
			}
		}
}
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd90      	pop	{r4, r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	0800c7b0 	.word	0x0800c7b0
 8003b84:	0800c81c 	.word	0x0800c81c
 8003b88:	20000424 	.word	0x20000424
 8003b8c:	200002cc 	.word	0x200002cc
 8003b90:	20000260 	.word	0x20000260
 8003b94:	0800c830 	.word	0x0800c830

08003b98 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

			for(i = 0; i<4; i++) // 4 parameters are expected
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	71fb      	strb	r3, [r7, #7]
 8003ba2:	e04a      	b.n	8003c3a <UART_ParseAnswLightsStateStatus+0xa2>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8003ba4:	4928      	ldr	r1, [pc, #160]	; (8003c48 <UART_ParseAnswLightsStateStatus+0xb0>)
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f005 fd4a 	bl	8009640 <strtok>
 8003bac:	6038      	str	r0, [r7, #0]

				if(strlen(ParsePointer) > 0) // If string exists
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d035      	beq.n	8003c22 <UART_ParseAnswLightsStateStatus+0x8a>
				{
					for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	71bb      	strb	r3, [r7, #6]
 8003bba:	e02b      	b.n	8003c14 <UART_ParseAnswLightsStateStatus+0x7c>
					{
						if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8003bbc:	79bb      	ldrb	r3, [r7, #6]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b2f      	cmp	r3, #47	; 0x2f
 8003bc6:	d905      	bls.n	8003bd4 <UART_ParseAnswLightsStateStatus+0x3c>
 8003bc8:	79bb      	ldrb	r3, [r7, #6]
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b39      	cmp	r3, #57	; 0x39
 8003bd2:	d90e      	bls.n	8003bf2 <UART_ParseAnswLightsStateStatus+0x5a>
 8003bd4:	79bb      	ldrb	r3, [r7, #6]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	4413      	add	r3, r2
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8003bde:	d008      	beq.n	8003bf2 <UART_ParseAnswLightsStateStatus+0x5a>
						{
							sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8003be0:	491a      	ldr	r1, [pc, #104]	; (8003c4c <UART_ParseAnswLightsStateStatus+0xb4>)
 8003be2:	481b      	ldr	r0, [pc, #108]	; (8003c50 <UART_ParseAnswLightsStateStatus+0xb8>)
 8003be4:	f004 fed2 	bl	800898c <siprintf>
							UARTDMA_Print(&huartdma2, Message); // Print message
 8003be8:	4919      	ldr	r1, [pc, #100]	; (8003c50 <UART_ParseAnswLightsStateStatus+0xb8>)
 8003bea:	481a      	ldr	r0, [pc, #104]	; (8003c54 <UART_ParseAnswLightsStateStatus+0xbc>)
 8003bec:	f000 fca9 	bl	8004542 <UARTDMA_Print>
							return;	// And exit parsing
 8003bf0:	e026      	b.n	8003c40 <UART_ParseAnswLightsStateStatus+0xa8>
						}

						LightsButtonState[i] = atof(ParsePointer); // If there are no chars, change string to integer
 8003bf2:	6838      	ldr	r0, [r7, #0]
 8003bf4:	f004 f810 	bl	8007c18 <atof>
 8003bf8:	ec53 2b10 	vmov	r2, r3, d0
 8003bfc:	79fc      	ldrb	r4, [r7, #7]
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	f7fc ffe9 	bl	8000bd8 <__aeabi_d2uiz>
 8003c06:	4603      	mov	r3, r0
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <UART_ParseAnswLightsStateStatus+0xc0>)
 8003c0c:	551a      	strb	r2, [r3, r4]
					for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8003c0e:	79bb      	ldrb	r3, [r7, #6]
 8003c10:	3301      	adds	r3, #1
 8003c12:	71bb      	strb	r3, [r7, #6]
 8003c14:	79bb      	ldrb	r3, [r7, #6]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1cd      	bne.n	8003bbc <UART_ParseAnswLightsStateStatus+0x24>
 8003c20:	e008      	b.n	8003c34 <UART_ParseAnswLightsStateStatus+0x9c>
					}
				}
				else
				{
					sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8003c22:	490e      	ldr	r1, [pc, #56]	; (8003c5c <UART_ParseAnswLightsStateStatus+0xc4>)
 8003c24:	480a      	ldr	r0, [pc, #40]	; (8003c50 <UART_ParseAnswLightsStateStatus+0xb8>)
 8003c26:	f004 feb1 	bl	800898c <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8003c2a:	4909      	ldr	r1, [pc, #36]	; (8003c50 <UART_ParseAnswLightsStateStatus+0xb8>)
 8003c2c:	4809      	ldr	r0, [pc, #36]	; (8003c54 <UART_ParseAnswLightsStateStatus+0xbc>)
 8003c2e:	f000 fc88 	bl	8004542 <UARTDMA_Print>
					return;	// And exit parsing
 8003c32:	e005      	b.n	8003c40 <UART_ParseAnswLightsStateStatus+0xa8>
			for(i = 0; i<4; i++) // 4 parameters are expected
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	3301      	adds	r3, #1
 8003c38:	71fb      	strb	r3, [r7, #7]
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d9b1      	bls.n	8003ba4 <UART_ParseAnswLightsStateStatus+0xc>
				}
			}
}
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}
 8003c46:	bf00      	nop
 8003c48:	0800c7b0 	.word	0x0800c7b0
 8003c4c:	0800c81c 	.word	0x0800c81c
 8003c50:	20000424 	.word	0x20000424
 8003c54:	200002cc 	.word	0x200002cc
 8003c58:	20000264 	.word	0x20000264
 8003c5c:	0800c830 	.word	0x0800c830

08003c60 <SendComand>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////// ASK FOR INFORMATION //////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b16      	cmp	r3, #22
 8003c72:	f200 80a4 	bhi.w	8003dbe <SendComand+0x15e>
 8003c76:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <SendComand+0x1c>)
 8003c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7c:	08003cd9 	.word	0x08003cd9
 8003c80:	08003ce3 	.word	0x08003ce3
 8003c84:	08003ced 	.word	0x08003ced
 8003c88:	08003cf7 	.word	0x08003cf7
 8003c8c:	08003d01 	.word	0x08003d01
 8003c90:	08003d0b 	.word	0x08003d0b
 8003c94:	08003d15 	.word	0x08003d15
 8003c98:	08003d1f 	.word	0x08003d1f
 8003c9c:	08003d29 	.word	0x08003d29
 8003ca0:	08003d33 	.word	0x08003d33
 8003ca4:	08003d3d 	.word	0x08003d3d
 8003ca8:	08003d47 	.word	0x08003d47
 8003cac:	08003d51 	.word	0x08003d51
 8003cb0:	08003d65 	.word	0x08003d65
 8003cb4:	08003d6f 	.word	0x08003d6f
 8003cb8:	08003d79 	.word	0x08003d79
 8003cbc:	08003d83 	.word	0x08003d83
 8003cc0:	08003d8d 	.word	0x08003d8d
 8003cc4:	08003d97 	.word	0x08003d97
 8003cc8:	08003da1 	.word	0x08003da1
 8003ccc:	08003dab 	.word	0x08003dab
 8003cd0:	08003d5b 	.word	0x08003d5b
 8003cd4:	08003db5 	.word	0x08003db5
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8003cd8:	493b      	ldr	r1, [pc, #236]	; (8003dc8 <SendComand+0x168>)
 8003cda:	483c      	ldr	r0, [pc, #240]	; (8003dcc <SendComand+0x16c>)
 8003cdc:	f000 fc31 	bl	8004542 <UARTDMA_Print>
			break;
 8003ce0:	e06d      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8003ce2:	493b      	ldr	r1, [pc, #236]	; (8003dd0 <SendComand+0x170>)
 8003ce4:	4839      	ldr	r0, [pc, #228]	; (8003dcc <SendComand+0x16c>)
 8003ce6:	f000 fc2c 	bl	8004542 <UARTDMA_Print>
			break;
 8003cea:	e068      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8003cec:	4939      	ldr	r1, [pc, #228]	; (8003dd4 <SendComand+0x174>)
 8003cee:	4837      	ldr	r0, [pc, #220]	; (8003dcc <SendComand+0x16c>)
 8003cf0:	f000 fc27 	bl	8004542 <UARTDMA_Print>
			break;
 8003cf4:	e063      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8003cf6:	4938      	ldr	r1, [pc, #224]	; (8003dd8 <SendComand+0x178>)
 8003cf8:	4834      	ldr	r0, [pc, #208]	; (8003dcc <SendComand+0x16c>)
 8003cfa:	f000 fc22 	bl	8004542 <UARTDMA_Print>
			break;
 8003cfe:	e05e      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8003d00:	4936      	ldr	r1, [pc, #216]	; (8003ddc <SendComand+0x17c>)
 8003d02:	4832      	ldr	r0, [pc, #200]	; (8003dcc <SendComand+0x16c>)
 8003d04:	f000 fc1d 	bl	8004542 <UARTDMA_Print>
			break;
 8003d08:	e059      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8003d0a:	4935      	ldr	r1, [pc, #212]	; (8003de0 <SendComand+0x180>)
 8003d0c:	482f      	ldr	r0, [pc, #188]	; (8003dcc <SendComand+0x16c>)
 8003d0e:	f000 fc18 	bl	8004542 <UARTDMA_Print>
			break;
 8003d12:	e054      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8003d14:	4933      	ldr	r1, [pc, #204]	; (8003de4 <SendComand+0x184>)
 8003d16:	482d      	ldr	r0, [pc, #180]	; (8003dcc <SendComand+0x16c>)
 8003d18:	f000 fc13 	bl	8004542 <UARTDMA_Print>
			break;
 8003d1c:	e04f      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8003d1e:	4932      	ldr	r1, [pc, #200]	; (8003de8 <SendComand+0x188>)
 8003d20:	482a      	ldr	r0, [pc, #168]	; (8003dcc <SendComand+0x16c>)
 8003d22:	f000 fc0e 	bl	8004542 <UARTDMA_Print>
			break;
 8003d26:	e04a      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8003d28:	4930      	ldr	r1, [pc, #192]	; (8003dec <SendComand+0x18c>)
 8003d2a:	4828      	ldr	r0, [pc, #160]	; (8003dcc <SendComand+0x16c>)
 8003d2c:	f000 fc09 	bl	8004542 <UARTDMA_Print>
			break;
 8003d30:	e045      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8003d32:	492f      	ldr	r1, [pc, #188]	; (8003df0 <SendComand+0x190>)
 8003d34:	4825      	ldr	r0, [pc, #148]	; (8003dcc <SendComand+0x16c>)
 8003d36:	f000 fc04 	bl	8004542 <UARTDMA_Print>
			break;
 8003d3a:	e040      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8003d3c:	492d      	ldr	r1, [pc, #180]	; (8003df4 <SendComand+0x194>)
 8003d3e:	4823      	ldr	r0, [pc, #140]	; (8003dcc <SendComand+0x16c>)
 8003d40:	f000 fbff 	bl	8004542 <UARTDMA_Print>
			break;
 8003d44:	e03b      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8003d46:	492c      	ldr	r1, [pc, #176]	; (8003df8 <SendComand+0x198>)
 8003d48:	4820      	ldr	r0, [pc, #128]	; (8003dcc <SendComand+0x16c>)
 8003d4a:	f000 fbfa 	bl	8004542 <UARTDMA_Print>
			break;
 8003d4e:	e036      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8003d50:	492a      	ldr	r1, [pc, #168]	; (8003dfc <SendComand+0x19c>)
 8003d52:	481e      	ldr	r0, [pc, #120]	; (8003dcc <SendComand+0x16c>)
 8003d54:	f000 fbf5 	bl	8004542 <UARTDMA_Print>
			break;
 8003d58:	e031      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "STATESTATUS=?\n");
 8003d5a:	4929      	ldr	r1, [pc, #164]	; (8003e00 <SendComand+0x1a0>)
 8003d5c:	481b      	ldr	r0, [pc, #108]	; (8003dcc <SendComand+0x16c>)
 8003d5e:	f000 fbf0 	bl	8004542 <UARTDMA_Print>
			break;
 8003d62:	e02c      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8003d64:	4927      	ldr	r1, [pc, #156]	; (8003e04 <SendComand+0x1a4>)
 8003d66:	4819      	ldr	r0, [pc, #100]	; (8003dcc <SendComand+0x16c>)
 8003d68:	f000 fbeb 	bl	8004542 <UARTDMA_Print>
			break;
 8003d6c:	e027      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8003d6e:	4926      	ldr	r1, [pc, #152]	; (8003e08 <SendComand+0x1a8>)
 8003d70:	4816      	ldr	r0, [pc, #88]	; (8003dcc <SendComand+0x16c>)
 8003d72:	f000 fbe6 	bl	8004542 <UARTDMA_Print>
			break;
 8003d76:	e022      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8003d78:	4924      	ldr	r1, [pc, #144]	; (8003e0c <SendComand+0x1ac>)
 8003d7a:	4814      	ldr	r0, [pc, #80]	; (8003dcc <SendComand+0x16c>)
 8003d7c:	f000 fbe1 	bl	8004542 <UARTDMA_Print>
			break;
 8003d80:	e01d      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8003d82:	4923      	ldr	r1, [pc, #140]	; (8003e10 <SendComand+0x1b0>)
 8003d84:	4811      	ldr	r0, [pc, #68]	; (8003dcc <SendComand+0x16c>)
 8003d86:	f000 fbdc 	bl	8004542 <UARTDMA_Print>
			break;
 8003d8a:	e018      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8003d8c:	4921      	ldr	r1, [pc, #132]	; (8003e14 <SendComand+0x1b4>)
 8003d8e:	480f      	ldr	r0, [pc, #60]	; (8003dcc <SendComand+0x16c>)
 8003d90:	f000 fbd7 	bl	8004542 <UARTDMA_Print>
			break;
 8003d94:	e013      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8003d96:	4920      	ldr	r1, [pc, #128]	; (8003e18 <SendComand+0x1b8>)
 8003d98:	480c      	ldr	r0, [pc, #48]	; (8003dcc <SendComand+0x16c>)
 8003d9a:	f000 fbd2 	bl	8004542 <UARTDMA_Print>
			break;
 8003d9e:	e00e      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8003da0:	491e      	ldr	r1, [pc, #120]	; (8003e1c <SendComand+0x1bc>)
 8003da2:	480a      	ldr	r0, [pc, #40]	; (8003dcc <SendComand+0x16c>)
 8003da4:	f000 fbcd 	bl	8004542 <UARTDMA_Print>
			break;
 8003da8:	e009      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8003daa:	491d      	ldr	r1, [pc, #116]	; (8003e20 <SendComand+0x1c0>)
 8003dac:	4807      	ldr	r0, [pc, #28]	; (8003dcc <SendComand+0x16c>)
 8003dae:	f000 fbc8 	bl	8004542 <UARTDMA_Print>
			break;
 8003db2:	e004      	b.n	8003dbe <SendComand+0x15e>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "LIGHTSSTATUS=?\n");
 8003db4:	491b      	ldr	r1, [pc, #108]	; (8003e24 <SendComand+0x1c4>)
 8003db6:	4805      	ldr	r0, [pc, #20]	; (8003dcc <SendComand+0x16c>)
 8003db8:	f000 fbc3 	bl	8004542 <UARTDMA_Print>
			break;
 8003dbc:	bf00      	nop
		}

	return 1;
 8003dbe:	2301      	movs	r3, #1
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	0800c84c 	.word	0x0800c84c
 8003dcc:	200002cc 	.word	0x200002cc
 8003dd0:	0800c854 	.word	0x0800c854
 8003dd4:	0800c85c 	.word	0x0800c85c
 8003dd8:	0800c868 	.word	0x0800c868
 8003ddc:	0800c870 	.word	0x0800c870
 8003de0:	0800c878 	.word	0x0800c878
 8003de4:	0800c888 	.word	0x0800c888
 8003de8:	0800c898 	.word	0x0800c898
 8003dec:	0800c8a8 	.word	0x0800c8a8
 8003df0:	0800c8b8 	.word	0x0800c8b8
 8003df4:	0800c8c8 	.word	0x0800c8c8
 8003df8:	0800c8d8 	.word	0x0800c8d8
 8003dfc:	0800c8e8 	.word	0x0800c8e8
 8003e00:	0800c8f8 	.word	0x0800c8f8
 8003e04:	0800c908 	.word	0x0800c908
 8003e08:	0800c918 	.word	0x0800c918
 8003e0c:	0800c928 	.word	0x0800c928
 8003e10:	0800c938 	.word	0x0800c938
 8003e14:	0800c948 	.word	0x0800c948
 8003e18:	0800c958 	.word	0x0800c958
 8003e1c:	0800c968 	.word	0x0800c968
 8003e20:	0800c978 	.word	0x0800c978
 8003e24:	0800c988 	.word	0x0800c988

08003e28 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d101      	bne.n	8003e42 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e018      	b.n	8003e74 <RB_Read+0x4c>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	461a      	mov	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	789a      	ldrb	r2, [r3, #2]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	785b      	ldrb	r3, [r3, #1]
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <RB_Read+0x58>)
 8003e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8003e5e:	1159      	asrs	r1, r3, #5
 8003e60:	17d3      	asrs	r3, r2, #31
 8003e62:	1ac9      	subs	r1, r1, r3
 8003e64:	460b      	mov	r3, r1
 8003e66:	019b      	lsls	r3, r3, #6
 8003e68:	440b      	add	r3, r1
 8003e6a:	1ad1      	subs	r1, r2, r3
 8003e6c:	b2ca      	uxtb	r2, r1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	7e07e07f 	.word	0x7e07e07f

08003e84 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <RB_Write+0x5c>)
 8003e98:	fb83 1302 	smull	r1, r3, r3, r2
 8003e9c:	1159      	asrs	r1, r3, #5
 8003e9e:	17d3      	asrs	r3, r2, #31
 8003ea0:	1ac9      	subs	r1, r1, r3
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	019b      	lsls	r3, r3, #6
 8003ea6:	440b      	add	r3, r1
 8003ea8:	1ad1      	subs	r1, r2, r3
 8003eaa:	460b      	mov	r3, r1
 8003eac:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d101      	bne.n	8003ebc <RB_Write+0x38>
	{
		return RB_ERROR; // No free space error
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e00a      	b.n	8003ed2 <RB_Write+0x4e>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	7e07e07f 	.word	0x7e07e07f

08003ee4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ee8:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003eea:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <MX_SPI1_Init+0x68>)
 8003eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003eee:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003efc:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f02:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003f16:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f18:	2210      	movs	r2, #16
 8003f1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f30:	220a      	movs	r2, #10
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f34:	4804      	ldr	r0, [pc, #16]	; (8003f48 <MX_SPI1_Init+0x64>)
 8003f36:	f002 f91b 	bl	8006170 <HAL_SPI_Init>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f40:	f7ff f983 	bl	800324a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	200004c0 	.word	0x200004c0
 8003f4c:	40013000 	.word	0x40013000

08003f50 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003f54:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f56:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <MX_SPI3_Init+0x68>)
 8003f58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f60:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f68:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f80:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f84:	2220      	movs	r2, #32
 8003f86:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003f9c:	220a      	movs	r2, #10
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003fa0:	4804      	ldr	r0, [pc, #16]	; (8003fb4 <MX_SPI3_Init+0x64>)
 8003fa2:	f002 f8e5 	bl	8006170 <HAL_SPI_Init>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003fac:	f7ff f94d 	bl	800324a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003fb0:	bf00      	nop
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000468 	.word	0x20000468
 8003fb8:	40003c00 	.word	0x40003c00

08003fbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08c      	sub	sp, #48	; 0x30
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 031c 	add.w	r3, r7, #28
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a36      	ldr	r2, [pc, #216]	; (80040b4 <HAL_SPI_MspInit+0xf8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d12c      	bne.n	8004038 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	4a34      	ldr	r2, [pc, #208]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 8003fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fec:	6453      	str	r3, [r2, #68]	; 0x44
 8003fee:	4b32      	ldr	r3, [pc, #200]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	4a2d      	ldr	r2, [pc, #180]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6313      	str	r3, [r2, #48]	; 0x30
 800400a:	4b2b      	ldr	r3, [pc, #172]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004016:	23e0      	movs	r3, #224	; 0xe0
 8004018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401a:	2302      	movs	r3, #2
 800401c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401e:	2300      	movs	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004022:	2303      	movs	r3, #3
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004026:	2305      	movs	r3, #5
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402a:	f107 031c 	add.w	r3, r7, #28
 800402e:	4619      	mov	r1, r3
 8004030:	4822      	ldr	r0, [pc, #136]	; (80040bc <HAL_SPI_MspInit+0x100>)
 8004032:	f001 fa87 	bl	8005544 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004036:	e038      	b.n	80040aa <HAL_SPI_MspInit+0xee>
  else if(spiHandle->Instance==SPI3)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <HAL_SPI_MspInit+0x104>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d133      	bne.n	80040aa <HAL_SPI_MspInit+0xee>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	4a1b      	ldr	r2, [pc, #108]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 800404c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004050:	6413      	str	r3, [r2, #64]	; 0x40
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 8004068:	f043 0302 	orr.w	r3, r3, #2
 800406c:	6313      	str	r3, [r2, #48]	; 0x30
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <HAL_SPI_MspInit+0xfc>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800407a:	2338      	movs	r3, #56	; 0x38
 800407c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	2302      	movs	r3, #2
 8004080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004086:	2303      	movs	r3, #3
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800408a:	2306      	movs	r3, #6
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800408e:	f107 031c 	add.w	r3, r7, #28
 8004092:	4619      	mov	r1, r3
 8004094:	480b      	ldr	r0, [pc, #44]	; (80040c4 <HAL_SPI_MspInit+0x108>)
 8004096:	f001 fa55 	bl	8005544 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800409a:	2200      	movs	r2, #0
 800409c:	2100      	movs	r1, #0
 800409e:	2033      	movs	r0, #51	; 0x33
 80040a0:	f000 fded 	bl	8004c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80040a4:	2033      	movs	r0, #51	; 0x33
 80040a6:	f000 fe06 	bl	8004cb6 <HAL_NVIC_EnableIRQ>
}
 80040aa:	bf00      	nop
 80040ac:	3730      	adds	r7, #48	; 0x30
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40013000 	.word	0x40013000
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40020000 	.word	0x40020000
 80040c0:	40003c00 	.word	0x40003c00
 80040c4:	40020400 	.word	0x40020400

080040c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <HAL_MspInit+0x4c>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	4a0f      	ldr	r2, [pc, #60]	; (8004114 <HAL_MspInit+0x4c>)
 80040d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040dc:	6453      	str	r3, [r2, #68]	; 0x44
 80040de:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <HAL_MspInit+0x4c>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <HAL_MspInit+0x4c>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a08      	ldr	r2, [pc, #32]	; (8004114 <HAL_MspInit+0x4c>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_MspInit+0x4c>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800

08004118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800411c:	e7fe      	b.n	800411c <NMI_Handler+0x4>

0800411e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004122:	e7fe      	b.n	8004122 <HardFault_Handler+0x4>

08004124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004128:	e7fe      	b.n	8004128 <MemManage_Handler+0x4>

0800412a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800412e:	e7fe      	b.n	800412e <BusFault_Handler+0x4>

08004130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004134:	e7fe      	b.n	8004134 <UsageFault_Handler+0x4>

08004136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004164:	f000 fc08 	bl	8004978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}

0800416c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8004170:	4802      	ldr	r0, [pc, #8]	; (800417c <DMA1_Stream5_IRQHandler+0x10>)
 8004172:	f000 f931 	bl	80043d8 <UARTDMA_DmaReceiveIrqHandler>
	return;
 8004176:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	200002cc 	.word	0x200002cc

08004180 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004184:	4802      	ldr	r0, [pc, #8]	; (8004190 <DMA1_Stream6_IRQHandler+0x10>)
 8004186:	f000 ff73 	bl	8005070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000578 	.word	0x20000578

08004194 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8004198:	f44f 7080 	mov.w	r0, #256	; 0x100
 800419c:	f001 fb88 	bl	80058b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 80041a8:	4803      	ldr	r0, [pc, #12]	; (80041b8 <USART2_IRQHandler+0x14>)
 80041aa:	f000 f8eb 	bl	8004384 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041ae:	4803      	ldr	r0, [pc, #12]	; (80041bc <USART2_IRQHandler+0x18>)
 80041b0:	f002 fcee 	bl	8006b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200002cc 	.word	0x200002cc
 80041bc:	200005d8 	.word	0x200005d8

080041c0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80041c4:	4802      	ldr	r0, [pc, #8]	; (80041d0 <SPI3_IRQHandler+0x10>)
 80041c6:	f002 f9ff 	bl	80065c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000468 	.word	0x20000468

080041d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	return 1;
 80041d8:	2301      	movs	r3, #1
}
 80041da:	4618      	mov	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <_kill>:

int _kill(int pid, int sig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041ee:	f003 fd1b 	bl	8007c28 <__errno>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2216      	movs	r2, #22
 80041f6:	601a      	str	r2, [r3, #0]
	return -1;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <_exit>:

void _exit (int status)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800420c:	f04f 31ff 	mov.w	r1, #4294967295
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ffe7 	bl	80041e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004216:	e7fe      	b.n	8004216 <_exit+0x12>

08004218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e00a      	b.n	8004240 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800422a:	f3af 8000 	nop.w
 800422e:	4601      	mov	r1, r0
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	60ba      	str	r2, [r7, #8]
 8004236:	b2ca      	uxtb	r2, r1
 8004238:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	3301      	adds	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	dbf0      	blt.n	800422a <_read+0x12>
	}

return len;
 8004248:	687b      	ldr	r3, [r7, #4]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e009      	b.n	8004278 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	60ba      	str	r2, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	3301      	adds	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	dbf1      	blt.n	8004264 <_write+0x12>
	}
	return len;
 8004280:	687b      	ldr	r3, [r7, #4]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <_close>:

int _close(int file)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
	return -1;
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042b2:	605a      	str	r2, [r3, #4]
	return 0;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <_isatty>:

int _isatty(int file)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
	return 1;
 80042ca:	2301      	movs	r3, #1
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
	return 0;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042fc:	4a14      	ldr	r2, [pc, #80]	; (8004350 <_sbrk+0x5c>)
 80042fe:	4b15      	ldr	r3, [pc, #84]	; (8004354 <_sbrk+0x60>)
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <_sbrk+0x64>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <_sbrk+0x64>)
 8004312:	4a12      	ldr	r2, [pc, #72]	; (800435c <_sbrk+0x68>)
 8004314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <_sbrk+0x64>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	d207      	bcs.n	8004334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004324:	f003 fc80 	bl	8007c28 <__errno>
 8004328:	4603      	mov	r3, r0
 800432a:	220c      	movs	r2, #12
 800432c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	e009      	b.n	8004348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004334:	4b08      	ldr	r3, [pc, #32]	; (8004358 <_sbrk+0x64>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <_sbrk+0x64>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	4a05      	ldr	r2, [pc, #20]	; (8004358 <_sbrk+0x64>)
 8004344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20020000 	.word	0x20020000
 8004354:	00000400 	.word	0x00000400
 8004358:	20000268 	.word	0x20000268
 800435c:	20000630 	.word	0x20000630

08004360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <SystemInit+0x20>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	4a05      	ldr	r2, [pc, #20]	; (8004380 <SystemInit+0x20>)
 800436c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d017      	beq.n	80043cc <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	60fb      	str	r3, [r7, #12]
	}
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e8:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d056      	beq.n	80044aa <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004404:	2220      	movs	r2, #32
 8004406:	409a      	lsls	r2, r3
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 800441c:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3304      	adds	r3, #4
 8004422:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8004424:	2300      	movs	r3, #0
 8004426:	82fb      	strh	r3, [r7, #22]
 8004428:	e01a      	b.n	8004460 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f103 0045 	add.w	r0, r3, #69	; 0x45
 8004430:	8afb      	ldrh	r3, [r7, #22]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4413      	add	r3, r2
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	4619      	mov	r1, r3
 800443a:	f7ff fd23 	bl	8003e84 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 800443e:	8afb      	ldrh	r3, [r7, #22]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	4413      	add	r3, r2
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b0a      	cmp	r3, #10
 8004448:	d107      	bne.n	800445a <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004450:	3301      	adds	r3, #1
 8004452:	b2da      	uxtb	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800445a:	8afb      	ldrh	r3, [r7, #22]
 800445c:	3301      	adds	r3, #1
 800445e:	82fb      	strh	r3, [r7, #22]
 8004460:	8afa      	ldrh	r2, [r7, #22]
 8004462:	89fb      	ldrh	r3, [r7, #14]
 8004464:	429a      	cmp	r2, r3
 8004466:	d3e0      	bcc.n	800442a <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	223f      	movs	r2, #63	; 0x3f
 8004472:	409a      	lsls	r2, r3
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1d1a      	adds	r2, r3, #4
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2241      	movs	r2, #65	; 0x41
 8004490:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
	}
}
 80044aa:	bf00      	nop
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	460b      	mov	r3, r1
 80044bc:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	33ca      	adds	r3, #202	; 0xca
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fcdc 	bl	8003e84 <RB_Write>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01f      	beq.n	8004538 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80044f8:	e013      	b.n	8004522 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b0a      	cmp	r3, #10
 8004500:	d10c      	bne.n	800451c <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800450e:	3b01      	subs	r3, #1
 8004510:	b2da      	uxtb	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				return 0; // Exit if end line
 8004518:	2300      	movs	r3, #0
 800451a:	e00e      	b.n	800453a <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3301      	adds	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3345      	adds	r3, #69	; 0x45
 8004526:	68f9      	ldr	r1, [r7, #12]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fc7d 	bl	8003e28 <RB_Read>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0e2      	beq.n	80044fa <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8004534:	2300      	movs	r3, #0
 8004536:	e000      	b.n	800453a <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8004538:	2301      	movs	r3, #1
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8004550:	e012      	b.n	8004578 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8004552:	7afb      	ldrb	r3, [r7, #11]
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff ffab 	bl	80044b2 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8004562:	7afb      	ldrb	r3, [r7, #11]
 8004564:	2b0a      	cmp	r3, #10
 8004566:	d107      	bne.n	8004578 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 800456e:	3301      	adds	r3, #1
 8004570:	b2da      	uxtb	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	72fb      	strb	r3, [r7, #11]
 800457e:	7afb      	ldrb	r3, [r7, #11]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e6      	bne.n	8004552 <UARTDMA_Print+0x10>
		}
	}
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 80045ba:	2300      	movs	r3, #0
 80045bc:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d027      	beq.n	800461e <UARTDMA_TransmitEvent+0x6c>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80045ce:	e013      	b.n	80045f8 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 80045d0:	7b7b      	ldrb	r3, [r7, #13]
 80045d2:	2b0a      	cmp	r3, #10
 80045d4:	d107      	bne.n	80045e6 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80045dc:	3b01      	subs	r3, #1
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 80045e6:	89fb      	ldrh	r3, [r7, #14]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	81fa      	strh	r2, [r7, #14]
 80045ec:	4619      	mov	r1, r3
 80045ee:	7b7a      	ldrb	r2, [r7, #13]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	440b      	add	r3, r1
 80045f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	33ca      	adds	r3, #202	; 0xca
 80045fc:	f107 020d 	add.w	r2, r7, #13
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fc10 	bl	8003e28 <RB_Read>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0e0      	beq.n	80045d0 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3389      	adds	r3, #137	; 0x89
 8004616:	89fa      	ldrh	r2, [r7, #14]
 8004618:	4619      	mov	r1, r3
 800461a:	f002 fa0b 	bl	8006a34 <HAL_UART_Transmit_DMA>
	}
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0210 	orr.w	r2, r2, #16
 8004648:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0210 	orr.w	r2, r2, #16
 8004660:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0210 	orr.w	r2, r2, #16
 8004678:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3304      	adds	r3, #4
 8004682:	2241      	movs	r2, #65	; 0x41
 8004684:	4619      	mov	r1, r3
 8004686:	f002 fa53 	bl	8006b30 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0208 	bic.w	r2, r2, #8
 80046a0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0208 	bic.w	r2, r2, #8
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <MX_USART2_UART_Init+0x4c>)
 80046ca:	4a12      	ldr	r2, [pc, #72]	; (8004714 <MX_USART2_UART_Init+0x50>)
 80046cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <MX_USART2_UART_Init+0x4c>)
 80046d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046d6:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <MX_USART2_UART_Init+0x4c>)
 80046d8:	2200      	movs	r2, #0
 80046da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <MX_USART2_UART_Init+0x4c>)
 80046de:	2200      	movs	r2, #0
 80046e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046e2:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <MX_USART2_UART_Init+0x4c>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <MX_USART2_UART_Init+0x4c>)
 80046ea:	220c      	movs	r2, #12
 80046ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046ee:	4b08      	ldr	r3, [pc, #32]	; (8004710 <MX_USART2_UART_Init+0x4c>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <MX_USART2_UART_Init+0x4c>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046fa:	4805      	ldr	r0, [pc, #20]	; (8004710 <MX_USART2_UART_Init+0x4c>)
 80046fc:	f002 f94c 	bl	8006998 <HAL_UART_Init>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004706:	f7fe fda0 	bl	800324a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	200005d8 	.word	0x200005d8
 8004714:	40004400 	.word	0x40004400

08004718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004720:	f107 0314 	add.w	r3, r7, #20
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	609a      	str	r2, [r3, #8]
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a4b      	ldr	r2, [pc, #300]	; (8004864 <HAL_UART_MspInit+0x14c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	f040 8090 	bne.w	800485c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	4b49      	ldr	r3, [pc, #292]	; (8004868 <HAL_UART_MspInit+0x150>)
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	4a48      	ldr	r2, [pc, #288]	; (8004868 <HAL_UART_MspInit+0x150>)
 8004746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474a:	6413      	str	r3, [r2, #64]	; 0x40
 800474c:	4b46      	ldr	r3, [pc, #280]	; (8004868 <HAL_UART_MspInit+0x150>)
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	4b42      	ldr	r3, [pc, #264]	; (8004868 <HAL_UART_MspInit+0x150>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	4a41      	ldr	r2, [pc, #260]	; (8004868 <HAL_UART_MspInit+0x150>)
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	6313      	str	r3, [r2, #48]	; 0x30
 8004768:	4b3f      	ldr	r3, [pc, #252]	; (8004868 <HAL_UART_MspInit+0x150>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004774:	230c      	movs	r3, #12
 8004776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004778:	2302      	movs	r3, #2
 800477a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004780:	2303      	movs	r3, #3
 8004782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004784:	2307      	movs	r3, #7
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	4619      	mov	r1, r3
 800478e:	4837      	ldr	r0, [pc, #220]	; (800486c <HAL_UART_MspInit+0x154>)
 8004790:	f000 fed8 	bl	8005544 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <HAL_UART_MspInit+0x158>)
 8004796:	4a37      	ldr	r2, [pc, #220]	; (8004874 <HAL_UART_MspInit+0x15c>)
 8004798:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800479a:	4b35      	ldr	r3, [pc, #212]	; (8004870 <HAL_UART_MspInit+0x158>)
 800479c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047a2:	4b33      	ldr	r3, [pc, #204]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047a8:	4b31      	ldr	r3, [pc, #196]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047ae:	4b30      	ldr	r3, [pc, #192]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047b6:	4b2e      	ldr	r3, [pc, #184]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047bc:	4b2c      	ldr	r3, [pc, #176]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047be:	2200      	movs	r2, #0
 80047c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80047c2:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047c8:	4b29      	ldr	r3, [pc, #164]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047ce:	4b28      	ldr	r3, [pc, #160]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80047d4:	4826      	ldr	r0, [pc, #152]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047d6:	f000 fab3 	bl	8004d40 <HAL_DMA_Init>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80047e0:	f7fe fd33 	bl	800324a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a22      	ldr	r2, [pc, #136]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
 80047ea:	4a21      	ldr	r2, [pc, #132]	; (8004870 <HAL_UART_MspInit+0x158>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80047f0:	4b21      	ldr	r3, [pc, #132]	; (8004878 <HAL_UART_MspInit+0x160>)
 80047f2:	4a22      	ldr	r2, [pc, #136]	; (800487c <HAL_UART_MspInit+0x164>)
 80047f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <HAL_UART_MspInit+0x160>)
 80047f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047fe:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <HAL_UART_MspInit+0x160>)
 8004800:	2240      	movs	r2, #64	; 0x40
 8004802:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004804:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_UART_MspInit+0x160>)
 8004806:	2200      	movs	r2, #0
 8004808:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800480a:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <HAL_UART_MspInit+0x160>)
 800480c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004810:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004812:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_UART_MspInit+0x160>)
 8004814:	2200      	movs	r2, #0
 8004816:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <HAL_UART_MspInit+0x160>)
 800481a:	2200      	movs	r2, #0
 800481c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800481e:	4b16      	ldr	r3, [pc, #88]	; (8004878 <HAL_UART_MspInit+0x160>)
 8004820:	2200      	movs	r2, #0
 8004822:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004824:	4b14      	ldr	r3, [pc, #80]	; (8004878 <HAL_UART_MspInit+0x160>)
 8004826:	2200      	movs	r2, #0
 8004828:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <HAL_UART_MspInit+0x160>)
 800482c:	2200      	movs	r2, #0
 800482e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004830:	4811      	ldr	r0, [pc, #68]	; (8004878 <HAL_UART_MspInit+0x160>)
 8004832:	f000 fa85 	bl	8004d40 <HAL_DMA_Init>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800483c:	f7fe fd05 	bl	800324a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a0d      	ldr	r2, [pc, #52]	; (8004878 <HAL_UART_MspInit+0x160>)
 8004844:	635a      	str	r2, [r3, #52]	; 0x34
 8004846:	4a0c      	ldr	r2, [pc, #48]	; (8004878 <HAL_UART_MspInit+0x160>)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800484c:	2200      	movs	r2, #0
 800484e:	2100      	movs	r1, #0
 8004850:	2026      	movs	r0, #38	; 0x26
 8004852:	f000 fa14 	bl	8004c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004856:	2026      	movs	r0, #38	; 0x26
 8004858:	f000 fa2d 	bl	8004cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800485c:	bf00      	nop
 800485e:	3728      	adds	r7, #40	; 0x28
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40004400 	.word	0x40004400
 8004868:	40023800 	.word	0x40023800
 800486c:	40020000 	.word	0x40020000
 8004870:	20000518 	.word	0x20000518
 8004874:	40026088 	.word	0x40026088
 8004878:	20000578 	.word	0x20000578
 800487c:	400260a0 	.word	0x400260a0

08004880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004884:	480d      	ldr	r0, [pc, #52]	; (80048bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004886:	490e      	ldr	r1, [pc, #56]	; (80048c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004888:	4a0e      	ldr	r2, [pc, #56]	; (80048c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800488a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800488c:	e002      	b.n	8004894 <LoopCopyDataInit>

0800488e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800488e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004892:	3304      	adds	r3, #4

08004894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004898:	d3f9      	bcc.n	800488e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800489a:	4a0b      	ldr	r2, [pc, #44]	; (80048c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800489c:	4c0b      	ldr	r4, [pc, #44]	; (80048cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800489e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048a0:	e001      	b.n	80048a6 <LoopFillZerobss>

080048a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048a4:	3204      	adds	r2, #4

080048a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048a8:	d3fb      	bcc.n	80048a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80048aa:	f7ff fd59 	bl	8004360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048ae:	f003 f9c1 	bl	8007c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048b2:	f7fe fc11 	bl	80030d8 <main>
  bx  lr    
 80048b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80048b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048c0:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80048c4:	0801fff8 	.word	0x0801fff8
  ldr r2, =_sbss
 80048c8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80048cc:	20000630 	.word	0x20000630

080048d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048d0:	e7fe      	b.n	80048d0 <ADC_IRQHandler>
	...

080048d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <HAL_Init+0x40>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <HAL_Init+0x40>)
 80048de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_Init+0x40>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <HAL_Init+0x40>)
 80048ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048f0:	4b08      	ldr	r3, [pc, #32]	; (8004914 <HAL_Init+0x40>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a07      	ldr	r2, [pc, #28]	; (8004914 <HAL_Init+0x40>)
 80048f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048fc:	2003      	movs	r0, #3
 80048fe:	f000 f9b3 	bl	8004c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004902:	2000      	movs	r0, #0
 8004904:	f000 f808 	bl	8004918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004908:	f7ff fbde 	bl	80040c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40023c00 	.word	0x40023c00

08004918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <HAL_InitTick+0x54>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <HAL_InitTick+0x58>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	4619      	mov	r1, r3
 800492a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800492e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004932:	fbb2 f3f3 	udiv	r3, r2, r3
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f9d9 	bl	8004cee <HAL_SYSTICK_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e00e      	b.n	8004964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b0f      	cmp	r3, #15
 800494a:	d80a      	bhi.n	8004962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800494c:	2200      	movs	r2, #0
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	f000 f993 	bl	8004c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004958:	4a06      	ldr	r2, [pc, #24]	; (8004974 <HAL_InitTick+0x5c>)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000030 	.word	0x20000030
 8004970:	20000038 	.word	0x20000038
 8004974:	20000034 	.word	0x20000034

08004978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_IncTick+0x20>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <HAL_IncTick+0x24>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4413      	add	r3, r2
 8004988:	4a04      	ldr	r2, [pc, #16]	; (800499c <HAL_IncTick+0x24>)
 800498a:	6013      	str	r3, [r2, #0]
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000038 	.word	0x20000038
 800499c:	2000061c 	.word	0x2000061c

080049a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return uwTick;
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <HAL_GetTick+0x14>)
 80049a6:	681b      	ldr	r3, [r3, #0]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000061c 	.word	0x2000061c

080049b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049c0:	f7ff ffee 	bl	80049a0 <HAL_GetTick>
 80049c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d005      	beq.n	80049de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049d2:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_Delay+0x44>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049de:	bf00      	nop
 80049e0:	f7ff ffde 	bl	80049a0 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d8f7      	bhi.n	80049e0 <HAL_Delay+0x28>
  {
  }
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000038 	.word	0x20000038

08004a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <__NVIC_SetPriorityGrouping+0x44>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a32:	4a04      	ldr	r2, [pc, #16]	; (8004a44 <__NVIC_SetPriorityGrouping+0x44>)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	60d3      	str	r3, [r2, #12]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <__NVIC_GetPriorityGrouping+0x18>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 0307 	and.w	r3, r3, #7
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	db0b      	blt.n	8004a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	f003 021f 	and.w	r2, r3, #31
 8004a7c:	4907      	ldr	r1, [pc, #28]	; (8004a9c <__NVIC_EnableIRQ+0x38>)
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	2001      	movs	r0, #1
 8004a86:	fa00 f202 	lsl.w	r2, r0, r2
 8004a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000e100 	.word	0xe000e100

08004aa0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	db12      	blt.n	8004ad8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	f003 021f 	and.w	r2, r3, #31
 8004ab8:	490a      	ldr	r1, [pc, #40]	; (8004ae4 <__NVIC_DisableIRQ+0x44>)
 8004aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ac6:	3320      	adds	r3, #32
 8004ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004acc:	f3bf 8f4f 	dsb	sy
}
 8004ad0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ad2:	f3bf 8f6f 	isb	sy
}
 8004ad6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000e100 	.word	0xe000e100

08004ae8 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db0e      	blt.n	8004b18 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8004afa:	4a0b      	ldr	r2, [pc, #44]	; (8004b28 <__NVIC_GetPendingIRQ+0x40>)
 8004afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	3340      	adds	r3, #64	; 0x40
 8004b04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	e000      	b.n	8004b1a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8004b18:	2300      	movs	r3, #0
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	e000e100 	.word	0xe000e100

08004b2c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	db0c      	blt.n	8004b58 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	f003 021f 	and.w	r2, r3, #31
 8004b44:	4907      	ldr	r1, [pc, #28]	; (8004b64 <__NVIC_ClearPendingIRQ+0x38>)
 8004b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b52:	3360      	adds	r3, #96	; 0x60
 8004b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000e100 	.word	0xe000e100

08004b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	6039      	str	r1, [r7, #0]
 8004b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	db0a      	blt.n	8004b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	490c      	ldr	r1, [pc, #48]	; (8004bb4 <__NVIC_SetPriority+0x4c>)
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	0112      	lsls	r2, r2, #4
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b90:	e00a      	b.n	8004ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	4908      	ldr	r1, [pc, #32]	; (8004bb8 <__NVIC_SetPriority+0x50>)
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	3b04      	subs	r3, #4
 8004ba0:	0112      	lsls	r2, r2, #4
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	761a      	strb	r2, [r3, #24]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000e100 	.word	0xe000e100
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b089      	sub	sp, #36	; 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f1c3 0307 	rsb	r3, r3, #7
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	bf28      	it	cs
 8004bda:	2304      	movcs	r3, #4
 8004bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	3304      	adds	r3, #4
 8004be2:	2b06      	cmp	r3, #6
 8004be4:	d902      	bls.n	8004bec <NVIC_EncodePriority+0x30>
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3b03      	subs	r3, #3
 8004bea:	e000      	b.n	8004bee <NVIC_EncodePriority+0x32>
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43da      	mvns	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	401a      	ands	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c04:	f04f 31ff 	mov.w	r1, #4294967295
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0e:	43d9      	mvns	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	4313      	orrs	r3, r2
         );
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3724      	adds	r7, #36	; 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c34:	d301      	bcc.n	8004c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c36:	2301      	movs	r3, #1
 8004c38:	e00f      	b.n	8004c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c3a:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <SysTick_Config+0x40>)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c42:	210f      	movs	r1, #15
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	f7ff ff8e 	bl	8004b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <SysTick_Config+0x40>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <SysTick_Config+0x40>)
 8004c54:	2207      	movs	r2, #7
 8004c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	e000e010 	.word	0xe000e010

08004c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff fec5 	bl	8004a00 <__NVIC_SetPriorityGrouping>
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	4603      	mov	r3, r0
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c90:	f7ff feda 	bl	8004a48 <__NVIC_GetPriorityGrouping>
 8004c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	6978      	ldr	r0, [r7, #20]
 8004c9c:	f7ff ff8e 	bl	8004bbc <NVIC_EncodePriority>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff ff5d 	bl	8004b68 <__NVIC_SetPriority>
}
 8004cae:	bf00      	nop
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff fecd 	bl	8004a64 <__NVIC_EnableIRQ>
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	4603      	mov	r3, r0
 8004cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fedd 	bl	8004aa0 <__NVIC_DisableIRQ>
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ff94 	bl	8004c24 <SysTick_Config>
 8004cfc:	4603      	mov	r3, r0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8004d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fee7 	bl	8004ae8 <__NVIC_GetPendingIRQ>
 8004d1a:	4603      	mov	r3, r0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fefa 	bl	8004b2c <__NVIC_ClearPendingIRQ>
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d4c:	f7ff fe28 	bl	80049a0 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e099      	b.n	8004e90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d7c:	e00f      	b.n	8004d9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d7e:	f7ff fe0f 	bl	80049a0 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b05      	cmp	r3, #5
 8004d8a:	d908      	bls.n	8004d9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2203      	movs	r2, #3
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e078      	b.n	8004e90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e8      	bne.n	8004d7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4b38      	ldr	r3, [pc, #224]	; (8004e98 <HAL_DMA_Init+0x158>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d107      	bne.n	8004e08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	4313      	orrs	r3, r2
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0307 	bic.w	r3, r3, #7
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d117      	bne.n	8004e62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00e      	beq.n	8004e62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fb01 	bl	800544c <DMA_CheckFifoParam>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2240      	movs	r2, #64	; 0x40
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e016      	b.n	8004e90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fab8 	bl	80053e0 <DMA_CalcBaseAndBitshift>
 8004e70:	4603      	mov	r3, r0
 8004e72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	223f      	movs	r2, #63	; 0x3f
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	f010803f 	.word	0xf010803f

08004e9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_DMA_Start_IT+0x26>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e040      	b.n	8004f44 <HAL_DMA_Start_IT+0xa8>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d12f      	bne.n	8004f36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fa4a 	bl	8005384 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef4:	223f      	movs	r2, #63	; 0x3f
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0216 	orr.w	r2, r2, #22
 8004f0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0208 	orr.w	r2, r2, #8
 8004f22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e005      	b.n	8004f42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f5a:	f7ff fd21 	bl	80049a0 <HAL_GetTick>
 8004f5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d008      	beq.n	8004f7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2280      	movs	r2, #128	; 0x80
 8004f70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e052      	b.n	8005024 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0216 	bic.w	r2, r2, #22
 8004f8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695a      	ldr	r2, [r3, #20]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d103      	bne.n	8004fae <HAL_DMA_Abort+0x62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0208 	bic.w	r2, r2, #8
 8004fbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fce:	e013      	b.n	8004ff8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fd0:	f7ff fce6 	bl	80049a0 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b05      	cmp	r3, #5
 8004fdc:	d90c      	bls.n	8004ff8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e015      	b.n	8005024 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e4      	bne.n	8004fd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	223f      	movs	r2, #63	; 0x3f
 800500c:	409a      	lsls	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d004      	beq.n	800504a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e00c      	b.n	8005064 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2205      	movs	r2, #5
 800504e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800507c:	4b92      	ldr	r3, [pc, #584]	; (80052c8 <HAL_DMA_IRQHandler+0x258>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a92      	ldr	r2, [pc, #584]	; (80052cc <HAL_DMA_IRQHandler+0x25c>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	0a9b      	lsrs	r3, r3, #10
 8005088:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509a:	2208      	movs	r2, #8
 800509c:	409a      	lsls	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01a      	beq.n	80050dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0204 	bic.w	r2, r2, #4
 80050c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	2208      	movs	r2, #8
 80050ca:	409a      	lsls	r2, r3
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d4:	f043 0201 	orr.w	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e0:	2201      	movs	r2, #1
 80050e2:	409a      	lsls	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d012      	beq.n	8005112 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fe:	2201      	movs	r2, #1
 8005100:	409a      	lsls	r2, r3
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	f043 0202 	orr.w	r2, r3, #2
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005116:	2204      	movs	r2, #4
 8005118:	409a      	lsls	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4013      	ands	r3, r2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d012      	beq.n	8005148 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005134:	2204      	movs	r2, #4
 8005136:	409a      	lsls	r2, r3
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f043 0204 	orr.w	r2, r3, #4
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514c:	2210      	movs	r2, #16
 800514e:	409a      	lsls	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d043      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d03c      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516a:	2210      	movs	r2, #16
 800516c:	409a      	lsls	r2, r3
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d018      	beq.n	80051b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d108      	bne.n	80051a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	2b00      	cmp	r3, #0
 8005194:	d024      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	4798      	blx	r3
 800519e:	e01f      	b.n	80051e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
 80051b0:	e016      	b.n	80051e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d107      	bne.n	80051d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0208 	bic.w	r2, r2, #8
 80051ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e4:	2220      	movs	r2, #32
 80051e6:	409a      	lsls	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 808e 	beq.w	800530e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8086 	beq.w	800530e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005206:	2220      	movs	r2, #32
 8005208:	409a      	lsls	r2, r3
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b05      	cmp	r3, #5
 8005218:	d136      	bne.n	8005288 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0216 	bic.w	r2, r2, #22
 8005228:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695a      	ldr	r2, [r3, #20]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005238:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <HAL_DMA_IRQHandler+0x1da>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0208 	bic.w	r2, r2, #8
 8005258:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525e:	223f      	movs	r2, #63	; 0x3f
 8005260:	409a      	lsls	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527a:	2b00      	cmp	r3, #0
 800527c:	d07d      	beq.n	800537a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
        }
        return;
 8005286:	e078      	b.n	800537a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01c      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d108      	bne.n	80052b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d030      	beq.n	800530e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	4798      	blx	r3
 80052b4:	e02b      	b.n	800530e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d027      	beq.n	800530e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	4798      	blx	r3
 80052c6:	e022      	b.n	800530e <HAL_DMA_IRQHandler+0x29e>
 80052c8:	20000030 	.word	0x20000030
 80052cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10f      	bne.n	80052fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0210 	bic.w	r2, r2, #16
 80052ec:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	2b00      	cmp	r3, #0
 8005314:	d032      	beq.n	800537c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d022      	beq.n	8005368 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2205      	movs	r2, #5
 8005326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	3301      	adds	r3, #1
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	429a      	cmp	r2, r3
 8005344:	d307      	bcc.n	8005356 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f2      	bne.n	800533a <HAL_DMA_IRQHandler+0x2ca>
 8005354:	e000      	b.n	8005358 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005356:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
 8005378:	e000      	b.n	800537c <HAL_DMA_IRQHandler+0x30c>
        return;
 800537a:	bf00      	nop
    }
  }
}
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop

08005384 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d108      	bne.n	80053c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053c2:	e007      	b.n	80053d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	60da      	str	r2, [r3, #12]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	3b10      	subs	r3, #16
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <DMA_CalcBaseAndBitshift+0x64>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	091b      	lsrs	r3, r3, #4
 80053f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053fa:	4a13      	ldr	r2, [pc, #76]	; (8005448 <DMA_CalcBaseAndBitshift+0x68>)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d909      	bls.n	8005422 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	659a      	str	r2, [r3, #88]	; 0x58
 8005420:	e007      	b.n	8005432 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	aaaaaaab 	.word	0xaaaaaaab
 8005448:	0801facc 	.word	0x0801facc

0800544c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d11f      	bne.n	80054a6 <DMA_CheckFifoParam+0x5a>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b03      	cmp	r3, #3
 800546a:	d856      	bhi.n	800551a <DMA_CheckFifoParam+0xce>
 800546c:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <DMA_CheckFifoParam+0x28>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	08005485 	.word	0x08005485
 8005478:	08005497 	.word	0x08005497
 800547c:	08005485 	.word	0x08005485
 8005480:	0800551b 	.word	0x0800551b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d046      	beq.n	800551e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005494:	e043      	b.n	800551e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800549e:	d140      	bne.n	8005522 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a4:	e03d      	b.n	8005522 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ae:	d121      	bne.n	80054f4 <DMA_CheckFifoParam+0xa8>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d837      	bhi.n	8005526 <DMA_CheckFifoParam+0xda>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <DMA_CheckFifoParam+0x70>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054d3 	.word	0x080054d3
 80054c4:	080054cd 	.word	0x080054cd
 80054c8:	080054e5 	.word	0x080054e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
      break;
 80054d0:	e030      	b.n	8005534 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d025      	beq.n	800552a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054e2:	e022      	b.n	800552a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054ec:	d11f      	bne.n	800552e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054f2:	e01c      	b.n	800552e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d903      	bls.n	8005502 <DMA_CheckFifoParam+0xb6>
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d003      	beq.n	8005508 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005500:	e018      	b.n	8005534 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
      break;
 8005506:	e015      	b.n	8005534 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00e      	beq.n	8005532 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
      break;
 8005518:	e00b      	b.n	8005532 <DMA_CheckFifoParam+0xe6>
      break;
 800551a:	bf00      	nop
 800551c:	e00a      	b.n	8005534 <DMA_CheckFifoParam+0xe8>
      break;
 800551e:	bf00      	nop
 8005520:	e008      	b.n	8005534 <DMA_CheckFifoParam+0xe8>
      break;
 8005522:	bf00      	nop
 8005524:	e006      	b.n	8005534 <DMA_CheckFifoParam+0xe8>
      break;
 8005526:	bf00      	nop
 8005528:	e004      	b.n	8005534 <DMA_CheckFifoParam+0xe8>
      break;
 800552a:	bf00      	nop
 800552c:	e002      	b.n	8005534 <DMA_CheckFifoParam+0xe8>
      break;   
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <DMA_CheckFifoParam+0xe8>
      break;
 8005532:	bf00      	nop
    }
  } 
  
  return status; 
 8005534:	7bfb      	ldrb	r3, [r7, #15]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop

08005544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005552:	2300      	movs	r3, #0
 8005554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	e159      	b.n	8005814 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005560:	2201      	movs	r2, #1
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4013      	ands	r3, r2
 8005572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	429a      	cmp	r2, r3
 800557a:	f040 8148 	bne.w	800580e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b01      	cmp	r3, #1
 8005588:	d005      	beq.n	8005596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005592:	2b02      	cmp	r3, #2
 8005594:	d130      	bne.n	80055f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	2203      	movs	r2, #3
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4013      	ands	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	4313      	orrs	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055cc:	2201      	movs	r2, #1
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43db      	mvns	r3, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4013      	ands	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 0201 	and.w	r2, r3, #1
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	2b03      	cmp	r3, #3
 8005602:	d017      	beq.n	8005634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	2203      	movs	r2, #3
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	4013      	ands	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4313      	orrs	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d123      	bne.n	8005688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	08da      	lsrs	r2, r3, #3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3208      	adds	r2, #8
 8005648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	220f      	movs	r2, #15
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4013      	ands	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4313      	orrs	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	08da      	lsrs	r2, r3, #3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3208      	adds	r2, #8
 8005682:	69b9      	ldr	r1, [r7, #24]
 8005684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	2203      	movs	r2, #3
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 0203 	and.w	r2, r3, #3
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80a2 	beq.w	800580e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	4b57      	ldr	r3, [pc, #348]	; (800582c <HAL_GPIO_Init+0x2e8>)
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	4a56      	ldr	r2, [pc, #344]	; (800582c <HAL_GPIO_Init+0x2e8>)
 80056d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056d8:	6453      	str	r3, [r2, #68]	; 0x44
 80056da:	4b54      	ldr	r3, [pc, #336]	; (800582c <HAL_GPIO_Init+0x2e8>)
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056e6:	4a52      	ldr	r2, [pc, #328]	; (8005830 <HAL_GPIO_Init+0x2ec>)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	089b      	lsrs	r3, r3, #2
 80056ec:	3302      	adds	r3, #2
 80056ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	220f      	movs	r2, #15
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	43db      	mvns	r3, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4013      	ands	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a49      	ldr	r2, [pc, #292]	; (8005834 <HAL_GPIO_Init+0x2f0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d019      	beq.n	8005746 <HAL_GPIO_Init+0x202>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a48      	ldr	r2, [pc, #288]	; (8005838 <HAL_GPIO_Init+0x2f4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_GPIO_Init+0x1fe>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a47      	ldr	r2, [pc, #284]	; (800583c <HAL_GPIO_Init+0x2f8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00d      	beq.n	800573e <HAL_GPIO_Init+0x1fa>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a46      	ldr	r2, [pc, #280]	; (8005840 <HAL_GPIO_Init+0x2fc>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <HAL_GPIO_Init+0x1f6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a45      	ldr	r2, [pc, #276]	; (8005844 <HAL_GPIO_Init+0x300>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d101      	bne.n	8005736 <HAL_GPIO_Init+0x1f2>
 8005732:	2304      	movs	r3, #4
 8005734:	e008      	b.n	8005748 <HAL_GPIO_Init+0x204>
 8005736:	2307      	movs	r3, #7
 8005738:	e006      	b.n	8005748 <HAL_GPIO_Init+0x204>
 800573a:	2303      	movs	r3, #3
 800573c:	e004      	b.n	8005748 <HAL_GPIO_Init+0x204>
 800573e:	2302      	movs	r3, #2
 8005740:	e002      	b.n	8005748 <HAL_GPIO_Init+0x204>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <HAL_GPIO_Init+0x204>
 8005746:	2300      	movs	r3, #0
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	f002 0203 	and.w	r2, r2, #3
 800574e:	0092      	lsls	r2, r2, #2
 8005750:	4093      	lsls	r3, r2
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4313      	orrs	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005758:	4935      	ldr	r1, [pc, #212]	; (8005830 <HAL_GPIO_Init+0x2ec>)
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	089b      	lsrs	r3, r3, #2
 800575e:	3302      	adds	r3, #2
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005766:	4b38      	ldr	r3, [pc, #224]	; (8005848 <HAL_GPIO_Init+0x304>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	43db      	mvns	r3, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4013      	ands	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800578a:	4a2f      	ldr	r2, [pc, #188]	; (8005848 <HAL_GPIO_Init+0x304>)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005790:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <HAL_GPIO_Init+0x304>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	43db      	mvns	r3, r3
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4013      	ands	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057b4:	4a24      	ldr	r2, [pc, #144]	; (8005848 <HAL_GPIO_Init+0x304>)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057ba:	4b23      	ldr	r3, [pc, #140]	; (8005848 <HAL_GPIO_Init+0x304>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	43db      	mvns	r3, r3
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4013      	ands	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057de:	4a1a      	ldr	r2, [pc, #104]	; (8005848 <HAL_GPIO_Init+0x304>)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057e4:	4b18      	ldr	r3, [pc, #96]	; (8005848 <HAL_GPIO_Init+0x304>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	43db      	mvns	r3, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005808:	4a0f      	ldr	r2, [pc, #60]	; (8005848 <HAL_GPIO_Init+0x304>)
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3301      	adds	r3, #1
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2b0f      	cmp	r3, #15
 8005818:	f67f aea2 	bls.w	8005560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800581c:	bf00      	nop
 800581e:	bf00      	nop
 8005820:	3724      	adds	r7, #36	; 0x24
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40023800 	.word	0x40023800
 8005830:	40013800 	.word	0x40013800
 8005834:	40020000 	.word	0x40020000
 8005838:	40020400 	.word	0x40020400
 800583c:	40020800 	.word	0x40020800
 8005840:	40020c00 	.word	0x40020c00
 8005844:	40021000 	.word	0x40021000
 8005848:	40013c00 	.word	0x40013c00

0800584c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	887b      	ldrh	r3, [r7, #2]
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
 8005868:	e001      	b.n	800586e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	807b      	strh	r3, [r7, #2]
 8005888:	4613      	mov	r3, r2
 800588a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800588c:	787b      	ldrb	r3, [r7, #1]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005892:	887a      	ldrh	r2, [r7, #2]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005898:	e003      	b.n	80058a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800589a:	887b      	ldrh	r3, [r7, #2]
 800589c:	041a      	lsls	r2, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	619a      	str	r2, [r3, #24]
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058ba:	4b08      	ldr	r3, [pc, #32]	; (80058dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058c6:	4a05      	ldr	r2, [pc, #20]	; (80058dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fd fcac 	bl	800322c <HAL_GPIO_EXTI_Callback>
  }
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40013c00 	.word	0x40013c00

080058e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e264      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d075      	beq.n	80059ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058fe:	4ba3      	ldr	r3, [pc, #652]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	2b04      	cmp	r3, #4
 8005908:	d00c      	beq.n	8005924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800590a:	4ba0      	ldr	r3, [pc, #640]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005912:	2b08      	cmp	r3, #8
 8005914:	d112      	bne.n	800593c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005916:	4b9d      	ldr	r3, [pc, #628]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005922:	d10b      	bne.n	800593c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005924:	4b99      	ldr	r3, [pc, #612]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d05b      	beq.n	80059e8 <HAL_RCC_OscConfig+0x108>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d157      	bne.n	80059e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e23f      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005944:	d106      	bne.n	8005954 <HAL_RCC_OscConfig+0x74>
 8005946:	4b91      	ldr	r3, [pc, #580]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a90      	ldr	r2, [pc, #576]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 800594c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e01d      	b.n	8005990 <HAL_RCC_OscConfig+0xb0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800595c:	d10c      	bne.n	8005978 <HAL_RCC_OscConfig+0x98>
 800595e:	4b8b      	ldr	r3, [pc, #556]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a8a      	ldr	r2, [pc, #552]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	4b88      	ldr	r3, [pc, #544]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a87      	ldr	r2, [pc, #540]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	e00b      	b.n	8005990 <HAL_RCC_OscConfig+0xb0>
 8005978:	4b84      	ldr	r3, [pc, #528]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a83      	ldr	r2, [pc, #524]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 800597e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	4b81      	ldr	r3, [pc, #516]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a80      	ldr	r2, [pc, #512]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 800598a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800598e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005998:	f7ff f802 	bl	80049a0 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a0:	f7fe fffe 	bl	80049a0 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	; 0x64
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e204      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059b2:	4b76      	ldr	r3, [pc, #472]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0f0      	beq.n	80059a0 <HAL_RCC_OscConfig+0xc0>
 80059be:	e014      	b.n	80059ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fe ffee 	bl	80049a0 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059c8:	f7fe ffea 	bl	80049a0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	; 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e1f0      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059da:	4b6c      	ldr	r3, [pc, #432]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0xe8>
 80059e6:	e000      	b.n	80059ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d063      	beq.n	8005abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059f6:	4b65      	ldr	r3, [pc, #404]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a02:	4b62      	ldr	r3, [pc, #392]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d11c      	bne.n	8005a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a0e:	4b5f      	ldr	r3, [pc, #380]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d116      	bne.n	8005a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a1a:	4b5c      	ldr	r3, [pc, #368]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_RCC_OscConfig+0x152>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d001      	beq.n	8005a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e1c4      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a32:	4b56      	ldr	r3, [pc, #344]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4952      	ldr	r1, [pc, #328]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a46:	e03a      	b.n	8005abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d020      	beq.n	8005a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a50:	4b4f      	ldr	r3, [pc, #316]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a56:	f7fe ffa3 	bl	80049a0 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a5e:	f7fe ff9f 	bl	80049a0 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e1a5      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a70:	4b46      	ldr	r3, [pc, #280]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f0      	beq.n	8005a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7c:	4b43      	ldr	r3, [pc, #268]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	4940      	ldr	r1, [pc, #256]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	600b      	str	r3, [r1, #0]
 8005a90:	e015      	b.n	8005abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a92:	4b3f      	ldr	r3, [pc, #252]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fe ff82 	bl	80049a0 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aa0:	f7fe ff7e 	bl	80049a0 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e184      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ab2:	4b36      	ldr	r3, [pc, #216]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d030      	beq.n	8005b2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ad2:	4b30      	ldr	r3, [pc, #192]	; (8005b94 <HAL_RCC_OscConfig+0x2b4>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fe ff62 	bl	80049a0 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ae0:	f7fe ff5e 	bl	80049a0 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e164      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005af2:	4b26      	ldr	r3, [pc, #152]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x200>
 8005afe:	e015      	b.n	8005b2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b00:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <HAL_RCC_OscConfig+0x2b4>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b06:	f7fe ff4b 	bl	80049a0 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b0e:	f7fe ff47 	bl	80049a0 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e14d      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b20:	4b1a      	ldr	r3, [pc, #104]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f0      	bne.n	8005b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 80a0 	beq.w	8005c7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b3e:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10f      	bne.n	8005b6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	4a0e      	ldr	r2, [pc, #56]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b58:	6413      	str	r3, [r2, #64]	; 0x40
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b62:	60bb      	str	r3, [r7, #8]
 8005b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b66:	2301      	movs	r3, #1
 8005b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_RCC_OscConfig+0x2b8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d121      	bne.n	8005bba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b76:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <HAL_RCC_OscConfig+0x2b8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a07      	ldr	r2, [pc, #28]	; (8005b98 <HAL_RCC_OscConfig+0x2b8>)
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b82:	f7fe ff0d 	bl	80049a0 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b88:	e011      	b.n	8005bae <HAL_RCC_OscConfig+0x2ce>
 8005b8a:	bf00      	nop
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	42470000 	.word	0x42470000
 8005b94:	42470e80 	.word	0x42470e80
 8005b98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b9c:	f7fe ff00 	bl	80049a0 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e106      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bae:	4b85      	ldr	r3, [pc, #532]	; (8005dc4 <HAL_RCC_OscConfig+0x4e4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d106      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x2f0>
 8005bc2:	4b81      	ldr	r3, [pc, #516]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	4a80      	ldr	r2, [pc, #512]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bce:	e01c      	b.n	8005c0a <HAL_RCC_OscConfig+0x32a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	d10c      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x312>
 8005bd8:	4b7b      	ldr	r3, [pc, #492]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	4a7a      	ldr	r2, [pc, #488]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005bde:	f043 0304 	orr.w	r3, r3, #4
 8005be2:	6713      	str	r3, [r2, #112]	; 0x70
 8005be4:	4b78      	ldr	r3, [pc, #480]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be8:	4a77      	ldr	r2, [pc, #476]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf0:	e00b      	b.n	8005c0a <HAL_RCC_OscConfig+0x32a>
 8005bf2:	4b75      	ldr	r3, [pc, #468]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	4a74      	ldr	r2, [pc, #464]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bfe:	4b72      	ldr	r3, [pc, #456]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c02:	4a71      	ldr	r2, [pc, #452]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005c04:	f023 0304 	bic.w	r3, r3, #4
 8005c08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d015      	beq.n	8005c3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c12:	f7fe fec5 	bl	80049a0 <HAL_GetTick>
 8005c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c18:	e00a      	b.n	8005c30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c1a:	f7fe fec1 	bl	80049a0 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e0c5      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c30:	4b65      	ldr	r3, [pc, #404]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0ee      	beq.n	8005c1a <HAL_RCC_OscConfig+0x33a>
 8005c3c:	e014      	b.n	8005c68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c3e:	f7fe feaf 	bl	80049a0 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c44:	e00a      	b.n	8005c5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c46:	f7fe feab 	bl	80049a0 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e0af      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c5c:	4b5a      	ldr	r3, [pc, #360]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1ee      	bne.n	8005c46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d105      	bne.n	8005c7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6e:	4b56      	ldr	r3, [pc, #344]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	4a55      	ldr	r2, [pc, #340]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 809b 	beq.w	8005dba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c84:	4b50      	ldr	r3, [pc, #320]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 030c 	and.w	r3, r3, #12
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d05c      	beq.n	8005d4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d141      	bne.n	8005d1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c98:	4b4c      	ldr	r3, [pc, #304]	; (8005dcc <HAL_RCC_OscConfig+0x4ec>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9e:	f7fe fe7f 	bl	80049a0 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca6:	f7fe fe7b 	bl	80049a0 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e081      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb8:	4b43      	ldr	r3, [pc, #268]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1f0      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	019b      	lsls	r3, r3, #6
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	061b      	lsls	r3, r3, #24
 8005ce8:	4937      	ldr	r1, [pc, #220]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cee:	4b37      	ldr	r3, [pc, #220]	; (8005dcc <HAL_RCC_OscConfig+0x4ec>)
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf4:	f7fe fe54 	bl	80049a0 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cfc:	f7fe fe50 	bl	80049a0 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e056      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d0e:	4b2e      	ldr	r3, [pc, #184]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0f0      	beq.n	8005cfc <HAL_RCC_OscConfig+0x41c>
 8005d1a:	e04e      	b.n	8005dba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	; (8005dcc <HAL_RCC_OscConfig+0x4ec>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d22:	f7fe fe3d 	bl	80049a0 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2a:	f7fe fe39 	bl	80049a0 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e03f      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3c:	4b22      	ldr	r3, [pc, #136]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f0      	bne.n	8005d2a <HAL_RCC_OscConfig+0x44a>
 8005d48:	e037      	b.n	8005dba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e032      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d56:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <HAL_RCC_OscConfig+0x4e8>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d028      	beq.n	8005db6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d121      	bne.n	8005db6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d11a      	bne.n	8005db6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d86:	4013      	ands	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d111      	bne.n	8005db6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d107      	bne.n	8005db6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d001      	beq.n	8005dba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40007000 	.word	0x40007000
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	42470060 	.word	0x42470060

08005dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0cc      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005de4:	4b68      	ldr	r3, [pc, #416]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d90c      	bls.n	8005e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df2:	4b65      	ldr	r3, [pc, #404]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfa:	4b63      	ldr	r3, [pc, #396]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d001      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0b8      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d020      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e24:	4b59      	ldr	r3, [pc, #356]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	4a58      	ldr	r2, [pc, #352]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e3c:	4b53      	ldr	r3, [pc, #332]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	4a52      	ldr	r2, [pc, #328]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e48:	4b50      	ldr	r3, [pc, #320]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	494d      	ldr	r1, [pc, #308]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d044      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6e:	4b47      	ldr	r3, [pc, #284]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d119      	bne.n	8005eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e07f      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d003      	beq.n	8005e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d107      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e8e:	4b3f      	ldr	r3, [pc, #252]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d109      	bne.n	8005eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e06f      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9e:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e067      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eae:	4b37      	ldr	r3, [pc, #220]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f023 0203 	bic.w	r2, r3, #3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	4934      	ldr	r1, [pc, #208]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ec0:	f7fe fd6e 	bl	80049a0 <HAL_GetTick>
 8005ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec6:	e00a      	b.n	8005ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ec8:	f7fe fd6a 	bl	80049a0 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e04f      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ede:	4b2b      	ldr	r3, [pc, #172]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 020c 	and.w	r2, r3, #12
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d1eb      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ef0:	4b25      	ldr	r3, [pc, #148]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d20c      	bcs.n	8005f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efe:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f06:	4b20      	ldr	r3, [pc, #128]	; (8005f88 <HAL_RCC_ClockConfig+0x1b8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d001      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e032      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f24:	4b19      	ldr	r3, [pc, #100]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4916      	ldr	r1, [pc, #88]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f42:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	490e      	ldr	r1, [pc, #56]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f56:	f000 f821 	bl	8005f9c <HAL_RCC_GetSysClockFreq>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	490a      	ldr	r1, [pc, #40]	; (8005f90 <HAL_RCC_ClockConfig+0x1c0>)
 8005f68:	5ccb      	ldrb	r3, [r1, r3]
 8005f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6e:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <HAL_RCC_ClockConfig+0x1c4>)
 8005f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f72:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <HAL_RCC_ClockConfig+0x1c8>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fcce 	bl	8004918 <HAL_InitTick>

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40023c00 	.word	0x40023c00
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	0801fab4 	.word	0x0801fab4
 8005f94:	20000030 	.word	0x20000030
 8005f98:	20000034 	.word	0x20000034

08005f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f9c:	b5b0      	push	{r4, r5, r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	6079      	str	r1, [r7, #4]
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	60f9      	str	r1, [r7, #12]
 8005faa:	2100      	movs	r1, #0
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005fae:	2100      	movs	r1, #0
 8005fb0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fb2:	4952      	ldr	r1, [pc, #328]	; (80060fc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fb4:	6889      	ldr	r1, [r1, #8]
 8005fb6:	f001 010c 	and.w	r1, r1, #12
 8005fba:	2908      	cmp	r1, #8
 8005fbc:	d00d      	beq.n	8005fda <HAL_RCC_GetSysClockFreq+0x3e>
 8005fbe:	2908      	cmp	r1, #8
 8005fc0:	f200 8094 	bhi.w	80060ec <HAL_RCC_GetSysClockFreq+0x150>
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_RCC_GetSysClockFreq+0x32>
 8005fc8:	2904      	cmp	r1, #4
 8005fca:	d003      	beq.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x38>
 8005fcc:	e08e      	b.n	80060ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fce:	4b4c      	ldr	r3, [pc, #304]	; (8006100 <HAL_RCC_GetSysClockFreq+0x164>)
 8005fd0:	60bb      	str	r3, [r7, #8]
       break;
 8005fd2:	e08e      	b.n	80060f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fd4:	4b4b      	ldr	r3, [pc, #300]	; (8006104 <HAL_RCC_GetSysClockFreq+0x168>)
 8005fd6:	60bb      	str	r3, [r7, #8]
      break;
 8005fd8:	e08b      	b.n	80060f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fda:	4948      	ldr	r1, [pc, #288]	; (80060fc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fdc:	6849      	ldr	r1, [r1, #4]
 8005fde:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005fe2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fe4:	4945      	ldr	r1, [pc, #276]	; (80060fc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fe6:	6849      	ldr	r1, [r1, #4]
 8005fe8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005fec:	2900      	cmp	r1, #0
 8005fee:	d024      	beq.n	800603a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ff0:	4942      	ldr	r1, [pc, #264]	; (80060fc <HAL_RCC_GetSysClockFreq+0x160>)
 8005ff2:	6849      	ldr	r1, [r1, #4]
 8005ff4:	0989      	lsrs	r1, r1, #6
 8005ff6:	4608      	mov	r0, r1
 8005ff8:	f04f 0100 	mov.w	r1, #0
 8005ffc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006000:	f04f 0500 	mov.w	r5, #0
 8006004:	ea00 0204 	and.w	r2, r0, r4
 8006008:	ea01 0305 	and.w	r3, r1, r5
 800600c:	493d      	ldr	r1, [pc, #244]	; (8006104 <HAL_RCC_GetSysClockFreq+0x168>)
 800600e:	fb01 f003 	mul.w	r0, r1, r3
 8006012:	2100      	movs	r1, #0
 8006014:	fb01 f102 	mul.w	r1, r1, r2
 8006018:	1844      	adds	r4, r0, r1
 800601a:	493a      	ldr	r1, [pc, #232]	; (8006104 <HAL_RCC_GetSysClockFreq+0x168>)
 800601c:	fba2 0101 	umull	r0, r1, r2, r1
 8006020:	1863      	adds	r3, r4, r1
 8006022:	4619      	mov	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	461a      	mov	r2, r3
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	f7fa fe44 	bl	8000cb8 <__aeabi_uldivmod>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4613      	mov	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e04a      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800603a:	4b30      	ldr	r3, [pc, #192]	; (80060fc <HAL_RCC_GetSysClockFreq+0x160>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	099b      	lsrs	r3, r3, #6
 8006040:	461a      	mov	r2, r3
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	f240 10ff 	movw	r0, #511	; 0x1ff
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	ea02 0400 	and.w	r4, r2, r0
 8006052:	ea03 0501 	and.w	r5, r3, r1
 8006056:	4620      	mov	r0, r4
 8006058:	4629      	mov	r1, r5
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	014b      	lsls	r3, r1, #5
 8006064:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006068:	0142      	lsls	r2, r0, #5
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	1b00      	subs	r0, r0, r4
 8006070:	eb61 0105 	sbc.w	r1, r1, r5
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	018b      	lsls	r3, r1, #6
 800607e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006082:	0182      	lsls	r2, r0, #6
 8006084:	1a12      	subs	r2, r2, r0
 8006086:	eb63 0301 	sbc.w	r3, r3, r1
 800608a:	f04f 0000 	mov.w	r0, #0
 800608e:	f04f 0100 	mov.w	r1, #0
 8006092:	00d9      	lsls	r1, r3, #3
 8006094:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006098:	00d0      	lsls	r0, r2, #3
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	1912      	adds	r2, r2, r4
 80060a0:	eb45 0303 	adc.w	r3, r5, r3
 80060a4:	f04f 0000 	mov.w	r0, #0
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	0299      	lsls	r1, r3, #10
 80060ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80060b2:	0290      	lsls	r0, r2, #10
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4610      	mov	r0, r2
 80060ba:	4619      	mov	r1, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	461a      	mov	r2, r3
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	f7fa fdf8 	bl	8000cb8 <__aeabi_uldivmod>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4613      	mov	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060d0:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <HAL_RCC_GetSysClockFreq+0x160>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	3301      	adds	r3, #1
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e8:	60bb      	str	r3, [r7, #8]
      break;
 80060ea:	e002      	b.n	80060f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060ec:	4b04      	ldr	r3, [pc, #16]	; (8006100 <HAL_RCC_GetSysClockFreq+0x164>)
 80060ee:	60bb      	str	r3, [r7, #8]
      break;
 80060f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060f2:	68bb      	ldr	r3, [r7, #8]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bdb0      	pop	{r4, r5, r7, pc}
 80060fc:	40023800 	.word	0x40023800
 8006100:	00f42400 	.word	0x00f42400
 8006104:	017d7840 	.word	0x017d7840

08006108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800610c:	4b03      	ldr	r3, [pc, #12]	; (800611c <HAL_RCC_GetHCLKFreq+0x14>)
 800610e:	681b      	ldr	r3, [r3, #0]
}
 8006110:	4618      	mov	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	20000030 	.word	0x20000030

08006120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006124:	f7ff fff0 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8006128:	4602      	mov	r2, r0
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	0a9b      	lsrs	r3, r3, #10
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	4903      	ldr	r1, [pc, #12]	; (8006144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006136:	5ccb      	ldrb	r3, [r1, r3]
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800613c:	4618      	mov	r0, r3
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40023800 	.word	0x40023800
 8006144:	0801fac4 	.word	0x0801fac4

08006148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800614c:	f7ff ffdc 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8006150:	4602      	mov	r2, r0
 8006152:	4b05      	ldr	r3, [pc, #20]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	0b5b      	lsrs	r3, r3, #13
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	4903      	ldr	r1, [pc, #12]	; (800616c <HAL_RCC_GetPCLK2Freq+0x24>)
 800615e:	5ccb      	ldrb	r3, [r1, r3]
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006164:	4618      	mov	r0, r3
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40023800 	.word	0x40023800
 800616c:	0801fac4 	.word	0x0801fac4

08006170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e07b      	b.n	800627a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	2b00      	cmp	r3, #0
 8006188:	d108      	bne.n	800619c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006192:	d009      	beq.n	80061a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	61da      	str	r2, [r3, #28]
 800619a:	e005      	b.n	80061a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fd fefa 	bl	8003fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622c:	ea42 0103 	orr.w	r1, r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006234:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	0c1b      	lsrs	r3, r3, #16
 8006246:	f003 0104 	and.w	r1, r3, #4
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	f003 0210 	and.w	r2, r3, #16
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006268:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b08c      	sub	sp, #48	; 0x30
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	607a      	str	r2, [r7, #4]
 800628e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006290:	2301      	movs	r3, #1
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x26>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e18a      	b.n	80065be <HAL_SPI_TransmitReceive+0x33c>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062b0:	f7fe fb76 	bl	80049a0 <HAL_GetTick>
 80062b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062c6:	887b      	ldrh	r3, [r7, #2]
 80062c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d00f      	beq.n	80062f2 <HAL_SPI_TransmitReceive+0x70>
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062d8:	d107      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x68>
 80062e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d003      	beq.n	80062f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062ea:	2302      	movs	r3, #2
 80062ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062f0:	e15b      	b.n	80065aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_SPI_TransmitReceive+0x82>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_SPI_TransmitReceive+0x82>
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d103      	bne.n	800630c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800630a:	e14e      	b.n	80065aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b04      	cmp	r3, #4
 8006316:	d003      	beq.n	8006320 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2205      	movs	r2, #5
 800631c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	887a      	ldrh	r2, [r7, #2]
 8006330:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	887a      	ldrh	r2, [r7, #2]
 8006336:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	887a      	ldrh	r2, [r7, #2]
 8006342:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	887a      	ldrh	r2, [r7, #2]
 8006348:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b40      	cmp	r3, #64	; 0x40
 8006362:	d007      	beq.n	8006374 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006372:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800637c:	d178      	bne.n	8006470 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_SPI_TransmitReceive+0x10a>
 8006386:	8b7b      	ldrh	r3, [r7, #26]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d166      	bne.n	800645a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	881a      	ldrh	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	1c9a      	adds	r2, r3, #2
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063b0:	e053      	b.n	800645a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d11b      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x176>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_SPI_TransmitReceive+0x176>
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d113      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	881a      	ldrh	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	1c9a      	adds	r2, r3, #2
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b01      	cmp	r3, #1
 8006404:	d119      	bne.n	800643a <HAL_SPI_TransmitReceive+0x1b8>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d014      	beq.n	800643a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	b292      	uxth	r2, r2
 800641c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	1c9a      	adds	r2, r3, #2
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006436:	2301      	movs	r3, #1
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800643a:	f7fe fab1 	bl	80049a0 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006446:	429a      	cmp	r2, r3
 8006448:	d807      	bhi.n	800645a <HAL_SPI_TransmitReceive+0x1d8>
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006450:	d003      	beq.n	800645a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006458:	e0a7      	b.n	80065aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1a6      	bne.n	80063b2 <HAL_SPI_TransmitReceive+0x130>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1a1      	bne.n	80063b2 <HAL_SPI_TransmitReceive+0x130>
 800646e:	e07c      	b.n	800656a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_SPI_TransmitReceive+0x1fc>
 8006478:	8b7b      	ldrh	r3, [r7, #26]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d16b      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064a4:	e057      	b.n	8006556 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d11c      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x26c>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d017      	beq.n	80064ee <HAL_SPI_TransmitReceive+0x26c>
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d114      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	330c      	adds	r3, #12
 80064ce:	7812      	ldrb	r2, [r2, #0]
 80064d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d119      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x2ae>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d014      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800652c:	2301      	movs	r3, #1
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006530:	f7fe fa36 	bl	80049a0 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800653c:	429a      	cmp	r2, r3
 800653e:	d803      	bhi.n	8006548 <HAL_SPI_TransmitReceive+0x2c6>
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d102      	bne.n	800654e <HAL_SPI_TransmitReceive+0x2cc>
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006554:	e029      	b.n	80065aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1a2      	bne.n	80064a6 <HAL_SPI_TransmitReceive+0x224>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d19d      	bne.n	80064a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800656a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800656c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 f9d0 	bl	8006914 <SPI_EndRxTxTransaction>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d006      	beq.n	8006588 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006586:	e010      	b.n	80065aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	e000      	b.n	80065aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80065a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3730      	adds	r7, #48	; 0x30
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	099b      	lsrs	r3, r3, #6
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10f      	bne.n	800660c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	099b      	lsrs	r3, r3, #6
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d004      	beq.n	800660c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4798      	blx	r3
    return;
 800660a:	e0d7      	b.n	80067bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <HAL_SPI_IRQHandler+0x66>
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	09db      	lsrs	r3, r3, #7
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	4798      	blx	r3
    return;
 800662c:	e0c6      	b.n	80067bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10c      	bne.n	8006654 <HAL_SPI_IRQHandler+0x8c>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	099b      	lsrs	r3, r3, #6
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	0a1b      	lsrs	r3, r3, #8
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80b4 	beq.w	80067bc <HAL_SPI_IRQHandler+0x1f4>
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80ad 	beq.w	80067bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	099b      	lsrs	r3, r3, #6
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d023      	beq.n	80066b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b03      	cmp	r3, #3
 8006678:	d011      	beq.n	800669e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f043 0204 	orr.w	r2, r3, #4
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	e00b      	b.n	80066b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	693b      	ldr	r3, [r7, #16]
        return;
 80066b4:	e082      	b.n	80067bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d014      	beq.n	80066ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c6:	f043 0201 	orr.w	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00c      	beq.n	8006712 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fc:	f043 0208 	orr.w	r2, r3, #8
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006704:	2300      	movs	r3, #0
 8006706:	60bb      	str	r3, [r7, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006716:	2b00      	cmp	r3, #0
 8006718:	d04f      	beq.n	80067ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006728:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <HAL_SPI_IRQHandler+0x17e>
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d034      	beq.n	80067b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0203 	bic.w	r2, r2, #3
 8006754:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d011      	beq.n	8006782 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006762:	4a18      	ldr	r2, [pc, #96]	; (80067c4 <HAL_SPI_IRQHandler+0x1fc>)
 8006764:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fc5e 	bl	800502c <HAL_DMA_Abort_IT>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	4a0d      	ldr	r2, [pc, #52]	; (80067c4 <HAL_SPI_IRQHandler+0x1fc>)
 8006790:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe fc48 	bl	800502c <HAL_DMA_Abort_IT>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80067ae:	e003      	b.n	80067b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f809 	bl	80067c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80067b6:	e000      	b.n	80067ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80067b8:	bf00      	nop
    return;
 80067ba:	bf00      	nop
  }
}
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	080067dd 	.word	0x080067dd

080067c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f7ff ffe6 	bl	80067c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006814:	f7fe f8c4 	bl	80049a0 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	4413      	add	r3, r2
 8006822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006824:	f7fe f8bc 	bl	80049a0 <HAL_GetTick>
 8006828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800682a:	4b39      	ldr	r3, [pc, #228]	; (8006910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	015b      	lsls	r3, r3, #5
 8006830:	0d1b      	lsrs	r3, r3, #20
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	fb02 f303 	mul.w	r3, r2, r3
 8006838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800683a:	e054      	b.n	80068e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006842:	d050      	beq.n	80068e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006844:	f7fe f8ac 	bl	80049a0 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	429a      	cmp	r2, r3
 8006852:	d902      	bls.n	800685a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d13d      	bne.n	80068d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006872:	d111      	bne.n	8006898 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687c:	d004      	beq.n	8006888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006886:	d107      	bne.n	8006898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a0:	d10f      	bne.n	80068c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e017      	b.n	8006906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4013      	ands	r3, r2
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	bf0c      	ite	eq
 80068f6:	2301      	moveq	r3, #1
 80068f8:	2300      	movne	r3, #0
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	429a      	cmp	r2, r3
 8006902:	d19b      	bne.n	800683c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3720      	adds	r7, #32
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000030 	.word	0x20000030

08006914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006920:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <SPI_EndRxTxTransaction+0x7c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <SPI_EndRxTxTransaction+0x80>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	0d5b      	lsrs	r3, r3, #21
 800692c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800693e:	d112      	bne.n	8006966 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2200      	movs	r2, #0
 8006948:	2180      	movs	r1, #128	; 0x80
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff ff5a 	bl	8006804 <SPI_WaitFlagStateUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	f043 0220 	orr.w	r2, r3, #32
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e00f      	b.n	8006986 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	3b01      	subs	r3, #1
 8006970:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697c:	2b80      	cmp	r3, #128	; 0x80
 800697e:	d0f2      	beq.n	8006966 <SPI_EndRxTxTransaction+0x52>
 8006980:	e000      	b.n	8006984 <SPI_EndRxTxTransaction+0x70>
        break;
 8006982:	bf00      	nop
  }

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20000030 	.word	0x20000030
 8006994:	165e9f81 	.word	0x165e9f81

08006998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e03f      	b.n	8006a2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fd feaa 	bl	8004718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2224      	movs	r2, #36	; 0x24
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 ff53 	bl	8007888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695a      	ldr	r2, [r3, #20]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08c      	sub	sp, #48	; 0x30
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d165      	bne.n	8006b1a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <HAL_UART_Transmit_DMA+0x26>
 8006a54:	88fb      	ldrh	r3, [r7, #6]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e05e      	b.n	8006b1c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_UART_Transmit_DMA+0x38>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e057      	b.n	8006b1c <HAL_UART_Transmit_DMA+0xe8>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	88fa      	ldrh	r2, [r7, #6]
 8006a84:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2221      	movs	r2, #33	; 0x21
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a98:	4a22      	ldr	r2, [pc, #136]	; (8006b24 <HAL_UART_Transmit_DMA+0xf0>)
 8006a9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa0:	4a21      	ldr	r2, [pc, #132]	; (8006b28 <HAL_UART_Transmit_DMA+0xf4>)
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa8:	4a20      	ldr	r2, [pc, #128]	; (8006b2c <HAL_UART_Transmit_DMA+0xf8>)
 8006aaa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006ab4:	f107 0308 	add.w	r3, r7, #8
 8006ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac0:	6819      	ldr	r1, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	461a      	mov	r2, r3
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	f7fe f9e6 	bl	8004e9c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ad8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3314      	adds	r3, #20
 8006ae8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	617b      	str	r3, [r7, #20]
   return(result);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3314      	adds	r3, #20
 8006b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b02:	627a      	str	r2, [r7, #36]	; 0x24
 8006b04:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6a39      	ldr	r1, [r7, #32]
 8006b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e000      	b.n	8006b1c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006b1a:	2302      	movs	r3, #2
  }
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3730      	adds	r7, #48	; 0x30
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	08007129 	.word	0x08007129
 8006b28:	080071c3 	.word	0x080071c3
 8006b2c:	0800733b 	.word	0x0800733b

08006b30 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d11d      	bne.n	8006b86 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <HAL_UART_Receive_DMA+0x26>
 8006b50:	88fb      	ldrh	r3, [r7, #6]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e016      	b.n	8006b88 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_UART_Receive_DMA+0x38>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e00f      	b.n	8006b88 <HAL_UART_Receive_DMA+0x58>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fc27 	bl	80073d0 <UART_Start_Receive_DMA>
 8006b82:	4603      	mov	r3, r0
 8006b84:	e000      	b.n	8006b88 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b86:	2302      	movs	r3, #2
  }
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b0ba      	sub	sp, #232	; 0xe8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x66>
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fd8f 	bl	8007712 <UART_Receive_IT>
      return;
 8006bf4:	e256      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80de 	beq.w	8006dbc <HAL_UART_IRQHandler+0x22c>
 8006c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80d1 	beq.w	8006dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <HAL_UART_IRQHandler+0xae>
 8006c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f043 0201 	orr.w	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <HAL_UART_IRQHandler+0xd2>
 8006c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	f043 0202 	orr.w	r2, r3, #2
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <HAL_UART_IRQHandler+0xf6>
 8006c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	f043 0204 	orr.w	r2, r3, #4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d011      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x126>
 8006c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d105      	bne.n	8006caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	f043 0208 	orr.w	r2, r3, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 81ed 	beq.w	800709a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_UART_IRQHandler+0x14e>
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fd1a 	bl	8007712 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <HAL_UART_IRQHandler+0x17a>
 8006d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d04f      	beq.n	8006daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fc22 	bl	8007554 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b40      	cmp	r3, #64	; 0x40
 8006d1c:	d141      	bne.n	8006da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3314      	adds	r3, #20
 8006d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3314      	adds	r3, #20
 8006d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1d9      	bne.n	8006d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d013      	beq.n	8006d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	4a7d      	ldr	r2, [pc, #500]	; (8006f6c <HAL_UART_IRQHandler+0x3dc>)
 8006d78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe f954 	bl	800502c <HAL_DMA_Abort_IT>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d016      	beq.n	8006db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d98:	e00e      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f9ae 	bl	80070fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da0:	e00a      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f9aa 	bl	80070fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da8:	e006      	b.n	8006db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f9a6 	bl	80070fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006db6:	e170      	b.n	800709a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db8:	bf00      	nop
    return;
 8006dba:	e16e      	b.n	800709a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	f040 814a 	bne.w	800705a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8143 	beq.w	800705a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 813c 	beq.w	800705a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	f040 80b4 	bne.w	8006f70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 8140 	beq.w	800709e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e26:	429a      	cmp	r2, r3
 8006e28:	f080 8139 	bcs.w	800709e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3e:	f000 8088 	beq.w	8006f52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1d9      	bne.n	8006e42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3314      	adds	r3, #20
 8006e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3314      	adds	r3, #20
 8006eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e1      	bne.n	8006e8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3314      	adds	r3, #20
 8006eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e3      	bne.n	8006eca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f22:	f023 0310 	bic.w	r3, r3, #16
 8006f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	330c      	adds	r3, #12
 8006f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f34:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e3      	bne.n	8006f10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fd fffd 	bl	8004f4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f8d4 	bl	8007110 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f68:	e099      	b.n	800709e <HAL_UART_IRQHandler+0x50e>
 8006f6a:	bf00      	nop
 8006f6c:	0800761b 	.word	0x0800761b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 808b 	beq.w	80070a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 8086 	beq.w	80070a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006fba:	647a      	str	r2, [r7, #68]	; 0x44
 8006fbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e3      	bne.n	8006f96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3314      	adds	r3, #20
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	f023 0301 	bic.w	r3, r3, #1
 8006fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3314      	adds	r3, #20
 8006fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e3      	bne.n	8006fce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	60fb      	str	r3, [r7, #12]
   return(result);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0310 	bic.w	r3, r3, #16
 800702a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007038:	61fa      	str	r2, [r7, #28]
 800703a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	69b9      	ldr	r1, [r7, #24]
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	617b      	str	r3, [r7, #20]
   return(result);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e3      	bne.n	8007014 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800704c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f85c 	bl	8007110 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007058:	e023      	b.n	80070a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800705a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <HAL_UART_IRQHandler+0x4ea>
 8007066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800706a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fae5 	bl	8007642 <UART_Transmit_IT>
    return;
 8007078:	e014      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <HAL_UART_IRQHandler+0x514>
 8007086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb25 	bl	80076e2 <UART_EndTransmit_IT>
    return;
 8007098:	e004      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
    return;
 800709a:	bf00      	nop
 800709c:	e002      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
      return;
 800709e:	bf00      	nop
 80070a0:	e000      	b.n	80070a4 <HAL_UART_IRQHandler+0x514>
      return;
 80070a2:	bf00      	nop
  }
}
 80070a4:	37e8      	adds	r7, #232	; 0xe8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop

080070ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b090      	sub	sp, #64	; 0x40
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007140:	2b00      	cmp	r3, #0
 8007142:	d137      	bne.n	80071b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007146:	2200      	movs	r2, #0
 8007148:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3314      	adds	r3, #20
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	623b      	str	r3, [r7, #32]
   return(result);
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007160:	63bb      	str	r3, [r7, #56]	; 0x38
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3314      	adds	r3, #20
 8007168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716a:	633a      	str	r2, [r7, #48]	; 0x30
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e5      	bne.n	800714a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800717e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	330c      	adds	r3, #12
 8007184:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	60fb      	str	r3, [r7, #12]
   return(result);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007194:	637b      	str	r3, [r7, #52]	; 0x34
 8007196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	330c      	adds	r3, #12
 800719c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800719e:	61fa      	str	r2, [r7, #28]
 80071a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	69b9      	ldr	r1, [r7, #24]
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	617b      	str	r3, [r7, #20]
   return(result);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e5      	bne.n	800717e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071b2:	e002      	b.n	80071ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80071b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80071b6:	f7ff ff79 	bl	80070ac <HAL_UART_TxCpltCallback>
}
 80071ba:	bf00      	nop
 80071bc:	3740      	adds	r7, #64	; 0x40
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f7ff ff75 	bl	80070c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b09c      	sub	sp, #112	; 0x70
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d172      	bne.n	80072e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80071fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071fc:	2200      	movs	r2, #0
 80071fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	330c      	adds	r3, #12
 8007206:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007216:	66bb      	str	r3, [r7, #104]	; 0x68
 8007218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007220:	65ba      	str	r2, [r7, #88]	; 0x58
 8007222:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007226:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800722e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e5      	bne.n	8007200 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3314      	adds	r3, #20
 800723a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007246:	f023 0301 	bic.w	r3, r3, #1
 800724a:	667b      	str	r3, [r7, #100]	; 0x64
 800724c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3314      	adds	r3, #20
 8007252:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007254:	647a      	str	r2, [r7, #68]	; 0x44
 8007256:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800725a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e5      	bne.n	8007234 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3314      	adds	r3, #20
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	623b      	str	r3, [r7, #32]
   return(result);
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727e:	663b      	str	r3, [r7, #96]	; 0x60
 8007280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3314      	adds	r3, #20
 8007286:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007288:	633a      	str	r2, [r7, #48]	; 0x30
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800728e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e5      	bne.n	8007268 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800729c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729e:	2220      	movs	r2, #32
 80072a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d119      	bne.n	80072e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0310 	bic.w	r3, r3, #16
 80072c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	330c      	adds	r3, #12
 80072ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072cc:	61fa      	str	r2, [r7, #28]
 80072ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	69b9      	ldr	r1, [r7, #24]
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	617b      	str	r3, [r7, #20]
   return(result);
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e5      	bne.n	80072ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d106      	bne.n	80072f6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ec:	4619      	mov	r1, r3
 80072ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072f0:	f7ff ff0e 	bl	8007110 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072f4:	e002      	b.n	80072fc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80072f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072f8:	f7ff feec 	bl	80070d4 <HAL_UART_RxCpltCallback>
}
 80072fc:	bf00      	nop
 80072fe:	3770      	adds	r7, #112	; 0x70
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	2b01      	cmp	r3, #1
 8007318:	d108      	bne.n	800732c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	b29b      	uxth	r3, r3
 8007322:	4619      	mov	r1, r3
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff fef3 	bl	8007110 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800732a:	e002      	b.n	8007332 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f7ff fedb 	bl	80070e8 <HAL_UART_RxHalfCpltCallback>
}
 8007332:	bf00      	nop
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007356:	2b80      	cmp	r3, #128	; 0x80
 8007358:	bf0c      	ite	eq
 800735a:	2301      	moveq	r3, #1
 800735c:	2300      	movne	r3, #0
 800735e:	b2db      	uxtb	r3, r3
 8007360:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b21      	cmp	r3, #33	; 0x21
 800736c:	d108      	bne.n	8007380 <UART_DMAError+0x46>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d005      	beq.n	8007380 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2200      	movs	r2, #0
 8007378:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800737a:	68b8      	ldr	r0, [r7, #8]
 800737c:	f000 f8c2 	bl	8007504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b40      	cmp	r3, #64	; 0x40
 800738c:	bf0c      	ite	eq
 800738e:	2301      	moveq	r3, #1
 8007390:	2300      	movne	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b22      	cmp	r3, #34	; 0x22
 80073a0:	d108      	bne.n	80073b4 <UART_DMAError+0x7a>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2200      	movs	r2, #0
 80073ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80073ae:	68b8      	ldr	r0, [r7, #8]
 80073b0:	f000 f8d0 	bl	8007554 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	f043 0210 	orr.w	r2, r3, #16
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073c0:	68b8      	ldr	r0, [r7, #8]
 80073c2:	f7ff fe9b 	bl	80070fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073c6:	bf00      	nop
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b098      	sub	sp, #96	; 0x60
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	4613      	mov	r3, r2
 80073dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	88fa      	ldrh	r2, [r7, #6]
 80073e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2222      	movs	r2, #34	; 0x22
 80073f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	4a3e      	ldr	r2, [pc, #248]	; (80074f8 <UART_Start_Receive_DMA+0x128>)
 80073fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007404:	4a3d      	ldr	r2, [pc, #244]	; (80074fc <UART_Start_Receive_DMA+0x12c>)
 8007406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740c:	4a3c      	ldr	r2, [pc, #240]	; (8007500 <UART_Start_Receive_DMA+0x130>)
 800740e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	2200      	movs	r2, #0
 8007416:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007418:	f107 0308 	add.w	r3, r7, #8
 800741c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3304      	adds	r3, #4
 8007428:	4619      	mov	r1, r3
 800742a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	f7fd fd34 	bl	8004e9c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007434:	2300      	movs	r3, #0
 8007436:	613b      	str	r3, [r7, #16]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	613b      	str	r3, [r7, #16]
 8007448:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007468:	65bb      	str	r3, [r7, #88]	; 0x58
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	330c      	adds	r3, #12
 8007470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007472:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007474:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e5      	bne.n	8007452 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3314      	adds	r3, #20
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	f043 0301 	orr.w	r3, r3, #1
 800749c:	657b      	str	r3, [r7, #84]	; 0x54
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3314      	adds	r3, #20
 80074a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80074ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e5      	bne.n	8007486 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3314      	adds	r3, #20
 80074c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d0:	653b      	str	r3, [r7, #80]	; 0x50
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3314      	adds	r3, #20
 80074d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074da:	627a      	str	r2, [r7, #36]	; 0x24
 80074dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6a39      	ldr	r1, [r7, #32]
 80074e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e5      	bne.n	80074ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3760      	adds	r7, #96	; 0x60
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	080071df 	.word	0x080071df
 80074fc:	08007305 	.word	0x08007305
 8007500:	0800733b 	.word	0x0800733b

08007504 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007504:	b480      	push	{r7}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	330c      	adds	r3, #12
 8007512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	60bb      	str	r3, [r7, #8]
   return(result);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	61ba      	str	r2, [r7, #24]
 800752e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6979      	ldr	r1, [r7, #20]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	613b      	str	r3, [r7, #16]
   return(result);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e5      	bne.n	800750c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007548:	bf00      	nop
 800754a:	3724      	adds	r7, #36	; 0x24
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b095      	sub	sp, #84	; 0x54
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	330c      	adds	r3, #12
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	330c      	adds	r3, #12
 800757a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800757c:	643a      	str	r2, [r7, #64]	; 0x40
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e5      	bne.n	800755c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3314      	adds	r3, #20
 8007596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	61fb      	str	r3, [r7, #28]
   return(result);
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3314      	adds	r3, #20
 80075ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e5      	bne.n	8007590 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d119      	bne.n	8007600 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	60bb      	str	r3, [r7, #8]
   return(result);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f023 0310 	bic.w	r3, r3, #16
 80075e2:	647b      	str	r3, [r7, #68]	; 0x44
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	330c      	adds	r3, #12
 80075ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ec:	61ba      	str	r2, [r7, #24]
 80075ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6979      	ldr	r1, [r7, #20]
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	613b      	str	r3, [r7, #16]
   return(result);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e5      	bne.n	80075cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800760e:	bf00      	nop
 8007610:	3754      	adds	r7, #84	; 0x54
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7ff fd61 	bl	80070fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763a:	bf00      	nop
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b21      	cmp	r3, #33	; 0x21
 8007654:	d13e      	bne.n	80076d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765e:	d114      	bne.n	800768a <UART_Transmit_IT+0x48>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d110      	bne.n	800768a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800767c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	1c9a      	adds	r2, r3, #2
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	621a      	str	r2, [r3, #32]
 8007688:	e008      	b.n	800769c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	1c59      	adds	r1, r3, #1
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6211      	str	r1, [r2, #32]
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	4619      	mov	r1, r3
 80076aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10f      	bne.n	80076d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e000      	b.n	80076d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff fcd2 	bl	80070ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b08c      	sub	sp, #48	; 0x30
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b22      	cmp	r3, #34	; 0x22
 8007724:	f040 80ab 	bne.w	800787e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007730:	d117      	bne.n	8007762 <UART_Receive_IT+0x50>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d113      	bne.n	8007762 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007750:	b29a      	uxth	r2, r3
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	1c9a      	adds	r2, r3, #2
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	629a      	str	r2, [r3, #40]	; 0x28
 8007760:	e026      	b.n	80077b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007768:	2300      	movs	r3, #0
 800776a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007774:	d007      	beq.n	8007786 <UART_Receive_IT+0x74>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <UART_Receive_IT+0x82>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d106      	bne.n	8007794 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	b2da      	uxtb	r2, r3
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	e008      	b.n	80077a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4619      	mov	r1, r3
 80077be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d15a      	bne.n	800787a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0220 	bic.w	r2, r2, #32
 80077d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695a      	ldr	r2, [r3, #20]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007800:	2b01      	cmp	r3, #1
 8007802:	d135      	bne.n	8007870 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	330c      	adds	r3, #12
 8007810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	613b      	str	r3, [r7, #16]
   return(result);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f023 0310 	bic.w	r3, r3, #16
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	330c      	adds	r3, #12
 8007828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782a:	623a      	str	r2, [r7, #32]
 800782c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	69f9      	ldr	r1, [r7, #28]
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	61bb      	str	r3, [r7, #24]
   return(result);
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e5      	bne.n	800780a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	2b10      	cmp	r3, #16
 800784a:	d10a      	bne.n	8007862 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff fc51 	bl	8007110 <HAL_UARTEx_RxEventCallback>
 800786e:	e002      	b.n	8007876 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff fc2f 	bl	80070d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	e002      	b.n	8007880 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	e000      	b.n	8007880 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800787e:	2302      	movs	r3, #2
  }
}
 8007880:	4618      	mov	r0, r3
 8007882:	3730      	adds	r7, #48	; 0x30
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	b09f      	sub	sp, #124	; 0x7c
 800788e:	af00      	add	r7, sp, #0
 8007890:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800789c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789e:	68d9      	ldr	r1, [r3, #12]
 80078a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	ea40 0301 	orr.w	r3, r0, r1
 80078a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	431a      	orrs	r2, r3
 80078ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	4313      	orrs	r3, r2
 80078c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80078c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078cc:	f021 010c 	bic.w	r1, r1, #12
 80078d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078d6:	430b      	orrs	r3, r1
 80078d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e6:	6999      	ldr	r1, [r3, #24]
 80078e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	ea40 0301 	orr.w	r3, r0, r1
 80078f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4bc5      	ldr	r3, [pc, #788]	; (8007c0c <UART_SetConfig+0x384>)
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d004      	beq.n	8007906 <UART_SetConfig+0x7e>
 80078fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	4bc3      	ldr	r3, [pc, #780]	; (8007c10 <UART_SetConfig+0x388>)
 8007902:	429a      	cmp	r2, r3
 8007904:	d103      	bne.n	800790e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007906:	f7fe fc1f 	bl	8006148 <HAL_RCC_GetPCLK2Freq>
 800790a:	6778      	str	r0, [r7, #116]	; 0x74
 800790c:	e002      	b.n	8007914 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800790e:	f7fe fc07 	bl	8006120 <HAL_RCC_GetPCLK1Freq>
 8007912:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800791c:	f040 80b6 	bne.w	8007a8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007922:	461c      	mov	r4, r3
 8007924:	f04f 0500 	mov.w	r5, #0
 8007928:	4622      	mov	r2, r4
 800792a:	462b      	mov	r3, r5
 800792c:	1891      	adds	r1, r2, r2
 800792e:	6439      	str	r1, [r7, #64]	; 0x40
 8007930:	415b      	adcs	r3, r3
 8007932:	647b      	str	r3, [r7, #68]	; 0x44
 8007934:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007938:	1912      	adds	r2, r2, r4
 800793a:	eb45 0303 	adc.w	r3, r5, r3
 800793e:	f04f 0000 	mov.w	r0, #0
 8007942:	f04f 0100 	mov.w	r1, #0
 8007946:	00d9      	lsls	r1, r3, #3
 8007948:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800794c:	00d0      	lsls	r0, r2, #3
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	1911      	adds	r1, r2, r4
 8007954:	6639      	str	r1, [r7, #96]	; 0x60
 8007956:	416b      	adcs	r3, r5
 8007958:	667b      	str	r3, [r7, #100]	; 0x64
 800795a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	461a      	mov	r2, r3
 8007960:	f04f 0300 	mov.w	r3, #0
 8007964:	1891      	adds	r1, r2, r2
 8007966:	63b9      	str	r1, [r7, #56]	; 0x38
 8007968:	415b      	adcs	r3, r3
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800796c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007970:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007974:	f7f9 f9a0 	bl	8000cb8 <__aeabi_uldivmod>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4ba5      	ldr	r3, [pc, #660]	; (8007c14 <UART_SetConfig+0x38c>)
 800797e:	fba3 2302 	umull	r2, r3, r3, r2
 8007982:	095b      	lsrs	r3, r3, #5
 8007984:	011e      	lsls	r6, r3, #4
 8007986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007988:	461c      	mov	r4, r3
 800798a:	f04f 0500 	mov.w	r5, #0
 800798e:	4622      	mov	r2, r4
 8007990:	462b      	mov	r3, r5
 8007992:	1891      	adds	r1, r2, r2
 8007994:	6339      	str	r1, [r7, #48]	; 0x30
 8007996:	415b      	adcs	r3, r3
 8007998:	637b      	str	r3, [r7, #52]	; 0x34
 800799a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800799e:	1912      	adds	r2, r2, r4
 80079a0:	eb45 0303 	adc.w	r3, r5, r3
 80079a4:	f04f 0000 	mov.w	r0, #0
 80079a8:	f04f 0100 	mov.w	r1, #0
 80079ac:	00d9      	lsls	r1, r3, #3
 80079ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079b2:	00d0      	lsls	r0, r2, #3
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	1911      	adds	r1, r2, r4
 80079ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80079bc:	416b      	adcs	r3, r5
 80079be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	461a      	mov	r2, r3
 80079c6:	f04f 0300 	mov.w	r3, #0
 80079ca:	1891      	adds	r1, r2, r2
 80079cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80079ce:	415b      	adcs	r3, r3
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80079da:	f7f9 f96d 	bl	8000cb8 <__aeabi_uldivmod>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4b8c      	ldr	r3, [pc, #560]	; (8007c14 <UART_SetConfig+0x38c>)
 80079e4:	fba3 1302 	umull	r1, r3, r3, r2
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	2164      	movs	r1, #100	; 0x64
 80079ec:	fb01 f303 	mul.w	r3, r1, r3
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	3332      	adds	r3, #50	; 0x32
 80079f6:	4a87      	ldr	r2, [pc, #540]	; (8007c14 <UART_SetConfig+0x38c>)
 80079f8:	fba2 2303 	umull	r2, r3, r2, r3
 80079fc:	095b      	lsrs	r3, r3, #5
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a04:	441e      	add	r6, r3
 8007a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f04f 0100 	mov.w	r1, #0
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	1894      	adds	r4, r2, r2
 8007a14:	623c      	str	r4, [r7, #32]
 8007a16:	415b      	adcs	r3, r3
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
 8007a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a1e:	1812      	adds	r2, r2, r0
 8007a20:	eb41 0303 	adc.w	r3, r1, r3
 8007a24:	f04f 0400 	mov.w	r4, #0
 8007a28:	f04f 0500 	mov.w	r5, #0
 8007a2c:	00dd      	lsls	r5, r3, #3
 8007a2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a32:	00d4      	lsls	r4, r2, #3
 8007a34:	4622      	mov	r2, r4
 8007a36:	462b      	mov	r3, r5
 8007a38:	1814      	adds	r4, r2, r0
 8007a3a:	653c      	str	r4, [r7, #80]	; 0x50
 8007a3c:	414b      	adcs	r3, r1
 8007a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	461a      	mov	r2, r3
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	1891      	adds	r1, r2, r2
 8007a4c:	61b9      	str	r1, [r7, #24]
 8007a4e:	415b      	adcs	r3, r3
 8007a50:	61fb      	str	r3, [r7, #28]
 8007a52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a5a:	f7f9 f92d 	bl	8000cb8 <__aeabi_uldivmod>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4b6c      	ldr	r3, [pc, #432]	; (8007c14 <UART_SetConfig+0x38c>)
 8007a64:	fba3 1302 	umull	r1, r3, r3, r2
 8007a68:	095b      	lsrs	r3, r3, #5
 8007a6a:	2164      	movs	r1, #100	; 0x64
 8007a6c:	fb01 f303 	mul.w	r3, r1, r3
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	3332      	adds	r3, #50	; 0x32
 8007a76:	4a67      	ldr	r2, [pc, #412]	; (8007c14 <UART_SetConfig+0x38c>)
 8007a78:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7c:	095b      	lsrs	r3, r3, #5
 8007a7e:	f003 0207 	and.w	r2, r3, #7
 8007a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4432      	add	r2, r6
 8007a88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a8a:	e0b9      	b.n	8007c00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a8e:	461c      	mov	r4, r3
 8007a90:	f04f 0500 	mov.w	r5, #0
 8007a94:	4622      	mov	r2, r4
 8007a96:	462b      	mov	r3, r5
 8007a98:	1891      	adds	r1, r2, r2
 8007a9a:	6139      	str	r1, [r7, #16]
 8007a9c:	415b      	adcs	r3, r3
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007aa4:	1912      	adds	r2, r2, r4
 8007aa6:	eb45 0303 	adc.w	r3, r5, r3
 8007aaa:	f04f 0000 	mov.w	r0, #0
 8007aae:	f04f 0100 	mov.w	r1, #0
 8007ab2:	00d9      	lsls	r1, r3, #3
 8007ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ab8:	00d0      	lsls	r0, r2, #3
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	eb12 0804 	adds.w	r8, r2, r4
 8007ac2:	eb43 0905 	adc.w	r9, r3, r5
 8007ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f04f 0100 	mov.w	r1, #0
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	f04f 0300 	mov.w	r3, #0
 8007ad8:	008b      	lsls	r3, r1, #2
 8007ada:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ade:	0082      	lsls	r2, r0, #2
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	f7f9 f8e8 	bl	8000cb8 <__aeabi_uldivmod>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4b49      	ldr	r3, [pc, #292]	; (8007c14 <UART_SetConfig+0x38c>)
 8007aee:	fba3 2302 	umull	r2, r3, r3, r2
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	011e      	lsls	r6, r3, #4
 8007af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007af8:	4618      	mov	r0, r3
 8007afa:	f04f 0100 	mov.w	r1, #0
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	1894      	adds	r4, r2, r2
 8007b04:	60bc      	str	r4, [r7, #8]
 8007b06:	415b      	adcs	r3, r3
 8007b08:	60fb      	str	r3, [r7, #12]
 8007b0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b0e:	1812      	adds	r2, r2, r0
 8007b10:	eb41 0303 	adc.w	r3, r1, r3
 8007b14:	f04f 0400 	mov.w	r4, #0
 8007b18:	f04f 0500 	mov.w	r5, #0
 8007b1c:	00dd      	lsls	r5, r3, #3
 8007b1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b22:	00d4      	lsls	r4, r2, #3
 8007b24:	4622      	mov	r2, r4
 8007b26:	462b      	mov	r3, r5
 8007b28:	1814      	adds	r4, r2, r0
 8007b2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007b2c:	414b      	adcs	r3, r1
 8007b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f04f 0100 	mov.w	r1, #0
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	008b      	lsls	r3, r1, #2
 8007b44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b48:	0082      	lsls	r2, r0, #2
 8007b4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b4e:	f7f9 f8b3 	bl	8000cb8 <__aeabi_uldivmod>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4b2f      	ldr	r3, [pc, #188]	; (8007c14 <UART_SetConfig+0x38c>)
 8007b58:	fba3 1302 	umull	r1, r3, r3, r2
 8007b5c:	095b      	lsrs	r3, r3, #5
 8007b5e:	2164      	movs	r1, #100	; 0x64
 8007b60:	fb01 f303 	mul.w	r3, r1, r3
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	3332      	adds	r3, #50	; 0x32
 8007b6a:	4a2a      	ldr	r2, [pc, #168]	; (8007c14 <UART_SetConfig+0x38c>)
 8007b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b76:	441e      	add	r6, r3
 8007b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f04f 0100 	mov.w	r1, #0
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	1894      	adds	r4, r2, r2
 8007b86:	603c      	str	r4, [r7, #0]
 8007b88:	415b      	adcs	r3, r3
 8007b8a:	607b      	str	r3, [r7, #4]
 8007b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b90:	1812      	adds	r2, r2, r0
 8007b92:	eb41 0303 	adc.w	r3, r1, r3
 8007b96:	f04f 0400 	mov.w	r4, #0
 8007b9a:	f04f 0500 	mov.w	r5, #0
 8007b9e:	00dd      	lsls	r5, r3, #3
 8007ba0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ba4:	00d4      	lsls	r4, r2, #3
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	462b      	mov	r3, r5
 8007baa:	eb12 0a00 	adds.w	sl, r2, r0
 8007bae:	eb43 0b01 	adc.w	fp, r3, r1
 8007bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f04f 0100 	mov.w	r1, #0
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	008b      	lsls	r3, r1, #2
 8007bc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007bca:	0082      	lsls	r2, r0, #2
 8007bcc:	4650      	mov	r0, sl
 8007bce:	4659      	mov	r1, fp
 8007bd0:	f7f9 f872 	bl	8000cb8 <__aeabi_uldivmod>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <UART_SetConfig+0x38c>)
 8007bda:	fba3 1302 	umull	r1, r3, r3, r2
 8007bde:	095b      	lsrs	r3, r3, #5
 8007be0:	2164      	movs	r1, #100	; 0x64
 8007be2:	fb01 f303 	mul.w	r3, r1, r3
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	3332      	adds	r3, #50	; 0x32
 8007bec:	4a09      	ldr	r2, [pc, #36]	; (8007c14 <UART_SetConfig+0x38c>)
 8007bee:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	f003 020f 	and.w	r2, r3, #15
 8007bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4432      	add	r2, r6
 8007bfe:	609a      	str	r2, [r3, #8]
}
 8007c00:	bf00      	nop
 8007c02:	377c      	adds	r7, #124	; 0x7c
 8007c04:	46bd      	mov	sp, r7
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	bf00      	nop
 8007c0c:	40011000 	.word	0x40011000
 8007c10:	40011400 	.word	0x40011400
 8007c14:	51eb851f 	.word	0x51eb851f

08007c18 <atof>:
 8007c18:	2100      	movs	r1, #0
 8007c1a:	f001 bd05 	b.w	8009628 <strtod>

08007c1e <atoi>:
 8007c1e:	220a      	movs	r2, #10
 8007c20:	2100      	movs	r1, #0
 8007c22:	f001 bdef 	b.w	8009804 <strtol>
	...

08007c28 <__errno>:
 8007c28:	4b01      	ldr	r3, [pc, #4]	; (8007c30 <__errno+0x8>)
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	2000003c 	.word	0x2000003c

08007c34 <__libc_init_array>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	4d0d      	ldr	r5, [pc, #52]	; (8007c6c <__libc_init_array+0x38>)
 8007c38:	4c0d      	ldr	r4, [pc, #52]	; (8007c70 <__libc_init_array+0x3c>)
 8007c3a:	1b64      	subs	r4, r4, r5
 8007c3c:	10a4      	asrs	r4, r4, #2
 8007c3e:	2600      	movs	r6, #0
 8007c40:	42a6      	cmp	r6, r4
 8007c42:	d109      	bne.n	8007c58 <__libc_init_array+0x24>
 8007c44:	4d0b      	ldr	r5, [pc, #44]	; (8007c74 <__libc_init_array+0x40>)
 8007c46:	4c0c      	ldr	r4, [pc, #48]	; (8007c78 <__libc_init_array+0x44>)
 8007c48:	f004 fcb8 	bl	800c5bc <_init>
 8007c4c:	1b64      	subs	r4, r4, r5
 8007c4e:	10a4      	asrs	r4, r4, #2
 8007c50:	2600      	movs	r6, #0
 8007c52:	42a6      	cmp	r6, r4
 8007c54:	d105      	bne.n	8007c62 <__libc_init_array+0x2e>
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5c:	4798      	blx	r3
 8007c5e:	3601      	adds	r6, #1
 8007c60:	e7ee      	b.n	8007c40 <__libc_init_array+0xc>
 8007c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c66:	4798      	blx	r3
 8007c68:	3601      	adds	r6, #1
 8007c6a:	e7f2      	b.n	8007c52 <__libc_init_array+0x1e>
 8007c6c:	0801fff0 	.word	0x0801fff0
 8007c70:	0801fff0 	.word	0x0801fff0
 8007c74:	0801fff0 	.word	0x0801fff0
 8007c78:	0801fff4 	.word	0x0801fff4

08007c7c <memset>:
 8007c7c:	4402      	add	r2, r0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d100      	bne.n	8007c86 <memset+0xa>
 8007c84:	4770      	bx	lr
 8007c86:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8a:	e7f9      	b.n	8007c80 <memset+0x4>

08007c8c <__cvt>:
 8007c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	ec55 4b10 	vmov	r4, r5, d0
 8007c94:	2d00      	cmp	r5, #0
 8007c96:	460e      	mov	r6, r1
 8007c98:	4619      	mov	r1, r3
 8007c9a:	462b      	mov	r3, r5
 8007c9c:	bfbb      	ittet	lt
 8007c9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ca2:	461d      	movlt	r5, r3
 8007ca4:	2300      	movge	r3, #0
 8007ca6:	232d      	movlt	r3, #45	; 0x2d
 8007ca8:	700b      	strb	r3, [r1, #0]
 8007caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cb0:	4691      	mov	r9, r2
 8007cb2:	f023 0820 	bic.w	r8, r3, #32
 8007cb6:	bfbc      	itt	lt
 8007cb8:	4622      	movlt	r2, r4
 8007cba:	4614      	movlt	r4, r2
 8007cbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cc0:	d005      	beq.n	8007cce <__cvt+0x42>
 8007cc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007cc6:	d100      	bne.n	8007cca <__cvt+0x3e>
 8007cc8:	3601      	adds	r6, #1
 8007cca:	2102      	movs	r1, #2
 8007ccc:	e000      	b.n	8007cd0 <__cvt+0x44>
 8007cce:	2103      	movs	r1, #3
 8007cd0:	ab03      	add	r3, sp, #12
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	ab02      	add	r3, sp, #8
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	ec45 4b10 	vmov	d0, r4, r5
 8007cdc:	4653      	mov	r3, sl
 8007cde:	4632      	mov	r2, r6
 8007ce0:	f001 fe46 	bl	8009970 <_dtoa_r>
 8007ce4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ce8:	4607      	mov	r7, r0
 8007cea:	d102      	bne.n	8007cf2 <__cvt+0x66>
 8007cec:	f019 0f01 	tst.w	r9, #1
 8007cf0:	d022      	beq.n	8007d38 <__cvt+0xac>
 8007cf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cf6:	eb07 0906 	add.w	r9, r7, r6
 8007cfa:	d110      	bne.n	8007d1e <__cvt+0x92>
 8007cfc:	783b      	ldrb	r3, [r7, #0]
 8007cfe:	2b30      	cmp	r3, #48	; 0x30
 8007d00:	d10a      	bne.n	8007d18 <__cvt+0x8c>
 8007d02:	2200      	movs	r2, #0
 8007d04:	2300      	movs	r3, #0
 8007d06:	4620      	mov	r0, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7f8 fef5 	bl	8000af8 <__aeabi_dcmpeq>
 8007d0e:	b918      	cbnz	r0, 8007d18 <__cvt+0x8c>
 8007d10:	f1c6 0601 	rsb	r6, r6, #1
 8007d14:	f8ca 6000 	str.w	r6, [sl]
 8007d18:	f8da 3000 	ldr.w	r3, [sl]
 8007d1c:	4499      	add	r9, r3
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	4620      	mov	r0, r4
 8007d24:	4629      	mov	r1, r5
 8007d26:	f7f8 fee7 	bl	8000af8 <__aeabi_dcmpeq>
 8007d2a:	b108      	cbz	r0, 8007d30 <__cvt+0xa4>
 8007d2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d30:	2230      	movs	r2, #48	; 0x30
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	454b      	cmp	r3, r9
 8007d36:	d307      	bcc.n	8007d48 <__cvt+0xbc>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d3c:	1bdb      	subs	r3, r3, r7
 8007d3e:	4638      	mov	r0, r7
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	b004      	add	sp, #16
 8007d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d48:	1c59      	adds	r1, r3, #1
 8007d4a:	9103      	str	r1, [sp, #12]
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	e7f0      	b.n	8007d32 <__cvt+0xa6>

08007d50 <__exponent>:
 8007d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d52:	4603      	mov	r3, r0
 8007d54:	2900      	cmp	r1, #0
 8007d56:	bfb8      	it	lt
 8007d58:	4249      	neglt	r1, r1
 8007d5a:	f803 2b02 	strb.w	r2, [r3], #2
 8007d5e:	bfb4      	ite	lt
 8007d60:	222d      	movlt	r2, #45	; 0x2d
 8007d62:	222b      	movge	r2, #43	; 0x2b
 8007d64:	2909      	cmp	r1, #9
 8007d66:	7042      	strb	r2, [r0, #1]
 8007d68:	dd2a      	ble.n	8007dc0 <__exponent+0x70>
 8007d6a:	f10d 0407 	add.w	r4, sp, #7
 8007d6e:	46a4      	mov	ip, r4
 8007d70:	270a      	movs	r7, #10
 8007d72:	46a6      	mov	lr, r4
 8007d74:	460a      	mov	r2, r1
 8007d76:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d7a:	fb07 1516 	mls	r5, r7, r6, r1
 8007d7e:	3530      	adds	r5, #48	; 0x30
 8007d80:	2a63      	cmp	r2, #99	; 0x63
 8007d82:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	dcf1      	bgt.n	8007d72 <__exponent+0x22>
 8007d8e:	3130      	adds	r1, #48	; 0x30
 8007d90:	f1ae 0502 	sub.w	r5, lr, #2
 8007d94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d98:	1c44      	adds	r4, r0, #1
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4561      	cmp	r1, ip
 8007d9e:	d30a      	bcc.n	8007db6 <__exponent+0x66>
 8007da0:	f10d 0209 	add.w	r2, sp, #9
 8007da4:	eba2 020e 	sub.w	r2, r2, lr
 8007da8:	4565      	cmp	r5, ip
 8007daa:	bf88      	it	hi
 8007dac:	2200      	movhi	r2, #0
 8007dae:	4413      	add	r3, r2
 8007db0:	1a18      	subs	r0, r3, r0
 8007db2:	b003      	add	sp, #12
 8007db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007dbe:	e7ed      	b.n	8007d9c <__exponent+0x4c>
 8007dc0:	2330      	movs	r3, #48	; 0x30
 8007dc2:	3130      	adds	r1, #48	; 0x30
 8007dc4:	7083      	strb	r3, [r0, #2]
 8007dc6:	70c1      	strb	r1, [r0, #3]
 8007dc8:	1d03      	adds	r3, r0, #4
 8007dca:	e7f1      	b.n	8007db0 <__exponent+0x60>

08007dcc <_printf_float>:
 8007dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd0:	ed2d 8b02 	vpush	{d8}
 8007dd4:	b08d      	sub	sp, #52	; 0x34
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ddc:	4616      	mov	r6, r2
 8007dde:	461f      	mov	r7, r3
 8007de0:	4605      	mov	r5, r0
 8007de2:	f002 ff33 	bl	800ac4c <_localeconv_r>
 8007de6:	f8d0 a000 	ldr.w	sl, [r0]
 8007dea:	4650      	mov	r0, sl
 8007dec:	f7f8 fa02 	bl	80001f4 <strlen>
 8007df0:	2300      	movs	r3, #0
 8007df2:	930a      	str	r3, [sp, #40]	; 0x28
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	9305      	str	r3, [sp, #20]
 8007df8:	f8d8 3000 	ldr.w	r3, [r8]
 8007dfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e00:	3307      	adds	r3, #7
 8007e02:	f023 0307 	bic.w	r3, r3, #7
 8007e06:	f103 0208 	add.w	r2, r3, #8
 8007e0a:	f8c8 2000 	str.w	r2, [r8]
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e1e:	9307      	str	r3, [sp, #28]
 8007e20:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e24:	ee08 0a10 	vmov	s16, r0
 8007e28:	4b9f      	ldr	r3, [pc, #636]	; (80080a8 <_printf_float+0x2dc>)
 8007e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e32:	f7f8 fe93 	bl	8000b5c <__aeabi_dcmpun>
 8007e36:	bb88      	cbnz	r0, 8007e9c <_printf_float+0xd0>
 8007e38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e3c:	4b9a      	ldr	r3, [pc, #616]	; (80080a8 <_printf_float+0x2dc>)
 8007e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e42:	f7f8 fe6d 	bl	8000b20 <__aeabi_dcmple>
 8007e46:	bb48      	cbnz	r0, 8007e9c <_printf_float+0xd0>
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	4649      	mov	r1, r9
 8007e50:	f7f8 fe5c 	bl	8000b0c <__aeabi_dcmplt>
 8007e54:	b110      	cbz	r0, 8007e5c <_printf_float+0x90>
 8007e56:	232d      	movs	r3, #45	; 0x2d
 8007e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5c:	4b93      	ldr	r3, [pc, #588]	; (80080ac <_printf_float+0x2e0>)
 8007e5e:	4894      	ldr	r0, [pc, #592]	; (80080b0 <_printf_float+0x2e4>)
 8007e60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e64:	bf94      	ite	ls
 8007e66:	4698      	movls	r8, r3
 8007e68:	4680      	movhi	r8, r0
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	6123      	str	r3, [r4, #16]
 8007e6e:	9b05      	ldr	r3, [sp, #20]
 8007e70:	f023 0204 	bic.w	r2, r3, #4
 8007e74:	6022      	str	r2, [r4, #0]
 8007e76:	f04f 0900 	mov.w	r9, #0
 8007e7a:	9700      	str	r7, [sp, #0]
 8007e7c:	4633      	mov	r3, r6
 8007e7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e80:	4621      	mov	r1, r4
 8007e82:	4628      	mov	r0, r5
 8007e84:	f000 f9d8 	bl	8008238 <_printf_common>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	f040 8090 	bne.w	8007fae <_printf_float+0x1e2>
 8007e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e92:	b00d      	add	sp, #52	; 0x34
 8007e94:	ecbd 8b02 	vpop	{d8}
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	464b      	mov	r3, r9
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	f7f8 fe5a 	bl	8000b5c <__aeabi_dcmpun>
 8007ea8:	b140      	cbz	r0, 8007ebc <_printf_float+0xf0>
 8007eaa:	464b      	mov	r3, r9
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bfbc      	itt	lt
 8007eb0:	232d      	movlt	r3, #45	; 0x2d
 8007eb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007eb6:	487f      	ldr	r0, [pc, #508]	; (80080b4 <_printf_float+0x2e8>)
 8007eb8:	4b7f      	ldr	r3, [pc, #508]	; (80080b8 <_printf_float+0x2ec>)
 8007eba:	e7d1      	b.n	8007e60 <_printf_float+0x94>
 8007ebc:	6863      	ldr	r3, [r4, #4]
 8007ebe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ec2:	9206      	str	r2, [sp, #24]
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	d13f      	bne.n	8007f48 <_printf_float+0x17c>
 8007ec8:	2306      	movs	r3, #6
 8007eca:	6063      	str	r3, [r4, #4]
 8007ecc:	9b05      	ldr	r3, [sp, #20]
 8007ece:	6861      	ldr	r1, [r4, #4]
 8007ed0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	9303      	str	r3, [sp, #12]
 8007ed8:	ab0a      	add	r3, sp, #40	; 0x28
 8007eda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ede:	ab09      	add	r3, sp, #36	; 0x24
 8007ee0:	ec49 8b10 	vmov	d0, r8, r9
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	6022      	str	r2, [r4, #0]
 8007ee8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007eec:	4628      	mov	r0, r5
 8007eee:	f7ff fecd 	bl	8007c8c <__cvt>
 8007ef2:	9b06      	ldr	r3, [sp, #24]
 8007ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ef6:	2b47      	cmp	r3, #71	; 0x47
 8007ef8:	4680      	mov	r8, r0
 8007efa:	d108      	bne.n	8007f0e <_printf_float+0x142>
 8007efc:	1cc8      	adds	r0, r1, #3
 8007efe:	db02      	blt.n	8007f06 <_printf_float+0x13a>
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	4299      	cmp	r1, r3
 8007f04:	dd41      	ble.n	8007f8a <_printf_float+0x1be>
 8007f06:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f0a:	fa5f fb8b 	uxtb.w	fp, fp
 8007f0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f12:	d820      	bhi.n	8007f56 <_printf_float+0x18a>
 8007f14:	3901      	subs	r1, #1
 8007f16:	465a      	mov	r2, fp
 8007f18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f1c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f1e:	f7ff ff17 	bl	8007d50 <__exponent>
 8007f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f24:	1813      	adds	r3, r2, r0
 8007f26:	2a01      	cmp	r2, #1
 8007f28:	4681      	mov	r9, r0
 8007f2a:	6123      	str	r3, [r4, #16]
 8007f2c:	dc02      	bgt.n	8007f34 <_printf_float+0x168>
 8007f2e:	6822      	ldr	r2, [r4, #0]
 8007f30:	07d2      	lsls	r2, r2, #31
 8007f32:	d501      	bpl.n	8007f38 <_printf_float+0x16c>
 8007f34:	3301      	adds	r3, #1
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d09c      	beq.n	8007e7a <_printf_float+0xae>
 8007f40:	232d      	movs	r3, #45	; 0x2d
 8007f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f46:	e798      	b.n	8007e7a <_printf_float+0xae>
 8007f48:	9a06      	ldr	r2, [sp, #24]
 8007f4a:	2a47      	cmp	r2, #71	; 0x47
 8007f4c:	d1be      	bne.n	8007ecc <_printf_float+0x100>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1bc      	bne.n	8007ecc <_printf_float+0x100>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e7b9      	b.n	8007eca <_printf_float+0xfe>
 8007f56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f5a:	d118      	bne.n	8007f8e <_printf_float+0x1c2>
 8007f5c:	2900      	cmp	r1, #0
 8007f5e:	6863      	ldr	r3, [r4, #4]
 8007f60:	dd0b      	ble.n	8007f7a <_printf_float+0x1ae>
 8007f62:	6121      	str	r1, [r4, #16]
 8007f64:	b913      	cbnz	r3, 8007f6c <_printf_float+0x1a0>
 8007f66:	6822      	ldr	r2, [r4, #0]
 8007f68:	07d0      	lsls	r0, r2, #31
 8007f6a:	d502      	bpl.n	8007f72 <_printf_float+0x1a6>
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	440b      	add	r3, r1
 8007f70:	6123      	str	r3, [r4, #16]
 8007f72:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f74:	f04f 0900 	mov.w	r9, #0
 8007f78:	e7de      	b.n	8007f38 <_printf_float+0x16c>
 8007f7a:	b913      	cbnz	r3, 8007f82 <_printf_float+0x1b6>
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	07d2      	lsls	r2, r2, #31
 8007f80:	d501      	bpl.n	8007f86 <_printf_float+0x1ba>
 8007f82:	3302      	adds	r3, #2
 8007f84:	e7f4      	b.n	8007f70 <_printf_float+0x1a4>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e7f2      	b.n	8007f70 <_printf_float+0x1a4>
 8007f8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f90:	4299      	cmp	r1, r3
 8007f92:	db05      	blt.n	8007fa0 <_printf_float+0x1d4>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	6121      	str	r1, [r4, #16]
 8007f98:	07d8      	lsls	r0, r3, #31
 8007f9a:	d5ea      	bpl.n	8007f72 <_printf_float+0x1a6>
 8007f9c:	1c4b      	adds	r3, r1, #1
 8007f9e:	e7e7      	b.n	8007f70 <_printf_float+0x1a4>
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	bfd4      	ite	le
 8007fa4:	f1c1 0202 	rsble	r2, r1, #2
 8007fa8:	2201      	movgt	r2, #1
 8007faa:	4413      	add	r3, r2
 8007fac:	e7e0      	b.n	8007f70 <_printf_float+0x1a4>
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	055a      	lsls	r2, r3, #21
 8007fb2:	d407      	bmi.n	8007fc4 <_printf_float+0x1f8>
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	4642      	mov	r2, r8
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	d12c      	bne.n	800801c <_printf_float+0x250>
 8007fc2:	e764      	b.n	8007e8e <_printf_float+0xc2>
 8007fc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fc8:	f240 80e0 	bls.w	800818c <_printf_float+0x3c0>
 8007fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f7f8 fd90 	bl	8000af8 <__aeabi_dcmpeq>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d034      	beq.n	8008046 <_printf_float+0x27a>
 8007fdc:	4a37      	ldr	r2, [pc, #220]	; (80080bc <_printf_float+0x2f0>)
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f af51 	beq.w	8007e8e <_printf_float+0xc2>
 8007fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	db02      	blt.n	8007ffa <_printf_float+0x22e>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	07d8      	lsls	r0, r3, #31
 8007ff8:	d510      	bpl.n	800801c <_printf_float+0x250>
 8007ffa:	ee18 3a10 	vmov	r3, s16
 8007ffe:	4652      	mov	r2, sl
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f af41 	beq.w	8007e8e <_printf_float+0xc2>
 800800c:	f04f 0800 	mov.w	r8, #0
 8008010:	f104 091a 	add.w	r9, r4, #26
 8008014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008016:	3b01      	subs	r3, #1
 8008018:	4543      	cmp	r3, r8
 800801a:	dc09      	bgt.n	8008030 <_printf_float+0x264>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	079b      	lsls	r3, r3, #30
 8008020:	f100 8105 	bmi.w	800822e <_printf_float+0x462>
 8008024:	68e0      	ldr	r0, [r4, #12]
 8008026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008028:	4298      	cmp	r0, r3
 800802a:	bfb8      	it	lt
 800802c:	4618      	movlt	r0, r3
 800802e:	e730      	b.n	8007e92 <_printf_float+0xc6>
 8008030:	2301      	movs	r3, #1
 8008032:	464a      	mov	r2, r9
 8008034:	4631      	mov	r1, r6
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	f43f af27 	beq.w	8007e8e <_printf_float+0xc2>
 8008040:	f108 0801 	add.w	r8, r8, #1
 8008044:	e7e6      	b.n	8008014 <_printf_float+0x248>
 8008046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	dc39      	bgt.n	80080c0 <_printf_float+0x2f4>
 800804c:	4a1b      	ldr	r2, [pc, #108]	; (80080bc <_printf_float+0x2f0>)
 800804e:	2301      	movs	r3, #1
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	f43f af19 	beq.w	8007e8e <_printf_float+0xc2>
 800805c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008060:	4313      	orrs	r3, r2
 8008062:	d102      	bne.n	800806a <_printf_float+0x29e>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	07d9      	lsls	r1, r3, #31
 8008068:	d5d8      	bpl.n	800801c <_printf_float+0x250>
 800806a:	ee18 3a10 	vmov	r3, s16
 800806e:	4652      	mov	r2, sl
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	f43f af09 	beq.w	8007e8e <_printf_float+0xc2>
 800807c:	f04f 0900 	mov.w	r9, #0
 8008080:	f104 0a1a 	add.w	sl, r4, #26
 8008084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008086:	425b      	negs	r3, r3
 8008088:	454b      	cmp	r3, r9
 800808a:	dc01      	bgt.n	8008090 <_printf_float+0x2c4>
 800808c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800808e:	e792      	b.n	8007fb6 <_printf_float+0x1ea>
 8008090:	2301      	movs	r3, #1
 8008092:	4652      	mov	r2, sl
 8008094:	4631      	mov	r1, r6
 8008096:	4628      	mov	r0, r5
 8008098:	47b8      	blx	r7
 800809a:	3001      	adds	r0, #1
 800809c:	f43f aef7 	beq.w	8007e8e <_printf_float+0xc2>
 80080a0:	f109 0901 	add.w	r9, r9, #1
 80080a4:	e7ee      	b.n	8008084 <_printf_float+0x2b8>
 80080a6:	bf00      	nop
 80080a8:	7fefffff 	.word	0x7fefffff
 80080ac:	0801fad8 	.word	0x0801fad8
 80080b0:	0801fadc 	.word	0x0801fadc
 80080b4:	0801fae4 	.word	0x0801fae4
 80080b8:	0801fae0 	.word	0x0801fae0
 80080bc:	0801fae8 	.word	0x0801fae8
 80080c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080c4:	429a      	cmp	r2, r3
 80080c6:	bfa8      	it	ge
 80080c8:	461a      	movge	r2, r3
 80080ca:	2a00      	cmp	r2, #0
 80080cc:	4691      	mov	r9, r2
 80080ce:	dc37      	bgt.n	8008140 <_printf_float+0x374>
 80080d0:	f04f 0b00 	mov.w	fp, #0
 80080d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080d8:	f104 021a 	add.w	r2, r4, #26
 80080dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080de:	9305      	str	r3, [sp, #20]
 80080e0:	eba3 0309 	sub.w	r3, r3, r9
 80080e4:	455b      	cmp	r3, fp
 80080e6:	dc33      	bgt.n	8008150 <_printf_float+0x384>
 80080e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ec:	429a      	cmp	r2, r3
 80080ee:	db3b      	blt.n	8008168 <_printf_float+0x39c>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	07da      	lsls	r2, r3, #31
 80080f4:	d438      	bmi.n	8008168 <_printf_float+0x39c>
 80080f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080f8:	9b05      	ldr	r3, [sp, #20]
 80080fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	eba2 0901 	sub.w	r9, r2, r1
 8008102:	4599      	cmp	r9, r3
 8008104:	bfa8      	it	ge
 8008106:	4699      	movge	r9, r3
 8008108:	f1b9 0f00 	cmp.w	r9, #0
 800810c:	dc35      	bgt.n	800817a <_printf_float+0x3ae>
 800810e:	f04f 0800 	mov.w	r8, #0
 8008112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008116:	f104 0a1a 	add.w	sl, r4, #26
 800811a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800811e:	1a9b      	subs	r3, r3, r2
 8008120:	eba3 0309 	sub.w	r3, r3, r9
 8008124:	4543      	cmp	r3, r8
 8008126:	f77f af79 	ble.w	800801c <_printf_float+0x250>
 800812a:	2301      	movs	r3, #1
 800812c:	4652      	mov	r2, sl
 800812e:	4631      	mov	r1, r6
 8008130:	4628      	mov	r0, r5
 8008132:	47b8      	blx	r7
 8008134:	3001      	adds	r0, #1
 8008136:	f43f aeaa 	beq.w	8007e8e <_printf_float+0xc2>
 800813a:	f108 0801 	add.w	r8, r8, #1
 800813e:	e7ec      	b.n	800811a <_printf_float+0x34e>
 8008140:	4613      	mov	r3, r2
 8008142:	4631      	mov	r1, r6
 8008144:	4642      	mov	r2, r8
 8008146:	4628      	mov	r0, r5
 8008148:	47b8      	blx	r7
 800814a:	3001      	adds	r0, #1
 800814c:	d1c0      	bne.n	80080d0 <_printf_float+0x304>
 800814e:	e69e      	b.n	8007e8e <_printf_float+0xc2>
 8008150:	2301      	movs	r3, #1
 8008152:	4631      	mov	r1, r6
 8008154:	4628      	mov	r0, r5
 8008156:	9205      	str	r2, [sp, #20]
 8008158:	47b8      	blx	r7
 800815a:	3001      	adds	r0, #1
 800815c:	f43f ae97 	beq.w	8007e8e <_printf_float+0xc2>
 8008160:	9a05      	ldr	r2, [sp, #20]
 8008162:	f10b 0b01 	add.w	fp, fp, #1
 8008166:	e7b9      	b.n	80080dc <_printf_float+0x310>
 8008168:	ee18 3a10 	vmov	r3, s16
 800816c:	4652      	mov	r2, sl
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	d1be      	bne.n	80080f6 <_printf_float+0x32a>
 8008178:	e689      	b.n	8007e8e <_printf_float+0xc2>
 800817a:	9a05      	ldr	r2, [sp, #20]
 800817c:	464b      	mov	r3, r9
 800817e:	4442      	add	r2, r8
 8008180:	4631      	mov	r1, r6
 8008182:	4628      	mov	r0, r5
 8008184:	47b8      	blx	r7
 8008186:	3001      	adds	r0, #1
 8008188:	d1c1      	bne.n	800810e <_printf_float+0x342>
 800818a:	e680      	b.n	8007e8e <_printf_float+0xc2>
 800818c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800818e:	2a01      	cmp	r2, #1
 8008190:	dc01      	bgt.n	8008196 <_printf_float+0x3ca>
 8008192:	07db      	lsls	r3, r3, #31
 8008194:	d538      	bpl.n	8008208 <_printf_float+0x43c>
 8008196:	2301      	movs	r3, #1
 8008198:	4642      	mov	r2, r8
 800819a:	4631      	mov	r1, r6
 800819c:	4628      	mov	r0, r5
 800819e:	47b8      	blx	r7
 80081a0:	3001      	adds	r0, #1
 80081a2:	f43f ae74 	beq.w	8007e8e <_printf_float+0xc2>
 80081a6:	ee18 3a10 	vmov	r3, s16
 80081aa:	4652      	mov	r2, sl
 80081ac:	4631      	mov	r1, r6
 80081ae:	4628      	mov	r0, r5
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	f43f ae6b 	beq.w	8007e8e <_printf_float+0xc2>
 80081b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081bc:	2200      	movs	r2, #0
 80081be:	2300      	movs	r3, #0
 80081c0:	f7f8 fc9a 	bl	8000af8 <__aeabi_dcmpeq>
 80081c4:	b9d8      	cbnz	r0, 80081fe <_printf_float+0x432>
 80081c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c8:	f108 0201 	add.w	r2, r8, #1
 80081cc:	3b01      	subs	r3, #1
 80081ce:	4631      	mov	r1, r6
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b8      	blx	r7
 80081d4:	3001      	adds	r0, #1
 80081d6:	d10e      	bne.n	80081f6 <_printf_float+0x42a>
 80081d8:	e659      	b.n	8007e8e <_printf_float+0xc2>
 80081da:	2301      	movs	r3, #1
 80081dc:	4652      	mov	r2, sl
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	f43f ae52 	beq.w	8007e8e <_printf_float+0xc2>
 80081ea:	f108 0801 	add.w	r8, r8, #1
 80081ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f0:	3b01      	subs	r3, #1
 80081f2:	4543      	cmp	r3, r8
 80081f4:	dcf1      	bgt.n	80081da <_printf_float+0x40e>
 80081f6:	464b      	mov	r3, r9
 80081f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081fc:	e6dc      	b.n	8007fb8 <_printf_float+0x1ec>
 80081fe:	f04f 0800 	mov.w	r8, #0
 8008202:	f104 0a1a 	add.w	sl, r4, #26
 8008206:	e7f2      	b.n	80081ee <_printf_float+0x422>
 8008208:	2301      	movs	r3, #1
 800820a:	4642      	mov	r2, r8
 800820c:	e7df      	b.n	80081ce <_printf_float+0x402>
 800820e:	2301      	movs	r3, #1
 8008210:	464a      	mov	r2, r9
 8008212:	4631      	mov	r1, r6
 8008214:	4628      	mov	r0, r5
 8008216:	47b8      	blx	r7
 8008218:	3001      	adds	r0, #1
 800821a:	f43f ae38 	beq.w	8007e8e <_printf_float+0xc2>
 800821e:	f108 0801 	add.w	r8, r8, #1
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008226:	1a5b      	subs	r3, r3, r1
 8008228:	4543      	cmp	r3, r8
 800822a:	dcf0      	bgt.n	800820e <_printf_float+0x442>
 800822c:	e6fa      	b.n	8008024 <_printf_float+0x258>
 800822e:	f04f 0800 	mov.w	r8, #0
 8008232:	f104 0919 	add.w	r9, r4, #25
 8008236:	e7f4      	b.n	8008222 <_printf_float+0x456>

08008238 <_printf_common>:
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	4616      	mov	r6, r2
 800823e:	4699      	mov	r9, r3
 8008240:	688a      	ldr	r2, [r1, #8]
 8008242:	690b      	ldr	r3, [r1, #16]
 8008244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008248:	4293      	cmp	r3, r2
 800824a:	bfb8      	it	lt
 800824c:	4613      	movlt	r3, r2
 800824e:	6033      	str	r3, [r6, #0]
 8008250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008254:	4607      	mov	r7, r0
 8008256:	460c      	mov	r4, r1
 8008258:	b10a      	cbz	r2, 800825e <_printf_common+0x26>
 800825a:	3301      	adds	r3, #1
 800825c:	6033      	str	r3, [r6, #0]
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	0699      	lsls	r1, r3, #26
 8008262:	bf42      	ittt	mi
 8008264:	6833      	ldrmi	r3, [r6, #0]
 8008266:	3302      	addmi	r3, #2
 8008268:	6033      	strmi	r3, [r6, #0]
 800826a:	6825      	ldr	r5, [r4, #0]
 800826c:	f015 0506 	ands.w	r5, r5, #6
 8008270:	d106      	bne.n	8008280 <_printf_common+0x48>
 8008272:	f104 0a19 	add.w	sl, r4, #25
 8008276:	68e3      	ldr	r3, [r4, #12]
 8008278:	6832      	ldr	r2, [r6, #0]
 800827a:	1a9b      	subs	r3, r3, r2
 800827c:	42ab      	cmp	r3, r5
 800827e:	dc26      	bgt.n	80082ce <_printf_common+0x96>
 8008280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008284:	1e13      	subs	r3, r2, #0
 8008286:	6822      	ldr	r2, [r4, #0]
 8008288:	bf18      	it	ne
 800828a:	2301      	movne	r3, #1
 800828c:	0692      	lsls	r2, r2, #26
 800828e:	d42b      	bmi.n	80082e8 <_printf_common+0xb0>
 8008290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008294:	4649      	mov	r1, r9
 8008296:	4638      	mov	r0, r7
 8008298:	47c0      	blx	r8
 800829a:	3001      	adds	r0, #1
 800829c:	d01e      	beq.n	80082dc <_printf_common+0xa4>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	68e5      	ldr	r5, [r4, #12]
 80082a2:	6832      	ldr	r2, [r6, #0]
 80082a4:	f003 0306 	and.w	r3, r3, #6
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	bf08      	it	eq
 80082ac:	1aad      	subeq	r5, r5, r2
 80082ae:	68a3      	ldr	r3, [r4, #8]
 80082b0:	6922      	ldr	r2, [r4, #16]
 80082b2:	bf0c      	ite	eq
 80082b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082b8:	2500      	movne	r5, #0
 80082ba:	4293      	cmp	r3, r2
 80082bc:	bfc4      	itt	gt
 80082be:	1a9b      	subgt	r3, r3, r2
 80082c0:	18ed      	addgt	r5, r5, r3
 80082c2:	2600      	movs	r6, #0
 80082c4:	341a      	adds	r4, #26
 80082c6:	42b5      	cmp	r5, r6
 80082c8:	d11a      	bne.n	8008300 <_printf_common+0xc8>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e008      	b.n	80082e0 <_printf_common+0xa8>
 80082ce:	2301      	movs	r3, #1
 80082d0:	4652      	mov	r2, sl
 80082d2:	4649      	mov	r1, r9
 80082d4:	4638      	mov	r0, r7
 80082d6:	47c0      	blx	r8
 80082d8:	3001      	adds	r0, #1
 80082da:	d103      	bne.n	80082e4 <_printf_common+0xac>
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e4:	3501      	adds	r5, #1
 80082e6:	e7c6      	b.n	8008276 <_printf_common+0x3e>
 80082e8:	18e1      	adds	r1, r4, r3
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	2030      	movs	r0, #48	; 0x30
 80082ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082f2:	4422      	add	r2, r4
 80082f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082fc:	3302      	adds	r3, #2
 80082fe:	e7c7      	b.n	8008290 <_printf_common+0x58>
 8008300:	2301      	movs	r3, #1
 8008302:	4622      	mov	r2, r4
 8008304:	4649      	mov	r1, r9
 8008306:	4638      	mov	r0, r7
 8008308:	47c0      	blx	r8
 800830a:	3001      	adds	r0, #1
 800830c:	d0e6      	beq.n	80082dc <_printf_common+0xa4>
 800830e:	3601      	adds	r6, #1
 8008310:	e7d9      	b.n	80082c6 <_printf_common+0x8e>
	...

08008314 <_printf_i>:
 8008314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008318:	460c      	mov	r4, r1
 800831a:	4691      	mov	r9, r2
 800831c:	7e27      	ldrb	r7, [r4, #24]
 800831e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008320:	2f78      	cmp	r7, #120	; 0x78
 8008322:	4680      	mov	r8, r0
 8008324:	469a      	mov	sl, r3
 8008326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800832a:	d807      	bhi.n	800833c <_printf_i+0x28>
 800832c:	2f62      	cmp	r7, #98	; 0x62
 800832e:	d80a      	bhi.n	8008346 <_printf_i+0x32>
 8008330:	2f00      	cmp	r7, #0
 8008332:	f000 80d8 	beq.w	80084e6 <_printf_i+0x1d2>
 8008336:	2f58      	cmp	r7, #88	; 0x58
 8008338:	f000 80a3 	beq.w	8008482 <_printf_i+0x16e>
 800833c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008344:	e03a      	b.n	80083bc <_printf_i+0xa8>
 8008346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800834a:	2b15      	cmp	r3, #21
 800834c:	d8f6      	bhi.n	800833c <_printf_i+0x28>
 800834e:	a001      	add	r0, pc, #4	; (adr r0, 8008354 <_printf_i+0x40>)
 8008350:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008354:	080083ad 	.word	0x080083ad
 8008358:	080083c1 	.word	0x080083c1
 800835c:	0800833d 	.word	0x0800833d
 8008360:	0800833d 	.word	0x0800833d
 8008364:	0800833d 	.word	0x0800833d
 8008368:	0800833d 	.word	0x0800833d
 800836c:	080083c1 	.word	0x080083c1
 8008370:	0800833d 	.word	0x0800833d
 8008374:	0800833d 	.word	0x0800833d
 8008378:	0800833d 	.word	0x0800833d
 800837c:	0800833d 	.word	0x0800833d
 8008380:	080084cd 	.word	0x080084cd
 8008384:	080083f1 	.word	0x080083f1
 8008388:	080084af 	.word	0x080084af
 800838c:	0800833d 	.word	0x0800833d
 8008390:	0800833d 	.word	0x0800833d
 8008394:	080084ef 	.word	0x080084ef
 8008398:	0800833d 	.word	0x0800833d
 800839c:	080083f1 	.word	0x080083f1
 80083a0:	0800833d 	.word	0x0800833d
 80083a4:	0800833d 	.word	0x0800833d
 80083a8:	080084b7 	.word	0x080084b7
 80083ac:	680b      	ldr	r3, [r1, #0]
 80083ae:	1d1a      	adds	r2, r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	600a      	str	r2, [r1, #0]
 80083b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083bc:	2301      	movs	r3, #1
 80083be:	e0a3      	b.n	8008508 <_printf_i+0x1f4>
 80083c0:	6825      	ldr	r5, [r4, #0]
 80083c2:	6808      	ldr	r0, [r1, #0]
 80083c4:	062e      	lsls	r6, r5, #24
 80083c6:	f100 0304 	add.w	r3, r0, #4
 80083ca:	d50a      	bpl.n	80083e2 <_printf_i+0xce>
 80083cc:	6805      	ldr	r5, [r0, #0]
 80083ce:	600b      	str	r3, [r1, #0]
 80083d0:	2d00      	cmp	r5, #0
 80083d2:	da03      	bge.n	80083dc <_printf_i+0xc8>
 80083d4:	232d      	movs	r3, #45	; 0x2d
 80083d6:	426d      	negs	r5, r5
 80083d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083dc:	485e      	ldr	r0, [pc, #376]	; (8008558 <_printf_i+0x244>)
 80083de:	230a      	movs	r3, #10
 80083e0:	e019      	b.n	8008416 <_printf_i+0x102>
 80083e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80083e6:	6805      	ldr	r5, [r0, #0]
 80083e8:	600b      	str	r3, [r1, #0]
 80083ea:	bf18      	it	ne
 80083ec:	b22d      	sxthne	r5, r5
 80083ee:	e7ef      	b.n	80083d0 <_printf_i+0xbc>
 80083f0:	680b      	ldr	r3, [r1, #0]
 80083f2:	6825      	ldr	r5, [r4, #0]
 80083f4:	1d18      	adds	r0, r3, #4
 80083f6:	6008      	str	r0, [r1, #0]
 80083f8:	0628      	lsls	r0, r5, #24
 80083fa:	d501      	bpl.n	8008400 <_printf_i+0xec>
 80083fc:	681d      	ldr	r5, [r3, #0]
 80083fe:	e002      	b.n	8008406 <_printf_i+0xf2>
 8008400:	0669      	lsls	r1, r5, #25
 8008402:	d5fb      	bpl.n	80083fc <_printf_i+0xe8>
 8008404:	881d      	ldrh	r5, [r3, #0]
 8008406:	4854      	ldr	r0, [pc, #336]	; (8008558 <_printf_i+0x244>)
 8008408:	2f6f      	cmp	r7, #111	; 0x6f
 800840a:	bf0c      	ite	eq
 800840c:	2308      	moveq	r3, #8
 800840e:	230a      	movne	r3, #10
 8008410:	2100      	movs	r1, #0
 8008412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008416:	6866      	ldr	r6, [r4, #4]
 8008418:	60a6      	str	r6, [r4, #8]
 800841a:	2e00      	cmp	r6, #0
 800841c:	bfa2      	ittt	ge
 800841e:	6821      	ldrge	r1, [r4, #0]
 8008420:	f021 0104 	bicge.w	r1, r1, #4
 8008424:	6021      	strge	r1, [r4, #0]
 8008426:	b90d      	cbnz	r5, 800842c <_printf_i+0x118>
 8008428:	2e00      	cmp	r6, #0
 800842a:	d04d      	beq.n	80084c8 <_printf_i+0x1b4>
 800842c:	4616      	mov	r6, r2
 800842e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008432:	fb03 5711 	mls	r7, r3, r1, r5
 8008436:	5dc7      	ldrb	r7, [r0, r7]
 8008438:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800843c:	462f      	mov	r7, r5
 800843e:	42bb      	cmp	r3, r7
 8008440:	460d      	mov	r5, r1
 8008442:	d9f4      	bls.n	800842e <_printf_i+0x11a>
 8008444:	2b08      	cmp	r3, #8
 8008446:	d10b      	bne.n	8008460 <_printf_i+0x14c>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	07df      	lsls	r7, r3, #31
 800844c:	d508      	bpl.n	8008460 <_printf_i+0x14c>
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	6861      	ldr	r1, [r4, #4]
 8008452:	4299      	cmp	r1, r3
 8008454:	bfde      	ittt	le
 8008456:	2330      	movle	r3, #48	; 0x30
 8008458:	f806 3c01 	strble.w	r3, [r6, #-1]
 800845c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008460:	1b92      	subs	r2, r2, r6
 8008462:	6122      	str	r2, [r4, #16]
 8008464:	f8cd a000 	str.w	sl, [sp]
 8008468:	464b      	mov	r3, r9
 800846a:	aa03      	add	r2, sp, #12
 800846c:	4621      	mov	r1, r4
 800846e:	4640      	mov	r0, r8
 8008470:	f7ff fee2 	bl	8008238 <_printf_common>
 8008474:	3001      	adds	r0, #1
 8008476:	d14c      	bne.n	8008512 <_printf_i+0x1fe>
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	b004      	add	sp, #16
 800847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008482:	4835      	ldr	r0, [pc, #212]	; (8008558 <_printf_i+0x244>)
 8008484:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	680e      	ldr	r6, [r1, #0]
 800848c:	061f      	lsls	r7, r3, #24
 800848e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008492:	600e      	str	r6, [r1, #0]
 8008494:	d514      	bpl.n	80084c0 <_printf_i+0x1ac>
 8008496:	07d9      	lsls	r1, r3, #31
 8008498:	bf44      	itt	mi
 800849a:	f043 0320 	orrmi.w	r3, r3, #32
 800849e:	6023      	strmi	r3, [r4, #0]
 80084a0:	b91d      	cbnz	r5, 80084aa <_printf_i+0x196>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	f023 0320 	bic.w	r3, r3, #32
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	2310      	movs	r3, #16
 80084ac:	e7b0      	b.n	8008410 <_printf_i+0xfc>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	f043 0320 	orr.w	r3, r3, #32
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	2378      	movs	r3, #120	; 0x78
 80084b8:	4828      	ldr	r0, [pc, #160]	; (800855c <_printf_i+0x248>)
 80084ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084be:	e7e3      	b.n	8008488 <_printf_i+0x174>
 80084c0:	065e      	lsls	r6, r3, #25
 80084c2:	bf48      	it	mi
 80084c4:	b2ad      	uxthmi	r5, r5
 80084c6:	e7e6      	b.n	8008496 <_printf_i+0x182>
 80084c8:	4616      	mov	r6, r2
 80084ca:	e7bb      	b.n	8008444 <_printf_i+0x130>
 80084cc:	680b      	ldr	r3, [r1, #0]
 80084ce:	6826      	ldr	r6, [r4, #0]
 80084d0:	6960      	ldr	r0, [r4, #20]
 80084d2:	1d1d      	adds	r5, r3, #4
 80084d4:	600d      	str	r5, [r1, #0]
 80084d6:	0635      	lsls	r5, r6, #24
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	d501      	bpl.n	80084e0 <_printf_i+0x1cc>
 80084dc:	6018      	str	r0, [r3, #0]
 80084de:	e002      	b.n	80084e6 <_printf_i+0x1d2>
 80084e0:	0671      	lsls	r1, r6, #25
 80084e2:	d5fb      	bpl.n	80084dc <_printf_i+0x1c8>
 80084e4:	8018      	strh	r0, [r3, #0]
 80084e6:	2300      	movs	r3, #0
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	4616      	mov	r6, r2
 80084ec:	e7ba      	b.n	8008464 <_printf_i+0x150>
 80084ee:	680b      	ldr	r3, [r1, #0]
 80084f0:	1d1a      	adds	r2, r3, #4
 80084f2:	600a      	str	r2, [r1, #0]
 80084f4:	681e      	ldr	r6, [r3, #0]
 80084f6:	6862      	ldr	r2, [r4, #4]
 80084f8:	2100      	movs	r1, #0
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7f7 fe88 	bl	8000210 <memchr>
 8008500:	b108      	cbz	r0, 8008506 <_printf_i+0x1f2>
 8008502:	1b80      	subs	r0, r0, r6
 8008504:	6060      	str	r0, [r4, #4]
 8008506:	6863      	ldr	r3, [r4, #4]
 8008508:	6123      	str	r3, [r4, #16]
 800850a:	2300      	movs	r3, #0
 800850c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008510:	e7a8      	b.n	8008464 <_printf_i+0x150>
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	4632      	mov	r2, r6
 8008516:	4649      	mov	r1, r9
 8008518:	4640      	mov	r0, r8
 800851a:	47d0      	blx	sl
 800851c:	3001      	adds	r0, #1
 800851e:	d0ab      	beq.n	8008478 <_printf_i+0x164>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	079b      	lsls	r3, r3, #30
 8008524:	d413      	bmi.n	800854e <_printf_i+0x23a>
 8008526:	68e0      	ldr	r0, [r4, #12]
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	4298      	cmp	r0, r3
 800852c:	bfb8      	it	lt
 800852e:	4618      	movlt	r0, r3
 8008530:	e7a4      	b.n	800847c <_printf_i+0x168>
 8008532:	2301      	movs	r3, #1
 8008534:	4632      	mov	r2, r6
 8008536:	4649      	mov	r1, r9
 8008538:	4640      	mov	r0, r8
 800853a:	47d0      	blx	sl
 800853c:	3001      	adds	r0, #1
 800853e:	d09b      	beq.n	8008478 <_printf_i+0x164>
 8008540:	3501      	adds	r5, #1
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	9903      	ldr	r1, [sp, #12]
 8008546:	1a5b      	subs	r3, r3, r1
 8008548:	42ab      	cmp	r3, r5
 800854a:	dcf2      	bgt.n	8008532 <_printf_i+0x21e>
 800854c:	e7eb      	b.n	8008526 <_printf_i+0x212>
 800854e:	2500      	movs	r5, #0
 8008550:	f104 0619 	add.w	r6, r4, #25
 8008554:	e7f5      	b.n	8008542 <_printf_i+0x22e>
 8008556:	bf00      	nop
 8008558:	0801faea 	.word	0x0801faea
 800855c:	0801fafb 	.word	0x0801fafb

08008560 <_scanf_float>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	b087      	sub	sp, #28
 8008566:	4617      	mov	r7, r2
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	688b      	ldr	r3, [r1, #8]
 800856c:	1e5a      	subs	r2, r3, #1
 800856e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008572:	bf83      	ittte	hi
 8008574:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008578:	195b      	addhi	r3, r3, r5
 800857a:	9302      	strhi	r3, [sp, #8]
 800857c:	2300      	movls	r3, #0
 800857e:	bf86      	itte	hi
 8008580:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008584:	608b      	strhi	r3, [r1, #8]
 8008586:	9302      	strls	r3, [sp, #8]
 8008588:	680b      	ldr	r3, [r1, #0]
 800858a:	468b      	mov	fp, r1
 800858c:	2500      	movs	r5, #0
 800858e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008592:	f84b 3b1c 	str.w	r3, [fp], #28
 8008596:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800859a:	4680      	mov	r8, r0
 800859c:	460c      	mov	r4, r1
 800859e:	465e      	mov	r6, fp
 80085a0:	46aa      	mov	sl, r5
 80085a2:	46a9      	mov	r9, r5
 80085a4:	9501      	str	r5, [sp, #4]
 80085a6:	68a2      	ldr	r2, [r4, #8]
 80085a8:	b152      	cbz	r2, 80085c0 <_scanf_float+0x60>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b4e      	cmp	r3, #78	; 0x4e
 80085b0:	d864      	bhi.n	800867c <_scanf_float+0x11c>
 80085b2:	2b40      	cmp	r3, #64	; 0x40
 80085b4:	d83c      	bhi.n	8008630 <_scanf_float+0xd0>
 80085b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80085ba:	b2c8      	uxtb	r0, r1
 80085bc:	280e      	cmp	r0, #14
 80085be:	d93a      	bls.n	8008636 <_scanf_float+0xd6>
 80085c0:	f1b9 0f00 	cmp.w	r9, #0
 80085c4:	d003      	beq.n	80085ce <_scanf_float+0x6e>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085d2:	f1ba 0f01 	cmp.w	sl, #1
 80085d6:	f200 8113 	bhi.w	8008800 <_scanf_float+0x2a0>
 80085da:	455e      	cmp	r6, fp
 80085dc:	f200 8105 	bhi.w	80087ea <_scanf_float+0x28a>
 80085e0:	2501      	movs	r5, #1
 80085e2:	4628      	mov	r0, r5
 80085e4:	b007      	add	sp, #28
 80085e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80085ee:	2a0d      	cmp	r2, #13
 80085f0:	d8e6      	bhi.n	80085c0 <_scanf_float+0x60>
 80085f2:	a101      	add	r1, pc, #4	; (adr r1, 80085f8 <_scanf_float+0x98>)
 80085f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085f8:	08008737 	.word	0x08008737
 80085fc:	080085c1 	.word	0x080085c1
 8008600:	080085c1 	.word	0x080085c1
 8008604:	080085c1 	.word	0x080085c1
 8008608:	08008797 	.word	0x08008797
 800860c:	0800876f 	.word	0x0800876f
 8008610:	080085c1 	.word	0x080085c1
 8008614:	080085c1 	.word	0x080085c1
 8008618:	08008745 	.word	0x08008745
 800861c:	080085c1 	.word	0x080085c1
 8008620:	080085c1 	.word	0x080085c1
 8008624:	080085c1 	.word	0x080085c1
 8008628:	080085c1 	.word	0x080085c1
 800862c:	080086fd 	.word	0x080086fd
 8008630:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008634:	e7db      	b.n	80085ee <_scanf_float+0x8e>
 8008636:	290e      	cmp	r1, #14
 8008638:	d8c2      	bhi.n	80085c0 <_scanf_float+0x60>
 800863a:	a001      	add	r0, pc, #4	; (adr r0, 8008640 <_scanf_float+0xe0>)
 800863c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008640:	080086ef 	.word	0x080086ef
 8008644:	080085c1 	.word	0x080085c1
 8008648:	080086ef 	.word	0x080086ef
 800864c:	08008783 	.word	0x08008783
 8008650:	080085c1 	.word	0x080085c1
 8008654:	0800869d 	.word	0x0800869d
 8008658:	080086d9 	.word	0x080086d9
 800865c:	080086d9 	.word	0x080086d9
 8008660:	080086d9 	.word	0x080086d9
 8008664:	080086d9 	.word	0x080086d9
 8008668:	080086d9 	.word	0x080086d9
 800866c:	080086d9 	.word	0x080086d9
 8008670:	080086d9 	.word	0x080086d9
 8008674:	080086d9 	.word	0x080086d9
 8008678:	080086d9 	.word	0x080086d9
 800867c:	2b6e      	cmp	r3, #110	; 0x6e
 800867e:	d809      	bhi.n	8008694 <_scanf_float+0x134>
 8008680:	2b60      	cmp	r3, #96	; 0x60
 8008682:	d8b2      	bhi.n	80085ea <_scanf_float+0x8a>
 8008684:	2b54      	cmp	r3, #84	; 0x54
 8008686:	d077      	beq.n	8008778 <_scanf_float+0x218>
 8008688:	2b59      	cmp	r3, #89	; 0x59
 800868a:	d199      	bne.n	80085c0 <_scanf_float+0x60>
 800868c:	2d07      	cmp	r5, #7
 800868e:	d197      	bne.n	80085c0 <_scanf_float+0x60>
 8008690:	2508      	movs	r5, #8
 8008692:	e029      	b.n	80086e8 <_scanf_float+0x188>
 8008694:	2b74      	cmp	r3, #116	; 0x74
 8008696:	d06f      	beq.n	8008778 <_scanf_float+0x218>
 8008698:	2b79      	cmp	r3, #121	; 0x79
 800869a:	e7f6      	b.n	800868a <_scanf_float+0x12a>
 800869c:	6821      	ldr	r1, [r4, #0]
 800869e:	05c8      	lsls	r0, r1, #23
 80086a0:	d51a      	bpl.n	80086d8 <_scanf_float+0x178>
 80086a2:	9b02      	ldr	r3, [sp, #8]
 80086a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80086a8:	6021      	str	r1, [r4, #0]
 80086aa:	f109 0901 	add.w	r9, r9, #1
 80086ae:	b11b      	cbz	r3, 80086b8 <_scanf_float+0x158>
 80086b0:	3b01      	subs	r3, #1
 80086b2:	3201      	adds	r2, #1
 80086b4:	9302      	str	r3, [sp, #8]
 80086b6:	60a2      	str	r2, [r4, #8]
 80086b8:	68a3      	ldr	r3, [r4, #8]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	60a3      	str	r3, [r4, #8]
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	3301      	adds	r3, #1
 80086c2:	6123      	str	r3, [r4, #16]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	607b      	str	r3, [r7, #4]
 80086cc:	f340 8084 	ble.w	80087d8 <_scanf_float+0x278>
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	3301      	adds	r3, #1
 80086d4:	603b      	str	r3, [r7, #0]
 80086d6:	e766      	b.n	80085a6 <_scanf_float+0x46>
 80086d8:	eb1a 0f05 	cmn.w	sl, r5
 80086dc:	f47f af70 	bne.w	80085c0 <_scanf_float+0x60>
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80086e6:	6022      	str	r2, [r4, #0]
 80086e8:	f806 3b01 	strb.w	r3, [r6], #1
 80086ec:	e7e4      	b.n	80086b8 <_scanf_float+0x158>
 80086ee:	6822      	ldr	r2, [r4, #0]
 80086f0:	0610      	lsls	r0, r2, #24
 80086f2:	f57f af65 	bpl.w	80085c0 <_scanf_float+0x60>
 80086f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086fa:	e7f4      	b.n	80086e6 <_scanf_float+0x186>
 80086fc:	f1ba 0f00 	cmp.w	sl, #0
 8008700:	d10e      	bne.n	8008720 <_scanf_float+0x1c0>
 8008702:	f1b9 0f00 	cmp.w	r9, #0
 8008706:	d10e      	bne.n	8008726 <_scanf_float+0x1c6>
 8008708:	6822      	ldr	r2, [r4, #0]
 800870a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800870e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008712:	d108      	bne.n	8008726 <_scanf_float+0x1c6>
 8008714:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008718:	6022      	str	r2, [r4, #0]
 800871a:	f04f 0a01 	mov.w	sl, #1
 800871e:	e7e3      	b.n	80086e8 <_scanf_float+0x188>
 8008720:	f1ba 0f02 	cmp.w	sl, #2
 8008724:	d055      	beq.n	80087d2 <_scanf_float+0x272>
 8008726:	2d01      	cmp	r5, #1
 8008728:	d002      	beq.n	8008730 <_scanf_float+0x1d0>
 800872a:	2d04      	cmp	r5, #4
 800872c:	f47f af48 	bne.w	80085c0 <_scanf_float+0x60>
 8008730:	3501      	adds	r5, #1
 8008732:	b2ed      	uxtb	r5, r5
 8008734:	e7d8      	b.n	80086e8 <_scanf_float+0x188>
 8008736:	f1ba 0f01 	cmp.w	sl, #1
 800873a:	f47f af41 	bne.w	80085c0 <_scanf_float+0x60>
 800873e:	f04f 0a02 	mov.w	sl, #2
 8008742:	e7d1      	b.n	80086e8 <_scanf_float+0x188>
 8008744:	b97d      	cbnz	r5, 8008766 <_scanf_float+0x206>
 8008746:	f1b9 0f00 	cmp.w	r9, #0
 800874a:	f47f af3c 	bne.w	80085c6 <_scanf_float+0x66>
 800874e:	6822      	ldr	r2, [r4, #0]
 8008750:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008754:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008758:	f47f af39 	bne.w	80085ce <_scanf_float+0x6e>
 800875c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008760:	6022      	str	r2, [r4, #0]
 8008762:	2501      	movs	r5, #1
 8008764:	e7c0      	b.n	80086e8 <_scanf_float+0x188>
 8008766:	2d03      	cmp	r5, #3
 8008768:	d0e2      	beq.n	8008730 <_scanf_float+0x1d0>
 800876a:	2d05      	cmp	r5, #5
 800876c:	e7de      	b.n	800872c <_scanf_float+0x1cc>
 800876e:	2d02      	cmp	r5, #2
 8008770:	f47f af26 	bne.w	80085c0 <_scanf_float+0x60>
 8008774:	2503      	movs	r5, #3
 8008776:	e7b7      	b.n	80086e8 <_scanf_float+0x188>
 8008778:	2d06      	cmp	r5, #6
 800877a:	f47f af21 	bne.w	80085c0 <_scanf_float+0x60>
 800877e:	2507      	movs	r5, #7
 8008780:	e7b2      	b.n	80086e8 <_scanf_float+0x188>
 8008782:	6822      	ldr	r2, [r4, #0]
 8008784:	0591      	lsls	r1, r2, #22
 8008786:	f57f af1b 	bpl.w	80085c0 <_scanf_float+0x60>
 800878a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800878e:	6022      	str	r2, [r4, #0]
 8008790:	f8cd 9004 	str.w	r9, [sp, #4]
 8008794:	e7a8      	b.n	80086e8 <_scanf_float+0x188>
 8008796:	6822      	ldr	r2, [r4, #0]
 8008798:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800879c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80087a0:	d006      	beq.n	80087b0 <_scanf_float+0x250>
 80087a2:	0550      	lsls	r0, r2, #21
 80087a4:	f57f af0c 	bpl.w	80085c0 <_scanf_float+0x60>
 80087a8:	f1b9 0f00 	cmp.w	r9, #0
 80087ac:	f43f af0f 	beq.w	80085ce <_scanf_float+0x6e>
 80087b0:	0591      	lsls	r1, r2, #22
 80087b2:	bf58      	it	pl
 80087b4:	9901      	ldrpl	r1, [sp, #4]
 80087b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087ba:	bf58      	it	pl
 80087bc:	eba9 0101 	subpl.w	r1, r9, r1
 80087c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80087c4:	bf58      	it	pl
 80087c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80087ca:	6022      	str	r2, [r4, #0]
 80087cc:	f04f 0900 	mov.w	r9, #0
 80087d0:	e78a      	b.n	80086e8 <_scanf_float+0x188>
 80087d2:	f04f 0a03 	mov.w	sl, #3
 80087d6:	e787      	b.n	80086e8 <_scanf_float+0x188>
 80087d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80087dc:	4639      	mov	r1, r7
 80087de:	4640      	mov	r0, r8
 80087e0:	4798      	blx	r3
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f43f aedf 	beq.w	80085a6 <_scanf_float+0x46>
 80087e8:	e6ea      	b.n	80085c0 <_scanf_float+0x60>
 80087ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087f2:	463a      	mov	r2, r7
 80087f4:	4640      	mov	r0, r8
 80087f6:	4798      	blx	r3
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	e6ec      	b.n	80085da <_scanf_float+0x7a>
 8008800:	1e6b      	subs	r3, r5, #1
 8008802:	2b06      	cmp	r3, #6
 8008804:	d825      	bhi.n	8008852 <_scanf_float+0x2f2>
 8008806:	2d02      	cmp	r5, #2
 8008808:	d836      	bhi.n	8008878 <_scanf_float+0x318>
 800880a:	455e      	cmp	r6, fp
 800880c:	f67f aee8 	bls.w	80085e0 <_scanf_float+0x80>
 8008810:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008814:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008818:	463a      	mov	r2, r7
 800881a:	4640      	mov	r0, r8
 800881c:	4798      	blx	r3
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	3b01      	subs	r3, #1
 8008822:	6123      	str	r3, [r4, #16]
 8008824:	e7f1      	b.n	800880a <_scanf_float+0x2aa>
 8008826:	9802      	ldr	r0, [sp, #8]
 8008828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800882c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008830:	9002      	str	r0, [sp, #8]
 8008832:	463a      	mov	r2, r7
 8008834:	4640      	mov	r0, r8
 8008836:	4798      	blx	r3
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	3b01      	subs	r3, #1
 800883c:	6123      	str	r3, [r4, #16]
 800883e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008842:	fa5f fa8a 	uxtb.w	sl, sl
 8008846:	f1ba 0f02 	cmp.w	sl, #2
 800884a:	d1ec      	bne.n	8008826 <_scanf_float+0x2c6>
 800884c:	3d03      	subs	r5, #3
 800884e:	b2ed      	uxtb	r5, r5
 8008850:	1b76      	subs	r6, r6, r5
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	05da      	lsls	r2, r3, #23
 8008856:	d52f      	bpl.n	80088b8 <_scanf_float+0x358>
 8008858:	055b      	lsls	r3, r3, #21
 800885a:	d510      	bpl.n	800887e <_scanf_float+0x31e>
 800885c:	455e      	cmp	r6, fp
 800885e:	f67f aebf 	bls.w	80085e0 <_scanf_float+0x80>
 8008862:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008866:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800886a:	463a      	mov	r2, r7
 800886c:	4640      	mov	r0, r8
 800886e:	4798      	blx	r3
 8008870:	6923      	ldr	r3, [r4, #16]
 8008872:	3b01      	subs	r3, #1
 8008874:	6123      	str	r3, [r4, #16]
 8008876:	e7f1      	b.n	800885c <_scanf_float+0x2fc>
 8008878:	46aa      	mov	sl, r5
 800887a:	9602      	str	r6, [sp, #8]
 800887c:	e7df      	b.n	800883e <_scanf_float+0x2de>
 800887e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	2965      	cmp	r1, #101	; 0x65
 8008886:	f103 33ff 	add.w	r3, r3, #4294967295
 800888a:	f106 35ff 	add.w	r5, r6, #4294967295
 800888e:	6123      	str	r3, [r4, #16]
 8008890:	d00c      	beq.n	80088ac <_scanf_float+0x34c>
 8008892:	2945      	cmp	r1, #69	; 0x45
 8008894:	d00a      	beq.n	80088ac <_scanf_float+0x34c>
 8008896:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800889a:	463a      	mov	r2, r7
 800889c:	4640      	mov	r0, r8
 800889e:	4798      	blx	r3
 80088a0:	6923      	ldr	r3, [r4, #16]
 80088a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	1eb5      	subs	r5, r6, #2
 80088aa:	6123      	str	r3, [r4, #16]
 80088ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088b0:	463a      	mov	r2, r7
 80088b2:	4640      	mov	r0, r8
 80088b4:	4798      	blx	r3
 80088b6:	462e      	mov	r6, r5
 80088b8:	6825      	ldr	r5, [r4, #0]
 80088ba:	f015 0510 	ands.w	r5, r5, #16
 80088be:	d158      	bne.n	8008972 <_scanf_float+0x412>
 80088c0:	7035      	strb	r5, [r6, #0]
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80088c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088cc:	d11c      	bne.n	8008908 <_scanf_float+0x3a8>
 80088ce:	9b01      	ldr	r3, [sp, #4]
 80088d0:	454b      	cmp	r3, r9
 80088d2:	eba3 0209 	sub.w	r2, r3, r9
 80088d6:	d124      	bne.n	8008922 <_scanf_float+0x3c2>
 80088d8:	2200      	movs	r2, #0
 80088da:	4659      	mov	r1, fp
 80088dc:	4640      	mov	r0, r8
 80088de:	f000 fe9d 	bl	800961c <_strtod_r>
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	6821      	ldr	r1, [r4, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f011 0f02 	tst.w	r1, #2
 80088ec:	ec57 6b10 	vmov	r6, r7, d0
 80088f0:	f103 0204 	add.w	r2, r3, #4
 80088f4:	d020      	beq.n	8008938 <_scanf_float+0x3d8>
 80088f6:	9903      	ldr	r1, [sp, #12]
 80088f8:	600a      	str	r2, [r1, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	e9c3 6700 	strd	r6, r7, [r3]
 8008900:	68e3      	ldr	r3, [r4, #12]
 8008902:	3301      	adds	r3, #1
 8008904:	60e3      	str	r3, [r4, #12]
 8008906:	e66c      	b.n	80085e2 <_scanf_float+0x82>
 8008908:	9b04      	ldr	r3, [sp, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0e4      	beq.n	80088d8 <_scanf_float+0x378>
 800890e:	9905      	ldr	r1, [sp, #20]
 8008910:	230a      	movs	r3, #10
 8008912:	462a      	mov	r2, r5
 8008914:	3101      	adds	r1, #1
 8008916:	4640      	mov	r0, r8
 8008918:	f000 ff72 	bl	8009800 <_strtol_r>
 800891c:	9b04      	ldr	r3, [sp, #16]
 800891e:	9e05      	ldr	r6, [sp, #20]
 8008920:	1ac2      	subs	r2, r0, r3
 8008922:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008926:	429e      	cmp	r6, r3
 8008928:	bf28      	it	cs
 800892a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800892e:	4912      	ldr	r1, [pc, #72]	; (8008978 <_scanf_float+0x418>)
 8008930:	4630      	mov	r0, r6
 8008932:	f000 f82b 	bl	800898c <siprintf>
 8008936:	e7cf      	b.n	80088d8 <_scanf_float+0x378>
 8008938:	f011 0f04 	tst.w	r1, #4
 800893c:	9903      	ldr	r1, [sp, #12]
 800893e:	600a      	str	r2, [r1, #0]
 8008940:	d1db      	bne.n	80088fa <_scanf_float+0x39a>
 8008942:	f8d3 8000 	ldr.w	r8, [r3]
 8008946:	ee10 2a10 	vmov	r2, s0
 800894a:	ee10 0a10 	vmov	r0, s0
 800894e:	463b      	mov	r3, r7
 8008950:	4639      	mov	r1, r7
 8008952:	f7f8 f903 	bl	8000b5c <__aeabi_dcmpun>
 8008956:	b128      	cbz	r0, 8008964 <_scanf_float+0x404>
 8008958:	4808      	ldr	r0, [pc, #32]	; (800897c <_scanf_float+0x41c>)
 800895a:	f000 f811 	bl	8008980 <nanf>
 800895e:	ed88 0a00 	vstr	s0, [r8]
 8008962:	e7cd      	b.n	8008900 <_scanf_float+0x3a0>
 8008964:	4630      	mov	r0, r6
 8008966:	4639      	mov	r1, r7
 8008968:	f7f8 f956 	bl	8000c18 <__aeabi_d2f>
 800896c:	f8c8 0000 	str.w	r0, [r8]
 8008970:	e7c6      	b.n	8008900 <_scanf_float+0x3a0>
 8008972:	2500      	movs	r5, #0
 8008974:	e635      	b.n	80085e2 <_scanf_float+0x82>
 8008976:	bf00      	nop
 8008978:	0801fb0c 	.word	0x0801fb0c
 800897c:	0801fc1b 	.word	0x0801fc1b

08008980 <nanf>:
 8008980:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008988 <nanf+0x8>
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	7fc00000 	.word	0x7fc00000

0800898c <siprintf>:
 800898c:	b40e      	push	{r1, r2, r3}
 800898e:	b500      	push	{lr}
 8008990:	b09c      	sub	sp, #112	; 0x70
 8008992:	ab1d      	add	r3, sp, #116	; 0x74
 8008994:	9002      	str	r0, [sp, #8]
 8008996:	9006      	str	r0, [sp, #24]
 8008998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800899c:	4809      	ldr	r0, [pc, #36]	; (80089c4 <siprintf+0x38>)
 800899e:	9107      	str	r1, [sp, #28]
 80089a0:	9104      	str	r1, [sp, #16]
 80089a2:	4909      	ldr	r1, [pc, #36]	; (80089c8 <siprintf+0x3c>)
 80089a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a8:	9105      	str	r1, [sp, #20]
 80089aa:	6800      	ldr	r0, [r0, #0]
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	a902      	add	r1, sp, #8
 80089b0:	f002 ff48 	bl	800b844 <_svfiprintf_r>
 80089b4:	9b02      	ldr	r3, [sp, #8]
 80089b6:	2200      	movs	r2, #0
 80089b8:	701a      	strb	r2, [r3, #0]
 80089ba:	b01c      	add	sp, #112	; 0x70
 80089bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089c0:	b003      	add	sp, #12
 80089c2:	4770      	bx	lr
 80089c4:	2000003c 	.word	0x2000003c
 80089c8:	ffff0208 	.word	0xffff0208

080089cc <sulp>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	4604      	mov	r4, r0
 80089d0:	460d      	mov	r5, r1
 80089d2:	ec45 4b10 	vmov	d0, r4, r5
 80089d6:	4616      	mov	r6, r2
 80089d8:	f002 fcd0 	bl	800b37c <__ulp>
 80089dc:	ec51 0b10 	vmov	r0, r1, d0
 80089e0:	b17e      	cbz	r6, 8008a02 <sulp+0x36>
 80089e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80089e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dd09      	ble.n	8008a02 <sulp+0x36>
 80089ee:	051b      	lsls	r3, r3, #20
 80089f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089f4:	2400      	movs	r4, #0
 80089f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089fa:	4622      	mov	r2, r4
 80089fc:	462b      	mov	r3, r5
 80089fe:	f7f7 fe13 	bl	8000628 <__aeabi_dmul>
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	0000      	movs	r0, r0
	...

08008a08 <_strtod_l>:
 8008a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	b0a3      	sub	sp, #140	; 0x8c
 8008a0e:	461f      	mov	r7, r3
 8008a10:	2300      	movs	r3, #0
 8008a12:	931e      	str	r3, [sp, #120]	; 0x78
 8008a14:	4ba4      	ldr	r3, [pc, #656]	; (8008ca8 <_strtod_l+0x2a0>)
 8008a16:	9219      	str	r2, [sp, #100]	; 0x64
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	9307      	str	r3, [sp, #28]
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	4688      	mov	r8, r1
 8008a22:	f7f7 fbe7 	bl	80001f4 <strlen>
 8008a26:	f04f 0a00 	mov.w	sl, #0
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	f04f 0b00 	mov.w	fp, #0
 8008a30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	2a2b      	cmp	r2, #43	; 0x2b
 8008a3a:	d04c      	beq.n	8008ad6 <_strtod_l+0xce>
 8008a3c:	d839      	bhi.n	8008ab2 <_strtod_l+0xaa>
 8008a3e:	2a0d      	cmp	r2, #13
 8008a40:	d832      	bhi.n	8008aa8 <_strtod_l+0xa0>
 8008a42:	2a08      	cmp	r2, #8
 8008a44:	d832      	bhi.n	8008aac <_strtod_l+0xa4>
 8008a46:	2a00      	cmp	r2, #0
 8008a48:	d03c      	beq.n	8008ac4 <_strtod_l+0xbc>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	930e      	str	r3, [sp, #56]	; 0x38
 8008a4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008a50:	7833      	ldrb	r3, [r6, #0]
 8008a52:	2b30      	cmp	r3, #48	; 0x30
 8008a54:	f040 80b4 	bne.w	8008bc0 <_strtod_l+0x1b8>
 8008a58:	7873      	ldrb	r3, [r6, #1]
 8008a5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a5e:	2b58      	cmp	r3, #88	; 0x58
 8008a60:	d16c      	bne.n	8008b3c <_strtod_l+0x134>
 8008a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	ab1e      	add	r3, sp, #120	; 0x78
 8008a68:	9702      	str	r7, [sp, #8]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	4a8f      	ldr	r2, [pc, #572]	; (8008cac <_strtod_l+0x2a4>)
 8008a6e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008a70:	a91d      	add	r1, sp, #116	; 0x74
 8008a72:	4620      	mov	r0, r4
 8008a74:	f001 fde2 	bl	800a63c <__gethex>
 8008a78:	f010 0707 	ands.w	r7, r0, #7
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	d005      	beq.n	8008a8c <_strtod_l+0x84>
 8008a80:	2f06      	cmp	r7, #6
 8008a82:	d12a      	bne.n	8008ada <_strtod_l+0xd2>
 8008a84:	3601      	adds	r6, #1
 8008a86:	2300      	movs	r3, #0
 8008a88:	961d      	str	r6, [sp, #116]	; 0x74
 8008a8a:	930e      	str	r3, [sp, #56]	; 0x38
 8008a8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f040 8596 	bne.w	80095c0 <_strtod_l+0xbb8>
 8008a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a96:	b1db      	cbz	r3, 8008ad0 <_strtod_l+0xc8>
 8008a98:	4652      	mov	r2, sl
 8008a9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a9e:	ec43 2b10 	vmov	d0, r2, r3
 8008aa2:	b023      	add	sp, #140	; 0x8c
 8008aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa8:	2a20      	cmp	r2, #32
 8008aaa:	d1ce      	bne.n	8008a4a <_strtod_l+0x42>
 8008aac:	3301      	adds	r3, #1
 8008aae:	931d      	str	r3, [sp, #116]	; 0x74
 8008ab0:	e7c0      	b.n	8008a34 <_strtod_l+0x2c>
 8008ab2:	2a2d      	cmp	r2, #45	; 0x2d
 8008ab4:	d1c9      	bne.n	8008a4a <_strtod_l+0x42>
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	920e      	str	r2, [sp, #56]	; 0x38
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	921d      	str	r2, [sp, #116]	; 0x74
 8008abe:	785b      	ldrb	r3, [r3, #1]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1c4      	bne.n	8008a4e <_strtod_l+0x46>
 8008ac4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ac6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f040 8576 	bne.w	80095bc <_strtod_l+0xbb4>
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	465b      	mov	r3, fp
 8008ad4:	e7e3      	b.n	8008a9e <_strtod_l+0x96>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	e7ee      	b.n	8008ab8 <_strtod_l+0xb0>
 8008ada:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008adc:	b13a      	cbz	r2, 8008aee <_strtod_l+0xe6>
 8008ade:	2135      	movs	r1, #53	; 0x35
 8008ae0:	a820      	add	r0, sp, #128	; 0x80
 8008ae2:	f002 fd56 	bl	800b592 <__copybits>
 8008ae6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f002 f91b 	bl	800ad24 <_Bfree>
 8008aee:	3f01      	subs	r7, #1
 8008af0:	2f05      	cmp	r7, #5
 8008af2:	d807      	bhi.n	8008b04 <_strtod_l+0xfc>
 8008af4:	e8df f007 	tbb	[pc, r7]
 8008af8:	1d180b0e 	.word	0x1d180b0e
 8008afc:	030e      	.short	0x030e
 8008afe:	f04f 0b00 	mov.w	fp, #0
 8008b02:	46da      	mov	sl, fp
 8008b04:	0728      	lsls	r0, r5, #28
 8008b06:	d5c1      	bpl.n	8008a8c <_strtod_l+0x84>
 8008b08:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b0c:	e7be      	b.n	8008a8c <_strtod_l+0x84>
 8008b0e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008b12:	e7f7      	b.n	8008b04 <_strtod_l+0xfc>
 8008b14:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008b18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008b1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b26:	e7ed      	b.n	8008b04 <_strtod_l+0xfc>
 8008b28:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008cb0 <_strtod_l+0x2a8>
 8008b2c:	f04f 0a00 	mov.w	sl, #0
 8008b30:	e7e8      	b.n	8008b04 <_strtod_l+0xfc>
 8008b32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b36:	f04f 3aff 	mov.w	sl, #4294967295
 8008b3a:	e7e3      	b.n	8008b04 <_strtod_l+0xfc>
 8008b3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	921d      	str	r2, [sp, #116]	; 0x74
 8008b42:	785b      	ldrb	r3, [r3, #1]
 8008b44:	2b30      	cmp	r3, #48	; 0x30
 8008b46:	d0f9      	beq.n	8008b3c <_strtod_l+0x134>
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d09f      	beq.n	8008a8c <_strtod_l+0x84>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	f04f 0900 	mov.w	r9, #0
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b56:	930a      	str	r3, [sp, #40]	; 0x28
 8008b58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008b5c:	464f      	mov	r7, r9
 8008b5e:	220a      	movs	r2, #10
 8008b60:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008b62:	7806      	ldrb	r6, [r0, #0]
 8008b64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b68:	b2d9      	uxtb	r1, r3
 8008b6a:	2909      	cmp	r1, #9
 8008b6c:	d92a      	bls.n	8008bc4 <_strtod_l+0x1bc>
 8008b6e:	9907      	ldr	r1, [sp, #28]
 8008b70:	462a      	mov	r2, r5
 8008b72:	f003 f8d9 	bl	800bd28 <strncmp>
 8008b76:	b398      	cbz	r0, 8008be0 <_strtod_l+0x1d8>
 8008b78:	2000      	movs	r0, #0
 8008b7a:	4633      	mov	r3, r6
 8008b7c:	463d      	mov	r5, r7
 8008b7e:	9007      	str	r0, [sp, #28]
 8008b80:	4602      	mov	r2, r0
 8008b82:	2b65      	cmp	r3, #101	; 0x65
 8008b84:	d001      	beq.n	8008b8a <_strtod_l+0x182>
 8008b86:	2b45      	cmp	r3, #69	; 0x45
 8008b88:	d118      	bne.n	8008bbc <_strtod_l+0x1b4>
 8008b8a:	b91d      	cbnz	r5, 8008b94 <_strtod_l+0x18c>
 8008b8c:	9b04      	ldr	r3, [sp, #16]
 8008b8e:	4303      	orrs	r3, r0
 8008b90:	d098      	beq.n	8008ac4 <_strtod_l+0xbc>
 8008b92:	2500      	movs	r5, #0
 8008b94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008b98:	f108 0301 	add.w	r3, r8, #1
 8008b9c:	931d      	str	r3, [sp, #116]	; 0x74
 8008b9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008ba2:	2b2b      	cmp	r3, #43	; 0x2b
 8008ba4:	d075      	beq.n	8008c92 <_strtod_l+0x28a>
 8008ba6:	2b2d      	cmp	r3, #45	; 0x2d
 8008ba8:	d07b      	beq.n	8008ca2 <_strtod_l+0x29a>
 8008baa:	f04f 0c00 	mov.w	ip, #0
 8008bae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008bb2:	2909      	cmp	r1, #9
 8008bb4:	f240 8082 	bls.w	8008cbc <_strtod_l+0x2b4>
 8008bb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008bbc:	2600      	movs	r6, #0
 8008bbe:	e09d      	b.n	8008cfc <_strtod_l+0x2f4>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e7c4      	b.n	8008b4e <_strtod_l+0x146>
 8008bc4:	2f08      	cmp	r7, #8
 8008bc6:	bfd8      	it	le
 8008bc8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008bca:	f100 0001 	add.w	r0, r0, #1
 8008bce:	bfda      	itte	le
 8008bd0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bd4:	9309      	strle	r3, [sp, #36]	; 0x24
 8008bd6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008bda:	3701      	adds	r7, #1
 8008bdc:	901d      	str	r0, [sp, #116]	; 0x74
 8008bde:	e7bf      	b.n	8008b60 <_strtod_l+0x158>
 8008be0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008be2:	195a      	adds	r2, r3, r5
 8008be4:	921d      	str	r2, [sp, #116]	; 0x74
 8008be6:	5d5b      	ldrb	r3, [r3, r5]
 8008be8:	2f00      	cmp	r7, #0
 8008bea:	d037      	beq.n	8008c5c <_strtod_l+0x254>
 8008bec:	9007      	str	r0, [sp, #28]
 8008bee:	463d      	mov	r5, r7
 8008bf0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008bf4:	2a09      	cmp	r2, #9
 8008bf6:	d912      	bls.n	8008c1e <_strtod_l+0x216>
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	e7c2      	b.n	8008b82 <_strtod_l+0x17a>
 8008bfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	921d      	str	r2, [sp, #116]	; 0x74
 8008c02:	785b      	ldrb	r3, [r3, #1]
 8008c04:	3001      	adds	r0, #1
 8008c06:	2b30      	cmp	r3, #48	; 0x30
 8008c08:	d0f8      	beq.n	8008bfc <_strtod_l+0x1f4>
 8008c0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008c0e:	2a08      	cmp	r2, #8
 8008c10:	f200 84db 	bhi.w	80095ca <_strtod_l+0xbc2>
 8008c14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008c16:	9007      	str	r0, [sp, #28]
 8008c18:	2000      	movs	r0, #0
 8008c1a:	920a      	str	r2, [sp, #40]	; 0x28
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	3b30      	subs	r3, #48	; 0x30
 8008c20:	f100 0201 	add.w	r2, r0, #1
 8008c24:	d014      	beq.n	8008c50 <_strtod_l+0x248>
 8008c26:	9907      	ldr	r1, [sp, #28]
 8008c28:	4411      	add	r1, r2
 8008c2a:	9107      	str	r1, [sp, #28]
 8008c2c:	462a      	mov	r2, r5
 8008c2e:	eb00 0e05 	add.w	lr, r0, r5
 8008c32:	210a      	movs	r1, #10
 8008c34:	4572      	cmp	r2, lr
 8008c36:	d113      	bne.n	8008c60 <_strtod_l+0x258>
 8008c38:	182a      	adds	r2, r5, r0
 8008c3a:	2a08      	cmp	r2, #8
 8008c3c:	f105 0501 	add.w	r5, r5, #1
 8008c40:	4405      	add	r5, r0
 8008c42:	dc1c      	bgt.n	8008c7e <_strtod_l+0x276>
 8008c44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c46:	220a      	movs	r2, #10
 8008c48:	fb02 3301 	mla	r3, r2, r1, r3
 8008c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c4e:	2200      	movs	r2, #0
 8008c50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c52:	1c59      	adds	r1, r3, #1
 8008c54:	911d      	str	r1, [sp, #116]	; 0x74
 8008c56:	785b      	ldrb	r3, [r3, #1]
 8008c58:	4610      	mov	r0, r2
 8008c5a:	e7c9      	b.n	8008bf0 <_strtod_l+0x1e8>
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	e7d2      	b.n	8008c06 <_strtod_l+0x1fe>
 8008c60:	2a08      	cmp	r2, #8
 8008c62:	dc04      	bgt.n	8008c6e <_strtod_l+0x266>
 8008c64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c66:	434e      	muls	r6, r1
 8008c68:	9609      	str	r6, [sp, #36]	; 0x24
 8008c6a:	3201      	adds	r2, #1
 8008c6c:	e7e2      	b.n	8008c34 <_strtod_l+0x22c>
 8008c6e:	f102 0c01 	add.w	ip, r2, #1
 8008c72:	f1bc 0f10 	cmp.w	ip, #16
 8008c76:	bfd8      	it	le
 8008c78:	fb01 f909 	mulle.w	r9, r1, r9
 8008c7c:	e7f5      	b.n	8008c6a <_strtod_l+0x262>
 8008c7e:	2d10      	cmp	r5, #16
 8008c80:	bfdc      	itt	le
 8008c82:	220a      	movle	r2, #10
 8008c84:	fb02 3909 	mlale	r9, r2, r9, r3
 8008c88:	e7e1      	b.n	8008c4e <_strtod_l+0x246>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9307      	str	r3, [sp, #28]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	e77c      	b.n	8008b8c <_strtod_l+0x184>
 8008c92:	f04f 0c00 	mov.w	ip, #0
 8008c96:	f108 0302 	add.w	r3, r8, #2
 8008c9a:	931d      	str	r3, [sp, #116]	; 0x74
 8008c9c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008ca0:	e785      	b.n	8008bae <_strtod_l+0x1a6>
 8008ca2:	f04f 0c01 	mov.w	ip, #1
 8008ca6:	e7f6      	b.n	8008c96 <_strtod_l+0x28e>
 8008ca8:	0801fe04 	.word	0x0801fe04
 8008cac:	0801fb14 	.word	0x0801fb14
 8008cb0:	7ff00000 	.word	0x7ff00000
 8008cb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cb6:	1c59      	adds	r1, r3, #1
 8008cb8:	911d      	str	r1, [sp, #116]	; 0x74
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	2b30      	cmp	r3, #48	; 0x30
 8008cbe:	d0f9      	beq.n	8008cb4 <_strtod_l+0x2ac>
 8008cc0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008cc4:	2908      	cmp	r1, #8
 8008cc6:	f63f af79 	bhi.w	8008bbc <_strtod_l+0x1b4>
 8008cca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008cce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cd0:	9308      	str	r3, [sp, #32]
 8008cd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cd4:	1c59      	adds	r1, r3, #1
 8008cd6:	911d      	str	r1, [sp, #116]	; 0x74
 8008cd8:	785b      	ldrb	r3, [r3, #1]
 8008cda:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008cde:	2e09      	cmp	r6, #9
 8008ce0:	d937      	bls.n	8008d52 <_strtod_l+0x34a>
 8008ce2:	9e08      	ldr	r6, [sp, #32]
 8008ce4:	1b89      	subs	r1, r1, r6
 8008ce6:	2908      	cmp	r1, #8
 8008ce8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008cec:	dc02      	bgt.n	8008cf4 <_strtod_l+0x2ec>
 8008cee:	4576      	cmp	r6, lr
 8008cf0:	bfa8      	it	ge
 8008cf2:	4676      	movge	r6, lr
 8008cf4:	f1bc 0f00 	cmp.w	ip, #0
 8008cf8:	d000      	beq.n	8008cfc <_strtod_l+0x2f4>
 8008cfa:	4276      	negs	r6, r6
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	d14f      	bne.n	8008da0 <_strtod_l+0x398>
 8008d00:	9904      	ldr	r1, [sp, #16]
 8008d02:	4301      	orrs	r1, r0
 8008d04:	f47f aec2 	bne.w	8008a8c <_strtod_l+0x84>
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	f47f aedb 	bne.w	8008ac4 <_strtod_l+0xbc>
 8008d0e:	2b69      	cmp	r3, #105	; 0x69
 8008d10:	d027      	beq.n	8008d62 <_strtod_l+0x35a>
 8008d12:	dc24      	bgt.n	8008d5e <_strtod_l+0x356>
 8008d14:	2b49      	cmp	r3, #73	; 0x49
 8008d16:	d024      	beq.n	8008d62 <_strtod_l+0x35a>
 8008d18:	2b4e      	cmp	r3, #78	; 0x4e
 8008d1a:	f47f aed3 	bne.w	8008ac4 <_strtod_l+0xbc>
 8008d1e:	499e      	ldr	r1, [pc, #632]	; (8008f98 <_strtod_l+0x590>)
 8008d20:	a81d      	add	r0, sp, #116	; 0x74
 8008d22:	f001 fee3 	bl	800aaec <__match>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f43f aecc 	beq.w	8008ac4 <_strtod_l+0xbc>
 8008d2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b28      	cmp	r3, #40	; 0x28
 8008d32:	d12d      	bne.n	8008d90 <_strtod_l+0x388>
 8008d34:	4999      	ldr	r1, [pc, #612]	; (8008f9c <_strtod_l+0x594>)
 8008d36:	aa20      	add	r2, sp, #128	; 0x80
 8008d38:	a81d      	add	r0, sp, #116	; 0x74
 8008d3a:	f001 feeb 	bl	800ab14 <__hexnan>
 8008d3e:	2805      	cmp	r0, #5
 8008d40:	d126      	bne.n	8008d90 <_strtod_l+0x388>
 8008d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d44:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008d48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008d4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008d50:	e69c      	b.n	8008a8c <_strtod_l+0x84>
 8008d52:	210a      	movs	r1, #10
 8008d54:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008d58:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d5c:	e7b9      	b.n	8008cd2 <_strtod_l+0x2ca>
 8008d5e:	2b6e      	cmp	r3, #110	; 0x6e
 8008d60:	e7db      	b.n	8008d1a <_strtod_l+0x312>
 8008d62:	498f      	ldr	r1, [pc, #572]	; (8008fa0 <_strtod_l+0x598>)
 8008d64:	a81d      	add	r0, sp, #116	; 0x74
 8008d66:	f001 fec1 	bl	800aaec <__match>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	f43f aeaa 	beq.w	8008ac4 <_strtod_l+0xbc>
 8008d70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d72:	498c      	ldr	r1, [pc, #560]	; (8008fa4 <_strtod_l+0x59c>)
 8008d74:	3b01      	subs	r3, #1
 8008d76:	a81d      	add	r0, sp, #116	; 0x74
 8008d78:	931d      	str	r3, [sp, #116]	; 0x74
 8008d7a:	f001 feb7 	bl	800aaec <__match>
 8008d7e:	b910      	cbnz	r0, 8008d86 <_strtod_l+0x37e>
 8008d80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d82:	3301      	adds	r3, #1
 8008d84:	931d      	str	r3, [sp, #116]	; 0x74
 8008d86:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008fb4 <_strtod_l+0x5ac>
 8008d8a:	f04f 0a00 	mov.w	sl, #0
 8008d8e:	e67d      	b.n	8008a8c <_strtod_l+0x84>
 8008d90:	4885      	ldr	r0, [pc, #532]	; (8008fa8 <_strtod_l+0x5a0>)
 8008d92:	f002 ffb1 	bl	800bcf8 <nan>
 8008d96:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008d9a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008d9e:	e675      	b.n	8008a8c <_strtod_l+0x84>
 8008da0:	9b07      	ldr	r3, [sp, #28]
 8008da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008da4:	1af3      	subs	r3, r6, r3
 8008da6:	2f00      	cmp	r7, #0
 8008da8:	bf08      	it	eq
 8008daa:	462f      	moveq	r7, r5
 8008dac:	2d10      	cmp	r5, #16
 8008dae:	9308      	str	r3, [sp, #32]
 8008db0:	46a8      	mov	r8, r5
 8008db2:	bfa8      	it	ge
 8008db4:	f04f 0810 	movge.w	r8, #16
 8008db8:	f7f7 fbbc 	bl	8000534 <__aeabi_ui2d>
 8008dbc:	2d09      	cmp	r5, #9
 8008dbe:	4682      	mov	sl, r0
 8008dc0:	468b      	mov	fp, r1
 8008dc2:	dd13      	ble.n	8008dec <_strtod_l+0x3e4>
 8008dc4:	4b79      	ldr	r3, [pc, #484]	; (8008fac <_strtod_l+0x5a4>)
 8008dc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008dca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008dce:	f7f7 fc2b 	bl	8000628 <__aeabi_dmul>
 8008dd2:	4682      	mov	sl, r0
 8008dd4:	4648      	mov	r0, r9
 8008dd6:	468b      	mov	fp, r1
 8008dd8:	f7f7 fbac 	bl	8000534 <__aeabi_ui2d>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4650      	mov	r0, sl
 8008de2:	4659      	mov	r1, fp
 8008de4:	f7f7 fa6a 	bl	80002bc <__adddf3>
 8008de8:	4682      	mov	sl, r0
 8008dea:	468b      	mov	fp, r1
 8008dec:	2d0f      	cmp	r5, #15
 8008dee:	dc38      	bgt.n	8008e62 <_strtod_l+0x45a>
 8008df0:	9b08      	ldr	r3, [sp, #32]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f43f ae4a 	beq.w	8008a8c <_strtod_l+0x84>
 8008df8:	dd24      	ble.n	8008e44 <_strtod_l+0x43c>
 8008dfa:	2b16      	cmp	r3, #22
 8008dfc:	dc0b      	bgt.n	8008e16 <_strtod_l+0x40e>
 8008dfe:	4d6b      	ldr	r5, [pc, #428]	; (8008fac <_strtod_l+0x5a4>)
 8008e00:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008e04:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008e08:	4652      	mov	r2, sl
 8008e0a:	465b      	mov	r3, fp
 8008e0c:	f7f7 fc0c 	bl	8000628 <__aeabi_dmul>
 8008e10:	4682      	mov	sl, r0
 8008e12:	468b      	mov	fp, r1
 8008e14:	e63a      	b.n	8008a8c <_strtod_l+0x84>
 8008e16:	9a08      	ldr	r2, [sp, #32]
 8008e18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	db20      	blt.n	8008e62 <_strtod_l+0x45a>
 8008e20:	4c62      	ldr	r4, [pc, #392]	; (8008fac <_strtod_l+0x5a4>)
 8008e22:	f1c5 050f 	rsb	r5, r5, #15
 8008e26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e2a:	4652      	mov	r2, sl
 8008e2c:	465b      	mov	r3, fp
 8008e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e32:	f7f7 fbf9 	bl	8000628 <__aeabi_dmul>
 8008e36:	9b08      	ldr	r3, [sp, #32]
 8008e38:	1b5d      	subs	r5, r3, r5
 8008e3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e42:	e7e3      	b.n	8008e0c <_strtod_l+0x404>
 8008e44:	9b08      	ldr	r3, [sp, #32]
 8008e46:	3316      	adds	r3, #22
 8008e48:	db0b      	blt.n	8008e62 <_strtod_l+0x45a>
 8008e4a:	9b07      	ldr	r3, [sp, #28]
 8008e4c:	4a57      	ldr	r2, [pc, #348]	; (8008fac <_strtod_l+0x5a4>)
 8008e4e:	1b9e      	subs	r6, r3, r6
 8008e50:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008e54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e58:	4650      	mov	r0, sl
 8008e5a:	4659      	mov	r1, fp
 8008e5c:	f7f7 fd0e 	bl	800087c <__aeabi_ddiv>
 8008e60:	e7d6      	b.n	8008e10 <_strtod_l+0x408>
 8008e62:	9b08      	ldr	r3, [sp, #32]
 8008e64:	eba5 0808 	sub.w	r8, r5, r8
 8008e68:	4498      	add	r8, r3
 8008e6a:	f1b8 0f00 	cmp.w	r8, #0
 8008e6e:	dd71      	ble.n	8008f54 <_strtod_l+0x54c>
 8008e70:	f018 030f 	ands.w	r3, r8, #15
 8008e74:	d00a      	beq.n	8008e8c <_strtod_l+0x484>
 8008e76:	494d      	ldr	r1, [pc, #308]	; (8008fac <_strtod_l+0x5a4>)
 8008e78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e7c:	4652      	mov	r2, sl
 8008e7e:	465b      	mov	r3, fp
 8008e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e84:	f7f7 fbd0 	bl	8000628 <__aeabi_dmul>
 8008e88:	4682      	mov	sl, r0
 8008e8a:	468b      	mov	fp, r1
 8008e8c:	f038 080f 	bics.w	r8, r8, #15
 8008e90:	d04d      	beq.n	8008f2e <_strtod_l+0x526>
 8008e92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e96:	dd22      	ble.n	8008ede <_strtod_l+0x4d6>
 8008e98:	2500      	movs	r5, #0
 8008e9a:	462e      	mov	r6, r5
 8008e9c:	9509      	str	r5, [sp, #36]	; 0x24
 8008e9e:	9507      	str	r5, [sp, #28]
 8008ea0:	2322      	movs	r3, #34	; 0x22
 8008ea2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008fb4 <_strtod_l+0x5ac>
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	f04f 0a00 	mov.w	sl, #0
 8008eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f43f adec 	beq.w	8008a8c <_strtod_l+0x84>
 8008eb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f001 ff34 	bl	800ad24 <_Bfree>
 8008ebc:	9907      	ldr	r1, [sp, #28]
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f001 ff30 	bl	800ad24 <_Bfree>
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f001 ff2c 	bl	800ad24 <_Bfree>
 8008ecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f001 ff28 	bl	800ad24 <_Bfree>
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f001 ff24 	bl	800ad24 <_Bfree>
 8008edc:	e5d6      	b.n	8008a8c <_strtod_l+0x84>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	4659      	mov	r1, fp
 8008ee8:	4699      	mov	r9, r3
 8008eea:	f1b8 0f01 	cmp.w	r8, #1
 8008eee:	dc21      	bgt.n	8008f34 <_strtod_l+0x52c>
 8008ef0:	b10b      	cbz	r3, 8008ef6 <_strtod_l+0x4ee>
 8008ef2:	4682      	mov	sl, r0
 8008ef4:	468b      	mov	fp, r1
 8008ef6:	4b2e      	ldr	r3, [pc, #184]	; (8008fb0 <_strtod_l+0x5a8>)
 8008ef8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008efc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f00:	4652      	mov	r2, sl
 8008f02:	465b      	mov	r3, fp
 8008f04:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008f08:	f7f7 fb8e 	bl	8000628 <__aeabi_dmul>
 8008f0c:	4b29      	ldr	r3, [pc, #164]	; (8008fb4 <_strtod_l+0x5ac>)
 8008f0e:	460a      	mov	r2, r1
 8008f10:	400b      	ands	r3, r1
 8008f12:	4929      	ldr	r1, [pc, #164]	; (8008fb8 <_strtod_l+0x5b0>)
 8008f14:	428b      	cmp	r3, r1
 8008f16:	4682      	mov	sl, r0
 8008f18:	d8be      	bhi.n	8008e98 <_strtod_l+0x490>
 8008f1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f1e:	428b      	cmp	r3, r1
 8008f20:	bf86      	itte	hi
 8008f22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008fbc <_strtod_l+0x5b4>
 8008f26:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	e081      	b.n	8009038 <_strtod_l+0x630>
 8008f34:	f018 0f01 	tst.w	r8, #1
 8008f38:	d007      	beq.n	8008f4a <_strtod_l+0x542>
 8008f3a:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <_strtod_l+0x5a8>)
 8008f3c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f7f7 fb70 	bl	8000628 <__aeabi_dmul>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f109 0901 	add.w	r9, r9, #1
 8008f4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f52:	e7ca      	b.n	8008eea <_strtod_l+0x4e2>
 8008f54:	d0eb      	beq.n	8008f2e <_strtod_l+0x526>
 8008f56:	f1c8 0800 	rsb	r8, r8, #0
 8008f5a:	f018 020f 	ands.w	r2, r8, #15
 8008f5e:	d00a      	beq.n	8008f76 <_strtod_l+0x56e>
 8008f60:	4b12      	ldr	r3, [pc, #72]	; (8008fac <_strtod_l+0x5a4>)
 8008f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f66:	4650      	mov	r0, sl
 8008f68:	4659      	mov	r1, fp
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	f7f7 fc85 	bl	800087c <__aeabi_ddiv>
 8008f72:	4682      	mov	sl, r0
 8008f74:	468b      	mov	fp, r1
 8008f76:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008f7a:	d0d8      	beq.n	8008f2e <_strtod_l+0x526>
 8008f7c:	f1b8 0f1f 	cmp.w	r8, #31
 8008f80:	dd1e      	ble.n	8008fc0 <_strtod_l+0x5b8>
 8008f82:	2500      	movs	r5, #0
 8008f84:	462e      	mov	r6, r5
 8008f86:	9509      	str	r5, [sp, #36]	; 0x24
 8008f88:	9507      	str	r5, [sp, #28]
 8008f8a:	2322      	movs	r3, #34	; 0x22
 8008f8c:	f04f 0a00 	mov.w	sl, #0
 8008f90:	f04f 0b00 	mov.w	fp, #0
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	e789      	b.n	8008eac <_strtod_l+0x4a4>
 8008f98:	0801fae5 	.word	0x0801fae5
 8008f9c:	0801fb28 	.word	0x0801fb28
 8008fa0:	0801fadd 	.word	0x0801fadd
 8008fa4:	0801fd20 	.word	0x0801fd20
 8008fa8:	0801fc1b 	.word	0x0801fc1b
 8008fac:	0801fea0 	.word	0x0801fea0
 8008fb0:	0801fe78 	.word	0x0801fe78
 8008fb4:	7ff00000 	.word	0x7ff00000
 8008fb8:	7ca00000 	.word	0x7ca00000
 8008fbc:	7fefffff 	.word	0x7fefffff
 8008fc0:	f018 0310 	ands.w	r3, r8, #16
 8008fc4:	bf18      	it	ne
 8008fc6:	236a      	movne	r3, #106	; 0x6a
 8008fc8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009380 <_strtod_l+0x978>
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	4650      	mov	r0, sl
 8008fd0:	4659      	mov	r1, fp
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f018 0f01 	tst.w	r8, #1
 8008fd8:	d004      	beq.n	8008fe4 <_strtod_l+0x5dc>
 8008fda:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008fde:	f7f7 fb23 	bl	8000628 <__aeabi_dmul>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008fe8:	f109 0908 	add.w	r9, r9, #8
 8008fec:	d1f2      	bne.n	8008fd4 <_strtod_l+0x5cc>
 8008fee:	b10b      	cbz	r3, 8008ff4 <_strtod_l+0x5ec>
 8008ff0:	4682      	mov	sl, r0
 8008ff2:	468b      	mov	fp, r1
 8008ff4:	9b04      	ldr	r3, [sp, #16]
 8008ff6:	b1bb      	cbz	r3, 8009028 <_strtod_l+0x620>
 8008ff8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008ffc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009000:	2b00      	cmp	r3, #0
 8009002:	4659      	mov	r1, fp
 8009004:	dd10      	ble.n	8009028 <_strtod_l+0x620>
 8009006:	2b1f      	cmp	r3, #31
 8009008:	f340 8128 	ble.w	800925c <_strtod_l+0x854>
 800900c:	2b34      	cmp	r3, #52	; 0x34
 800900e:	bfde      	ittt	le
 8009010:	3b20      	suble	r3, #32
 8009012:	f04f 32ff 	movle.w	r2, #4294967295
 8009016:	fa02 f303 	lslle.w	r3, r2, r3
 800901a:	f04f 0a00 	mov.w	sl, #0
 800901e:	bfcc      	ite	gt
 8009020:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009024:	ea03 0b01 	andle.w	fp, r3, r1
 8009028:	2200      	movs	r2, #0
 800902a:	2300      	movs	r3, #0
 800902c:	4650      	mov	r0, sl
 800902e:	4659      	mov	r1, fp
 8009030:	f7f7 fd62 	bl	8000af8 <__aeabi_dcmpeq>
 8009034:	2800      	cmp	r0, #0
 8009036:	d1a4      	bne.n	8008f82 <_strtod_l+0x57a>
 8009038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800903e:	462b      	mov	r3, r5
 8009040:	463a      	mov	r2, r7
 8009042:	4620      	mov	r0, r4
 8009044:	f001 feda 	bl	800adfc <__s2b>
 8009048:	9009      	str	r0, [sp, #36]	; 0x24
 800904a:	2800      	cmp	r0, #0
 800904c:	f43f af24 	beq.w	8008e98 <_strtod_l+0x490>
 8009050:	9b07      	ldr	r3, [sp, #28]
 8009052:	1b9e      	subs	r6, r3, r6
 8009054:	9b08      	ldr	r3, [sp, #32]
 8009056:	2b00      	cmp	r3, #0
 8009058:	bfb4      	ite	lt
 800905a:	4633      	movlt	r3, r6
 800905c:	2300      	movge	r3, #0
 800905e:	9310      	str	r3, [sp, #64]	; 0x40
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	2500      	movs	r5, #0
 8009064:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009068:	9318      	str	r3, [sp, #96]	; 0x60
 800906a:	462e      	mov	r6, r5
 800906c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906e:	4620      	mov	r0, r4
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	f001 fe17 	bl	800aca4 <_Balloc>
 8009076:	9007      	str	r0, [sp, #28]
 8009078:	2800      	cmp	r0, #0
 800907a:	f43f af11 	beq.w	8008ea0 <_strtod_l+0x498>
 800907e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009080:	691a      	ldr	r2, [r3, #16]
 8009082:	3202      	adds	r2, #2
 8009084:	f103 010c 	add.w	r1, r3, #12
 8009088:	0092      	lsls	r2, r2, #2
 800908a:	300c      	adds	r0, #12
 800908c:	f001 fdfc 	bl	800ac88 <memcpy>
 8009090:	ec4b ab10 	vmov	d0, sl, fp
 8009094:	aa20      	add	r2, sp, #128	; 0x80
 8009096:	a91f      	add	r1, sp, #124	; 0x7c
 8009098:	4620      	mov	r0, r4
 800909a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800909e:	f002 f9e9 	bl	800b474 <__d2b>
 80090a2:	901e      	str	r0, [sp, #120]	; 0x78
 80090a4:	2800      	cmp	r0, #0
 80090a6:	f43f aefb 	beq.w	8008ea0 <_strtod_l+0x498>
 80090aa:	2101      	movs	r1, #1
 80090ac:	4620      	mov	r0, r4
 80090ae:	f001 ff3f 	bl	800af30 <__i2b>
 80090b2:	4606      	mov	r6, r0
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f43f aef3 	beq.w	8008ea0 <_strtod_l+0x498>
 80090ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80090bc:	9904      	ldr	r1, [sp, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bfab      	itete	ge
 80090c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80090c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80090c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80090c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80090cc:	bfac      	ite	ge
 80090ce:	eb03 0902 	addge.w	r9, r3, r2
 80090d2:	1ad7      	sublt	r7, r2, r3
 80090d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80090d6:	eba3 0801 	sub.w	r8, r3, r1
 80090da:	4490      	add	r8, r2
 80090dc:	4ba3      	ldr	r3, [pc, #652]	; (800936c <_strtod_l+0x964>)
 80090de:	f108 38ff 	add.w	r8, r8, #4294967295
 80090e2:	4598      	cmp	r8, r3
 80090e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090e8:	f280 80cc 	bge.w	8009284 <_strtod_l+0x87c>
 80090ec:	eba3 0308 	sub.w	r3, r3, r8
 80090f0:	2b1f      	cmp	r3, #31
 80090f2:	eba2 0203 	sub.w	r2, r2, r3
 80090f6:	f04f 0101 	mov.w	r1, #1
 80090fa:	f300 80b6 	bgt.w	800926a <_strtod_l+0x862>
 80090fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009102:	9311      	str	r3, [sp, #68]	; 0x44
 8009104:	2300      	movs	r3, #0
 8009106:	930c      	str	r3, [sp, #48]	; 0x30
 8009108:	eb09 0802 	add.w	r8, r9, r2
 800910c:	9b04      	ldr	r3, [sp, #16]
 800910e:	45c1      	cmp	r9, r8
 8009110:	4417      	add	r7, r2
 8009112:	441f      	add	r7, r3
 8009114:	464b      	mov	r3, r9
 8009116:	bfa8      	it	ge
 8009118:	4643      	movge	r3, r8
 800911a:	42bb      	cmp	r3, r7
 800911c:	bfa8      	it	ge
 800911e:	463b      	movge	r3, r7
 8009120:	2b00      	cmp	r3, #0
 8009122:	bfc2      	ittt	gt
 8009124:	eba8 0803 	subgt.w	r8, r8, r3
 8009128:	1aff      	subgt	r7, r7, r3
 800912a:	eba9 0903 	subgt.w	r9, r9, r3
 800912e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	dd17      	ble.n	8009164 <_strtod_l+0x75c>
 8009134:	4631      	mov	r1, r6
 8009136:	461a      	mov	r2, r3
 8009138:	4620      	mov	r0, r4
 800913a:	f001 ffb5 	bl	800b0a8 <__pow5mult>
 800913e:	4606      	mov	r6, r0
 8009140:	2800      	cmp	r0, #0
 8009142:	f43f aead 	beq.w	8008ea0 <_strtod_l+0x498>
 8009146:	4601      	mov	r1, r0
 8009148:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800914a:	4620      	mov	r0, r4
 800914c:	f001 ff06 	bl	800af5c <__multiply>
 8009150:	900f      	str	r0, [sp, #60]	; 0x3c
 8009152:	2800      	cmp	r0, #0
 8009154:	f43f aea4 	beq.w	8008ea0 <_strtod_l+0x498>
 8009158:	991e      	ldr	r1, [sp, #120]	; 0x78
 800915a:	4620      	mov	r0, r4
 800915c:	f001 fde2 	bl	800ad24 <_Bfree>
 8009160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009162:	931e      	str	r3, [sp, #120]	; 0x78
 8009164:	f1b8 0f00 	cmp.w	r8, #0
 8009168:	f300 8091 	bgt.w	800928e <_strtod_l+0x886>
 800916c:	9b08      	ldr	r3, [sp, #32]
 800916e:	2b00      	cmp	r3, #0
 8009170:	dd08      	ble.n	8009184 <_strtod_l+0x77c>
 8009172:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009174:	9907      	ldr	r1, [sp, #28]
 8009176:	4620      	mov	r0, r4
 8009178:	f001 ff96 	bl	800b0a8 <__pow5mult>
 800917c:	9007      	str	r0, [sp, #28]
 800917e:	2800      	cmp	r0, #0
 8009180:	f43f ae8e 	beq.w	8008ea0 <_strtod_l+0x498>
 8009184:	2f00      	cmp	r7, #0
 8009186:	dd08      	ble.n	800919a <_strtod_l+0x792>
 8009188:	9907      	ldr	r1, [sp, #28]
 800918a:	463a      	mov	r2, r7
 800918c:	4620      	mov	r0, r4
 800918e:	f001 ffe5 	bl	800b15c <__lshift>
 8009192:	9007      	str	r0, [sp, #28]
 8009194:	2800      	cmp	r0, #0
 8009196:	f43f ae83 	beq.w	8008ea0 <_strtod_l+0x498>
 800919a:	f1b9 0f00 	cmp.w	r9, #0
 800919e:	dd08      	ble.n	80091b2 <_strtod_l+0x7aa>
 80091a0:	4631      	mov	r1, r6
 80091a2:	464a      	mov	r2, r9
 80091a4:	4620      	mov	r0, r4
 80091a6:	f001 ffd9 	bl	800b15c <__lshift>
 80091aa:	4606      	mov	r6, r0
 80091ac:	2800      	cmp	r0, #0
 80091ae:	f43f ae77 	beq.w	8008ea0 <_strtod_l+0x498>
 80091b2:	9a07      	ldr	r2, [sp, #28]
 80091b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80091b6:	4620      	mov	r0, r4
 80091b8:	f002 f858 	bl	800b26c <__mdiff>
 80091bc:	4605      	mov	r5, r0
 80091be:	2800      	cmp	r0, #0
 80091c0:	f43f ae6e 	beq.w	8008ea0 <_strtod_l+0x498>
 80091c4:	68c3      	ldr	r3, [r0, #12]
 80091c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091c8:	2300      	movs	r3, #0
 80091ca:	60c3      	str	r3, [r0, #12]
 80091cc:	4631      	mov	r1, r6
 80091ce:	f002 f831 	bl	800b234 <__mcmp>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	da65      	bge.n	80092a2 <_strtod_l+0x89a>
 80091d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091d8:	ea53 030a 	orrs.w	r3, r3, sl
 80091dc:	f040 8087 	bne.w	80092ee <_strtod_l+0x8e6>
 80091e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f040 8082 	bne.w	80092ee <_strtod_l+0x8e6>
 80091ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091ee:	0d1b      	lsrs	r3, r3, #20
 80091f0:	051b      	lsls	r3, r3, #20
 80091f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091f6:	d97a      	bls.n	80092ee <_strtod_l+0x8e6>
 80091f8:	696b      	ldr	r3, [r5, #20]
 80091fa:	b913      	cbnz	r3, 8009202 <_strtod_l+0x7fa>
 80091fc:	692b      	ldr	r3, [r5, #16]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	dd75      	ble.n	80092ee <_strtod_l+0x8e6>
 8009202:	4629      	mov	r1, r5
 8009204:	2201      	movs	r2, #1
 8009206:	4620      	mov	r0, r4
 8009208:	f001 ffa8 	bl	800b15c <__lshift>
 800920c:	4631      	mov	r1, r6
 800920e:	4605      	mov	r5, r0
 8009210:	f002 f810 	bl	800b234 <__mcmp>
 8009214:	2800      	cmp	r0, #0
 8009216:	dd6a      	ble.n	80092ee <_strtod_l+0x8e6>
 8009218:	9904      	ldr	r1, [sp, #16]
 800921a:	4a55      	ldr	r2, [pc, #340]	; (8009370 <_strtod_l+0x968>)
 800921c:	465b      	mov	r3, fp
 800921e:	2900      	cmp	r1, #0
 8009220:	f000 8085 	beq.w	800932e <_strtod_l+0x926>
 8009224:	ea02 010b 	and.w	r1, r2, fp
 8009228:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800922c:	dc7f      	bgt.n	800932e <_strtod_l+0x926>
 800922e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009232:	f77f aeaa 	ble.w	8008f8a <_strtod_l+0x582>
 8009236:	4a4f      	ldr	r2, [pc, #316]	; (8009374 <_strtod_l+0x96c>)
 8009238:	2300      	movs	r3, #0
 800923a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800923e:	4650      	mov	r0, sl
 8009240:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009244:	4659      	mov	r1, fp
 8009246:	f7f7 f9ef 	bl	8000628 <__aeabi_dmul>
 800924a:	460b      	mov	r3, r1
 800924c:	4303      	orrs	r3, r0
 800924e:	bf08      	it	eq
 8009250:	2322      	moveq	r3, #34	; 0x22
 8009252:	4682      	mov	sl, r0
 8009254:	468b      	mov	fp, r1
 8009256:	bf08      	it	eq
 8009258:	6023      	streq	r3, [r4, #0]
 800925a:	e62b      	b.n	8008eb4 <_strtod_l+0x4ac>
 800925c:	f04f 32ff 	mov.w	r2, #4294967295
 8009260:	fa02 f303 	lsl.w	r3, r2, r3
 8009264:	ea03 0a0a 	and.w	sl, r3, sl
 8009268:	e6de      	b.n	8009028 <_strtod_l+0x620>
 800926a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800926e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009272:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009276:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800927a:	fa01 f308 	lsl.w	r3, r1, r8
 800927e:	930c      	str	r3, [sp, #48]	; 0x30
 8009280:	9111      	str	r1, [sp, #68]	; 0x44
 8009282:	e741      	b.n	8009108 <_strtod_l+0x700>
 8009284:	2300      	movs	r3, #0
 8009286:	930c      	str	r3, [sp, #48]	; 0x30
 8009288:	2301      	movs	r3, #1
 800928a:	9311      	str	r3, [sp, #68]	; 0x44
 800928c:	e73c      	b.n	8009108 <_strtod_l+0x700>
 800928e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009290:	4642      	mov	r2, r8
 8009292:	4620      	mov	r0, r4
 8009294:	f001 ff62 	bl	800b15c <__lshift>
 8009298:	901e      	str	r0, [sp, #120]	; 0x78
 800929a:	2800      	cmp	r0, #0
 800929c:	f47f af66 	bne.w	800916c <_strtod_l+0x764>
 80092a0:	e5fe      	b.n	8008ea0 <_strtod_l+0x498>
 80092a2:	465f      	mov	r7, fp
 80092a4:	d16e      	bne.n	8009384 <_strtod_l+0x97c>
 80092a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092ac:	b342      	cbz	r2, 8009300 <_strtod_l+0x8f8>
 80092ae:	4a32      	ldr	r2, [pc, #200]	; (8009378 <_strtod_l+0x970>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d128      	bne.n	8009306 <_strtod_l+0x8fe>
 80092b4:	9b04      	ldr	r3, [sp, #16]
 80092b6:	4650      	mov	r0, sl
 80092b8:	b1eb      	cbz	r3, 80092f6 <_strtod_l+0x8ee>
 80092ba:	4a2d      	ldr	r2, [pc, #180]	; (8009370 <_strtod_l+0x968>)
 80092bc:	403a      	ands	r2, r7
 80092be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80092c2:	f04f 31ff 	mov.w	r1, #4294967295
 80092c6:	d819      	bhi.n	80092fc <_strtod_l+0x8f4>
 80092c8:	0d12      	lsrs	r2, r2, #20
 80092ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092ce:	fa01 f303 	lsl.w	r3, r1, r3
 80092d2:	4298      	cmp	r0, r3
 80092d4:	d117      	bne.n	8009306 <_strtod_l+0x8fe>
 80092d6:	4b29      	ldr	r3, [pc, #164]	; (800937c <_strtod_l+0x974>)
 80092d8:	429f      	cmp	r7, r3
 80092da:	d102      	bne.n	80092e2 <_strtod_l+0x8da>
 80092dc:	3001      	adds	r0, #1
 80092de:	f43f addf 	beq.w	8008ea0 <_strtod_l+0x498>
 80092e2:	4b23      	ldr	r3, [pc, #140]	; (8009370 <_strtod_l+0x968>)
 80092e4:	403b      	ands	r3, r7
 80092e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80092ea:	f04f 0a00 	mov.w	sl, #0
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1a0      	bne.n	8009236 <_strtod_l+0x82e>
 80092f4:	e5de      	b.n	8008eb4 <_strtod_l+0x4ac>
 80092f6:	f04f 33ff 	mov.w	r3, #4294967295
 80092fa:	e7ea      	b.n	80092d2 <_strtod_l+0x8ca>
 80092fc:	460b      	mov	r3, r1
 80092fe:	e7e8      	b.n	80092d2 <_strtod_l+0x8ca>
 8009300:	ea53 030a 	orrs.w	r3, r3, sl
 8009304:	d088      	beq.n	8009218 <_strtod_l+0x810>
 8009306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009308:	b1db      	cbz	r3, 8009342 <_strtod_l+0x93a>
 800930a:	423b      	tst	r3, r7
 800930c:	d0ef      	beq.n	80092ee <_strtod_l+0x8e6>
 800930e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009310:	9a04      	ldr	r2, [sp, #16]
 8009312:	4650      	mov	r0, sl
 8009314:	4659      	mov	r1, fp
 8009316:	b1c3      	cbz	r3, 800934a <_strtod_l+0x942>
 8009318:	f7ff fb58 	bl	80089cc <sulp>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009324:	f7f6 ffca 	bl	80002bc <__adddf3>
 8009328:	4682      	mov	sl, r0
 800932a:	468b      	mov	fp, r1
 800932c:	e7df      	b.n	80092ee <_strtod_l+0x8e6>
 800932e:	4013      	ands	r3, r2
 8009330:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009334:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009338:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800933c:	f04f 3aff 	mov.w	sl, #4294967295
 8009340:	e7d5      	b.n	80092ee <_strtod_l+0x8e6>
 8009342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009344:	ea13 0f0a 	tst.w	r3, sl
 8009348:	e7e0      	b.n	800930c <_strtod_l+0x904>
 800934a:	f7ff fb3f 	bl	80089cc <sulp>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009356:	f7f6 ffaf 	bl	80002b8 <__aeabi_dsub>
 800935a:	2200      	movs	r2, #0
 800935c:	2300      	movs	r3, #0
 800935e:	4682      	mov	sl, r0
 8009360:	468b      	mov	fp, r1
 8009362:	f7f7 fbc9 	bl	8000af8 <__aeabi_dcmpeq>
 8009366:	2800      	cmp	r0, #0
 8009368:	d0c1      	beq.n	80092ee <_strtod_l+0x8e6>
 800936a:	e60e      	b.n	8008f8a <_strtod_l+0x582>
 800936c:	fffffc02 	.word	0xfffffc02
 8009370:	7ff00000 	.word	0x7ff00000
 8009374:	39500000 	.word	0x39500000
 8009378:	000fffff 	.word	0x000fffff
 800937c:	7fefffff 	.word	0x7fefffff
 8009380:	0801fb40 	.word	0x0801fb40
 8009384:	4631      	mov	r1, r6
 8009386:	4628      	mov	r0, r5
 8009388:	f002 f8d0 	bl	800b52c <__ratio>
 800938c:	ec59 8b10 	vmov	r8, r9, d0
 8009390:	ee10 0a10 	vmov	r0, s0
 8009394:	2200      	movs	r2, #0
 8009396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800939a:	4649      	mov	r1, r9
 800939c:	f7f7 fbc0 	bl	8000b20 <__aeabi_dcmple>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d07c      	beq.n	800949e <_strtod_l+0xa96>
 80093a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d04c      	beq.n	8009444 <_strtod_l+0xa3c>
 80093aa:	4b95      	ldr	r3, [pc, #596]	; (8009600 <_strtod_l+0xbf8>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80093b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009600 <_strtod_l+0xbf8>
 80093b6:	f04f 0800 	mov.w	r8, #0
 80093ba:	4b92      	ldr	r3, [pc, #584]	; (8009604 <_strtod_l+0xbfc>)
 80093bc:	403b      	ands	r3, r7
 80093be:	9311      	str	r3, [sp, #68]	; 0x44
 80093c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093c2:	4b91      	ldr	r3, [pc, #580]	; (8009608 <_strtod_l+0xc00>)
 80093c4:	429a      	cmp	r2, r3
 80093c6:	f040 80b2 	bne.w	800952e <_strtod_l+0xb26>
 80093ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80093d6:	ec4b ab10 	vmov	d0, sl, fp
 80093da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80093de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093e2:	f001 ffcb 	bl	800b37c <__ulp>
 80093e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093ea:	ec53 2b10 	vmov	r2, r3, d0
 80093ee:	f7f7 f91b 	bl	8000628 <__aeabi_dmul>
 80093f2:	4652      	mov	r2, sl
 80093f4:	465b      	mov	r3, fp
 80093f6:	f7f6 ff61 	bl	80002bc <__adddf3>
 80093fa:	460b      	mov	r3, r1
 80093fc:	4981      	ldr	r1, [pc, #516]	; (8009604 <_strtod_l+0xbfc>)
 80093fe:	4a83      	ldr	r2, [pc, #524]	; (800960c <_strtod_l+0xc04>)
 8009400:	4019      	ands	r1, r3
 8009402:	4291      	cmp	r1, r2
 8009404:	4682      	mov	sl, r0
 8009406:	d95e      	bls.n	80094c6 <_strtod_l+0xabe>
 8009408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800940a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800940e:	4293      	cmp	r3, r2
 8009410:	d103      	bne.n	800941a <_strtod_l+0xa12>
 8009412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009414:	3301      	adds	r3, #1
 8009416:	f43f ad43 	beq.w	8008ea0 <_strtod_l+0x498>
 800941a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009618 <_strtod_l+0xc10>
 800941e:	f04f 3aff 	mov.w	sl, #4294967295
 8009422:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009424:	4620      	mov	r0, r4
 8009426:	f001 fc7d 	bl	800ad24 <_Bfree>
 800942a:	9907      	ldr	r1, [sp, #28]
 800942c:	4620      	mov	r0, r4
 800942e:	f001 fc79 	bl	800ad24 <_Bfree>
 8009432:	4631      	mov	r1, r6
 8009434:	4620      	mov	r0, r4
 8009436:	f001 fc75 	bl	800ad24 <_Bfree>
 800943a:	4629      	mov	r1, r5
 800943c:	4620      	mov	r0, r4
 800943e:	f001 fc71 	bl	800ad24 <_Bfree>
 8009442:	e613      	b.n	800906c <_strtod_l+0x664>
 8009444:	f1ba 0f00 	cmp.w	sl, #0
 8009448:	d11b      	bne.n	8009482 <_strtod_l+0xa7a>
 800944a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800944e:	b9f3      	cbnz	r3, 800948e <_strtod_l+0xa86>
 8009450:	4b6b      	ldr	r3, [pc, #428]	; (8009600 <_strtod_l+0xbf8>)
 8009452:	2200      	movs	r2, #0
 8009454:	4640      	mov	r0, r8
 8009456:	4649      	mov	r1, r9
 8009458:	f7f7 fb58 	bl	8000b0c <__aeabi_dcmplt>
 800945c:	b9d0      	cbnz	r0, 8009494 <_strtod_l+0xa8c>
 800945e:	4640      	mov	r0, r8
 8009460:	4649      	mov	r1, r9
 8009462:	4b6b      	ldr	r3, [pc, #428]	; (8009610 <_strtod_l+0xc08>)
 8009464:	2200      	movs	r2, #0
 8009466:	f7f7 f8df 	bl	8000628 <__aeabi_dmul>
 800946a:	4680      	mov	r8, r0
 800946c:	4689      	mov	r9, r1
 800946e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009472:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009476:	931b      	str	r3, [sp, #108]	; 0x6c
 8009478:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800947c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009480:	e79b      	b.n	80093ba <_strtod_l+0x9b2>
 8009482:	f1ba 0f01 	cmp.w	sl, #1
 8009486:	d102      	bne.n	800948e <_strtod_l+0xa86>
 8009488:	2f00      	cmp	r7, #0
 800948a:	f43f ad7e 	beq.w	8008f8a <_strtod_l+0x582>
 800948e:	4b61      	ldr	r3, [pc, #388]	; (8009614 <_strtod_l+0xc0c>)
 8009490:	2200      	movs	r2, #0
 8009492:	e78c      	b.n	80093ae <_strtod_l+0x9a6>
 8009494:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009610 <_strtod_l+0xc08>
 8009498:	f04f 0800 	mov.w	r8, #0
 800949c:	e7e7      	b.n	800946e <_strtod_l+0xa66>
 800949e:	4b5c      	ldr	r3, [pc, #368]	; (8009610 <_strtod_l+0xc08>)
 80094a0:	4640      	mov	r0, r8
 80094a2:	4649      	mov	r1, r9
 80094a4:	2200      	movs	r2, #0
 80094a6:	f7f7 f8bf 	bl	8000628 <__aeabi_dmul>
 80094aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094ac:	4680      	mov	r8, r0
 80094ae:	4689      	mov	r9, r1
 80094b0:	b933      	cbnz	r3, 80094c0 <_strtod_l+0xab8>
 80094b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094b6:	9012      	str	r0, [sp, #72]	; 0x48
 80094b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80094ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80094be:	e7dd      	b.n	800947c <_strtod_l+0xa74>
 80094c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80094c4:	e7f9      	b.n	80094ba <_strtod_l+0xab2>
 80094c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80094ca:	9b04      	ldr	r3, [sp, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1a8      	bne.n	8009422 <_strtod_l+0xa1a>
 80094d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80094d6:	0d1b      	lsrs	r3, r3, #20
 80094d8:	051b      	lsls	r3, r3, #20
 80094da:	429a      	cmp	r2, r3
 80094dc:	d1a1      	bne.n	8009422 <_strtod_l+0xa1a>
 80094de:	4640      	mov	r0, r8
 80094e0:	4649      	mov	r1, r9
 80094e2:	f7f7 fc01 	bl	8000ce8 <__aeabi_d2lz>
 80094e6:	f7f7 f871 	bl	80005cc <__aeabi_l2d>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4640      	mov	r0, r8
 80094f0:	4649      	mov	r1, r9
 80094f2:	f7f6 fee1 	bl	80002b8 <__aeabi_dsub>
 80094f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094fc:	ea43 030a 	orr.w	r3, r3, sl
 8009500:	4313      	orrs	r3, r2
 8009502:	4680      	mov	r8, r0
 8009504:	4689      	mov	r9, r1
 8009506:	d053      	beq.n	80095b0 <_strtod_l+0xba8>
 8009508:	a335      	add	r3, pc, #212	; (adr r3, 80095e0 <_strtod_l+0xbd8>)
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f7f7 fafd 	bl	8000b0c <__aeabi_dcmplt>
 8009512:	2800      	cmp	r0, #0
 8009514:	f47f acce 	bne.w	8008eb4 <_strtod_l+0x4ac>
 8009518:	a333      	add	r3, pc, #204	; (adr r3, 80095e8 <_strtod_l+0xbe0>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	4640      	mov	r0, r8
 8009520:	4649      	mov	r1, r9
 8009522:	f7f7 fb11 	bl	8000b48 <__aeabi_dcmpgt>
 8009526:	2800      	cmp	r0, #0
 8009528:	f43f af7b 	beq.w	8009422 <_strtod_l+0xa1a>
 800952c:	e4c2      	b.n	8008eb4 <_strtod_l+0x4ac>
 800952e:	9b04      	ldr	r3, [sp, #16]
 8009530:	b333      	cbz	r3, 8009580 <_strtod_l+0xb78>
 8009532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009534:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009538:	d822      	bhi.n	8009580 <_strtod_l+0xb78>
 800953a:	a32d      	add	r3, pc, #180	; (adr r3, 80095f0 <_strtod_l+0xbe8>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	4640      	mov	r0, r8
 8009542:	4649      	mov	r1, r9
 8009544:	f7f7 faec 	bl	8000b20 <__aeabi_dcmple>
 8009548:	b1a0      	cbz	r0, 8009574 <_strtod_l+0xb6c>
 800954a:	4649      	mov	r1, r9
 800954c:	4640      	mov	r0, r8
 800954e:	f7f7 fb43 	bl	8000bd8 <__aeabi_d2uiz>
 8009552:	2801      	cmp	r0, #1
 8009554:	bf38      	it	cc
 8009556:	2001      	movcc	r0, #1
 8009558:	f7f6 ffec 	bl	8000534 <__aeabi_ui2d>
 800955c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800955e:	4680      	mov	r8, r0
 8009560:	4689      	mov	r9, r1
 8009562:	bb13      	cbnz	r3, 80095aa <_strtod_l+0xba2>
 8009564:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009568:	9014      	str	r0, [sp, #80]	; 0x50
 800956a:	9315      	str	r3, [sp, #84]	; 0x54
 800956c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009570:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009576:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009578:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800957c:	1a9b      	subs	r3, r3, r2
 800957e:	930d      	str	r3, [sp, #52]	; 0x34
 8009580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009584:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009588:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800958c:	f001 fef6 	bl	800b37c <__ulp>
 8009590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009594:	ec53 2b10 	vmov	r2, r3, d0
 8009598:	f7f7 f846 	bl	8000628 <__aeabi_dmul>
 800959c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80095a0:	f7f6 fe8c 	bl	80002bc <__adddf3>
 80095a4:	4682      	mov	sl, r0
 80095a6:	468b      	mov	fp, r1
 80095a8:	e78f      	b.n	80094ca <_strtod_l+0xac2>
 80095aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80095ae:	e7dd      	b.n	800956c <_strtod_l+0xb64>
 80095b0:	a311      	add	r3, pc, #68	; (adr r3, 80095f8 <_strtod_l+0xbf0>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	f7f7 faa9 	bl	8000b0c <__aeabi_dcmplt>
 80095ba:	e7b4      	b.n	8009526 <_strtod_l+0xb1e>
 80095bc:	2300      	movs	r3, #0
 80095be:	930e      	str	r3, [sp, #56]	; 0x38
 80095c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095c4:	6013      	str	r3, [r2, #0]
 80095c6:	f7ff ba65 	b.w	8008a94 <_strtod_l+0x8c>
 80095ca:	2b65      	cmp	r3, #101	; 0x65
 80095cc:	f43f ab5d 	beq.w	8008c8a <_strtod_l+0x282>
 80095d0:	2b45      	cmp	r3, #69	; 0x45
 80095d2:	f43f ab5a 	beq.w	8008c8a <_strtod_l+0x282>
 80095d6:	2201      	movs	r2, #1
 80095d8:	f7ff bb92 	b.w	8008d00 <_strtod_l+0x2f8>
 80095dc:	f3af 8000 	nop.w
 80095e0:	94a03595 	.word	0x94a03595
 80095e4:	3fdfffff 	.word	0x3fdfffff
 80095e8:	35afe535 	.word	0x35afe535
 80095ec:	3fe00000 	.word	0x3fe00000
 80095f0:	ffc00000 	.word	0xffc00000
 80095f4:	41dfffff 	.word	0x41dfffff
 80095f8:	94a03595 	.word	0x94a03595
 80095fc:	3fcfffff 	.word	0x3fcfffff
 8009600:	3ff00000 	.word	0x3ff00000
 8009604:	7ff00000 	.word	0x7ff00000
 8009608:	7fe00000 	.word	0x7fe00000
 800960c:	7c9fffff 	.word	0x7c9fffff
 8009610:	3fe00000 	.word	0x3fe00000
 8009614:	bff00000 	.word	0xbff00000
 8009618:	7fefffff 	.word	0x7fefffff

0800961c <_strtod_r>:
 800961c:	4b01      	ldr	r3, [pc, #4]	; (8009624 <_strtod_r+0x8>)
 800961e:	f7ff b9f3 	b.w	8008a08 <_strtod_l>
 8009622:	bf00      	nop
 8009624:	200000a4 	.word	0x200000a4

08009628 <strtod>:
 8009628:	460a      	mov	r2, r1
 800962a:	4601      	mov	r1, r0
 800962c:	4802      	ldr	r0, [pc, #8]	; (8009638 <strtod+0x10>)
 800962e:	4b03      	ldr	r3, [pc, #12]	; (800963c <strtod+0x14>)
 8009630:	6800      	ldr	r0, [r0, #0]
 8009632:	f7ff b9e9 	b.w	8008a08 <_strtod_l>
 8009636:	bf00      	nop
 8009638:	2000003c 	.word	0x2000003c
 800963c:	200000a4 	.word	0x200000a4

08009640 <strtok>:
 8009640:	4b16      	ldr	r3, [pc, #88]	; (800969c <strtok+0x5c>)
 8009642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009644:	681e      	ldr	r6, [r3, #0]
 8009646:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009648:	4605      	mov	r5, r0
 800964a:	b9fc      	cbnz	r4, 800968c <strtok+0x4c>
 800964c:	2050      	movs	r0, #80	; 0x50
 800964e:	9101      	str	r1, [sp, #4]
 8009650:	f001 fb00 	bl	800ac54 <malloc>
 8009654:	9901      	ldr	r1, [sp, #4]
 8009656:	65b0      	str	r0, [r6, #88]	; 0x58
 8009658:	4602      	mov	r2, r0
 800965a:	b920      	cbnz	r0, 8009666 <strtok+0x26>
 800965c:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <strtok+0x60>)
 800965e:	4811      	ldr	r0, [pc, #68]	; (80096a4 <strtok+0x64>)
 8009660:	2157      	movs	r1, #87	; 0x57
 8009662:	f000 f8d9 	bl	8009818 <__assert_func>
 8009666:	e9c0 4400 	strd	r4, r4, [r0]
 800966a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800966e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009672:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009676:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800967a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800967e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009682:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009686:	6184      	str	r4, [r0, #24]
 8009688:	7704      	strb	r4, [r0, #28]
 800968a:	6244      	str	r4, [r0, #36]	; 0x24
 800968c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800968e:	2301      	movs	r3, #1
 8009690:	4628      	mov	r0, r5
 8009692:	b002      	add	sp, #8
 8009694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009698:	f000 b806 	b.w	80096a8 <__strtok_r>
 800969c:	2000003c 	.word	0x2000003c
 80096a0:	0801fb68 	.word	0x0801fb68
 80096a4:	0801fb7f 	.word	0x0801fb7f

080096a8 <__strtok_r>:
 80096a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096aa:	b908      	cbnz	r0, 80096b0 <__strtok_r+0x8>
 80096ac:	6810      	ldr	r0, [r2, #0]
 80096ae:	b188      	cbz	r0, 80096d4 <__strtok_r+0x2c>
 80096b0:	4604      	mov	r4, r0
 80096b2:	4620      	mov	r0, r4
 80096b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80096b8:	460f      	mov	r7, r1
 80096ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80096be:	b91e      	cbnz	r6, 80096c8 <__strtok_r+0x20>
 80096c0:	b965      	cbnz	r5, 80096dc <__strtok_r+0x34>
 80096c2:	6015      	str	r5, [r2, #0]
 80096c4:	4628      	mov	r0, r5
 80096c6:	e005      	b.n	80096d4 <__strtok_r+0x2c>
 80096c8:	42b5      	cmp	r5, r6
 80096ca:	d1f6      	bne.n	80096ba <__strtok_r+0x12>
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1f0      	bne.n	80096b2 <__strtok_r+0xa>
 80096d0:	6014      	str	r4, [r2, #0]
 80096d2:	7003      	strb	r3, [r0, #0]
 80096d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d6:	461c      	mov	r4, r3
 80096d8:	e00c      	b.n	80096f4 <__strtok_r+0x4c>
 80096da:	b915      	cbnz	r5, 80096e2 <__strtok_r+0x3a>
 80096dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096e0:	460e      	mov	r6, r1
 80096e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80096e6:	42ab      	cmp	r3, r5
 80096e8:	d1f7      	bne.n	80096da <__strtok_r+0x32>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d0f3      	beq.n	80096d6 <__strtok_r+0x2e>
 80096ee:	2300      	movs	r3, #0
 80096f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80096f4:	6014      	str	r4, [r2, #0]
 80096f6:	e7ed      	b.n	80096d4 <__strtok_r+0x2c>

080096f8 <_strtol_l.isra.0>:
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fe:	d001      	beq.n	8009704 <_strtol_l.isra.0+0xc>
 8009700:	2b24      	cmp	r3, #36	; 0x24
 8009702:	d906      	bls.n	8009712 <_strtol_l.isra.0+0x1a>
 8009704:	f7fe fa90 	bl	8007c28 <__errno>
 8009708:	2316      	movs	r3, #22
 800970a:	6003      	str	r3, [r0, #0]
 800970c:	2000      	movs	r0, #0
 800970e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009712:	4f3a      	ldr	r7, [pc, #232]	; (80097fc <_strtol_l.isra.0+0x104>)
 8009714:	468e      	mov	lr, r1
 8009716:	4676      	mov	r6, lr
 8009718:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800971c:	5de5      	ldrb	r5, [r4, r7]
 800971e:	f015 0508 	ands.w	r5, r5, #8
 8009722:	d1f8      	bne.n	8009716 <_strtol_l.isra.0+0x1e>
 8009724:	2c2d      	cmp	r4, #45	; 0x2d
 8009726:	d134      	bne.n	8009792 <_strtol_l.isra.0+0x9a>
 8009728:	f89e 4000 	ldrb.w	r4, [lr]
 800972c:	f04f 0801 	mov.w	r8, #1
 8009730:	f106 0e02 	add.w	lr, r6, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d05c      	beq.n	80097f2 <_strtol_l.isra.0+0xfa>
 8009738:	2b10      	cmp	r3, #16
 800973a:	d10c      	bne.n	8009756 <_strtol_l.isra.0+0x5e>
 800973c:	2c30      	cmp	r4, #48	; 0x30
 800973e:	d10a      	bne.n	8009756 <_strtol_l.isra.0+0x5e>
 8009740:	f89e 4000 	ldrb.w	r4, [lr]
 8009744:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009748:	2c58      	cmp	r4, #88	; 0x58
 800974a:	d14d      	bne.n	80097e8 <_strtol_l.isra.0+0xf0>
 800974c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009750:	2310      	movs	r3, #16
 8009752:	f10e 0e02 	add.w	lr, lr, #2
 8009756:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800975a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800975e:	2600      	movs	r6, #0
 8009760:	fbbc f9f3 	udiv	r9, ip, r3
 8009764:	4635      	mov	r5, r6
 8009766:	fb03 ca19 	mls	sl, r3, r9, ip
 800976a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800976e:	2f09      	cmp	r7, #9
 8009770:	d818      	bhi.n	80097a4 <_strtol_l.isra.0+0xac>
 8009772:	463c      	mov	r4, r7
 8009774:	42a3      	cmp	r3, r4
 8009776:	dd24      	ble.n	80097c2 <_strtol_l.isra.0+0xca>
 8009778:	2e00      	cmp	r6, #0
 800977a:	db1f      	blt.n	80097bc <_strtol_l.isra.0+0xc4>
 800977c:	45a9      	cmp	r9, r5
 800977e:	d31d      	bcc.n	80097bc <_strtol_l.isra.0+0xc4>
 8009780:	d101      	bne.n	8009786 <_strtol_l.isra.0+0x8e>
 8009782:	45a2      	cmp	sl, r4
 8009784:	db1a      	blt.n	80097bc <_strtol_l.isra.0+0xc4>
 8009786:	fb05 4503 	mla	r5, r5, r3, r4
 800978a:	2601      	movs	r6, #1
 800978c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009790:	e7eb      	b.n	800976a <_strtol_l.isra.0+0x72>
 8009792:	2c2b      	cmp	r4, #43	; 0x2b
 8009794:	bf08      	it	eq
 8009796:	f89e 4000 	ldrbeq.w	r4, [lr]
 800979a:	46a8      	mov	r8, r5
 800979c:	bf08      	it	eq
 800979e:	f106 0e02 	addeq.w	lr, r6, #2
 80097a2:	e7c7      	b.n	8009734 <_strtol_l.isra.0+0x3c>
 80097a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80097a8:	2f19      	cmp	r7, #25
 80097aa:	d801      	bhi.n	80097b0 <_strtol_l.isra.0+0xb8>
 80097ac:	3c37      	subs	r4, #55	; 0x37
 80097ae:	e7e1      	b.n	8009774 <_strtol_l.isra.0+0x7c>
 80097b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80097b4:	2f19      	cmp	r7, #25
 80097b6:	d804      	bhi.n	80097c2 <_strtol_l.isra.0+0xca>
 80097b8:	3c57      	subs	r4, #87	; 0x57
 80097ba:	e7db      	b.n	8009774 <_strtol_l.isra.0+0x7c>
 80097bc:	f04f 36ff 	mov.w	r6, #4294967295
 80097c0:	e7e4      	b.n	800978c <_strtol_l.isra.0+0x94>
 80097c2:	2e00      	cmp	r6, #0
 80097c4:	da05      	bge.n	80097d2 <_strtol_l.isra.0+0xda>
 80097c6:	2322      	movs	r3, #34	; 0x22
 80097c8:	6003      	str	r3, [r0, #0]
 80097ca:	4665      	mov	r5, ip
 80097cc:	b942      	cbnz	r2, 80097e0 <_strtol_l.isra.0+0xe8>
 80097ce:	4628      	mov	r0, r5
 80097d0:	e79d      	b.n	800970e <_strtol_l.isra.0+0x16>
 80097d2:	f1b8 0f00 	cmp.w	r8, #0
 80097d6:	d000      	beq.n	80097da <_strtol_l.isra.0+0xe2>
 80097d8:	426d      	negs	r5, r5
 80097da:	2a00      	cmp	r2, #0
 80097dc:	d0f7      	beq.n	80097ce <_strtol_l.isra.0+0xd6>
 80097de:	b10e      	cbz	r6, 80097e4 <_strtol_l.isra.0+0xec>
 80097e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80097e4:	6011      	str	r1, [r2, #0]
 80097e6:	e7f2      	b.n	80097ce <_strtol_l.isra.0+0xd6>
 80097e8:	2430      	movs	r4, #48	; 0x30
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1b3      	bne.n	8009756 <_strtol_l.isra.0+0x5e>
 80097ee:	2308      	movs	r3, #8
 80097f0:	e7b1      	b.n	8009756 <_strtol_l.isra.0+0x5e>
 80097f2:	2c30      	cmp	r4, #48	; 0x30
 80097f4:	d0a4      	beq.n	8009740 <_strtol_l.isra.0+0x48>
 80097f6:	230a      	movs	r3, #10
 80097f8:	e7ad      	b.n	8009756 <_strtol_l.isra.0+0x5e>
 80097fa:	bf00      	nop
 80097fc:	0801fc1d 	.word	0x0801fc1d

08009800 <_strtol_r>:
 8009800:	f7ff bf7a 	b.w	80096f8 <_strtol_l.isra.0>

08009804 <strtol>:
 8009804:	4613      	mov	r3, r2
 8009806:	460a      	mov	r2, r1
 8009808:	4601      	mov	r1, r0
 800980a:	4802      	ldr	r0, [pc, #8]	; (8009814 <strtol+0x10>)
 800980c:	6800      	ldr	r0, [r0, #0]
 800980e:	f7ff bf73 	b.w	80096f8 <_strtol_l.isra.0>
 8009812:	bf00      	nop
 8009814:	2000003c 	.word	0x2000003c

08009818 <__assert_func>:
 8009818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800981a:	4614      	mov	r4, r2
 800981c:	461a      	mov	r2, r3
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <__assert_func+0x2c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4605      	mov	r5, r0
 8009824:	68d8      	ldr	r0, [r3, #12]
 8009826:	b14c      	cbz	r4, 800983c <__assert_func+0x24>
 8009828:	4b07      	ldr	r3, [pc, #28]	; (8009848 <__assert_func+0x30>)
 800982a:	9100      	str	r1, [sp, #0]
 800982c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009830:	4906      	ldr	r1, [pc, #24]	; (800984c <__assert_func+0x34>)
 8009832:	462b      	mov	r3, r5
 8009834:	f000 fe88 	bl	800a548 <fiprintf>
 8009838:	f002 fb56 	bl	800bee8 <abort>
 800983c:	4b04      	ldr	r3, [pc, #16]	; (8009850 <__assert_func+0x38>)
 800983e:	461c      	mov	r4, r3
 8009840:	e7f3      	b.n	800982a <__assert_func+0x12>
 8009842:	bf00      	nop
 8009844:	2000003c 	.word	0x2000003c
 8009848:	0801fbe0 	.word	0x0801fbe0
 800984c:	0801fbed 	.word	0x0801fbed
 8009850:	0801fc1b 	.word	0x0801fc1b

08009854 <quorem>:
 8009854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	6903      	ldr	r3, [r0, #16]
 800985a:	690c      	ldr	r4, [r1, #16]
 800985c:	42a3      	cmp	r3, r4
 800985e:	4607      	mov	r7, r0
 8009860:	f2c0 8081 	blt.w	8009966 <quorem+0x112>
 8009864:	3c01      	subs	r4, #1
 8009866:	f101 0814 	add.w	r8, r1, #20
 800986a:	f100 0514 	add.w	r5, r0, #20
 800986e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800987c:	3301      	adds	r3, #1
 800987e:	429a      	cmp	r2, r3
 8009880:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009884:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009888:	fbb2 f6f3 	udiv	r6, r2, r3
 800988c:	d331      	bcc.n	80098f2 <quorem+0x9e>
 800988e:	f04f 0e00 	mov.w	lr, #0
 8009892:	4640      	mov	r0, r8
 8009894:	46ac      	mov	ip, r5
 8009896:	46f2      	mov	sl, lr
 8009898:	f850 2b04 	ldr.w	r2, [r0], #4
 800989c:	b293      	uxth	r3, r2
 800989e:	fb06 e303 	mla	r3, r6, r3, lr
 80098a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	ebaa 0303 	sub.w	r3, sl, r3
 80098ac:	0c12      	lsrs	r2, r2, #16
 80098ae:	f8dc a000 	ldr.w	sl, [ip]
 80098b2:	fb06 e202 	mla	r2, r6, r2, lr
 80098b6:	fa13 f38a 	uxtah	r3, r3, sl
 80098ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098be:	fa1f fa82 	uxth.w	sl, r2
 80098c2:	f8dc 2000 	ldr.w	r2, [ip]
 80098c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80098ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098d4:	4581      	cmp	r9, r0
 80098d6:	f84c 3b04 	str.w	r3, [ip], #4
 80098da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098de:	d2db      	bcs.n	8009898 <quorem+0x44>
 80098e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80098e4:	b92b      	cbnz	r3, 80098f2 <quorem+0x9e>
 80098e6:	9b01      	ldr	r3, [sp, #4]
 80098e8:	3b04      	subs	r3, #4
 80098ea:	429d      	cmp	r5, r3
 80098ec:	461a      	mov	r2, r3
 80098ee:	d32e      	bcc.n	800994e <quorem+0xfa>
 80098f0:	613c      	str	r4, [r7, #16]
 80098f2:	4638      	mov	r0, r7
 80098f4:	f001 fc9e 	bl	800b234 <__mcmp>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	db24      	blt.n	8009946 <quorem+0xf2>
 80098fc:	3601      	adds	r6, #1
 80098fe:	4628      	mov	r0, r5
 8009900:	f04f 0c00 	mov.w	ip, #0
 8009904:	f858 2b04 	ldr.w	r2, [r8], #4
 8009908:	f8d0 e000 	ldr.w	lr, [r0]
 800990c:	b293      	uxth	r3, r2
 800990e:	ebac 0303 	sub.w	r3, ip, r3
 8009912:	0c12      	lsrs	r2, r2, #16
 8009914:	fa13 f38e 	uxtah	r3, r3, lr
 8009918:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800991c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009920:	b29b      	uxth	r3, r3
 8009922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009926:	45c1      	cmp	r9, r8
 8009928:	f840 3b04 	str.w	r3, [r0], #4
 800992c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009930:	d2e8      	bcs.n	8009904 <quorem+0xb0>
 8009932:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800993a:	b922      	cbnz	r2, 8009946 <quorem+0xf2>
 800993c:	3b04      	subs	r3, #4
 800993e:	429d      	cmp	r5, r3
 8009940:	461a      	mov	r2, r3
 8009942:	d30a      	bcc.n	800995a <quorem+0x106>
 8009944:	613c      	str	r4, [r7, #16]
 8009946:	4630      	mov	r0, r6
 8009948:	b003      	add	sp, #12
 800994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994e:	6812      	ldr	r2, [r2, #0]
 8009950:	3b04      	subs	r3, #4
 8009952:	2a00      	cmp	r2, #0
 8009954:	d1cc      	bne.n	80098f0 <quorem+0x9c>
 8009956:	3c01      	subs	r4, #1
 8009958:	e7c7      	b.n	80098ea <quorem+0x96>
 800995a:	6812      	ldr	r2, [r2, #0]
 800995c:	3b04      	subs	r3, #4
 800995e:	2a00      	cmp	r2, #0
 8009960:	d1f0      	bne.n	8009944 <quorem+0xf0>
 8009962:	3c01      	subs	r4, #1
 8009964:	e7eb      	b.n	800993e <quorem+0xea>
 8009966:	2000      	movs	r0, #0
 8009968:	e7ee      	b.n	8009948 <quorem+0xf4>
 800996a:	0000      	movs	r0, r0
 800996c:	0000      	movs	r0, r0
	...

08009970 <_dtoa_r>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	ed2d 8b02 	vpush	{d8}
 8009978:	ec57 6b10 	vmov	r6, r7, d0
 800997c:	b095      	sub	sp, #84	; 0x54
 800997e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009980:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009984:	9105      	str	r1, [sp, #20]
 8009986:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800998a:	4604      	mov	r4, r0
 800998c:	9209      	str	r2, [sp, #36]	; 0x24
 800998e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009990:	b975      	cbnz	r5, 80099b0 <_dtoa_r+0x40>
 8009992:	2010      	movs	r0, #16
 8009994:	f001 f95e 	bl	800ac54 <malloc>
 8009998:	4602      	mov	r2, r0
 800999a:	6260      	str	r0, [r4, #36]	; 0x24
 800999c:	b920      	cbnz	r0, 80099a8 <_dtoa_r+0x38>
 800999e:	4bb2      	ldr	r3, [pc, #712]	; (8009c68 <_dtoa_r+0x2f8>)
 80099a0:	21ea      	movs	r1, #234	; 0xea
 80099a2:	48b2      	ldr	r0, [pc, #712]	; (8009c6c <_dtoa_r+0x2fc>)
 80099a4:	f7ff ff38 	bl	8009818 <__assert_func>
 80099a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099ac:	6005      	str	r5, [r0, #0]
 80099ae:	60c5      	str	r5, [r0, #12]
 80099b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099b2:	6819      	ldr	r1, [r3, #0]
 80099b4:	b151      	cbz	r1, 80099cc <_dtoa_r+0x5c>
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	604a      	str	r2, [r1, #4]
 80099ba:	2301      	movs	r3, #1
 80099bc:	4093      	lsls	r3, r2
 80099be:	608b      	str	r3, [r1, #8]
 80099c0:	4620      	mov	r0, r4
 80099c2:	f001 f9af 	bl	800ad24 <_Bfree>
 80099c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	1e3b      	subs	r3, r7, #0
 80099ce:	bfb9      	ittee	lt
 80099d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099d4:	9303      	strlt	r3, [sp, #12]
 80099d6:	2300      	movge	r3, #0
 80099d8:	f8c8 3000 	strge.w	r3, [r8]
 80099dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80099e0:	4ba3      	ldr	r3, [pc, #652]	; (8009c70 <_dtoa_r+0x300>)
 80099e2:	bfbc      	itt	lt
 80099e4:	2201      	movlt	r2, #1
 80099e6:	f8c8 2000 	strlt.w	r2, [r8]
 80099ea:	ea33 0309 	bics.w	r3, r3, r9
 80099ee:	d11b      	bne.n	8009a28 <_dtoa_r+0xb8>
 80099f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099fc:	4333      	orrs	r3, r6
 80099fe:	f000 857a 	beq.w	800a4f6 <_dtoa_r+0xb86>
 8009a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a04:	b963      	cbnz	r3, 8009a20 <_dtoa_r+0xb0>
 8009a06:	4b9b      	ldr	r3, [pc, #620]	; (8009c74 <_dtoa_r+0x304>)
 8009a08:	e024      	b.n	8009a54 <_dtoa_r+0xe4>
 8009a0a:	4b9b      	ldr	r3, [pc, #620]	; (8009c78 <_dtoa_r+0x308>)
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	3308      	adds	r3, #8
 8009a10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	9800      	ldr	r0, [sp, #0]
 8009a16:	b015      	add	sp, #84	; 0x54
 8009a18:	ecbd 8b02 	vpop	{d8}
 8009a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a20:	4b94      	ldr	r3, [pc, #592]	; (8009c74 <_dtoa_r+0x304>)
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	3303      	adds	r3, #3
 8009a26:	e7f3      	b.n	8009a10 <_dtoa_r+0xa0>
 8009a28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	ec51 0b17 	vmov	r0, r1, d7
 8009a32:	2300      	movs	r3, #0
 8009a34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009a38:	f7f7 f85e 	bl	8000af8 <__aeabi_dcmpeq>
 8009a3c:	4680      	mov	r8, r0
 8009a3e:	b158      	cbz	r0, 8009a58 <_dtoa_r+0xe8>
 8009a40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a42:	2301      	movs	r3, #1
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 8551 	beq.w	800a4f0 <_dtoa_r+0xb80>
 8009a4e:	488b      	ldr	r0, [pc, #556]	; (8009c7c <_dtoa_r+0x30c>)
 8009a50:	6018      	str	r0, [r3, #0]
 8009a52:	1e43      	subs	r3, r0, #1
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	e7dd      	b.n	8009a14 <_dtoa_r+0xa4>
 8009a58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009a5c:	aa12      	add	r2, sp, #72	; 0x48
 8009a5e:	a913      	add	r1, sp, #76	; 0x4c
 8009a60:	4620      	mov	r0, r4
 8009a62:	f001 fd07 	bl	800b474 <__d2b>
 8009a66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a6a:	4683      	mov	fp, r0
 8009a6c:	2d00      	cmp	r5, #0
 8009a6e:	d07c      	beq.n	8009b6a <_dtoa_r+0x1fa>
 8009a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009a76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009a7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a8a:	4b7d      	ldr	r3, [pc, #500]	; (8009c80 <_dtoa_r+0x310>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4630      	mov	r0, r6
 8009a90:	4639      	mov	r1, r7
 8009a92:	f7f6 fc11 	bl	80002b8 <__aeabi_dsub>
 8009a96:	a36e      	add	r3, pc, #440	; (adr r3, 8009c50 <_dtoa_r+0x2e0>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f7f6 fdc4 	bl	8000628 <__aeabi_dmul>
 8009aa0:	a36d      	add	r3, pc, #436	; (adr r3, 8009c58 <_dtoa_r+0x2e8>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f7f6 fc09 	bl	80002bc <__adddf3>
 8009aaa:	4606      	mov	r6, r0
 8009aac:	4628      	mov	r0, r5
 8009aae:	460f      	mov	r7, r1
 8009ab0:	f7f6 fd50 	bl	8000554 <__aeabi_i2d>
 8009ab4:	a36a      	add	r3, pc, #424	; (adr r3, 8009c60 <_dtoa_r+0x2f0>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	f7f6 fdb5 	bl	8000628 <__aeabi_dmul>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	4639      	mov	r1, r7
 8009ac6:	f7f6 fbf9 	bl	80002bc <__adddf3>
 8009aca:	4606      	mov	r6, r0
 8009acc:	460f      	mov	r7, r1
 8009ace:	f7f7 f85b 	bl	8000b88 <__aeabi_d2iz>
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	4682      	mov	sl, r0
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	4630      	mov	r0, r6
 8009ada:	4639      	mov	r1, r7
 8009adc:	f7f7 f816 	bl	8000b0c <__aeabi_dcmplt>
 8009ae0:	b148      	cbz	r0, 8009af6 <_dtoa_r+0x186>
 8009ae2:	4650      	mov	r0, sl
 8009ae4:	f7f6 fd36 	bl	8000554 <__aeabi_i2d>
 8009ae8:	4632      	mov	r2, r6
 8009aea:	463b      	mov	r3, r7
 8009aec:	f7f7 f804 	bl	8000af8 <__aeabi_dcmpeq>
 8009af0:	b908      	cbnz	r0, 8009af6 <_dtoa_r+0x186>
 8009af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009af6:	f1ba 0f16 	cmp.w	sl, #22
 8009afa:	d854      	bhi.n	8009ba6 <_dtoa_r+0x236>
 8009afc:	4b61      	ldr	r3, [pc, #388]	; (8009c84 <_dtoa_r+0x314>)
 8009afe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b0a:	f7f6 ffff 	bl	8000b0c <__aeabi_dcmplt>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d04b      	beq.n	8009baa <_dtoa_r+0x23a>
 8009b12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b16:	2300      	movs	r3, #0
 8009b18:	930e      	str	r3, [sp, #56]	; 0x38
 8009b1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b1c:	1b5d      	subs	r5, r3, r5
 8009b1e:	1e6b      	subs	r3, r5, #1
 8009b20:	9304      	str	r3, [sp, #16]
 8009b22:	bf43      	ittte	mi
 8009b24:	2300      	movmi	r3, #0
 8009b26:	f1c5 0801 	rsbmi	r8, r5, #1
 8009b2a:	9304      	strmi	r3, [sp, #16]
 8009b2c:	f04f 0800 	movpl.w	r8, #0
 8009b30:	f1ba 0f00 	cmp.w	sl, #0
 8009b34:	db3b      	blt.n	8009bae <_dtoa_r+0x23e>
 8009b36:	9b04      	ldr	r3, [sp, #16]
 8009b38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009b3c:	4453      	add	r3, sl
 8009b3e:	9304      	str	r3, [sp, #16]
 8009b40:	2300      	movs	r3, #0
 8009b42:	9306      	str	r3, [sp, #24]
 8009b44:	9b05      	ldr	r3, [sp, #20]
 8009b46:	2b09      	cmp	r3, #9
 8009b48:	d869      	bhi.n	8009c1e <_dtoa_r+0x2ae>
 8009b4a:	2b05      	cmp	r3, #5
 8009b4c:	bfc4      	itt	gt
 8009b4e:	3b04      	subgt	r3, #4
 8009b50:	9305      	strgt	r3, [sp, #20]
 8009b52:	9b05      	ldr	r3, [sp, #20]
 8009b54:	f1a3 0302 	sub.w	r3, r3, #2
 8009b58:	bfcc      	ite	gt
 8009b5a:	2500      	movgt	r5, #0
 8009b5c:	2501      	movle	r5, #1
 8009b5e:	2b03      	cmp	r3, #3
 8009b60:	d869      	bhi.n	8009c36 <_dtoa_r+0x2c6>
 8009b62:	e8df f003 	tbb	[pc, r3]
 8009b66:	4e2c      	.short	0x4e2c
 8009b68:	5a4c      	.short	0x5a4c
 8009b6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009b6e:	441d      	add	r5, r3
 8009b70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b74:	2b20      	cmp	r3, #32
 8009b76:	bfc1      	itttt	gt
 8009b78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b80:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b88:	bfda      	itte	le
 8009b8a:	f1c3 0320 	rsble	r3, r3, #32
 8009b8e:	fa06 f003 	lslle.w	r0, r6, r3
 8009b92:	4318      	orrgt	r0, r3
 8009b94:	f7f6 fcce 	bl	8000534 <__aeabi_ui2d>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009ba0:	3d01      	subs	r5, #1
 8009ba2:	9310      	str	r3, [sp, #64]	; 0x40
 8009ba4:	e771      	b.n	8009a8a <_dtoa_r+0x11a>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e7b6      	b.n	8009b18 <_dtoa_r+0x1a8>
 8009baa:	900e      	str	r0, [sp, #56]	; 0x38
 8009bac:	e7b5      	b.n	8009b1a <_dtoa_r+0x1aa>
 8009bae:	f1ca 0300 	rsb	r3, sl, #0
 8009bb2:	9306      	str	r3, [sp, #24]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	eba8 080a 	sub.w	r8, r8, sl
 8009bba:	930d      	str	r3, [sp, #52]	; 0x34
 8009bbc:	e7c2      	b.n	8009b44 <_dtoa_r+0x1d4>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	9308      	str	r3, [sp, #32]
 8009bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	dc39      	bgt.n	8009c3c <_dtoa_r+0x2cc>
 8009bc8:	f04f 0901 	mov.w	r9, #1
 8009bcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009bd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009bd8:	2200      	movs	r2, #0
 8009bda:	6042      	str	r2, [r0, #4]
 8009bdc:	2204      	movs	r2, #4
 8009bde:	f102 0614 	add.w	r6, r2, #20
 8009be2:	429e      	cmp	r6, r3
 8009be4:	6841      	ldr	r1, [r0, #4]
 8009be6:	d92f      	bls.n	8009c48 <_dtoa_r+0x2d8>
 8009be8:	4620      	mov	r0, r4
 8009bea:	f001 f85b 	bl	800aca4 <_Balloc>
 8009bee:	9000      	str	r0, [sp, #0]
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d14b      	bne.n	8009c8c <_dtoa_r+0x31c>
 8009bf4:	4b24      	ldr	r3, [pc, #144]	; (8009c88 <_dtoa_r+0x318>)
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009bfc:	e6d1      	b.n	80099a2 <_dtoa_r+0x32>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e7de      	b.n	8009bc0 <_dtoa_r+0x250>
 8009c02:	2300      	movs	r3, #0
 8009c04:	9308      	str	r3, [sp, #32]
 8009c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c08:	eb0a 0903 	add.w	r9, sl, r3
 8009c0c:	f109 0301 	add.w	r3, r9, #1
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	bfb8      	it	lt
 8009c16:	2301      	movlt	r3, #1
 8009c18:	e7dd      	b.n	8009bd6 <_dtoa_r+0x266>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e7f2      	b.n	8009c04 <_dtoa_r+0x294>
 8009c1e:	2501      	movs	r5, #1
 8009c20:	2300      	movs	r3, #0
 8009c22:	9305      	str	r3, [sp, #20]
 8009c24:	9508      	str	r5, [sp, #32]
 8009c26:	f04f 39ff 	mov.w	r9, #4294967295
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c30:	2312      	movs	r3, #18
 8009c32:	9209      	str	r2, [sp, #36]	; 0x24
 8009c34:	e7cf      	b.n	8009bd6 <_dtoa_r+0x266>
 8009c36:	2301      	movs	r3, #1
 8009c38:	9308      	str	r3, [sp, #32]
 8009c3a:	e7f4      	b.n	8009c26 <_dtoa_r+0x2b6>
 8009c3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009c40:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c44:	464b      	mov	r3, r9
 8009c46:	e7c6      	b.n	8009bd6 <_dtoa_r+0x266>
 8009c48:	3101      	adds	r1, #1
 8009c4a:	6041      	str	r1, [r0, #4]
 8009c4c:	0052      	lsls	r2, r2, #1
 8009c4e:	e7c6      	b.n	8009bde <_dtoa_r+0x26e>
 8009c50:	636f4361 	.word	0x636f4361
 8009c54:	3fd287a7 	.word	0x3fd287a7
 8009c58:	8b60c8b3 	.word	0x8b60c8b3
 8009c5c:	3fc68a28 	.word	0x3fc68a28
 8009c60:	509f79fb 	.word	0x509f79fb
 8009c64:	3fd34413 	.word	0x3fd34413
 8009c68:	0801fb68 	.word	0x0801fb68
 8009c6c:	0801fd2a 	.word	0x0801fd2a
 8009c70:	7ff00000 	.word	0x7ff00000
 8009c74:	0801fd26 	.word	0x0801fd26
 8009c78:	0801fd1d 	.word	0x0801fd1d
 8009c7c:	0801fae9 	.word	0x0801fae9
 8009c80:	3ff80000 	.word	0x3ff80000
 8009c84:	0801fea0 	.word	0x0801fea0
 8009c88:	0801fd89 	.word	0x0801fd89
 8009c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c8e:	9a00      	ldr	r2, [sp, #0]
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	9b01      	ldr	r3, [sp, #4]
 8009c94:	2b0e      	cmp	r3, #14
 8009c96:	f200 80ad 	bhi.w	8009df4 <_dtoa_r+0x484>
 8009c9a:	2d00      	cmp	r5, #0
 8009c9c:	f000 80aa 	beq.w	8009df4 <_dtoa_r+0x484>
 8009ca0:	f1ba 0f00 	cmp.w	sl, #0
 8009ca4:	dd36      	ble.n	8009d14 <_dtoa_r+0x3a4>
 8009ca6:	4ac3      	ldr	r2, [pc, #780]	; (8009fb4 <_dtoa_r+0x644>)
 8009ca8:	f00a 030f 	and.w	r3, sl, #15
 8009cac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009cb0:	ed93 7b00 	vldr	d7, [r3]
 8009cb4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009cb8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009cbc:	eeb0 8a47 	vmov.f32	s16, s14
 8009cc0:	eef0 8a67 	vmov.f32	s17, s15
 8009cc4:	d016      	beq.n	8009cf4 <_dtoa_r+0x384>
 8009cc6:	4bbc      	ldr	r3, [pc, #752]	; (8009fb8 <_dtoa_r+0x648>)
 8009cc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ccc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cd0:	f7f6 fdd4 	bl	800087c <__aeabi_ddiv>
 8009cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cd8:	f007 070f 	and.w	r7, r7, #15
 8009cdc:	2503      	movs	r5, #3
 8009cde:	4eb6      	ldr	r6, [pc, #728]	; (8009fb8 <_dtoa_r+0x648>)
 8009ce0:	b957      	cbnz	r7, 8009cf8 <_dtoa_r+0x388>
 8009ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ce6:	ec53 2b18 	vmov	r2, r3, d8
 8009cea:	f7f6 fdc7 	bl	800087c <__aeabi_ddiv>
 8009cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cf2:	e029      	b.n	8009d48 <_dtoa_r+0x3d8>
 8009cf4:	2502      	movs	r5, #2
 8009cf6:	e7f2      	b.n	8009cde <_dtoa_r+0x36e>
 8009cf8:	07f9      	lsls	r1, r7, #31
 8009cfa:	d508      	bpl.n	8009d0e <_dtoa_r+0x39e>
 8009cfc:	ec51 0b18 	vmov	r0, r1, d8
 8009d00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d04:	f7f6 fc90 	bl	8000628 <__aeabi_dmul>
 8009d08:	ec41 0b18 	vmov	d8, r0, r1
 8009d0c:	3501      	adds	r5, #1
 8009d0e:	107f      	asrs	r7, r7, #1
 8009d10:	3608      	adds	r6, #8
 8009d12:	e7e5      	b.n	8009ce0 <_dtoa_r+0x370>
 8009d14:	f000 80a6 	beq.w	8009e64 <_dtoa_r+0x4f4>
 8009d18:	f1ca 0600 	rsb	r6, sl, #0
 8009d1c:	4ba5      	ldr	r3, [pc, #660]	; (8009fb4 <_dtoa_r+0x644>)
 8009d1e:	4fa6      	ldr	r7, [pc, #664]	; (8009fb8 <_dtoa_r+0x648>)
 8009d20:	f006 020f 	and.w	r2, r6, #15
 8009d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d30:	f7f6 fc7a 	bl	8000628 <__aeabi_dmul>
 8009d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d38:	1136      	asrs	r6, r6, #4
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	2502      	movs	r5, #2
 8009d3e:	2e00      	cmp	r6, #0
 8009d40:	f040 8085 	bne.w	8009e4e <_dtoa_r+0x4de>
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1d2      	bne.n	8009cee <_dtoa_r+0x37e>
 8009d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 808c 	beq.w	8009e68 <_dtoa_r+0x4f8>
 8009d50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d54:	4b99      	ldr	r3, [pc, #612]	; (8009fbc <_dtoa_r+0x64c>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	4630      	mov	r0, r6
 8009d5a:	4639      	mov	r1, r7
 8009d5c:	f7f6 fed6 	bl	8000b0c <__aeabi_dcmplt>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	f000 8081 	beq.w	8009e68 <_dtoa_r+0x4f8>
 8009d66:	9b01      	ldr	r3, [sp, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d07d      	beq.n	8009e68 <_dtoa_r+0x4f8>
 8009d6c:	f1b9 0f00 	cmp.w	r9, #0
 8009d70:	dd3c      	ble.n	8009dec <_dtoa_r+0x47c>
 8009d72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d76:	9307      	str	r3, [sp, #28]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4b91      	ldr	r3, [pc, #580]	; (8009fc0 <_dtoa_r+0x650>)
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 fc52 	bl	8000628 <__aeabi_dmul>
 8009d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d88:	3501      	adds	r5, #1
 8009d8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009d8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d92:	4628      	mov	r0, r5
 8009d94:	f7f6 fbde 	bl	8000554 <__aeabi_i2d>
 8009d98:	4632      	mov	r2, r6
 8009d9a:	463b      	mov	r3, r7
 8009d9c:	f7f6 fc44 	bl	8000628 <__aeabi_dmul>
 8009da0:	4b88      	ldr	r3, [pc, #544]	; (8009fc4 <_dtoa_r+0x654>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	f7f6 fa8a 	bl	80002bc <__adddf3>
 8009da8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009db0:	9303      	str	r3, [sp, #12]
 8009db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d15c      	bne.n	8009e72 <_dtoa_r+0x502>
 8009db8:	4b83      	ldr	r3, [pc, #524]	; (8009fc8 <_dtoa_r+0x658>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	f7f6 fa7a 	bl	80002b8 <__aeabi_dsub>
 8009dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dc8:	4606      	mov	r6, r0
 8009dca:	460f      	mov	r7, r1
 8009dcc:	f7f6 febc 	bl	8000b48 <__aeabi_dcmpgt>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f040 8296 	bne.w	800a302 <_dtoa_r+0x992>
 8009dd6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009de0:	4639      	mov	r1, r7
 8009de2:	f7f6 fe93 	bl	8000b0c <__aeabi_dcmplt>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	f040 8288 	bne.w	800a2fc <_dtoa_r+0x98c>
 8009dec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009df0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009df4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f2c0 8158 	blt.w	800a0ac <_dtoa_r+0x73c>
 8009dfc:	f1ba 0f0e 	cmp.w	sl, #14
 8009e00:	f300 8154 	bgt.w	800a0ac <_dtoa_r+0x73c>
 8009e04:	4b6b      	ldr	r3, [pc, #428]	; (8009fb4 <_dtoa_r+0x644>)
 8009e06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f280 80e3 	bge.w	8009fdc <_dtoa_r+0x66c>
 8009e16:	9b01      	ldr	r3, [sp, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f300 80df 	bgt.w	8009fdc <_dtoa_r+0x66c>
 8009e1e:	f040 826d 	bne.w	800a2fc <_dtoa_r+0x98c>
 8009e22:	4b69      	ldr	r3, [pc, #420]	; (8009fc8 <_dtoa_r+0x658>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	4640      	mov	r0, r8
 8009e28:	4649      	mov	r1, r9
 8009e2a:	f7f6 fbfd 	bl	8000628 <__aeabi_dmul>
 8009e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e32:	f7f6 fe7f 	bl	8000b34 <__aeabi_dcmpge>
 8009e36:	9e01      	ldr	r6, [sp, #4]
 8009e38:	4637      	mov	r7, r6
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	f040 8243 	bne.w	800a2c6 <_dtoa_r+0x956>
 8009e40:	9d00      	ldr	r5, [sp, #0]
 8009e42:	2331      	movs	r3, #49	; 0x31
 8009e44:	f805 3b01 	strb.w	r3, [r5], #1
 8009e48:	f10a 0a01 	add.w	sl, sl, #1
 8009e4c:	e23f      	b.n	800a2ce <_dtoa_r+0x95e>
 8009e4e:	07f2      	lsls	r2, r6, #31
 8009e50:	d505      	bpl.n	8009e5e <_dtoa_r+0x4ee>
 8009e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e56:	f7f6 fbe7 	bl	8000628 <__aeabi_dmul>
 8009e5a:	3501      	adds	r5, #1
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	1076      	asrs	r6, r6, #1
 8009e60:	3708      	adds	r7, #8
 8009e62:	e76c      	b.n	8009d3e <_dtoa_r+0x3ce>
 8009e64:	2502      	movs	r5, #2
 8009e66:	e76f      	b.n	8009d48 <_dtoa_r+0x3d8>
 8009e68:	9b01      	ldr	r3, [sp, #4]
 8009e6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8009e70:	e78d      	b.n	8009d8e <_dtoa_r+0x41e>
 8009e72:	9900      	ldr	r1, [sp, #0]
 8009e74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e78:	4b4e      	ldr	r3, [pc, #312]	; (8009fb4 <_dtoa_r+0x644>)
 8009e7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e7e:	4401      	add	r1, r0
 8009e80:	9102      	str	r1, [sp, #8]
 8009e82:	9908      	ldr	r1, [sp, #32]
 8009e84:	eeb0 8a47 	vmov.f32	s16, s14
 8009e88:	eef0 8a67 	vmov.f32	s17, s15
 8009e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e94:	2900      	cmp	r1, #0
 8009e96:	d045      	beq.n	8009f24 <_dtoa_r+0x5b4>
 8009e98:	494c      	ldr	r1, [pc, #304]	; (8009fcc <_dtoa_r+0x65c>)
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	f7f6 fcee 	bl	800087c <__aeabi_ddiv>
 8009ea0:	ec53 2b18 	vmov	r2, r3, d8
 8009ea4:	f7f6 fa08 	bl	80002b8 <__aeabi_dsub>
 8009ea8:	9d00      	ldr	r5, [sp, #0]
 8009eaa:	ec41 0b18 	vmov	d8, r0, r1
 8009eae:	4639      	mov	r1, r7
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f7f6 fe69 	bl	8000b88 <__aeabi_d2iz>
 8009eb6:	900c      	str	r0, [sp, #48]	; 0x30
 8009eb8:	f7f6 fb4c 	bl	8000554 <__aeabi_i2d>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 f9f8 	bl	80002b8 <__aeabi_dsub>
 8009ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eca:	3330      	adds	r3, #48	; 0x30
 8009ecc:	f805 3b01 	strb.w	r3, [r5], #1
 8009ed0:	ec53 2b18 	vmov	r2, r3, d8
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	f7f6 fe18 	bl	8000b0c <__aeabi_dcmplt>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d165      	bne.n	8009fac <_dtoa_r+0x63c>
 8009ee0:	4632      	mov	r2, r6
 8009ee2:	463b      	mov	r3, r7
 8009ee4:	4935      	ldr	r1, [pc, #212]	; (8009fbc <_dtoa_r+0x64c>)
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	f7f6 f9e6 	bl	80002b8 <__aeabi_dsub>
 8009eec:	ec53 2b18 	vmov	r2, r3, d8
 8009ef0:	f7f6 fe0c 	bl	8000b0c <__aeabi_dcmplt>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	f040 80b9 	bne.w	800a06c <_dtoa_r+0x6fc>
 8009efa:	9b02      	ldr	r3, [sp, #8]
 8009efc:	429d      	cmp	r5, r3
 8009efe:	f43f af75 	beq.w	8009dec <_dtoa_r+0x47c>
 8009f02:	4b2f      	ldr	r3, [pc, #188]	; (8009fc0 <_dtoa_r+0x650>)
 8009f04:	ec51 0b18 	vmov	r0, r1, d8
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f7f6 fb8d 	bl	8000628 <__aeabi_dmul>
 8009f0e:	4b2c      	ldr	r3, [pc, #176]	; (8009fc0 <_dtoa_r+0x650>)
 8009f10:	ec41 0b18 	vmov	d8, r0, r1
 8009f14:	2200      	movs	r2, #0
 8009f16:	4630      	mov	r0, r6
 8009f18:	4639      	mov	r1, r7
 8009f1a:	f7f6 fb85 	bl	8000628 <__aeabi_dmul>
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460f      	mov	r7, r1
 8009f22:	e7c4      	b.n	8009eae <_dtoa_r+0x53e>
 8009f24:	ec51 0b17 	vmov	r0, r1, d7
 8009f28:	f7f6 fb7e 	bl	8000628 <__aeabi_dmul>
 8009f2c:	9b02      	ldr	r3, [sp, #8]
 8009f2e:	9d00      	ldr	r5, [sp, #0]
 8009f30:	930c      	str	r3, [sp, #48]	; 0x30
 8009f32:	ec41 0b18 	vmov	d8, r0, r1
 8009f36:	4639      	mov	r1, r7
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7f6 fe25 	bl	8000b88 <__aeabi_d2iz>
 8009f3e:	9011      	str	r0, [sp, #68]	; 0x44
 8009f40:	f7f6 fb08 	bl	8000554 <__aeabi_i2d>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4630      	mov	r0, r6
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	f7f6 f9b4 	bl	80002b8 <__aeabi_dsub>
 8009f50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f52:	3330      	adds	r3, #48	; 0x30
 8009f54:	f805 3b01 	strb.w	r3, [r5], #1
 8009f58:	9b02      	ldr	r3, [sp, #8]
 8009f5a:	429d      	cmp	r5, r3
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	460f      	mov	r7, r1
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	d134      	bne.n	8009fd0 <_dtoa_r+0x660>
 8009f66:	4b19      	ldr	r3, [pc, #100]	; (8009fcc <_dtoa_r+0x65c>)
 8009f68:	ec51 0b18 	vmov	r0, r1, d8
 8009f6c:	f7f6 f9a6 	bl	80002bc <__adddf3>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4630      	mov	r0, r6
 8009f76:	4639      	mov	r1, r7
 8009f78:	f7f6 fde6 	bl	8000b48 <__aeabi_dcmpgt>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d175      	bne.n	800a06c <_dtoa_r+0x6fc>
 8009f80:	ec53 2b18 	vmov	r2, r3, d8
 8009f84:	4911      	ldr	r1, [pc, #68]	; (8009fcc <_dtoa_r+0x65c>)
 8009f86:	2000      	movs	r0, #0
 8009f88:	f7f6 f996 	bl	80002b8 <__aeabi_dsub>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4630      	mov	r0, r6
 8009f92:	4639      	mov	r1, r7
 8009f94:	f7f6 fdba 	bl	8000b0c <__aeabi_dcmplt>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	f43f af27 	beq.w	8009dec <_dtoa_r+0x47c>
 8009f9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fa0:	1e6b      	subs	r3, r5, #1
 8009fa2:	930c      	str	r3, [sp, #48]	; 0x30
 8009fa4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fa8:	2b30      	cmp	r3, #48	; 0x30
 8009faa:	d0f8      	beq.n	8009f9e <_dtoa_r+0x62e>
 8009fac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009fb0:	e04a      	b.n	800a048 <_dtoa_r+0x6d8>
 8009fb2:	bf00      	nop
 8009fb4:	0801fea0 	.word	0x0801fea0
 8009fb8:	0801fe78 	.word	0x0801fe78
 8009fbc:	3ff00000 	.word	0x3ff00000
 8009fc0:	40240000 	.word	0x40240000
 8009fc4:	401c0000 	.word	0x401c0000
 8009fc8:	40140000 	.word	0x40140000
 8009fcc:	3fe00000 	.word	0x3fe00000
 8009fd0:	4baf      	ldr	r3, [pc, #700]	; (800a290 <_dtoa_r+0x920>)
 8009fd2:	f7f6 fb29 	bl	8000628 <__aeabi_dmul>
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	460f      	mov	r7, r1
 8009fda:	e7ac      	b.n	8009f36 <_dtoa_r+0x5c6>
 8009fdc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009fe0:	9d00      	ldr	r5, [sp, #0]
 8009fe2:	4642      	mov	r2, r8
 8009fe4:	464b      	mov	r3, r9
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	4639      	mov	r1, r7
 8009fea:	f7f6 fc47 	bl	800087c <__aeabi_ddiv>
 8009fee:	f7f6 fdcb 	bl	8000b88 <__aeabi_d2iz>
 8009ff2:	9002      	str	r0, [sp, #8]
 8009ff4:	f7f6 faae 	bl	8000554 <__aeabi_i2d>
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	464b      	mov	r3, r9
 8009ffc:	f7f6 fb14 	bl	8000628 <__aeabi_dmul>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4630      	mov	r0, r6
 800a006:	4639      	mov	r1, r7
 800a008:	f7f6 f956 	bl	80002b8 <__aeabi_dsub>
 800a00c:	9e02      	ldr	r6, [sp, #8]
 800a00e:	9f01      	ldr	r7, [sp, #4]
 800a010:	3630      	adds	r6, #48	; 0x30
 800a012:	f805 6b01 	strb.w	r6, [r5], #1
 800a016:	9e00      	ldr	r6, [sp, #0]
 800a018:	1bae      	subs	r6, r5, r6
 800a01a:	42b7      	cmp	r7, r6
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	d137      	bne.n	800a092 <_dtoa_r+0x722>
 800a022:	f7f6 f94b 	bl	80002bc <__adddf3>
 800a026:	4642      	mov	r2, r8
 800a028:	464b      	mov	r3, r9
 800a02a:	4606      	mov	r6, r0
 800a02c:	460f      	mov	r7, r1
 800a02e:	f7f6 fd8b 	bl	8000b48 <__aeabi_dcmpgt>
 800a032:	b9c8      	cbnz	r0, 800a068 <_dtoa_r+0x6f8>
 800a034:	4642      	mov	r2, r8
 800a036:	464b      	mov	r3, r9
 800a038:	4630      	mov	r0, r6
 800a03a:	4639      	mov	r1, r7
 800a03c:	f7f6 fd5c 	bl	8000af8 <__aeabi_dcmpeq>
 800a040:	b110      	cbz	r0, 800a048 <_dtoa_r+0x6d8>
 800a042:	9b02      	ldr	r3, [sp, #8]
 800a044:	07d9      	lsls	r1, r3, #31
 800a046:	d40f      	bmi.n	800a068 <_dtoa_r+0x6f8>
 800a048:	4620      	mov	r0, r4
 800a04a:	4659      	mov	r1, fp
 800a04c:	f000 fe6a 	bl	800ad24 <_Bfree>
 800a050:	2300      	movs	r3, #0
 800a052:	702b      	strb	r3, [r5, #0]
 800a054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a056:	f10a 0001 	add.w	r0, sl, #1
 800a05a:	6018      	str	r0, [r3, #0]
 800a05c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f43f acd8 	beq.w	8009a14 <_dtoa_r+0xa4>
 800a064:	601d      	str	r5, [r3, #0]
 800a066:	e4d5      	b.n	8009a14 <_dtoa_r+0xa4>
 800a068:	f8cd a01c 	str.w	sl, [sp, #28]
 800a06c:	462b      	mov	r3, r5
 800a06e:	461d      	mov	r5, r3
 800a070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a074:	2a39      	cmp	r2, #57	; 0x39
 800a076:	d108      	bne.n	800a08a <_dtoa_r+0x71a>
 800a078:	9a00      	ldr	r2, [sp, #0]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d1f7      	bne.n	800a06e <_dtoa_r+0x6fe>
 800a07e:	9a07      	ldr	r2, [sp, #28]
 800a080:	9900      	ldr	r1, [sp, #0]
 800a082:	3201      	adds	r2, #1
 800a084:	9207      	str	r2, [sp, #28]
 800a086:	2230      	movs	r2, #48	; 0x30
 800a088:	700a      	strb	r2, [r1, #0]
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	3201      	adds	r2, #1
 800a08e:	701a      	strb	r2, [r3, #0]
 800a090:	e78c      	b.n	8009fac <_dtoa_r+0x63c>
 800a092:	4b7f      	ldr	r3, [pc, #508]	; (800a290 <_dtoa_r+0x920>)
 800a094:	2200      	movs	r2, #0
 800a096:	f7f6 fac7 	bl	8000628 <__aeabi_dmul>
 800a09a:	2200      	movs	r2, #0
 800a09c:	2300      	movs	r3, #0
 800a09e:	4606      	mov	r6, r0
 800a0a0:	460f      	mov	r7, r1
 800a0a2:	f7f6 fd29 	bl	8000af8 <__aeabi_dcmpeq>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d09b      	beq.n	8009fe2 <_dtoa_r+0x672>
 800a0aa:	e7cd      	b.n	800a048 <_dtoa_r+0x6d8>
 800a0ac:	9a08      	ldr	r2, [sp, #32]
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	f000 80c4 	beq.w	800a23c <_dtoa_r+0x8cc>
 800a0b4:	9a05      	ldr	r2, [sp, #20]
 800a0b6:	2a01      	cmp	r2, #1
 800a0b8:	f300 80a8 	bgt.w	800a20c <_dtoa_r+0x89c>
 800a0bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0be:	2a00      	cmp	r2, #0
 800a0c0:	f000 80a0 	beq.w	800a204 <_dtoa_r+0x894>
 800a0c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0c8:	9e06      	ldr	r6, [sp, #24]
 800a0ca:	4645      	mov	r5, r8
 800a0cc:	9a04      	ldr	r2, [sp, #16]
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	441a      	add	r2, r3
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	4498      	add	r8, r3
 800a0d6:	9204      	str	r2, [sp, #16]
 800a0d8:	f000 ff2a 	bl	800af30 <__i2b>
 800a0dc:	4607      	mov	r7, r0
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	dd0b      	ble.n	800a0fa <_dtoa_r+0x78a>
 800a0e2:	9b04      	ldr	r3, [sp, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dd08      	ble.n	800a0fa <_dtoa_r+0x78a>
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	9a04      	ldr	r2, [sp, #16]
 800a0ec:	bfa8      	it	ge
 800a0ee:	462b      	movge	r3, r5
 800a0f0:	eba8 0803 	sub.w	r8, r8, r3
 800a0f4:	1aed      	subs	r5, r5, r3
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	9304      	str	r3, [sp, #16]
 800a0fa:	9b06      	ldr	r3, [sp, #24]
 800a0fc:	b1fb      	cbz	r3, 800a13e <_dtoa_r+0x7ce>
 800a0fe:	9b08      	ldr	r3, [sp, #32]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 809f 	beq.w	800a244 <_dtoa_r+0x8d4>
 800a106:	2e00      	cmp	r6, #0
 800a108:	dd11      	ble.n	800a12e <_dtoa_r+0x7be>
 800a10a:	4639      	mov	r1, r7
 800a10c:	4632      	mov	r2, r6
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 ffca 	bl	800b0a8 <__pow5mult>
 800a114:	465a      	mov	r2, fp
 800a116:	4601      	mov	r1, r0
 800a118:	4607      	mov	r7, r0
 800a11a:	4620      	mov	r0, r4
 800a11c:	f000 ff1e 	bl	800af5c <__multiply>
 800a120:	4659      	mov	r1, fp
 800a122:	9007      	str	r0, [sp, #28]
 800a124:	4620      	mov	r0, r4
 800a126:	f000 fdfd 	bl	800ad24 <_Bfree>
 800a12a:	9b07      	ldr	r3, [sp, #28]
 800a12c:	469b      	mov	fp, r3
 800a12e:	9b06      	ldr	r3, [sp, #24]
 800a130:	1b9a      	subs	r2, r3, r6
 800a132:	d004      	beq.n	800a13e <_dtoa_r+0x7ce>
 800a134:	4659      	mov	r1, fp
 800a136:	4620      	mov	r0, r4
 800a138:	f000 ffb6 	bl	800b0a8 <__pow5mult>
 800a13c:	4683      	mov	fp, r0
 800a13e:	2101      	movs	r1, #1
 800a140:	4620      	mov	r0, r4
 800a142:	f000 fef5 	bl	800af30 <__i2b>
 800a146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a148:	2b00      	cmp	r3, #0
 800a14a:	4606      	mov	r6, r0
 800a14c:	dd7c      	ble.n	800a248 <_dtoa_r+0x8d8>
 800a14e:	461a      	mov	r2, r3
 800a150:	4601      	mov	r1, r0
 800a152:	4620      	mov	r0, r4
 800a154:	f000 ffa8 	bl	800b0a8 <__pow5mult>
 800a158:	9b05      	ldr	r3, [sp, #20]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	4606      	mov	r6, r0
 800a15e:	dd76      	ble.n	800a24e <_dtoa_r+0x8de>
 800a160:	2300      	movs	r3, #0
 800a162:	9306      	str	r3, [sp, #24]
 800a164:	6933      	ldr	r3, [r6, #16]
 800a166:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a16a:	6918      	ldr	r0, [r3, #16]
 800a16c:	f000 fe90 	bl	800ae90 <__hi0bits>
 800a170:	f1c0 0020 	rsb	r0, r0, #32
 800a174:	9b04      	ldr	r3, [sp, #16]
 800a176:	4418      	add	r0, r3
 800a178:	f010 001f 	ands.w	r0, r0, #31
 800a17c:	f000 8086 	beq.w	800a28c <_dtoa_r+0x91c>
 800a180:	f1c0 0320 	rsb	r3, r0, #32
 800a184:	2b04      	cmp	r3, #4
 800a186:	dd7f      	ble.n	800a288 <_dtoa_r+0x918>
 800a188:	f1c0 001c 	rsb	r0, r0, #28
 800a18c:	9b04      	ldr	r3, [sp, #16]
 800a18e:	4403      	add	r3, r0
 800a190:	4480      	add	r8, r0
 800a192:	4405      	add	r5, r0
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	f1b8 0f00 	cmp.w	r8, #0
 800a19a:	dd05      	ble.n	800a1a8 <_dtoa_r+0x838>
 800a19c:	4659      	mov	r1, fp
 800a19e:	4642      	mov	r2, r8
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 ffdb 	bl	800b15c <__lshift>
 800a1a6:	4683      	mov	fp, r0
 800a1a8:	9b04      	ldr	r3, [sp, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dd05      	ble.n	800a1ba <_dtoa_r+0x84a>
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 ffd2 	bl	800b15c <__lshift>
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d069      	beq.n	800a294 <_dtoa_r+0x924>
 800a1c0:	4631      	mov	r1, r6
 800a1c2:	4658      	mov	r0, fp
 800a1c4:	f001 f836 	bl	800b234 <__mcmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	da63      	bge.n	800a294 <_dtoa_r+0x924>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	4659      	mov	r1, fp
 800a1d0:	220a      	movs	r2, #10
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 fdc8 	bl	800ad68 <__multadd>
 800a1d8:	9b08      	ldr	r3, [sp, #32]
 800a1da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1de:	4683      	mov	fp, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 818f 	beq.w	800a504 <_dtoa_r+0xb94>
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	220a      	movs	r2, #10
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 fdbb 	bl	800ad68 <__multadd>
 800a1f2:	f1b9 0f00 	cmp.w	r9, #0
 800a1f6:	4607      	mov	r7, r0
 800a1f8:	f300 808e 	bgt.w	800a318 <_dtoa_r+0x9a8>
 800a1fc:	9b05      	ldr	r3, [sp, #20]
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	dc50      	bgt.n	800a2a4 <_dtoa_r+0x934>
 800a202:	e089      	b.n	800a318 <_dtoa_r+0x9a8>
 800a204:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a20a:	e75d      	b.n	800a0c8 <_dtoa_r+0x758>
 800a20c:	9b01      	ldr	r3, [sp, #4]
 800a20e:	1e5e      	subs	r6, r3, #1
 800a210:	9b06      	ldr	r3, [sp, #24]
 800a212:	42b3      	cmp	r3, r6
 800a214:	bfbf      	itttt	lt
 800a216:	9b06      	ldrlt	r3, [sp, #24]
 800a218:	9606      	strlt	r6, [sp, #24]
 800a21a:	1af2      	sublt	r2, r6, r3
 800a21c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a21e:	bfb6      	itet	lt
 800a220:	189b      	addlt	r3, r3, r2
 800a222:	1b9e      	subge	r6, r3, r6
 800a224:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	bfb8      	it	lt
 800a22a:	2600      	movlt	r6, #0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	bfb5      	itete	lt
 800a230:	eba8 0503 	sublt.w	r5, r8, r3
 800a234:	9b01      	ldrge	r3, [sp, #4]
 800a236:	2300      	movlt	r3, #0
 800a238:	4645      	movge	r5, r8
 800a23a:	e747      	b.n	800a0cc <_dtoa_r+0x75c>
 800a23c:	9e06      	ldr	r6, [sp, #24]
 800a23e:	9f08      	ldr	r7, [sp, #32]
 800a240:	4645      	mov	r5, r8
 800a242:	e74c      	b.n	800a0de <_dtoa_r+0x76e>
 800a244:	9a06      	ldr	r2, [sp, #24]
 800a246:	e775      	b.n	800a134 <_dtoa_r+0x7c4>
 800a248:	9b05      	ldr	r3, [sp, #20]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	dc18      	bgt.n	800a280 <_dtoa_r+0x910>
 800a24e:	9b02      	ldr	r3, [sp, #8]
 800a250:	b9b3      	cbnz	r3, 800a280 <_dtoa_r+0x910>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a258:	b9a3      	cbnz	r3, 800a284 <_dtoa_r+0x914>
 800a25a:	9b03      	ldr	r3, [sp, #12]
 800a25c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a260:	0d1b      	lsrs	r3, r3, #20
 800a262:	051b      	lsls	r3, r3, #20
 800a264:	b12b      	cbz	r3, 800a272 <_dtoa_r+0x902>
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	3301      	adds	r3, #1
 800a26a:	9304      	str	r3, [sp, #16]
 800a26c:	f108 0801 	add.w	r8, r8, #1
 800a270:	2301      	movs	r3, #1
 800a272:	9306      	str	r3, [sp, #24]
 800a274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a276:	2b00      	cmp	r3, #0
 800a278:	f47f af74 	bne.w	800a164 <_dtoa_r+0x7f4>
 800a27c:	2001      	movs	r0, #1
 800a27e:	e779      	b.n	800a174 <_dtoa_r+0x804>
 800a280:	2300      	movs	r3, #0
 800a282:	e7f6      	b.n	800a272 <_dtoa_r+0x902>
 800a284:	9b02      	ldr	r3, [sp, #8]
 800a286:	e7f4      	b.n	800a272 <_dtoa_r+0x902>
 800a288:	d085      	beq.n	800a196 <_dtoa_r+0x826>
 800a28a:	4618      	mov	r0, r3
 800a28c:	301c      	adds	r0, #28
 800a28e:	e77d      	b.n	800a18c <_dtoa_r+0x81c>
 800a290:	40240000 	.word	0x40240000
 800a294:	9b01      	ldr	r3, [sp, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	dc38      	bgt.n	800a30c <_dtoa_r+0x99c>
 800a29a:	9b05      	ldr	r3, [sp, #20]
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	dd35      	ble.n	800a30c <_dtoa_r+0x99c>
 800a2a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a2a4:	f1b9 0f00 	cmp.w	r9, #0
 800a2a8:	d10d      	bne.n	800a2c6 <_dtoa_r+0x956>
 800a2aa:	4631      	mov	r1, r6
 800a2ac:	464b      	mov	r3, r9
 800a2ae:	2205      	movs	r2, #5
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fd59 	bl	800ad68 <__multadd>
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	4658      	mov	r0, fp
 800a2bc:	f000 ffba 	bl	800b234 <__mcmp>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	f73f adbd 	bgt.w	8009e40 <_dtoa_r+0x4d0>
 800a2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c8:	9d00      	ldr	r5, [sp, #0]
 800a2ca:	ea6f 0a03 	mvn.w	sl, r3
 800a2ce:	f04f 0800 	mov.w	r8, #0
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 fd25 	bl	800ad24 <_Bfree>
 800a2da:	2f00      	cmp	r7, #0
 800a2dc:	f43f aeb4 	beq.w	800a048 <_dtoa_r+0x6d8>
 800a2e0:	f1b8 0f00 	cmp.w	r8, #0
 800a2e4:	d005      	beq.n	800a2f2 <_dtoa_r+0x982>
 800a2e6:	45b8      	cmp	r8, r7
 800a2e8:	d003      	beq.n	800a2f2 <_dtoa_r+0x982>
 800a2ea:	4641      	mov	r1, r8
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f000 fd19 	bl	800ad24 <_Bfree>
 800a2f2:	4639      	mov	r1, r7
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 fd15 	bl	800ad24 <_Bfree>
 800a2fa:	e6a5      	b.n	800a048 <_dtoa_r+0x6d8>
 800a2fc:	2600      	movs	r6, #0
 800a2fe:	4637      	mov	r7, r6
 800a300:	e7e1      	b.n	800a2c6 <_dtoa_r+0x956>
 800a302:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a304:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a308:	4637      	mov	r7, r6
 800a30a:	e599      	b.n	8009e40 <_dtoa_r+0x4d0>
 800a30c:	9b08      	ldr	r3, [sp, #32]
 800a30e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 80fd 	beq.w	800a512 <_dtoa_r+0xba2>
 800a318:	2d00      	cmp	r5, #0
 800a31a:	dd05      	ble.n	800a328 <_dtoa_r+0x9b8>
 800a31c:	4639      	mov	r1, r7
 800a31e:	462a      	mov	r2, r5
 800a320:	4620      	mov	r0, r4
 800a322:	f000 ff1b 	bl	800b15c <__lshift>
 800a326:	4607      	mov	r7, r0
 800a328:	9b06      	ldr	r3, [sp, #24]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d05c      	beq.n	800a3e8 <_dtoa_r+0xa78>
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	4620      	mov	r0, r4
 800a332:	f000 fcb7 	bl	800aca4 <_Balloc>
 800a336:	4605      	mov	r5, r0
 800a338:	b928      	cbnz	r0, 800a346 <_dtoa_r+0x9d6>
 800a33a:	4b80      	ldr	r3, [pc, #512]	; (800a53c <_dtoa_r+0xbcc>)
 800a33c:	4602      	mov	r2, r0
 800a33e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a342:	f7ff bb2e 	b.w	80099a2 <_dtoa_r+0x32>
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	3202      	adds	r2, #2
 800a34a:	0092      	lsls	r2, r2, #2
 800a34c:	f107 010c 	add.w	r1, r7, #12
 800a350:	300c      	adds	r0, #12
 800a352:	f000 fc99 	bl	800ac88 <memcpy>
 800a356:	2201      	movs	r2, #1
 800a358:	4629      	mov	r1, r5
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 fefe 	bl	800b15c <__lshift>
 800a360:	9b00      	ldr	r3, [sp, #0]
 800a362:	3301      	adds	r3, #1
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	9b00      	ldr	r3, [sp, #0]
 800a368:	444b      	add	r3, r9
 800a36a:	9307      	str	r3, [sp, #28]
 800a36c:	9b02      	ldr	r3, [sp, #8]
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	46b8      	mov	r8, r7
 800a374:	9306      	str	r3, [sp, #24]
 800a376:	4607      	mov	r7, r0
 800a378:	9b01      	ldr	r3, [sp, #4]
 800a37a:	4631      	mov	r1, r6
 800a37c:	3b01      	subs	r3, #1
 800a37e:	4658      	mov	r0, fp
 800a380:	9302      	str	r3, [sp, #8]
 800a382:	f7ff fa67 	bl	8009854 <quorem>
 800a386:	4603      	mov	r3, r0
 800a388:	3330      	adds	r3, #48	; 0x30
 800a38a:	9004      	str	r0, [sp, #16]
 800a38c:	4641      	mov	r1, r8
 800a38e:	4658      	mov	r0, fp
 800a390:	9308      	str	r3, [sp, #32]
 800a392:	f000 ff4f 	bl	800b234 <__mcmp>
 800a396:	463a      	mov	r2, r7
 800a398:	4681      	mov	r9, r0
 800a39a:	4631      	mov	r1, r6
 800a39c:	4620      	mov	r0, r4
 800a39e:	f000 ff65 	bl	800b26c <__mdiff>
 800a3a2:	68c2      	ldr	r2, [r0, #12]
 800a3a4:	9b08      	ldr	r3, [sp, #32]
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	bb02      	cbnz	r2, 800a3ec <_dtoa_r+0xa7c>
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	4658      	mov	r0, fp
 800a3ae:	f000 ff41 	bl	800b234 <__mcmp>
 800a3b2:	9b08      	ldr	r3, [sp, #32]
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a3be:	f000 fcb1 	bl	800ad24 <_Bfree>
 800a3c2:	9b05      	ldr	r3, [sp, #20]
 800a3c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c6:	9d01      	ldr	r5, [sp, #4]
 800a3c8:	ea43 0102 	orr.w	r1, r3, r2
 800a3cc:	9b06      	ldr	r3, [sp, #24]
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	d10d      	bne.n	800a3f0 <_dtoa_r+0xa80>
 800a3d4:	2b39      	cmp	r3, #57	; 0x39
 800a3d6:	d029      	beq.n	800a42c <_dtoa_r+0xabc>
 800a3d8:	f1b9 0f00 	cmp.w	r9, #0
 800a3dc:	dd01      	ble.n	800a3e2 <_dtoa_r+0xa72>
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	3331      	adds	r3, #49	; 0x31
 800a3e2:	9a02      	ldr	r2, [sp, #8]
 800a3e4:	7013      	strb	r3, [r2, #0]
 800a3e6:	e774      	b.n	800a2d2 <_dtoa_r+0x962>
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	e7b9      	b.n	800a360 <_dtoa_r+0x9f0>
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	e7e2      	b.n	800a3b6 <_dtoa_r+0xa46>
 800a3f0:	f1b9 0f00 	cmp.w	r9, #0
 800a3f4:	db06      	blt.n	800a404 <_dtoa_r+0xa94>
 800a3f6:	9905      	ldr	r1, [sp, #20]
 800a3f8:	ea41 0909 	orr.w	r9, r1, r9
 800a3fc:	9906      	ldr	r1, [sp, #24]
 800a3fe:	ea59 0101 	orrs.w	r1, r9, r1
 800a402:	d120      	bne.n	800a446 <_dtoa_r+0xad6>
 800a404:	2a00      	cmp	r2, #0
 800a406:	ddec      	ble.n	800a3e2 <_dtoa_r+0xa72>
 800a408:	4659      	mov	r1, fp
 800a40a:	2201      	movs	r2, #1
 800a40c:	4620      	mov	r0, r4
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	f000 fea4 	bl	800b15c <__lshift>
 800a414:	4631      	mov	r1, r6
 800a416:	4683      	mov	fp, r0
 800a418:	f000 ff0c 	bl	800b234 <__mcmp>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	9b01      	ldr	r3, [sp, #4]
 800a420:	dc02      	bgt.n	800a428 <_dtoa_r+0xab8>
 800a422:	d1de      	bne.n	800a3e2 <_dtoa_r+0xa72>
 800a424:	07da      	lsls	r2, r3, #31
 800a426:	d5dc      	bpl.n	800a3e2 <_dtoa_r+0xa72>
 800a428:	2b39      	cmp	r3, #57	; 0x39
 800a42a:	d1d8      	bne.n	800a3de <_dtoa_r+0xa6e>
 800a42c:	9a02      	ldr	r2, [sp, #8]
 800a42e:	2339      	movs	r3, #57	; 0x39
 800a430:	7013      	strb	r3, [r2, #0]
 800a432:	462b      	mov	r3, r5
 800a434:	461d      	mov	r5, r3
 800a436:	3b01      	subs	r3, #1
 800a438:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a43c:	2a39      	cmp	r2, #57	; 0x39
 800a43e:	d050      	beq.n	800a4e2 <_dtoa_r+0xb72>
 800a440:	3201      	adds	r2, #1
 800a442:	701a      	strb	r2, [r3, #0]
 800a444:	e745      	b.n	800a2d2 <_dtoa_r+0x962>
 800a446:	2a00      	cmp	r2, #0
 800a448:	dd03      	ble.n	800a452 <_dtoa_r+0xae2>
 800a44a:	2b39      	cmp	r3, #57	; 0x39
 800a44c:	d0ee      	beq.n	800a42c <_dtoa_r+0xabc>
 800a44e:	3301      	adds	r3, #1
 800a450:	e7c7      	b.n	800a3e2 <_dtoa_r+0xa72>
 800a452:	9a01      	ldr	r2, [sp, #4]
 800a454:	9907      	ldr	r1, [sp, #28]
 800a456:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a45a:	428a      	cmp	r2, r1
 800a45c:	d02a      	beq.n	800a4b4 <_dtoa_r+0xb44>
 800a45e:	4659      	mov	r1, fp
 800a460:	2300      	movs	r3, #0
 800a462:	220a      	movs	r2, #10
 800a464:	4620      	mov	r0, r4
 800a466:	f000 fc7f 	bl	800ad68 <__multadd>
 800a46a:	45b8      	cmp	r8, r7
 800a46c:	4683      	mov	fp, r0
 800a46e:	f04f 0300 	mov.w	r3, #0
 800a472:	f04f 020a 	mov.w	r2, #10
 800a476:	4641      	mov	r1, r8
 800a478:	4620      	mov	r0, r4
 800a47a:	d107      	bne.n	800a48c <_dtoa_r+0xb1c>
 800a47c:	f000 fc74 	bl	800ad68 <__multadd>
 800a480:	4680      	mov	r8, r0
 800a482:	4607      	mov	r7, r0
 800a484:	9b01      	ldr	r3, [sp, #4]
 800a486:	3301      	adds	r3, #1
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	e775      	b.n	800a378 <_dtoa_r+0xa08>
 800a48c:	f000 fc6c 	bl	800ad68 <__multadd>
 800a490:	4639      	mov	r1, r7
 800a492:	4680      	mov	r8, r0
 800a494:	2300      	movs	r3, #0
 800a496:	220a      	movs	r2, #10
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 fc65 	bl	800ad68 <__multadd>
 800a49e:	4607      	mov	r7, r0
 800a4a0:	e7f0      	b.n	800a484 <_dtoa_r+0xb14>
 800a4a2:	f1b9 0f00 	cmp.w	r9, #0
 800a4a6:	9a00      	ldr	r2, [sp, #0]
 800a4a8:	bfcc      	ite	gt
 800a4aa:	464d      	movgt	r5, r9
 800a4ac:	2501      	movle	r5, #1
 800a4ae:	4415      	add	r5, r2
 800a4b0:	f04f 0800 	mov.w	r8, #0
 800a4b4:	4659      	mov	r1, fp
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	f000 fe4e 	bl	800b15c <__lshift>
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4683      	mov	fp, r0
 800a4c4:	f000 feb6 	bl	800b234 <__mcmp>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	dcb2      	bgt.n	800a432 <_dtoa_r+0xac2>
 800a4cc:	d102      	bne.n	800a4d4 <_dtoa_r+0xb64>
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	07db      	lsls	r3, r3, #31
 800a4d2:	d4ae      	bmi.n	800a432 <_dtoa_r+0xac2>
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	461d      	mov	r5, r3
 800a4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4dc:	2a30      	cmp	r2, #48	; 0x30
 800a4de:	d0fa      	beq.n	800a4d6 <_dtoa_r+0xb66>
 800a4e0:	e6f7      	b.n	800a2d2 <_dtoa_r+0x962>
 800a4e2:	9a00      	ldr	r2, [sp, #0]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d1a5      	bne.n	800a434 <_dtoa_r+0xac4>
 800a4e8:	f10a 0a01 	add.w	sl, sl, #1
 800a4ec:	2331      	movs	r3, #49	; 0x31
 800a4ee:	e779      	b.n	800a3e4 <_dtoa_r+0xa74>
 800a4f0:	4b13      	ldr	r3, [pc, #76]	; (800a540 <_dtoa_r+0xbd0>)
 800a4f2:	f7ff baaf 	b.w	8009a54 <_dtoa_r+0xe4>
 800a4f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f47f aa86 	bne.w	8009a0a <_dtoa_r+0x9a>
 800a4fe:	4b11      	ldr	r3, [pc, #68]	; (800a544 <_dtoa_r+0xbd4>)
 800a500:	f7ff baa8 	b.w	8009a54 <_dtoa_r+0xe4>
 800a504:	f1b9 0f00 	cmp.w	r9, #0
 800a508:	dc03      	bgt.n	800a512 <_dtoa_r+0xba2>
 800a50a:	9b05      	ldr	r3, [sp, #20]
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	f73f aec9 	bgt.w	800a2a4 <_dtoa_r+0x934>
 800a512:	9d00      	ldr	r5, [sp, #0]
 800a514:	4631      	mov	r1, r6
 800a516:	4658      	mov	r0, fp
 800a518:	f7ff f99c 	bl	8009854 <quorem>
 800a51c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a520:	f805 3b01 	strb.w	r3, [r5], #1
 800a524:	9a00      	ldr	r2, [sp, #0]
 800a526:	1aaa      	subs	r2, r5, r2
 800a528:	4591      	cmp	r9, r2
 800a52a:	ddba      	ble.n	800a4a2 <_dtoa_r+0xb32>
 800a52c:	4659      	mov	r1, fp
 800a52e:	2300      	movs	r3, #0
 800a530:	220a      	movs	r2, #10
 800a532:	4620      	mov	r0, r4
 800a534:	f000 fc18 	bl	800ad68 <__multadd>
 800a538:	4683      	mov	fp, r0
 800a53a:	e7eb      	b.n	800a514 <_dtoa_r+0xba4>
 800a53c:	0801fd89 	.word	0x0801fd89
 800a540:	0801fae8 	.word	0x0801fae8
 800a544:	0801fd1d 	.word	0x0801fd1d

0800a548 <fiprintf>:
 800a548:	b40e      	push	{r1, r2, r3}
 800a54a:	b503      	push	{r0, r1, lr}
 800a54c:	4601      	mov	r1, r0
 800a54e:	ab03      	add	r3, sp, #12
 800a550:	4805      	ldr	r0, [pc, #20]	; (800a568 <fiprintf+0x20>)
 800a552:	f853 2b04 	ldr.w	r2, [r3], #4
 800a556:	6800      	ldr	r0, [r0, #0]
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	f001 fa9d 	bl	800ba98 <_vfiprintf_r>
 800a55e:	b002      	add	sp, #8
 800a560:	f85d eb04 	ldr.w	lr, [sp], #4
 800a564:	b003      	add	sp, #12
 800a566:	4770      	bx	lr
 800a568:	2000003c 	.word	0x2000003c

0800a56c <rshift>:
 800a56c:	6903      	ldr	r3, [r0, #16]
 800a56e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a572:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a576:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a57a:	f100 0414 	add.w	r4, r0, #20
 800a57e:	dd45      	ble.n	800a60c <rshift+0xa0>
 800a580:	f011 011f 	ands.w	r1, r1, #31
 800a584:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a588:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a58c:	d10c      	bne.n	800a5a8 <rshift+0x3c>
 800a58e:	f100 0710 	add.w	r7, r0, #16
 800a592:	4629      	mov	r1, r5
 800a594:	42b1      	cmp	r1, r6
 800a596:	d334      	bcc.n	800a602 <rshift+0x96>
 800a598:	1a9b      	subs	r3, r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	1eea      	subs	r2, r5, #3
 800a59e:	4296      	cmp	r6, r2
 800a5a0:	bf38      	it	cc
 800a5a2:	2300      	movcc	r3, #0
 800a5a4:	4423      	add	r3, r4
 800a5a6:	e015      	b.n	800a5d4 <rshift+0x68>
 800a5a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a5ac:	f1c1 0820 	rsb	r8, r1, #32
 800a5b0:	40cf      	lsrs	r7, r1
 800a5b2:	f105 0e04 	add.w	lr, r5, #4
 800a5b6:	46a1      	mov	r9, r4
 800a5b8:	4576      	cmp	r6, lr
 800a5ba:	46f4      	mov	ip, lr
 800a5bc:	d815      	bhi.n	800a5ea <rshift+0x7e>
 800a5be:	1a9b      	subs	r3, r3, r2
 800a5c0:	009a      	lsls	r2, r3, #2
 800a5c2:	3a04      	subs	r2, #4
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	42ae      	cmp	r6, r5
 800a5c8:	bf38      	it	cc
 800a5ca:	2200      	movcc	r2, #0
 800a5cc:	18a3      	adds	r3, r4, r2
 800a5ce:	50a7      	str	r7, [r4, r2]
 800a5d0:	b107      	cbz	r7, 800a5d4 <rshift+0x68>
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	1b1a      	subs	r2, r3, r4
 800a5d6:	42a3      	cmp	r3, r4
 800a5d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a5dc:	bf08      	it	eq
 800a5de:	2300      	moveq	r3, #0
 800a5e0:	6102      	str	r2, [r0, #16]
 800a5e2:	bf08      	it	eq
 800a5e4:	6143      	streq	r3, [r0, #20]
 800a5e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5ea:	f8dc c000 	ldr.w	ip, [ip]
 800a5ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800a5f2:	ea4c 0707 	orr.w	r7, ip, r7
 800a5f6:	f849 7b04 	str.w	r7, [r9], #4
 800a5fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5fe:	40cf      	lsrs	r7, r1
 800a600:	e7da      	b.n	800a5b8 <rshift+0x4c>
 800a602:	f851 cb04 	ldr.w	ip, [r1], #4
 800a606:	f847 cf04 	str.w	ip, [r7, #4]!
 800a60a:	e7c3      	b.n	800a594 <rshift+0x28>
 800a60c:	4623      	mov	r3, r4
 800a60e:	e7e1      	b.n	800a5d4 <rshift+0x68>

0800a610 <__hexdig_fun>:
 800a610:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a614:	2b09      	cmp	r3, #9
 800a616:	d802      	bhi.n	800a61e <__hexdig_fun+0xe>
 800a618:	3820      	subs	r0, #32
 800a61a:	b2c0      	uxtb	r0, r0
 800a61c:	4770      	bx	lr
 800a61e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a622:	2b05      	cmp	r3, #5
 800a624:	d801      	bhi.n	800a62a <__hexdig_fun+0x1a>
 800a626:	3847      	subs	r0, #71	; 0x47
 800a628:	e7f7      	b.n	800a61a <__hexdig_fun+0xa>
 800a62a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a62e:	2b05      	cmp	r3, #5
 800a630:	d801      	bhi.n	800a636 <__hexdig_fun+0x26>
 800a632:	3827      	subs	r0, #39	; 0x27
 800a634:	e7f1      	b.n	800a61a <__hexdig_fun+0xa>
 800a636:	2000      	movs	r0, #0
 800a638:	4770      	bx	lr
	...

0800a63c <__gethex>:
 800a63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a640:	ed2d 8b02 	vpush	{d8}
 800a644:	b089      	sub	sp, #36	; 0x24
 800a646:	ee08 0a10 	vmov	s16, r0
 800a64a:	9304      	str	r3, [sp, #16]
 800a64c:	4bbc      	ldr	r3, [pc, #752]	; (800a940 <__gethex+0x304>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	4618      	mov	r0, r3
 800a654:	468b      	mov	fp, r1
 800a656:	4690      	mov	r8, r2
 800a658:	f7f5 fdcc 	bl	80001f4 <strlen>
 800a65c:	9b01      	ldr	r3, [sp, #4]
 800a65e:	f8db 2000 	ldr.w	r2, [fp]
 800a662:	4403      	add	r3, r0
 800a664:	4682      	mov	sl, r0
 800a666:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a66a:	9305      	str	r3, [sp, #20]
 800a66c:	1c93      	adds	r3, r2, #2
 800a66e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a672:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a676:	32fe      	adds	r2, #254	; 0xfe
 800a678:	18d1      	adds	r1, r2, r3
 800a67a:	461f      	mov	r7, r3
 800a67c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a680:	9100      	str	r1, [sp, #0]
 800a682:	2830      	cmp	r0, #48	; 0x30
 800a684:	d0f8      	beq.n	800a678 <__gethex+0x3c>
 800a686:	f7ff ffc3 	bl	800a610 <__hexdig_fun>
 800a68a:	4604      	mov	r4, r0
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d13a      	bne.n	800a706 <__gethex+0xca>
 800a690:	9901      	ldr	r1, [sp, #4]
 800a692:	4652      	mov	r2, sl
 800a694:	4638      	mov	r0, r7
 800a696:	f001 fb47 	bl	800bd28 <strncmp>
 800a69a:	4605      	mov	r5, r0
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d168      	bne.n	800a772 <__gethex+0x136>
 800a6a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a6a4:	eb07 060a 	add.w	r6, r7, sl
 800a6a8:	f7ff ffb2 	bl	800a610 <__hexdig_fun>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d062      	beq.n	800a776 <__gethex+0x13a>
 800a6b0:	4633      	mov	r3, r6
 800a6b2:	7818      	ldrb	r0, [r3, #0]
 800a6b4:	2830      	cmp	r0, #48	; 0x30
 800a6b6:	461f      	mov	r7, r3
 800a6b8:	f103 0301 	add.w	r3, r3, #1
 800a6bc:	d0f9      	beq.n	800a6b2 <__gethex+0x76>
 800a6be:	f7ff ffa7 	bl	800a610 <__hexdig_fun>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	fab0 f480 	clz	r4, r0
 800a6c8:	0964      	lsrs	r4, r4, #5
 800a6ca:	4635      	mov	r5, r6
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	463a      	mov	r2, r7
 800a6d0:	4616      	mov	r6, r2
 800a6d2:	3201      	adds	r2, #1
 800a6d4:	7830      	ldrb	r0, [r6, #0]
 800a6d6:	f7ff ff9b 	bl	800a610 <__hexdig_fun>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d1f8      	bne.n	800a6d0 <__gethex+0x94>
 800a6de:	9901      	ldr	r1, [sp, #4]
 800a6e0:	4652      	mov	r2, sl
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f001 fb20 	bl	800bd28 <strncmp>
 800a6e8:	b980      	cbnz	r0, 800a70c <__gethex+0xd0>
 800a6ea:	b94d      	cbnz	r5, 800a700 <__gethex+0xc4>
 800a6ec:	eb06 050a 	add.w	r5, r6, sl
 800a6f0:	462a      	mov	r2, r5
 800a6f2:	4616      	mov	r6, r2
 800a6f4:	3201      	adds	r2, #1
 800a6f6:	7830      	ldrb	r0, [r6, #0]
 800a6f8:	f7ff ff8a 	bl	800a610 <__hexdig_fun>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	d1f8      	bne.n	800a6f2 <__gethex+0xb6>
 800a700:	1bad      	subs	r5, r5, r6
 800a702:	00ad      	lsls	r5, r5, #2
 800a704:	e004      	b.n	800a710 <__gethex+0xd4>
 800a706:	2400      	movs	r4, #0
 800a708:	4625      	mov	r5, r4
 800a70a:	e7e0      	b.n	800a6ce <__gethex+0x92>
 800a70c:	2d00      	cmp	r5, #0
 800a70e:	d1f7      	bne.n	800a700 <__gethex+0xc4>
 800a710:	7833      	ldrb	r3, [r6, #0]
 800a712:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a716:	2b50      	cmp	r3, #80	; 0x50
 800a718:	d13b      	bne.n	800a792 <__gethex+0x156>
 800a71a:	7873      	ldrb	r3, [r6, #1]
 800a71c:	2b2b      	cmp	r3, #43	; 0x2b
 800a71e:	d02c      	beq.n	800a77a <__gethex+0x13e>
 800a720:	2b2d      	cmp	r3, #45	; 0x2d
 800a722:	d02e      	beq.n	800a782 <__gethex+0x146>
 800a724:	1c71      	adds	r1, r6, #1
 800a726:	f04f 0900 	mov.w	r9, #0
 800a72a:	7808      	ldrb	r0, [r1, #0]
 800a72c:	f7ff ff70 	bl	800a610 <__hexdig_fun>
 800a730:	1e43      	subs	r3, r0, #1
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b18      	cmp	r3, #24
 800a736:	d82c      	bhi.n	800a792 <__gethex+0x156>
 800a738:	f1a0 0210 	sub.w	r2, r0, #16
 800a73c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a740:	f7ff ff66 	bl	800a610 <__hexdig_fun>
 800a744:	1e43      	subs	r3, r0, #1
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b18      	cmp	r3, #24
 800a74a:	d91d      	bls.n	800a788 <__gethex+0x14c>
 800a74c:	f1b9 0f00 	cmp.w	r9, #0
 800a750:	d000      	beq.n	800a754 <__gethex+0x118>
 800a752:	4252      	negs	r2, r2
 800a754:	4415      	add	r5, r2
 800a756:	f8cb 1000 	str.w	r1, [fp]
 800a75a:	b1e4      	cbz	r4, 800a796 <__gethex+0x15a>
 800a75c:	9b00      	ldr	r3, [sp, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	bf14      	ite	ne
 800a762:	2700      	movne	r7, #0
 800a764:	2706      	moveq	r7, #6
 800a766:	4638      	mov	r0, r7
 800a768:	b009      	add	sp, #36	; 0x24
 800a76a:	ecbd 8b02 	vpop	{d8}
 800a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a772:	463e      	mov	r6, r7
 800a774:	4625      	mov	r5, r4
 800a776:	2401      	movs	r4, #1
 800a778:	e7ca      	b.n	800a710 <__gethex+0xd4>
 800a77a:	f04f 0900 	mov.w	r9, #0
 800a77e:	1cb1      	adds	r1, r6, #2
 800a780:	e7d3      	b.n	800a72a <__gethex+0xee>
 800a782:	f04f 0901 	mov.w	r9, #1
 800a786:	e7fa      	b.n	800a77e <__gethex+0x142>
 800a788:	230a      	movs	r3, #10
 800a78a:	fb03 0202 	mla	r2, r3, r2, r0
 800a78e:	3a10      	subs	r2, #16
 800a790:	e7d4      	b.n	800a73c <__gethex+0x100>
 800a792:	4631      	mov	r1, r6
 800a794:	e7df      	b.n	800a756 <__gethex+0x11a>
 800a796:	1bf3      	subs	r3, r6, r7
 800a798:	3b01      	subs	r3, #1
 800a79a:	4621      	mov	r1, r4
 800a79c:	2b07      	cmp	r3, #7
 800a79e:	dc0b      	bgt.n	800a7b8 <__gethex+0x17c>
 800a7a0:	ee18 0a10 	vmov	r0, s16
 800a7a4:	f000 fa7e 	bl	800aca4 <_Balloc>
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	b940      	cbnz	r0, 800a7be <__gethex+0x182>
 800a7ac:	4b65      	ldr	r3, [pc, #404]	; (800a944 <__gethex+0x308>)
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	21de      	movs	r1, #222	; 0xde
 800a7b2:	4865      	ldr	r0, [pc, #404]	; (800a948 <__gethex+0x30c>)
 800a7b4:	f7ff f830 	bl	8009818 <__assert_func>
 800a7b8:	3101      	adds	r1, #1
 800a7ba:	105b      	asrs	r3, r3, #1
 800a7bc:	e7ee      	b.n	800a79c <__gethex+0x160>
 800a7be:	f100 0914 	add.w	r9, r0, #20
 800a7c2:	f04f 0b00 	mov.w	fp, #0
 800a7c6:	f1ca 0301 	rsb	r3, sl, #1
 800a7ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800a7ce:	f8cd b000 	str.w	fp, [sp]
 800a7d2:	9306      	str	r3, [sp, #24]
 800a7d4:	42b7      	cmp	r7, r6
 800a7d6:	d340      	bcc.n	800a85a <__gethex+0x21e>
 800a7d8:	9802      	ldr	r0, [sp, #8]
 800a7da:	9b00      	ldr	r3, [sp, #0]
 800a7dc:	f840 3b04 	str.w	r3, [r0], #4
 800a7e0:	eba0 0009 	sub.w	r0, r0, r9
 800a7e4:	1080      	asrs	r0, r0, #2
 800a7e6:	0146      	lsls	r6, r0, #5
 800a7e8:	6120      	str	r0, [r4, #16]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 fb50 	bl	800ae90 <__hi0bits>
 800a7f0:	1a30      	subs	r0, r6, r0
 800a7f2:	f8d8 6000 	ldr.w	r6, [r8]
 800a7f6:	42b0      	cmp	r0, r6
 800a7f8:	dd63      	ble.n	800a8c2 <__gethex+0x286>
 800a7fa:	1b87      	subs	r7, r0, r6
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	4620      	mov	r0, r4
 800a800:	f000 feea 	bl	800b5d8 <__any_on>
 800a804:	4682      	mov	sl, r0
 800a806:	b1a8      	cbz	r0, 800a834 <__gethex+0x1f8>
 800a808:	1e7b      	subs	r3, r7, #1
 800a80a:	1159      	asrs	r1, r3, #5
 800a80c:	f003 021f 	and.w	r2, r3, #31
 800a810:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a814:	f04f 0a01 	mov.w	sl, #1
 800a818:	fa0a f202 	lsl.w	r2, sl, r2
 800a81c:	420a      	tst	r2, r1
 800a81e:	d009      	beq.n	800a834 <__gethex+0x1f8>
 800a820:	4553      	cmp	r3, sl
 800a822:	dd05      	ble.n	800a830 <__gethex+0x1f4>
 800a824:	1eb9      	subs	r1, r7, #2
 800a826:	4620      	mov	r0, r4
 800a828:	f000 fed6 	bl	800b5d8 <__any_on>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d145      	bne.n	800a8bc <__gethex+0x280>
 800a830:	f04f 0a02 	mov.w	sl, #2
 800a834:	4639      	mov	r1, r7
 800a836:	4620      	mov	r0, r4
 800a838:	f7ff fe98 	bl	800a56c <rshift>
 800a83c:	443d      	add	r5, r7
 800a83e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a842:	42ab      	cmp	r3, r5
 800a844:	da4c      	bge.n	800a8e0 <__gethex+0x2a4>
 800a846:	ee18 0a10 	vmov	r0, s16
 800a84a:	4621      	mov	r1, r4
 800a84c:	f000 fa6a 	bl	800ad24 <_Bfree>
 800a850:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a852:	2300      	movs	r3, #0
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	27a3      	movs	r7, #163	; 0xa3
 800a858:	e785      	b.n	800a766 <__gethex+0x12a>
 800a85a:	1e73      	subs	r3, r6, #1
 800a85c:	9a05      	ldr	r2, [sp, #20]
 800a85e:	9303      	str	r3, [sp, #12]
 800a860:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a864:	4293      	cmp	r3, r2
 800a866:	d019      	beq.n	800a89c <__gethex+0x260>
 800a868:	f1bb 0f20 	cmp.w	fp, #32
 800a86c:	d107      	bne.n	800a87e <__gethex+0x242>
 800a86e:	9b02      	ldr	r3, [sp, #8]
 800a870:	9a00      	ldr	r2, [sp, #0]
 800a872:	f843 2b04 	str.w	r2, [r3], #4
 800a876:	9302      	str	r3, [sp, #8]
 800a878:	2300      	movs	r3, #0
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	469b      	mov	fp, r3
 800a87e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a882:	f7ff fec5 	bl	800a610 <__hexdig_fun>
 800a886:	9b00      	ldr	r3, [sp, #0]
 800a888:	f000 000f 	and.w	r0, r0, #15
 800a88c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a890:	4303      	orrs	r3, r0
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	f10b 0b04 	add.w	fp, fp, #4
 800a898:	9b03      	ldr	r3, [sp, #12]
 800a89a:	e00d      	b.n	800a8b8 <__gethex+0x27c>
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	9a06      	ldr	r2, [sp, #24]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	42bb      	cmp	r3, r7
 800a8a4:	d3e0      	bcc.n	800a868 <__gethex+0x22c>
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	9901      	ldr	r1, [sp, #4]
 800a8aa:	9307      	str	r3, [sp, #28]
 800a8ac:	4652      	mov	r2, sl
 800a8ae:	f001 fa3b 	bl	800bd28 <strncmp>
 800a8b2:	9b07      	ldr	r3, [sp, #28]
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d1d7      	bne.n	800a868 <__gethex+0x22c>
 800a8b8:	461e      	mov	r6, r3
 800a8ba:	e78b      	b.n	800a7d4 <__gethex+0x198>
 800a8bc:	f04f 0a03 	mov.w	sl, #3
 800a8c0:	e7b8      	b.n	800a834 <__gethex+0x1f8>
 800a8c2:	da0a      	bge.n	800a8da <__gethex+0x29e>
 800a8c4:	1a37      	subs	r7, r6, r0
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	ee18 0a10 	vmov	r0, s16
 800a8cc:	463a      	mov	r2, r7
 800a8ce:	f000 fc45 	bl	800b15c <__lshift>
 800a8d2:	1bed      	subs	r5, r5, r7
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	f100 0914 	add.w	r9, r0, #20
 800a8da:	f04f 0a00 	mov.w	sl, #0
 800a8de:	e7ae      	b.n	800a83e <__gethex+0x202>
 800a8e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a8e4:	42a8      	cmp	r0, r5
 800a8e6:	dd72      	ble.n	800a9ce <__gethex+0x392>
 800a8e8:	1b45      	subs	r5, r0, r5
 800a8ea:	42ae      	cmp	r6, r5
 800a8ec:	dc36      	bgt.n	800a95c <__gethex+0x320>
 800a8ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d02a      	beq.n	800a94c <__gethex+0x310>
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d02c      	beq.n	800a954 <__gethex+0x318>
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d115      	bne.n	800a92a <__gethex+0x2ee>
 800a8fe:	42ae      	cmp	r6, r5
 800a900:	d113      	bne.n	800a92a <__gethex+0x2ee>
 800a902:	2e01      	cmp	r6, #1
 800a904:	d10b      	bne.n	800a91e <__gethex+0x2e2>
 800a906:	9a04      	ldr	r2, [sp, #16]
 800a908:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a90c:	6013      	str	r3, [r2, #0]
 800a90e:	2301      	movs	r3, #1
 800a910:	6123      	str	r3, [r4, #16]
 800a912:	f8c9 3000 	str.w	r3, [r9]
 800a916:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a918:	2762      	movs	r7, #98	; 0x62
 800a91a:	601c      	str	r4, [r3, #0]
 800a91c:	e723      	b.n	800a766 <__gethex+0x12a>
 800a91e:	1e71      	subs	r1, r6, #1
 800a920:	4620      	mov	r0, r4
 800a922:	f000 fe59 	bl	800b5d8 <__any_on>
 800a926:	2800      	cmp	r0, #0
 800a928:	d1ed      	bne.n	800a906 <__gethex+0x2ca>
 800a92a:	ee18 0a10 	vmov	r0, s16
 800a92e:	4621      	mov	r1, r4
 800a930:	f000 f9f8 	bl	800ad24 <_Bfree>
 800a934:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a936:	2300      	movs	r3, #0
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	2750      	movs	r7, #80	; 0x50
 800a93c:	e713      	b.n	800a766 <__gethex+0x12a>
 800a93e:	bf00      	nop
 800a940:	0801fe04 	.word	0x0801fe04
 800a944:	0801fd89 	.word	0x0801fd89
 800a948:	0801fd9a 	.word	0x0801fd9a
 800a94c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1eb      	bne.n	800a92a <__gethex+0x2ee>
 800a952:	e7d8      	b.n	800a906 <__gethex+0x2ca>
 800a954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1d5      	bne.n	800a906 <__gethex+0x2ca>
 800a95a:	e7e6      	b.n	800a92a <__gethex+0x2ee>
 800a95c:	1e6f      	subs	r7, r5, #1
 800a95e:	f1ba 0f00 	cmp.w	sl, #0
 800a962:	d131      	bne.n	800a9c8 <__gethex+0x38c>
 800a964:	b127      	cbz	r7, 800a970 <__gethex+0x334>
 800a966:	4639      	mov	r1, r7
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fe35 	bl	800b5d8 <__any_on>
 800a96e:	4682      	mov	sl, r0
 800a970:	117b      	asrs	r3, r7, #5
 800a972:	2101      	movs	r1, #1
 800a974:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a978:	f007 071f 	and.w	r7, r7, #31
 800a97c:	fa01 f707 	lsl.w	r7, r1, r7
 800a980:	421f      	tst	r7, r3
 800a982:	4629      	mov	r1, r5
 800a984:	4620      	mov	r0, r4
 800a986:	bf18      	it	ne
 800a988:	f04a 0a02 	orrne.w	sl, sl, #2
 800a98c:	1b76      	subs	r6, r6, r5
 800a98e:	f7ff fded 	bl	800a56c <rshift>
 800a992:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a996:	2702      	movs	r7, #2
 800a998:	f1ba 0f00 	cmp.w	sl, #0
 800a99c:	d048      	beq.n	800aa30 <__gethex+0x3f4>
 800a99e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d015      	beq.n	800a9d2 <__gethex+0x396>
 800a9a6:	2b03      	cmp	r3, #3
 800a9a8:	d017      	beq.n	800a9da <__gethex+0x39e>
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d109      	bne.n	800a9c2 <__gethex+0x386>
 800a9ae:	f01a 0f02 	tst.w	sl, #2
 800a9b2:	d006      	beq.n	800a9c2 <__gethex+0x386>
 800a9b4:	f8d9 0000 	ldr.w	r0, [r9]
 800a9b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a9bc:	f01a 0f01 	tst.w	sl, #1
 800a9c0:	d10e      	bne.n	800a9e0 <__gethex+0x3a4>
 800a9c2:	f047 0710 	orr.w	r7, r7, #16
 800a9c6:	e033      	b.n	800aa30 <__gethex+0x3f4>
 800a9c8:	f04f 0a01 	mov.w	sl, #1
 800a9cc:	e7d0      	b.n	800a970 <__gethex+0x334>
 800a9ce:	2701      	movs	r7, #1
 800a9d0:	e7e2      	b.n	800a998 <__gethex+0x35c>
 800a9d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9d4:	f1c3 0301 	rsb	r3, r3, #1
 800a9d8:	9315      	str	r3, [sp, #84]	; 0x54
 800a9da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d0f0      	beq.n	800a9c2 <__gethex+0x386>
 800a9e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a9e4:	f104 0314 	add.w	r3, r4, #20
 800a9e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9f0:	f04f 0c00 	mov.w	ip, #0
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9fe:	d01c      	beq.n	800aa3a <__gethex+0x3fe>
 800aa00:	3201      	adds	r2, #1
 800aa02:	6002      	str	r2, [r0, #0]
 800aa04:	2f02      	cmp	r7, #2
 800aa06:	f104 0314 	add.w	r3, r4, #20
 800aa0a:	d13f      	bne.n	800aa8c <__gethex+0x450>
 800aa0c:	f8d8 2000 	ldr.w	r2, [r8]
 800aa10:	3a01      	subs	r2, #1
 800aa12:	42b2      	cmp	r2, r6
 800aa14:	d10a      	bne.n	800aa2c <__gethex+0x3f0>
 800aa16:	1171      	asrs	r1, r6, #5
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa1e:	f006 061f 	and.w	r6, r6, #31
 800aa22:	fa02 f606 	lsl.w	r6, r2, r6
 800aa26:	421e      	tst	r6, r3
 800aa28:	bf18      	it	ne
 800aa2a:	4617      	movne	r7, r2
 800aa2c:	f047 0720 	orr.w	r7, r7, #32
 800aa30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa32:	601c      	str	r4, [r3, #0]
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	601d      	str	r5, [r3, #0]
 800aa38:	e695      	b.n	800a766 <__gethex+0x12a>
 800aa3a:	4299      	cmp	r1, r3
 800aa3c:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa40:	d8d8      	bhi.n	800a9f4 <__gethex+0x3b8>
 800aa42:	68a3      	ldr	r3, [r4, #8]
 800aa44:	459b      	cmp	fp, r3
 800aa46:	db19      	blt.n	800aa7c <__gethex+0x440>
 800aa48:	6861      	ldr	r1, [r4, #4]
 800aa4a:	ee18 0a10 	vmov	r0, s16
 800aa4e:	3101      	adds	r1, #1
 800aa50:	f000 f928 	bl	800aca4 <_Balloc>
 800aa54:	4681      	mov	r9, r0
 800aa56:	b918      	cbnz	r0, 800aa60 <__gethex+0x424>
 800aa58:	4b1a      	ldr	r3, [pc, #104]	; (800aac4 <__gethex+0x488>)
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	2184      	movs	r1, #132	; 0x84
 800aa5e:	e6a8      	b.n	800a7b2 <__gethex+0x176>
 800aa60:	6922      	ldr	r2, [r4, #16]
 800aa62:	3202      	adds	r2, #2
 800aa64:	f104 010c 	add.w	r1, r4, #12
 800aa68:	0092      	lsls	r2, r2, #2
 800aa6a:	300c      	adds	r0, #12
 800aa6c:	f000 f90c 	bl	800ac88 <memcpy>
 800aa70:	4621      	mov	r1, r4
 800aa72:	ee18 0a10 	vmov	r0, s16
 800aa76:	f000 f955 	bl	800ad24 <_Bfree>
 800aa7a:	464c      	mov	r4, r9
 800aa7c:	6923      	ldr	r3, [r4, #16]
 800aa7e:	1c5a      	adds	r2, r3, #1
 800aa80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa84:	6122      	str	r2, [r4, #16]
 800aa86:	2201      	movs	r2, #1
 800aa88:	615a      	str	r2, [r3, #20]
 800aa8a:	e7bb      	b.n	800aa04 <__gethex+0x3c8>
 800aa8c:	6922      	ldr	r2, [r4, #16]
 800aa8e:	455a      	cmp	r2, fp
 800aa90:	dd0b      	ble.n	800aaaa <__gethex+0x46e>
 800aa92:	2101      	movs	r1, #1
 800aa94:	4620      	mov	r0, r4
 800aa96:	f7ff fd69 	bl	800a56c <rshift>
 800aa9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa9e:	3501      	adds	r5, #1
 800aaa0:	42ab      	cmp	r3, r5
 800aaa2:	f6ff aed0 	blt.w	800a846 <__gethex+0x20a>
 800aaa6:	2701      	movs	r7, #1
 800aaa8:	e7c0      	b.n	800aa2c <__gethex+0x3f0>
 800aaaa:	f016 061f 	ands.w	r6, r6, #31
 800aaae:	d0fa      	beq.n	800aaa6 <__gethex+0x46a>
 800aab0:	449a      	add	sl, r3
 800aab2:	f1c6 0620 	rsb	r6, r6, #32
 800aab6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800aaba:	f000 f9e9 	bl	800ae90 <__hi0bits>
 800aabe:	42b0      	cmp	r0, r6
 800aac0:	dbe7      	blt.n	800aa92 <__gethex+0x456>
 800aac2:	e7f0      	b.n	800aaa6 <__gethex+0x46a>
 800aac4:	0801fd89 	.word	0x0801fd89

0800aac8 <L_shift>:
 800aac8:	f1c2 0208 	rsb	r2, r2, #8
 800aacc:	0092      	lsls	r2, r2, #2
 800aace:	b570      	push	{r4, r5, r6, lr}
 800aad0:	f1c2 0620 	rsb	r6, r2, #32
 800aad4:	6843      	ldr	r3, [r0, #4]
 800aad6:	6804      	ldr	r4, [r0, #0]
 800aad8:	fa03 f506 	lsl.w	r5, r3, r6
 800aadc:	432c      	orrs	r4, r5
 800aade:	40d3      	lsrs	r3, r2
 800aae0:	6004      	str	r4, [r0, #0]
 800aae2:	f840 3f04 	str.w	r3, [r0, #4]!
 800aae6:	4288      	cmp	r0, r1
 800aae8:	d3f4      	bcc.n	800aad4 <L_shift+0xc>
 800aaea:	bd70      	pop	{r4, r5, r6, pc}

0800aaec <__match>:
 800aaec:	b530      	push	{r4, r5, lr}
 800aaee:	6803      	ldr	r3, [r0, #0]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaf6:	b914      	cbnz	r4, 800aafe <__match+0x12>
 800aaf8:	6003      	str	r3, [r0, #0]
 800aafa:	2001      	movs	r0, #1
 800aafc:	bd30      	pop	{r4, r5, pc}
 800aafe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ab06:	2d19      	cmp	r5, #25
 800ab08:	bf98      	it	ls
 800ab0a:	3220      	addls	r2, #32
 800ab0c:	42a2      	cmp	r2, r4
 800ab0e:	d0f0      	beq.n	800aaf2 <__match+0x6>
 800ab10:	2000      	movs	r0, #0
 800ab12:	e7f3      	b.n	800aafc <__match+0x10>

0800ab14 <__hexnan>:
 800ab14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab18:	680b      	ldr	r3, [r1, #0]
 800ab1a:	6801      	ldr	r1, [r0, #0]
 800ab1c:	115e      	asrs	r6, r3, #5
 800ab1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab22:	f013 031f 	ands.w	r3, r3, #31
 800ab26:	b087      	sub	sp, #28
 800ab28:	bf18      	it	ne
 800ab2a:	3604      	addne	r6, #4
 800ab2c:	2500      	movs	r5, #0
 800ab2e:	1f37      	subs	r7, r6, #4
 800ab30:	4682      	mov	sl, r0
 800ab32:	4690      	mov	r8, r2
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab3a:	46b9      	mov	r9, r7
 800ab3c:	463c      	mov	r4, r7
 800ab3e:	9502      	str	r5, [sp, #8]
 800ab40:	46ab      	mov	fp, r5
 800ab42:	784a      	ldrb	r2, [r1, #1]
 800ab44:	1c4b      	adds	r3, r1, #1
 800ab46:	9303      	str	r3, [sp, #12]
 800ab48:	b342      	cbz	r2, 800ab9c <__hexnan+0x88>
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	9105      	str	r1, [sp, #20]
 800ab4e:	9204      	str	r2, [sp, #16]
 800ab50:	f7ff fd5e 	bl	800a610 <__hexdig_fun>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d14f      	bne.n	800abf8 <__hexnan+0xe4>
 800ab58:	9a04      	ldr	r2, [sp, #16]
 800ab5a:	9905      	ldr	r1, [sp, #20]
 800ab5c:	2a20      	cmp	r2, #32
 800ab5e:	d818      	bhi.n	800ab92 <__hexnan+0x7e>
 800ab60:	9b02      	ldr	r3, [sp, #8]
 800ab62:	459b      	cmp	fp, r3
 800ab64:	dd13      	ble.n	800ab8e <__hexnan+0x7a>
 800ab66:	454c      	cmp	r4, r9
 800ab68:	d206      	bcs.n	800ab78 <__hexnan+0x64>
 800ab6a:	2d07      	cmp	r5, #7
 800ab6c:	dc04      	bgt.n	800ab78 <__hexnan+0x64>
 800ab6e:	462a      	mov	r2, r5
 800ab70:	4649      	mov	r1, r9
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7ff ffa8 	bl	800aac8 <L_shift>
 800ab78:	4544      	cmp	r4, r8
 800ab7a:	d950      	bls.n	800ac1e <__hexnan+0x10a>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f1a4 0904 	sub.w	r9, r4, #4
 800ab82:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab86:	f8cd b008 	str.w	fp, [sp, #8]
 800ab8a:	464c      	mov	r4, r9
 800ab8c:	461d      	mov	r5, r3
 800ab8e:	9903      	ldr	r1, [sp, #12]
 800ab90:	e7d7      	b.n	800ab42 <__hexnan+0x2e>
 800ab92:	2a29      	cmp	r2, #41	; 0x29
 800ab94:	d156      	bne.n	800ac44 <__hexnan+0x130>
 800ab96:	3102      	adds	r1, #2
 800ab98:	f8ca 1000 	str.w	r1, [sl]
 800ab9c:	f1bb 0f00 	cmp.w	fp, #0
 800aba0:	d050      	beq.n	800ac44 <__hexnan+0x130>
 800aba2:	454c      	cmp	r4, r9
 800aba4:	d206      	bcs.n	800abb4 <__hexnan+0xa0>
 800aba6:	2d07      	cmp	r5, #7
 800aba8:	dc04      	bgt.n	800abb4 <__hexnan+0xa0>
 800abaa:	462a      	mov	r2, r5
 800abac:	4649      	mov	r1, r9
 800abae:	4620      	mov	r0, r4
 800abb0:	f7ff ff8a 	bl	800aac8 <L_shift>
 800abb4:	4544      	cmp	r4, r8
 800abb6:	d934      	bls.n	800ac22 <__hexnan+0x10e>
 800abb8:	f1a8 0204 	sub.w	r2, r8, #4
 800abbc:	4623      	mov	r3, r4
 800abbe:	f853 1b04 	ldr.w	r1, [r3], #4
 800abc2:	f842 1f04 	str.w	r1, [r2, #4]!
 800abc6:	429f      	cmp	r7, r3
 800abc8:	d2f9      	bcs.n	800abbe <__hexnan+0xaa>
 800abca:	1b3b      	subs	r3, r7, r4
 800abcc:	f023 0303 	bic.w	r3, r3, #3
 800abd0:	3304      	adds	r3, #4
 800abd2:	3401      	adds	r4, #1
 800abd4:	3e03      	subs	r6, #3
 800abd6:	42b4      	cmp	r4, r6
 800abd8:	bf88      	it	hi
 800abda:	2304      	movhi	r3, #4
 800abdc:	4443      	add	r3, r8
 800abde:	2200      	movs	r2, #0
 800abe0:	f843 2b04 	str.w	r2, [r3], #4
 800abe4:	429f      	cmp	r7, r3
 800abe6:	d2fb      	bcs.n	800abe0 <__hexnan+0xcc>
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	b91b      	cbnz	r3, 800abf4 <__hexnan+0xe0>
 800abec:	4547      	cmp	r7, r8
 800abee:	d127      	bne.n	800ac40 <__hexnan+0x12c>
 800abf0:	2301      	movs	r3, #1
 800abf2:	603b      	str	r3, [r7, #0]
 800abf4:	2005      	movs	r0, #5
 800abf6:	e026      	b.n	800ac46 <__hexnan+0x132>
 800abf8:	3501      	adds	r5, #1
 800abfa:	2d08      	cmp	r5, #8
 800abfc:	f10b 0b01 	add.w	fp, fp, #1
 800ac00:	dd06      	ble.n	800ac10 <__hexnan+0xfc>
 800ac02:	4544      	cmp	r4, r8
 800ac04:	d9c3      	bls.n	800ab8e <__hexnan+0x7a>
 800ac06:	2300      	movs	r3, #0
 800ac08:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac0c:	2501      	movs	r5, #1
 800ac0e:	3c04      	subs	r4, #4
 800ac10:	6822      	ldr	r2, [r4, #0]
 800ac12:	f000 000f 	and.w	r0, r0, #15
 800ac16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ac1a:	6022      	str	r2, [r4, #0]
 800ac1c:	e7b7      	b.n	800ab8e <__hexnan+0x7a>
 800ac1e:	2508      	movs	r5, #8
 800ac20:	e7b5      	b.n	800ab8e <__hexnan+0x7a>
 800ac22:	9b01      	ldr	r3, [sp, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d0df      	beq.n	800abe8 <__hexnan+0xd4>
 800ac28:	f04f 32ff 	mov.w	r2, #4294967295
 800ac2c:	f1c3 0320 	rsb	r3, r3, #32
 800ac30:	fa22 f303 	lsr.w	r3, r2, r3
 800ac34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac38:	401a      	ands	r2, r3
 800ac3a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ac3e:	e7d3      	b.n	800abe8 <__hexnan+0xd4>
 800ac40:	3f04      	subs	r7, #4
 800ac42:	e7d1      	b.n	800abe8 <__hexnan+0xd4>
 800ac44:	2004      	movs	r0, #4
 800ac46:	b007      	add	sp, #28
 800ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac4c <_localeconv_r>:
 800ac4c:	4800      	ldr	r0, [pc, #0]	; (800ac50 <_localeconv_r+0x4>)
 800ac4e:	4770      	bx	lr
 800ac50:	20000194 	.word	0x20000194

0800ac54 <malloc>:
 800ac54:	4b02      	ldr	r3, [pc, #8]	; (800ac60 <malloc+0xc>)
 800ac56:	4601      	mov	r1, r0
 800ac58:	6818      	ldr	r0, [r3, #0]
 800ac5a:	f000 bd3d 	b.w	800b6d8 <_malloc_r>
 800ac5e:	bf00      	nop
 800ac60:	2000003c 	.word	0x2000003c

0800ac64 <__ascii_mbtowc>:
 800ac64:	b082      	sub	sp, #8
 800ac66:	b901      	cbnz	r1, 800ac6a <__ascii_mbtowc+0x6>
 800ac68:	a901      	add	r1, sp, #4
 800ac6a:	b142      	cbz	r2, 800ac7e <__ascii_mbtowc+0x1a>
 800ac6c:	b14b      	cbz	r3, 800ac82 <__ascii_mbtowc+0x1e>
 800ac6e:	7813      	ldrb	r3, [r2, #0]
 800ac70:	600b      	str	r3, [r1, #0]
 800ac72:	7812      	ldrb	r2, [r2, #0]
 800ac74:	1e10      	subs	r0, r2, #0
 800ac76:	bf18      	it	ne
 800ac78:	2001      	movne	r0, #1
 800ac7a:	b002      	add	sp, #8
 800ac7c:	4770      	bx	lr
 800ac7e:	4610      	mov	r0, r2
 800ac80:	e7fb      	b.n	800ac7a <__ascii_mbtowc+0x16>
 800ac82:	f06f 0001 	mvn.w	r0, #1
 800ac86:	e7f8      	b.n	800ac7a <__ascii_mbtowc+0x16>

0800ac88 <memcpy>:
 800ac88:	440a      	add	r2, r1
 800ac8a:	4291      	cmp	r1, r2
 800ac8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac90:	d100      	bne.n	800ac94 <memcpy+0xc>
 800ac92:	4770      	bx	lr
 800ac94:	b510      	push	{r4, lr}
 800ac96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac9e:	4291      	cmp	r1, r2
 800aca0:	d1f9      	bne.n	800ac96 <memcpy+0xe>
 800aca2:	bd10      	pop	{r4, pc}

0800aca4 <_Balloc>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aca8:	4604      	mov	r4, r0
 800acaa:	460d      	mov	r5, r1
 800acac:	b976      	cbnz	r6, 800accc <_Balloc+0x28>
 800acae:	2010      	movs	r0, #16
 800acb0:	f7ff ffd0 	bl	800ac54 <malloc>
 800acb4:	4602      	mov	r2, r0
 800acb6:	6260      	str	r0, [r4, #36]	; 0x24
 800acb8:	b920      	cbnz	r0, 800acc4 <_Balloc+0x20>
 800acba:	4b18      	ldr	r3, [pc, #96]	; (800ad1c <_Balloc+0x78>)
 800acbc:	4818      	ldr	r0, [pc, #96]	; (800ad20 <_Balloc+0x7c>)
 800acbe:	2166      	movs	r1, #102	; 0x66
 800acc0:	f7fe fdaa 	bl	8009818 <__assert_func>
 800acc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acc8:	6006      	str	r6, [r0, #0]
 800acca:	60c6      	str	r6, [r0, #12]
 800accc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800acce:	68f3      	ldr	r3, [r6, #12]
 800acd0:	b183      	cbz	r3, 800acf4 <_Balloc+0x50>
 800acd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acda:	b9b8      	cbnz	r0, 800ad0c <_Balloc+0x68>
 800acdc:	2101      	movs	r1, #1
 800acde:	fa01 f605 	lsl.w	r6, r1, r5
 800ace2:	1d72      	adds	r2, r6, #5
 800ace4:	0092      	lsls	r2, r2, #2
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fc97 	bl	800b61a <_calloc_r>
 800acec:	b160      	cbz	r0, 800ad08 <_Balloc+0x64>
 800acee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acf2:	e00e      	b.n	800ad12 <_Balloc+0x6e>
 800acf4:	2221      	movs	r2, #33	; 0x21
 800acf6:	2104      	movs	r1, #4
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 fc8e 	bl	800b61a <_calloc_r>
 800acfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad00:	60f0      	str	r0, [r6, #12]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1e4      	bne.n	800acd2 <_Balloc+0x2e>
 800ad08:	2000      	movs	r0, #0
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	6802      	ldr	r2, [r0, #0]
 800ad0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad12:	2300      	movs	r3, #0
 800ad14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad18:	e7f7      	b.n	800ad0a <_Balloc+0x66>
 800ad1a:	bf00      	nop
 800ad1c:	0801fb68 	.word	0x0801fb68
 800ad20:	0801fe18 	.word	0x0801fe18

0800ad24 <_Bfree>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad28:	4605      	mov	r5, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	b976      	cbnz	r6, 800ad4c <_Bfree+0x28>
 800ad2e:	2010      	movs	r0, #16
 800ad30:	f7ff ff90 	bl	800ac54 <malloc>
 800ad34:	4602      	mov	r2, r0
 800ad36:	6268      	str	r0, [r5, #36]	; 0x24
 800ad38:	b920      	cbnz	r0, 800ad44 <_Bfree+0x20>
 800ad3a:	4b09      	ldr	r3, [pc, #36]	; (800ad60 <_Bfree+0x3c>)
 800ad3c:	4809      	ldr	r0, [pc, #36]	; (800ad64 <_Bfree+0x40>)
 800ad3e:	218a      	movs	r1, #138	; 0x8a
 800ad40:	f7fe fd6a 	bl	8009818 <__assert_func>
 800ad44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad48:	6006      	str	r6, [r0, #0]
 800ad4a:	60c6      	str	r6, [r0, #12]
 800ad4c:	b13c      	cbz	r4, 800ad5e <_Bfree+0x3a>
 800ad4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad50:	6862      	ldr	r2, [r4, #4]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad58:	6021      	str	r1, [r4, #0]
 800ad5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad5e:	bd70      	pop	{r4, r5, r6, pc}
 800ad60:	0801fb68 	.word	0x0801fb68
 800ad64:	0801fe18 	.word	0x0801fe18

0800ad68 <__multadd>:
 800ad68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6c:	690e      	ldr	r6, [r1, #16]
 800ad6e:	4607      	mov	r7, r0
 800ad70:	4698      	mov	r8, r3
 800ad72:	460c      	mov	r4, r1
 800ad74:	f101 0014 	add.w	r0, r1, #20
 800ad78:	2300      	movs	r3, #0
 800ad7a:	6805      	ldr	r5, [r0, #0]
 800ad7c:	b2a9      	uxth	r1, r5
 800ad7e:	fb02 8101 	mla	r1, r2, r1, r8
 800ad82:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ad86:	0c2d      	lsrs	r5, r5, #16
 800ad88:	fb02 c505 	mla	r5, r2, r5, ip
 800ad8c:	b289      	uxth	r1, r1
 800ad8e:	3301      	adds	r3, #1
 800ad90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ad94:	429e      	cmp	r6, r3
 800ad96:	f840 1b04 	str.w	r1, [r0], #4
 800ad9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ad9e:	dcec      	bgt.n	800ad7a <__multadd+0x12>
 800ada0:	f1b8 0f00 	cmp.w	r8, #0
 800ada4:	d022      	beq.n	800adec <__multadd+0x84>
 800ada6:	68a3      	ldr	r3, [r4, #8]
 800ada8:	42b3      	cmp	r3, r6
 800adaa:	dc19      	bgt.n	800ade0 <__multadd+0x78>
 800adac:	6861      	ldr	r1, [r4, #4]
 800adae:	4638      	mov	r0, r7
 800adb0:	3101      	adds	r1, #1
 800adb2:	f7ff ff77 	bl	800aca4 <_Balloc>
 800adb6:	4605      	mov	r5, r0
 800adb8:	b928      	cbnz	r0, 800adc6 <__multadd+0x5e>
 800adba:	4602      	mov	r2, r0
 800adbc:	4b0d      	ldr	r3, [pc, #52]	; (800adf4 <__multadd+0x8c>)
 800adbe:	480e      	ldr	r0, [pc, #56]	; (800adf8 <__multadd+0x90>)
 800adc0:	21b5      	movs	r1, #181	; 0xb5
 800adc2:	f7fe fd29 	bl	8009818 <__assert_func>
 800adc6:	6922      	ldr	r2, [r4, #16]
 800adc8:	3202      	adds	r2, #2
 800adca:	f104 010c 	add.w	r1, r4, #12
 800adce:	0092      	lsls	r2, r2, #2
 800add0:	300c      	adds	r0, #12
 800add2:	f7ff ff59 	bl	800ac88 <memcpy>
 800add6:	4621      	mov	r1, r4
 800add8:	4638      	mov	r0, r7
 800adda:	f7ff ffa3 	bl	800ad24 <_Bfree>
 800adde:	462c      	mov	r4, r5
 800ade0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ade4:	3601      	adds	r6, #1
 800ade6:	f8c3 8014 	str.w	r8, [r3, #20]
 800adea:	6126      	str	r6, [r4, #16]
 800adec:	4620      	mov	r0, r4
 800adee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf2:	bf00      	nop
 800adf4:	0801fd89 	.word	0x0801fd89
 800adf8:	0801fe18 	.word	0x0801fe18

0800adfc <__s2b>:
 800adfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae00:	460c      	mov	r4, r1
 800ae02:	4615      	mov	r5, r2
 800ae04:	461f      	mov	r7, r3
 800ae06:	2209      	movs	r2, #9
 800ae08:	3308      	adds	r3, #8
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae10:	2100      	movs	r1, #0
 800ae12:	2201      	movs	r2, #1
 800ae14:	429a      	cmp	r2, r3
 800ae16:	db09      	blt.n	800ae2c <__s2b+0x30>
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7ff ff43 	bl	800aca4 <_Balloc>
 800ae1e:	b940      	cbnz	r0, 800ae32 <__s2b+0x36>
 800ae20:	4602      	mov	r2, r0
 800ae22:	4b19      	ldr	r3, [pc, #100]	; (800ae88 <__s2b+0x8c>)
 800ae24:	4819      	ldr	r0, [pc, #100]	; (800ae8c <__s2b+0x90>)
 800ae26:	21ce      	movs	r1, #206	; 0xce
 800ae28:	f7fe fcf6 	bl	8009818 <__assert_func>
 800ae2c:	0052      	lsls	r2, r2, #1
 800ae2e:	3101      	adds	r1, #1
 800ae30:	e7f0      	b.n	800ae14 <__s2b+0x18>
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	6143      	str	r3, [r0, #20]
 800ae36:	2d09      	cmp	r5, #9
 800ae38:	f04f 0301 	mov.w	r3, #1
 800ae3c:	6103      	str	r3, [r0, #16]
 800ae3e:	dd16      	ble.n	800ae6e <__s2b+0x72>
 800ae40:	f104 0909 	add.w	r9, r4, #9
 800ae44:	46c8      	mov	r8, r9
 800ae46:	442c      	add	r4, r5
 800ae48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae4c:	4601      	mov	r1, r0
 800ae4e:	3b30      	subs	r3, #48	; 0x30
 800ae50:	220a      	movs	r2, #10
 800ae52:	4630      	mov	r0, r6
 800ae54:	f7ff ff88 	bl	800ad68 <__multadd>
 800ae58:	45a0      	cmp	r8, r4
 800ae5a:	d1f5      	bne.n	800ae48 <__s2b+0x4c>
 800ae5c:	f1a5 0408 	sub.w	r4, r5, #8
 800ae60:	444c      	add	r4, r9
 800ae62:	1b2d      	subs	r5, r5, r4
 800ae64:	1963      	adds	r3, r4, r5
 800ae66:	42bb      	cmp	r3, r7
 800ae68:	db04      	blt.n	800ae74 <__s2b+0x78>
 800ae6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6e:	340a      	adds	r4, #10
 800ae70:	2509      	movs	r5, #9
 800ae72:	e7f6      	b.n	800ae62 <__s2b+0x66>
 800ae74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae78:	4601      	mov	r1, r0
 800ae7a:	3b30      	subs	r3, #48	; 0x30
 800ae7c:	220a      	movs	r2, #10
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f7ff ff72 	bl	800ad68 <__multadd>
 800ae84:	e7ee      	b.n	800ae64 <__s2b+0x68>
 800ae86:	bf00      	nop
 800ae88:	0801fd89 	.word	0x0801fd89
 800ae8c:	0801fe18 	.word	0x0801fe18

0800ae90 <__hi0bits>:
 800ae90:	0c03      	lsrs	r3, r0, #16
 800ae92:	041b      	lsls	r3, r3, #16
 800ae94:	b9d3      	cbnz	r3, 800aecc <__hi0bits+0x3c>
 800ae96:	0400      	lsls	r0, r0, #16
 800ae98:	2310      	movs	r3, #16
 800ae9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae9e:	bf04      	itt	eq
 800aea0:	0200      	lsleq	r0, r0, #8
 800aea2:	3308      	addeq	r3, #8
 800aea4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aea8:	bf04      	itt	eq
 800aeaa:	0100      	lsleq	r0, r0, #4
 800aeac:	3304      	addeq	r3, #4
 800aeae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aeb2:	bf04      	itt	eq
 800aeb4:	0080      	lsleq	r0, r0, #2
 800aeb6:	3302      	addeq	r3, #2
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	db05      	blt.n	800aec8 <__hi0bits+0x38>
 800aebc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aec0:	f103 0301 	add.w	r3, r3, #1
 800aec4:	bf08      	it	eq
 800aec6:	2320      	moveq	r3, #32
 800aec8:	4618      	mov	r0, r3
 800aeca:	4770      	bx	lr
 800aecc:	2300      	movs	r3, #0
 800aece:	e7e4      	b.n	800ae9a <__hi0bits+0xa>

0800aed0 <__lo0bits>:
 800aed0:	6803      	ldr	r3, [r0, #0]
 800aed2:	f013 0207 	ands.w	r2, r3, #7
 800aed6:	4601      	mov	r1, r0
 800aed8:	d00b      	beq.n	800aef2 <__lo0bits+0x22>
 800aeda:	07da      	lsls	r2, r3, #31
 800aedc:	d424      	bmi.n	800af28 <__lo0bits+0x58>
 800aede:	0798      	lsls	r0, r3, #30
 800aee0:	bf49      	itett	mi
 800aee2:	085b      	lsrmi	r3, r3, #1
 800aee4:	089b      	lsrpl	r3, r3, #2
 800aee6:	2001      	movmi	r0, #1
 800aee8:	600b      	strmi	r3, [r1, #0]
 800aeea:	bf5c      	itt	pl
 800aeec:	600b      	strpl	r3, [r1, #0]
 800aeee:	2002      	movpl	r0, #2
 800aef0:	4770      	bx	lr
 800aef2:	b298      	uxth	r0, r3
 800aef4:	b9b0      	cbnz	r0, 800af24 <__lo0bits+0x54>
 800aef6:	0c1b      	lsrs	r3, r3, #16
 800aef8:	2010      	movs	r0, #16
 800aefa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aefe:	bf04      	itt	eq
 800af00:	0a1b      	lsreq	r3, r3, #8
 800af02:	3008      	addeq	r0, #8
 800af04:	071a      	lsls	r2, r3, #28
 800af06:	bf04      	itt	eq
 800af08:	091b      	lsreq	r3, r3, #4
 800af0a:	3004      	addeq	r0, #4
 800af0c:	079a      	lsls	r2, r3, #30
 800af0e:	bf04      	itt	eq
 800af10:	089b      	lsreq	r3, r3, #2
 800af12:	3002      	addeq	r0, #2
 800af14:	07da      	lsls	r2, r3, #31
 800af16:	d403      	bmi.n	800af20 <__lo0bits+0x50>
 800af18:	085b      	lsrs	r3, r3, #1
 800af1a:	f100 0001 	add.w	r0, r0, #1
 800af1e:	d005      	beq.n	800af2c <__lo0bits+0x5c>
 800af20:	600b      	str	r3, [r1, #0]
 800af22:	4770      	bx	lr
 800af24:	4610      	mov	r0, r2
 800af26:	e7e8      	b.n	800aefa <__lo0bits+0x2a>
 800af28:	2000      	movs	r0, #0
 800af2a:	4770      	bx	lr
 800af2c:	2020      	movs	r0, #32
 800af2e:	4770      	bx	lr

0800af30 <__i2b>:
 800af30:	b510      	push	{r4, lr}
 800af32:	460c      	mov	r4, r1
 800af34:	2101      	movs	r1, #1
 800af36:	f7ff feb5 	bl	800aca4 <_Balloc>
 800af3a:	4602      	mov	r2, r0
 800af3c:	b928      	cbnz	r0, 800af4a <__i2b+0x1a>
 800af3e:	4b05      	ldr	r3, [pc, #20]	; (800af54 <__i2b+0x24>)
 800af40:	4805      	ldr	r0, [pc, #20]	; (800af58 <__i2b+0x28>)
 800af42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af46:	f7fe fc67 	bl	8009818 <__assert_func>
 800af4a:	2301      	movs	r3, #1
 800af4c:	6144      	str	r4, [r0, #20]
 800af4e:	6103      	str	r3, [r0, #16]
 800af50:	bd10      	pop	{r4, pc}
 800af52:	bf00      	nop
 800af54:	0801fd89 	.word	0x0801fd89
 800af58:	0801fe18 	.word	0x0801fe18

0800af5c <__multiply>:
 800af5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af60:	4614      	mov	r4, r2
 800af62:	690a      	ldr	r2, [r1, #16]
 800af64:	6923      	ldr	r3, [r4, #16]
 800af66:	429a      	cmp	r2, r3
 800af68:	bfb8      	it	lt
 800af6a:	460b      	movlt	r3, r1
 800af6c:	460d      	mov	r5, r1
 800af6e:	bfbc      	itt	lt
 800af70:	4625      	movlt	r5, r4
 800af72:	461c      	movlt	r4, r3
 800af74:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800af78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af7c:	68ab      	ldr	r3, [r5, #8]
 800af7e:	6869      	ldr	r1, [r5, #4]
 800af80:	eb0a 0709 	add.w	r7, sl, r9
 800af84:	42bb      	cmp	r3, r7
 800af86:	b085      	sub	sp, #20
 800af88:	bfb8      	it	lt
 800af8a:	3101      	addlt	r1, #1
 800af8c:	f7ff fe8a 	bl	800aca4 <_Balloc>
 800af90:	b930      	cbnz	r0, 800afa0 <__multiply+0x44>
 800af92:	4602      	mov	r2, r0
 800af94:	4b42      	ldr	r3, [pc, #264]	; (800b0a0 <__multiply+0x144>)
 800af96:	4843      	ldr	r0, [pc, #268]	; (800b0a4 <__multiply+0x148>)
 800af98:	f240 115d 	movw	r1, #349	; 0x15d
 800af9c:	f7fe fc3c 	bl	8009818 <__assert_func>
 800afa0:	f100 0614 	add.w	r6, r0, #20
 800afa4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800afa8:	4633      	mov	r3, r6
 800afaa:	2200      	movs	r2, #0
 800afac:	4543      	cmp	r3, r8
 800afae:	d31e      	bcc.n	800afee <__multiply+0x92>
 800afb0:	f105 0c14 	add.w	ip, r5, #20
 800afb4:	f104 0314 	add.w	r3, r4, #20
 800afb8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800afbc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800afc0:	9202      	str	r2, [sp, #8]
 800afc2:	ebac 0205 	sub.w	r2, ip, r5
 800afc6:	3a15      	subs	r2, #21
 800afc8:	f022 0203 	bic.w	r2, r2, #3
 800afcc:	3204      	adds	r2, #4
 800afce:	f105 0115 	add.w	r1, r5, #21
 800afd2:	458c      	cmp	ip, r1
 800afd4:	bf38      	it	cc
 800afd6:	2204      	movcc	r2, #4
 800afd8:	9201      	str	r2, [sp, #4]
 800afda:	9a02      	ldr	r2, [sp, #8]
 800afdc:	9303      	str	r3, [sp, #12]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d808      	bhi.n	800aff4 <__multiply+0x98>
 800afe2:	2f00      	cmp	r7, #0
 800afe4:	dc55      	bgt.n	800b092 <__multiply+0x136>
 800afe6:	6107      	str	r7, [r0, #16]
 800afe8:	b005      	add	sp, #20
 800afea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afee:	f843 2b04 	str.w	r2, [r3], #4
 800aff2:	e7db      	b.n	800afac <__multiply+0x50>
 800aff4:	f8b3 a000 	ldrh.w	sl, [r3]
 800aff8:	f1ba 0f00 	cmp.w	sl, #0
 800affc:	d020      	beq.n	800b040 <__multiply+0xe4>
 800affe:	f105 0e14 	add.w	lr, r5, #20
 800b002:	46b1      	mov	r9, r6
 800b004:	2200      	movs	r2, #0
 800b006:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b00a:	f8d9 b000 	ldr.w	fp, [r9]
 800b00e:	b2a1      	uxth	r1, r4
 800b010:	fa1f fb8b 	uxth.w	fp, fp
 800b014:	fb0a b101 	mla	r1, sl, r1, fp
 800b018:	4411      	add	r1, r2
 800b01a:	f8d9 2000 	ldr.w	r2, [r9]
 800b01e:	0c24      	lsrs	r4, r4, #16
 800b020:	0c12      	lsrs	r2, r2, #16
 800b022:	fb0a 2404 	mla	r4, sl, r4, r2
 800b026:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b02a:	b289      	uxth	r1, r1
 800b02c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b030:	45f4      	cmp	ip, lr
 800b032:	f849 1b04 	str.w	r1, [r9], #4
 800b036:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b03a:	d8e4      	bhi.n	800b006 <__multiply+0xaa>
 800b03c:	9901      	ldr	r1, [sp, #4]
 800b03e:	5072      	str	r2, [r6, r1]
 800b040:	9a03      	ldr	r2, [sp, #12]
 800b042:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b046:	3304      	adds	r3, #4
 800b048:	f1b9 0f00 	cmp.w	r9, #0
 800b04c:	d01f      	beq.n	800b08e <__multiply+0x132>
 800b04e:	6834      	ldr	r4, [r6, #0]
 800b050:	f105 0114 	add.w	r1, r5, #20
 800b054:	46b6      	mov	lr, r6
 800b056:	f04f 0a00 	mov.w	sl, #0
 800b05a:	880a      	ldrh	r2, [r1, #0]
 800b05c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b060:	fb09 b202 	mla	r2, r9, r2, fp
 800b064:	4492      	add	sl, r2
 800b066:	b2a4      	uxth	r4, r4
 800b068:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b06c:	f84e 4b04 	str.w	r4, [lr], #4
 800b070:	f851 4b04 	ldr.w	r4, [r1], #4
 800b074:	f8be 2000 	ldrh.w	r2, [lr]
 800b078:	0c24      	lsrs	r4, r4, #16
 800b07a:	fb09 2404 	mla	r4, r9, r4, r2
 800b07e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b082:	458c      	cmp	ip, r1
 800b084:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b088:	d8e7      	bhi.n	800b05a <__multiply+0xfe>
 800b08a:	9a01      	ldr	r2, [sp, #4]
 800b08c:	50b4      	str	r4, [r6, r2]
 800b08e:	3604      	adds	r6, #4
 800b090:	e7a3      	b.n	800afda <__multiply+0x7e>
 800b092:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1a5      	bne.n	800afe6 <__multiply+0x8a>
 800b09a:	3f01      	subs	r7, #1
 800b09c:	e7a1      	b.n	800afe2 <__multiply+0x86>
 800b09e:	bf00      	nop
 800b0a0:	0801fd89 	.word	0x0801fd89
 800b0a4:	0801fe18 	.word	0x0801fe18

0800b0a8 <__pow5mult>:
 800b0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0ac:	4615      	mov	r5, r2
 800b0ae:	f012 0203 	ands.w	r2, r2, #3
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	460f      	mov	r7, r1
 800b0b6:	d007      	beq.n	800b0c8 <__pow5mult+0x20>
 800b0b8:	4c25      	ldr	r4, [pc, #148]	; (800b150 <__pow5mult+0xa8>)
 800b0ba:	3a01      	subs	r2, #1
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0c2:	f7ff fe51 	bl	800ad68 <__multadd>
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	10ad      	asrs	r5, r5, #2
 800b0ca:	d03d      	beq.n	800b148 <__pow5mult+0xa0>
 800b0cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0ce:	b97c      	cbnz	r4, 800b0f0 <__pow5mult+0x48>
 800b0d0:	2010      	movs	r0, #16
 800b0d2:	f7ff fdbf 	bl	800ac54 <malloc>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	6270      	str	r0, [r6, #36]	; 0x24
 800b0da:	b928      	cbnz	r0, 800b0e8 <__pow5mult+0x40>
 800b0dc:	4b1d      	ldr	r3, [pc, #116]	; (800b154 <__pow5mult+0xac>)
 800b0de:	481e      	ldr	r0, [pc, #120]	; (800b158 <__pow5mult+0xb0>)
 800b0e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b0e4:	f7fe fb98 	bl	8009818 <__assert_func>
 800b0e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0ec:	6004      	str	r4, [r0, #0]
 800b0ee:	60c4      	str	r4, [r0, #12]
 800b0f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0f8:	b94c      	cbnz	r4, 800b10e <__pow5mult+0x66>
 800b0fa:	f240 2171 	movw	r1, #625	; 0x271
 800b0fe:	4630      	mov	r0, r6
 800b100:	f7ff ff16 	bl	800af30 <__i2b>
 800b104:	2300      	movs	r3, #0
 800b106:	f8c8 0008 	str.w	r0, [r8, #8]
 800b10a:	4604      	mov	r4, r0
 800b10c:	6003      	str	r3, [r0, #0]
 800b10e:	f04f 0900 	mov.w	r9, #0
 800b112:	07eb      	lsls	r3, r5, #31
 800b114:	d50a      	bpl.n	800b12c <__pow5mult+0x84>
 800b116:	4639      	mov	r1, r7
 800b118:	4622      	mov	r2, r4
 800b11a:	4630      	mov	r0, r6
 800b11c:	f7ff ff1e 	bl	800af5c <__multiply>
 800b120:	4639      	mov	r1, r7
 800b122:	4680      	mov	r8, r0
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff fdfd 	bl	800ad24 <_Bfree>
 800b12a:	4647      	mov	r7, r8
 800b12c:	106d      	asrs	r5, r5, #1
 800b12e:	d00b      	beq.n	800b148 <__pow5mult+0xa0>
 800b130:	6820      	ldr	r0, [r4, #0]
 800b132:	b938      	cbnz	r0, 800b144 <__pow5mult+0x9c>
 800b134:	4622      	mov	r2, r4
 800b136:	4621      	mov	r1, r4
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff ff0f 	bl	800af5c <__multiply>
 800b13e:	6020      	str	r0, [r4, #0]
 800b140:	f8c0 9000 	str.w	r9, [r0]
 800b144:	4604      	mov	r4, r0
 800b146:	e7e4      	b.n	800b112 <__pow5mult+0x6a>
 800b148:	4638      	mov	r0, r7
 800b14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b14e:	bf00      	nop
 800b150:	0801ff68 	.word	0x0801ff68
 800b154:	0801fb68 	.word	0x0801fb68
 800b158:	0801fe18 	.word	0x0801fe18

0800b15c <__lshift>:
 800b15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b160:	460c      	mov	r4, r1
 800b162:	6849      	ldr	r1, [r1, #4]
 800b164:	6923      	ldr	r3, [r4, #16]
 800b166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b16a:	68a3      	ldr	r3, [r4, #8]
 800b16c:	4607      	mov	r7, r0
 800b16e:	4691      	mov	r9, r2
 800b170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b174:	f108 0601 	add.w	r6, r8, #1
 800b178:	42b3      	cmp	r3, r6
 800b17a:	db0b      	blt.n	800b194 <__lshift+0x38>
 800b17c:	4638      	mov	r0, r7
 800b17e:	f7ff fd91 	bl	800aca4 <_Balloc>
 800b182:	4605      	mov	r5, r0
 800b184:	b948      	cbnz	r0, 800b19a <__lshift+0x3e>
 800b186:	4602      	mov	r2, r0
 800b188:	4b28      	ldr	r3, [pc, #160]	; (800b22c <__lshift+0xd0>)
 800b18a:	4829      	ldr	r0, [pc, #164]	; (800b230 <__lshift+0xd4>)
 800b18c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b190:	f7fe fb42 	bl	8009818 <__assert_func>
 800b194:	3101      	adds	r1, #1
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	e7ee      	b.n	800b178 <__lshift+0x1c>
 800b19a:	2300      	movs	r3, #0
 800b19c:	f100 0114 	add.w	r1, r0, #20
 800b1a0:	f100 0210 	add.w	r2, r0, #16
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	4553      	cmp	r3, sl
 800b1a8:	db33      	blt.n	800b212 <__lshift+0xb6>
 800b1aa:	6920      	ldr	r0, [r4, #16]
 800b1ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1b0:	f104 0314 	add.w	r3, r4, #20
 800b1b4:	f019 091f 	ands.w	r9, r9, #31
 800b1b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1c0:	d02b      	beq.n	800b21a <__lshift+0xbe>
 800b1c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b1c6:	468a      	mov	sl, r1
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	6818      	ldr	r0, [r3, #0]
 800b1cc:	fa00 f009 	lsl.w	r0, r0, r9
 800b1d0:	4302      	orrs	r2, r0
 800b1d2:	f84a 2b04 	str.w	r2, [sl], #4
 800b1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1da:	459c      	cmp	ip, r3
 800b1dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1e0:	d8f3      	bhi.n	800b1ca <__lshift+0x6e>
 800b1e2:	ebac 0304 	sub.w	r3, ip, r4
 800b1e6:	3b15      	subs	r3, #21
 800b1e8:	f023 0303 	bic.w	r3, r3, #3
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	f104 0015 	add.w	r0, r4, #21
 800b1f2:	4584      	cmp	ip, r0
 800b1f4:	bf38      	it	cc
 800b1f6:	2304      	movcc	r3, #4
 800b1f8:	50ca      	str	r2, [r1, r3]
 800b1fa:	b10a      	cbz	r2, 800b200 <__lshift+0xa4>
 800b1fc:	f108 0602 	add.w	r6, r8, #2
 800b200:	3e01      	subs	r6, #1
 800b202:	4638      	mov	r0, r7
 800b204:	612e      	str	r6, [r5, #16]
 800b206:	4621      	mov	r1, r4
 800b208:	f7ff fd8c 	bl	800ad24 <_Bfree>
 800b20c:	4628      	mov	r0, r5
 800b20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b212:	f842 0f04 	str.w	r0, [r2, #4]!
 800b216:	3301      	adds	r3, #1
 800b218:	e7c5      	b.n	800b1a6 <__lshift+0x4a>
 800b21a:	3904      	subs	r1, #4
 800b21c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b220:	f841 2f04 	str.w	r2, [r1, #4]!
 800b224:	459c      	cmp	ip, r3
 800b226:	d8f9      	bhi.n	800b21c <__lshift+0xc0>
 800b228:	e7ea      	b.n	800b200 <__lshift+0xa4>
 800b22a:	bf00      	nop
 800b22c:	0801fd89 	.word	0x0801fd89
 800b230:	0801fe18 	.word	0x0801fe18

0800b234 <__mcmp>:
 800b234:	b530      	push	{r4, r5, lr}
 800b236:	6902      	ldr	r2, [r0, #16]
 800b238:	690c      	ldr	r4, [r1, #16]
 800b23a:	1b12      	subs	r2, r2, r4
 800b23c:	d10e      	bne.n	800b25c <__mcmp+0x28>
 800b23e:	f100 0314 	add.w	r3, r0, #20
 800b242:	3114      	adds	r1, #20
 800b244:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b248:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b24c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b250:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b254:	42a5      	cmp	r5, r4
 800b256:	d003      	beq.n	800b260 <__mcmp+0x2c>
 800b258:	d305      	bcc.n	800b266 <__mcmp+0x32>
 800b25a:	2201      	movs	r2, #1
 800b25c:	4610      	mov	r0, r2
 800b25e:	bd30      	pop	{r4, r5, pc}
 800b260:	4283      	cmp	r3, r0
 800b262:	d3f3      	bcc.n	800b24c <__mcmp+0x18>
 800b264:	e7fa      	b.n	800b25c <__mcmp+0x28>
 800b266:	f04f 32ff 	mov.w	r2, #4294967295
 800b26a:	e7f7      	b.n	800b25c <__mcmp+0x28>

0800b26c <__mdiff>:
 800b26c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	460c      	mov	r4, r1
 800b272:	4606      	mov	r6, r0
 800b274:	4611      	mov	r1, r2
 800b276:	4620      	mov	r0, r4
 800b278:	4617      	mov	r7, r2
 800b27a:	f7ff ffdb 	bl	800b234 <__mcmp>
 800b27e:	1e05      	subs	r5, r0, #0
 800b280:	d110      	bne.n	800b2a4 <__mdiff+0x38>
 800b282:	4629      	mov	r1, r5
 800b284:	4630      	mov	r0, r6
 800b286:	f7ff fd0d 	bl	800aca4 <_Balloc>
 800b28a:	b930      	cbnz	r0, 800b29a <__mdiff+0x2e>
 800b28c:	4b39      	ldr	r3, [pc, #228]	; (800b374 <__mdiff+0x108>)
 800b28e:	4602      	mov	r2, r0
 800b290:	f240 2132 	movw	r1, #562	; 0x232
 800b294:	4838      	ldr	r0, [pc, #224]	; (800b378 <__mdiff+0x10c>)
 800b296:	f7fe fabf 	bl	8009818 <__assert_func>
 800b29a:	2301      	movs	r3, #1
 800b29c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a4:	bfa4      	itt	ge
 800b2a6:	463b      	movge	r3, r7
 800b2a8:	4627      	movge	r7, r4
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	6879      	ldr	r1, [r7, #4]
 800b2ae:	bfa6      	itte	ge
 800b2b0:	461c      	movge	r4, r3
 800b2b2:	2500      	movge	r5, #0
 800b2b4:	2501      	movlt	r5, #1
 800b2b6:	f7ff fcf5 	bl	800aca4 <_Balloc>
 800b2ba:	b920      	cbnz	r0, 800b2c6 <__mdiff+0x5a>
 800b2bc:	4b2d      	ldr	r3, [pc, #180]	; (800b374 <__mdiff+0x108>)
 800b2be:	4602      	mov	r2, r0
 800b2c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b2c4:	e7e6      	b.n	800b294 <__mdiff+0x28>
 800b2c6:	693e      	ldr	r6, [r7, #16]
 800b2c8:	60c5      	str	r5, [r0, #12]
 800b2ca:	6925      	ldr	r5, [r4, #16]
 800b2cc:	f107 0114 	add.w	r1, r7, #20
 800b2d0:	f104 0914 	add.w	r9, r4, #20
 800b2d4:	f100 0e14 	add.w	lr, r0, #20
 800b2d8:	f107 0210 	add.w	r2, r7, #16
 800b2dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b2e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b2e4:	46f2      	mov	sl, lr
 800b2e6:	2700      	movs	r7, #0
 800b2e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2f0:	fa1f f883 	uxth.w	r8, r3
 800b2f4:	fa17 f78b 	uxtah	r7, r7, fp
 800b2f8:	0c1b      	lsrs	r3, r3, #16
 800b2fa:	eba7 0808 	sub.w	r8, r7, r8
 800b2fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b302:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b306:	fa1f f888 	uxth.w	r8, r8
 800b30a:	141f      	asrs	r7, r3, #16
 800b30c:	454d      	cmp	r5, r9
 800b30e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b312:	f84a 3b04 	str.w	r3, [sl], #4
 800b316:	d8e7      	bhi.n	800b2e8 <__mdiff+0x7c>
 800b318:	1b2b      	subs	r3, r5, r4
 800b31a:	3b15      	subs	r3, #21
 800b31c:	f023 0303 	bic.w	r3, r3, #3
 800b320:	3304      	adds	r3, #4
 800b322:	3415      	adds	r4, #21
 800b324:	42a5      	cmp	r5, r4
 800b326:	bf38      	it	cc
 800b328:	2304      	movcc	r3, #4
 800b32a:	4419      	add	r1, r3
 800b32c:	4473      	add	r3, lr
 800b32e:	469e      	mov	lr, r3
 800b330:	460d      	mov	r5, r1
 800b332:	4565      	cmp	r5, ip
 800b334:	d30e      	bcc.n	800b354 <__mdiff+0xe8>
 800b336:	f10c 0203 	add.w	r2, ip, #3
 800b33a:	1a52      	subs	r2, r2, r1
 800b33c:	f022 0203 	bic.w	r2, r2, #3
 800b340:	3903      	subs	r1, #3
 800b342:	458c      	cmp	ip, r1
 800b344:	bf38      	it	cc
 800b346:	2200      	movcc	r2, #0
 800b348:	441a      	add	r2, r3
 800b34a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b34e:	b17b      	cbz	r3, 800b370 <__mdiff+0x104>
 800b350:	6106      	str	r6, [r0, #16]
 800b352:	e7a5      	b.n	800b2a0 <__mdiff+0x34>
 800b354:	f855 8b04 	ldr.w	r8, [r5], #4
 800b358:	fa17 f488 	uxtah	r4, r7, r8
 800b35c:	1422      	asrs	r2, r4, #16
 800b35e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b362:	b2a4      	uxth	r4, r4
 800b364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b368:	f84e 4b04 	str.w	r4, [lr], #4
 800b36c:	1417      	asrs	r7, r2, #16
 800b36e:	e7e0      	b.n	800b332 <__mdiff+0xc6>
 800b370:	3e01      	subs	r6, #1
 800b372:	e7ea      	b.n	800b34a <__mdiff+0xde>
 800b374:	0801fd89 	.word	0x0801fd89
 800b378:	0801fe18 	.word	0x0801fe18

0800b37c <__ulp>:
 800b37c:	b082      	sub	sp, #8
 800b37e:	ed8d 0b00 	vstr	d0, [sp]
 800b382:	9b01      	ldr	r3, [sp, #4]
 800b384:	4912      	ldr	r1, [pc, #72]	; (800b3d0 <__ulp+0x54>)
 800b386:	4019      	ands	r1, r3
 800b388:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b38c:	2900      	cmp	r1, #0
 800b38e:	dd05      	ble.n	800b39c <__ulp+0x20>
 800b390:	2200      	movs	r2, #0
 800b392:	460b      	mov	r3, r1
 800b394:	ec43 2b10 	vmov	d0, r2, r3
 800b398:	b002      	add	sp, #8
 800b39a:	4770      	bx	lr
 800b39c:	4249      	negs	r1, r1
 800b39e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b3a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b3a6:	f04f 0200 	mov.w	r2, #0
 800b3aa:	f04f 0300 	mov.w	r3, #0
 800b3ae:	da04      	bge.n	800b3ba <__ulp+0x3e>
 800b3b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b3b4:	fa41 f300 	asr.w	r3, r1, r0
 800b3b8:	e7ec      	b.n	800b394 <__ulp+0x18>
 800b3ba:	f1a0 0114 	sub.w	r1, r0, #20
 800b3be:	291e      	cmp	r1, #30
 800b3c0:	bfda      	itte	le
 800b3c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b3c6:	fa20 f101 	lsrle.w	r1, r0, r1
 800b3ca:	2101      	movgt	r1, #1
 800b3cc:	460a      	mov	r2, r1
 800b3ce:	e7e1      	b.n	800b394 <__ulp+0x18>
 800b3d0:	7ff00000 	.word	0x7ff00000

0800b3d4 <__b2d>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	6905      	ldr	r5, [r0, #16]
 800b3d8:	f100 0714 	add.w	r7, r0, #20
 800b3dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b3e0:	1f2e      	subs	r6, r5, #4
 800b3e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f7ff fd52 	bl	800ae90 <__hi0bits>
 800b3ec:	f1c0 0320 	rsb	r3, r0, #32
 800b3f0:	280a      	cmp	r0, #10
 800b3f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b470 <__b2d+0x9c>
 800b3f6:	600b      	str	r3, [r1, #0]
 800b3f8:	dc14      	bgt.n	800b424 <__b2d+0x50>
 800b3fa:	f1c0 0e0b 	rsb	lr, r0, #11
 800b3fe:	fa24 f10e 	lsr.w	r1, r4, lr
 800b402:	42b7      	cmp	r7, r6
 800b404:	ea41 030c 	orr.w	r3, r1, ip
 800b408:	bf34      	ite	cc
 800b40a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b40e:	2100      	movcs	r1, #0
 800b410:	3015      	adds	r0, #21
 800b412:	fa04 f000 	lsl.w	r0, r4, r0
 800b416:	fa21 f10e 	lsr.w	r1, r1, lr
 800b41a:	ea40 0201 	orr.w	r2, r0, r1
 800b41e:	ec43 2b10 	vmov	d0, r2, r3
 800b422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b424:	42b7      	cmp	r7, r6
 800b426:	bf3a      	itte	cc
 800b428:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b42c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b430:	2100      	movcs	r1, #0
 800b432:	380b      	subs	r0, #11
 800b434:	d017      	beq.n	800b466 <__b2d+0x92>
 800b436:	f1c0 0c20 	rsb	ip, r0, #32
 800b43a:	fa04 f500 	lsl.w	r5, r4, r0
 800b43e:	42be      	cmp	r6, r7
 800b440:	fa21 f40c 	lsr.w	r4, r1, ip
 800b444:	ea45 0504 	orr.w	r5, r5, r4
 800b448:	bf8c      	ite	hi
 800b44a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b44e:	2400      	movls	r4, #0
 800b450:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b454:	fa01 f000 	lsl.w	r0, r1, r0
 800b458:	fa24 f40c 	lsr.w	r4, r4, ip
 800b45c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b460:	ea40 0204 	orr.w	r2, r0, r4
 800b464:	e7db      	b.n	800b41e <__b2d+0x4a>
 800b466:	ea44 030c 	orr.w	r3, r4, ip
 800b46a:	460a      	mov	r2, r1
 800b46c:	e7d7      	b.n	800b41e <__b2d+0x4a>
 800b46e:	bf00      	nop
 800b470:	3ff00000 	.word	0x3ff00000

0800b474 <__d2b>:
 800b474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b478:	4689      	mov	r9, r1
 800b47a:	2101      	movs	r1, #1
 800b47c:	ec57 6b10 	vmov	r6, r7, d0
 800b480:	4690      	mov	r8, r2
 800b482:	f7ff fc0f 	bl	800aca4 <_Balloc>
 800b486:	4604      	mov	r4, r0
 800b488:	b930      	cbnz	r0, 800b498 <__d2b+0x24>
 800b48a:	4602      	mov	r2, r0
 800b48c:	4b25      	ldr	r3, [pc, #148]	; (800b524 <__d2b+0xb0>)
 800b48e:	4826      	ldr	r0, [pc, #152]	; (800b528 <__d2b+0xb4>)
 800b490:	f240 310a 	movw	r1, #778	; 0x30a
 800b494:	f7fe f9c0 	bl	8009818 <__assert_func>
 800b498:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b49c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4a0:	bb35      	cbnz	r5, 800b4f0 <__d2b+0x7c>
 800b4a2:	2e00      	cmp	r6, #0
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	d028      	beq.n	800b4fa <__d2b+0x86>
 800b4a8:	4668      	mov	r0, sp
 800b4aa:	9600      	str	r6, [sp, #0]
 800b4ac:	f7ff fd10 	bl	800aed0 <__lo0bits>
 800b4b0:	9900      	ldr	r1, [sp, #0]
 800b4b2:	b300      	cbz	r0, 800b4f6 <__d2b+0x82>
 800b4b4:	9a01      	ldr	r2, [sp, #4]
 800b4b6:	f1c0 0320 	rsb	r3, r0, #32
 800b4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b4be:	430b      	orrs	r3, r1
 800b4c0:	40c2      	lsrs	r2, r0
 800b4c2:	6163      	str	r3, [r4, #20]
 800b4c4:	9201      	str	r2, [sp, #4]
 800b4c6:	9b01      	ldr	r3, [sp, #4]
 800b4c8:	61a3      	str	r3, [r4, #24]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	bf14      	ite	ne
 800b4ce:	2202      	movne	r2, #2
 800b4d0:	2201      	moveq	r2, #1
 800b4d2:	6122      	str	r2, [r4, #16]
 800b4d4:	b1d5      	cbz	r5, 800b50c <__d2b+0x98>
 800b4d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4da:	4405      	add	r5, r0
 800b4dc:	f8c9 5000 	str.w	r5, [r9]
 800b4e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4e4:	f8c8 0000 	str.w	r0, [r8]
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	b003      	add	sp, #12
 800b4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4f4:	e7d5      	b.n	800b4a2 <__d2b+0x2e>
 800b4f6:	6161      	str	r1, [r4, #20]
 800b4f8:	e7e5      	b.n	800b4c6 <__d2b+0x52>
 800b4fa:	a801      	add	r0, sp, #4
 800b4fc:	f7ff fce8 	bl	800aed0 <__lo0bits>
 800b500:	9b01      	ldr	r3, [sp, #4]
 800b502:	6163      	str	r3, [r4, #20]
 800b504:	2201      	movs	r2, #1
 800b506:	6122      	str	r2, [r4, #16]
 800b508:	3020      	adds	r0, #32
 800b50a:	e7e3      	b.n	800b4d4 <__d2b+0x60>
 800b50c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b510:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b514:	f8c9 0000 	str.w	r0, [r9]
 800b518:	6918      	ldr	r0, [r3, #16]
 800b51a:	f7ff fcb9 	bl	800ae90 <__hi0bits>
 800b51e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b522:	e7df      	b.n	800b4e4 <__d2b+0x70>
 800b524:	0801fd89 	.word	0x0801fd89
 800b528:	0801fe18 	.word	0x0801fe18

0800b52c <__ratio>:
 800b52c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b530:	4688      	mov	r8, r1
 800b532:	4669      	mov	r1, sp
 800b534:	4681      	mov	r9, r0
 800b536:	f7ff ff4d 	bl	800b3d4 <__b2d>
 800b53a:	a901      	add	r1, sp, #4
 800b53c:	4640      	mov	r0, r8
 800b53e:	ec55 4b10 	vmov	r4, r5, d0
 800b542:	f7ff ff47 	bl	800b3d4 <__b2d>
 800b546:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b54a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b54e:	eba3 0c02 	sub.w	ip, r3, r2
 800b552:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b556:	1a9b      	subs	r3, r3, r2
 800b558:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b55c:	ec51 0b10 	vmov	r0, r1, d0
 800b560:	2b00      	cmp	r3, #0
 800b562:	bfd6      	itet	le
 800b564:	460a      	movle	r2, r1
 800b566:	462a      	movgt	r2, r5
 800b568:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b56c:	468b      	mov	fp, r1
 800b56e:	462f      	mov	r7, r5
 800b570:	bfd4      	ite	le
 800b572:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b576:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b57a:	4620      	mov	r0, r4
 800b57c:	ee10 2a10 	vmov	r2, s0
 800b580:	465b      	mov	r3, fp
 800b582:	4639      	mov	r1, r7
 800b584:	f7f5 f97a 	bl	800087c <__aeabi_ddiv>
 800b588:	ec41 0b10 	vmov	d0, r0, r1
 800b58c:	b003      	add	sp, #12
 800b58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b592 <__copybits>:
 800b592:	3901      	subs	r1, #1
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	1149      	asrs	r1, r1, #5
 800b598:	6914      	ldr	r4, [r2, #16]
 800b59a:	3101      	adds	r1, #1
 800b59c:	f102 0314 	add.w	r3, r2, #20
 800b5a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b5a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b5a8:	1f05      	subs	r5, r0, #4
 800b5aa:	42a3      	cmp	r3, r4
 800b5ac:	d30c      	bcc.n	800b5c8 <__copybits+0x36>
 800b5ae:	1aa3      	subs	r3, r4, r2
 800b5b0:	3b11      	subs	r3, #17
 800b5b2:	f023 0303 	bic.w	r3, r3, #3
 800b5b6:	3211      	adds	r2, #17
 800b5b8:	42a2      	cmp	r2, r4
 800b5ba:	bf88      	it	hi
 800b5bc:	2300      	movhi	r3, #0
 800b5be:	4418      	add	r0, r3
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4288      	cmp	r0, r1
 800b5c4:	d305      	bcc.n	800b5d2 <__copybits+0x40>
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
 800b5c8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b5cc:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5d0:	e7eb      	b.n	800b5aa <__copybits+0x18>
 800b5d2:	f840 3b04 	str.w	r3, [r0], #4
 800b5d6:	e7f4      	b.n	800b5c2 <__copybits+0x30>

0800b5d8 <__any_on>:
 800b5d8:	f100 0214 	add.w	r2, r0, #20
 800b5dc:	6900      	ldr	r0, [r0, #16]
 800b5de:	114b      	asrs	r3, r1, #5
 800b5e0:	4298      	cmp	r0, r3
 800b5e2:	b510      	push	{r4, lr}
 800b5e4:	db11      	blt.n	800b60a <__any_on+0x32>
 800b5e6:	dd0a      	ble.n	800b5fe <__any_on+0x26>
 800b5e8:	f011 011f 	ands.w	r1, r1, #31
 800b5ec:	d007      	beq.n	800b5fe <__any_on+0x26>
 800b5ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5f2:	fa24 f001 	lsr.w	r0, r4, r1
 800b5f6:	fa00 f101 	lsl.w	r1, r0, r1
 800b5fa:	428c      	cmp	r4, r1
 800b5fc:	d10b      	bne.n	800b616 <__any_on+0x3e>
 800b5fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b602:	4293      	cmp	r3, r2
 800b604:	d803      	bhi.n	800b60e <__any_on+0x36>
 800b606:	2000      	movs	r0, #0
 800b608:	bd10      	pop	{r4, pc}
 800b60a:	4603      	mov	r3, r0
 800b60c:	e7f7      	b.n	800b5fe <__any_on+0x26>
 800b60e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b612:	2900      	cmp	r1, #0
 800b614:	d0f5      	beq.n	800b602 <__any_on+0x2a>
 800b616:	2001      	movs	r0, #1
 800b618:	e7f6      	b.n	800b608 <__any_on+0x30>

0800b61a <_calloc_r>:
 800b61a:	b513      	push	{r0, r1, r4, lr}
 800b61c:	434a      	muls	r2, r1
 800b61e:	4611      	mov	r1, r2
 800b620:	9201      	str	r2, [sp, #4]
 800b622:	f000 f859 	bl	800b6d8 <_malloc_r>
 800b626:	4604      	mov	r4, r0
 800b628:	b118      	cbz	r0, 800b632 <_calloc_r+0x18>
 800b62a:	9a01      	ldr	r2, [sp, #4]
 800b62c:	2100      	movs	r1, #0
 800b62e:	f7fc fb25 	bl	8007c7c <memset>
 800b632:	4620      	mov	r0, r4
 800b634:	b002      	add	sp, #8
 800b636:	bd10      	pop	{r4, pc}

0800b638 <_free_r>:
 800b638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b63a:	2900      	cmp	r1, #0
 800b63c:	d048      	beq.n	800b6d0 <_free_r+0x98>
 800b63e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b642:	9001      	str	r0, [sp, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	f1a1 0404 	sub.w	r4, r1, #4
 800b64a:	bfb8      	it	lt
 800b64c:	18e4      	addlt	r4, r4, r3
 800b64e:	f000 fe8b 	bl	800c368 <__malloc_lock>
 800b652:	4a20      	ldr	r2, [pc, #128]	; (800b6d4 <_free_r+0x9c>)
 800b654:	9801      	ldr	r0, [sp, #4]
 800b656:	6813      	ldr	r3, [r2, #0]
 800b658:	4615      	mov	r5, r2
 800b65a:	b933      	cbnz	r3, 800b66a <_free_r+0x32>
 800b65c:	6063      	str	r3, [r4, #4]
 800b65e:	6014      	str	r4, [r2, #0]
 800b660:	b003      	add	sp, #12
 800b662:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b666:	f000 be85 	b.w	800c374 <__malloc_unlock>
 800b66a:	42a3      	cmp	r3, r4
 800b66c:	d90b      	bls.n	800b686 <_free_r+0x4e>
 800b66e:	6821      	ldr	r1, [r4, #0]
 800b670:	1862      	adds	r2, r4, r1
 800b672:	4293      	cmp	r3, r2
 800b674:	bf04      	itt	eq
 800b676:	681a      	ldreq	r2, [r3, #0]
 800b678:	685b      	ldreq	r3, [r3, #4]
 800b67a:	6063      	str	r3, [r4, #4]
 800b67c:	bf04      	itt	eq
 800b67e:	1852      	addeq	r2, r2, r1
 800b680:	6022      	streq	r2, [r4, #0]
 800b682:	602c      	str	r4, [r5, #0]
 800b684:	e7ec      	b.n	800b660 <_free_r+0x28>
 800b686:	461a      	mov	r2, r3
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	b10b      	cbz	r3, 800b690 <_free_r+0x58>
 800b68c:	42a3      	cmp	r3, r4
 800b68e:	d9fa      	bls.n	800b686 <_free_r+0x4e>
 800b690:	6811      	ldr	r1, [r2, #0]
 800b692:	1855      	adds	r5, r2, r1
 800b694:	42a5      	cmp	r5, r4
 800b696:	d10b      	bne.n	800b6b0 <_free_r+0x78>
 800b698:	6824      	ldr	r4, [r4, #0]
 800b69a:	4421      	add	r1, r4
 800b69c:	1854      	adds	r4, r2, r1
 800b69e:	42a3      	cmp	r3, r4
 800b6a0:	6011      	str	r1, [r2, #0]
 800b6a2:	d1dd      	bne.n	800b660 <_free_r+0x28>
 800b6a4:	681c      	ldr	r4, [r3, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	6053      	str	r3, [r2, #4]
 800b6aa:	4421      	add	r1, r4
 800b6ac:	6011      	str	r1, [r2, #0]
 800b6ae:	e7d7      	b.n	800b660 <_free_r+0x28>
 800b6b0:	d902      	bls.n	800b6b8 <_free_r+0x80>
 800b6b2:	230c      	movs	r3, #12
 800b6b4:	6003      	str	r3, [r0, #0]
 800b6b6:	e7d3      	b.n	800b660 <_free_r+0x28>
 800b6b8:	6825      	ldr	r5, [r4, #0]
 800b6ba:	1961      	adds	r1, r4, r5
 800b6bc:	428b      	cmp	r3, r1
 800b6be:	bf04      	itt	eq
 800b6c0:	6819      	ldreq	r1, [r3, #0]
 800b6c2:	685b      	ldreq	r3, [r3, #4]
 800b6c4:	6063      	str	r3, [r4, #4]
 800b6c6:	bf04      	itt	eq
 800b6c8:	1949      	addeq	r1, r1, r5
 800b6ca:	6021      	streq	r1, [r4, #0]
 800b6cc:	6054      	str	r4, [r2, #4]
 800b6ce:	e7c7      	b.n	800b660 <_free_r+0x28>
 800b6d0:	b003      	add	sp, #12
 800b6d2:	bd30      	pop	{r4, r5, pc}
 800b6d4:	2000026c 	.word	0x2000026c

0800b6d8 <_malloc_r>:
 800b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6da:	1ccd      	adds	r5, r1, #3
 800b6dc:	f025 0503 	bic.w	r5, r5, #3
 800b6e0:	3508      	adds	r5, #8
 800b6e2:	2d0c      	cmp	r5, #12
 800b6e4:	bf38      	it	cc
 800b6e6:	250c      	movcc	r5, #12
 800b6e8:	2d00      	cmp	r5, #0
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	db01      	blt.n	800b6f2 <_malloc_r+0x1a>
 800b6ee:	42a9      	cmp	r1, r5
 800b6f0:	d903      	bls.n	800b6fa <_malloc_r+0x22>
 800b6f2:	230c      	movs	r3, #12
 800b6f4:	6033      	str	r3, [r6, #0]
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6fa:	f000 fe35 	bl	800c368 <__malloc_lock>
 800b6fe:	4921      	ldr	r1, [pc, #132]	; (800b784 <_malloc_r+0xac>)
 800b700:	680a      	ldr	r2, [r1, #0]
 800b702:	4614      	mov	r4, r2
 800b704:	b99c      	cbnz	r4, 800b72e <_malloc_r+0x56>
 800b706:	4f20      	ldr	r7, [pc, #128]	; (800b788 <_malloc_r+0xb0>)
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	b923      	cbnz	r3, 800b716 <_malloc_r+0x3e>
 800b70c:	4621      	mov	r1, r4
 800b70e:	4630      	mov	r0, r6
 800b710:	f000 fafa 	bl	800bd08 <_sbrk_r>
 800b714:	6038      	str	r0, [r7, #0]
 800b716:	4629      	mov	r1, r5
 800b718:	4630      	mov	r0, r6
 800b71a:	f000 faf5 	bl	800bd08 <_sbrk_r>
 800b71e:	1c43      	adds	r3, r0, #1
 800b720:	d123      	bne.n	800b76a <_malloc_r+0x92>
 800b722:	230c      	movs	r3, #12
 800b724:	6033      	str	r3, [r6, #0]
 800b726:	4630      	mov	r0, r6
 800b728:	f000 fe24 	bl	800c374 <__malloc_unlock>
 800b72c:	e7e3      	b.n	800b6f6 <_malloc_r+0x1e>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	1b5b      	subs	r3, r3, r5
 800b732:	d417      	bmi.n	800b764 <_malloc_r+0x8c>
 800b734:	2b0b      	cmp	r3, #11
 800b736:	d903      	bls.n	800b740 <_malloc_r+0x68>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	441c      	add	r4, r3
 800b73c:	6025      	str	r5, [r4, #0]
 800b73e:	e004      	b.n	800b74a <_malloc_r+0x72>
 800b740:	6863      	ldr	r3, [r4, #4]
 800b742:	42a2      	cmp	r2, r4
 800b744:	bf0c      	ite	eq
 800b746:	600b      	streq	r3, [r1, #0]
 800b748:	6053      	strne	r3, [r2, #4]
 800b74a:	4630      	mov	r0, r6
 800b74c:	f000 fe12 	bl	800c374 <__malloc_unlock>
 800b750:	f104 000b 	add.w	r0, r4, #11
 800b754:	1d23      	adds	r3, r4, #4
 800b756:	f020 0007 	bic.w	r0, r0, #7
 800b75a:	1ac2      	subs	r2, r0, r3
 800b75c:	d0cc      	beq.n	800b6f8 <_malloc_r+0x20>
 800b75e:	1a1b      	subs	r3, r3, r0
 800b760:	50a3      	str	r3, [r4, r2]
 800b762:	e7c9      	b.n	800b6f8 <_malloc_r+0x20>
 800b764:	4622      	mov	r2, r4
 800b766:	6864      	ldr	r4, [r4, #4]
 800b768:	e7cc      	b.n	800b704 <_malloc_r+0x2c>
 800b76a:	1cc4      	adds	r4, r0, #3
 800b76c:	f024 0403 	bic.w	r4, r4, #3
 800b770:	42a0      	cmp	r0, r4
 800b772:	d0e3      	beq.n	800b73c <_malloc_r+0x64>
 800b774:	1a21      	subs	r1, r4, r0
 800b776:	4630      	mov	r0, r6
 800b778:	f000 fac6 	bl	800bd08 <_sbrk_r>
 800b77c:	3001      	adds	r0, #1
 800b77e:	d1dd      	bne.n	800b73c <_malloc_r+0x64>
 800b780:	e7cf      	b.n	800b722 <_malloc_r+0x4a>
 800b782:	bf00      	nop
 800b784:	2000026c 	.word	0x2000026c
 800b788:	20000270 	.word	0x20000270

0800b78c <__ssputs_r>:
 800b78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b790:	688e      	ldr	r6, [r1, #8]
 800b792:	429e      	cmp	r6, r3
 800b794:	4682      	mov	sl, r0
 800b796:	460c      	mov	r4, r1
 800b798:	4690      	mov	r8, r2
 800b79a:	461f      	mov	r7, r3
 800b79c:	d838      	bhi.n	800b810 <__ssputs_r+0x84>
 800b79e:	898a      	ldrh	r2, [r1, #12]
 800b7a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7a4:	d032      	beq.n	800b80c <__ssputs_r+0x80>
 800b7a6:	6825      	ldr	r5, [r4, #0]
 800b7a8:	6909      	ldr	r1, [r1, #16]
 800b7aa:	eba5 0901 	sub.w	r9, r5, r1
 800b7ae:	6965      	ldr	r5, [r4, #20]
 800b7b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	444b      	add	r3, r9
 800b7bc:	106d      	asrs	r5, r5, #1
 800b7be:	429d      	cmp	r5, r3
 800b7c0:	bf38      	it	cc
 800b7c2:	461d      	movcc	r5, r3
 800b7c4:	0553      	lsls	r3, r2, #21
 800b7c6:	d531      	bpl.n	800b82c <__ssputs_r+0xa0>
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7ff ff85 	bl	800b6d8 <_malloc_r>
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	b950      	cbnz	r0, 800b7e8 <__ssputs_r+0x5c>
 800b7d2:	230c      	movs	r3, #12
 800b7d4:	f8ca 3000 	str.w	r3, [sl]
 800b7d8:	89a3      	ldrh	r3, [r4, #12]
 800b7da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7de:	81a3      	strh	r3, [r4, #12]
 800b7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e8:	6921      	ldr	r1, [r4, #16]
 800b7ea:	464a      	mov	r2, r9
 800b7ec:	f7ff fa4c 	bl	800ac88 <memcpy>
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	6126      	str	r6, [r4, #16]
 800b7fe:	6165      	str	r5, [r4, #20]
 800b800:	444e      	add	r6, r9
 800b802:	eba5 0509 	sub.w	r5, r5, r9
 800b806:	6026      	str	r6, [r4, #0]
 800b808:	60a5      	str	r5, [r4, #8]
 800b80a:	463e      	mov	r6, r7
 800b80c:	42be      	cmp	r6, r7
 800b80e:	d900      	bls.n	800b812 <__ssputs_r+0x86>
 800b810:	463e      	mov	r6, r7
 800b812:	4632      	mov	r2, r6
 800b814:	6820      	ldr	r0, [r4, #0]
 800b816:	4641      	mov	r1, r8
 800b818:	f000 fd8c 	bl	800c334 <memmove>
 800b81c:	68a3      	ldr	r3, [r4, #8]
 800b81e:	6822      	ldr	r2, [r4, #0]
 800b820:	1b9b      	subs	r3, r3, r6
 800b822:	4432      	add	r2, r6
 800b824:	60a3      	str	r3, [r4, #8]
 800b826:	6022      	str	r2, [r4, #0]
 800b828:	2000      	movs	r0, #0
 800b82a:	e7db      	b.n	800b7e4 <__ssputs_r+0x58>
 800b82c:	462a      	mov	r2, r5
 800b82e:	f000 fda7 	bl	800c380 <_realloc_r>
 800b832:	4606      	mov	r6, r0
 800b834:	2800      	cmp	r0, #0
 800b836:	d1e1      	bne.n	800b7fc <__ssputs_r+0x70>
 800b838:	6921      	ldr	r1, [r4, #16]
 800b83a:	4650      	mov	r0, sl
 800b83c:	f7ff fefc 	bl	800b638 <_free_r>
 800b840:	e7c7      	b.n	800b7d2 <__ssputs_r+0x46>
	...

0800b844 <_svfiprintf_r>:
 800b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	4698      	mov	r8, r3
 800b84a:	898b      	ldrh	r3, [r1, #12]
 800b84c:	061b      	lsls	r3, r3, #24
 800b84e:	b09d      	sub	sp, #116	; 0x74
 800b850:	4607      	mov	r7, r0
 800b852:	460d      	mov	r5, r1
 800b854:	4614      	mov	r4, r2
 800b856:	d50e      	bpl.n	800b876 <_svfiprintf_r+0x32>
 800b858:	690b      	ldr	r3, [r1, #16]
 800b85a:	b963      	cbnz	r3, 800b876 <_svfiprintf_r+0x32>
 800b85c:	2140      	movs	r1, #64	; 0x40
 800b85e:	f7ff ff3b 	bl	800b6d8 <_malloc_r>
 800b862:	6028      	str	r0, [r5, #0]
 800b864:	6128      	str	r0, [r5, #16]
 800b866:	b920      	cbnz	r0, 800b872 <_svfiprintf_r+0x2e>
 800b868:	230c      	movs	r3, #12
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295
 800b870:	e0d1      	b.n	800ba16 <_svfiprintf_r+0x1d2>
 800b872:	2340      	movs	r3, #64	; 0x40
 800b874:	616b      	str	r3, [r5, #20]
 800b876:	2300      	movs	r3, #0
 800b878:	9309      	str	r3, [sp, #36]	; 0x24
 800b87a:	2320      	movs	r3, #32
 800b87c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b880:	f8cd 800c 	str.w	r8, [sp, #12]
 800b884:	2330      	movs	r3, #48	; 0x30
 800b886:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba30 <_svfiprintf_r+0x1ec>
 800b88a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b88e:	f04f 0901 	mov.w	r9, #1
 800b892:	4623      	mov	r3, r4
 800b894:	469a      	mov	sl, r3
 800b896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b89a:	b10a      	cbz	r2, 800b8a0 <_svfiprintf_r+0x5c>
 800b89c:	2a25      	cmp	r2, #37	; 0x25
 800b89e:	d1f9      	bne.n	800b894 <_svfiprintf_r+0x50>
 800b8a0:	ebba 0b04 	subs.w	fp, sl, r4
 800b8a4:	d00b      	beq.n	800b8be <_svfiprintf_r+0x7a>
 800b8a6:	465b      	mov	r3, fp
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f7ff ff6d 	bl	800b78c <__ssputs_r>
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	f000 80aa 	beq.w	800ba0c <_svfiprintf_r+0x1c8>
 800b8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8ba:	445a      	add	r2, fp
 800b8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b8be:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80a2 	beq.w	800ba0c <_svfiprintf_r+0x1c8>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d2:	f10a 0a01 	add.w	sl, sl, #1
 800b8d6:	9304      	str	r3, [sp, #16]
 800b8d8:	9307      	str	r3, [sp, #28]
 800b8da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8de:	931a      	str	r3, [sp, #104]	; 0x68
 800b8e0:	4654      	mov	r4, sl
 800b8e2:	2205      	movs	r2, #5
 800b8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e8:	4851      	ldr	r0, [pc, #324]	; (800ba30 <_svfiprintf_r+0x1ec>)
 800b8ea:	f7f4 fc91 	bl	8000210 <memchr>
 800b8ee:	9a04      	ldr	r2, [sp, #16]
 800b8f0:	b9d8      	cbnz	r0, 800b92a <_svfiprintf_r+0xe6>
 800b8f2:	06d0      	lsls	r0, r2, #27
 800b8f4:	bf44      	itt	mi
 800b8f6:	2320      	movmi	r3, #32
 800b8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8fc:	0711      	lsls	r1, r2, #28
 800b8fe:	bf44      	itt	mi
 800b900:	232b      	movmi	r3, #43	; 0x2b
 800b902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b906:	f89a 3000 	ldrb.w	r3, [sl]
 800b90a:	2b2a      	cmp	r3, #42	; 0x2a
 800b90c:	d015      	beq.n	800b93a <_svfiprintf_r+0xf6>
 800b90e:	9a07      	ldr	r2, [sp, #28]
 800b910:	4654      	mov	r4, sl
 800b912:	2000      	movs	r0, #0
 800b914:	f04f 0c0a 	mov.w	ip, #10
 800b918:	4621      	mov	r1, r4
 800b91a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b91e:	3b30      	subs	r3, #48	; 0x30
 800b920:	2b09      	cmp	r3, #9
 800b922:	d94e      	bls.n	800b9c2 <_svfiprintf_r+0x17e>
 800b924:	b1b0      	cbz	r0, 800b954 <_svfiprintf_r+0x110>
 800b926:	9207      	str	r2, [sp, #28]
 800b928:	e014      	b.n	800b954 <_svfiprintf_r+0x110>
 800b92a:	eba0 0308 	sub.w	r3, r0, r8
 800b92e:	fa09 f303 	lsl.w	r3, r9, r3
 800b932:	4313      	orrs	r3, r2
 800b934:	9304      	str	r3, [sp, #16]
 800b936:	46a2      	mov	sl, r4
 800b938:	e7d2      	b.n	800b8e0 <_svfiprintf_r+0x9c>
 800b93a:	9b03      	ldr	r3, [sp, #12]
 800b93c:	1d19      	adds	r1, r3, #4
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	9103      	str	r1, [sp, #12]
 800b942:	2b00      	cmp	r3, #0
 800b944:	bfbb      	ittet	lt
 800b946:	425b      	neglt	r3, r3
 800b948:	f042 0202 	orrlt.w	r2, r2, #2
 800b94c:	9307      	strge	r3, [sp, #28]
 800b94e:	9307      	strlt	r3, [sp, #28]
 800b950:	bfb8      	it	lt
 800b952:	9204      	strlt	r2, [sp, #16]
 800b954:	7823      	ldrb	r3, [r4, #0]
 800b956:	2b2e      	cmp	r3, #46	; 0x2e
 800b958:	d10c      	bne.n	800b974 <_svfiprintf_r+0x130>
 800b95a:	7863      	ldrb	r3, [r4, #1]
 800b95c:	2b2a      	cmp	r3, #42	; 0x2a
 800b95e:	d135      	bne.n	800b9cc <_svfiprintf_r+0x188>
 800b960:	9b03      	ldr	r3, [sp, #12]
 800b962:	1d1a      	adds	r2, r3, #4
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	9203      	str	r2, [sp, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bfb8      	it	lt
 800b96c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b970:	3402      	adds	r4, #2
 800b972:	9305      	str	r3, [sp, #20]
 800b974:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba40 <_svfiprintf_r+0x1fc>
 800b978:	7821      	ldrb	r1, [r4, #0]
 800b97a:	2203      	movs	r2, #3
 800b97c:	4650      	mov	r0, sl
 800b97e:	f7f4 fc47 	bl	8000210 <memchr>
 800b982:	b140      	cbz	r0, 800b996 <_svfiprintf_r+0x152>
 800b984:	2340      	movs	r3, #64	; 0x40
 800b986:	eba0 000a 	sub.w	r0, r0, sl
 800b98a:	fa03 f000 	lsl.w	r0, r3, r0
 800b98e:	9b04      	ldr	r3, [sp, #16]
 800b990:	4303      	orrs	r3, r0
 800b992:	3401      	adds	r4, #1
 800b994:	9304      	str	r3, [sp, #16]
 800b996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b99a:	4826      	ldr	r0, [pc, #152]	; (800ba34 <_svfiprintf_r+0x1f0>)
 800b99c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9a0:	2206      	movs	r2, #6
 800b9a2:	f7f4 fc35 	bl	8000210 <memchr>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d038      	beq.n	800ba1c <_svfiprintf_r+0x1d8>
 800b9aa:	4b23      	ldr	r3, [pc, #140]	; (800ba38 <_svfiprintf_r+0x1f4>)
 800b9ac:	bb1b      	cbnz	r3, 800b9f6 <_svfiprintf_r+0x1b2>
 800b9ae:	9b03      	ldr	r3, [sp, #12]
 800b9b0:	3307      	adds	r3, #7
 800b9b2:	f023 0307 	bic.w	r3, r3, #7
 800b9b6:	3308      	adds	r3, #8
 800b9b8:	9303      	str	r3, [sp, #12]
 800b9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9bc:	4433      	add	r3, r6
 800b9be:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c0:	e767      	b.n	800b892 <_svfiprintf_r+0x4e>
 800b9c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9c6:	460c      	mov	r4, r1
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	e7a5      	b.n	800b918 <_svfiprintf_r+0xd4>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	3401      	adds	r4, #1
 800b9d0:	9305      	str	r3, [sp, #20]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	f04f 0c0a 	mov.w	ip, #10
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9de:	3a30      	subs	r2, #48	; 0x30
 800b9e0:	2a09      	cmp	r2, #9
 800b9e2:	d903      	bls.n	800b9ec <_svfiprintf_r+0x1a8>
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d0c5      	beq.n	800b974 <_svfiprintf_r+0x130>
 800b9e8:	9105      	str	r1, [sp, #20]
 800b9ea:	e7c3      	b.n	800b974 <_svfiprintf_r+0x130>
 800b9ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e7f0      	b.n	800b9d8 <_svfiprintf_r+0x194>
 800b9f6:	ab03      	add	r3, sp, #12
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	462a      	mov	r2, r5
 800b9fc:	4b0f      	ldr	r3, [pc, #60]	; (800ba3c <_svfiprintf_r+0x1f8>)
 800b9fe:	a904      	add	r1, sp, #16
 800ba00:	4638      	mov	r0, r7
 800ba02:	f7fc f9e3 	bl	8007dcc <_printf_float>
 800ba06:	1c42      	adds	r2, r0, #1
 800ba08:	4606      	mov	r6, r0
 800ba0a:	d1d6      	bne.n	800b9ba <_svfiprintf_r+0x176>
 800ba0c:	89ab      	ldrh	r3, [r5, #12]
 800ba0e:	065b      	lsls	r3, r3, #25
 800ba10:	f53f af2c 	bmi.w	800b86c <_svfiprintf_r+0x28>
 800ba14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba16:	b01d      	add	sp, #116	; 0x74
 800ba18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1c:	ab03      	add	r3, sp, #12
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	462a      	mov	r2, r5
 800ba22:	4b06      	ldr	r3, [pc, #24]	; (800ba3c <_svfiprintf_r+0x1f8>)
 800ba24:	a904      	add	r1, sp, #16
 800ba26:	4638      	mov	r0, r7
 800ba28:	f7fc fc74 	bl	8008314 <_printf_i>
 800ba2c:	e7eb      	b.n	800ba06 <_svfiprintf_r+0x1c2>
 800ba2e:	bf00      	nop
 800ba30:	0801ff74 	.word	0x0801ff74
 800ba34:	0801ff7e 	.word	0x0801ff7e
 800ba38:	08007dcd 	.word	0x08007dcd
 800ba3c:	0800b78d 	.word	0x0800b78d
 800ba40:	0801ff7a 	.word	0x0801ff7a

0800ba44 <__sfputc_r>:
 800ba44:	6893      	ldr	r3, [r2, #8]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	b410      	push	{r4}
 800ba4c:	6093      	str	r3, [r2, #8]
 800ba4e:	da08      	bge.n	800ba62 <__sfputc_r+0x1e>
 800ba50:	6994      	ldr	r4, [r2, #24]
 800ba52:	42a3      	cmp	r3, r4
 800ba54:	db01      	blt.n	800ba5a <__sfputc_r+0x16>
 800ba56:	290a      	cmp	r1, #10
 800ba58:	d103      	bne.n	800ba62 <__sfputc_r+0x1e>
 800ba5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba5e:	f000 b975 	b.w	800bd4c <__swbuf_r>
 800ba62:	6813      	ldr	r3, [r2, #0]
 800ba64:	1c58      	adds	r0, r3, #1
 800ba66:	6010      	str	r0, [r2, #0]
 800ba68:	7019      	strb	r1, [r3, #0]
 800ba6a:	4608      	mov	r0, r1
 800ba6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <__sfputs_r>:
 800ba72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba74:	4606      	mov	r6, r0
 800ba76:	460f      	mov	r7, r1
 800ba78:	4614      	mov	r4, r2
 800ba7a:	18d5      	adds	r5, r2, r3
 800ba7c:	42ac      	cmp	r4, r5
 800ba7e:	d101      	bne.n	800ba84 <__sfputs_r+0x12>
 800ba80:	2000      	movs	r0, #0
 800ba82:	e007      	b.n	800ba94 <__sfputs_r+0x22>
 800ba84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba88:	463a      	mov	r2, r7
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7ff ffda 	bl	800ba44 <__sfputc_r>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d1f3      	bne.n	800ba7c <__sfputs_r+0xa>
 800ba94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba98 <_vfiprintf_r>:
 800ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9c:	460d      	mov	r5, r1
 800ba9e:	b09d      	sub	sp, #116	; 0x74
 800baa0:	4614      	mov	r4, r2
 800baa2:	4698      	mov	r8, r3
 800baa4:	4606      	mov	r6, r0
 800baa6:	b118      	cbz	r0, 800bab0 <_vfiprintf_r+0x18>
 800baa8:	6983      	ldr	r3, [r0, #24]
 800baaa:	b90b      	cbnz	r3, 800bab0 <_vfiprintf_r+0x18>
 800baac:	f000 fb3e 	bl	800c12c <__sinit>
 800bab0:	4b89      	ldr	r3, [pc, #548]	; (800bcd8 <_vfiprintf_r+0x240>)
 800bab2:	429d      	cmp	r5, r3
 800bab4:	d11b      	bne.n	800baee <_vfiprintf_r+0x56>
 800bab6:	6875      	ldr	r5, [r6, #4]
 800bab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baba:	07d9      	lsls	r1, r3, #31
 800babc:	d405      	bmi.n	800baca <_vfiprintf_r+0x32>
 800babe:	89ab      	ldrh	r3, [r5, #12]
 800bac0:	059a      	lsls	r2, r3, #22
 800bac2:	d402      	bmi.n	800baca <_vfiprintf_r+0x32>
 800bac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bac6:	f000 fbcf 	bl	800c268 <__retarget_lock_acquire_recursive>
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	071b      	lsls	r3, r3, #28
 800bace:	d501      	bpl.n	800bad4 <_vfiprintf_r+0x3c>
 800bad0:	692b      	ldr	r3, [r5, #16]
 800bad2:	b9eb      	cbnz	r3, 800bb10 <_vfiprintf_r+0x78>
 800bad4:	4629      	mov	r1, r5
 800bad6:	4630      	mov	r0, r6
 800bad8:	f000 f998 	bl	800be0c <__swsetup_r>
 800badc:	b1c0      	cbz	r0, 800bb10 <_vfiprintf_r+0x78>
 800bade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bae0:	07dc      	lsls	r4, r3, #31
 800bae2:	d50e      	bpl.n	800bb02 <_vfiprintf_r+0x6a>
 800bae4:	f04f 30ff 	mov.w	r0, #4294967295
 800bae8:	b01d      	add	sp, #116	; 0x74
 800baea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baee:	4b7b      	ldr	r3, [pc, #492]	; (800bcdc <_vfiprintf_r+0x244>)
 800baf0:	429d      	cmp	r5, r3
 800baf2:	d101      	bne.n	800baf8 <_vfiprintf_r+0x60>
 800baf4:	68b5      	ldr	r5, [r6, #8]
 800baf6:	e7df      	b.n	800bab8 <_vfiprintf_r+0x20>
 800baf8:	4b79      	ldr	r3, [pc, #484]	; (800bce0 <_vfiprintf_r+0x248>)
 800bafa:	429d      	cmp	r5, r3
 800bafc:	bf08      	it	eq
 800bafe:	68f5      	ldreq	r5, [r6, #12]
 800bb00:	e7da      	b.n	800bab8 <_vfiprintf_r+0x20>
 800bb02:	89ab      	ldrh	r3, [r5, #12]
 800bb04:	0598      	lsls	r0, r3, #22
 800bb06:	d4ed      	bmi.n	800bae4 <_vfiprintf_r+0x4c>
 800bb08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb0a:	f000 fbae 	bl	800c26a <__retarget_lock_release_recursive>
 800bb0e:	e7e9      	b.n	800bae4 <_vfiprintf_r+0x4c>
 800bb10:	2300      	movs	r3, #0
 800bb12:	9309      	str	r3, [sp, #36]	; 0x24
 800bb14:	2320      	movs	r3, #32
 800bb16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb1e:	2330      	movs	r3, #48	; 0x30
 800bb20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bce4 <_vfiprintf_r+0x24c>
 800bb24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb28:	f04f 0901 	mov.w	r9, #1
 800bb2c:	4623      	mov	r3, r4
 800bb2e:	469a      	mov	sl, r3
 800bb30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb34:	b10a      	cbz	r2, 800bb3a <_vfiprintf_r+0xa2>
 800bb36:	2a25      	cmp	r2, #37	; 0x25
 800bb38:	d1f9      	bne.n	800bb2e <_vfiprintf_r+0x96>
 800bb3a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb3e:	d00b      	beq.n	800bb58 <_vfiprintf_r+0xc0>
 800bb40:	465b      	mov	r3, fp
 800bb42:	4622      	mov	r2, r4
 800bb44:	4629      	mov	r1, r5
 800bb46:	4630      	mov	r0, r6
 800bb48:	f7ff ff93 	bl	800ba72 <__sfputs_r>
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	f000 80aa 	beq.w	800bca6 <_vfiprintf_r+0x20e>
 800bb52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb54:	445a      	add	r2, fp
 800bb56:	9209      	str	r2, [sp, #36]	; 0x24
 800bb58:	f89a 3000 	ldrb.w	r3, [sl]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f000 80a2 	beq.w	800bca6 <_vfiprintf_r+0x20e>
 800bb62:	2300      	movs	r3, #0
 800bb64:	f04f 32ff 	mov.w	r2, #4294967295
 800bb68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb6c:	f10a 0a01 	add.w	sl, sl, #1
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	9307      	str	r3, [sp, #28]
 800bb74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb78:	931a      	str	r3, [sp, #104]	; 0x68
 800bb7a:	4654      	mov	r4, sl
 800bb7c:	2205      	movs	r2, #5
 800bb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb82:	4858      	ldr	r0, [pc, #352]	; (800bce4 <_vfiprintf_r+0x24c>)
 800bb84:	f7f4 fb44 	bl	8000210 <memchr>
 800bb88:	9a04      	ldr	r2, [sp, #16]
 800bb8a:	b9d8      	cbnz	r0, 800bbc4 <_vfiprintf_r+0x12c>
 800bb8c:	06d1      	lsls	r1, r2, #27
 800bb8e:	bf44      	itt	mi
 800bb90:	2320      	movmi	r3, #32
 800bb92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb96:	0713      	lsls	r3, r2, #28
 800bb98:	bf44      	itt	mi
 800bb9a:	232b      	movmi	r3, #43	; 0x2b
 800bb9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bba0:	f89a 3000 	ldrb.w	r3, [sl]
 800bba4:	2b2a      	cmp	r3, #42	; 0x2a
 800bba6:	d015      	beq.n	800bbd4 <_vfiprintf_r+0x13c>
 800bba8:	9a07      	ldr	r2, [sp, #28]
 800bbaa:	4654      	mov	r4, sl
 800bbac:	2000      	movs	r0, #0
 800bbae:	f04f 0c0a 	mov.w	ip, #10
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbb8:	3b30      	subs	r3, #48	; 0x30
 800bbba:	2b09      	cmp	r3, #9
 800bbbc:	d94e      	bls.n	800bc5c <_vfiprintf_r+0x1c4>
 800bbbe:	b1b0      	cbz	r0, 800bbee <_vfiprintf_r+0x156>
 800bbc0:	9207      	str	r2, [sp, #28]
 800bbc2:	e014      	b.n	800bbee <_vfiprintf_r+0x156>
 800bbc4:	eba0 0308 	sub.w	r3, r0, r8
 800bbc8:	fa09 f303 	lsl.w	r3, r9, r3
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	9304      	str	r3, [sp, #16]
 800bbd0:	46a2      	mov	sl, r4
 800bbd2:	e7d2      	b.n	800bb7a <_vfiprintf_r+0xe2>
 800bbd4:	9b03      	ldr	r3, [sp, #12]
 800bbd6:	1d19      	adds	r1, r3, #4
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	9103      	str	r1, [sp, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	bfbb      	ittet	lt
 800bbe0:	425b      	neglt	r3, r3
 800bbe2:	f042 0202 	orrlt.w	r2, r2, #2
 800bbe6:	9307      	strge	r3, [sp, #28]
 800bbe8:	9307      	strlt	r3, [sp, #28]
 800bbea:	bfb8      	it	lt
 800bbec:	9204      	strlt	r2, [sp, #16]
 800bbee:	7823      	ldrb	r3, [r4, #0]
 800bbf0:	2b2e      	cmp	r3, #46	; 0x2e
 800bbf2:	d10c      	bne.n	800bc0e <_vfiprintf_r+0x176>
 800bbf4:	7863      	ldrb	r3, [r4, #1]
 800bbf6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbf8:	d135      	bne.n	800bc66 <_vfiprintf_r+0x1ce>
 800bbfa:	9b03      	ldr	r3, [sp, #12]
 800bbfc:	1d1a      	adds	r2, r3, #4
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	9203      	str	r2, [sp, #12]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	bfb8      	it	lt
 800bc06:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc0a:	3402      	adds	r4, #2
 800bc0c:	9305      	str	r3, [sp, #20]
 800bc0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcf4 <_vfiprintf_r+0x25c>
 800bc12:	7821      	ldrb	r1, [r4, #0]
 800bc14:	2203      	movs	r2, #3
 800bc16:	4650      	mov	r0, sl
 800bc18:	f7f4 fafa 	bl	8000210 <memchr>
 800bc1c:	b140      	cbz	r0, 800bc30 <_vfiprintf_r+0x198>
 800bc1e:	2340      	movs	r3, #64	; 0x40
 800bc20:	eba0 000a 	sub.w	r0, r0, sl
 800bc24:	fa03 f000 	lsl.w	r0, r3, r0
 800bc28:	9b04      	ldr	r3, [sp, #16]
 800bc2a:	4303      	orrs	r3, r0
 800bc2c:	3401      	adds	r4, #1
 800bc2e:	9304      	str	r3, [sp, #16]
 800bc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc34:	482c      	ldr	r0, [pc, #176]	; (800bce8 <_vfiprintf_r+0x250>)
 800bc36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc3a:	2206      	movs	r2, #6
 800bc3c:	f7f4 fae8 	bl	8000210 <memchr>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d03f      	beq.n	800bcc4 <_vfiprintf_r+0x22c>
 800bc44:	4b29      	ldr	r3, [pc, #164]	; (800bcec <_vfiprintf_r+0x254>)
 800bc46:	bb1b      	cbnz	r3, 800bc90 <_vfiprintf_r+0x1f8>
 800bc48:	9b03      	ldr	r3, [sp, #12]
 800bc4a:	3307      	adds	r3, #7
 800bc4c:	f023 0307 	bic.w	r3, r3, #7
 800bc50:	3308      	adds	r3, #8
 800bc52:	9303      	str	r3, [sp, #12]
 800bc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc56:	443b      	add	r3, r7
 800bc58:	9309      	str	r3, [sp, #36]	; 0x24
 800bc5a:	e767      	b.n	800bb2c <_vfiprintf_r+0x94>
 800bc5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc60:	460c      	mov	r4, r1
 800bc62:	2001      	movs	r0, #1
 800bc64:	e7a5      	b.n	800bbb2 <_vfiprintf_r+0x11a>
 800bc66:	2300      	movs	r3, #0
 800bc68:	3401      	adds	r4, #1
 800bc6a:	9305      	str	r3, [sp, #20]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	f04f 0c0a 	mov.w	ip, #10
 800bc72:	4620      	mov	r0, r4
 800bc74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc78:	3a30      	subs	r2, #48	; 0x30
 800bc7a:	2a09      	cmp	r2, #9
 800bc7c:	d903      	bls.n	800bc86 <_vfiprintf_r+0x1ee>
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d0c5      	beq.n	800bc0e <_vfiprintf_r+0x176>
 800bc82:	9105      	str	r1, [sp, #20]
 800bc84:	e7c3      	b.n	800bc0e <_vfiprintf_r+0x176>
 800bc86:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e7f0      	b.n	800bc72 <_vfiprintf_r+0x1da>
 800bc90:	ab03      	add	r3, sp, #12
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	462a      	mov	r2, r5
 800bc96:	4b16      	ldr	r3, [pc, #88]	; (800bcf0 <_vfiprintf_r+0x258>)
 800bc98:	a904      	add	r1, sp, #16
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	f7fc f896 	bl	8007dcc <_printf_float>
 800bca0:	4607      	mov	r7, r0
 800bca2:	1c78      	adds	r0, r7, #1
 800bca4:	d1d6      	bne.n	800bc54 <_vfiprintf_r+0x1bc>
 800bca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bca8:	07d9      	lsls	r1, r3, #31
 800bcaa:	d405      	bmi.n	800bcb8 <_vfiprintf_r+0x220>
 800bcac:	89ab      	ldrh	r3, [r5, #12]
 800bcae:	059a      	lsls	r2, r3, #22
 800bcb0:	d402      	bmi.n	800bcb8 <_vfiprintf_r+0x220>
 800bcb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcb4:	f000 fad9 	bl	800c26a <__retarget_lock_release_recursive>
 800bcb8:	89ab      	ldrh	r3, [r5, #12]
 800bcba:	065b      	lsls	r3, r3, #25
 800bcbc:	f53f af12 	bmi.w	800bae4 <_vfiprintf_r+0x4c>
 800bcc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcc2:	e711      	b.n	800bae8 <_vfiprintf_r+0x50>
 800bcc4:	ab03      	add	r3, sp, #12
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	462a      	mov	r2, r5
 800bcca:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <_vfiprintf_r+0x258>)
 800bccc:	a904      	add	r1, sp, #16
 800bcce:	4630      	mov	r0, r6
 800bcd0:	f7fc fb20 	bl	8008314 <_printf_i>
 800bcd4:	e7e4      	b.n	800bca0 <_vfiprintf_r+0x208>
 800bcd6:	bf00      	nop
 800bcd8:	0801ffa8 	.word	0x0801ffa8
 800bcdc:	0801ffc8 	.word	0x0801ffc8
 800bce0:	0801ff88 	.word	0x0801ff88
 800bce4:	0801ff74 	.word	0x0801ff74
 800bce8:	0801ff7e 	.word	0x0801ff7e
 800bcec:	08007dcd 	.word	0x08007dcd
 800bcf0:	0800ba73 	.word	0x0800ba73
 800bcf4:	0801ff7a 	.word	0x0801ff7a

0800bcf8 <nan>:
 800bcf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bd00 <nan+0x8>
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	00000000 	.word	0x00000000
 800bd04:	7ff80000 	.word	0x7ff80000

0800bd08 <_sbrk_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4d06      	ldr	r5, [pc, #24]	; (800bd24 <_sbrk_r+0x1c>)
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	4604      	mov	r4, r0
 800bd10:	4608      	mov	r0, r1
 800bd12:	602b      	str	r3, [r5, #0]
 800bd14:	f7f8 faee 	bl	80042f4 <_sbrk>
 800bd18:	1c43      	adds	r3, r0, #1
 800bd1a:	d102      	bne.n	800bd22 <_sbrk_r+0x1a>
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	b103      	cbz	r3, 800bd22 <_sbrk_r+0x1a>
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	2000062c 	.word	0x2000062c

0800bd28 <strncmp>:
 800bd28:	b510      	push	{r4, lr}
 800bd2a:	b16a      	cbz	r2, 800bd48 <strncmp+0x20>
 800bd2c:	3901      	subs	r1, #1
 800bd2e:	1884      	adds	r4, r0, r2
 800bd30:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bd34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d103      	bne.n	800bd44 <strncmp+0x1c>
 800bd3c:	42a0      	cmp	r0, r4
 800bd3e:	d001      	beq.n	800bd44 <strncmp+0x1c>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1f5      	bne.n	800bd30 <strncmp+0x8>
 800bd44:	1a98      	subs	r0, r3, r2
 800bd46:	bd10      	pop	{r4, pc}
 800bd48:	4610      	mov	r0, r2
 800bd4a:	e7fc      	b.n	800bd46 <strncmp+0x1e>

0800bd4c <__swbuf_r>:
 800bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4e:	460e      	mov	r6, r1
 800bd50:	4614      	mov	r4, r2
 800bd52:	4605      	mov	r5, r0
 800bd54:	b118      	cbz	r0, 800bd5e <__swbuf_r+0x12>
 800bd56:	6983      	ldr	r3, [r0, #24]
 800bd58:	b90b      	cbnz	r3, 800bd5e <__swbuf_r+0x12>
 800bd5a:	f000 f9e7 	bl	800c12c <__sinit>
 800bd5e:	4b21      	ldr	r3, [pc, #132]	; (800bde4 <__swbuf_r+0x98>)
 800bd60:	429c      	cmp	r4, r3
 800bd62:	d12b      	bne.n	800bdbc <__swbuf_r+0x70>
 800bd64:	686c      	ldr	r4, [r5, #4]
 800bd66:	69a3      	ldr	r3, [r4, #24]
 800bd68:	60a3      	str	r3, [r4, #8]
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	071a      	lsls	r2, r3, #28
 800bd6e:	d52f      	bpl.n	800bdd0 <__swbuf_r+0x84>
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	b36b      	cbz	r3, 800bdd0 <__swbuf_r+0x84>
 800bd74:	6923      	ldr	r3, [r4, #16]
 800bd76:	6820      	ldr	r0, [r4, #0]
 800bd78:	1ac0      	subs	r0, r0, r3
 800bd7a:	6963      	ldr	r3, [r4, #20]
 800bd7c:	b2f6      	uxtb	r6, r6
 800bd7e:	4283      	cmp	r3, r0
 800bd80:	4637      	mov	r7, r6
 800bd82:	dc04      	bgt.n	800bd8e <__swbuf_r+0x42>
 800bd84:	4621      	mov	r1, r4
 800bd86:	4628      	mov	r0, r5
 800bd88:	f000 f93c 	bl	800c004 <_fflush_r>
 800bd8c:	bb30      	cbnz	r0, 800bddc <__swbuf_r+0x90>
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	60a3      	str	r3, [r4, #8]
 800bd94:	6823      	ldr	r3, [r4, #0]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	6022      	str	r2, [r4, #0]
 800bd9a:	701e      	strb	r6, [r3, #0]
 800bd9c:	6963      	ldr	r3, [r4, #20]
 800bd9e:	3001      	adds	r0, #1
 800bda0:	4283      	cmp	r3, r0
 800bda2:	d004      	beq.n	800bdae <__swbuf_r+0x62>
 800bda4:	89a3      	ldrh	r3, [r4, #12]
 800bda6:	07db      	lsls	r3, r3, #31
 800bda8:	d506      	bpl.n	800bdb8 <__swbuf_r+0x6c>
 800bdaa:	2e0a      	cmp	r6, #10
 800bdac:	d104      	bne.n	800bdb8 <__swbuf_r+0x6c>
 800bdae:	4621      	mov	r1, r4
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f000 f927 	bl	800c004 <_fflush_r>
 800bdb6:	b988      	cbnz	r0, 800bddc <__swbuf_r+0x90>
 800bdb8:	4638      	mov	r0, r7
 800bdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdbc:	4b0a      	ldr	r3, [pc, #40]	; (800bde8 <__swbuf_r+0x9c>)
 800bdbe:	429c      	cmp	r4, r3
 800bdc0:	d101      	bne.n	800bdc6 <__swbuf_r+0x7a>
 800bdc2:	68ac      	ldr	r4, [r5, #8]
 800bdc4:	e7cf      	b.n	800bd66 <__swbuf_r+0x1a>
 800bdc6:	4b09      	ldr	r3, [pc, #36]	; (800bdec <__swbuf_r+0xa0>)
 800bdc8:	429c      	cmp	r4, r3
 800bdca:	bf08      	it	eq
 800bdcc:	68ec      	ldreq	r4, [r5, #12]
 800bdce:	e7ca      	b.n	800bd66 <__swbuf_r+0x1a>
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f000 f81a 	bl	800be0c <__swsetup_r>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d0cb      	beq.n	800bd74 <__swbuf_r+0x28>
 800bddc:	f04f 37ff 	mov.w	r7, #4294967295
 800bde0:	e7ea      	b.n	800bdb8 <__swbuf_r+0x6c>
 800bde2:	bf00      	nop
 800bde4:	0801ffa8 	.word	0x0801ffa8
 800bde8:	0801ffc8 	.word	0x0801ffc8
 800bdec:	0801ff88 	.word	0x0801ff88

0800bdf0 <__ascii_wctomb>:
 800bdf0:	b149      	cbz	r1, 800be06 <__ascii_wctomb+0x16>
 800bdf2:	2aff      	cmp	r2, #255	; 0xff
 800bdf4:	bf85      	ittet	hi
 800bdf6:	238a      	movhi	r3, #138	; 0x8a
 800bdf8:	6003      	strhi	r3, [r0, #0]
 800bdfa:	700a      	strbls	r2, [r1, #0]
 800bdfc:	f04f 30ff 	movhi.w	r0, #4294967295
 800be00:	bf98      	it	ls
 800be02:	2001      	movls	r0, #1
 800be04:	4770      	bx	lr
 800be06:	4608      	mov	r0, r1
 800be08:	4770      	bx	lr
	...

0800be0c <__swsetup_r>:
 800be0c:	4b32      	ldr	r3, [pc, #200]	; (800bed8 <__swsetup_r+0xcc>)
 800be0e:	b570      	push	{r4, r5, r6, lr}
 800be10:	681d      	ldr	r5, [r3, #0]
 800be12:	4606      	mov	r6, r0
 800be14:	460c      	mov	r4, r1
 800be16:	b125      	cbz	r5, 800be22 <__swsetup_r+0x16>
 800be18:	69ab      	ldr	r3, [r5, #24]
 800be1a:	b913      	cbnz	r3, 800be22 <__swsetup_r+0x16>
 800be1c:	4628      	mov	r0, r5
 800be1e:	f000 f985 	bl	800c12c <__sinit>
 800be22:	4b2e      	ldr	r3, [pc, #184]	; (800bedc <__swsetup_r+0xd0>)
 800be24:	429c      	cmp	r4, r3
 800be26:	d10f      	bne.n	800be48 <__swsetup_r+0x3c>
 800be28:	686c      	ldr	r4, [r5, #4]
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be30:	0719      	lsls	r1, r3, #28
 800be32:	d42c      	bmi.n	800be8e <__swsetup_r+0x82>
 800be34:	06dd      	lsls	r5, r3, #27
 800be36:	d411      	bmi.n	800be5c <__swsetup_r+0x50>
 800be38:	2309      	movs	r3, #9
 800be3a:	6033      	str	r3, [r6, #0]
 800be3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be40:	81a3      	strh	r3, [r4, #12]
 800be42:	f04f 30ff 	mov.w	r0, #4294967295
 800be46:	e03e      	b.n	800bec6 <__swsetup_r+0xba>
 800be48:	4b25      	ldr	r3, [pc, #148]	; (800bee0 <__swsetup_r+0xd4>)
 800be4a:	429c      	cmp	r4, r3
 800be4c:	d101      	bne.n	800be52 <__swsetup_r+0x46>
 800be4e:	68ac      	ldr	r4, [r5, #8]
 800be50:	e7eb      	b.n	800be2a <__swsetup_r+0x1e>
 800be52:	4b24      	ldr	r3, [pc, #144]	; (800bee4 <__swsetup_r+0xd8>)
 800be54:	429c      	cmp	r4, r3
 800be56:	bf08      	it	eq
 800be58:	68ec      	ldreq	r4, [r5, #12]
 800be5a:	e7e6      	b.n	800be2a <__swsetup_r+0x1e>
 800be5c:	0758      	lsls	r0, r3, #29
 800be5e:	d512      	bpl.n	800be86 <__swsetup_r+0x7a>
 800be60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be62:	b141      	cbz	r1, 800be76 <__swsetup_r+0x6a>
 800be64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be68:	4299      	cmp	r1, r3
 800be6a:	d002      	beq.n	800be72 <__swsetup_r+0x66>
 800be6c:	4630      	mov	r0, r6
 800be6e:	f7ff fbe3 	bl	800b638 <_free_r>
 800be72:	2300      	movs	r3, #0
 800be74:	6363      	str	r3, [r4, #52]	; 0x34
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be7c:	81a3      	strh	r3, [r4, #12]
 800be7e:	2300      	movs	r3, #0
 800be80:	6063      	str	r3, [r4, #4]
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	f043 0308 	orr.w	r3, r3, #8
 800be8c:	81a3      	strh	r3, [r4, #12]
 800be8e:	6923      	ldr	r3, [r4, #16]
 800be90:	b94b      	cbnz	r3, 800bea6 <__swsetup_r+0x9a>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be9c:	d003      	beq.n	800bea6 <__swsetup_r+0x9a>
 800be9e:	4621      	mov	r1, r4
 800bea0:	4630      	mov	r0, r6
 800bea2:	f000 fa07 	bl	800c2b4 <__smakebuf_r>
 800bea6:	89a0      	ldrh	r0, [r4, #12]
 800bea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800beac:	f010 0301 	ands.w	r3, r0, #1
 800beb0:	d00a      	beq.n	800bec8 <__swsetup_r+0xbc>
 800beb2:	2300      	movs	r3, #0
 800beb4:	60a3      	str	r3, [r4, #8]
 800beb6:	6963      	ldr	r3, [r4, #20]
 800beb8:	425b      	negs	r3, r3
 800beba:	61a3      	str	r3, [r4, #24]
 800bebc:	6923      	ldr	r3, [r4, #16]
 800bebe:	b943      	cbnz	r3, 800bed2 <__swsetup_r+0xc6>
 800bec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bec4:	d1ba      	bne.n	800be3c <__swsetup_r+0x30>
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	0781      	lsls	r1, r0, #30
 800beca:	bf58      	it	pl
 800becc:	6963      	ldrpl	r3, [r4, #20]
 800bece:	60a3      	str	r3, [r4, #8]
 800bed0:	e7f4      	b.n	800bebc <__swsetup_r+0xb0>
 800bed2:	2000      	movs	r0, #0
 800bed4:	e7f7      	b.n	800bec6 <__swsetup_r+0xba>
 800bed6:	bf00      	nop
 800bed8:	2000003c 	.word	0x2000003c
 800bedc:	0801ffa8 	.word	0x0801ffa8
 800bee0:	0801ffc8 	.word	0x0801ffc8
 800bee4:	0801ff88 	.word	0x0801ff88

0800bee8 <abort>:
 800bee8:	b508      	push	{r3, lr}
 800beea:	2006      	movs	r0, #6
 800beec:	f000 fa96 	bl	800c41c <raise>
 800bef0:	2001      	movs	r0, #1
 800bef2:	f7f8 f987 	bl	8004204 <_exit>
	...

0800bef8 <__sflush_r>:
 800bef8:	898a      	ldrh	r2, [r1, #12]
 800befa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800befe:	4605      	mov	r5, r0
 800bf00:	0710      	lsls	r0, r2, #28
 800bf02:	460c      	mov	r4, r1
 800bf04:	d458      	bmi.n	800bfb8 <__sflush_r+0xc0>
 800bf06:	684b      	ldr	r3, [r1, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	dc05      	bgt.n	800bf18 <__sflush_r+0x20>
 800bf0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	dc02      	bgt.n	800bf18 <__sflush_r+0x20>
 800bf12:	2000      	movs	r0, #0
 800bf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf1a:	2e00      	cmp	r6, #0
 800bf1c:	d0f9      	beq.n	800bf12 <__sflush_r+0x1a>
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf24:	682f      	ldr	r7, [r5, #0]
 800bf26:	602b      	str	r3, [r5, #0]
 800bf28:	d032      	beq.n	800bf90 <__sflush_r+0x98>
 800bf2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	075a      	lsls	r2, r3, #29
 800bf30:	d505      	bpl.n	800bf3e <__sflush_r+0x46>
 800bf32:	6863      	ldr	r3, [r4, #4]
 800bf34:	1ac0      	subs	r0, r0, r3
 800bf36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf38:	b10b      	cbz	r3, 800bf3e <__sflush_r+0x46>
 800bf3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf3c:	1ac0      	subs	r0, r0, r3
 800bf3e:	2300      	movs	r3, #0
 800bf40:	4602      	mov	r2, r0
 800bf42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf44:	6a21      	ldr	r1, [r4, #32]
 800bf46:	4628      	mov	r0, r5
 800bf48:	47b0      	blx	r6
 800bf4a:	1c43      	adds	r3, r0, #1
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	d106      	bne.n	800bf5e <__sflush_r+0x66>
 800bf50:	6829      	ldr	r1, [r5, #0]
 800bf52:	291d      	cmp	r1, #29
 800bf54:	d82c      	bhi.n	800bfb0 <__sflush_r+0xb8>
 800bf56:	4a2a      	ldr	r2, [pc, #168]	; (800c000 <__sflush_r+0x108>)
 800bf58:	40ca      	lsrs	r2, r1
 800bf5a:	07d6      	lsls	r6, r2, #31
 800bf5c:	d528      	bpl.n	800bfb0 <__sflush_r+0xb8>
 800bf5e:	2200      	movs	r2, #0
 800bf60:	6062      	str	r2, [r4, #4]
 800bf62:	04d9      	lsls	r1, r3, #19
 800bf64:	6922      	ldr	r2, [r4, #16]
 800bf66:	6022      	str	r2, [r4, #0]
 800bf68:	d504      	bpl.n	800bf74 <__sflush_r+0x7c>
 800bf6a:	1c42      	adds	r2, r0, #1
 800bf6c:	d101      	bne.n	800bf72 <__sflush_r+0x7a>
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	b903      	cbnz	r3, 800bf74 <__sflush_r+0x7c>
 800bf72:	6560      	str	r0, [r4, #84]	; 0x54
 800bf74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf76:	602f      	str	r7, [r5, #0]
 800bf78:	2900      	cmp	r1, #0
 800bf7a:	d0ca      	beq.n	800bf12 <__sflush_r+0x1a>
 800bf7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf80:	4299      	cmp	r1, r3
 800bf82:	d002      	beq.n	800bf8a <__sflush_r+0x92>
 800bf84:	4628      	mov	r0, r5
 800bf86:	f7ff fb57 	bl	800b638 <_free_r>
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	6360      	str	r0, [r4, #52]	; 0x34
 800bf8e:	e7c1      	b.n	800bf14 <__sflush_r+0x1c>
 800bf90:	6a21      	ldr	r1, [r4, #32]
 800bf92:	2301      	movs	r3, #1
 800bf94:	4628      	mov	r0, r5
 800bf96:	47b0      	blx	r6
 800bf98:	1c41      	adds	r1, r0, #1
 800bf9a:	d1c7      	bne.n	800bf2c <__sflush_r+0x34>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d0c4      	beq.n	800bf2c <__sflush_r+0x34>
 800bfa2:	2b1d      	cmp	r3, #29
 800bfa4:	d001      	beq.n	800bfaa <__sflush_r+0xb2>
 800bfa6:	2b16      	cmp	r3, #22
 800bfa8:	d101      	bne.n	800bfae <__sflush_r+0xb6>
 800bfaa:	602f      	str	r7, [r5, #0]
 800bfac:	e7b1      	b.n	800bf12 <__sflush_r+0x1a>
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfb4:	81a3      	strh	r3, [r4, #12]
 800bfb6:	e7ad      	b.n	800bf14 <__sflush_r+0x1c>
 800bfb8:	690f      	ldr	r7, [r1, #16]
 800bfba:	2f00      	cmp	r7, #0
 800bfbc:	d0a9      	beq.n	800bf12 <__sflush_r+0x1a>
 800bfbe:	0793      	lsls	r3, r2, #30
 800bfc0:	680e      	ldr	r6, [r1, #0]
 800bfc2:	bf08      	it	eq
 800bfc4:	694b      	ldreq	r3, [r1, #20]
 800bfc6:	600f      	str	r7, [r1, #0]
 800bfc8:	bf18      	it	ne
 800bfca:	2300      	movne	r3, #0
 800bfcc:	eba6 0807 	sub.w	r8, r6, r7
 800bfd0:	608b      	str	r3, [r1, #8]
 800bfd2:	f1b8 0f00 	cmp.w	r8, #0
 800bfd6:	dd9c      	ble.n	800bf12 <__sflush_r+0x1a>
 800bfd8:	6a21      	ldr	r1, [r4, #32]
 800bfda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfdc:	4643      	mov	r3, r8
 800bfde:	463a      	mov	r2, r7
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	47b0      	blx	r6
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	dc06      	bgt.n	800bff6 <__sflush_r+0xfe>
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfee:	81a3      	strh	r3, [r4, #12]
 800bff0:	f04f 30ff 	mov.w	r0, #4294967295
 800bff4:	e78e      	b.n	800bf14 <__sflush_r+0x1c>
 800bff6:	4407      	add	r7, r0
 800bff8:	eba8 0800 	sub.w	r8, r8, r0
 800bffc:	e7e9      	b.n	800bfd2 <__sflush_r+0xda>
 800bffe:	bf00      	nop
 800c000:	20400001 	.word	0x20400001

0800c004 <_fflush_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	690b      	ldr	r3, [r1, #16]
 800c008:	4605      	mov	r5, r0
 800c00a:	460c      	mov	r4, r1
 800c00c:	b913      	cbnz	r3, 800c014 <_fflush_r+0x10>
 800c00e:	2500      	movs	r5, #0
 800c010:	4628      	mov	r0, r5
 800c012:	bd38      	pop	{r3, r4, r5, pc}
 800c014:	b118      	cbz	r0, 800c01e <_fflush_r+0x1a>
 800c016:	6983      	ldr	r3, [r0, #24]
 800c018:	b90b      	cbnz	r3, 800c01e <_fflush_r+0x1a>
 800c01a:	f000 f887 	bl	800c12c <__sinit>
 800c01e:	4b14      	ldr	r3, [pc, #80]	; (800c070 <_fflush_r+0x6c>)
 800c020:	429c      	cmp	r4, r3
 800c022:	d11b      	bne.n	800c05c <_fflush_r+0x58>
 800c024:	686c      	ldr	r4, [r5, #4]
 800c026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d0ef      	beq.n	800c00e <_fflush_r+0xa>
 800c02e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c030:	07d0      	lsls	r0, r2, #31
 800c032:	d404      	bmi.n	800c03e <_fflush_r+0x3a>
 800c034:	0599      	lsls	r1, r3, #22
 800c036:	d402      	bmi.n	800c03e <_fflush_r+0x3a>
 800c038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c03a:	f000 f915 	bl	800c268 <__retarget_lock_acquire_recursive>
 800c03e:	4628      	mov	r0, r5
 800c040:	4621      	mov	r1, r4
 800c042:	f7ff ff59 	bl	800bef8 <__sflush_r>
 800c046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c048:	07da      	lsls	r2, r3, #31
 800c04a:	4605      	mov	r5, r0
 800c04c:	d4e0      	bmi.n	800c010 <_fflush_r+0xc>
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	059b      	lsls	r3, r3, #22
 800c052:	d4dd      	bmi.n	800c010 <_fflush_r+0xc>
 800c054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c056:	f000 f908 	bl	800c26a <__retarget_lock_release_recursive>
 800c05a:	e7d9      	b.n	800c010 <_fflush_r+0xc>
 800c05c:	4b05      	ldr	r3, [pc, #20]	; (800c074 <_fflush_r+0x70>)
 800c05e:	429c      	cmp	r4, r3
 800c060:	d101      	bne.n	800c066 <_fflush_r+0x62>
 800c062:	68ac      	ldr	r4, [r5, #8]
 800c064:	e7df      	b.n	800c026 <_fflush_r+0x22>
 800c066:	4b04      	ldr	r3, [pc, #16]	; (800c078 <_fflush_r+0x74>)
 800c068:	429c      	cmp	r4, r3
 800c06a:	bf08      	it	eq
 800c06c:	68ec      	ldreq	r4, [r5, #12]
 800c06e:	e7da      	b.n	800c026 <_fflush_r+0x22>
 800c070:	0801ffa8 	.word	0x0801ffa8
 800c074:	0801ffc8 	.word	0x0801ffc8
 800c078:	0801ff88 	.word	0x0801ff88

0800c07c <std>:
 800c07c:	2300      	movs	r3, #0
 800c07e:	b510      	push	{r4, lr}
 800c080:	4604      	mov	r4, r0
 800c082:	e9c0 3300 	strd	r3, r3, [r0]
 800c086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c08a:	6083      	str	r3, [r0, #8]
 800c08c:	8181      	strh	r1, [r0, #12]
 800c08e:	6643      	str	r3, [r0, #100]	; 0x64
 800c090:	81c2      	strh	r2, [r0, #14]
 800c092:	6183      	str	r3, [r0, #24]
 800c094:	4619      	mov	r1, r3
 800c096:	2208      	movs	r2, #8
 800c098:	305c      	adds	r0, #92	; 0x5c
 800c09a:	f7fb fdef 	bl	8007c7c <memset>
 800c09e:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <std+0x38>)
 800c0a0:	6263      	str	r3, [r4, #36]	; 0x24
 800c0a2:	4b05      	ldr	r3, [pc, #20]	; (800c0b8 <std+0x3c>)
 800c0a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0a6:	4b05      	ldr	r3, [pc, #20]	; (800c0bc <std+0x40>)
 800c0a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0aa:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <std+0x44>)
 800c0ac:	6224      	str	r4, [r4, #32]
 800c0ae:	6323      	str	r3, [r4, #48]	; 0x30
 800c0b0:	bd10      	pop	{r4, pc}
 800c0b2:	bf00      	nop
 800c0b4:	0800c455 	.word	0x0800c455
 800c0b8:	0800c477 	.word	0x0800c477
 800c0bc:	0800c4af 	.word	0x0800c4af
 800c0c0:	0800c4d3 	.word	0x0800c4d3

0800c0c4 <_cleanup_r>:
 800c0c4:	4901      	ldr	r1, [pc, #4]	; (800c0cc <_cleanup_r+0x8>)
 800c0c6:	f000 b8af 	b.w	800c228 <_fwalk_reent>
 800c0ca:	bf00      	nop
 800c0cc:	0800c005 	.word	0x0800c005

0800c0d0 <__sfmoreglue>:
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	1e4a      	subs	r2, r1, #1
 800c0d4:	2568      	movs	r5, #104	; 0x68
 800c0d6:	4355      	muls	r5, r2
 800c0d8:	460e      	mov	r6, r1
 800c0da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0de:	f7ff fafb 	bl	800b6d8 <_malloc_r>
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	b140      	cbz	r0, 800c0f8 <__sfmoreglue+0x28>
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	e9c0 1600 	strd	r1, r6, [r0]
 800c0ec:	300c      	adds	r0, #12
 800c0ee:	60a0      	str	r0, [r4, #8]
 800c0f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0f4:	f7fb fdc2 	bl	8007c7c <memset>
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	bd70      	pop	{r4, r5, r6, pc}

0800c0fc <__sfp_lock_acquire>:
 800c0fc:	4801      	ldr	r0, [pc, #4]	; (800c104 <__sfp_lock_acquire+0x8>)
 800c0fe:	f000 b8b3 	b.w	800c268 <__retarget_lock_acquire_recursive>
 800c102:	bf00      	nop
 800c104:	20000628 	.word	0x20000628

0800c108 <__sfp_lock_release>:
 800c108:	4801      	ldr	r0, [pc, #4]	; (800c110 <__sfp_lock_release+0x8>)
 800c10a:	f000 b8ae 	b.w	800c26a <__retarget_lock_release_recursive>
 800c10e:	bf00      	nop
 800c110:	20000628 	.word	0x20000628

0800c114 <__sinit_lock_acquire>:
 800c114:	4801      	ldr	r0, [pc, #4]	; (800c11c <__sinit_lock_acquire+0x8>)
 800c116:	f000 b8a7 	b.w	800c268 <__retarget_lock_acquire_recursive>
 800c11a:	bf00      	nop
 800c11c:	20000623 	.word	0x20000623

0800c120 <__sinit_lock_release>:
 800c120:	4801      	ldr	r0, [pc, #4]	; (800c128 <__sinit_lock_release+0x8>)
 800c122:	f000 b8a2 	b.w	800c26a <__retarget_lock_release_recursive>
 800c126:	bf00      	nop
 800c128:	20000623 	.word	0x20000623

0800c12c <__sinit>:
 800c12c:	b510      	push	{r4, lr}
 800c12e:	4604      	mov	r4, r0
 800c130:	f7ff fff0 	bl	800c114 <__sinit_lock_acquire>
 800c134:	69a3      	ldr	r3, [r4, #24]
 800c136:	b11b      	cbz	r3, 800c140 <__sinit+0x14>
 800c138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c13c:	f7ff bff0 	b.w	800c120 <__sinit_lock_release>
 800c140:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c144:	6523      	str	r3, [r4, #80]	; 0x50
 800c146:	4b13      	ldr	r3, [pc, #76]	; (800c194 <__sinit+0x68>)
 800c148:	4a13      	ldr	r2, [pc, #76]	; (800c198 <__sinit+0x6c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c14e:	42a3      	cmp	r3, r4
 800c150:	bf04      	itt	eq
 800c152:	2301      	moveq	r3, #1
 800c154:	61a3      	streq	r3, [r4, #24]
 800c156:	4620      	mov	r0, r4
 800c158:	f000 f820 	bl	800c19c <__sfp>
 800c15c:	6060      	str	r0, [r4, #4]
 800c15e:	4620      	mov	r0, r4
 800c160:	f000 f81c 	bl	800c19c <__sfp>
 800c164:	60a0      	str	r0, [r4, #8]
 800c166:	4620      	mov	r0, r4
 800c168:	f000 f818 	bl	800c19c <__sfp>
 800c16c:	2200      	movs	r2, #0
 800c16e:	60e0      	str	r0, [r4, #12]
 800c170:	2104      	movs	r1, #4
 800c172:	6860      	ldr	r0, [r4, #4]
 800c174:	f7ff ff82 	bl	800c07c <std>
 800c178:	68a0      	ldr	r0, [r4, #8]
 800c17a:	2201      	movs	r2, #1
 800c17c:	2109      	movs	r1, #9
 800c17e:	f7ff ff7d 	bl	800c07c <std>
 800c182:	68e0      	ldr	r0, [r4, #12]
 800c184:	2202      	movs	r2, #2
 800c186:	2112      	movs	r1, #18
 800c188:	f7ff ff78 	bl	800c07c <std>
 800c18c:	2301      	movs	r3, #1
 800c18e:	61a3      	str	r3, [r4, #24]
 800c190:	e7d2      	b.n	800c138 <__sinit+0xc>
 800c192:	bf00      	nop
 800c194:	0801fad4 	.word	0x0801fad4
 800c198:	0800c0c5 	.word	0x0800c0c5

0800c19c <__sfp>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	4607      	mov	r7, r0
 800c1a0:	f7ff ffac 	bl	800c0fc <__sfp_lock_acquire>
 800c1a4:	4b1e      	ldr	r3, [pc, #120]	; (800c220 <__sfp+0x84>)
 800c1a6:	681e      	ldr	r6, [r3, #0]
 800c1a8:	69b3      	ldr	r3, [r6, #24]
 800c1aa:	b913      	cbnz	r3, 800c1b2 <__sfp+0x16>
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f7ff ffbd 	bl	800c12c <__sinit>
 800c1b2:	3648      	adds	r6, #72	; 0x48
 800c1b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	d503      	bpl.n	800c1c4 <__sfp+0x28>
 800c1bc:	6833      	ldr	r3, [r6, #0]
 800c1be:	b30b      	cbz	r3, 800c204 <__sfp+0x68>
 800c1c0:	6836      	ldr	r6, [r6, #0]
 800c1c2:	e7f7      	b.n	800c1b4 <__sfp+0x18>
 800c1c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1c8:	b9d5      	cbnz	r5, 800c200 <__sfp+0x64>
 800c1ca:	4b16      	ldr	r3, [pc, #88]	; (800c224 <__sfp+0x88>)
 800c1cc:	60e3      	str	r3, [r4, #12]
 800c1ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1d2:	6665      	str	r5, [r4, #100]	; 0x64
 800c1d4:	f000 f847 	bl	800c266 <__retarget_lock_init_recursive>
 800c1d8:	f7ff ff96 	bl	800c108 <__sfp_lock_release>
 800c1dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1e4:	6025      	str	r5, [r4, #0]
 800c1e6:	61a5      	str	r5, [r4, #24]
 800c1e8:	2208      	movs	r2, #8
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1f0:	f7fb fd44 	bl	8007c7c <memset>
 800c1f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c200:	3468      	adds	r4, #104	; 0x68
 800c202:	e7d9      	b.n	800c1b8 <__sfp+0x1c>
 800c204:	2104      	movs	r1, #4
 800c206:	4638      	mov	r0, r7
 800c208:	f7ff ff62 	bl	800c0d0 <__sfmoreglue>
 800c20c:	4604      	mov	r4, r0
 800c20e:	6030      	str	r0, [r6, #0]
 800c210:	2800      	cmp	r0, #0
 800c212:	d1d5      	bne.n	800c1c0 <__sfp+0x24>
 800c214:	f7ff ff78 	bl	800c108 <__sfp_lock_release>
 800c218:	230c      	movs	r3, #12
 800c21a:	603b      	str	r3, [r7, #0]
 800c21c:	e7ee      	b.n	800c1fc <__sfp+0x60>
 800c21e:	bf00      	nop
 800c220:	0801fad4 	.word	0x0801fad4
 800c224:	ffff0001 	.word	0xffff0001

0800c228 <_fwalk_reent>:
 800c228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c22c:	4606      	mov	r6, r0
 800c22e:	4688      	mov	r8, r1
 800c230:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c234:	2700      	movs	r7, #0
 800c236:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c23a:	f1b9 0901 	subs.w	r9, r9, #1
 800c23e:	d505      	bpl.n	800c24c <_fwalk_reent+0x24>
 800c240:	6824      	ldr	r4, [r4, #0]
 800c242:	2c00      	cmp	r4, #0
 800c244:	d1f7      	bne.n	800c236 <_fwalk_reent+0xe>
 800c246:	4638      	mov	r0, r7
 800c248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c24c:	89ab      	ldrh	r3, [r5, #12]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d907      	bls.n	800c262 <_fwalk_reent+0x3a>
 800c252:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c256:	3301      	adds	r3, #1
 800c258:	d003      	beq.n	800c262 <_fwalk_reent+0x3a>
 800c25a:	4629      	mov	r1, r5
 800c25c:	4630      	mov	r0, r6
 800c25e:	47c0      	blx	r8
 800c260:	4307      	orrs	r7, r0
 800c262:	3568      	adds	r5, #104	; 0x68
 800c264:	e7e9      	b.n	800c23a <_fwalk_reent+0x12>

0800c266 <__retarget_lock_init_recursive>:
 800c266:	4770      	bx	lr

0800c268 <__retarget_lock_acquire_recursive>:
 800c268:	4770      	bx	lr

0800c26a <__retarget_lock_release_recursive>:
 800c26a:	4770      	bx	lr

0800c26c <__swhatbuf_r>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	460e      	mov	r6, r1
 800c270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c274:	2900      	cmp	r1, #0
 800c276:	b096      	sub	sp, #88	; 0x58
 800c278:	4614      	mov	r4, r2
 800c27a:	461d      	mov	r5, r3
 800c27c:	da07      	bge.n	800c28e <__swhatbuf_r+0x22>
 800c27e:	2300      	movs	r3, #0
 800c280:	602b      	str	r3, [r5, #0]
 800c282:	89b3      	ldrh	r3, [r6, #12]
 800c284:	061a      	lsls	r2, r3, #24
 800c286:	d410      	bmi.n	800c2aa <__swhatbuf_r+0x3e>
 800c288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c28c:	e00e      	b.n	800c2ac <__swhatbuf_r+0x40>
 800c28e:	466a      	mov	r2, sp
 800c290:	f000 f946 	bl	800c520 <_fstat_r>
 800c294:	2800      	cmp	r0, #0
 800c296:	dbf2      	blt.n	800c27e <__swhatbuf_r+0x12>
 800c298:	9a01      	ldr	r2, [sp, #4]
 800c29a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c29e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c2a2:	425a      	negs	r2, r3
 800c2a4:	415a      	adcs	r2, r3
 800c2a6:	602a      	str	r2, [r5, #0]
 800c2a8:	e7ee      	b.n	800c288 <__swhatbuf_r+0x1c>
 800c2aa:	2340      	movs	r3, #64	; 0x40
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	6023      	str	r3, [r4, #0]
 800c2b0:	b016      	add	sp, #88	; 0x58
 800c2b2:	bd70      	pop	{r4, r5, r6, pc}

0800c2b4 <__smakebuf_r>:
 800c2b4:	898b      	ldrh	r3, [r1, #12]
 800c2b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2b8:	079d      	lsls	r5, r3, #30
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460c      	mov	r4, r1
 800c2be:	d507      	bpl.n	800c2d0 <__smakebuf_r+0x1c>
 800c2c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	6123      	str	r3, [r4, #16]
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	6163      	str	r3, [r4, #20]
 800c2cc:	b002      	add	sp, #8
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	ab01      	add	r3, sp, #4
 800c2d2:	466a      	mov	r2, sp
 800c2d4:	f7ff ffca 	bl	800c26c <__swhatbuf_r>
 800c2d8:	9900      	ldr	r1, [sp, #0]
 800c2da:	4605      	mov	r5, r0
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f7ff f9fb 	bl	800b6d8 <_malloc_r>
 800c2e2:	b948      	cbnz	r0, 800c2f8 <__smakebuf_r+0x44>
 800c2e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2e8:	059a      	lsls	r2, r3, #22
 800c2ea:	d4ef      	bmi.n	800c2cc <__smakebuf_r+0x18>
 800c2ec:	f023 0303 	bic.w	r3, r3, #3
 800c2f0:	f043 0302 	orr.w	r3, r3, #2
 800c2f4:	81a3      	strh	r3, [r4, #12]
 800c2f6:	e7e3      	b.n	800c2c0 <__smakebuf_r+0xc>
 800c2f8:	4b0d      	ldr	r3, [pc, #52]	; (800c330 <__smakebuf_r+0x7c>)
 800c2fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2fc:	89a3      	ldrh	r3, [r4, #12]
 800c2fe:	6020      	str	r0, [r4, #0]
 800c300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c304:	81a3      	strh	r3, [r4, #12]
 800c306:	9b00      	ldr	r3, [sp, #0]
 800c308:	6163      	str	r3, [r4, #20]
 800c30a:	9b01      	ldr	r3, [sp, #4]
 800c30c:	6120      	str	r0, [r4, #16]
 800c30e:	b15b      	cbz	r3, 800c328 <__smakebuf_r+0x74>
 800c310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c314:	4630      	mov	r0, r6
 800c316:	f000 f915 	bl	800c544 <_isatty_r>
 800c31a:	b128      	cbz	r0, 800c328 <__smakebuf_r+0x74>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f023 0303 	bic.w	r3, r3, #3
 800c322:	f043 0301 	orr.w	r3, r3, #1
 800c326:	81a3      	strh	r3, [r4, #12]
 800c328:	89a0      	ldrh	r0, [r4, #12]
 800c32a:	4305      	orrs	r5, r0
 800c32c:	81a5      	strh	r5, [r4, #12]
 800c32e:	e7cd      	b.n	800c2cc <__smakebuf_r+0x18>
 800c330:	0800c0c5 	.word	0x0800c0c5

0800c334 <memmove>:
 800c334:	4288      	cmp	r0, r1
 800c336:	b510      	push	{r4, lr}
 800c338:	eb01 0402 	add.w	r4, r1, r2
 800c33c:	d902      	bls.n	800c344 <memmove+0x10>
 800c33e:	4284      	cmp	r4, r0
 800c340:	4623      	mov	r3, r4
 800c342:	d807      	bhi.n	800c354 <memmove+0x20>
 800c344:	1e43      	subs	r3, r0, #1
 800c346:	42a1      	cmp	r1, r4
 800c348:	d008      	beq.n	800c35c <memmove+0x28>
 800c34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c34e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c352:	e7f8      	b.n	800c346 <memmove+0x12>
 800c354:	4402      	add	r2, r0
 800c356:	4601      	mov	r1, r0
 800c358:	428a      	cmp	r2, r1
 800c35a:	d100      	bne.n	800c35e <memmove+0x2a>
 800c35c:	bd10      	pop	{r4, pc}
 800c35e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c366:	e7f7      	b.n	800c358 <memmove+0x24>

0800c368 <__malloc_lock>:
 800c368:	4801      	ldr	r0, [pc, #4]	; (800c370 <__malloc_lock+0x8>)
 800c36a:	f7ff bf7d 	b.w	800c268 <__retarget_lock_acquire_recursive>
 800c36e:	bf00      	nop
 800c370:	20000624 	.word	0x20000624

0800c374 <__malloc_unlock>:
 800c374:	4801      	ldr	r0, [pc, #4]	; (800c37c <__malloc_unlock+0x8>)
 800c376:	f7ff bf78 	b.w	800c26a <__retarget_lock_release_recursive>
 800c37a:	bf00      	nop
 800c37c:	20000624 	.word	0x20000624

0800c380 <_realloc_r>:
 800c380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c382:	4607      	mov	r7, r0
 800c384:	4614      	mov	r4, r2
 800c386:	460e      	mov	r6, r1
 800c388:	b921      	cbnz	r1, 800c394 <_realloc_r+0x14>
 800c38a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c38e:	4611      	mov	r1, r2
 800c390:	f7ff b9a2 	b.w	800b6d8 <_malloc_r>
 800c394:	b922      	cbnz	r2, 800c3a0 <_realloc_r+0x20>
 800c396:	f7ff f94f 	bl	800b638 <_free_r>
 800c39a:	4625      	mov	r5, r4
 800c39c:	4628      	mov	r0, r5
 800c39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3a0:	f000 f8f2 	bl	800c588 <_malloc_usable_size_r>
 800c3a4:	42a0      	cmp	r0, r4
 800c3a6:	d20f      	bcs.n	800c3c8 <_realloc_r+0x48>
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	f7ff f994 	bl	800b6d8 <_malloc_r>
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d0f2      	beq.n	800c39c <_realloc_r+0x1c>
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	f7fe fc65 	bl	800ac88 <memcpy>
 800c3be:	4631      	mov	r1, r6
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7ff f939 	bl	800b638 <_free_r>
 800c3c6:	e7e9      	b.n	800c39c <_realloc_r+0x1c>
 800c3c8:	4635      	mov	r5, r6
 800c3ca:	e7e7      	b.n	800c39c <_realloc_r+0x1c>

0800c3cc <_raise_r>:
 800c3cc:	291f      	cmp	r1, #31
 800c3ce:	b538      	push	{r3, r4, r5, lr}
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	460d      	mov	r5, r1
 800c3d4:	d904      	bls.n	800c3e0 <_raise_r+0x14>
 800c3d6:	2316      	movs	r3, #22
 800c3d8:	6003      	str	r3, [r0, #0]
 800c3da:	f04f 30ff 	mov.w	r0, #4294967295
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3e2:	b112      	cbz	r2, 800c3ea <_raise_r+0x1e>
 800c3e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3e8:	b94b      	cbnz	r3, 800c3fe <_raise_r+0x32>
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f000 f830 	bl	800c450 <_getpid_r>
 800c3f0:	462a      	mov	r2, r5
 800c3f2:	4601      	mov	r1, r0
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3fa:	f000 b817 	b.w	800c42c <_kill_r>
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d00a      	beq.n	800c418 <_raise_r+0x4c>
 800c402:	1c59      	adds	r1, r3, #1
 800c404:	d103      	bne.n	800c40e <_raise_r+0x42>
 800c406:	2316      	movs	r3, #22
 800c408:	6003      	str	r3, [r0, #0]
 800c40a:	2001      	movs	r0, #1
 800c40c:	e7e7      	b.n	800c3de <_raise_r+0x12>
 800c40e:	2400      	movs	r4, #0
 800c410:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c414:	4628      	mov	r0, r5
 800c416:	4798      	blx	r3
 800c418:	2000      	movs	r0, #0
 800c41a:	e7e0      	b.n	800c3de <_raise_r+0x12>

0800c41c <raise>:
 800c41c:	4b02      	ldr	r3, [pc, #8]	; (800c428 <raise+0xc>)
 800c41e:	4601      	mov	r1, r0
 800c420:	6818      	ldr	r0, [r3, #0]
 800c422:	f7ff bfd3 	b.w	800c3cc <_raise_r>
 800c426:	bf00      	nop
 800c428:	2000003c 	.word	0x2000003c

0800c42c <_kill_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4d07      	ldr	r5, [pc, #28]	; (800c44c <_kill_r+0x20>)
 800c430:	2300      	movs	r3, #0
 800c432:	4604      	mov	r4, r0
 800c434:	4608      	mov	r0, r1
 800c436:	4611      	mov	r1, r2
 800c438:	602b      	str	r3, [r5, #0]
 800c43a:	f7f7 fed3 	bl	80041e4 <_kill>
 800c43e:	1c43      	adds	r3, r0, #1
 800c440:	d102      	bne.n	800c448 <_kill_r+0x1c>
 800c442:	682b      	ldr	r3, [r5, #0]
 800c444:	b103      	cbz	r3, 800c448 <_kill_r+0x1c>
 800c446:	6023      	str	r3, [r4, #0]
 800c448:	bd38      	pop	{r3, r4, r5, pc}
 800c44a:	bf00      	nop
 800c44c:	2000062c 	.word	0x2000062c

0800c450 <_getpid_r>:
 800c450:	f7f7 bec0 	b.w	80041d4 <_getpid>

0800c454 <__sread>:
 800c454:	b510      	push	{r4, lr}
 800c456:	460c      	mov	r4, r1
 800c458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c45c:	f000 f89c 	bl	800c598 <_read_r>
 800c460:	2800      	cmp	r0, #0
 800c462:	bfab      	itete	ge
 800c464:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c466:	89a3      	ldrhlt	r3, [r4, #12]
 800c468:	181b      	addge	r3, r3, r0
 800c46a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c46e:	bfac      	ite	ge
 800c470:	6563      	strge	r3, [r4, #84]	; 0x54
 800c472:	81a3      	strhlt	r3, [r4, #12]
 800c474:	bd10      	pop	{r4, pc}

0800c476 <__swrite>:
 800c476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47a:	461f      	mov	r7, r3
 800c47c:	898b      	ldrh	r3, [r1, #12]
 800c47e:	05db      	lsls	r3, r3, #23
 800c480:	4605      	mov	r5, r0
 800c482:	460c      	mov	r4, r1
 800c484:	4616      	mov	r6, r2
 800c486:	d505      	bpl.n	800c494 <__swrite+0x1e>
 800c488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48c:	2302      	movs	r3, #2
 800c48e:	2200      	movs	r2, #0
 800c490:	f000 f868 	bl	800c564 <_lseek_r>
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c49a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c49e:	81a3      	strh	r3, [r4, #12]
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	463b      	mov	r3, r7
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4aa:	f000 b817 	b.w	800c4dc <_write_r>

0800c4ae <__sseek>:
 800c4ae:	b510      	push	{r4, lr}
 800c4b0:	460c      	mov	r4, r1
 800c4b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b6:	f000 f855 	bl	800c564 <_lseek_r>
 800c4ba:	1c43      	adds	r3, r0, #1
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	bf15      	itete	ne
 800c4c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4ca:	81a3      	strheq	r3, [r4, #12]
 800c4cc:	bf18      	it	ne
 800c4ce:	81a3      	strhne	r3, [r4, #12]
 800c4d0:	bd10      	pop	{r4, pc}

0800c4d2 <__sclose>:
 800c4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d6:	f000 b813 	b.w	800c500 <_close_r>
	...

0800c4dc <_write_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4d07      	ldr	r5, [pc, #28]	; (800c4fc <_write_r+0x20>)
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	602a      	str	r2, [r5, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f7f7 feb1 	bl	8004252 <_write>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d102      	bne.n	800c4fa <_write_r+0x1e>
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <_write_r+0x1e>
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	2000062c 	.word	0x2000062c

0800c500 <_close_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4d06      	ldr	r5, [pc, #24]	; (800c51c <_close_r+0x1c>)
 800c504:	2300      	movs	r3, #0
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	602b      	str	r3, [r5, #0]
 800c50c:	f7f7 febd 	bl	800428a <_close>
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d102      	bne.n	800c51a <_close_r+0x1a>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b103      	cbz	r3, 800c51a <_close_r+0x1a>
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	2000062c 	.word	0x2000062c

0800c520 <_fstat_r>:
 800c520:	b538      	push	{r3, r4, r5, lr}
 800c522:	4d07      	ldr	r5, [pc, #28]	; (800c540 <_fstat_r+0x20>)
 800c524:	2300      	movs	r3, #0
 800c526:	4604      	mov	r4, r0
 800c528:	4608      	mov	r0, r1
 800c52a:	4611      	mov	r1, r2
 800c52c:	602b      	str	r3, [r5, #0]
 800c52e:	f7f7 feb8 	bl	80042a2 <_fstat>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	d102      	bne.n	800c53c <_fstat_r+0x1c>
 800c536:	682b      	ldr	r3, [r5, #0]
 800c538:	b103      	cbz	r3, 800c53c <_fstat_r+0x1c>
 800c53a:	6023      	str	r3, [r4, #0]
 800c53c:	bd38      	pop	{r3, r4, r5, pc}
 800c53e:	bf00      	nop
 800c540:	2000062c 	.word	0x2000062c

0800c544 <_isatty_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4d06      	ldr	r5, [pc, #24]	; (800c560 <_isatty_r+0x1c>)
 800c548:	2300      	movs	r3, #0
 800c54a:	4604      	mov	r4, r0
 800c54c:	4608      	mov	r0, r1
 800c54e:	602b      	str	r3, [r5, #0]
 800c550:	f7f7 feb7 	bl	80042c2 <_isatty>
 800c554:	1c43      	adds	r3, r0, #1
 800c556:	d102      	bne.n	800c55e <_isatty_r+0x1a>
 800c558:	682b      	ldr	r3, [r5, #0]
 800c55a:	b103      	cbz	r3, 800c55e <_isatty_r+0x1a>
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	2000062c 	.word	0x2000062c

0800c564 <_lseek_r>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4d07      	ldr	r5, [pc, #28]	; (800c584 <_lseek_r+0x20>)
 800c568:	4604      	mov	r4, r0
 800c56a:	4608      	mov	r0, r1
 800c56c:	4611      	mov	r1, r2
 800c56e:	2200      	movs	r2, #0
 800c570:	602a      	str	r2, [r5, #0]
 800c572:	461a      	mov	r2, r3
 800c574:	f7f7 feb0 	bl	80042d8 <_lseek>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d102      	bne.n	800c582 <_lseek_r+0x1e>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	b103      	cbz	r3, 800c582 <_lseek_r+0x1e>
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	2000062c 	.word	0x2000062c

0800c588 <_malloc_usable_size_r>:
 800c588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c58c:	1f18      	subs	r0, r3, #4
 800c58e:	2b00      	cmp	r3, #0
 800c590:	bfbc      	itt	lt
 800c592:	580b      	ldrlt	r3, [r1, r0]
 800c594:	18c0      	addlt	r0, r0, r3
 800c596:	4770      	bx	lr

0800c598 <_read_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4d07      	ldr	r5, [pc, #28]	; (800c5b8 <_read_r+0x20>)
 800c59c:	4604      	mov	r4, r0
 800c59e:	4608      	mov	r0, r1
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	602a      	str	r2, [r5, #0]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f7f7 fe36 	bl	8004218 <_read>
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	d102      	bne.n	800c5b6 <_read_r+0x1e>
 800c5b0:	682b      	ldr	r3, [r5, #0]
 800c5b2:	b103      	cbz	r3, 800c5b6 <_read_r+0x1e>
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	2000062c 	.word	0x2000062c

0800c5bc <_init>:
 800c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5be:	bf00      	nop
 800c5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c2:	bc08      	pop	{r3}
 800c5c4:	469e      	mov	lr, r3
 800c5c6:	4770      	bx	lr

0800c5c8 <_fini>:
 800c5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ca:	bf00      	nop
 800c5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ce:	bc08      	pop	{r3}
 800c5d0:	469e      	mov	lr, r3
 800c5d2:	4770      	bx	lr
